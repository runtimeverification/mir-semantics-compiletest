// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/example-calendar.rs:15:16: 15:21>::clone(_1: &NaiveDate) -> NaiveDate {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:15:16: 15:21
    let mut _0: NaiveDate;               // return place in scope 0 at ui/impl-trait/example-calendar.rs:15:16: 15:21
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at ui/impl-trait/example-calendar.rs:15:16: 15:21
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:15:21: 15:21
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:15:23: 15:28>::fmt(_1: &NaiveDate, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:15:23: 15:28
    debug f => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:15:23: 15:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:15:23: 15:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/impl-trait/example-calendar.rs:15:23: 15:28
    let mut _4: &str;                    // in scope 0 at ui/impl-trait/example-calendar.rs:15:23: 15:28
    let _5: &str;                        // in scope 0 at ui/impl-trait/example-calendar.rs:15:23: 15:28
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let mut _7: &i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let _8: &i32;                        // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let mut _10: &u32;                   // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let _11: &u32;                       // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
    let mut _13: &&u32;                  // in scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
    let _14: &&u32;                      // in scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
    let _15: &u32;                       // in scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/impl-trait/example-calendar.rs:15:23: 15:28
        _5 = const "NaiveDate";          // scope 0 at ui/impl-trait/example-calendar.rs:15:23: 15:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:15:23: 15:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/impl-trait/example-calendar.rs:15:23: 15:28
        _8 = &((*_1).0: i32);            // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        _7 = _8;                         // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        _11 = &((*_1).1: u32);           // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        _10 = _11;                       // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        _15 = &((*_1).2: u32);           // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        _14 = &_15;                      // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        _13 = _14;                       // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        _12 = move _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        _0 = Formatter::<'_>::debug_tuple_field3_finish(move _3, move _4, move _6, move _9, move _12) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:15:23: 15:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:15:23: 15:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd), &'e (dyn Debug + 'e)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:15:28: 15:28
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:15:30: 15:32>::assert_receiver_is_total_eq(_1: &NaiveDate) -> () {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:15:30: 15:32
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/example-calendar.rs:15:30: 15:32
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:15:32: 15:32
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:15:34: 15:37>::cmp(_1: &NaiveDate, _2: &NaiveDate) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:15:34: 15:37
    debug other => _2;                   // in scope 0 at ui/impl-trait/example-calendar.rs:15:34: 15:37
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/impl-trait/example-calendar.rs:15:34: 15:37
    let mut _3: std::cmp::Ordering;      // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let mut _4: &i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let _5: &i32;                        // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let mut _6: &i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let _7: &i32;                        // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let mut _8: i8;                      // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let mut _9: std::cmp::Ordering;      // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let mut _10: &u32;                   // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let _11: &u32;                       // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let mut _12: &u32;                   // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let _13: &u32;                       // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let mut _14: i8;                     // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let mut _15: &u32;                   // in scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
    let _16: &u32;                       // in scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
    let mut _17: &u32;                   // in scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
    let _18: &u32;                       // in scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
    let _19: std::cmp::Ordering;         // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let _20: std::cmp::Ordering;         // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    scope 1 {
        debug cmp => _19;                // in scope 1 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    }
    scope 2 {
        debug cmp => _20;                // in scope 2 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    }

    bb0: {
        _5 = &((*_1).0: i32);            // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        _4 = _5;                         // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        _7 = &((*_2).0: i32);            // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        _6 = _7;                         // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        _3 = <i32 as Ord>::cmp(move _4, move _6) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:16:18: 16:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b i32) -> std::cmp::Ordering {<i32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = discriminant(_3);           // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    }

    bb2: {
        _20 = _3;                        // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        _0 = _20;                        // scope 2 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        goto -> bb7;                     // scope 0 at ui/impl-trait/example-calendar.rs:16:20: 16:21
    }

    bb3: {
        _11 = &((*_1).1: u32);           // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        _10 = _11;                       // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        _13 = &((*_2).1: u32);           // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        _12 = _13;                       // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        _9 = <u32 as Ord>::cmp(move _10, move _12) -> bb4; // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:16:23: 16:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = discriminant(_9);          // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    }

    bb5: {
        _19 = _9;                        // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        _0 = _19;                        // scope 1 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        goto -> bb7;                     // scope 0 at ui/impl-trait/example-calendar.rs:16:25: 16:26
    }

    bb6: {
        _16 = &((*_1).2: u32);           // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        _15 = _16;                       // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        _18 = &((*_2).2: u32);           // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        _17 = _18;                       // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        _0 = <u32 as Ord>::cmp(move _15, move _17) -> bb7; // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:16:28: 16:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:15:37: 15:37
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:15:39: 15:48>::eq(_1: &NaiveDate, _2: &NaiveDate) -> bool {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:15:39: 15:48
    debug other => _2;                   // in scope 0 at ui/impl-trait/example-calendar.rs:15:39: 15:48
    let mut _0: bool;                    // return place in scope 0 at ui/impl-trait/example-calendar.rs:15:39: 15:48
    let mut _3: bool;                    // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let mut _4: bool;                    // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let mut _5: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let mut _6: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let mut _7: bool;                    // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let mut _8: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let mut _9: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let mut _10: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
    let mut _11: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
    let mut _12: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31

    bb0: {
        _5 = ((*_1).0: i32);             // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        _6 = ((*_2).0: i32);             // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        _4 = Eq(move _5, move _6);       // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        goto -> bb3;                     // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
    }

    bb2: {
        _11 = ((*_1).2: u32);            // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        _12 = ((*_2).2: u32);            // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        _10 = Eq(move _11, move _12);    // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        _0 = move _10;                   // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        goto -> bb3;                     // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
    }

    bb3: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:15:48: 15:48
    }

    bb4: {
        _3 = const false;                // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        goto -> bb6;                     // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    }

    bb5: {
        _8 = ((*_1).1: u32);             // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        _9 = ((*_2).1: u32);             // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        _7 = Eq(move _8, move _9);       // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        _3 = move _7;                    // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        goto -> bb6;                     // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:15:50: 15:60>::partial_cmp(_1: &NaiveDate, _2: &NaiveDate) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:15:50: 15:60
    debug other => _2;                   // in scope 0 at ui/impl-trait/example-calendar.rs:15:50: 15:60
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:15:50: 15:60
    let mut _3: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let mut _4: &i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let _5: &i32;                        // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let mut _6: &i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let _7: &i32;                        // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let mut _8: i8;                      // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let mut _9: isize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    let mut _10: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let mut _11: &u32;                   // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let _12: &u32;                       // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let mut _13: &u32;                   // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let _14: &u32;                       // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let mut _15: i8;                     // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let mut _16: isize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let mut _17: &u32;                   // in scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
    let _18: &u32;                       // in scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
    let mut _19: &u32;                   // in scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
    let _20: &u32;                       // in scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
    let _21: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    let _22: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    scope 1 {
        debug cmp => _21;                // in scope 1 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    }
    scope 2 {
        debug cmp => _22;                // in scope 2 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    }

    bb0: {
        _5 = &((*_1).0: i32);            // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        _4 = _5;                         // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        _7 = &((*_2).0: i32);            // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        _6 = _7;                         // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        _3 = <i32 as PartialOrd>::partial_cmp(move _4, move _6) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:16:18: 16:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b i32) -> Option<std::cmp::Ordering> {<i32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = discriminant(_3);           // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        switchInt(move _9) -> [1: bb3, otherwise: bb2]; // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    }

    bb2: {
        _22 = _3;                        // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        _0 = _22;                        // scope 2 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:16:20: 16:21
    }

    bb3: {
        _8 = discriminant(((_3 as Some).0: std::cmp::Ordering)); // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
        switchInt(move _8) -> [0: bb4, otherwise: bb2]; // scope 0 at ui/impl-trait/example-calendar.rs:16:18: 16:21
    }

    bb4: {
        _12 = &((*_1).1: u32);           // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        _11 = _12;                       // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        _14 = &((*_2).1: u32);           // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        _13 = _14;                       // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        _10 = <u32 as PartialOrd>::partial_cmp(move _11, move _13) -> bb5; // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:16:23: 16:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = discriminant(_10);         // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        switchInt(move _16) -> [1: bb7, otherwise: bb6]; // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    }

    bb6: {
        _21 = _10;                       // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        _0 = _21;                        // scope 1 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:16:25: 16:26
    }

    bb7: {
        _15 = discriminant(((_10 as Some).0: std::cmp::Ordering)); // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
        switchInt(move _15) -> [0: bb8, otherwise: bb6]; // scope 0 at ui/impl-trait/example-calendar.rs:16:23: 16:26
    }

    bb8: {
        _18 = &((*_1).2: u32);           // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        _17 = _18;                       // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        _20 = &((*_2).2: u32);           // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        _19 = _20;                       // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
        _0 = <u32 as PartialOrd>::partial_cmp(move _17, move _19) -> bb9; // scope 0 at ui/impl-trait/example-calendar.rs:16:28: 16:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:16:28: 16:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:15:60: 15:60
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::from_ymd(_1: i32, _2: u32, _3: u32) -> NaiveDate {
    debug y => _1;                       // in scope 0 at ui/impl-trait/example-calendar.rs:19:21: 19:22
    debug m => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:19:29: 19:30
    debug d => _3;                       // in scope 0 at ui/impl-trait/example-calendar.rs:19:37: 19:38
    let mut _0: NaiveDate;               // return place in scope 0 at ui/impl-trait/example-calendar.rs:19:48: 19:57
    let mut _4: bool;                    // in scope 0 at ui/impl-trait/example-calendar.rs:20:9: 20:50
    let mut _5: bool;                    // in scope 0 at ui/impl-trait/example-calendar.rs:20:17: 20:34
    let mut _6: bool;                    // in scope 0 at ui/impl-trait/example-calendar.rs:20:17: 20:23
    let mut _7: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:20:22: 20:23
    let mut _8: bool;                    // in scope 0 at ui/impl-trait/example-calendar.rs:20:27: 20:34
    let mut _9: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:20:27: 20:28
    let mut _10: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _11: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _12: &[&str];                // in scope 0 at ui/impl-trait/example-calendar.rs:20:36: 20:46
    let mut _13: &[&str; 1];             // in scope 0 at ui/impl-trait/example-calendar.rs:20:36: 20:46
    let _14: &[&str; 1];                 // in scope 0 at ui/impl-trait/example-calendar.rs:20:36: 20:46
    let mut _15: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _16: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _17: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _18: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _19: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/example-calendar.rs:20:48: 20:49
    let mut _20: &u32;                   // in scope 0 at ui/impl-trait/example-calendar.rs:20:48: 20:49
    let _21: &u32;                       // in scope 0 at ui/impl-trait/example-calendar.rs:20:48: 20:49
    let mut _22: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:21:9: 21:82
    let mut _23: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:21:17: 21:66
    let mut _24: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:21:17: 21:23
    let mut _25: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:21:22: 21:23
    let mut _26: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:21:27: 21:66
    let mut _27: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:21:27: 21:28
    let mut _28: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:21:32: 21:66
    let mut _29: &NaiveDate;             // in scope 0 at ui/impl-trait/example-calendar.rs:21:32: 21:66
    let _30: NaiveDate;                  // in scope 0 at ui/impl-trait/example-calendar.rs:21:32: 21:50
    let mut _31: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:21:42: 21:43
    let mut _32: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:21:45: 21:46
    let mut _33: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _34: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _35: &[&str];                // in scope 0 at ui/impl-trait/example-calendar.rs:21:68: 21:78
    let mut _36: &[&str; 1];             // in scope 0 at ui/impl-trait/example-calendar.rs:21:68: 21:78
    let _37: &[&str; 1];                 // in scope 0 at ui/impl-trait/example-calendar.rs:21:68: 21:78
    let mut _38: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _39: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _40: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _41: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _42: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/example-calendar.rs:21:80: 21:81
    let mut _43: &u32;                   // in scope 0 at ui/impl-trait/example-calendar.rs:21:80: 21:81
    let _44: &u32;                       // in scope 0 at ui/impl-trait/example-calendar.rs:21:80: 21:81
    let mut _45: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:22:19: 22:20
    let mut _46: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:22:22: 22:23
    let mut _47: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:22:25: 22:26
    let mut _48: &[&str; 1];             // in scope 0 at ui/impl-trait/example-calendar.rs:21:68: 21:78
    let mut _49: &[&str; 1];             // in scope 0 at ui/impl-trait/example-calendar.rs:20:36: 20:46

    bb0: {
        _7 = _2;                         // scope 0 at ui/impl-trait/example-calendar.rs:20:22: 20:23
        _6 = Le(const 1_u32, move _7);   // scope 0 at ui/impl-trait/example-calendar.rs:20:17: 20:23
        switchInt(move _6) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/impl-trait/example-calendar.rs:20:17: 20:34
    }

    bb1: {
        _5 = const false;                // scope 0 at ui/impl-trait/example-calendar.rs:20:17: 20:34
        goto -> bb3;                     // scope 0 at ui/impl-trait/example-calendar.rs:20:17: 20:34
    }

    bb2: {
        _9 = _2;                         // scope 0 at ui/impl-trait/example-calendar.rs:20:27: 20:28
        _8 = Le(move _9, const 12_u32);  // scope 0 at ui/impl-trait/example-calendar.rs:20:27: 20:34
        _5 = move _8;                    // scope 0 at ui/impl-trait/example-calendar.rs:20:17: 20:34
        goto -> bb3;                     // scope 0 at ui/impl-trait/example-calendar.rs:20:17: 20:34
    }

    bb3: {
        _4 = Not(move _5);               // scope 0 at ui/impl-trait/example-calendar.rs:20:9: 20:50
        switchInt(move _4) -> [0: bb7, otherwise: bb4]; // scope 0 at ui/impl-trait/example-calendar.rs:20:9: 20:50
    }

    bb4: {
        _49 = const _;                   // scope 0 at ui/impl-trait/example-calendar.rs:20:36: 20:46
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:20:36: 20:46
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(NaiveDate::from_ymd, [], Some(promoted[1])) }
        _14 = _49;                       // scope 0 at ui/impl-trait/example-calendar.rs:20:36: 20:46
        _13 = _14;                       // scope 0 at ui/impl-trait/example-calendar.rs:20:36: 20:46
        _12 = move _13 as &[&str] (Pointer(Unsize)); // scope 0 at ui/impl-trait/example-calendar.rs:20:36: 20:46
        _21 = &_2;                       // scope 0 at ui/impl-trait/example-calendar.rs:20:48: 20:49
        _20 = _21;                       // scope 0 at ui/impl-trait/example-calendar.rs:20:48: 20:49
        _19 = core::fmt::ArgumentV1::<'_>::new_debug::<u32>(move _20) -> bb5; // scope 0 at ui/impl-trait/example-calendar.rs:20:48: 20:49
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:20:48: 20:49
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<u32>}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = [move _19];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _17 = &_18;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _16 = _17;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _15 = move _16 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _11 = Arguments::<'_>::new_v1(move _12, move _15) -> bb6; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = panic_fmt(move _11);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb7: {
        _25 = _3;                        // scope 0 at ui/impl-trait/example-calendar.rs:21:22: 21:23
        _24 = Le(const 1_u32, move _25); // scope 0 at ui/impl-trait/example-calendar.rs:21:17: 21:23
        switchInt(move _24) -> [0: bb8, otherwise: bb9]; // scope 0 at ui/impl-trait/example-calendar.rs:21:17: 21:66
    }

    bb8: {
        _23 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:21:17: 21:66
        goto -> bb10;                    // scope 0 at ui/impl-trait/example-calendar.rs:21:17: 21:66
    }

    bb9: {
        _27 = _3;                        // scope 0 at ui/impl-trait/example-calendar.rs:21:27: 21:28
        _31 = _1;                        // scope 0 at ui/impl-trait/example-calendar.rs:21:42: 21:43
        _32 = _2;                        // scope 0 at ui/impl-trait/example-calendar.rs:21:45: 21:46
        _30 = NaiveDate(move _31, move _32, const 1_u32); // scope 0 at ui/impl-trait/example-calendar.rs:21:32: 21:50
        _29 = &_30;                      // scope 0 at ui/impl-trait/example-calendar.rs:21:32: 21:66
        _28 = NaiveDate::days_in_month(move _29) -> bb11; // scope 0 at ui/impl-trait/example-calendar.rs:21:32: 21:66
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:21:51: 21:64
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> u32 {NaiveDate::days_in_month}, val: Value(<ZST>) }
    }

    bb10: {
        _22 = Not(move _23);             // scope 0 at ui/impl-trait/example-calendar.rs:21:9: 21:82
        switchInt(move _22) -> [0: bb15, otherwise: bb12]; // scope 0 at ui/impl-trait/example-calendar.rs:21:9: 21:82
    }

    bb11: {
        _26 = Le(move _27, move _28);    // scope 0 at ui/impl-trait/example-calendar.rs:21:27: 21:66
        _23 = move _26;                  // scope 0 at ui/impl-trait/example-calendar.rs:21:17: 21:66
        goto -> bb10;                    // scope 0 at ui/impl-trait/example-calendar.rs:21:17: 21:66
    }

    bb12: {
        _48 = const _;                   // scope 0 at ui/impl-trait/example-calendar.rs:21:68: 21:78
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:21:68: 21:78
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(NaiveDate::from_ymd, [], Some(promoted[0])) }
        _37 = _48;                       // scope 0 at ui/impl-trait/example-calendar.rs:21:68: 21:78
        _36 = _37;                       // scope 0 at ui/impl-trait/example-calendar.rs:21:68: 21:78
        _35 = move _36 as &[&str] (Pointer(Unsize)); // scope 0 at ui/impl-trait/example-calendar.rs:21:68: 21:78
        _44 = &_3;                       // scope 0 at ui/impl-trait/example-calendar.rs:21:80: 21:81
        _43 = _44;                       // scope 0 at ui/impl-trait/example-calendar.rs:21:80: 21:81
        _42 = core::fmt::ArgumentV1::<'_>::new_debug::<u32>(move _43) -> bb13; // scope 0 at ui/impl-trait/example-calendar.rs:21:80: 21:81
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:21:80: 21:81
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<u32>}, val: Value(<ZST>) }
    }

    bb13: {
        _41 = [move _42];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _40 = &_41;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _39 = _40;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _38 = move _39 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _34 = Arguments::<'_>::new_v1(move _35, move _38) -> bb14; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb14: {
        _33 = panic_fmt(move _34);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb15: {
        _45 = _1;                        // scope 0 at ui/impl-trait/example-calendar.rs:22:19: 22:20
        _46 = _2;                        // scope 0 at ui/impl-trait/example-calendar.rs:22:22: 22:23
        _47 = _3;                        // scope 0 at ui/impl-trait/example-calendar.rs:22:25: 22:26
        _0 = NaiveDate(move _45, move _46, move _47); // scope 0 at ui/impl-trait/example-calendar.rs:22:9: 22:27
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:23:6: 23:6
    }
}

promoted[0] in <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::from_ymd: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/impl-trait/example-calendar.rs:21:68: 21:78
    let mut _1: [&str; 1];               // in scope 0 at ui/impl-trait/example-calendar.rs:21:68: 21:78

    bb0: {
        _1 = [const "d = "];             // scope 0 at ui/impl-trait/example-calendar.rs:21:68: 21:78
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:21:68: 21:78
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:21:68: 21:78
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:21:68: 21:78
    }
}

promoted[1] in <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::from_ymd: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/impl-trait/example-calendar.rs:20:36: 20:46
    let mut _1: [&str; 1];               // in scope 0 at ui/impl-trait/example-calendar.rs:20:36: 20:46

    bb0: {
        _1 = [const "m = "];             // scope 0 at ui/impl-trait/example-calendar.rs:20:36: 20:46
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:20:36: 20:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:20:36: 20:46
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:20:36: 20:46
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::year(_1: &NaiveDate) -> i32 {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:25:17: 25:22
    let mut _0: i32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:25:27: 25:30

    bb0: {
        _0 = ((*_1).0: i32);             // scope 0 at ui/impl-trait/example-calendar.rs:26:9: 26:15
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:27:6: 27:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::month(_1: &NaiveDate) -> u32 {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:29:18: 29:23
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:29:28: 29:31

    bb0: {
        _0 = ((*_1).1: u32);             // scope 0 at ui/impl-trait/example-calendar.rs:30:9: 30:15
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:31:6: 31:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::day(_1: &NaiveDate) -> u32 {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:33:16: 33:21
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:33:26: 33:29

    bb0: {
        _0 = ((*_1).2: u32);             // scope 0 at ui/impl-trait/example-calendar.rs:34:9: 34:15
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:35:6: 35:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::succ(_1: &NaiveDate) -> NaiveDate {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:37:17: 37:22
    let mut _0: NaiveDate;               // return place in scope 0 at ui/impl-trait/example-calendar.rs:37:27: 37:36
    let mut _2: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:38:14: 38:19
    let mut _3: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:38:21: 38:26
    let mut _4: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:38:28: 38:33
    let _5: u32;                         // in scope 0 at ui/impl-trait/example-calendar.rs:38:35: 38:36
    let mut _6: (i32, u32, u32, u32);    // in scope 0 at ui/impl-trait/example-calendar.rs:38:40: 39:75
    let mut _7: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:39:13: 39:24
    let mut _8: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:39:13: 39:24
    let mut _9: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:39:26: 39:38
    let mut _10: &NaiveDate;             // in scope 0 at ui/impl-trait/example-calendar.rs:39:26: 39:38
    let mut _11: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:39:40: 39:52
    let mut _12: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:39:40: 39:50
    let mut _13: &NaiveDate;             // in scope 0 at ui/impl-trait/example-calendar.rs:39:40: 39:50
    let mut _14: (u32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:39:40: 39:52
    let mut _15: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:39:54: 39:74
    let mut _16: &NaiveDate;             // in scope 0 at ui/impl-trait/example-calendar.rs:39:54: 39:74
    let mut _17: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:40:12: 40:17
    let mut _18: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:40:12: 40:13
    let mut _19: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:40:16: 40:17
    let mut _20: (u32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:42:13: 42:19
    let mut _21: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:44:12: 44:18
    let mut _22: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:44:12: 44:13
    let mut _23: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:46:13: 46:19
    let mut _24: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:48:29: 48:30
    let mut _25: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:48:32: 48:33
    let mut _26: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:48:35: 48:36
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/impl-trait/example-calendar.rs:38:14: 38:19
        debug m => _3;                   // in scope 1 at ui/impl-trait/example-calendar.rs:38:21: 38:26
        debug d => _4;                   // in scope 1 at ui/impl-trait/example-calendar.rs:38:28: 38:33
        debug n => _5;                   // in scope 1 at ui/impl-trait/example-calendar.rs:38:35: 38:36
    }

    bb0: {
        _8 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:39:13: 39:24
        _7 = NaiveDate::year(move _8) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:39:13: 39:24
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:39:18: 39:22
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> i32 {NaiveDate::year}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = _1;                        // scope 0 at ui/impl-trait/example-calendar.rs:39:26: 39:38
        _9 = NaiveDate::month(move _10) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:39:26: 39:38
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:39:31: 39:36
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> u32 {NaiveDate::month}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = _1;                        // scope 0 at ui/impl-trait/example-calendar.rs:39:40: 39:50
        _12 = NaiveDate::day(move _13) -> bb3; // scope 0 at ui/impl-trait/example-calendar.rs:39:40: 39:50
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:39:45: 39:48
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> u32 {NaiveDate::day}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = CheckedAdd(_12, const 1_u32); // scope 0 at ui/impl-trait/example-calendar.rs:39:40: 39:52
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _12, const 1_u32) -> bb4; // scope 0 at ui/impl-trait/example-calendar.rs:39:40: 39:52
    }

    bb4: {
        _11 = move (_14.0: u32);         // scope 0 at ui/impl-trait/example-calendar.rs:39:40: 39:52
        _16 = _1;                        // scope 0 at ui/impl-trait/example-calendar.rs:39:54: 39:74
        _15 = NaiveDate::days_in_month(move _16) -> bb5; // scope 0 at ui/impl-trait/example-calendar.rs:39:54: 39:74
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:39:59: 39:72
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> u32 {NaiveDate::days_in_month}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = (move _7, move _9, move _11, move _15); // scope 0 at ui/impl-trait/example-calendar.rs:38:40: 39:75
        _2 = (_6.0: i32);                // scope 0 at ui/impl-trait/example-calendar.rs:38:14: 38:19
        _3 = (_6.1: u32);                // scope 0 at ui/impl-trait/example-calendar.rs:38:21: 38:26
        _4 = (_6.2: u32);                // scope 0 at ui/impl-trait/example-calendar.rs:38:28: 38:33
        _5 = (_6.3: u32);                // scope 0 at ui/impl-trait/example-calendar.rs:38:35: 38:36
        _18 = _4;                        // scope 1 at ui/impl-trait/example-calendar.rs:40:12: 40:13
        _19 = _5;                        // scope 1 at ui/impl-trait/example-calendar.rs:40:16: 40:17
        _17 = Gt(move _18, move _19);    // scope 1 at ui/impl-trait/example-calendar.rs:40:12: 40:17
        switchInt(move _17) -> [0: bb8, otherwise: bb6]; // scope 1 at ui/impl-trait/example-calendar.rs:40:12: 40:17
    }

    bb6: {
        _4 = const 1_u32;                // scope 1 at ui/impl-trait/example-calendar.rs:41:13: 41:18
        _20 = CheckedAdd(_3, const 1_u32); // scope 1 at ui/impl-trait/example-calendar.rs:42:13: 42:19
        assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 1_u32) -> bb7; // scope 1 at ui/impl-trait/example-calendar.rs:42:13: 42:19
    }

    bb7: {
        _3 = move (_20.0: u32);          // scope 1 at ui/impl-trait/example-calendar.rs:42:13: 42:19
        goto -> bb8;                     // scope 1 at ui/impl-trait/example-calendar.rs:40:9: 43:10
    }

    bb8: {
        _22 = _3;                        // scope 1 at ui/impl-trait/example-calendar.rs:44:12: 44:13
        _21 = Gt(move _22, const 12_u32); // scope 1 at ui/impl-trait/example-calendar.rs:44:12: 44:18
        switchInt(move _21) -> [0: bb11, otherwise: bb9]; // scope 1 at ui/impl-trait/example-calendar.rs:44:12: 44:18
    }

    bb9: {
        _3 = const 1_u32;                // scope 1 at ui/impl-trait/example-calendar.rs:45:13: 45:18
        _23 = CheckedAdd(_2, const 1_i32); // scope 1 at ui/impl-trait/example-calendar.rs:46:13: 46:19
        assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_i32) -> bb10; // scope 1 at ui/impl-trait/example-calendar.rs:46:13: 46:19
    }

    bb10: {
        _2 = move (_23.0: i32);          // scope 1 at ui/impl-trait/example-calendar.rs:46:13: 46:19
        goto -> bb11;                    // scope 1 at ui/impl-trait/example-calendar.rs:44:9: 47:10
    }

    bb11: {
        _24 = _2;                        // scope 1 at ui/impl-trait/example-calendar.rs:48:29: 48:30
        _25 = _3;                        // scope 1 at ui/impl-trait/example-calendar.rs:48:32: 48:33
        _26 = _4;                        // scope 1 at ui/impl-trait/example-calendar.rs:48:35: 48:36
        _0 = NaiveDate::from_ymd(move _24, move _25, move _26) -> bb12; // scope 1 at ui/impl-trait/example-calendar.rs:48:9: 48:37
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:48:9: 48:28
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:49:6: 49:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::weekday(_1: &NaiveDate) -> Weekday {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:51:20: 51:25
    let mut _0: Weekday;                 // return place in scope 0 at ui/impl-trait/example-calendar.rs:51:30: 51:37
    let _2: i32;                         // in scope 0 at ui/impl-trait/example-calendar.rs:55:13: 55:17
    let mut _3: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:55:20: 55:31
    let mut _5: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:56:25: 56:90
    let mut _6: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:56:26: 56:70
    let mut _7: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:56:26: 56:51
    let mut _8: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:56:26: 56:34
    let mut _9: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:56:26: 56:30
    let mut _10: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:56:26: 56:34
    let mut _11: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:56:37: 56:51
    let mut _12: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:56:38: 56:46
    let mut _13: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:56:39: 56:43
    let mut _14: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:56:38: 56:46
    let mut _15: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:56:26: 56:51
    let mut _16: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:56:54: 56:70
    let mut _17: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:56:55: 56:63
    let mut _18: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:56:56: 56:60
    let mut _19: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:56:55: 56:63
    let mut _20: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:56:26: 56:70
    let mut _21: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:56:73: 56:89
    let mut _22: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:56:74: 56:82
    let mut _23: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:56:75: 56:79
    let mut _24: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:56:74: 56:82
    let mut _25: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:56:25: 56:90
    let mut _27: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:57:19: 57:64
    let mut _28: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:57:20: 57:29
    let mut _29: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:57:32: 57:63
    let mut _30: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:57:33: 57:58
    let mut _31: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:57:33: 57:51
    let mut _32: &NaiveDate;             // in scope 0 at ui/impl-trait/example-calendar.rs:57:33: 57:51
    let mut _33: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:57:32: 57:63
    let mut _34: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:57:19: 57:64
    let mut _35: [Weekday; 7];           // in scope 0 at ui/impl-trait/example-calendar.rs:58:9: 58:44
    let mut _36: Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:58:10: 58:13
    let mut _37: Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:58:15: 58:18
    let mut _38: Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:58:20: 58:23
    let mut _39: Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:58:25: 58:28
    let mut _40: Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:58:30: 58:33
    let mut _41: Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:58:35: 58:38
    let mut _42: Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:58:40: 58:43
    let _43: usize;                      // in scope 0 at ui/impl-trait/example-calendar.rs:58:45: 58:57
    let mut _44: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:58:45: 58:48
    let mut _45: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:58:9: 58:58
    let mut _46: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:58:9: 58:58
    scope 1 {
        debug year => _2;                // in scope 1 at ui/impl-trait/example-calendar.rs:55:13: 55:17
        let _4: i32;                     // in scope 1 at ui/impl-trait/example-calendar.rs:56:13: 56:22
        scope 2 {
            debug dow_jan_1 => _4;       // in scope 2 at ui/impl-trait/example-calendar.rs:56:13: 56:22
            let _26: i32;                // in scope 2 at ui/impl-trait/example-calendar.rs:57:13: 57:16
            scope 3 {
                debug dow => _26;        // in scope 3 at ui/impl-trait/example-calendar.rs:57:13: 57:16
            }
        }
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:55:20: 55:31
        _2 = NaiveDate::year(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:55:20: 55:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:55:25: 55:29
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> i32 {NaiveDate::year}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = _2;                         // scope 1 at ui/impl-trait/example-calendar.rs:56:26: 56:30
        _10 = CheckedMul(_9, const 365_i32); // scope 1 at ui/impl-trait/example-calendar.rs:56:26: 56:34
        assert(!move (_10.1: bool), "attempt to compute `{} * {}`, which would overflow", move _9, const 365_i32) -> bb2; // scope 1 at ui/impl-trait/example-calendar.rs:56:26: 56:34
    }

    bb2: {
        _8 = move (_10.0: i32);          // scope 1 at ui/impl-trait/example-calendar.rs:56:26: 56:34
        _13 = _2;                        // scope 1 at ui/impl-trait/example-calendar.rs:56:39: 56:43
        _14 = CheckedSub(_13, const 1_i32); // scope 1 at ui/impl-trait/example-calendar.rs:56:38: 56:46
        assert(!move (_14.1: bool), "attempt to compute `{} - {}`, which would overflow", move _13, const 1_i32) -> bb3; // scope 1 at ui/impl-trait/example-calendar.rs:56:38: 56:46
    }

    bb3: {
        _12 = move (_14.0: i32);         // scope 1 at ui/impl-trait/example-calendar.rs:56:38: 56:46
        _11 = Div(move _12, const 4_i32); // scope 1 at ui/impl-trait/example-calendar.rs:56:37: 56:51
        _15 = CheckedAdd(_8, _11);       // scope 1 at ui/impl-trait/example-calendar.rs:56:26: 56:51
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, move _11) -> bb4; // scope 1 at ui/impl-trait/example-calendar.rs:56:26: 56:51
    }

    bb4: {
        _7 = move (_15.0: i32);          // scope 1 at ui/impl-trait/example-calendar.rs:56:26: 56:51
        _18 = _2;                        // scope 1 at ui/impl-trait/example-calendar.rs:56:56: 56:60
        _19 = CheckedSub(_18, const 1_i32); // scope 1 at ui/impl-trait/example-calendar.rs:56:55: 56:63
        assert(!move (_19.1: bool), "attempt to compute `{} - {}`, which would overflow", move _18, const 1_i32) -> bb5; // scope 1 at ui/impl-trait/example-calendar.rs:56:55: 56:63
    }

    bb5: {
        _17 = move (_19.0: i32);         // scope 1 at ui/impl-trait/example-calendar.rs:56:55: 56:63
        _16 = Div(move _17, const 100_i32); // scope 1 at ui/impl-trait/example-calendar.rs:56:54: 56:70
        _20 = CheckedSub(_7, _16);       // scope 1 at ui/impl-trait/example-calendar.rs:56:26: 56:70
        assert(!move (_20.1: bool), "attempt to compute `{} - {}`, which would overflow", move _7, move _16) -> bb6; // scope 1 at ui/impl-trait/example-calendar.rs:56:26: 56:70
    }

    bb6: {
        _6 = move (_20.0: i32);          // scope 1 at ui/impl-trait/example-calendar.rs:56:26: 56:70
        _23 = _2;                        // scope 1 at ui/impl-trait/example-calendar.rs:56:75: 56:79
        _24 = CheckedSub(_23, const 1_i32); // scope 1 at ui/impl-trait/example-calendar.rs:56:74: 56:82
        assert(!move (_24.1: bool), "attempt to compute `{} - {}`, which would overflow", move _23, const 1_i32) -> bb7; // scope 1 at ui/impl-trait/example-calendar.rs:56:74: 56:82
    }

    bb7: {
        _22 = move (_24.0: i32);         // scope 1 at ui/impl-trait/example-calendar.rs:56:74: 56:82
        _21 = Div(move _22, const 400_i32); // scope 1 at ui/impl-trait/example-calendar.rs:56:73: 56:89
        _25 = CheckedAdd(_6, _21);       // scope 1 at ui/impl-trait/example-calendar.rs:56:25: 56:90
        assert(!move (_25.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, move _21) -> bb8; // scope 1 at ui/impl-trait/example-calendar.rs:56:25: 56:90
    }

    bb8: {
        _5 = move (_25.0: i32);          // scope 1 at ui/impl-trait/example-calendar.rs:56:25: 56:90
        _4 = Rem(move _5, const 7_i32);  // scope 1 at ui/impl-trait/example-calendar.rs:56:25: 56:94
        _28 = _4;                        // scope 2 at ui/impl-trait/example-calendar.rs:57:20: 57:29
        _32 = _1;                        // scope 2 at ui/impl-trait/example-calendar.rs:57:33: 57:51
        _31 = NaiveDate::day_of_year(move _32) -> bb9; // scope 2 at ui/impl-trait/example-calendar.rs:57:33: 57:51
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:57:38: 57:49
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> u32 {NaiveDate::day_of_year}, val: Value(<ZST>) }
    }

    bb9: {
        _30 = move _31 as i32 (IntToInt); // scope 2 at ui/impl-trait/example-calendar.rs:57:33: 57:58
        _33 = CheckedSub(_30, const 1_i32); // scope 2 at ui/impl-trait/example-calendar.rs:57:32: 57:63
        assert(!move (_33.1: bool), "attempt to compute `{} - {}`, which would overflow", move _30, const 1_i32) -> bb10; // scope 2 at ui/impl-trait/example-calendar.rs:57:32: 57:63
    }

    bb10: {
        _29 = move (_33.0: i32);         // scope 2 at ui/impl-trait/example-calendar.rs:57:32: 57:63
        _34 = CheckedAdd(_28, _29);      // scope 2 at ui/impl-trait/example-calendar.rs:57:19: 57:64
        assert(!move (_34.1: bool), "attempt to compute `{} + {}`, which would overflow", move _28, move _29) -> bb11; // scope 2 at ui/impl-trait/example-calendar.rs:57:19: 57:64
    }

    bb11: {
        _27 = move (_34.0: i32);         // scope 2 at ui/impl-trait/example-calendar.rs:57:19: 57:64
        _26 = Rem(move _27, const 7_i32); // scope 2 at ui/impl-trait/example-calendar.rs:57:19: 57:68
        _36 = const Weekday::Sun;        // scope 3 at ui/impl-trait/example-calendar.rs:58:10: 58:13
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:58:10: 58:13
                                         // + literal: Const { ty: Weekday, val: Value(Scalar(0x06)) }
        _37 = const Weekday::Mon;        // scope 3 at ui/impl-trait/example-calendar.rs:58:15: 58:18
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:58:15: 58:18
                                         // + literal: Const { ty: Weekday, val: Value(Scalar(0x00)) }
        _38 = const Weekday::Tue;        // scope 3 at ui/impl-trait/example-calendar.rs:58:20: 58:23
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:58:20: 58:23
                                         // + literal: Const { ty: Weekday, val: Value(Scalar(0x01)) }
        _39 = const Weekday::Wed;        // scope 3 at ui/impl-trait/example-calendar.rs:58:25: 58:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:58:25: 58:28
                                         // + literal: Const { ty: Weekday, val: Value(Scalar(0x02)) }
        _40 = const Weekday::Thu;        // scope 3 at ui/impl-trait/example-calendar.rs:58:30: 58:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:58:30: 58:33
                                         // + literal: Const { ty: Weekday, val: Value(Scalar(0x03)) }
        _41 = const Weekday::Fri;        // scope 3 at ui/impl-trait/example-calendar.rs:58:35: 58:38
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:58:35: 58:38
                                         // + literal: Const { ty: Weekday, val: Value(Scalar(0x04)) }
        _42 = const Weekday::Sat;        // scope 3 at ui/impl-trait/example-calendar.rs:58:40: 58:43
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:58:40: 58:43
                                         // + literal: Const { ty: Weekday, val: Value(Scalar(0x05)) }
        _35 = [move _36, move _37, move _38, move _39, move _40, move _41, move _42]; // scope 3 at ui/impl-trait/example-calendar.rs:58:9: 58:44
        _44 = _26;                       // scope 3 at ui/impl-trait/example-calendar.rs:58:45: 58:48
        _43 = move _44 as usize (IntToInt); // scope 3 at ui/impl-trait/example-calendar.rs:58:45: 58:57
        _45 = const 7_usize;             // scope 3 at ui/impl-trait/example-calendar.rs:58:9: 58:58
        _46 = Lt(_43, _45);              // scope 3 at ui/impl-trait/example-calendar.rs:58:9: 58:58
        assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _43) -> bb12; // scope 3 at ui/impl-trait/example-calendar.rs:58:9: 58:58
    }

    bb12: {
        _0 = _35[_43];                   // scope 3 at ui/impl-trait/example-calendar.rs:58:9: 58:58
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:59:6: 59:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::isoweekdate(_1: &NaiveDate) -> (i32, u32, Weekday) {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:61:24: 61:29
    let mut _0: (i32, u32, Weekday);     // return place in scope 0 at ui/impl-trait/example-calendar.rs:61:34: 61:53
    let _2: u32;                         // in scope 0 at ui/impl-trait/example-calendar.rs:62:13: 62:28
    let mut _3: &Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:62:31: 62:83
    let _4: Weekday;                     // in scope 0 at ui/impl-trait/example-calendar.rs:62:31: 62:60
    let mut _5: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:62:31: 62:60
    let mut _7: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:65:21: 65:39
    let mut _8: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:65:21: 65:39
    let mut _9: (u32, bool);             // in scope 0 at ui/impl-trait/example-calendar.rs:65:21: 65:43
    let mut _11: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:66:35: 66:66
    let mut _12: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:66:36: 66:61
    let mut _13: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:66:37: 66:52
    let mut _14: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:66:55: 66:60
    let mut _15: (u32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:66:36: 66:61
    let mut _16: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:68:12: 68:42
    let mut _17: &NaiveDate;             // in scope 0 at ui/impl-trait/example-calendar.rs:68:12: 68:42
    let mut _18: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:69:13: 69:28
    let mut _20: &NaiveDate;             // in scope 0 at ui/impl-trait/example-calendar.rs:72:29: 72:52
    let mut _22: &NaiveDate;             // in scope 0 at ui/impl-trait/example-calendar.rs:76:20: 76:31
    let mut _24: &NaiveDate;             // in scope 0 at ui/impl-trait/example-calendar.rs:77:18: 77:32
    let mut _25: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:79:12: 79:26
    let mut _26: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:79:12: 79:22
    let mut _27: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:80:14: 80:22
    let mut _28: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:80:14: 80:18
    let mut _29: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:80:14: 80:22
    let mut _30: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:80:24: 80:78
    let mut _31: &NaiveDate;             // in scope 0 at ui/impl-trait/example-calendar.rs:80:24: 80:78
    let _32: NaiveDate;                  // in scope 0 at ui/impl-trait/example-calendar.rs:80:24: 80:59
    let mut _33: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:80:44: 80:52
    let mut _34: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:80:44: 80:48
    let mut _35: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:80:44: 80:52
    let mut _36: Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:80:80: 80:82
    let mut _37: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:81:19: 81:53
    let mut _38: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:81:19: 81:29
    let mut _39: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:81:33: 81:53
    let mut _40: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:81:33: 81:46
    let mut _41: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:82:14: 82:22
    let mut _42: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:82:14: 82:18
    let mut _43: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:82:14: 82:22
    let mut _44: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:82:24: 82:70
    let mut _45: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:82:24: 82:63
    let mut _46: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:82:25: 82:39
    let mut _47: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:82:25: 82:35
    let mut _48: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:82:25: 82:39
    let mut _49: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:82:42: 82:62
    let mut _50: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:82:42: 82:55
    let mut _51: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:82:24: 82:63
    let mut _52: Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:82:72: 82:74
    let mut _53: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:84:14: 84:18
    let mut _54: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:84:20: 84:43
    let mut _55: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:84:20: 84:36
    let mut _56: i32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:84:21: 84:31
    let mut _57: (i32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:84:20: 84:36
    let mut _58: Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:84:45: 84:47
    scope 1 {
        debug first_dow_mon_0 => _2;     // in scope 1 at ui/impl-trait/example-calendar.rs:62:13: 62:28
        let _6: u32;                     // in scope 1 at ui/impl-trait/example-calendar.rs:65:13: 65:18
        scope 2 {
            debug doy_0 => _6;           // in scope 2 at ui/impl-trait/example-calendar.rs:65:13: 65:18
            let mut _10: i32;            // in scope 2 at ui/impl-trait/example-calendar.rs:66:13: 66:27
            scope 3 {
                debug week_mon_0 => _10; // in scope 3 at ui/impl-trait/example-calendar.rs:66:13: 66:27
                let _19: u32;            // in scope 3 at ui/impl-trait/example-calendar.rs:72:13: 72:26
                scope 4 {
                    debug weeks_in_year => _19; // in scope 4 at ui/impl-trait/example-calendar.rs:72:13: 72:26
                    let _21: i32;        // in scope 4 at ui/impl-trait/example-calendar.rs:76:13: 76:17
                    scope 5 {
                        debug year => _21; // in scope 5 at ui/impl-trait/example-calendar.rs:76:13: 76:17
                        let _23: Weekday; // in scope 5 at ui/impl-trait/example-calendar.rs:77:13: 77:15
                        scope 6 {
                            debug wd => _23; // in scope 6 at ui/impl-trait/example-calendar.rs:77:13: 77:15
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:62:31: 62:60
        _4 = NaiveDate::year_first_day_of_week(move _5) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:62:31: 62:60
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:62:36: 62:58
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> Weekday {NaiveDate::year_first_day_of_week}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at ui/impl-trait/example-calendar.rs:62:31: 62:83
        _2 = Weekday::num_days_from_monday(move _3) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:62:31: 62:83
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:62:61: 62:81
                                         // + literal: Const { ty: for<'a> fn(&'a Weekday) -> u32 {Weekday::num_days_from_monday}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _1;                         // scope 1 at ui/impl-trait/example-calendar.rs:65:21: 65:39
        _7 = NaiveDate::day_of_year(move _8) -> bb3; // scope 1 at ui/impl-trait/example-calendar.rs:65:21: 65:39
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:65:26: 65:37
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> u32 {NaiveDate::day_of_year}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = CheckedSub(_7, const 1_u32); // scope 1 at ui/impl-trait/example-calendar.rs:65:21: 65:43
        assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", move _7, const 1_u32) -> bb4; // scope 1 at ui/impl-trait/example-calendar.rs:65:21: 65:43
    }

    bb4: {
        _6 = move (_9.0: u32);           // scope 1 at ui/impl-trait/example-calendar.rs:65:21: 65:43
        _13 = _2;                        // scope 2 at ui/impl-trait/example-calendar.rs:66:37: 66:52
        _14 = _6;                        // scope 2 at ui/impl-trait/example-calendar.rs:66:55: 66:60
        _15 = CheckedAdd(_13, _14);      // scope 2 at ui/impl-trait/example-calendar.rs:66:36: 66:61
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _13, move _14) -> bb5; // scope 2 at ui/impl-trait/example-calendar.rs:66:36: 66:61
    }

    bb5: {
        _12 = move (_15.0: u32);         // scope 2 at ui/impl-trait/example-calendar.rs:66:36: 66:61
        _11 = Div(move _12, const 7_u32); // scope 2 at ui/impl-trait/example-calendar.rs:66:35: 66:66
        _10 = move _11 as i32 (IntToInt); // scope 2 at ui/impl-trait/example-calendar.rs:66:35: 66:73
        _17 = _1;                        // scope 3 at ui/impl-trait/example-calendar.rs:68:12: 68:42
        _16 = NaiveDate::first_week_in_prev_year(move _17) -> bb6; // scope 3 at ui/impl-trait/example-calendar.rs:68:12: 68:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:68:17: 68:40
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> bool {NaiveDate::first_week_in_prev_year}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _16) -> [0: bb9, otherwise: bb7]; // scope 3 at ui/impl-trait/example-calendar.rs:68:12: 68:42
    }

    bb7: {
        _18 = CheckedSub(_10, const 1_i32); // scope 3 at ui/impl-trait/example-calendar.rs:69:13: 69:28
        assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", _10, const 1_i32) -> bb8; // scope 3 at ui/impl-trait/example-calendar.rs:69:13: 69:28
    }

    bb8: {
        _10 = move (_18.0: i32);         // scope 3 at ui/impl-trait/example-calendar.rs:69:13: 69:28
        goto -> bb9;                     // scope 3 at ui/impl-trait/example-calendar.rs:68:9: 70:10
    }

    bb9: {
        _20 = _1;                        // scope 3 at ui/impl-trait/example-calendar.rs:72:29: 72:52
        _19 = NaiveDate::last_week_number(move _20) -> bb10; // scope 3 at ui/impl-trait/example-calendar.rs:72:29: 72:52
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:72:34: 72:50
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> u32 {NaiveDate::last_week_number}, val: Value(<ZST>) }
    }

    bb10: {
        _22 = _1;                        // scope 4 at ui/impl-trait/example-calendar.rs:76:20: 76:31
        _21 = NaiveDate::year(move _22) -> bb11; // scope 4 at ui/impl-trait/example-calendar.rs:76:20: 76:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:76:25: 76:29
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> i32 {NaiveDate::year}, val: Value(<ZST>) }
    }

    bb11: {
        _24 = _1;                        // scope 5 at ui/impl-trait/example-calendar.rs:77:18: 77:32
        _23 = NaiveDate::weekday(move _24) -> bb12; // scope 5 at ui/impl-trait/example-calendar.rs:77:18: 77:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:77:23: 77:30
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> Weekday {NaiveDate::weekday}, val: Value(<ZST>) }
    }

    bb12: {
        _26 = _10;                       // scope 6 at ui/impl-trait/example-calendar.rs:79:12: 79:22
        _25 = Lt(move _26, const 0_i32); // scope 6 at ui/impl-trait/example-calendar.rs:79:12: 79:26
        switchInt(move _25) -> [0: bb18, otherwise: bb13]; // scope 6 at ui/impl-trait/example-calendar.rs:79:12: 79:26
    }

    bb13: {
        _28 = _21;                       // scope 6 at ui/impl-trait/example-calendar.rs:80:14: 80:18
        _29 = CheckedSub(_28, const 1_i32); // scope 6 at ui/impl-trait/example-calendar.rs:80:14: 80:22
        assert(!move (_29.1: bool), "attempt to compute `{} - {}`, which would overflow", move _28, const 1_i32) -> bb14; // scope 6 at ui/impl-trait/example-calendar.rs:80:14: 80:22
    }

    bb14: {
        _27 = move (_29.0: i32);         // scope 6 at ui/impl-trait/example-calendar.rs:80:14: 80:22
        _34 = _21;                       // scope 6 at ui/impl-trait/example-calendar.rs:80:44: 80:48
        _35 = CheckedSub(_34, const 1_i32); // scope 6 at ui/impl-trait/example-calendar.rs:80:44: 80:52
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", move _34, const 1_i32) -> bb15; // scope 6 at ui/impl-trait/example-calendar.rs:80:44: 80:52
    }

    bb15: {
        _33 = move (_35.0: i32);         // scope 6 at ui/impl-trait/example-calendar.rs:80:44: 80:52
        _32 = NaiveDate::from_ymd(move _33, const 1_u32, const 1_u32) -> bb16; // scope 6 at ui/impl-trait/example-calendar.rs:80:24: 80:59
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:80:24: 80:43
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb16: {
        _31 = &_32;                      // scope 6 at ui/impl-trait/example-calendar.rs:80:24: 80:78
        _30 = NaiveDate::last_week_number(move _31) -> bb17; // scope 6 at ui/impl-trait/example-calendar.rs:80:24: 80:78
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:80:60: 80:76
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> u32 {NaiveDate::last_week_number}, val: Value(<ZST>) }
    }

    bb17: {
        _36 = _23;                       // scope 6 at ui/impl-trait/example-calendar.rs:80:80: 80:82
        _0 = (move _27, move _30, move _36); // scope 6 at ui/impl-trait/example-calendar.rs:80:13: 80:83
        goto -> bb25;                    // scope 6 at ui/impl-trait/example-calendar.rs:79:9: 85:10
    }

    bb18: {
        _38 = _10;                       // scope 6 at ui/impl-trait/example-calendar.rs:81:19: 81:29
        _40 = _19;                       // scope 6 at ui/impl-trait/example-calendar.rs:81:33: 81:46
        _39 = move _40 as i32 (IntToInt); // scope 6 at ui/impl-trait/example-calendar.rs:81:33: 81:53
        _37 = Ge(move _38, move _39);    // scope 6 at ui/impl-trait/example-calendar.rs:81:19: 81:53
        switchInt(move _37) -> [0: bb23, otherwise: bb19]; // scope 6 at ui/impl-trait/example-calendar.rs:81:19: 81:53
    }

    bb19: {
        _42 = _21;                       // scope 6 at ui/impl-trait/example-calendar.rs:82:14: 82:18
        _43 = CheckedAdd(_42, const 1_i32); // scope 6 at ui/impl-trait/example-calendar.rs:82:14: 82:22
        assert(!move (_43.1: bool), "attempt to compute `{} + {}`, which would overflow", move _42, const 1_i32) -> bb20; // scope 6 at ui/impl-trait/example-calendar.rs:82:14: 82:22
    }

    bb20: {
        _41 = move (_43.0: i32);         // scope 6 at ui/impl-trait/example-calendar.rs:82:14: 82:22
        _47 = _10;                       // scope 6 at ui/impl-trait/example-calendar.rs:82:25: 82:35
        _48 = CheckedAdd(_47, const 1_i32); // scope 6 at ui/impl-trait/example-calendar.rs:82:25: 82:39
        assert(!move (_48.1: bool), "attempt to compute `{} + {}`, which would overflow", move _47, const 1_i32) -> bb21; // scope 6 at ui/impl-trait/example-calendar.rs:82:25: 82:39
    }

    bb21: {
        _46 = move (_48.0: i32);         // scope 6 at ui/impl-trait/example-calendar.rs:82:25: 82:39
        _50 = _19;                       // scope 6 at ui/impl-trait/example-calendar.rs:82:42: 82:55
        _49 = move _50 as i32 (IntToInt); // scope 6 at ui/impl-trait/example-calendar.rs:82:42: 82:62
        _51 = CheckedSub(_46, _49);      // scope 6 at ui/impl-trait/example-calendar.rs:82:24: 82:63
        assert(!move (_51.1: bool), "attempt to compute `{} - {}`, which would overflow", move _46, move _49) -> bb22; // scope 6 at ui/impl-trait/example-calendar.rs:82:24: 82:63
    }

    bb22: {
        _45 = move (_51.0: i32);         // scope 6 at ui/impl-trait/example-calendar.rs:82:24: 82:63
        _44 = move _45 as u32 (IntToInt); // scope 6 at ui/impl-trait/example-calendar.rs:82:24: 82:70
        _52 = _23;                       // scope 6 at ui/impl-trait/example-calendar.rs:82:72: 82:74
        _0 = (move _41, move _44, move _52); // scope 6 at ui/impl-trait/example-calendar.rs:82:13: 82:75
        goto -> bb25;                    // scope 6 at ui/impl-trait/example-calendar.rs:81:16: 85:10
    }

    bb23: {
        _53 = _21;                       // scope 6 at ui/impl-trait/example-calendar.rs:84:14: 84:18
        _56 = _10;                       // scope 6 at ui/impl-trait/example-calendar.rs:84:21: 84:31
        _57 = CheckedAdd(_56, const 1_i32); // scope 6 at ui/impl-trait/example-calendar.rs:84:20: 84:36
        assert(!move (_57.1: bool), "attempt to compute `{} + {}`, which would overflow", move _56, const 1_i32) -> bb24; // scope 6 at ui/impl-trait/example-calendar.rs:84:20: 84:36
    }

    bb24: {
        _55 = move (_57.0: i32);         // scope 6 at ui/impl-trait/example-calendar.rs:84:20: 84:36
        _54 = move _55 as u32 (IntToInt); // scope 6 at ui/impl-trait/example-calendar.rs:84:20: 84:43
        _58 = _23;                       // scope 6 at ui/impl-trait/example-calendar.rs:84:45: 84:47
        _0 = (move _53, move _54, move _58); // scope 6 at ui/impl-trait/example-calendar.rs:84:13: 84:48
        goto -> bb25;                    // scope 6 at ui/impl-trait/example-calendar.rs:81:16: 85:10
    }

    bb25: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:86:6: 86:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::first_week_in_prev_year(_1: &NaiveDate) -> bool {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:88:32: 88:37
    let mut _0: bool;                    // return place in scope 0 at ui/impl-trait/example-calendar.rs:88:42: 88:46
    let _2: u32;                         // in scope 0 at ui/impl-trait/example-calendar.rs:89:13: 89:28
    let mut _3: &Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:89:31: 89:83
    let _4: Weekday;                     // in scope 0 at ui/impl-trait/example-calendar.rs:89:31: 89:60
    let mut _5: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:89:31: 89:60
    let mut _6: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:95:9: 95:36
    let mut _7: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:95:10: 95:31
    let mut _8: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:95:15: 95:30
    let mut _9: (u32, bool);             // in scope 0 at ui/impl-trait/example-calendar.rs:95:10: 95:31
    scope 1 {
        debug first_dow_mon_0 => _2;     // in scope 1 at ui/impl-trait/example-calendar.rs:89:13: 89:28
    }

    bb0: {
        _5 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:89:31: 89:60
        _4 = NaiveDate::year_first_day_of_week(move _5) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:89:31: 89:60
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:89:36: 89:58
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> Weekday {NaiveDate::year_first_day_of_week}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at ui/impl-trait/example-calendar.rs:89:31: 89:83
        _2 = Weekday::num_days_from_monday(move _3) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:89:31: 89:83
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:89:61: 89:81
                                         // + literal: Const { ty: for<'a> fn(&'a Weekday) -> u32 {Weekday::num_days_from_monday}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _2;                         // scope 1 at ui/impl-trait/example-calendar.rs:95:15: 95:30
        _9 = CheckedSub(const 7_u32, _8); // scope 1 at ui/impl-trait/example-calendar.rs:95:10: 95:31
        assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", const 7_u32, move _8) -> bb3; // scope 1 at ui/impl-trait/example-calendar.rs:95:10: 95:31
    }

    bb3: {
        _7 = move (_9.0: u32);           // scope 1 at ui/impl-trait/example-calendar.rs:95:10: 95:31
        _6 = Rem(move _7, const 7_u32);  // scope 1 at ui/impl-trait/example-calendar.rs:95:9: 95:36
        _0 = Lt(move _6, const 4_u32);   // scope 1 at ui/impl-trait/example-calendar.rs:95:9: 95:40
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:96:6: 96:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::year_first_day_of_week(_1: &NaiveDate) -> Weekday {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:98:31: 98:36
    let mut _0: Weekday;                 // return place in scope 0 at ui/impl-trait/example-calendar.rs:98:41: 98:48
    let mut _2: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:99:9: 99:57
    let _3: NaiveDate;                   // in scope 0 at ui/impl-trait/example-calendar.rs:99:9: 99:47
    let mut _4: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:99:29: 99:40
    let mut _5: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:99:29: 99:40

    bb0: {
        _5 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:99:29: 99:40
        _4 = NaiveDate::year(move _5) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:99:29: 99:40
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:99:34: 99:38
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> i32 {NaiveDate::year}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = NaiveDate::from_ymd(move _4, const 1_u32, const 1_u32) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:99:9: 99:47
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:99:9: 99:28
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at ui/impl-trait/example-calendar.rs:99:9: 99:57
        _0 = NaiveDate::weekday(move _2) -> bb3; // scope 0 at ui/impl-trait/example-calendar.rs:99:9: 99:57
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:99:48: 99:55
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> Weekday {NaiveDate::weekday}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:100:6: 100:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::weeks_in_year(_1: &NaiveDate) -> u32 {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:102:22: 102:27
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:102:32: 102:35
    let _2: u32;                         // in scope 0 at ui/impl-trait/example-calendar.rs:103:13: 103:30
    let mut _3: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:103:33: 103:85
    let mut _4: &Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:103:33: 103:85
    let _5: Weekday;                     // in scope 0 at ui/impl-trait/example-calendar.rs:103:33: 103:62
    let mut _6: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:103:33: 103:62
    let mut _7: (u32, bool);             // in scope 0 at ui/impl-trait/example-calendar.rs:103:33: 103:89
    let mut _8: bool;                    // in scope 0 at ui/impl-trait/example-calendar.rs:104:12: 104:34
    let mut _9: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:104:12: 104:29
    scope 1 {
        debug days_in_last_week => _2;   // in scope 1 at ui/impl-trait/example-calendar.rs:103:13: 103:30
    }

    bb0: {
        _6 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:103:33: 103:62
        _5 = NaiveDate::year_first_day_of_week(move _6) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:103:33: 103:62
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:103:38: 103:60
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> Weekday {NaiveDate::year_first_day_of_week}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at ui/impl-trait/example-calendar.rs:103:33: 103:85
        _3 = Weekday::num_days_from_monday(move _4) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:103:33: 103:85
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:103:63: 103:83
                                         // + literal: Const { ty: for<'a> fn(&'a Weekday) -> u32 {Weekday::num_days_from_monday}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = CheckedAdd(_3, const 1_u32); // scope 0 at ui/impl-trait/example-calendar.rs:103:33: 103:89
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 1_u32) -> bb3; // scope 0 at ui/impl-trait/example-calendar.rs:103:33: 103:89
    }

    bb3: {
        _2 = move (_7.0: u32);           // scope 0 at ui/impl-trait/example-calendar.rs:103:33: 103:89
        _9 = _2;                         // scope 1 at ui/impl-trait/example-calendar.rs:104:12: 104:29
        _8 = Ge(move _9, const 4_u32);   // scope 1 at ui/impl-trait/example-calendar.rs:104:12: 104:34
        switchInt(move _8) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/impl-trait/example-calendar.rs:104:12: 104:34
    }

    bb4: {
        _0 = const 53_u32;               // scope 1 at ui/impl-trait/example-calendar.rs:104:37: 104:39
        goto -> bb6;                     // scope 1 at ui/impl-trait/example-calendar.rs:104:9: 104:53
    }

    bb5: {
        _0 = const 52_u32;               // scope 1 at ui/impl-trait/example-calendar.rs:104:49: 104:51
        goto -> bb6;                     // scope 1 at ui/impl-trait/example-calendar.rs:104:9: 104:53
    }

    bb6: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:105:6: 105:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::last_week_number(_1: &NaiveDate) -> u32 {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:107:25: 107:30
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:107:35: 107:38
    let _2: u32;                         // in scope 0 at ui/impl-trait/example-calendar.rs:108:13: 108:16
    let mut _3: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:108:19: 108:39
    let mut _4: bool;                    // in scope 0 at ui/impl-trait/example-calendar.rs:109:12: 109:42
    let mut _5: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:109:12: 109:42
    let mut _6: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:109:45: 109:48
    let mut _7: (u32, bool);             // in scope 0 at ui/impl-trait/example-calendar.rs:109:45: 109:52
    scope 1 {
        debug wiy => _2;                 // in scope 1 at ui/impl-trait/example-calendar.rs:108:13: 108:16
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:108:19: 108:39
        _2 = NaiveDate::weeks_in_year(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:108:19: 108:39
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:108:24: 108:37
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> u32 {NaiveDate::weeks_in_year}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _1;                         // scope 1 at ui/impl-trait/example-calendar.rs:109:12: 109:42
        _4 = NaiveDate::first_week_in_prev_year(move _5) -> bb2; // scope 1 at ui/impl-trait/example-calendar.rs:109:12: 109:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:109:17: 109:40
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> bool {NaiveDate::first_week_in_prev_year}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _4) -> [0: bb5, otherwise: bb3]; // scope 1 at ui/impl-trait/example-calendar.rs:109:12: 109:42
    }

    bb3: {
        _6 = _2;                         // scope 1 at ui/impl-trait/example-calendar.rs:109:45: 109:48
        _7 = CheckedSub(_6, const 1_u32); // scope 1 at ui/impl-trait/example-calendar.rs:109:45: 109:52
        assert(!move (_7.1: bool), "attempt to compute `{} - {}`, which would overflow", move _6, const 1_u32) -> bb4; // scope 1 at ui/impl-trait/example-calendar.rs:109:45: 109:52
    }

    bb4: {
        _0 = move (_7.0: u32);           // scope 1 at ui/impl-trait/example-calendar.rs:109:45: 109:52
        goto -> bb6;                     // scope 1 at ui/impl-trait/example-calendar.rs:109:9: 109:67
    }

    bb5: {
        _0 = _2;                         // scope 1 at ui/impl-trait/example-calendar.rs:109:62: 109:65
        goto -> bb6;                     // scope 1 at ui/impl-trait/example-calendar.rs:109:9: 109:67
    }

    bb6: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:110:6: 110:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::day_of_year(_1: &NaiveDate) -> u32 {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:112:20: 112:25
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:112:30: 112:33
    let mut _2: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:113:9: 114:32
    let mut _3: std::iter::Map<std::ops::Range<u32>, [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28]>; // in scope 0 at ui/impl-trait/example-calendar.rs:113:9: 113:84
    let mut _4: std::ops::Range<u32>;    // in scope 0 at ui/impl-trait/example-calendar.rs:113:9: 113:20
    let mut _5: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:113:13: 113:19
    let mut _6: [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28]; // in scope 0 at ui/impl-trait/example-calendar.rs:113:25: 113:83
    let mut _7: &&NaiveDate;             // in scope 0 at ui/impl-trait/example-calendar.rs:113:25: 113:83
    let mut _8: [closure@ui/impl-trait/example-calendar.rs:114:22: 114:27]; // in scope 0 at ui/impl-trait/example-calendar.rs:114:22: 114:31
    let mut _9: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:114:35: 114:45
    let mut _10: &NaiveDate;             // in scope 0 at ui/impl-trait/example-calendar.rs:114:35: 114:45
    let mut _11: (u32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:113:9: 114:45

    bb0: {
        _5 = ((*_1).1: u32);             // scope 0 at ui/impl-trait/example-calendar.rs:113:13: 113:19
        _4 = std::ops::Range::<u32> { start: const 1_u32, end: move _5 }; // scope 0 at ui/impl-trait/example-calendar.rs:113:9: 113:20
        _7 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:113:25: 113:83
        _6 = [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28] { self: move _7 }; // scope 0 at ui/impl-trait/example-calendar.rs:113:25: 113:83
                                         // closure
                                         // + def_id: DefId(0:18 ~ example_calendar[ac49]::{impl#0}::day_of_year::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((u32,)) -> u32,
                                         //     (&&NaiveDate,),
                                         // ]
        _3 = <std::ops::Range<u32> as Iterator>::map::<u32, [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28]>(move _4, move _6) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:113:9: 113:84
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:113:21: 113:24
                                         // + literal: Const { ty: fn(std::ops::Range<u32>, [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28]) -> Map<std::ops::Range<u32>, [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28]> {<std::ops::Range<u32> as Iterator>::map::<u32, [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28]>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Map<std::ops::Range<u32>, [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28]> as Iterator>::fold::<u32, [closure@ui/impl-trait/example-calendar.rs:114:22: 114:27]>(move _3, const 0_u32, move _8) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:113:9: 114:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:114:14: 114:18
                                         // + literal: Const { ty: fn(Map<std::ops::Range<u32>, [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28]>, u32, [closure@ui/impl-trait/example-calendar.rs:114:22: 114:27]) -> u32 {<Map<std::ops::Range<u32>, [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28]> as Iterator>::fold::<u32, [closure@ui/impl-trait/example-calendar.rs:114:22: 114:27]>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = _1;                        // scope 0 at ui/impl-trait/example-calendar.rs:114:35: 114:45
        _9 = NaiveDate::day(move _10) -> bb3; // scope 0 at ui/impl-trait/example-calendar.rs:114:35: 114:45
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:114:40: 114:43
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> u32 {NaiveDate::day}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = CheckedAdd(_2, _9);        // scope 0 at ui/impl-trait/example-calendar.rs:113:9: 114:45
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _9) -> bb4; // scope 0 at ui/impl-trait/example-calendar.rs:113:9: 114:45
    }

    bb4: {
        _0 = move (_11.0: u32);          // scope 0 at ui/impl-trait/example-calendar.rs:113:9: 114:45
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:115:6: 115:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::day_of_year::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:113:25: 113:28], _2: u32) -> u32 {
    debug m => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:113:26: 113:27
    debug self => (*((*_1).0: &&NaiveDate)); // in scope 0 at ui/impl-trait/example-calendar.rs:112:20: 112:25
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:113:29: 113:29
    let mut _3: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:113:29: 113:83
    let _4: NaiveDate;                   // in scope 0 at ui/impl-trait/example-calendar.rs:113:29: 113:67
    let mut _5: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:113:49: 113:60
    let mut _6: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:113:49: 113:60
    let mut _7: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:113:62: 113:63
    let mut _8: &&NaiveDate;             // in scope 0 at ui/impl-trait/example-calendar.rs:113:25: 113:83
    let mut _9: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:113:25: 113:83

    bb0: {
        _8 = deref_copy ((*_1).0: &&NaiveDate); // scope 0 at ui/impl-trait/example-calendar.rs:113:49: 113:60
        _9 = deref_copy (*_8);           // scope 0 at ui/impl-trait/example-calendar.rs:113:49: 113:60
        _6 = _9;                         // scope 0 at ui/impl-trait/example-calendar.rs:113:49: 113:60
        _5 = NaiveDate::year(move _6) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:113:49: 113:60
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:113:54: 113:58
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> i32 {NaiveDate::year}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _2;                         // scope 0 at ui/impl-trait/example-calendar.rs:113:62: 113:63
        _4 = NaiveDate::from_ymd(move _5, move _7, const 1_u32) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:113:29: 113:67
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:113:29: 113:48
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 0 at ui/impl-trait/example-calendar.rs:113:29: 113:83
        _0 = NaiveDate::days_in_month(move _3) -> bb3; // scope 0 at ui/impl-trait/example-calendar.rs:113:29: 113:83
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:113:68: 113:81
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> u32 {NaiveDate::days_in_month}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:113:83: 113:83
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::day_of_year::{closure#1}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:114:22: 114:27], _2: u32, _3: u32) -> u32 {
    debug a => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:114:23: 114:24
    debug b => _3;                       // in scope 0 at ui/impl-trait/example-calendar.rs:114:25: 114:26
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:114:28: 114:28
    let mut _4: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:114:28: 114:29
    let mut _5: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:114:30: 114:31
    let mut _6: (u32, bool);             // in scope 0 at ui/impl-trait/example-calendar.rs:114:28: 114:31

    bb0: {
        _4 = _2;                         // scope 0 at ui/impl-trait/example-calendar.rs:114:28: 114:29
        _5 = _3;                         // scope 0 at ui/impl-trait/example-calendar.rs:114:30: 114:31
        _6 = CheckedAdd(_4, _5);         // scope 0 at ui/impl-trait/example-calendar.rs:114:28: 114:31
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:114:28: 114:31
    }

    bb1: {
        _0 = move (_6.0: u32);           // scope 0 at ui/impl-trait/example-calendar.rs:114:28: 114:31
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:114:31: 114:31
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::is_leap_year(_1: &NaiveDate) -> bool {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:117:21: 117:26
    let mut _0: bool;                    // return place in scope 0 at ui/impl-trait/example-calendar.rs:117:31: 117:35
    let _2: i32;                         // in scope 0 at ui/impl-trait/example-calendar.rs:118:13: 118:17
    let mut _3: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:118:20: 118:31
    let mut _4: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:119:12: 119:20
    let mut _5: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:119:12: 119:16
    let mut _6: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:121:19: 121:29
    let mut _7: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:121:19: 121:23
    let mut _8: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:123:19: 123:29
    let mut _9: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:123:19: 123:23
    scope 1 {
        debug year => _2;                // in scope 1 at ui/impl-trait/example-calendar.rs:118:13: 118:17
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:118:20: 118:31
        _2 = NaiveDate::year(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:118:20: 118:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:118:25: 118:29
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> i32 {NaiveDate::year}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _2;                         // scope 1 at ui/impl-trait/example-calendar.rs:119:12: 119:16
        _4 = Rem(move _5, const 4_i32);  // scope 1 at ui/impl-trait/example-calendar.rs:119:12: 119:20
        switchInt(move _4) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/impl-trait/example-calendar.rs:119:12: 119:25
    }

    bb2: {
        _0 = const false;                // scope 1 at ui/impl-trait/example-calendar.rs:120:20: 120:25
        goto -> bb8;                     // scope 1 at ui/impl-trait/example-calendar.rs:120:13: 120:25
    }

    bb3: {
        _7 = _2;                         // scope 1 at ui/impl-trait/example-calendar.rs:121:19: 121:23
        _6 = Rem(move _7, const 100_i32); // scope 1 at ui/impl-trait/example-calendar.rs:121:19: 121:29
        switchInt(move _6) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/impl-trait/example-calendar.rs:121:19: 121:34
    }

    bb4: {
        _0 = const true;                 // scope 1 at ui/impl-trait/example-calendar.rs:122:20: 122:24
        goto -> bb8;                     // scope 1 at ui/impl-trait/example-calendar.rs:122:13: 122:24
    }

    bb5: {
        _9 = _2;                         // scope 1 at ui/impl-trait/example-calendar.rs:123:19: 123:23
        _8 = Rem(move _9, const 400_i32); // scope 1 at ui/impl-trait/example-calendar.rs:123:19: 123:29
        switchInt(move _8) -> [0: bb7, otherwise: bb6]; // scope 1 at ui/impl-trait/example-calendar.rs:123:19: 123:34
    }

    bb6: {
        _0 = const false;                // scope 1 at ui/impl-trait/example-calendar.rs:124:20: 124:25
        goto -> bb8;                     // scope 1 at ui/impl-trait/example-calendar.rs:124:13: 124:25
    }

    bb7: {
        _0 = const true;                 // scope 1 at ui/impl-trait/example-calendar.rs:126:20: 126:24
        goto -> bb8;                     // scope 1 at ui/impl-trait/example-calendar.rs:126:13: 126:24
    }

    bb8: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:128:6: 128:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:18:1: 18:15>::days_in_month(_1: &NaiveDate) -> u32 {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:130:22: 130:27
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:130:32: 130:35
    let mut _2: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:131:15: 131:27
    let mut _3: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:131:15: 131:27
    let mut _4: bool;                    // in scope 0 at ui/impl-trait/example-calendar.rs:133:31: 133:50
    let mut _5: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:133:31: 133:50
    let mut _6: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77

    bb0: {
        _3 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:131:15: 131:27
        _2 = NaiveDate::month(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:131:15: 131:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:131:20: 131:25
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> u32 {NaiveDate::month}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(_2) -> [1: bb3, 2: bb4, 3: bb8, 4: bb9, 5: bb10, 6: bb11, 7: bb12, 8: bb13, 9: bb14, 10: bb15, 11: bb16, 12: bb17, otherwise: bb2]; // scope 0 at ui/impl-trait/example-calendar.rs:131:9: 131:27
    }

    bb2: {
        _6 = core::panicking::panic(const "internal error: entered unreachable code"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _0 = const 31_u32;               // scope 0 at ui/impl-trait/example-calendar.rs:132:28: 132:30
        goto -> bb18;                    // scope 0 at ui/impl-trait/example-calendar.rs:132:28: 132:30
    }

    bb4: {
        _5 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:133:31: 133:50
        _4 = NaiveDate::is_leap_year(move _5) -> bb5; // scope 0 at ui/impl-trait/example-calendar.rs:133:31: 133:50
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:133:36: 133:48
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> bool {NaiveDate::is_leap_year}, val: Value(<ZST>) }
    }

    bb5: {
        switchInt(move _4) -> [0: bb7, otherwise: bb6]; // scope 0 at ui/impl-trait/example-calendar.rs:133:31: 133:50
    }

    bb6: {
        _0 = const 29_u32;               // scope 0 at ui/impl-trait/example-calendar.rs:133:53: 133:55
        goto -> bb18;                    // scope 0 at ui/impl-trait/example-calendar.rs:133:28: 133:69
    }

    bb7: {
        _0 = const 28_u32;               // scope 0 at ui/impl-trait/example-calendar.rs:133:65: 133:67
        goto -> bb18;                    // scope 0 at ui/impl-trait/example-calendar.rs:133:28: 133:69
    }

    bb8: {
        _0 = const 31_u32;               // scope 0 at ui/impl-trait/example-calendar.rs:134:28: 134:30
        goto -> bb18;                    // scope 0 at ui/impl-trait/example-calendar.rs:134:28: 134:30
    }

    bb9: {
        _0 = const 30_u32;               // scope 0 at ui/impl-trait/example-calendar.rs:135:28: 135:30
        goto -> bb18;                    // scope 0 at ui/impl-trait/example-calendar.rs:135:28: 135:30
    }

    bb10: {
        _0 = const 31_u32;               // scope 0 at ui/impl-trait/example-calendar.rs:136:28: 136:30
        goto -> bb18;                    // scope 0 at ui/impl-trait/example-calendar.rs:136:28: 136:30
    }

    bb11: {
        _0 = const 30_u32;               // scope 0 at ui/impl-trait/example-calendar.rs:137:28: 137:30
        goto -> bb18;                    // scope 0 at ui/impl-trait/example-calendar.rs:137:28: 137:30
    }

    bb12: {
        _0 = const 31_u32;               // scope 0 at ui/impl-trait/example-calendar.rs:138:28: 138:30
        goto -> bb18;                    // scope 0 at ui/impl-trait/example-calendar.rs:138:28: 138:30
    }

    bb13: {
        _0 = const 31_u32;               // scope 0 at ui/impl-trait/example-calendar.rs:139:28: 139:30
        goto -> bb18;                    // scope 0 at ui/impl-trait/example-calendar.rs:139:28: 139:30
    }

    bb14: {
        _0 = const 30_u32;               // scope 0 at ui/impl-trait/example-calendar.rs:140:28: 140:30
        goto -> bb18;                    // scope 0 at ui/impl-trait/example-calendar.rs:140:28: 140:30
    }

    bb15: {
        _0 = const 31_u32;               // scope 0 at ui/impl-trait/example-calendar.rs:141:29: 141:31
        goto -> bb18;                    // scope 0 at ui/impl-trait/example-calendar.rs:141:29: 141:31
    }

    bb16: {
        _0 = const 30_u32;               // scope 0 at ui/impl-trait/example-calendar.rs:142:29: 142:31
        goto -> bb18;                    // scope 0 at ui/impl-trait/example-calendar.rs:142:29: 142:31
    }

    bb17: {
        _0 = const 31_u32;               // scope 0 at ui/impl-trait/example-calendar.rs:143:29: 143:31
        goto -> bb18;                    // scope 0 at ui/impl-trait/example-calendar.rs:143:29: 143:31
    }

    bb18: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:146:6: 146:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:149:1: 149:60>::add(_1: &NaiveDate, _2: &NaiveDate) -> NaiveDate {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:152:12: 152:16
    debug other => _2;                   // in scope 0 at ui/impl-trait/example-calendar.rs:152:18: 152:23
    let mut _0: NaiveDate;               // return place in scope 0 at ui/impl-trait/example-calendar.rs:152:43: 152:52
    let mut _3: (&NaiveDate, &NaiveDate); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &NaiveDate;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &NaiveDate;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: &NaiveDate;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &NaiveDate;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &NaiveDate;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &NaiveDate;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: &NaiveDate;             // in scope 0 at ui/impl-trait/example-calendar.rs:154:9: 154:20
    let mut _21: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _4 = _2;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &NaiveDate, val: Unevaluated(<&'a NaiveDate as Add<&'b NaiveDate>>::add, [ReErased, ReErased], Some(promoted[0])) }
        _5 = _21;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &NaiveDate);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &NaiveDate);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <NaiveDate as PartialEq>::eq(move _10, move _11) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a NaiveDate, &'b NaiveDate) -> bool {<NaiveDate as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<NaiveDate, NaiveDate>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a NaiveDate, &'b NaiveDate, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<NaiveDate, NaiveDate>}, val: Value(<ZST>) }
    }

    bb3: {
        _20 = _1;                        // scope 0 at ui/impl-trait/example-calendar.rs:154:9: 154:20
        _0 = NaiveDate::succ(move _20) -> bb4; // scope 0 at ui/impl-trait/example-calendar.rs:154:9: 154:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:154:14: 154:18
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> NaiveDate {NaiveDate::succ}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:155:6: 155:6
    }
}

promoted[0] in <impl at ui/impl-trait/example-calendar.rs:149:1: 149:60>::add: &NaiveDate = {
    let mut _0: &NaiveDate;              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: NaiveDate;               // in scope 0 at ui/impl-trait/example-calendar.rs:153:28: 153:46

    bb0: {
        _1 = NaiveDate(const 0_i32, const 0_u32, const 1_u32); // scope 0 at ui/impl-trait/example-calendar.rs:153:28: 153:46
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:158:1: 158:35>::steps_between(_1: &NaiveDate, _2: &NaiveDate) -> Option<usize> {
    let mut _0: std::option::Option<usize>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:159:45: 159:58
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _3 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:158:1: 158:35>::forward_checked(_1: NaiveDate, _2: usize) -> Option<NaiveDate> {
    debug start => _1;                   // in scope 0 at ui/impl-trait/example-calendar.rs:163:24: 163:29
    debug n => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:163:37: 163:38
    let mut _0: std::option::Option<NaiveDate>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:163:50: 163:62
    let mut _3: NaiveDate;               // in scope 0 at ui/impl-trait/example-calendar.rs:164:14: 164:49
    let mut _4: std::ops::Range<usize>;  // in scope 0 at ui/impl-trait/example-calendar.rs:164:14: 164:20
    let mut _5: usize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:164:18: 164:19
    let mut _6: NaiveDate;               // in scope 0 at ui/impl-trait/example-calendar.rs:164:26: 164:31
    let mut _7: [closure@ui/impl-trait/example-calendar.rs:164:33: 164:39]; // in scope 0 at ui/impl-trait/example-calendar.rs:164:33: 164:48

    bb0: {
        _5 = _2;                         // scope 0 at ui/impl-trait/example-calendar.rs:164:18: 164:19
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _5 }; // scope 0 at ui/impl-trait/example-calendar.rs:164:14: 164:20
        _6 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:164:26: 164:31
        _3 = <std::ops::Range<usize> as Iterator>::fold::<NaiveDate, [closure@ui/impl-trait/example-calendar.rs:164:33: 164:39]>(move _4, move _6, move _7) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:164:14: 164:49
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:164:21: 164:25
                                         // + literal: Const { ty: fn(std::ops::Range<usize>, NaiveDate, [closure@ui/impl-trait/example-calendar.rs:164:33: 164:39]) -> NaiveDate {<std::ops::Range<usize> as Iterator>::fold::<NaiveDate, [closure@ui/impl-trait/example-calendar.rs:164:33: 164:39]>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Option::<NaiveDate>::Some(move _3); // scope 0 at ui/impl-trait/example-calendar.rs:164:9: 164:50
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:165:6: 165:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:158:1: 158:35>::forward_checked::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:164:33: 164:39], _2: NaiveDate, _3: usize) -> NaiveDate {
    debug x => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:164:34: 164:35
    let mut _0: NaiveDate;               // return place in scope 0 at ui/impl-trait/example-calendar.rs:164:40: 164:40
    let mut _4: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:164:40: 164:48

    bb0: {
        _4 = &_2;                        // scope 0 at ui/impl-trait/example-calendar.rs:164:40: 164:48
        _0 = NaiveDate::succ(move _4) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:164:40: 164:48
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:164:42: 164:46
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> NaiveDate {NaiveDate::succ}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:164:48: 164:48
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:158:1: 158:35>::backward_checked(_1: NaiveDate, _2: usize) -> Option<NaiveDate> {
    let mut _0: std::option::Option<NaiveDate>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:167:47: 167:59
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _3 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:172:16: 172:21>::clone(_1: &Weekday) -> Weekday {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:172:16: 172:21
    let mut _0: Weekday;                 // return place in scope 0 at ui/impl-trait/example-calendar.rs:172:16: 172:21

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/impl-trait/example-calendar.rs:172:16: 172:21
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:172:21: 172:21
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:172:23: 172:28>::fmt(_1: &Weekday, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
    debug f => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
    let mut _4: &str;                    // in scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
    let mut _5: isize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
    let _6: &str;                        // in scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
    let _7: &str;                        // in scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
    let _8: &str;                        // in scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
    let _9: &str;                        // in scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
    let _10: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
    let _11: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
    let _12: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
        _5 = discriminant((*_1));        // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
        switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb1, otherwise: bb2]; // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
    }

    bb1: {
        _12 = const "Sun";               // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:172:23: 172:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _12;                        // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:172:27: 172:28
    }

    bb2: {
        unreachable;                     // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
    }

    bb3: {
        _6 = const "Mon";                // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:172:23: 172:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:172:27: 172:28
    }

    bb4: {
        _7 = const "Tue";                // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:172:23: 172:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:172:27: 172:28
    }

    bb5: {
        _8 = const "Wed";                // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:172:23: 172:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _8;                         // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:172:27: 172:28
    }

    bb6: {
        _9 = const "Thu";                // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:172:23: 172:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _9;                         // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:172:27: 172:28
    }

    bb7: {
        _10 = const "Fri";               // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:172:23: 172:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _10;                        // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:172:27: 172:28
    }

    bb8: {
        _11 = const "Sat";               // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:172:23: 172:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _11;                        // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:172:27: 172:28
    }

    bb9: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb10; // scope 0 at ui/impl-trait/example-calendar.rs:172:23: 172:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:172:23: 172:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:172:28: 172:28
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:172:30: 172:32>::assert_receiver_is_total_eq(_1: &Weekday) -> () {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:172:30: 172:32
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/example-calendar.rs:172:30: 172:32

    bb0: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:172:32: 172:32
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:172:34: 172:37>::cmp(_1: &Weekday, _2: &Weekday) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:172:34: 172:37
    debug other => _2;                   // in scope 0 at ui/impl-trait/example-calendar.rs:172:34: 172:37
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/impl-trait/example-calendar.rs:172:34: 172:37
    let _3: isize;                       // in scope 0 at ui/impl-trait/example-calendar.rs:172:34: 172:37
    let mut _4: &Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:172:34: 172:37
    let mut _6: &Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:172:34: 172:37
    let mut _7: &isize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:172:34: 172:37
    let _8: &isize;                      // in scope 0 at ui/impl-trait/example-calendar.rs:172:34: 172:37
    let mut _9: &isize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:172:34: 172:37
    let _10: &isize;                     // in scope 0 at ui/impl-trait/example-calendar.rs:172:34: 172:37
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/impl-trait/example-calendar.rs:172:34: 172:37
        let _5: isize;                   // in scope 1 at ui/impl-trait/example-calendar.rs:172:34: 172:37
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/impl-trait/example-calendar.rs:172:34: 172:37
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:172:34: 172:37
        _3 = discriminant((*_4));        // scope 0 at ui/impl-trait/example-calendar.rs:172:34: 172:37
        _6 = _2;                         // scope 1 at ui/impl-trait/example-calendar.rs:172:34: 172:37
        _5 = discriminant((*_6));        // scope 1 at ui/impl-trait/example-calendar.rs:172:34: 172:37
        _8 = &_3;                        // scope 2 at ui/impl-trait/example-calendar.rs:172:34: 172:37
        _7 = _8;                         // scope 2 at ui/impl-trait/example-calendar.rs:172:34: 172:37
        _10 = &_5;                       // scope 2 at ui/impl-trait/example-calendar.rs:172:34: 172:37
        _9 = _10;                        // scope 2 at ui/impl-trait/example-calendar.rs:172:34: 172:37
        _0 = <isize as Ord>::cmp(move _7, move _9) -> bb1; // scope 2 at ui/impl-trait/example-calendar.rs:172:34: 172:37
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:172:34: 172:37
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> std::cmp::Ordering {<isize as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:172:37: 172:37
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:172:39: 172:48>::eq(_1: &Weekday, _2: &Weekday) -> bool {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:172:39: 172:48
    debug other => _2;                   // in scope 0 at ui/impl-trait/example-calendar.rs:172:39: 172:48
    let mut _0: bool;                    // return place in scope 0 at ui/impl-trait/example-calendar.rs:172:39: 172:48
    let _3: isize;                       // in scope 0 at ui/impl-trait/example-calendar.rs:172:39: 172:48
    let mut _4: &Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:172:39: 172:48
    let mut _6: &Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:172:39: 172:48
    let mut _7: isize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:172:39: 172:48
    let mut _8: isize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:172:39: 172:48
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/impl-trait/example-calendar.rs:172:39: 172:48
        let _5: isize;                   // in scope 1 at ui/impl-trait/example-calendar.rs:172:39: 172:48
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/impl-trait/example-calendar.rs:172:39: 172:48
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:172:39: 172:48
        _3 = discriminant((*_4));        // scope 0 at ui/impl-trait/example-calendar.rs:172:39: 172:48
        _6 = _2;                         // scope 1 at ui/impl-trait/example-calendar.rs:172:39: 172:48
        _5 = discriminant((*_6));        // scope 1 at ui/impl-trait/example-calendar.rs:172:39: 172:48
        _7 = _3;                         // scope 2 at ui/impl-trait/example-calendar.rs:172:39: 172:48
        _8 = _5;                         // scope 2 at ui/impl-trait/example-calendar.rs:172:39: 172:48
        _0 = Eq(move _7, move _8);       // scope 2 at ui/impl-trait/example-calendar.rs:172:39: 172:48
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:172:48: 172:48
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:172:50: 172:60>::partial_cmp(_1: &Weekday, _2: &Weekday) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:172:50: 172:60
    debug other => _2;                   // in scope 0 at ui/impl-trait/example-calendar.rs:172:50: 172:60
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:172:50: 172:60
    let _3: isize;                       // in scope 0 at ui/impl-trait/example-calendar.rs:172:50: 172:60
    let mut _4: &Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:172:50: 172:60
    let mut _6: &Weekday;                // in scope 0 at ui/impl-trait/example-calendar.rs:172:50: 172:60
    let mut _7: &isize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:172:50: 172:60
    let _8: &isize;                      // in scope 0 at ui/impl-trait/example-calendar.rs:172:50: 172:60
    let mut _9: &isize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:172:50: 172:60
    let _10: &isize;                     // in scope 0 at ui/impl-trait/example-calendar.rs:172:50: 172:60
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/impl-trait/example-calendar.rs:172:50: 172:60
        let _5: isize;                   // in scope 1 at ui/impl-trait/example-calendar.rs:172:50: 172:60
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/impl-trait/example-calendar.rs:172:50: 172:60
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:172:50: 172:60
        _3 = discriminant((*_4));        // scope 0 at ui/impl-trait/example-calendar.rs:172:50: 172:60
        _6 = _2;                         // scope 1 at ui/impl-trait/example-calendar.rs:172:50: 172:60
        _5 = discriminant((*_6));        // scope 1 at ui/impl-trait/example-calendar.rs:172:50: 172:60
        _8 = &_3;                        // scope 2 at ui/impl-trait/example-calendar.rs:172:50: 172:60
        _7 = _8;                         // scope 2 at ui/impl-trait/example-calendar.rs:172:50: 172:60
        _10 = &_5;                       // scope 2 at ui/impl-trait/example-calendar.rs:172:50: 172:60
        _9 = _10;                        // scope 2 at ui/impl-trait/example-calendar.rs:172:50: 172:60
        _0 = <isize as PartialOrd>::partial_cmp(move _7, move _9) -> bb1; // scope 2 at ui/impl-trait/example-calendar.rs:172:50: 172:60
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:172:50: 172:60
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> Option<std::cmp::Ordering> {<isize as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:172:60: 172:60
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:183:1: 183:13>::num_days_from_monday(_1: &Weekday) -> u32 {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:184:33: 184:38
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:184:43: 184:46
    let mut _2: isize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:187:13: 187:16

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/impl-trait/example-calendar.rs:186:15: 186:20
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb1, otherwise: bb2]; // scope 0 at ui/impl-trait/example-calendar.rs:186:9: 186:20
    }

    bb1: {
        _0 = const 6_u32;                // scope 0 at ui/impl-trait/example-calendar.rs:193:20: 193:21
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:193:20: 193:21
    }

    bb2: {
        unreachable;                     // scope 0 at ui/impl-trait/example-calendar.rs:186:15: 186:20
    }

    bb3: {
        _0 = const 0_u32;                // scope 0 at ui/impl-trait/example-calendar.rs:187:20: 187:21
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:187:20: 187:21
    }

    bb4: {
        _0 = const 1_u32;                // scope 0 at ui/impl-trait/example-calendar.rs:188:20: 188:21
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:188:20: 188:21
    }

    bb5: {
        _0 = const 2_u32;                // scope 0 at ui/impl-trait/example-calendar.rs:189:20: 189:21
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:189:20: 189:21
    }

    bb6: {
        _0 = const 3_u32;                // scope 0 at ui/impl-trait/example-calendar.rs:190:20: 190:21
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:190:20: 190:21
    }

    bb7: {
        _0 = const 4_u32;                // scope 0 at ui/impl-trait/example-calendar.rs:191:20: 191:21
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:191:20: 191:21
    }

    bb8: {
        _0 = const 5_u32;                // scope 0 at ui/impl-trait/example-calendar.rs:192:20: 192:21
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:192:20: 192:21
    }

    bb9: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:195:6: 195:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:183:1: 183:13>::num_days_from_sunday(_1: &Weekday) -> u32 {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:197:33: 197:38
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:197:43: 197:46
    let mut _2: isize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:200:13: 200:16

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/impl-trait/example-calendar.rs:199:15: 199:20
        switchInt(move _2) -> [0: bb4, 1: bb5, 2: bb6, 3: bb7, 4: bb8, 5: bb1, 6: bb3, otherwise: bb2]; // scope 0 at ui/impl-trait/example-calendar.rs:199:9: 199:20
    }

    bb1: {
        _0 = const 6_u32;                // scope 0 at ui/impl-trait/example-calendar.rs:206:20: 206:21
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:206:20: 206:21
    }

    bb2: {
        unreachable;                     // scope 0 at ui/impl-trait/example-calendar.rs:199:15: 199:20
    }

    bb3: {
        _0 = const 0_u32;                // scope 0 at ui/impl-trait/example-calendar.rs:200:20: 200:21
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:200:20: 200:21
    }

    bb4: {
        _0 = const 1_u32;                // scope 0 at ui/impl-trait/example-calendar.rs:201:20: 201:21
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:201:20: 201:21
    }

    bb5: {
        _0 = const 2_u32;                // scope 0 at ui/impl-trait/example-calendar.rs:202:20: 202:21
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:202:20: 202:21
    }

    bb6: {
        _0 = const 3_u32;                // scope 0 at ui/impl-trait/example-calendar.rs:203:20: 203:21
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:203:20: 203:21
    }

    bb7: {
        _0 = const 4_u32;                // scope 0 at ui/impl-trait/example-calendar.rs:204:20: 204:21
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:204:20: 204:21
    }

    bb8: {
        _0 = const 5_u32;                // scope 0 at ui/impl-trait/example-calendar.rs:205:20: 205:21
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-calendar.rs:205:20: 205:21
    }

    bb9: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:208:6: 208:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:217:1: 217:37>::clone(_1: &GroupBy<It, F>) -> GroupBy<It, F> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:223:14: 223:19
    let mut _0: GroupBy<It, F>;          // return place in scope 0 at ui/impl-trait/example-calendar.rs:223:24: 223:28
    let mut _2: std::iter::Peekable<It>; // in scope 0 at ui/impl-trait/example-calendar.rs:225:17: 225:32
    let mut _3: &std::iter::Peekable<It>; // in scope 0 at ui/impl-trait/example-calendar.rs:225:17: 225:32
    let mut _4: F;                       // in scope 0 at ui/impl-trait/example-calendar.rs:226:16: 226:30
    let mut _5: &F;                      // in scope 0 at ui/impl-trait/example-calendar.rs:226:16: 226:30

    bb0: {
        _3 = &((*_1).0: std::iter::Peekable<It>); // scope 0 at ui/impl-trait/example-calendar.rs:225:17: 225:32
        _2 = <Peekable<It> as Clone>::clone(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:225:17: 225:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:225:25: 225:30
                                         // + literal: Const { ty: for<'a> fn(&'a Peekable<It>) -> Peekable<It> {<Peekable<It> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: F);              // scope 0 at ui/impl-trait/example-calendar.rs:226:16: 226:30
        _4 = <F as Clone>::clone(move _5) -> [return: bb2, unwind: bb3]; // scope 0 at ui/impl-trait/example-calendar.rs:226:16: 226:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:226:23: 226:28
                                         // + literal: Const { ty: for<'a> fn(&'a F) -> F {<F as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = GroupBy::<It, F> { it: move _2, f: move _4 }; // scope 0 at ui/impl-trait/example-calendar.rs:224:9: 227:10
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:228:6: 228:6
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/impl-trait/example-calendar.rs:227:9: 227:10
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:223:5: 228:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:231:1: 231:55>::next(_1: &mut GroupBy<It, F>) -> Option<(G, InGroup<Peekable<It>, F, G>)> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:239:13: 239:22
    let mut _0: std::option::Option<(G, InGroup<std::iter::Peekable<It>, F, G>)>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:239:27: 239:45
    let mut _2: std::option::Option<G>;  // in scope 0 at ui/impl-trait/example-calendar.rs:240:9: 240:40
    let mut _3: std::option::Option<&<It as std::iter::Iterator>::Item>; // in scope 0 at ui/impl-trait/example-calendar.rs:240:9: 240:23
    let mut _4: &mut std::iter::Peekable<It>; // in scope 0 at ui/impl-trait/example-calendar.rs:240:9: 240:23
    let mut _5: &mut F;                  // in scope 0 at ui/impl-trait/example-calendar.rs:240:28: 240:39
    let mut _6: [closure@ui/impl-trait/example-calendar.rs:240:45: 240:50]; // in scope 0 at ui/impl-trait/example-calendar.rs:240:45: 254:10
    let mut _7: &mut &mut GroupBy<It, F>; // in scope 0 at ui/impl-trait/example-calendar.rs:240:45: 254:10

    bb0: {
        _4 = &mut ((*_1).0: std::iter::Peekable<It>); // scope 0 at ui/impl-trait/example-calendar.rs:240:9: 240:23
        _3 = Peekable::<It>::peek(move _4) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:240:9: 240:23
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:240:17: 240:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut Peekable<It>) -> Option<&'a <It as Iterator>::Item> {Peekable::<It>::peek}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut ((*_1).1: F);          // scope 0 at ui/impl-trait/example-calendar.rs:240:28: 240:39
        _2 = Option::<&<It as Iterator>::Item>::map::<G, &mut F>(move _3, move _5) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:240:9: 240:40
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:240:24: 240:27
                                         // + literal: Const { ty: fn(Option<&<It as Iterator>::Item>, &mut F) -> Option<G> {Option::<&<It as Iterator>::Item>::map::<G, &mut F>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut _1;                    // scope 0 at ui/impl-trait/example-calendar.rs:240:45: 254:10
        _6 = [closure@ui/impl-trait/example-calendar.rs:240:45: 240:50] { self: move _7 }; // scope 0 at ui/impl-trait/example-calendar.rs:240:45: 254:10
                                         // closure
                                         // + def_id: DefId(0:53 ~ example_calendar[ac49]::{impl#5}::next::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     G,
                                         //     It,
                                         //     F,
                                         //     i32,
                                         //     extern "rust-call" fn((G,)) -> (G, InGroup<std::iter::Peekable<It>, F, G>),
                                         //     (&mut &mut GroupBy<It, F>,),
                                         // ]
        _0 = Option::<G>::map::<(G, InGroup<Peekable<It>, F, G>), [closure@ui/impl-trait/example-calendar.rs:240:45: 240:50]>(move _2, move _6) -> bb3; // scope 0 at ui/impl-trait/example-calendar.rs:240:9: 254:11
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:240:41: 240:44
                                         // + literal: Const { ty: fn(Option<G>, [closure@ui/impl-trait/example-calendar.rs:240:45: 240:50]) -> Option<(G, InGroup<Peekable<It>, F, G>)> {Option::<G>::map::<(G, InGroup<Peekable<It>, F, G>), [closure@ui/impl-trait/example-calendar.rs:240:45: 240:50]>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:255:6: 255:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:231:1: 231:55>::next::{closure#0}(_1: [closure@ui/impl-trait/example-calendar.rs:240:45: 240:50], _2: G) -> (G, InGroup<Peekable<It>, F, G>) {
    debug key => _2;                     // in scope 0 at ui/impl-trait/example-calendar.rs:240:46: 240:49
    debug self => (*(_1.0: &mut &mut GroupBy<It, F>)); // in scope 0 at ui/impl-trait/example-calendar.rs:239:13: 239:22
    let mut _0: (G, InGroup<std::iter::Peekable<It>, F, G>); // return place in scope 0 at ui/impl-trait/example-calendar.rs:240:51: 240:51
    let _3: std::iter::Peekable<It>;     // in scope 0 at ui/impl-trait/example-calendar.rs:241:17: 241:22
    let mut _4: &std::iter::Peekable<It>; // in scope 0 at ui/impl-trait/example-calendar.rs:241:25: 241:40
    let mut _5: std::option::Option<G>;  // in scope 0 at ui/impl-trait/example-calendar.rs:242:33: 242:64
    let mut _6: std::option::Option<&<It as std::iter::Iterator>::Item>; // in scope 0 at ui/impl-trait/example-calendar.rs:242:33: 242:47
    let mut _7: &mut std::iter::Peekable<It>; // in scope 0 at ui/impl-trait/example-calendar.rs:242:33: 242:47
    let mut _8: &mut F;                  // in scope 0 at ui/impl-trait/example-calendar.rs:242:52: 242:63
    let mut _9: isize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:242:23: 242:30
    let mut _11: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:243:20: 243:28
    let mut _12: &G;                     // in scope 0 at ui/impl-trait/example-calendar.rs:243:20: 243:23
    let mut _13: &G;                     // in scope 0 at ui/impl-trait/example-calendar.rs:243:27: 243:28
    let _14: std::option::Option<<It as std::iter::Iterator>::Item>; // in scope 0 at ui/impl-trait/example-calendar.rs:246:17: 246:31
    let mut _15: &mut std::iter::Peekable<It>; // in scope 0 at ui/impl-trait/example-calendar.rs:246:17: 246:31
    let mut _16: G;                      // in scope 0 at ui/impl-trait/example-calendar.rs:249:14: 249:25
    let mut _17: &G;                     // in scope 0 at ui/impl-trait/example-calendar.rs:249:14: 249:25
    let mut _18: InGroup<std::iter::Peekable<It>, F, G>; // in scope 0 at ui/impl-trait/example-calendar.rs:249:27: 253:14
    let mut _19: std::iter::Peekable<It>; // in scope 0 at ui/impl-trait/example-calendar.rs:250:21: 250:26
    let mut _20: F;                      // in scope 0 at ui/impl-trait/example-calendar.rs:251:20: 251:34
    let mut _21: &F;                     // in scope 0 at ui/impl-trait/example-calendar.rs:251:20: 251:34
    let mut _22: G;                      // in scope 0 at ui/impl-trait/example-calendar.rs:252:20: 252:23
    let mut _23: &mut &mut GroupBy<It, F>; // in scope 0 at ui/impl-trait/example-calendar.rs:240:45: 254:10
    let mut _24: &mut GroupBy<It, F>;    // in scope 0 at ui/impl-trait/example-calendar.rs:240:45: 254:10
    let mut _25: &mut &mut GroupBy<It, F>; // in scope 0 at ui/impl-trait/example-calendar.rs:240:45: 254:10
    let mut _26: &mut GroupBy<It, F>;    // in scope 0 at ui/impl-trait/example-calendar.rs:240:45: 254:10
    let mut _27: &mut &mut GroupBy<It, F>; // in scope 0 at ui/impl-trait/example-calendar.rs:240:45: 254:10
    let mut _28: &mut GroupBy<It, F>;    // in scope 0 at ui/impl-trait/example-calendar.rs:240:45: 254:10
    let mut _29: &mut &mut GroupBy<It, F>; // in scope 0 at ui/impl-trait/example-calendar.rs:240:45: 254:10
    let mut _30: &mut GroupBy<It, F>;    // in scope 0 at ui/impl-trait/example-calendar.rs:240:45: 254:10
    let mut _31: &mut &mut GroupBy<It, F>; // in scope 0 at ui/impl-trait/example-calendar.rs:240:45: 254:10
    let mut _32: &mut GroupBy<It, F>;    // in scope 0 at ui/impl-trait/example-calendar.rs:240:45: 254:10
    let mut _33: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:247:13: 247:14
    let mut _34: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:254:9: 254:10
    let mut _35: isize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:247:13: 247:14
    scope 1 {
        debug start => _3;               // in scope 1 at ui/impl-trait/example-calendar.rs:241:17: 241:22
        scope 2 {
            debug k => _10;              // in scope 2 at ui/impl-trait/example-calendar.rs:242:28: 242:29
            let _10: G;                  // in scope 2 at ui/impl-trait/example-calendar.rs:242:28: 242:29
        }
    }

    bb0: {
        _33 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:241:17: 241:22
        _34 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:241:17: 241:22
        _23 = deref_copy (_1.0: &mut &mut GroupBy<It, F>); // scope 0 at ui/impl-trait/example-calendar.rs:241:25: 241:40
        _24 = deref_copy (*_23);         // scope 0 at ui/impl-trait/example-calendar.rs:241:25: 241:40
        _4 = &((*_24).0: std::iter::Peekable<It>); // scope 0 at ui/impl-trait/example-calendar.rs:241:25: 241:40
        _3 = <Peekable<It> as Clone>::clone(move _4) -> [return: bb1, unwind: bb17]; // scope 0 at ui/impl-trait/example-calendar.rs:241:25: 241:40
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:241:33: 241:38
                                         // + literal: Const { ty: for<'a> fn(&'a Peekable<It>) -> Peekable<It> {<Peekable<It> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _34 = const true;                // scope 0 at ui/impl-trait/example-calendar.rs:241:39: 241:40
        goto -> bb2;                     // scope 1 at ui/impl-trait/example-calendar.rs:242:13: 247:14
    }

    bb2: {
        _25 = deref_copy (_1.0: &mut &mut GroupBy<It, F>); // scope 2 at ui/impl-trait/example-calendar.rs:242:33: 242:47
        _26 = deref_copy (*_25);         // scope 2 at ui/impl-trait/example-calendar.rs:242:33: 242:47
        _7 = &mut ((*_26).0: std::iter::Peekable<It>); // scope 2 at ui/impl-trait/example-calendar.rs:242:33: 242:47
        _6 = Peekable::<It>::peek(move _7) -> [return: bb3, unwind: bb24]; // scope 2 at ui/impl-trait/example-calendar.rs:242:33: 242:47
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:242:41: 242:45
                                         // + literal: Const { ty: for<'a> fn(&'a mut Peekable<It>) -> Option<&'a <It as Iterator>::Item> {Peekable::<It>::peek}, val: Value(<ZST>) }
    }

    bb3: {
        _27 = deref_copy (_1.0: &mut &mut GroupBy<It, F>); // scope 2 at ui/impl-trait/example-calendar.rs:242:52: 242:63
        _28 = deref_copy (*_27);         // scope 2 at ui/impl-trait/example-calendar.rs:242:52: 242:63
        _8 = &mut ((*_28).1: F);         // scope 2 at ui/impl-trait/example-calendar.rs:242:52: 242:63
        _5 = Option::<&<It as Iterator>::Item>::map::<G, &mut F>(move _6, move _8) -> [return: bb4, unwind: bb24]; // scope 2 at ui/impl-trait/example-calendar.rs:242:33: 242:64
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:242:48: 242:51
                                         // + literal: Const { ty: fn(Option<&<It as Iterator>::Item>, &mut F) -> Option<G> {Option::<&<It as Iterator>::Item>::map::<G, &mut F>}, val: Value(<ZST>) }
    }

    bb4: {
        _33 = const true;                // scope 2 at ui/impl-trait/example-calendar.rs:242:63: 242:64
        _9 = discriminant(_5);           // scope 2 at ui/impl-trait/example-calendar.rs:242:23: 242:30
        switchInt(move _9) -> [1: bb5, otherwise: bb22]; // scope 2 at ui/impl-trait/example-calendar.rs:242:23: 242:30
    }

    bb5: {
        _33 = const false;               // scope 2 at ui/impl-trait/example-calendar.rs:242:28: 242:29
        _10 = move ((_5 as Some).0: G);  // scope 2 at ui/impl-trait/example-calendar.rs:242:28: 242:29
        _12 = &_2;                       // scope 2 at ui/impl-trait/example-calendar.rs:243:20: 243:23
        _13 = &_10;                      // scope 2 at ui/impl-trait/example-calendar.rs:243:27: 243:28
        _11 = <G as PartialEq>::ne(move _12, move _13) -> [return: bb6, unwind: bb16]; // scope 2 at ui/impl-trait/example-calendar.rs:243:20: 243:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:243:20: 243:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a G, &'b G) -> bool {<G as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _11) -> [0: bb8, otherwise: bb7]; // scope 2 at ui/impl-trait/example-calendar.rs:243:20: 243:28
    }

    bb7: {
        drop(_10) -> [return: bb22, unwind: bb24]; // scope 1 at ui/impl-trait/example-calendar.rs:247:13: 247:14
    }

    bb8: {
        _29 = deref_copy (_1.0: &mut &mut GroupBy<It, F>); // scope 2 at ui/impl-trait/example-calendar.rs:246:17: 246:31
        _30 = deref_copy (*_29);         // scope 2 at ui/impl-trait/example-calendar.rs:246:17: 246:31
        _15 = &mut ((*_30).0: std::iter::Peekable<It>); // scope 2 at ui/impl-trait/example-calendar.rs:246:17: 246:31
        _14 = <Peekable<It> as Iterator>::next(move _15) -> [return: bb9, unwind: bb16]; // scope 2 at ui/impl-trait/example-calendar.rs:246:17: 246:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:246:25: 246:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut Peekable<It>) -> Option<<Peekable<It> as Iterator>::Item> {<Peekable<It> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_14) -> [return: bb10, unwind: bb16]; // scope 2 at ui/impl-trait/example-calendar.rs:246:31: 246:32
    }

    bb10: {
        drop(_10) -> [return: bb11, unwind: bb24]; // scope 1 at ui/impl-trait/example-calendar.rs:247:13: 247:14
    }

    bb11: {
        _33 = const false;               // scope 1 at ui/impl-trait/example-calendar.rs:247:13: 247:14
        goto -> bb2;                     // scope 1 at ui/impl-trait/example-calendar.rs:242:13: 247:14
    }

    bb12: {
        _34 = const false;               // scope 1 at ui/impl-trait/example-calendar.rs:250:21: 250:26
        _19 = move _3;                   // scope 1 at ui/impl-trait/example-calendar.rs:250:21: 250:26
        _31 = deref_copy (_1.0: &mut &mut GroupBy<It, F>); // scope 1 at ui/impl-trait/example-calendar.rs:251:20: 251:34
        _32 = deref_copy (*_31);         // scope 1 at ui/impl-trait/example-calendar.rs:251:20: 251:34
        _21 = &((*_32).1: F);            // scope 1 at ui/impl-trait/example-calendar.rs:251:20: 251:34
        _20 = <F as Clone>::clone(move _21) -> [return: bb13, unwind: bb14]; // scope 1 at ui/impl-trait/example-calendar.rs:251:20: 251:34
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:251:27: 251:32
                                         // + literal: Const { ty: for<'a> fn(&'a F) -> F {<F as Clone>::clone}, val: Value(<ZST>) }
    }

    bb13: {
        _22 = move _2;                   // scope 1 at ui/impl-trait/example-calendar.rs:252:20: 252:23
        _18 = InGroup::<Peekable<It>, F, G> { it: move _19, f: move _20, g: move _22 }; // scope 1 at ui/impl-trait/example-calendar.rs:249:27: 253:14
        _0 = (move _16, move _18);       // scope 1 at ui/impl-trait/example-calendar.rs:249:13: 253:15
        _34 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:254:9: 254:10
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:254:10: 254:10
    }

    bb14 (cleanup): {
        drop(_19) -> bb15;               // scope 1 at ui/impl-trait/example-calendar.rs:253:13: 253:14
    }

    bb15 (cleanup): {
        drop(_16) -> bb24;               // scope 1 at ui/impl-trait/example-calendar.rs:253:14: 253:15
    }

    bb16 (cleanup): {
        drop(_10) -> bb24;               // scope 1 at ui/impl-trait/example-calendar.rs:247:13: 247:14
    }

    bb17 (cleanup): {
        drop(_2) -> bb18;                // scope 0 at ui/impl-trait/example-calendar.rs:254:9: 254:10
    }

    bb18 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:240:45: 254:10
    }

    bb19: {
        _33 = const false;               // scope 1 at ui/impl-trait/example-calendar.rs:247:13: 247:14
        _17 = &_2;                       // scope 1 at ui/impl-trait/example-calendar.rs:249:14: 249:25
        _16 = <G as Clone>::clone(move _17) -> [return: bb12, unwind: bb24]; // scope 1 at ui/impl-trait/example-calendar.rs:249:14: 249:25
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:249:18: 249:23
                                         // + literal: Const { ty: for<'a> fn(&'a G) -> G {<G as Clone>::clone}, val: Value(<ZST>) }
    }

    bb20: {
        switchInt(_33) -> [0: bb19, otherwise: bb21]; // scope 1 at ui/impl-trait/example-calendar.rs:247:13: 247:14
    }

    bb21: {
        drop(((_5 as Some).0: G)) -> [return: bb19, unwind: bb24]; // scope 1 at ui/impl-trait/example-calendar.rs:247:13: 247:14
    }

    bb22: {
        _35 = discriminant(_5);          // scope 1 at ui/impl-trait/example-calendar.rs:247:13: 247:14
        switchInt(move _35) -> [1: bb20, otherwise: bb19]; // scope 1 at ui/impl-trait/example-calendar.rs:247:13: 247:14
    }

    bb23 (cleanup): {
        drop(_3) -> bb17;                // scope 0 at ui/impl-trait/example-calendar.rs:254:9: 254:10
    }

    bb24 (cleanup): {
        switchInt(_34) -> [0: bb17, otherwise: bb23]; // scope 0 at ui/impl-trait/example-calendar.rs:254:9: 254:10
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:258:16: 258:21>::clone(_1: &InGroup<It, F, G>) -> InGroup<It, F, G> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:258:16: 258:21
    let mut _0: InGroup<It, F, G>;       // return place in scope 0 at ui/impl-trait/example-calendar.rs:258:16: 258:21
    let mut _2: It;                      // in scope 0 at ui/impl-trait/example-calendar.rs:260:5: 260:11
    let mut _3: &It;                     // in scope 0 at ui/impl-trait/example-calendar.rs:260:5: 260:11
    let _4: &It;                         // in scope 0 at ui/impl-trait/example-calendar.rs:260:5: 260:11
    let mut _5: F;                       // in scope 0 at ui/impl-trait/example-calendar.rs:261:5: 261:9
    let mut _6: &F;                      // in scope 0 at ui/impl-trait/example-calendar.rs:261:5: 261:9
    let _7: &F;                          // in scope 0 at ui/impl-trait/example-calendar.rs:261:5: 261:9
    let mut _8: G;                       // in scope 0 at ui/impl-trait/example-calendar.rs:262:5: 262:9
    let mut _9: &G;                      // in scope 0 at ui/impl-trait/example-calendar.rs:262:5: 262:9
    let _10: &G;                         // in scope 0 at ui/impl-trait/example-calendar.rs:262:5: 262:9

    bb0: {
        _4 = &((*_1).0: It);             // scope 0 at ui/impl-trait/example-calendar.rs:260:5: 260:11
        _3 = _4;                         // scope 0 at ui/impl-trait/example-calendar.rs:260:5: 260:11
        _2 = <It as Clone>::clone(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:260:5: 260:11
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:260:5: 260:11
                                         // + literal: Const { ty: for<'a> fn(&'a It) -> It {<It as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).1: F);              // scope 0 at ui/impl-trait/example-calendar.rs:261:5: 261:9
        _6 = _7;                         // scope 0 at ui/impl-trait/example-calendar.rs:261:5: 261:9
        _5 = <F as Clone>::clone(move _6) -> [return: bb2, unwind: bb5]; // scope 0 at ui/impl-trait/example-calendar.rs:261:5: 261:9
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:261:5: 261:9
                                         // + literal: Const { ty: for<'a> fn(&'a F) -> F {<F as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = &((*_1).2: G);             // scope 0 at ui/impl-trait/example-calendar.rs:262:5: 262:9
        _9 = _10;                        // scope 0 at ui/impl-trait/example-calendar.rs:262:5: 262:9
        _8 = <G as Clone>::clone(move _9) -> [return: bb3, unwind: bb4]; // scope 0 at ui/impl-trait/example-calendar.rs:262:5: 262:9
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:262:5: 262:9
                                         // + literal: Const { ty: for<'a> fn(&'a G) -> G {<G as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = InGroup::<It, F, G> { it: move _2, f: move _5, g: move _8 }; // scope 0 at ui/impl-trait/example-calendar.rs:258:16: 258:21
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:258:21: 258:21
    }

    bb4 (cleanup): {
        drop(_5) -> bb5;                 // scope 0 at ui/impl-trait/example-calendar.rs:258:20: 258:21
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at ui/impl-trait/example-calendar.rs:258:20: 258:21
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:258:16: 258:21
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:265:1: 265:83>::next(_1: &mut InGroup<It, F, G>) -> Option<<It as Iterator>::Item> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:268:13: 268:22
    let mut _0: std::option::Option<<It as std::iter::Iterator>::Item>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:268:27: 268:43
    let mut _2: std::option::Option<<It as std::iter::Iterator>::Item>; // in scope 0 at ui/impl-trait/example-calendar.rs:269:9: 269:23
    let mut _3: &mut It;                 // in scope 0 at ui/impl-trait/example-calendar.rs:269:9: 269:23
    let mut _4: [closure@ui/impl-trait/example-calendar.rs:269:33: 269:36]; // in scope 0 at ui/impl-trait/example-calendar.rs:269:33: 271:10
    let mut _5: &mut &mut InGroup<It, F, G>; // in scope 0 at ui/impl-trait/example-calendar.rs:269:33: 271:10

    bb0: {
        _3 = &mut ((*_1).0: It);         // scope 0 at ui/impl-trait/example-calendar.rs:269:9: 269:23
        _2 = <It as Iterator>::next(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:269:9: 269:23
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:269:17: 269:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut It) -> Option<<It as Iterator>::Item> {<It as Iterator>::next}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _1;                    // scope 0 at ui/impl-trait/example-calendar.rs:269:33: 271:10
        _4 = [closure@ui/impl-trait/example-calendar.rs:269:33: 269:36] { self: move _5 }; // scope 0 at ui/impl-trait/example-calendar.rs:269:33: 271:10
                                         // closure
                                         // + def_id: DefId(0:60 ~ example_calendar[ac49]::{impl#6}::next::{closure#0})
                                         // + substs: [
                                         //     It,
                                         //     F,
                                         //     G,
                                         //     i32,
                                         //     extern "rust-call" fn((<It as std::iter::Iterator>::Item,)) -> std::option::Option<<It as std::iter::Iterator>::Item>,
                                         //     (&mut &mut InGroup<It, F, G>,),
                                         // ]
        _0 = Option::<<It as Iterator>::Item>::and_then::<<It as Iterator>::Item, [closure@ui/impl-trait/example-calendar.rs:269:33: 269:36]>(move _2, move _4) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:269:9: 271:11
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:269:24: 269:32
                                         // + literal: Const { ty: fn(Option<<It as Iterator>::Item>, [closure@ui/impl-trait/example-calendar.rs:269:33: 269:36]) -> Option<<It as Iterator>::Item> {Option::<<It as Iterator>::Item>::and_then::<<It as Iterator>::Item, [closure@ui/impl-trait/example-calendar.rs:269:33: 269:36]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:272:6: 272:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:265:1: 265:83>::next::{closure#0}(_1: [closure@ui/impl-trait/example-calendar.rs:269:33: 269:36], _2: <It as Iterator>::Item) -> Option<<It as Iterator>::Item> {
    debug x => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:269:34: 269:35
    debug self => (*(_1.0: &mut &mut InGroup<It, F, G>)); // in scope 0 at ui/impl-trait/example-calendar.rs:268:13: 268:22
    let mut _0: std::option::Option<<It as std::iter::Iterator>::Item>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:269:37: 269:37
    let mut _3: bool;                    // in scope 0 at ui/impl-trait/example-calendar.rs:270:16: 270:38
    let mut _4: &G;                      // in scope 0 at ui/impl-trait/example-calendar.rs:270:16: 270:28
    let _5: G;                           // in scope 0 at ui/impl-trait/example-calendar.rs:270:16: 270:28
    let mut _6: &mut F;                  // in scope 0 at ui/impl-trait/example-calendar.rs:270:16: 270:24
    let mut _7: (&<It as std::iter::Iterator>::Item,); // in scope 0 at ui/impl-trait/example-calendar.rs:270:16: 270:28
    let mut _8: &<It as std::iter::Iterator>::Item; // in scope 0 at ui/impl-trait/example-calendar.rs:270:25: 270:27
    let _9: &<It as std::iter::Iterator>::Item; // in scope 0 at ui/impl-trait/example-calendar.rs:270:25: 270:27
    let mut _10: &G;                     // in scope 0 at ui/impl-trait/example-calendar.rs:270:32: 270:38
    let mut _11: <It as std::iter::Iterator>::Item; // in scope 0 at ui/impl-trait/example-calendar.rs:270:46: 270:47
    let mut _12: &mut &mut InGroup<It, F, G>; // in scope 0 at ui/impl-trait/example-calendar.rs:269:33: 271:10
    let mut _13: &mut InGroup<It, F, G>; // in scope 0 at ui/impl-trait/example-calendar.rs:269:33: 271:10
    let mut _14: &mut &mut InGroup<It, F, G>; // in scope 0 at ui/impl-trait/example-calendar.rs:269:33: 271:10
    let mut _15: &mut InGroup<It, F, G>; // in scope 0 at ui/impl-trait/example-calendar.rs:269:33: 271:10
    let mut _16: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:271:9: 271:10

    bb0: {
        _16 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:270:16: 270:38
        _16 = const true;                // scope 0 at ui/impl-trait/example-calendar.rs:270:16: 270:38
        _12 = deref_copy (_1.0: &mut &mut InGroup<It, F, G>); // scope 0 at ui/impl-trait/example-calendar.rs:270:16: 270:24
        _13 = deref_copy (*_12);         // scope 0 at ui/impl-trait/example-calendar.rs:270:16: 270:24
        _6 = &mut ((*_13).1: F);         // scope 0 at ui/impl-trait/example-calendar.rs:270:16: 270:24
        _9 = &_2;                        // scope 0 at ui/impl-trait/example-calendar.rs:270:25: 270:27
        _8 = _9;                         // scope 0 at ui/impl-trait/example-calendar.rs:270:25: 270:27
        _7 = (move _8,);                 // scope 0 at ui/impl-trait/example-calendar.rs:270:16: 270:28
        _5 = <F as FnMut<(&<It as Iterator>::Item,)>>::call_mut(move _6, move _7) -> [return: bb1, unwind: bb9]; // scope 0 at ui/impl-trait/example-calendar.rs:270:16: 270:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:270:16: 270:24
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (&<It as Iterator>::Item,)) -> <F as FnOnce<(&<It as Iterator>::Item,)>>::Output {<F as FnMut<(&<It as Iterator>::Item,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at ui/impl-trait/example-calendar.rs:270:16: 270:28
        _14 = deref_copy (_1.0: &mut &mut InGroup<It, F, G>); // scope 0 at ui/impl-trait/example-calendar.rs:270:32: 270:38
        _15 = deref_copy (*_14);         // scope 0 at ui/impl-trait/example-calendar.rs:270:32: 270:38
        _10 = &((*_15).2: G);            // scope 0 at ui/impl-trait/example-calendar.rs:270:32: 270:38
        _3 = <G as PartialEq>::eq(move _4, move _10) -> [return: bb2, unwind: bb8]; // scope 0 at ui/impl-trait/example-calendar.rs:270:16: 270:38
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:270:16: 270:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a G, &'b G) -> bool {<G as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_5) -> [return: bb3, unwind: bb9]; // scope 0 at ui/impl-trait/example-calendar.rs:270:37: 270:38
    }

    bb3: {
        switchInt(move _3) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/impl-trait/example-calendar.rs:270:16: 270:38
    }

    bb4: {
        _16 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:270:46: 270:47
        _11 = move _2;                   // scope 0 at ui/impl-trait/example-calendar.rs:270:46: 270:47
        _0 = Option::<<It as Iterator>::Item>::Some(move _11); // scope 0 at ui/impl-trait/example-calendar.rs:270:41: 270:48
        goto -> bb6;                     // scope 0 at ui/impl-trait/example-calendar.rs:270:13: 270:64
    }

    bb5: {
        _0 = Option::<<It as Iterator>::Item>::None; // scope 0 at ui/impl-trait/example-calendar.rs:270:58: 270:62
        goto -> bb6;                     // scope 0 at ui/impl-trait/example-calendar.rs:270:13: 270:64
    }

    bb6: {
        switchInt(_16) -> [0: bb7, otherwise: bb11]; // scope 0 at ui/impl-trait/example-calendar.rs:271:9: 271:10
    }

    bb7: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:271:10: 271:10
    }

    bb8 (cleanup): {
        drop(_5) -> bb9;                 // scope 0 at ui/impl-trait/example-calendar.rs:270:37: 270:38
    }

    bb9 (cleanup): {
        drop(_2) -> bb10;                // scope 0 at ui/impl-trait/example-calendar.rs:271:9: 271:10
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:269:33: 271:10
    }

    bb11: {
        drop(_2) -> bb7;                 // scope 0 at ui/impl-trait/example-calendar.rs:271:9: 271:10
    }
}

fn IteratorExt::group_by(_1: Self, _2: F) -> GroupBy<Self, F> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:276:23: 276:27
    debug f => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:276:29: 276:30
    let mut _0: GroupBy<Self, F>;        // return place in scope 0 at ui/impl-trait/example-calendar.rs:276:38: 276:54
    let mut _3: std::iter::Peekable<Self>; // in scope 0 at ui/impl-trait/example-calendar.rs:280:23: 280:38
    let mut _4: Self;                    // in scope 0 at ui/impl-trait/example-calendar.rs:280:23: 280:27
    let mut _5: F;                       // in scope 0 at ui/impl-trait/example-calendar.rs:280:40: 280:41

    bb0: {
        _4 = move _1;                    // scope 0 at ui/impl-trait/example-calendar.rs:280:23: 280:27
        _3 = <Self as Iterator>::peekable(move _4) -> [return: bb1, unwind: bb2]; // scope 0 at ui/impl-trait/example-calendar.rs:280:23: 280:38
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:280:28: 280:36
                                         // + literal: Const { ty: fn(Self) -> Peekable<Self> {<Self as Iterator>::peekable}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/impl-trait/example-calendar.rs:280:40: 280:41
        _0 = GroupBy::<Self, F> { it: move _3, f: move _5 }; // scope 0 at ui/impl-trait/example-calendar.rs:280:9: 280:43
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:281:6: 281:6
    }

    bb2 (cleanup): {
        drop(_2) -> bb3;                 // scope 0 at ui/impl-trait/example-calendar.rs:281:5: 281:6
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:276:5: 281:6
    }
}

fn IteratorExt::join(_1: Self, _2: &str) -> String {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:283:13: 283:21
    debug sep => _2;                     // in scope 0 at ui/impl-trait/example-calendar.rs:283:23: 283:26
    let mut _0: std::string::String;     // return place in scope 0 at ui/impl-trait/example-calendar.rs:283:37: 283:43
    let mut _3: std::string::String;     // in scope 0 at ui/impl-trait/example-calendar.rs:285:13: 285:18
    let mut _4: std::option::Option<<Self as std::iter::Iterator>::Item>; // in scope 0 at ui/impl-trait/example-calendar.rs:286:26: 286:37
    let mut _5: &mut Self;               // in scope 0 at ui/impl-trait/example-calendar.rs:286:26: 286:37
    let mut _6: isize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:286:16: 286:23
    let _8: ();                          // in scope 0 at ui/impl-trait/example-calendar.rs:287:13: 287:40
    let mut _9: std::result::Result<(), std::fmt::Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _10: &mut std::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _11: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _12: &[&str];                // in scope 0 at ui/impl-trait/example-calendar.rs:287:23: 287:27
    let mut _13: &[&str; 1];             // in scope 0 at ui/impl-trait/example-calendar.rs:287:23: 287:27
    let _14: &[&str; 1];                 // in scope 0 at ui/impl-trait/example-calendar.rs:287:23: 287:27
    let mut _15: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _16: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _17: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _18: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _19: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/example-calendar.rs:287:29: 287:30
    let mut _20: &<Self as std::iter::Iterator>::Item; // in scope 0 at ui/impl-trait/example-calendar.rs:287:29: 287:30
    let _21: &<Self as std::iter::Iterator>::Item; // in scope 0 at ui/impl-trait/example-calendar.rs:287:29: 287:30
    let mut _22: Self;                   // in scope 0 at ui/impl-trait/example-calendar.rs:288:22: 288:26
    let mut _23: Self;                   // in scope 0 at ui/impl-trait/example-calendar.rs:288:22: 288:26
    let mut _25: std::option::Option<<Self as std::iter::Iterator>::Item>; // in scope 0 at ui/impl-trait/example-calendar.rs:288:22: 288:26
    let mut _26: &mut Self;              // in scope 0 at ui/impl-trait/example-calendar.rs:288:22: 288:26
    let mut _27: &mut Self;              // in scope 0 at ui/impl-trait/example-calendar.rs:288:22: 288:26
    let mut _28: isize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:288:13: 291:14
    let _30: ();                         // in scope 0 at ui/impl-trait/example-calendar.rs:289:17: 289:32
    let mut _31: &mut std::string::String; // in scope 0 at ui/impl-trait/example-calendar.rs:289:17: 289:32
    let mut _32: &str;                   // in scope 0 at ui/impl-trait/example-calendar.rs:289:28: 289:31
    let _33: ();                         // in scope 0 at ui/impl-trait/example-calendar.rs:290:17: 290:44
    let mut _34: std::result::Result<(), std::fmt::Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _35: &mut std::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _36: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _37: &[&str];                // in scope 0 at ui/impl-trait/example-calendar.rs:290:27: 290:31
    let mut _38: &[&str; 1];             // in scope 0 at ui/impl-trait/example-calendar.rs:290:27: 290:31
    let _39: &[&str; 1];                 // in scope 0 at ui/impl-trait/example-calendar.rs:290:27: 290:31
    let mut _40: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _41: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _42: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _43: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _44: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/example-calendar.rs:290:33: 290:34
    let mut _45: &<Self as std::iter::Iterator>::Item; // in scope 0 at ui/impl-trait/example-calendar.rs:290:33: 290:34
    let _46: &<Self as std::iter::Iterator>::Item; // in scope 0 at ui/impl-trait/example-calendar.rs:290:33: 290:34
    let mut _49: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:292:9: 292:10
    let mut _50: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:294:5: 294:6
    let mut _51: isize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:292:9: 292:10
    scope 1 {
        debug s => _3;                   // in scope 1 at ui/impl-trait/example-calendar.rs:285:13: 285:18
        scope 2 {
            debug e => _7;               // in scope 2 at ui/impl-trait/example-calendar.rs:286:21: 286:22
            let _7: <Self as std::iter::Iterator>::Item; // in scope 2 at ui/impl-trait/example-calendar.rs:286:21: 286:22
            let mut _24: Self;           // in scope 2 at ui/impl-trait/example-calendar.rs:288:22: 288:26
            let mut _48: &[&str; 1];     // in scope 2 at ui/impl-trait/example-calendar.rs:287:23: 287:27
            scope 3 {
                debug iter => _24;       // in scope 3 at ui/impl-trait/example-calendar.rs:288:22: 288:26
                let _29: <Self as std::iter::Iterator>::Item; // in scope 3 at ui/impl-trait/example-calendar.rs:288:17: 288:18
                scope 4 {
                    debug e => _29;      // in scope 4 at ui/impl-trait/example-calendar.rs:288:17: 288:18
                    let mut _47: &[&str; 1]; // in scope 4 at ui/impl-trait/example-calendar.rs:290:27: 290:31
                }
            }
        }
    }

    bb0: {
        _49 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:285:13: 285:18
        _50 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:285:13: 285:18
        _50 = const true;                // scope 0 at ui/impl-trait/example-calendar.rs:285:13: 285:18
        _3 = String::new() -> [return: bb1, unwind: bb32]; // scope 0 at ui/impl-trait/example-calendar.rs:285:21: 285:34
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:285:21: 285:32
                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _1;                    // scope 2 at ui/impl-trait/example-calendar.rs:286:26: 286:37
        _4 = <Self as Iterator>::next(move _5) -> [return: bb2, unwind: bb24]; // scope 2 at ui/impl-trait/example-calendar.rs:286:26: 286:37
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:286:31: 286:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut Self) -> Option<<Self as Iterator>::Item> {<Self as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _49 = const true;                // scope 2 at ui/impl-trait/example-calendar.rs:286:36: 286:37
        _6 = discriminant(_4);           // scope 2 at ui/impl-trait/example-calendar.rs:286:16: 286:23
        switchInt(move _6) -> [1: bb3, otherwise: bb29]; // scope 2 at ui/impl-trait/example-calendar.rs:286:16: 286:23
    }

    bb3: {
        _49 = const false;               // scope 2 at ui/impl-trait/example-calendar.rs:286:21: 286:22
        _7 = move ((_4 as Some).0: <Self as std::iter::Iterator>::Item); // scope 2 at ui/impl-trait/example-calendar.rs:286:21: 286:22
        _10 = &mut _3;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
        _48 = const _;                   // scope 2 at ui/impl-trait/example-calendar.rs:287:23: 287:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:287:23: 287:27
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(IteratorExt::join, [Self], Some(promoted[1])) }
        _14 = _48;                       // scope 2 at ui/impl-trait/example-calendar.rs:287:23: 287:27
        _13 = _14;                       // scope 2 at ui/impl-trait/example-calendar.rs:287:23: 287:27
        _12 = move _13 as &[&str] (Pointer(Unsize)); // scope 2 at ui/impl-trait/example-calendar.rs:287:23: 287:27
        _21 = &_7;                       // scope 2 at ui/impl-trait/example-calendar.rs:287:29: 287:30
        _20 = _21;                       // scope 2 at ui/impl-trait/example-calendar.rs:287:29: 287:30
        _19 = core::fmt::ArgumentV1::<'_>::new_display::<<Self as Iterator>::Item>(move _20) -> [return: bb4, unwind: bb23]; // scope 2 at ui/impl-trait/example-calendar.rs:287:29: 287:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:287:29: 287:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b <Self as Iterator>::Item) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<<Self as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = [move _19];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _17 = &_18;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _15 = move _16 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _11 = Arguments::<'_>::new_v1(move _12, move _15) -> [return: bb5, unwind: bb23]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = <String as std::fmt::Write>::write_fmt(move _10, move _11) -> [return: bb6, unwind: bb23]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, Arguments<'b>) -> Result<(), std::fmt::Error> {<String as std::fmt::Write>::write_fmt}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = Result::<(), std::fmt::Error>::unwrap(move _9) -> [return: bb7, unwind: bb23]; // scope 2 at ui/impl-trait/example-calendar.rs:287:13: 287:40
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:287:32: 287:38
                                         // + literal: Const { ty: fn(Result<(), std::fmt::Error>) {Result::<(), std::fmt::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb7: {
        _50 = const false;               // scope 2 at ui/impl-trait/example-calendar.rs:288:22: 288:26
        _23 = move _1;                   // scope 2 at ui/impl-trait/example-calendar.rs:288:22: 288:26
        _22 = <Self as IntoIterator>::into_iter(move _23) -> [return: bb8, unwind: bb23]; // scope 2 at ui/impl-trait/example-calendar.rs:288:22: 288:26
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:288:22: 288:26
                                         // + literal: Const { ty: fn(Self) -> <Self as IntoIterator>::IntoIter {<Self as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb8: {
        _24 = move _22;                  // scope 2 at ui/impl-trait/example-calendar.rs:288:22: 288:26
        goto -> bb9;                     // scope 3 at ui/impl-trait/example-calendar.rs:288:13: 291:14
    }

    bb9: {
        _27 = &mut _24;                  // scope 3 at ui/impl-trait/example-calendar.rs:288:22: 288:26
        _26 = &mut (*_27);               // scope 3 at ui/impl-trait/example-calendar.rs:288:22: 288:26
        _25 = <Self as Iterator>::next(move _26) -> [return: bb10, unwind: bb22]; // scope 3 at ui/impl-trait/example-calendar.rs:288:22: 288:26
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:288:22: 288:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut Self) -> Option<<Self as Iterator>::Item> {<Self as Iterator>::next}, val: Value(<ZST>) }
    }

    bb10: {
        _28 = discriminant(_25);         // scope 3 at ui/impl-trait/example-calendar.rs:288:22: 288:26
        switchInt(move _28) -> [0: bb13, 1: bb11, otherwise: bb12]; // scope 3 at ui/impl-trait/example-calendar.rs:288:22: 288:26
    }

    bb11: {
        _29 = move ((_25 as Some).0: <Self as std::iter::Iterator>::Item); // scope 3 at ui/impl-trait/example-calendar.rs:288:17: 288:18
        _31 = &mut _3;                   // scope 4 at ui/impl-trait/example-calendar.rs:289:17: 289:32
        _32 = _2;                        // scope 4 at ui/impl-trait/example-calendar.rs:289:28: 289:31
        _30 = String::push_str(move _31, move _32) -> [return: bb14, unwind: bb21]; // scope 4 at ui/impl-trait/example-calendar.rs:289:17: 289:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:289:19: 289:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, &'b str) {String::push_str}, val: Value(<ZST>) }
    }

    bb12: {
        unreachable;                     // scope 3 at ui/impl-trait/example-calendar.rs:288:22: 288:26
    }

    bb13: {
        drop(_24) -> [return: bb19, unwind: bb23]; // scope 2 at ui/impl-trait/example-calendar.rs:291:13: 291:14
    }

    bb14: {
        _35 = &mut _3;                   // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
        _47 = const _;                   // scope 4 at ui/impl-trait/example-calendar.rs:290:27: 290:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:290:27: 290:31
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(IteratorExt::join, [Self], Some(promoted[0])) }
        _39 = _47;                       // scope 4 at ui/impl-trait/example-calendar.rs:290:27: 290:31
        _38 = _39;                       // scope 4 at ui/impl-trait/example-calendar.rs:290:27: 290:31
        _37 = move _38 as &[&str] (Pointer(Unsize)); // scope 4 at ui/impl-trait/example-calendar.rs:290:27: 290:31
        _46 = &_29;                      // scope 4 at ui/impl-trait/example-calendar.rs:290:33: 290:34
        _45 = _46;                       // scope 4 at ui/impl-trait/example-calendar.rs:290:33: 290:34
        _44 = core::fmt::ArgumentV1::<'_>::new_display::<<Self as Iterator>::Item>(move _45) -> [return: bb15, unwind: bb21]; // scope 4 at ui/impl-trait/example-calendar.rs:290:33: 290:34
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:290:33: 290:34
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b <Self as Iterator>::Item) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<<Self as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb15: {
        _43 = [move _44];                // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _42 = &_43;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _41 = _42;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _40 = move _41 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _36 = Arguments::<'_>::new_v1(move _37, move _40) -> [return: bb16, unwind: bb21]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb16: {
        _34 = <String as std::fmt::Write>::write_fmt(move _35, move _36) -> [return: bb17, unwind: bb21]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, Arguments<'b>) -> Result<(), std::fmt::Error> {<String as std::fmt::Write>::write_fmt}, val: Value(<ZST>) }
    }

    bb17: {
        _33 = Result::<(), std::fmt::Error>::unwrap(move _34) -> [return: bb18, unwind: bb21]; // scope 4 at ui/impl-trait/example-calendar.rs:290:17: 290:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:290:36: 290:42
                                         // + literal: Const { ty: fn(Result<(), std::fmt::Error>) {Result::<(), std::fmt::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb18: {
        drop(_29) -> [return: bb9, unwind: bb22]; // scope 3 at ui/impl-trait/example-calendar.rs:291:13: 291:14
    }

    bb19: {
        drop(_7) -> [return: bb29, unwind: bb24]; // scope 1 at ui/impl-trait/example-calendar.rs:292:9: 292:10
    }

    bb20: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:294:6: 294:6
    }

    bb21 (cleanup): {
        drop(_29) -> bb22;               // scope 3 at ui/impl-trait/example-calendar.rs:291:13: 291:14
    }

    bb22 (cleanup): {
        drop(_24) -> bb23;               // scope 2 at ui/impl-trait/example-calendar.rs:291:13: 291:14
    }

    bb23 (cleanup): {
        drop(_7) -> bb24;                // scope 1 at ui/impl-trait/example-calendar.rs:292:9: 292:10
    }

    bb24 (cleanup): {
        drop(_3) -> bb32;                // scope 0 at ui/impl-trait/example-calendar.rs:294:5: 294:6
    }

    bb25 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:283:5: 294:6
    }

    bb26: {
        _49 = const false;               // scope 1 at ui/impl-trait/example-calendar.rs:292:9: 292:10
        _0 = move _3;                    // scope 1 at ui/impl-trait/example-calendar.rs:293:9: 293:10
        switchInt(_50) -> [0: bb20, otherwise: bb30]; // scope 0 at ui/impl-trait/example-calendar.rs:294:5: 294:6
    }

    bb27: {
        switchInt(_49) -> [0: bb26, otherwise: bb28]; // scope 1 at ui/impl-trait/example-calendar.rs:292:9: 292:10
    }

    bb28: {
        drop(((_4 as Some).0: <Self as std::iter::Iterator>::Item)) -> [return: bb26, unwind: bb24]; // scope 1 at ui/impl-trait/example-calendar.rs:292:9: 292:10
    }

    bb29: {
        _51 = discriminant(_4);          // scope 1 at ui/impl-trait/example-calendar.rs:292:9: 292:10
        switchInt(move _51) -> [1: bb27, otherwise: bb26]; // scope 1 at ui/impl-trait/example-calendar.rs:292:9: 292:10
    }

    bb30: {
        drop(_1) -> bb20;                // scope 0 at ui/impl-trait/example-calendar.rs:294:5: 294:6
    }

    bb31 (cleanup): {
        drop(_1) -> bb25;                // scope 0 at ui/impl-trait/example-calendar.rs:294:5: 294:6
    }

    bb32 (cleanup): {
        switchInt(_50) -> [0: bb25, otherwise: bb31]; // scope 0 at ui/impl-trait/example-calendar.rs:294:5: 294:6
    }
}

promoted[0] in IteratorExt::join: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/impl-trait/example-calendar.rs:290:27: 290:31
    let mut _1: [&str; 1];               // in scope 0 at ui/impl-trait/example-calendar.rs:290:27: 290:31

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/impl-trait/example-calendar.rs:290:27: 290:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:290:27: 290:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:290:27: 290:31
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:290:27: 290:31
    }
}

promoted[1] in IteratorExt::join: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/impl-trait/example-calendar.rs:287:23: 287:27
    let mut _1: [&str; 1];               // in scope 0 at ui/impl-trait/example-calendar.rs:287:23: 287:27

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/impl-trait/example-calendar.rs:287:23: 287:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:287:23: 287:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:287:23: 287:27
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:287:23: 287:27
    }
}

fn IteratorExt::__(_1: Self, _2: F) -> R {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:298:17: 298:21
    debug f => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:298:23: 298:24
    let mut _0: R;                       // return place in scope 0 at ui/impl-trait/example-calendar.rs:298:32: 298:33
    let mut _3: F;                       // in scope 0 at ui/impl-trait/example-calendar.rs:300:9: 300:10
    let mut _4: (Self,);                 // in scope 0 at ui/impl-trait/example-calendar.rs:300:9: 300:16
    let mut _5: Self;                    // in scope 0 at ui/impl-trait/example-calendar.rs:300:11: 300:15

    bb0: {
        _3 = move _2;                    // scope 0 at ui/impl-trait/example-calendar.rs:300:9: 300:10
        _5 = move _1;                    // scope 0 at ui/impl-trait/example-calendar.rs:300:11: 300:15
        _4 = (move _5,);                 // scope 0 at ui/impl-trait/example-calendar.rs:300:9: 300:16
        _0 = <F as FnOnce<(Self,)>>::call_once(move _3, move _4) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:300:9: 300:16
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:300:9: 300:10
                                         // + literal: Const { ty: extern "rust-call" fn(F, (Self,)) -> <F as FnOnce<(Self,)>>::Output {<F as FnOnce<(Self,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:301:6: 301:6
    }
}

fn spaces(_1: usize) -> std::iter::Take<std::iter::Repeat<char>> {
    debug n => _1;                       // in scope 0 at ui/impl-trait/example-calendar.rs:307:11: 307:12
    let mut _0: std::iter::Take<std::iter::Repeat<char>>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:307:24: 307:64
    let mut _2: std::iter::Repeat<char>; // in scope 0 at ui/impl-trait/example-calendar.rs:308:5: 308:27
    let mut _3: usize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:308:33: 308:34

    bb0: {
        _2 = std::iter::repeat::<char>(const ' ') -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:308:5: 308:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:308:5: 308:22
                                         // + literal: Const { ty: fn(char) -> std::iter::Repeat<char> {std::iter::repeat::<char>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:308:33: 308:34
        _0 = <std::iter::Repeat<char> as Iterator>::take(move _2, move _3) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:308:5: 308:35
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:308:28: 308:32
                                         // + literal: Const { ty: fn(std::iter::Repeat<char>, usize) -> std::iter::Take<std::iter::Repeat<char>> {<std::iter::Repeat<char> as Iterator>::take}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:309:2: 309:2
    }
}

fn test_spaces() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/example-calendar.rs:311:18: 311:18
    let mut _1: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::string::String;         // in scope 0 at ui/impl-trait/example-calendar.rs:312:16: 312:45
    let mut _4: std::iter::Take<std::iter::Repeat<char>>; // in scope 0 at ui/impl-trait/example-calendar.rs:312:16: 312:25
    let mut _5: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: &std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &&str;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _21: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _22: std::string::String;        // in scope 0 at ui/impl-trait/example-calendar.rs:313:16: 313:46
    let mut _23: std::iter::Take<std::iter::Repeat<char>>; // in scope 0 at ui/impl-trait/example-calendar.rs:313:16: 313:26
    let mut _24: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _25: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _26: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _29: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _30: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _32: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _33: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _34: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _35: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _36: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _37: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _39: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _40: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _25;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _26;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _31: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _31;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _4 = spaces(const 0_usize) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:312:16: 312:25
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:312:16: 312:22
                                         // + literal: Const { ty: fn(usize) -> std::iter::Take<std::iter::Repeat<char>> {spaces}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <std::iter::Take<std::iter::Repeat<char>> as Iterator>::collect::<String>(move _4) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:312:16: 312:45
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:312:26: 312:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::iter::Take<std::iter::Repeat<char>>) -> String {<std::iter::Take<std::iter::Repeat<char>> as Iterator>::collect::<String>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _40 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(test_spaces, [], Some(promoted[1])) }
        _5 = _40;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_1.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_1.1: &&str);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <String as PartialEq<&str>>::eq(move _10, move _11) -> [return: bb3, unwind: bb14]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<String, &str>(move _14, move _15, move _17, move _19) -> bb14; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_3) -> bb6;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb6: {
        _23 = spaces(const 10_usize) -> bb7; // scope 0 at ui/impl-trait/example-calendar.rs:313:16: 313:26
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:313:16: 313:22
                                         // + literal: Const { ty: fn(usize) -> std::iter::Take<std::iter::Repeat<char>> {spaces}, val: Value(<ZST>) }
    }

    bb7: {
        _22 = <std::iter::Take<std::iter::Repeat<char>> as Iterator>::collect::<String>(move _23) -> bb8; // scope 0 at ui/impl-trait/example-calendar.rs:313:16: 313:46
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:313:27: 313:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(std::iter::Take<std::iter::Repeat<char>>) -> String {<std::iter::Take<std::iter::Repeat<char>> as Iterator>::collect::<String>}, val: Value(<ZST>) }
    }

    bb8: {
        _21 = &_22;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _39 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(test_spaces, [], Some(promoted[0])) }
        _24 = _39;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _20 = (move _21, move _24);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _25 = (_20.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _26 = (_20.1: &&str);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _29 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _30 = _26;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _28 = <String as PartialEq<&str>>::eq(move _29, move _30) -> [return: bb9, unwind: bb13]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _27 = Not(move _28);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _27) -> [0: bb11, otherwise: bb10]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _31 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = _37;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _32 = core::panicking::assert_failed::<String, &str>(move _33, move _34, move _36, move _38) -> bb13; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_22) -> bb12;               // scope 0 at ui/impl-trait/example-calendar.rs:314:1: 314:2
    }

    bb12: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:314:2: 314:2
    }

    bb13 (cleanup): {
        drop(_22) -> bb15;               // scope 0 at ui/impl-trait/example-calendar.rs:314:1: 314:2
    }

    bb14 (cleanup): {
        drop(_3) -> bb15;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:311:1: 314:2
    }
}

promoted[0] in test_spaces: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/impl-trait/example-calendar.rs:313:48: 313:60

    bb0: {
        _1 = const "          ";         // scope 0 at ui/impl-trait/example-calendar.rs:313:48: 313:60
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:313:48: 313:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in test_spaces: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/impl-trait/example-calendar.rs:312:47: 312:49

    bb0: {
        _1 = const "";                   // scope 0 at ui/impl-trait/example-calendar.rs:312:47: 312:49
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:312:47: 312:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn dates_in_year(_1: i32) -> impl Iterator<Item = NaiveDate> + Clone {
    debug year => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:317:18: 317:22
    let mut _0: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // return place in scope 0 at ui/impl-trait/example-calendar.rs:317:32: 317:67
    let mut _2: std::ops::RangeFrom<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:319:13: 319:46
    let mut _3: NaiveDate;               // in scope 0 at ui/impl-trait/example-calendar.rs:319:13: 319:44
    let mut _4: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:319:33: 319:37
    let mut _5: [closure@ui/impl-trait/example-calendar.rs:320:12: 320:27]; // in scope 0 at ui/impl-trait/example-calendar.rs:320:12: 320:36
    let mut _6: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:321:12: 321:16

    bb0: {
        _4 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:319:33: 319:37
        _3 = NaiveDate::from_ymd(move _4, const 1_u32, const 1_u32) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:319:13: 319:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:319:13: 319:32
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = RangeFrom::<NaiveDate> { start: move _3 }; // scope 0 at ui/impl-trait/example-calendar.rs:319:13: 319:46
        _6 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:321:12: 321:16
        _0 = InGroup::<RangeFrom<NaiveDate>, [closure@ui/impl-trait/example-calendar.rs:320:12: 320:27], i32> { it: move _2, f: move _5, g: move _6 }; // scope 0 at ui/impl-trait/example-calendar.rs:318:5: 322:6
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:323:2: 323:2
    }
}

fn dates_in_year::{closure#0}(_1: &[closure@ui/impl-trait/example-calendar.rs:320:12: 320:27], _2: &NaiveDate) -> i32 {
    debug d => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:320:13: 320:14
    let mut _0: i32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:320:28: 320:28
    let mut _3: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:320:28: 320:36

    bb0: {
        _3 = _2;                         // scope 0 at ui/impl-trait/example-calendar.rs:320:28: 320:36
        _0 = NaiveDate::year(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:320:28: 320:36
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:320:30: 320:34
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> i32 {NaiveDate::year}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:320:36: 320:36
    }
}

fn test_dates_in_year() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/example-calendar.rs:325:25: 325:25
    let mut _1: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:327:13: 327:22
    let mut _2: (&std::option::Option<NaiveDate>, &std::option::Option<NaiveDate>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:328:20: 328:32
    let mut _5: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:328:20: 328:32
    let mut _6: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:328:34: 328:71
    let mut _8: NaiveDate;               // in scope 0 at ui/impl-trait/example-calendar.rs:328:39: 328:70
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _23: (&std::option::Option<NaiveDate>, &std::option::Option<NaiveDate>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _24: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _25: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:331:20: 331:32
    let mut _26: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:331:20: 331:32
    let mut _27: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _28: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:331:34: 331:71
    let mut _29: NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:331:39: 331:70
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _33: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _34: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _35: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _37: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _38: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _39: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _40: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _41: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _42: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _44: std::ops::Range<i32>;   // in scope 0 at ui/impl-trait/example-calendar.rs:334:18: 334:23
    let mut _45: std::ops::Range<i32>;   // in scope 0 at ui/impl-trait/example-calendar.rs:334:18: 334:23
    let mut _47: std::option::Option<i32>; // in scope 0 at ui/impl-trait/example-calendar.rs:334:18: 334:23
    let mut _48: &mut std::ops::Range<i32>; // in scope 0 at ui/impl-trait/example-calendar.rs:334:18: 334:23
    let mut _49: &mut std::ops::Range<i32>; // in scope 0 at ui/impl-trait/example-calendar.rs:334:18: 334:23
    let mut _50: isize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:334:9: 336:10
    let mut _51: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:335:13: 335:42
    let mut _52: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:335:21: 335:41
    let mut _53: &std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:335:21: 335:33
    let _54: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:335:21: 335:33
    let mut _55: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:335:21: 335:33
    let mut _56: &std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:335:37: 335:41
    let mut _57: !;                      // in scope 0 at ui/impl-trait/example-calendar.rs:335:13: 335:42
    let mut _58: (&std::option::Option<NaiveDate>, &std::option::Option<NaiveDate>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _59: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _60: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:338:20: 338:32
    let mut _61: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:338:20: 338:32
    let mut _62: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _63: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:338:34: 338:72
    let mut _64: NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:338:39: 338:71
    let mut _67: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _68: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _69: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _70: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _72: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _73: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _74: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _75: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _76: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _77: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _79: (&std::option::Option<NaiveDate>, &std::option::Option<NaiveDate>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _80: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _81: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:339:20: 339:32
    let mut _82: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:339:20: 339:32
    let mut _83: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _84: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:339:34: 339:71
    let mut _85: NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:339:39: 339:70
    let mut _88: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _89: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _90: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _91: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _93: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _94: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _95: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _96: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _97: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _98: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _100: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:344:13: 344:22
    let mut _101: std::ops::Range<i32>;  // in scope 0 at ui/impl-trait/example-calendar.rs:345:18: 345:24
    let mut _102: std::ops::Range<i32>;  // in scope 0 at ui/impl-trait/example-calendar.rs:345:18: 345:24
    let mut _104: std::option::Option<i32>; // in scope 0 at ui/impl-trait/example-calendar.rs:345:18: 345:24
    let mut _105: &mut std::ops::Range<i32>; // in scope 0 at ui/impl-trait/example-calendar.rs:345:18: 345:24
    let mut _106: &mut std::ops::Range<i32>; // in scope 0 at ui/impl-trait/example-calendar.rs:345:18: 345:24
    let mut _107: isize;                 // in scope 0 at ui/impl-trait/example-calendar.rs:345:9: 347:10
    let mut _108: bool;                  // in scope 0 at ui/impl-trait/example-calendar.rs:346:13: 346:42
    let mut _109: bool;                  // in scope 0 at ui/impl-trait/example-calendar.rs:346:21: 346:41
    let mut _110: &std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:346:21: 346:33
    let _111: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:346:21: 346:33
    let mut _112: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:346:21: 346:33
    let mut _113: &std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:346:37: 346:41
    let mut _114: !;                     // in scope 0 at ui/impl-trait/example-calendar.rs:346:13: 346:42
    let mut _115: (&std::option::Option<NaiveDate>, &std::option::Option<NaiveDate>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _116: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _117: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:348:20: 348:32
    let mut _118: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:348:20: 348:32
    let mut _119: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _122: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _123: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _124: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _125: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _127: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _128: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _129: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _130: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _131: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _132: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _133: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _134: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:353:13: 353:22
    let mut _135: std::ops::Range<i32>;  // in scope 0 at ui/impl-trait/example-calendar.rs:354:18: 354:24
    let mut _136: std::ops::Range<i32>;  // in scope 0 at ui/impl-trait/example-calendar.rs:354:18: 354:24
    let mut _138: std::option::Option<i32>; // in scope 0 at ui/impl-trait/example-calendar.rs:354:18: 354:24
    let mut _139: &mut std::ops::Range<i32>; // in scope 0 at ui/impl-trait/example-calendar.rs:354:18: 354:24
    let mut _140: &mut std::ops::Range<i32>; // in scope 0 at ui/impl-trait/example-calendar.rs:354:18: 354:24
    let mut _141: isize;                 // in scope 0 at ui/impl-trait/example-calendar.rs:354:9: 356:10
    let mut _142: bool;                  // in scope 0 at ui/impl-trait/example-calendar.rs:355:13: 355:42
    let mut _143: bool;                  // in scope 0 at ui/impl-trait/example-calendar.rs:355:21: 355:41
    let mut _144: &std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:355:21: 355:33
    let _145: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:355:21: 355:33
    let mut _146: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:355:21: 355:33
    let mut _147: &std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:355:37: 355:41
    let mut _148: !;                     // in scope 0 at ui/impl-trait/example-calendar.rs:355:13: 355:42
    let mut _149: (&std::option::Option<NaiveDate>, &std::option::Option<NaiveDate>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _150: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _151: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:357:20: 357:32
    let mut _152: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:357:20: 357:32
    let mut _153: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _156: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _157: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _158: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _159: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _161: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _162: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _163: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _164: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _165: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _166: &std::option::Option<NaiveDate>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _167: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug dates => _1;               // in scope 1 at ui/impl-trait/example-calendar.rs:327:13: 327:22
        let _9: &std::option::Option<NaiveDate>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _10: &std::option::Option<NaiveDate>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _30: &std::option::Option<NaiveDate>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _31: &std::option::Option<NaiveDate>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _46: std::ops::Range<i32>; // in scope 1 at ui/impl-trait/example-calendar.rs:334:18: 334:23
        let _65: &std::option::Option<NaiveDate>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _66: &std::option::Option<NaiveDate>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _86: &std::option::Option<NaiveDate>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _87: &std::option::Option<NaiveDate>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        scope 2 {
            debug left_val => _9;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _10;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _15: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _15;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _30;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _31;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _36: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _36;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug iter => _46;           // in scope 6 at ui/impl-trait/example-calendar.rs:334:18: 334:23
            let mut _172: &std::option::Option<NaiveDate>; // in scope 6 at ui/impl-trait/example-calendar.rs:335:37: 335:41
        }
        scope 7 {
            debug left_val => _65;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _66;      // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _71: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 8 {
                debug kind => _71;       // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 9 {
            debug left_val => _86;       // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _87;      // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _92: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 10 {
                debug kind => _92;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 11 {
        debug dates => _100;             // in scope 11 at ui/impl-trait/example-calendar.rs:344:13: 344:22
        let mut _103: std::ops::Range<i32>; // in scope 11 at ui/impl-trait/example-calendar.rs:345:18: 345:24
        let _120: &std::option::Option<NaiveDate>; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _121: &std::option::Option<NaiveDate>; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _170: &std::option::Option<NaiveDate>; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 12 {
            debug iter => _103;          // in scope 12 at ui/impl-trait/example-calendar.rs:345:18: 345:24
            let mut _171: &std::option::Option<NaiveDate>; // in scope 12 at ui/impl-trait/example-calendar.rs:346:37: 346:41
        }
        scope 13 {
            debug left_val => _120;      // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _121;     // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _126: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 14 {
                debug kind => _126;      // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 15 {
        debug dates => _134;             // in scope 15 at ui/impl-trait/example-calendar.rs:353:13: 353:22
        let mut _137: std::ops::Range<i32>; // in scope 15 at ui/impl-trait/example-calendar.rs:354:18: 354:24
        let _154: &std::option::Option<NaiveDate>; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _155: &std::option::Option<NaiveDate>; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _168: &std::option::Option<NaiveDate>; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 16 {
            debug iter => _137;          // in scope 16 at ui/impl-trait/example-calendar.rs:354:18: 354:24
            let mut _169: &std::option::Option<NaiveDate>; // in scope 16 at ui/impl-trait/example-calendar.rs:355:37: 355:41
        }
        scope 17 {
            debug left_val => _154;      // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _155;     // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _160: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 18 {
                debug kind => _160;      // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = dates_in_year(const 2013_i32) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:327:25: 327:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:327:25: 327:38
                                         // + literal: Const { ty: fn(i32) -> impl Iterator<Item = NaiveDate> + Clone {dates_in_year}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _1;                    // scope 1 at ui/impl-trait/example-calendar.rs:328:20: 328:32
        _4 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _5) -> bb2; // scope 1 at ui/impl-trait/example-calendar.rs:328:20: 328:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:328:26: 328:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = NaiveDate> + Clone) -> Option<<impl Iterator<Item = NaiveDate> + Clone as Iterator>::Item> {<impl Iterator<Item = NaiveDate> + Clone as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _8 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 1_u32) -> bb3; // scope 1 at ui/impl-trait/example-calendar.rs:328:39: 328:70
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:328:39: 328:58
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = Option::<NaiveDate>::Some(move _8); // scope 1 at ui/impl-trait/example-calendar.rs:328:34: 328:71
        _6 = &_7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _6);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_2.0: &std::option::Option<NaiveDate>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_2.1: &std::option::Option<NaiveDate>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = <Option<NaiveDate> as PartialEq>::eq(move _13, move _14) -> bb4; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<NaiveDate>, &'b Option<NaiveDate>) -> bool {<Option<NaiveDate> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = Not(move _12);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb6, otherwise: bb5]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>(move _17, move _18, move _20, move _22); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<NaiveDate>, &'b Option<NaiveDate>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>}, val: Value(<ZST>) }
    }

    bb6: {
        _26 = &mut _1;                   // scope 1 at ui/impl-trait/example-calendar.rs:331:20: 331:32
        _25 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _26) -> bb7; // scope 1 at ui/impl-trait/example-calendar.rs:331:20: 331:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:331:26: 331:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = NaiveDate> + Clone) -> Option<<impl Iterator<Item = NaiveDate> + Clone as Iterator>::Item> {<impl Iterator<Item = NaiveDate> + Clone as Iterator>::next}, val: Value(<ZST>) }
    }

    bb7: {
        _24 = &_25;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _29 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 2_u32) -> bb8; // scope 1 at ui/impl-trait/example-calendar.rs:331:39: 331:70
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:331:39: 331:58
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb8: {
        _28 = Option::<NaiveDate>::Some(move _29); // scope 1 at ui/impl-trait/example-calendar.rs:331:34: 331:71
        _27 = &_28;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _23 = (move _24, move _27);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _30 = (_23.0: &std::option::Option<NaiveDate>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _31 = (_23.1: &std::option::Option<NaiveDate>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _34 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _35 = _31;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _33 = <Option<NaiveDate> as PartialEq>::eq(move _34, move _35) -> bb9; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<NaiveDate>, &'b Option<NaiveDate>) -> bool {<Option<NaiveDate> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _32 = Not(move _33);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _32) -> [0: bb11, otherwise: bb10]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _36 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _40 = _30;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _40;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _31;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = _42;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _43 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _37 = core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>(move _38, move _39, move _41, move _43); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<NaiveDate>, &'b Option<NaiveDate>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>}, val: Value(<ZST>) }
    }

    bb11: {
        _45 = std::ops::Range::<i32> { start: const 3_i32, end: const 31_i32 }; // scope 1 at ui/impl-trait/example-calendar.rs:334:18: 334:23
        _44 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _45) -> bb12; // scope 1 at ui/impl-trait/example-calendar.rs:334:18: 334:23
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:334:18: 334:23
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb12: {
        _46 = move _44;                  // scope 1 at ui/impl-trait/example-calendar.rs:334:18: 334:23
        goto -> bb13;                    // scope 6 at ui/impl-trait/example-calendar.rs:334:9: 336:10
    }

    bb13: {
        _49 = &mut _46;                  // scope 6 at ui/impl-trait/example-calendar.rs:334:18: 334:23
        _48 = &mut (*_49);               // scope 6 at ui/impl-trait/example-calendar.rs:334:18: 334:23
        _47 = <std::ops::Range<i32> as Iterator>::next(move _48) -> bb14; // scope 6 at ui/impl-trait/example-calendar.rs:334:18: 334:23
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:334:18: 334:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb14: {
        _50 = discriminant(_47);         // scope 6 at ui/impl-trait/example-calendar.rs:334:18: 334:23
        switchInt(move _50) -> [0: bb17, 1: bb15, otherwise: bb16]; // scope 6 at ui/impl-trait/example-calendar.rs:334:18: 334:23
    }

    bb15: {
        _55 = &mut _1;                   // scope 6 at ui/impl-trait/example-calendar.rs:335:21: 335:33
        _54 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _55) -> bb18; // scope 6 at ui/impl-trait/example-calendar.rs:335:21: 335:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:335:27: 335:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = NaiveDate> + Clone) -> Option<<impl Iterator<Item = NaiveDate> + Clone as Iterator>::Item> {<impl Iterator<Item = NaiveDate> + Clone as Iterator>::next}, val: Value(<ZST>) }
    }

    bb16: {
        unreachable;                     // scope 6 at ui/impl-trait/example-calendar.rs:334:18: 334:23
    }

    bb17: {
        _61 = &mut _1;                   // scope 1 at ui/impl-trait/example-calendar.rs:338:20: 338:32
        _60 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _61) -> bb21; // scope 1 at ui/impl-trait/example-calendar.rs:338:20: 338:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:338:26: 338:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = NaiveDate> + Clone) -> Option<<impl Iterator<Item = NaiveDate> + Clone as Iterator>::Item> {<impl Iterator<Item = NaiveDate> + Clone as Iterator>::next}, val: Value(<ZST>) }
    }

    bb18: {
        _53 = &_54;                      // scope 6 at ui/impl-trait/example-calendar.rs:335:21: 335:33
        _172 = const _;                  // scope 6 at ui/impl-trait/example-calendar.rs:335:37: 335:41
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:335:37: 335:41
                                         // + literal: Const { ty: &Option<NaiveDate>, val: Unevaluated(test_dates_in_year, [], Some(promoted[4])) }
        _56 = _172;                      // scope 6 at ui/impl-trait/example-calendar.rs:335:37: 335:41
        _52 = <Option<NaiveDate> as PartialEq>::ne(move _53, move _56) -> bb19; // scope 6 at ui/impl-trait/example-calendar.rs:335:21: 335:41
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:335:21: 335:41
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<NaiveDate>, &'b Option<NaiveDate>) -> bool {<Option<NaiveDate> as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb19: {
        _51 = Not(move _52);             // scope 6 at ui/impl-trait/example-calendar.rs:335:13: 335:42
        switchInt(move _51) -> [0: bb13, otherwise: bb20]; // scope 6 at ui/impl-trait/example-calendar.rs:335:13: 335:42
    }

    bb20: {
        _57 = core::panicking::panic(const "assertion failed: dates.next() != None"); // scope 6 at ui/impl-trait/example-calendar.rs:335:13: 335:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:335:13: 335:42
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _59 = &_60;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _64 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 31_u32) -> bb22; // scope 1 at ui/impl-trait/example-calendar.rs:338:39: 338:71
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:338:39: 338:58
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb22: {
        _63 = Option::<NaiveDate>::Some(move _64); // scope 1 at ui/impl-trait/example-calendar.rs:338:34: 338:72
        _62 = &_63;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _58 = (move _59, move _62);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _65 = (_58.0: &std::option::Option<NaiveDate>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _66 = (_58.1: &std::option::Option<NaiveDate>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _69 = _65;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _70 = _66;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _68 = <Option<NaiveDate> as PartialEq>::eq(move _69, move _70) -> bb23; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<NaiveDate>, &'b Option<NaiveDate>) -> bool {<Option<NaiveDate> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb23: {
        _67 = Not(move _68);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _67) -> [0: bb25, otherwise: bb24]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb24: {
        _71 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _73 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _75 = _65;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _74 = _75;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _77 = _66;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _76 = _77;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _78 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _72 = core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>(move _73, move _74, move _76, move _78); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<NaiveDate>, &'b Option<NaiveDate>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>}, val: Value(<ZST>) }
    }

    bb25: {
        _82 = &mut _1;                   // scope 1 at ui/impl-trait/example-calendar.rs:339:20: 339:32
        _81 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _82) -> bb26; // scope 1 at ui/impl-trait/example-calendar.rs:339:20: 339:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:339:26: 339:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = NaiveDate> + Clone) -> Option<<impl Iterator<Item = NaiveDate> + Clone as Iterator>::Item> {<impl Iterator<Item = NaiveDate> + Clone as Iterator>::next}, val: Value(<ZST>) }
    }

    bb26: {
        _80 = &_81;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _85 = NaiveDate::from_ymd(const 2013_i32, const 2_u32, const 1_u32) -> bb27; // scope 1 at ui/impl-trait/example-calendar.rs:339:39: 339:70
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:339:39: 339:58
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb27: {
        _84 = Option::<NaiveDate>::Some(move _85); // scope 1 at ui/impl-trait/example-calendar.rs:339:34: 339:71
        _83 = &_84;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _79 = (move _80, move _83);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _86 = (_79.0: &std::option::Option<NaiveDate>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _87 = (_79.1: &std::option::Option<NaiveDate>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _90 = _86;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _91 = _87;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _89 = <Option<NaiveDate> as PartialEq>::eq(move _90, move _91) -> bb28; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<NaiveDate>, &'b Option<NaiveDate>) -> bool {<Option<NaiveDate> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb28: {
        _88 = Not(move _89);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _88) -> [0: bb30, otherwise: bb29]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb29: {
        _92 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _94 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _96 = _86;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _95 = _96;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _98 = _87;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _97 = _98;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _99 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _93 = core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>(move _94, move _95, move _97, move _99); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<NaiveDate>, &'b Option<NaiveDate>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>}, val: Value(<ZST>) }
    }

    bb30: {
        _100 = dates_in_year(const 2013_i32) -> bb31; // scope 0 at ui/impl-trait/example-calendar.rs:344:25: 344:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:344:25: 344:38
                                         // + literal: Const { ty: fn(i32) -> impl Iterator<Item = NaiveDate> + Clone {dates_in_year}, val: Value(<ZST>) }
    }

    bb31: {
        _102 = std::ops::Range::<i32> { start: const 0_i32, end: const 365_i32 }; // scope 11 at ui/impl-trait/example-calendar.rs:345:18: 345:24
        _101 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _102) -> bb32; // scope 11 at ui/impl-trait/example-calendar.rs:345:18: 345:24
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:345:18: 345:24
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb32: {
        _103 = move _101;                // scope 11 at ui/impl-trait/example-calendar.rs:345:18: 345:24
        goto -> bb33;                    // scope 12 at ui/impl-trait/example-calendar.rs:345:9: 347:10
    }

    bb33: {
        _106 = &mut _103;                // scope 12 at ui/impl-trait/example-calendar.rs:345:18: 345:24
        _105 = &mut (*_106);             // scope 12 at ui/impl-trait/example-calendar.rs:345:18: 345:24
        _104 = <std::ops::Range<i32> as Iterator>::next(move _105) -> bb34; // scope 12 at ui/impl-trait/example-calendar.rs:345:18: 345:24
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:345:18: 345:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb34: {
        _107 = discriminant(_104);       // scope 12 at ui/impl-trait/example-calendar.rs:345:18: 345:24
        switchInt(move _107) -> [0: bb37, 1: bb35, otherwise: bb36]; // scope 12 at ui/impl-trait/example-calendar.rs:345:18: 345:24
    }

    bb35: {
        _112 = &mut _100;                // scope 12 at ui/impl-trait/example-calendar.rs:346:21: 346:33
        _111 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _112) -> bb38; // scope 12 at ui/impl-trait/example-calendar.rs:346:21: 346:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:346:27: 346:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = NaiveDate> + Clone) -> Option<<impl Iterator<Item = NaiveDate> + Clone as Iterator>::Item> {<impl Iterator<Item = NaiveDate> + Clone as Iterator>::next}, val: Value(<ZST>) }
    }

    bb36: {
        unreachable;                     // scope 12 at ui/impl-trait/example-calendar.rs:345:18: 345:24
    }

    bb37: {
        _118 = &mut _100;                // scope 11 at ui/impl-trait/example-calendar.rs:348:20: 348:32
        _117 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _118) -> bb41; // scope 11 at ui/impl-trait/example-calendar.rs:348:20: 348:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:348:26: 348:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = NaiveDate> + Clone) -> Option<<impl Iterator<Item = NaiveDate> + Clone as Iterator>::Item> {<impl Iterator<Item = NaiveDate> + Clone as Iterator>::next}, val: Value(<ZST>) }
    }

    bb38: {
        _110 = &_111;                    // scope 12 at ui/impl-trait/example-calendar.rs:346:21: 346:33
        _171 = const _;                  // scope 12 at ui/impl-trait/example-calendar.rs:346:37: 346:41
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:346:37: 346:41
                                         // + literal: Const { ty: &Option<NaiveDate>, val: Unevaluated(test_dates_in_year, [], Some(promoted[3])) }
        _113 = _171;                     // scope 12 at ui/impl-trait/example-calendar.rs:346:37: 346:41
        _109 = <Option<NaiveDate> as PartialEq>::ne(move _110, move _113) -> bb39; // scope 12 at ui/impl-trait/example-calendar.rs:346:21: 346:41
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:346:21: 346:41
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<NaiveDate>, &'b Option<NaiveDate>) -> bool {<Option<NaiveDate> as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb39: {
        _108 = Not(move _109);           // scope 12 at ui/impl-trait/example-calendar.rs:346:13: 346:42
        switchInt(move _108) -> [0: bb33, otherwise: bb40]; // scope 12 at ui/impl-trait/example-calendar.rs:346:13: 346:42
    }

    bb40: {
        _114 = core::panicking::panic(const "assertion failed: dates.next() != None"); // scope 12 at ui/impl-trait/example-calendar.rs:346:13: 346:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:346:13: 346:42
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb41: {
        _116 = &_117;                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _170 = const _;                  // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<NaiveDate>, val: Unevaluated(test_dates_in_year, [], Some(promoted[2])) }
        _119 = _170;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _115 = (move _116, move _119);   // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _120 = (_115.0: &std::option::Option<NaiveDate>); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _121 = (_115.1: &std::option::Option<NaiveDate>); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _124 = _120;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _125 = _121;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _123 = <Option<NaiveDate> as PartialEq>::eq(move _124, move _125) -> bb42; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<NaiveDate>, &'b Option<NaiveDate>) -> bool {<Option<NaiveDate> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb42: {
        _122 = Not(move _123);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _122) -> [0: bb44, otherwise: bb43]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb43: {
        _126 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _128 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _130 = _120;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _129 = _130;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _132 = _121;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _131 = _132;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _133 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _127 = core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>(move _128, move _129, move _131, move _133); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<NaiveDate>, &'b Option<NaiveDate>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>}, val: Value(<ZST>) }
    }

    bb44: {
        _134 = dates_in_year(const 1984_i32) -> bb45; // scope 0 at ui/impl-trait/example-calendar.rs:353:25: 353:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:353:25: 353:38
                                         // + literal: Const { ty: fn(i32) -> impl Iterator<Item = NaiveDate> + Clone {dates_in_year}, val: Value(<ZST>) }
    }

    bb45: {
        _136 = std::ops::Range::<i32> { start: const 0_i32, end: const 366_i32 }; // scope 15 at ui/impl-trait/example-calendar.rs:354:18: 354:24
        _135 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _136) -> bb46; // scope 15 at ui/impl-trait/example-calendar.rs:354:18: 354:24
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:354:18: 354:24
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb46: {
        _137 = move _135;                // scope 15 at ui/impl-trait/example-calendar.rs:354:18: 354:24
        goto -> bb47;                    // scope 16 at ui/impl-trait/example-calendar.rs:354:9: 356:10
    }

    bb47: {
        _140 = &mut _137;                // scope 16 at ui/impl-trait/example-calendar.rs:354:18: 354:24
        _139 = &mut (*_140);             // scope 16 at ui/impl-trait/example-calendar.rs:354:18: 354:24
        _138 = <std::ops::Range<i32> as Iterator>::next(move _139) -> bb48; // scope 16 at ui/impl-trait/example-calendar.rs:354:18: 354:24
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:354:18: 354:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb48: {
        _141 = discriminant(_138);       // scope 16 at ui/impl-trait/example-calendar.rs:354:18: 354:24
        switchInt(move _141) -> [0: bb51, 1: bb49, otherwise: bb50]; // scope 16 at ui/impl-trait/example-calendar.rs:354:18: 354:24
    }

    bb49: {
        _146 = &mut _134;                // scope 16 at ui/impl-trait/example-calendar.rs:355:21: 355:33
        _145 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _146) -> bb52; // scope 16 at ui/impl-trait/example-calendar.rs:355:21: 355:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:355:27: 355:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = NaiveDate> + Clone) -> Option<<impl Iterator<Item = NaiveDate> + Clone as Iterator>::Item> {<impl Iterator<Item = NaiveDate> + Clone as Iterator>::next}, val: Value(<ZST>) }
    }

    bb50: {
        unreachable;                     // scope 16 at ui/impl-trait/example-calendar.rs:354:18: 354:24
    }

    bb51: {
        _152 = &mut _134;                // scope 15 at ui/impl-trait/example-calendar.rs:357:20: 357:32
        _151 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::next(move _152) -> bb55; // scope 15 at ui/impl-trait/example-calendar.rs:357:20: 357:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:357:26: 357:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = NaiveDate> + Clone) -> Option<<impl Iterator<Item = NaiveDate> + Clone as Iterator>::Item> {<impl Iterator<Item = NaiveDate> + Clone as Iterator>::next}, val: Value(<ZST>) }
    }

    bb52: {
        _144 = &_145;                    // scope 16 at ui/impl-trait/example-calendar.rs:355:21: 355:33
        _169 = const _;                  // scope 16 at ui/impl-trait/example-calendar.rs:355:37: 355:41
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:355:37: 355:41
                                         // + literal: Const { ty: &Option<NaiveDate>, val: Unevaluated(test_dates_in_year, [], Some(promoted[1])) }
        _147 = _169;                     // scope 16 at ui/impl-trait/example-calendar.rs:355:37: 355:41
        _143 = <Option<NaiveDate> as PartialEq>::ne(move _144, move _147) -> bb53; // scope 16 at ui/impl-trait/example-calendar.rs:355:21: 355:41
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:355:21: 355:41
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<NaiveDate>, &'b Option<NaiveDate>) -> bool {<Option<NaiveDate> as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb53: {
        _142 = Not(move _143);           // scope 16 at ui/impl-trait/example-calendar.rs:355:13: 355:42
        switchInt(move _142) -> [0: bb47, otherwise: bb54]; // scope 16 at ui/impl-trait/example-calendar.rs:355:13: 355:42
    }

    bb54: {
        _148 = core::panicking::panic(const "assertion failed: dates.next() != None"); // scope 16 at ui/impl-trait/example-calendar.rs:355:13: 355:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:355:13: 355:42
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb55: {
        _150 = &_151;                    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _168 = const _;                  // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<NaiveDate>, val: Unevaluated(test_dates_in_year, [], Some(promoted[0])) }
        _153 = _168;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _149 = (move _150, move _153);   // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _154 = (_149.0: &std::option::Option<NaiveDate>); // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _155 = (_149.1: &std::option::Option<NaiveDate>); // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _158 = _154;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _159 = _155;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _157 = <Option<NaiveDate> as PartialEq>::eq(move _158, move _159) -> bb56; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<NaiveDate>, &'b Option<NaiveDate>) -> bool {<Option<NaiveDate> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb56: {
        _156 = Not(move _157);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _156) -> [0: bb58, otherwise: bb57]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb57: {
        _160 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _162 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _164 = _154;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _163 = _164;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _166 = _155;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _165 = _166;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _167 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _161 = core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>(move _162, move _163, move _165, move _167); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<NaiveDate>, &'b Option<NaiveDate>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<NaiveDate>, Option<NaiveDate>>}, val: Value(<ZST>) }
    }

    bb58: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:359:2: 359:2
    }
}

promoted[0] in test_dates_in_year: &Option<NaiveDate> = {
    let mut _0: &std::option::Option<NaiveDate>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:357:34: 357:38

    bb0: {
        _1 = Option::<NaiveDate>::None;  // scope 0 at ui/impl-trait/example-calendar.rs:357:34: 357:38
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in test_dates_in_year: &Option<NaiveDate> = {
    let mut _0: &std::option::Option<NaiveDate>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:355:37: 355:41
    let mut _1: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:355:37: 355:41

    bb0: {
        _1 = Option::<NaiveDate>::None;  // scope 0 at ui/impl-trait/example-calendar.rs:355:37: 355:41
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:355:37: 355:41
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:355:37: 355:41
    }
}

promoted[2] in test_dates_in_year: &Option<NaiveDate> = {
    let mut _0: &std::option::Option<NaiveDate>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:348:34: 348:38

    bb0: {
        _1 = Option::<NaiveDate>::None;  // scope 0 at ui/impl-trait/example-calendar.rs:348:34: 348:38
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in test_dates_in_year: &Option<NaiveDate> = {
    let mut _0: &std::option::Option<NaiveDate>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:346:37: 346:41
    let mut _1: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:346:37: 346:41

    bb0: {
        _1 = Option::<NaiveDate>::None;  // scope 0 at ui/impl-trait/example-calendar.rs:346:37: 346:41
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:346:37: 346:41
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:346:37: 346:41
    }
}

promoted[4] in test_dates_in_year: &Option<NaiveDate> = {
    let mut _0: &std::option::Option<NaiveDate>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:335:37: 335:41
    let mut _1: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:335:37: 335:41

    bb0: {
        _1 = Option::<NaiveDate>::None;  // scope 0 at ui/impl-trait/example-calendar.rs:335:37: 335:41
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:335:37: 335:41
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:335:37: 335:41
    }
}

fn test_group_by() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/example-calendar.rs:366:20: 366:20
    let _1: [[i32; 2]; 7];               // in scope 0 at ui/impl-trait/example-calendar.rs:367:9: 367:14
    let mut _2: [i32; 2];                // in scope 0 at ui/impl-trait/example-calendar.rs:368:9: 368:15
    let mut _3: [i32; 2];                // in scope 0 at ui/impl-trait/example-calendar.rs:369:9: 369:15
    let mut _4: [i32; 2];                // in scope 0 at ui/impl-trait/example-calendar.rs:370:9: 370:15
    let mut _5: [i32; 2];                // in scope 0 at ui/impl-trait/example-calendar.rs:371:9: 371:15
    let mut _6: [i32; 2];                // in scope 0 at ui/impl-trait/example-calendar.rs:372:9: 372:15
    let mut _7: [i32; 2];                // in scope 0 at ui/impl-trait/example-calendar.rs:373:9: 373:15
    let mut _8: [i32; 2];                // in scope 0 at ui/impl-trait/example-calendar.rs:374:9: 374:15
    let mut _10: std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>; // in scope 0 at ui/impl-trait/example-calendar.rs:377:16: 377:37
    let mut _11: std::slice::Iter<'_, [i32; 2]>; // in scope 0 at ui/impl-trait/example-calendar.rs:377:16: 377:28
    let mut _12: &[[i32; 2]];            // in scope 0 at ui/impl-trait/example-calendar.rs:377:16: 377:28
    let mut _13: &[[i32; 2]; 7];         // in scope 0 at ui/impl-trait/example-calendar.rs:377:16: 377:28
    let mut _14: [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]; // in scope 0 at ui/impl-trait/example-calendar.rs:377:47: 377:55
    let mut _16: &[&[[i32; 2]]; 3];      // in scope 0 at ui/impl-trait/example-calendar.rs:378:38: 382:6
    let _17: &[&[[i32; 2]]; 3];          // in scope 0 at ui/impl-trait/example-calendar.rs:378:38: 382:6
    let mut _18: std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>; // in scope 0 at ui/impl-trait/example-calendar.rs:383:24: 383:60
    let mut _19: std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>; // in scope 0 at ui/impl-trait/example-calendar.rs:383:24: 383:60
    let mut _20: GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>; // in scope 0 at ui/impl-trait/example-calendar.rs:383:24: 383:28
    let mut _21: std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>; // in scope 0 at ui/impl-trait/example-calendar.rs:383:33: 383:59
    let mut _22: std::slice::Iter<'_, &[[i32; 2]]>; // in scope 0 at ui/impl-trait/example-calendar.rs:383:33: 383:50
    let mut _23: &[&[[i32; 2]]];         // in scope 0 at ui/impl-trait/example-calendar.rs:383:33: 383:50
    let mut _25: std::option::Option<((i32, InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32>), &[[i32; 2]])>; // in scope 0 at ui/impl-trait/example-calendar.rs:383:24: 383:60
    let mut _26: &mut std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>; // in scope 0 at ui/impl-trait/example-calendar.rs:383:24: 383:60
    let mut _27: &mut std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>; // in scope 0 at ui/impl-trait/example-calendar.rs:383:24: 383:60
    let mut _28: isize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:383:5: 385:6
    let mut _31: (&&[[i32; 2]], &&[[i32; 2]]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _32: &&[[i32; 2]];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _33: &[[i32; 2]];                // in scope 0 at ui/impl-trait/example-calendar.rs:384:20: 384:46
    let _34: &[[i32; 2]];                // in scope 0 at ui/impl-trait/example-calendar.rs:384:21: 384:46
    let mut _35: &std::vec::Vec<[i32; 2]>; // in scope 0 at ui/impl-trait/example-calendar.rs:384:21: 384:42
    let _36: std::vec::Vec<[i32; 2]>;    // in scope 0 at ui/impl-trait/example-calendar.rs:384:21: 384:42
    let mut _37: InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32>; // in scope 0 at ui/impl-trait/example-calendar.rs:384:21: 384:22
    let mut _38: std::ops::RangeFull;    // in scope 0 at ui/impl-trait/example-calendar.rs:384:43: 384:45
    let mut _39: &&[[i32; 2]];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _42: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _44: &&[[i32; 2]];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _45: &&[[i32; 2]];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _47: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _48: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _49: &&[[i32; 2]];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _50: &&[[i32; 2]];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _51: &&[[i32; 2]];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _52: &&[[i32; 2]];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _55: std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>; // in scope 0 at ui/impl-trait/example-calendar.rs:387:16: 387:37
    let mut _56: std::slice::Iter<'_, [i32; 2]>; // in scope 0 at ui/impl-trait/example-calendar.rs:387:16: 387:28
    let mut _57: &[[i32; 2]];            // in scope 0 at ui/impl-trait/example-calendar.rs:387:16: 387:28
    let mut _58: &[[i32; 2]; 7];         // in scope 0 at ui/impl-trait/example-calendar.rs:387:16: 387:28
    let mut _59: [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]; // in scope 0 at ui/impl-trait/example-calendar.rs:387:47: 387:55
    let mut _61: &[&[[i32; 2]]; 3];      // in scope 0 at ui/impl-trait/example-calendar.rs:388:38: 392:6
    let _62: &[&[[i32; 2]]; 3];          // in scope 0 at ui/impl-trait/example-calendar.rs:388:38: 392:6
    let mut _63: std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>; // in scope 0 at ui/impl-trait/example-calendar.rs:393:24: 393:60
    let mut _64: std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>; // in scope 0 at ui/impl-trait/example-calendar.rs:393:24: 393:60
    let mut _65: GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>; // in scope 0 at ui/impl-trait/example-calendar.rs:393:24: 393:28
    let mut _66: std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>; // in scope 0 at ui/impl-trait/example-calendar.rs:393:33: 393:59
    let mut _67: std::slice::Iter<'_, &[[i32; 2]]>; // in scope 0 at ui/impl-trait/example-calendar.rs:393:33: 393:50
    let mut _68: &[&[[i32; 2]]];         // in scope 0 at ui/impl-trait/example-calendar.rs:393:33: 393:50
    let mut _70: std::option::Option<((i32, InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32>), &[[i32; 2]])>; // in scope 0 at ui/impl-trait/example-calendar.rs:393:24: 393:60
    let mut _71: &mut std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>; // in scope 0 at ui/impl-trait/example-calendar.rs:393:24: 393:60
    let mut _72: &mut std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>; // in scope 0 at ui/impl-trait/example-calendar.rs:393:24: 393:60
    let mut _73: isize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:393:5: 395:6
    let mut _76: (&&[[i32; 2]], &&[[i32; 2]]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _77: &&[[i32; 2]];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _78: &[[i32; 2]];                // in scope 0 at ui/impl-trait/example-calendar.rs:394:20: 394:46
    let _79: &[[i32; 2]];                // in scope 0 at ui/impl-trait/example-calendar.rs:394:21: 394:46
    let mut _80: &std::vec::Vec<[i32; 2]>; // in scope 0 at ui/impl-trait/example-calendar.rs:394:21: 394:42
    let _81: std::vec::Vec<[i32; 2]>;    // in scope 0 at ui/impl-trait/example-calendar.rs:394:21: 394:42
    let mut _82: InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32>; // in scope 0 at ui/impl-trait/example-calendar.rs:394:21: 394:22
    let mut _83: std::ops::RangeFull;    // in scope 0 at ui/impl-trait/example-calendar.rs:394:43: 394:45
    let mut _84: &&[[i32; 2]];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _87: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _88: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _89: &&[[i32; 2]];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _90: &&[[i32; 2]];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _92: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _93: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _94: &&[[i32; 2]];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _95: &&[[i32; 2]];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _96: &&[[i32; 2]];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _97: &&[[i32; 2]];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug input => _1;               // in scope 1 at ui/impl-trait/example-calendar.rs:367:9: 367:14
        let _9: GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>; // in scope 1 at ui/impl-trait/example-calendar.rs:377:9: 377:13
        scope 2 {
            debug by_x => _9;            // in scope 2 at ui/impl-trait/example-calendar.rs:377:9: 377:13
            let _15: &[&[[i32; 2]]];     // in scope 2 at ui/impl-trait/example-calendar.rs:378:9: 378:19
            let mut _100: &[&[[i32; 2]]; 3]; // in scope 2 at ui/impl-trait/example-calendar.rs:378:38: 382:6
            scope 3 {
                debug expected_1 => _15; // in scope 3 at ui/impl-trait/example-calendar.rs:378:9: 378:19
                let mut _24: std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>; // in scope 3 at ui/impl-trait/example-calendar.rs:383:24: 383:60
                let _54: GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>; // in scope 3 at ui/impl-trait/example-calendar.rs:387:9: 387:13
                scope 4 {
                    debug iter => _24;   // in scope 4 at ui/impl-trait/example-calendar.rs:383:24: 383:60
                    let _29: InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32>; // in scope 4 at ui/impl-trait/example-calendar.rs:383:14: 383:15
                    let _30: &[[i32; 2]]; // in scope 4 at ui/impl-trait/example-calendar.rs:383:18: 383:19
                    scope 5 {
                        debug a => _29;  // in scope 5 at ui/impl-trait/example-calendar.rs:383:14: 383:15
                        debug b => _30;  // in scope 5 at ui/impl-trait/example-calendar.rs:383:18: 383:19
                        let _40: &&[[i32; 2]]; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _41: &&[[i32; 2]]; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        scope 6 {
                            debug left_val => _40; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _41; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _46: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 7 {
                                debug kind => _46; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                    }
                }
                scope 8 {
                    debug by_y => _54;   // in scope 8 at ui/impl-trait/example-calendar.rs:387:9: 387:13
                    let _60: &[&[[i32; 2]]]; // in scope 8 at ui/impl-trait/example-calendar.rs:388:9: 388:19
                    let mut _99: &[&[[i32; 2]]; 3]; // in scope 8 at ui/impl-trait/example-calendar.rs:388:38: 392:6
                    scope 9 {
                        debug expected_2 => _60; // in scope 9 at ui/impl-trait/example-calendar.rs:388:9: 388:19
                        let mut _69: std::iter::Zip<GroupBy<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, std::iter::Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>; // in scope 9 at ui/impl-trait/example-calendar.rs:393:24: 393:60
                        scope 10 {
                            debug iter => _69; // in scope 10 at ui/impl-trait/example-calendar.rs:393:24: 393:60
                            let _74: InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32>; // in scope 10 at ui/impl-trait/example-calendar.rs:393:14: 393:15
                            let _75: &[[i32; 2]]; // in scope 10 at ui/impl-trait/example-calendar.rs:393:18: 393:19
                            scope 11 {
                                debug a => _74; // in scope 11 at ui/impl-trait/example-calendar.rs:393:14: 393:15
                                debug b => _75; // in scope 11 at ui/impl-trait/example-calendar.rs:393:18: 393:19
                                let _85: &&[[i32; 2]]; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                let _86: &&[[i32; 2]]; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                scope 12 {
                                    debug left_val => _85; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    debug right_val => _86; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _91: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    scope 13 {
                                        debug kind => _91; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [const 1_i32, const 1_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:368:9: 368:15
        _3 = [const 1_i32, const 1_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:369:9: 369:15
        _4 = [const 1_i32, const 2_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:370:9: 370:15
        _5 = [const 2_i32, const 2_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:371:9: 371:15
        _6 = [const 2_i32, const 3_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:372:9: 372:15
        _7 = [const 2_i32, const 3_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:373:9: 373:15
        _8 = [const 3_i32, const 3_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:374:9: 374:15
        _1 = [move _2, move _3, move _4, move _5, move _6, move _7, move _8]; // scope 0 at ui/impl-trait/example-calendar.rs:367:17: 375:6
        _13 = &_1;                       // scope 1 at ui/impl-trait/example-calendar.rs:377:16: 377:28
        _12 = move _13 as &[[i32; 2]] (Pointer(Unsize)); // scope 1 at ui/impl-trait/example-calendar.rs:377:16: 377:28
        _11 = core::slice::<impl [[i32; 2]]>::iter(move _12) -> bb1; // scope 1 at ui/impl-trait/example-calendar.rs:377:16: 377:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:377:22: 377:26
                                         // + literal: Const { ty: for<'a> fn(&'a [[i32; 2]]) -> std::slice::Iter<'a, [i32; 2]> {core::slice::<impl [[i32; 2]]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = <std::slice::Iter<'_, [i32; 2]> as Iterator>::cloned::<'_, [i32; 2]>(move _11) -> bb2; // scope 1 at ui/impl-trait/example-calendar.rs:377:16: 377:37
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:377:29: 377:35
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, [i32; 2]>) -> Cloned<std::slice::Iter<'_, [i32; 2]>> {<std::slice::Iter<'_, [i32; 2]> as Iterator>::cloned::<'_, [i32; 2]>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = <Cloned<std::slice::Iter<'_, [i32; 2]>> as IteratorExt>::group_by::<i32, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>(move _10, move _14) -> bb3; // scope 1 at ui/impl-trait/example-calendar.rs:377:16: 377:56
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:377:38: 377:46
                                         // + literal: Const { ty: fn(Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]) -> GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]> {<Cloned<std::slice::Iter<'_, [i32; 2]>> as IteratorExt>::group_by::<i32, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>}, val: Value(<ZST>) }
    }

    bb3: {
        _100 = const _;                  // scope 2 at ui/impl-trait/example-calendar.rs:378:38: 382:6
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:378:38: 382:6
                                         // + literal: Const { ty: &[&[[i32; 2]]; 3], val: Unevaluated(test_group_by, [], Some(promoted[1])) }
        _17 = _100;                      // scope 2 at ui/impl-trait/example-calendar.rs:378:38: 382:6
        _16 = _17;                       // scope 2 at ui/impl-trait/example-calendar.rs:378:38: 382:6
        _15 = move _16 as &[&[[i32; 2]]] (Pointer(Unsize)); // scope 2 at ui/impl-trait/example-calendar.rs:378:38: 382:6
        _20 = move _9;                   // scope 3 at ui/impl-trait/example-calendar.rs:383:24: 383:28
        _23 = _15;                       // scope 3 at ui/impl-trait/example-calendar.rs:383:33: 383:50
        _22 = core::slice::<impl [&[[i32; 2]]]>::iter(move _23) -> bb4; // scope 3 at ui/impl-trait/example-calendar.rs:383:33: 383:50
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:383:44: 383:48
                                         // + literal: Const { ty: for<'a> fn(&'a [&[[i32; 2]]]) -> std::slice::Iter<'a, &[[i32; 2]]> {core::slice::<impl [&[[i32; 2]]]>::iter}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = <std::slice::Iter<'_, &[[i32; 2]]> as Iterator>::cloned::<'_, &[[i32; 2]]>(move _22) -> bb5; // scope 3 at ui/impl-trait/example-calendar.rs:383:33: 383:59
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:383:51: 383:57
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, &[[i32; 2]]>) -> Cloned<std::slice::Iter<'_, &[[i32; 2]]>> {<std::slice::Iter<'_, &[[i32; 2]]> as Iterator>::cloned::<'_, &[[i32; 2]]>}, val: Value(<ZST>) }
    }

    bb5: {
        _19 = <GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]> as Iterator>::zip::<Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>(move _20, move _21) -> bb6; // scope 3 at ui/impl-trait/example-calendar.rs:383:24: 383:60
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:383:29: 383:32
                                         // + literal: Const { ty: fn(GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>) -> Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, <Cloned<std::slice::Iter<'_, &[[i32; 2]]>> as IntoIterator>::IntoIter> {<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]> as Iterator>::zip::<Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>}, val: Value(<ZST>) }
    }

    bb6: {
        _18 = <Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>> as IntoIterator>::into_iter(move _19) -> bb7; // scope 3 at ui/impl-trait/example-calendar.rs:383:24: 383:60
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:383:24: 383:60
                                         // + literal: Const { ty: fn(Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>) -> <Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>> as IntoIterator>::IntoIter {<Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb7: {
        _24 = move _18;                  // scope 3 at ui/impl-trait/example-calendar.rs:383:24: 383:60
        goto -> bb8;                     // scope 4 at ui/impl-trait/example-calendar.rs:383:5: 385:6
    }

    bb8: {
        _27 = &mut _24;                  // scope 4 at ui/impl-trait/example-calendar.rs:383:24: 383:60
        _26 = &mut (*_27);               // scope 4 at ui/impl-trait/example-calendar.rs:383:24: 383:60
        _25 = <Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>> as Iterator>::next(move _26) -> bb9; // scope 4 at ui/impl-trait/example-calendar.rs:383:24: 383:60
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:383:24: 383:60
                                         // + literal: Const { ty: for<'a> fn(&'a mut Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>) -> Option<<Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>> as Iterator>::Item> {<Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb9: {
        _28 = discriminant(_25);         // scope 4 at ui/impl-trait/example-calendar.rs:383:24: 383:60
        switchInt(move _28) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 4 at ui/impl-trait/example-calendar.rs:383:24: 383:60
    }

    bb10: {
        _29 = move ((((_25 as Some).0: ((i32, InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32>), &[[i32; 2]])).0: (i32, InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32>)).1: InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32>); // scope 4 at ui/impl-trait/example-calendar.rs:383:14: 383:15
        _30 = (((_25 as Some).0: ((i32, InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32>), &[[i32; 2]])).1: &[[i32; 2]]); // scope 4 at ui/impl-trait/example-calendar.rs:383:18: 383:19
        _37 = move _29;                  // scope 5 at ui/impl-trait/example-calendar.rs:384:21: 384:22
        _36 = <InGroup<Peekable<Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32> as Iterator>::collect::<Vec<[i32; 2]>>(move _37) -> bb13; // scope 5 at ui/impl-trait/example-calendar.rs:384:21: 384:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:384:23: 384:30
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(InGroup<Peekable<Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32>) -> Vec<[i32; 2]> {<InGroup<Peekable<Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], i32> as Iterator>::collect::<Vec<[i32; 2]>>}, val: Value(<ZST>) }
    }

    bb11: {
        unreachable;                     // scope 4 at ui/impl-trait/example-calendar.rs:383:24: 383:60
    }

    bb12: {
        _58 = &_1;                       // scope 3 at ui/impl-trait/example-calendar.rs:387:16: 387:28
        _57 = move _58 as &[[i32; 2]] (Pointer(Unsize)); // scope 3 at ui/impl-trait/example-calendar.rs:387:16: 387:28
        _56 = core::slice::<impl [[i32; 2]]>::iter(move _57) -> bb18; // scope 3 at ui/impl-trait/example-calendar.rs:387:16: 387:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:387:22: 387:26
                                         // + literal: Const { ty: for<'a> fn(&'a [[i32; 2]]) -> std::slice::Iter<'a, [i32; 2]> {core::slice::<impl [[i32; 2]]>::iter}, val: Value(<ZST>) }
    }

    bb13: {
        _35 = &_36;                      // scope 5 at ui/impl-trait/example-calendar.rs:384:21: 384:42
        _34 = <Vec<[i32; 2]> as Index<RangeFull>>::index(move _35, move _38) -> [return: bb14, unwind: bb36]; // scope 5 at ui/impl-trait/example-calendar.rs:384:21: 384:46
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:384:21: 384:46
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<[i32; 2]>, RangeFull) -> &'a <Vec<[i32; 2]> as Index<RangeFull>>::Output {<Vec<[i32; 2]> as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb14: {
        _33 = _34;                       // scope 5 at ui/impl-trait/example-calendar.rs:384:20: 384:46
        _32 = &_33;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _39 = &_30;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _31 = (move _32, move _39);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _40 = (_31.0: &&[[i32; 2]]);     // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _41 = (_31.1: &&[[i32; 2]]);     // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _44 = _40;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _45 = _41;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _43 = <&[[i32; 2]] as PartialEq>::eq(move _44, move _45) -> [return: bb15, unwind: bb36]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[[i32; 2]], &'b &[[i32; 2]]) -> bool {<&[[i32; 2]] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb15: {
        _42 = Not(move _43);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _42) -> [0: bb17, otherwise: bb16]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb16: {
        _46 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _48 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _50 = _40;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _49 = _50;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _52 = _41;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _51 = _52;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _53 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _47 = core::panicking::assert_failed::<&[[i32; 2]], &[[i32; 2]]>(move _48, move _49, move _51, move _53) -> bb36; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[[i32; 2]], &'b &[[i32; 2]], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[[i32; 2]], &[[i32; 2]]>}, val: Value(<ZST>) }
    }

    bb17: {
        drop(_36) -> bb8;                // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb18: {
        _55 = <std::slice::Iter<'_, [i32; 2]> as Iterator>::cloned::<'_, [i32; 2]>(move _56) -> bb19; // scope 3 at ui/impl-trait/example-calendar.rs:387:16: 387:37
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:387:29: 387:35
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, [i32; 2]>) -> Cloned<std::slice::Iter<'_, [i32; 2]>> {<std::slice::Iter<'_, [i32; 2]> as Iterator>::cloned::<'_, [i32; 2]>}, val: Value(<ZST>) }
    }

    bb19: {
        _54 = <Cloned<std::slice::Iter<'_, [i32; 2]>> as IteratorExt>::group_by::<i32, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>(move _55, move _59) -> bb20; // scope 3 at ui/impl-trait/example-calendar.rs:387:16: 387:56
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:387:38: 387:46
                                         // + literal: Const { ty: fn(Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]) -> GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]> {<Cloned<std::slice::Iter<'_, [i32; 2]>> as IteratorExt>::group_by::<i32, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>}, val: Value(<ZST>) }
    }

    bb20: {
        _99 = const _;                   // scope 8 at ui/impl-trait/example-calendar.rs:388:38: 392:6
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:388:38: 392:6
                                         // + literal: Const { ty: &[&[[i32; 2]]; 3], val: Unevaluated(test_group_by, [], Some(promoted[0])) }
        _62 = _99;                       // scope 8 at ui/impl-trait/example-calendar.rs:388:38: 392:6
        _61 = _62;                       // scope 8 at ui/impl-trait/example-calendar.rs:388:38: 392:6
        _60 = move _61 as &[&[[i32; 2]]] (Pointer(Unsize)); // scope 8 at ui/impl-trait/example-calendar.rs:388:38: 392:6
        _65 = move _54;                  // scope 9 at ui/impl-trait/example-calendar.rs:393:24: 393:28
        _68 = _60;                       // scope 9 at ui/impl-trait/example-calendar.rs:393:33: 393:50
        _67 = core::slice::<impl [&[[i32; 2]]]>::iter(move _68) -> bb21; // scope 9 at ui/impl-trait/example-calendar.rs:393:33: 393:50
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:393:44: 393:48
                                         // + literal: Const { ty: for<'a> fn(&'a [&[[i32; 2]]]) -> std::slice::Iter<'a, &[[i32; 2]]> {core::slice::<impl [&[[i32; 2]]]>::iter}, val: Value(<ZST>) }
    }

    bb21: {
        _66 = <std::slice::Iter<'_, &[[i32; 2]]> as Iterator>::cloned::<'_, &[[i32; 2]]>(move _67) -> bb22; // scope 9 at ui/impl-trait/example-calendar.rs:393:33: 393:59
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:393:51: 393:57
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, &[[i32; 2]]>) -> Cloned<std::slice::Iter<'_, &[[i32; 2]]>> {<std::slice::Iter<'_, &[[i32; 2]]> as Iterator>::cloned::<'_, &[[i32; 2]]>}, val: Value(<ZST>) }
    }

    bb22: {
        _64 = <GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]> as Iterator>::zip::<Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>(move _65, move _66) -> bb23; // scope 9 at ui/impl-trait/example-calendar.rs:393:24: 393:60
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:393:29: 393:32
                                         // + literal: Const { ty: fn(GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>) -> Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, <Cloned<std::slice::Iter<'_, &[[i32; 2]]>> as IntoIterator>::IntoIter> {<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]> as Iterator>::zip::<Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>}, val: Value(<ZST>) }
    }

    bb23: {
        _63 = <Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>> as IntoIterator>::into_iter(move _64) -> bb24; // scope 9 at ui/impl-trait/example-calendar.rs:393:24: 393:60
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:393:24: 393:60
                                         // + literal: Const { ty: fn(Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>) -> <Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>> as IntoIterator>::IntoIter {<Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb24: {
        _69 = move _63;                  // scope 9 at ui/impl-trait/example-calendar.rs:393:24: 393:60
        goto -> bb25;                    // scope 10 at ui/impl-trait/example-calendar.rs:393:5: 395:6
    }

    bb25: {
        _72 = &mut _69;                  // scope 10 at ui/impl-trait/example-calendar.rs:393:24: 393:60
        _71 = &mut (*_72);               // scope 10 at ui/impl-trait/example-calendar.rs:393:24: 393:60
        _70 = <Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>> as Iterator>::next(move _71) -> bb26; // scope 10 at ui/impl-trait/example-calendar.rs:393:24: 393:60
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:393:24: 393:60
                                         // + literal: Const { ty: for<'a> fn(&'a mut Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>>) -> Option<<Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>> as Iterator>::Item> {<Zip<GroupBy<Cloned<std::slice::Iter<'_, [i32; 2]>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50]>, Cloned<std::slice::Iter<'_, &[[i32; 2]]>>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb26: {
        _73 = discriminant(_70);         // scope 10 at ui/impl-trait/example-calendar.rs:393:24: 393:60
        switchInt(move _73) -> [0: bb29, 1: bb27, otherwise: bb28]; // scope 10 at ui/impl-trait/example-calendar.rs:393:24: 393:60
    }

    bb27: {
        _74 = move ((((_70 as Some).0: ((i32, InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32>), &[[i32; 2]])).0: (i32, InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32>)).1: InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32>); // scope 10 at ui/impl-trait/example-calendar.rs:393:14: 393:15
        _75 = (((_70 as Some).0: ((i32, InGroup<std::iter::Peekable<std::iter::Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32>), &[[i32; 2]])).1: &[[i32; 2]]); // scope 10 at ui/impl-trait/example-calendar.rs:393:18: 393:19
        _82 = move _74;                  // scope 11 at ui/impl-trait/example-calendar.rs:394:21: 394:22
        _81 = <InGroup<Peekable<Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32> as Iterator>::collect::<Vec<[i32; 2]>>(move _82) -> bb30; // scope 11 at ui/impl-trait/example-calendar.rs:394:21: 394:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:394:23: 394:30
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(InGroup<Peekable<Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32>) -> Vec<[i32; 2]> {<InGroup<Peekable<Cloned<std::slice::Iter<'_, [i32; 2]>>>, [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], i32> as Iterator>::collect::<Vec<[i32; 2]>>}, val: Value(<ZST>) }
    }

    bb28: {
        unreachable;                     // scope 10 at ui/impl-trait/example-calendar.rs:393:24: 393:60
    }

    bb29: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:396:2: 396:2
    }

    bb30: {
        _80 = &_81;                      // scope 11 at ui/impl-trait/example-calendar.rs:394:21: 394:42
        _79 = <Vec<[i32; 2]> as Index<RangeFull>>::index(move _80, move _83) -> [return: bb31, unwind: bb35]; // scope 11 at ui/impl-trait/example-calendar.rs:394:21: 394:46
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:394:21: 394:46
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<[i32; 2]>, RangeFull) -> &'a <Vec<[i32; 2]> as Index<RangeFull>>::Output {<Vec<[i32; 2]> as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb31: {
        _78 = _79;                       // scope 11 at ui/impl-trait/example-calendar.rs:394:20: 394:46
        _77 = &_78;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _84 = &_75;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _76 = (move _77, move _84);      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _85 = (_76.0: &&[[i32; 2]]);     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _86 = (_76.1: &&[[i32; 2]]);     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _89 = _85;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _90 = _86;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _88 = <&[[i32; 2]] as PartialEq>::eq(move _89, move _90) -> [return: bb32, unwind: bb35]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[[i32; 2]], &'b &[[i32; 2]]) -> bool {<&[[i32; 2]] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb32: {
        _87 = Not(move _88);             // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _87) -> [0: bb34, otherwise: bb33]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb33: {
        _91 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _93 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _95 = _85;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _94 = _95;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _97 = _86;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _96 = _97;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _98 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _92 = core::panicking::assert_failed::<&[[i32; 2]], &[[i32; 2]]>(move _93, move _94, move _96, move _98) -> bb35; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[[i32; 2]], &'b &[[i32; 2]], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[[i32; 2]], &[[i32; 2]]>}, val: Value(<ZST>) }
    }

    bb34: {
        drop(_81) -> bb25;               // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb35 (cleanup): {
        drop(_81) -> bb37;               // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb36 (cleanup): {
        drop(_36) -> bb37;               // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb37 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:366:1: 396:2
    }
}

promoted[0] in test_group_by: &[&[[i32; 2]]; 3] = {
    let mut _0: &[&[[i32; 2]]; 3];       // return place in scope 0 at ui/impl-trait/example-calendar.rs:388:38: 392:6
    let mut _1: [&[[i32; 2]]; 3];        // in scope 0 at ui/impl-trait/example-calendar.rs:388:39: 392:6
    let mut _2: &[[i32; 2]];             // in scope 0 at ui/impl-trait/example-calendar.rs:389:9: 389:26
    let mut _3: &[[i32; 2]; 2];          // in scope 0 at ui/impl-trait/example-calendar.rs:389:9: 389:26
    let mut _4: &[[i32; 2]; 2];          // in scope 0 at ui/impl-trait/example-calendar.rs:389:9: 389:26
    let mut _5: [[i32; 2]; 2];           // in scope 0 at ui/impl-trait/example-calendar.rs:389:10: 389:26
    let mut _6: [i32; 2];                // in scope 0 at ui/impl-trait/example-calendar.rs:389:11: 389:17
    let mut _7: [i32; 2];                // in scope 0 at ui/impl-trait/example-calendar.rs:389:19: 389:25
    let mut _8: &[[i32; 2]];             // in scope 0 at ui/impl-trait/example-calendar.rs:390:9: 390:26
    let mut _9: &[[i32; 2]; 2];          // in scope 0 at ui/impl-trait/example-calendar.rs:390:9: 390:26
    let mut _10: &[[i32; 2]; 2];         // in scope 0 at ui/impl-trait/example-calendar.rs:390:9: 390:26
    let mut _11: [[i32; 2]; 2];          // in scope 0 at ui/impl-trait/example-calendar.rs:390:10: 390:26
    let mut _12: [i32; 2];               // in scope 0 at ui/impl-trait/example-calendar.rs:390:11: 390:17
    let mut _13: [i32; 2];               // in scope 0 at ui/impl-trait/example-calendar.rs:390:19: 390:25
    let mut _14: &[[i32; 2]];            // in scope 0 at ui/impl-trait/example-calendar.rs:391:9: 391:34
    let mut _15: &[[i32; 2]; 3];         // in scope 0 at ui/impl-trait/example-calendar.rs:391:9: 391:34
    let mut _16: &[[i32; 2]; 3];         // in scope 0 at ui/impl-trait/example-calendar.rs:391:9: 391:34
    let mut _17: [[i32; 2]; 3];          // in scope 0 at ui/impl-trait/example-calendar.rs:391:10: 391:34
    let mut _18: [i32; 2];               // in scope 0 at ui/impl-trait/example-calendar.rs:391:11: 391:17
    let mut _19: [i32; 2];               // in scope 0 at ui/impl-trait/example-calendar.rs:391:19: 391:25
    let mut _20: [i32; 2];               // in scope 0 at ui/impl-trait/example-calendar.rs:391:27: 391:33

    bb0: {
        _6 = [const 1_i32, const 1_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:389:11: 389:17
        _7 = [const 1_i32, const 1_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:389:19: 389:25
        _5 = [move _6, move _7];         // scope 0 at ui/impl-trait/example-calendar.rs:389:10: 389:26
        _4 = &_5;                        // scope 0 at ui/impl-trait/example-calendar.rs:389:9: 389:26
        _3 = &(*_4);                     // scope 0 at ui/impl-trait/example-calendar.rs:389:9: 389:26
        _2 = move _3 as &[[i32; 2]] (Pointer(Unsize)); // scope 0 at ui/impl-trait/example-calendar.rs:389:9: 389:26
        _12 = [const 1_i32, const 2_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:390:11: 390:17
        _13 = [const 2_i32, const 2_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:390:19: 390:25
        _11 = [move _12, move _13];      // scope 0 at ui/impl-trait/example-calendar.rs:390:10: 390:26
        _10 = &_11;                      // scope 0 at ui/impl-trait/example-calendar.rs:390:9: 390:26
        _9 = &(*_10);                    // scope 0 at ui/impl-trait/example-calendar.rs:390:9: 390:26
        _8 = move _9 as &[[i32; 2]] (Pointer(Unsize)); // scope 0 at ui/impl-trait/example-calendar.rs:390:9: 390:26
        _18 = [const 2_i32, const 3_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:391:11: 391:17
        _19 = [const 2_i32, const 3_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:391:19: 391:25
        _20 = [const 3_i32, const 3_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:391:27: 391:33
        _17 = [move _18, move _19, move _20]; // scope 0 at ui/impl-trait/example-calendar.rs:391:10: 391:34
        _16 = &_17;                      // scope 0 at ui/impl-trait/example-calendar.rs:391:9: 391:34
        _15 = &(*_16);                   // scope 0 at ui/impl-trait/example-calendar.rs:391:9: 391:34
        _14 = move _15 as &[[i32; 2]] (Pointer(Unsize)); // scope 0 at ui/impl-trait/example-calendar.rs:391:9: 391:34
        _1 = [move _2, move _8, move _14]; // scope 0 at ui/impl-trait/example-calendar.rs:388:39: 392:6
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:388:38: 392:6
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:388:38: 392:6
    }
}

promoted[1] in test_group_by: &[&[[i32; 2]]; 3] = {
    let mut _0: &[&[[i32; 2]]; 3];       // return place in scope 0 at ui/impl-trait/example-calendar.rs:378:38: 382:6
    let mut _1: [&[[i32; 2]]; 3];        // in scope 0 at ui/impl-trait/example-calendar.rs:378:39: 382:6
    let mut _2: &[[i32; 2]];             // in scope 0 at ui/impl-trait/example-calendar.rs:379:9: 379:34
    let mut _3: &[[i32; 2]; 3];          // in scope 0 at ui/impl-trait/example-calendar.rs:379:9: 379:34
    let mut _4: &[[i32; 2]; 3];          // in scope 0 at ui/impl-trait/example-calendar.rs:379:9: 379:34
    let mut _5: [[i32; 2]; 3];           // in scope 0 at ui/impl-trait/example-calendar.rs:379:10: 379:34
    let mut _6: [i32; 2];                // in scope 0 at ui/impl-trait/example-calendar.rs:379:11: 379:17
    let mut _7: [i32; 2];                // in scope 0 at ui/impl-trait/example-calendar.rs:379:19: 379:25
    let mut _8: [i32; 2];                // in scope 0 at ui/impl-trait/example-calendar.rs:379:27: 379:33
    let mut _9: &[[i32; 2]];             // in scope 0 at ui/impl-trait/example-calendar.rs:380:9: 380:34
    let mut _10: &[[i32; 2]; 3];         // in scope 0 at ui/impl-trait/example-calendar.rs:380:9: 380:34
    let mut _11: &[[i32; 2]; 3];         // in scope 0 at ui/impl-trait/example-calendar.rs:380:9: 380:34
    let mut _12: [[i32; 2]; 3];          // in scope 0 at ui/impl-trait/example-calendar.rs:380:10: 380:34
    let mut _13: [i32; 2];               // in scope 0 at ui/impl-trait/example-calendar.rs:380:11: 380:17
    let mut _14: [i32; 2];               // in scope 0 at ui/impl-trait/example-calendar.rs:380:19: 380:25
    let mut _15: [i32; 2];               // in scope 0 at ui/impl-trait/example-calendar.rs:380:27: 380:33
    let mut _16: &[[i32; 2]];            // in scope 0 at ui/impl-trait/example-calendar.rs:381:9: 381:18
    let mut _17: &[[i32; 2]; 1];         // in scope 0 at ui/impl-trait/example-calendar.rs:381:9: 381:18
    let mut _18: &[[i32; 2]; 1];         // in scope 0 at ui/impl-trait/example-calendar.rs:381:9: 381:18
    let mut _19: [[i32; 2]; 1];          // in scope 0 at ui/impl-trait/example-calendar.rs:381:10: 381:18
    let mut _20: [i32; 2];               // in scope 0 at ui/impl-trait/example-calendar.rs:381:11: 381:17

    bb0: {
        _6 = [const 1_i32, const 1_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:379:11: 379:17
        _7 = [const 1_i32, const 1_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:379:19: 379:25
        _8 = [const 1_i32, const 2_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:379:27: 379:33
        _5 = [move _6, move _7, move _8]; // scope 0 at ui/impl-trait/example-calendar.rs:379:10: 379:34
        _4 = &_5;                        // scope 0 at ui/impl-trait/example-calendar.rs:379:9: 379:34
        _3 = &(*_4);                     // scope 0 at ui/impl-trait/example-calendar.rs:379:9: 379:34
        _2 = move _3 as &[[i32; 2]] (Pointer(Unsize)); // scope 0 at ui/impl-trait/example-calendar.rs:379:9: 379:34
        _13 = [const 2_i32, const 2_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:380:11: 380:17
        _14 = [const 2_i32, const 3_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:380:19: 380:25
        _15 = [const 2_i32, const 3_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:380:27: 380:33
        _12 = [move _13, move _14, move _15]; // scope 0 at ui/impl-trait/example-calendar.rs:380:10: 380:34
        _11 = &_12;                      // scope 0 at ui/impl-trait/example-calendar.rs:380:9: 380:34
        _10 = &(*_11);                   // scope 0 at ui/impl-trait/example-calendar.rs:380:9: 380:34
        _9 = move _10 as &[[i32; 2]] (Pointer(Unsize)); // scope 0 at ui/impl-trait/example-calendar.rs:380:9: 380:34
        _20 = [const 3_i32, const 3_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:381:11: 381:17
        _19 = [move _20];                // scope 0 at ui/impl-trait/example-calendar.rs:381:10: 381:18
        _18 = &_19;                      // scope 0 at ui/impl-trait/example-calendar.rs:381:9: 381:18
        _17 = &(*_18);                   // scope 0 at ui/impl-trait/example-calendar.rs:381:9: 381:18
        _16 = move _17 as &[[i32; 2]] (Pointer(Unsize)); // scope 0 at ui/impl-trait/example-calendar.rs:381:9: 381:18
        _1 = [move _2, move _9, move _16]; // scope 0 at ui/impl-trait/example-calendar.rs:378:39: 382:6
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:378:38: 382:6
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:378:38: 382:6
    }
}

fn test_group_by::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:377:47: 377:50], _2: &[i32; 2]) -> i32 {
    debug a => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:377:48: 377:49
    let mut _0: i32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:377:51: 377:51
    let _3: usize;                       // in scope 0 at ui/impl-trait/example-calendar.rs:377:53: 377:54

    bb0: {
        _3 = const 0_usize;              // scope 0 at ui/impl-trait/example-calendar.rs:377:53: 377:54
        _0 = (*_2)[_3];                  // scope 0 at ui/impl-trait/example-calendar.rs:377:51: 377:55
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:377:55: 377:55
    }
}

test_group_by::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-trait/example-calendar.rs:378:31: 378:32

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/impl-trait/example-calendar.rs:378:31: 378:32
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:378:31: 378:32
    }
}

fn test_group_by::{closure#1}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:387:47: 387:50], _2: &[i32; 2]) -> i32 {
    debug a => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:387:48: 387:49
    let mut _0: i32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:387:51: 387:51
    let _3: usize;                       // in scope 0 at ui/impl-trait/example-calendar.rs:387:53: 387:54

    bb0: {
        _3 = const 1_usize;              // scope 0 at ui/impl-trait/example-calendar.rs:387:53: 387:54
        _0 = (*_2)[_3];                  // scope 0 at ui/impl-trait/example-calendar.rs:387:51: 387:55
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:387:55: 387:55
    }
}

test_group_by::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-trait/example-calendar.rs:388:31: 388:32

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/impl-trait/example-calendar.rs:388:31: 388:32
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:388:31: 388:32
    }
}

fn by_month(_1: impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {
    debug it => _1;                      // in scope 0 at ui/impl-trait/example-calendar.rs:399:13: 399:15
    let mut _0: impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone; // return place in scope 0 at ui/impl-trait/example-calendar.rs:400:17: 400:89
    let mut _2: impl Iterator<Item = NaiveDate> + Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:402:5: 402:7
    let mut _3: [closure@ui/impl-trait/example-calendar.rs:402:17: 402:20]; // in scope 0 at ui/impl-trait/example-calendar.rs:402:17: 402:30

    bb0: {
        _2 = move _1;                    // scope 0 at ui/impl-trait/example-calendar.rs:402:5: 402:7
        _0 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::group_by::<u32, [closure@ui/impl-trait/example-calendar.rs:402:17: 402:20]>(move _2, move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:402:5: 402:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:402:8: 402:16
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:402:17: 402:20]) -> GroupBy<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:402:17: 402:20]> {<impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::group_by::<u32, [closure@ui/impl-trait/example-calendar.rs:402:17: 402:20]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:403:2: 403:2
    }
}

fn by_month::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:402:17: 402:20], _2: &NaiveDate) -> u32 {
    debug d => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:402:18: 402:19
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:402:21: 402:21
    let mut _3: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:402:21: 402:30

    bb0: {
        _3 = _2;                         // scope 0 at ui/impl-trait/example-calendar.rs:402:21: 402:30
        _0 = NaiveDate::month(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:402:21: 402:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:402:23: 402:28
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> u32 {NaiveDate::month}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:402:30: 402:30
    }
}

fn test_by_month() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/example-calendar.rs:405:20: 405:20
    let mut _1: impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:406:9: 406:19
    let mut _2: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:406:22: 406:41
    let mut _3: std::iter::Zip<std::ops::Range<u32>, &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone>; // in scope 0 at ui/impl-trait/example-calendar.rs:407:35: 407:59
    let mut _4: std::iter::Zip<std::ops::Range<u32>, &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone>; // in scope 0 at ui/impl-trait/example-calendar.rs:407:35: 407:59
    let mut _5: std::ops::Range<u32>;    // in scope 0 at ui/impl-trait/example-calendar.rs:407:35: 407:42
    let mut _6: &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:407:47: 407:58
    let mut _8: std::option::Option<(u32, (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone))>; // in scope 0 at ui/impl-trait/example-calendar.rs:407:35: 407:59
    let mut _9: &mut std::iter::Zip<std::ops::Range<u32>, &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone>; // in scope 0 at ui/impl-trait/example-calendar.rs:407:35: 407:59
    let mut _10: &mut std::iter::Zip<std::ops::Range<u32>, &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone>; // in scope 0 at ui/impl-trait/example-calendar.rs:407:35: 407:59
    let mut _11: isize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:407:5: 409:6
    let mut _14: (&NaiveDate, &NaiveDate); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _15: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _16: NaiveDate;                  // in scope 0 at ui/impl-trait/example-calendar.rs:408:20: 408:40
    let mut _17: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:408:20: 408:31
    let mut _18: &mut impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:408:20: 408:31
    let mut _19: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _20: NaiveDate;                  // in scope 0 at ui/impl-trait/example-calendar.rs:408:42: 408:77
    let mut _21: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:408:68: 408:73
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _26: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _27: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _29: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _30: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _31: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _32: &NaiveDate;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _33: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _34: &NaiveDate;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _36: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:410:5: 410:37
    let mut _37: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:410:13: 410:36
    let mut _38: &std::option::Option<(u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)>; // in scope 0 at ui/impl-trait/example-calendar.rs:410:13: 410:36
    let _39: std::option::Option<(u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)>; // in scope 0 at ui/impl-trait/example-calendar.rs:410:13: 410:26
    let mut _40: &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:410:13: 410:26
    let mut _41: !;                      // in scope 0 at ui/impl-trait/example-calendar.rs:410:5: 410:37
    scope 1 {
        debug months => _1;              // in scope 1 at ui/impl-trait/example-calendar.rs:406:9: 406:19
        let mut _7: std::iter::Zip<std::ops::Range<u32>, &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone>; // in scope 1 at ui/impl-trait/example-calendar.rs:407:35: 407:59
        scope 2 {
            debug iter => _7;            // in scope 2 at ui/impl-trait/example-calendar.rs:407:35: 407:59
            let _12: u32;                // in scope 2 at ui/impl-trait/example-calendar.rs:407:10: 407:15
            let mut _13: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 2 at ui/impl-trait/example-calendar.rs:407:21: 407:29
            scope 3 {
                debug month => _12;      // in scope 3 at ui/impl-trait/example-calendar.rs:407:10: 407:15
                debug date => _13;       // in scope 3 at ui/impl-trait/example-calendar.rs:407:21: 407:29
                let _22: &NaiveDate;     // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _23: &NaiveDate;     // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                scope 4 {
                    debug left_val => _22; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _23; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _28: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _28; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _2 = dates_in_year(const 2013_i32) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:406:22: 406:41
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:406:22: 406:35
                                         // + literal: Const { ty: fn(i32) -> impl Iterator<Item = NaiveDate> + Clone {dates_in_year}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>(move _2, by_month::<impl Iterator<Item = NaiveDate> + Clone>) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:406:22: 406:54
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:406:42: 406:44
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone, fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {<impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:406:45: 406:53
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = std::ops::Range::<u32> { start: const 1_u32, end: const 13_u32 }; // scope 1 at ui/impl-trait/example-calendar.rs:407:35: 407:42
        _6 = &mut _1;                    // scope 1 at ui/impl-trait/example-calendar.rs:407:47: 407:58
        _4 = <std::ops::Range<u32> as Iterator>::zip::<&mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>(move _5, move _6) -> bb3; // scope 1 at ui/impl-trait/example-calendar.rs:407:35: 407:59
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:407:43: 407:46
                                         // + literal: Const { ty: fn(std::ops::Range<u32>, &mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone) -> Zip<std::ops::Range<u32>, <&mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as IntoIterator>::IntoIter> {<std::ops::Range<u32> as Iterator>::zip::<&mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = <Zip<std::ops::Range<u32>, &mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone> as IntoIterator>::into_iter(move _4) -> bb4; // scope 1 at ui/impl-trait/example-calendar.rs:407:35: 407:59
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:407:35: 407:59
                                         // + literal: Const { ty: fn(Zip<std::ops::Range<u32>, &mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>) -> <Zip<std::ops::Range<u32>, &mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone> as IntoIterator>::IntoIter {<Zip<std::ops::Range<u32>, &mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = move _3;                    // scope 1 at ui/impl-trait/example-calendar.rs:407:35: 407:59
        goto -> bb5;                     // scope 2 at ui/impl-trait/example-calendar.rs:407:5: 409:6
    }

    bb5: {
        _10 = &mut _7;                   // scope 2 at ui/impl-trait/example-calendar.rs:407:35: 407:59
        _9 = &mut (*_10);                // scope 2 at ui/impl-trait/example-calendar.rs:407:35: 407:59
        _8 = <Zip<std::ops::Range<u32>, &mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone> as Iterator>::next(move _9) -> bb6; // scope 2 at ui/impl-trait/example-calendar.rs:407:35: 407:59
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:407:35: 407:59
                                         // + literal: Const { ty: for<'a> fn(&'a mut Zip<std::ops::Range<u32>, &mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>) -> Option<<Zip<std::ops::Range<u32>, &mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone> as Iterator>::Item> {<Zip<std::ops::Range<u32>, &mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = discriminant(_8);          // scope 2 at ui/impl-trait/example-calendar.rs:407:35: 407:59
        switchInt(move _11) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at ui/impl-trait/example-calendar.rs:407:35: 407:59
    }

    bb7: {
        _13 = move ((((_8 as Some).0: (u32, (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone))).1: (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)).1: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone); // scope 2 at ui/impl-trait/example-calendar.rs:407:21: 407:29
        _12 = (((_8 as Some).0: (u32, (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone))).0: u32); // scope 2 at ui/impl-trait/example-calendar.rs:407:10: 407:15
        _18 = &mut _13;                  // scope 3 at ui/impl-trait/example-calendar.rs:408:20: 408:31
        _17 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::nth(move _18, const 0_usize) -> bb10; // scope 3 at ui/impl-trait/example-calendar.rs:408:20: 408:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:408:25: 408:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = NaiveDate> + Clone, usize) -> Option<<impl Iterator<Item = NaiveDate> + Clone as Iterator>::Item> {<impl Iterator<Item = NaiveDate> + Clone as Iterator>::nth}, val: Value(<ZST>) }
    }

    bb8: {
        unreachable;                     // scope 2 at ui/impl-trait/example-calendar.rs:407:35: 407:59
    }

    bb9: {
        _40 = &mut _1;                   // scope 1 at ui/impl-trait/example-calendar.rs:410:13: 410:26
        _39 = <impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::next(move _40) -> bb15; // scope 1 at ui/impl-trait/example-calendar.rs:410:13: 410:26
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:410:20: 410:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone) -> Option<<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::Item> {<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::next}, val: Value(<ZST>) }
    }

    bb10: {
        _16 = Option::<NaiveDate>::unwrap(move _17) -> bb11; // scope 3 at ui/impl-trait/example-calendar.rs:408:20: 408:40
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:408:32: 408:38
                                         // + literal: Const { ty: fn(Option<NaiveDate>) -> NaiveDate {Option::<NaiveDate>::unwrap}, val: Value(<ZST>) }
    }

    bb11: {
        _15 = &_16;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = _12;                       // scope 3 at ui/impl-trait/example-calendar.rs:408:68: 408:73
        _20 = NaiveDate::from_ymd(const 2013_i32, move _21, const 1_u32) -> bb12; // scope 3 at ui/impl-trait/example-calendar.rs:408:42: 408:77
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:408:42: 408:61
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb12: {
        _19 = &_20;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _14 = (move _15, move _19);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _22 = (_14.0: &NaiveDate);       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _23 = (_14.1: &NaiveDate);       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _26 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _27 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _25 = <NaiveDate as PartialEq>::eq(move _26, move _27) -> bb13; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a NaiveDate, &'b NaiveDate) -> bool {<NaiveDate as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb13: {
        _24 = Not(move _25);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _24) -> [0: bb5, otherwise: bb14]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _28 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = _22;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _32;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _23;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = _34;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _29 = core::panicking::assert_failed::<NaiveDate, NaiveDate>(move _30, move _31, move _33, move _35); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a NaiveDate, &'b NaiveDate, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<NaiveDate, NaiveDate>}, val: Value(<ZST>) }
    }

    bb15: {
        _38 = &_39;                      // scope 1 at ui/impl-trait/example-calendar.rs:410:13: 410:36
        _37 = Option::<(u32, impl Iterator<Item = NaiveDate> + Clone)>::is_none(move _38) -> bb16; // scope 1 at ui/impl-trait/example-calendar.rs:410:13: 410:36
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:410:27: 410:34
                                         // + literal: Const { ty: for<'a> fn(&'a Option<(u32, impl Iterator<Item = NaiveDate> + Clone)>) -> bool {Option::<(u32, impl Iterator<Item = NaiveDate> + Clone)>::is_none}, val: Value(<ZST>) }
    }

    bb16: {
        _36 = Not(move _37);             // scope 1 at ui/impl-trait/example-calendar.rs:410:5: 410:37
        switchInt(move _36) -> [0: bb18, otherwise: bb17]; // scope 1 at ui/impl-trait/example-calendar.rs:410:5: 410:37
    }

    bb17: {
        _41 = core::panicking::panic(const "assertion failed: months.next().is_none()"); // scope 1 at ui/impl-trait/example-calendar.rs:410:5: 410:37
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:410:5: 410:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:411:2: 411:2
    }
}

fn by_week(_1: impl DateIterator) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {
    debug it => _1;                      // in scope 0 at ui/impl-trait/example-calendar.rs:414:12: 414:14
    let mut _0: impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone; // return place in scope 0 at ui/impl-trait/example-calendar.rs:415:14: 415:66
    let mut _2: impl DateIterator;       // in scope 0 at ui/impl-trait/example-calendar.rs:418:5: 418:7
    let mut _3: [closure@ui/impl-trait/example-calendar.rs:418:17: 418:20]; // in scope 0 at ui/impl-trait/example-calendar.rs:418:17: 418:45

    bb0: {
        _2 = move _1;                    // scope 0 at ui/impl-trait/example-calendar.rs:418:5: 418:7
        _0 = <impl DateIterator as IteratorExt>::group_by::<u32, [closure@ui/impl-trait/example-calendar.rs:418:17: 418:20]>(move _2, move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:418:5: 418:46
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:418:8: 418:16
                                         // + literal: Const { ty: fn(impl DateIterator, [closure@ui/impl-trait/example-calendar.rs:418:17: 418:20]) -> GroupBy<impl DateIterator, [closure@ui/impl-trait/example-calendar.rs:418:17: 418:20]> {<impl DateIterator as IteratorExt>::group_by::<u32, [closure@ui/impl-trait/example-calendar.rs:418:17: 418:20]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:419:2: 419:2
    }
}

fn by_week::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:418:17: 418:20], _2: &NaiveDate) -> u32 {
    debug d => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:418:18: 418:19
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:418:21: 418:21
    let mut _3: (i32, u32, Weekday);     // in scope 0 at ui/impl-trait/example-calendar.rs:418:21: 418:43
    let mut _4: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:418:21: 418:43
    let _5: NaiveDate;                   // in scope 0 at ui/impl-trait/example-calendar.rs:418:21: 418:29
    let mut _6: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:418:21: 418:29

    bb0: {
        _6 = _2;                         // scope 0 at ui/impl-trait/example-calendar.rs:418:21: 418:29
        _5 = NaiveDate::succ(move _6) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:418:21: 418:29
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:418:23: 418:27
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> NaiveDate {NaiveDate::succ}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at ui/impl-trait/example-calendar.rs:418:21: 418:43
        _3 = NaiveDate::isoweekdate(move _4) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:418:21: 418:43
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:418:30: 418:41
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> (i32, u32, Weekday) {NaiveDate::isoweekdate}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = (_3.1: u32);                // scope 0 at ui/impl-trait/example-calendar.rs:418:21: 418:45
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:418:45: 418:45
    }
}

fn test_isoweekdate() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/example-calendar.rs:421:23: 421:23
    let _1: std::vec::Vec<((i32, u32), u32)>; // in scope 0 at ui/impl-trait/example-calendar.rs:439:9: 439:16
    let mut _2: (&&[((i32, u32), u32)], &&[((i32, u32), u32); 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &&[((i32, u32), u32)];   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: &[((i32, u32), u32)];        // in scope 0 at ui/impl-trait/example-calendar.rs:440:16: 440:29
    let _5: &[((i32, u32), u32)];        // in scope 0 at ui/impl-trait/example-calendar.rs:440:17: 440:29
    let mut _6: &std::vec::Vec<((i32, u32), u32)>; // in scope 0 at ui/impl-trait/example-calendar.rs:440:17: 440:24
    let mut _7: std::ops::RangeTo<usize>; // in scope 0 at ui/impl-trait/example-calendar.rs:440:25: 440:28
    let mut _8: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: &&[((i32, u32), u32)];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &&[((i32, u32), u32)];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &&[((i32, u32), u32)];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &&[((i32, u32), u32); 2];   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _23: (&&[((i32, u32), u32)], &&[((i32, u32), u32); 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _24: &&[((i32, u32), u32)];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _25: &[((i32, u32), u32)];       // in scope 0 at ui/impl-trait/example-calendar.rs:441:16: 441:43
    let _26: &[((i32, u32), u32)];       // in scope 0 at ui/impl-trait/example-calendar.rs:441:17: 441:43
    let mut _27: &std::vec::Vec<((i32, u32), u32)>; // in scope 0 at ui/impl-trait/example-calendar.rs:441:17: 441:24
    let mut _28: std::ops::RangeFrom<usize>; // in scope 0 at ui/impl-trait/example-calendar.rs:441:25: 441:42
    let mut _29: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:441:25: 441:40
    let mut _30: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:441:25: 441:38
    let mut _31: &std::vec::Vec<((i32, u32), u32)>; // in scope 0 at ui/impl-trait/example-calendar.rs:441:25: 441:38
    let mut _32: (usize, bool);          // in scope 0 at ui/impl-trait/example-calendar.rs:441:25: 441:40
    let mut _33: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _38: &&[((i32, u32), u32)];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _39: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _41: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _42: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _43: &&[((i32, u32), u32)];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _44: &&[((i32, u32), u32)];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _45: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _46: &&[((i32, u32), u32); 2];   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _49: (&&[((i32, u32), u32)], &&[((i32, u32), u32); 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _50: &&[((i32, u32), u32)];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _51: &[((i32, u32), u32)];       // in scope 0 at ui/impl-trait/example-calendar.rs:444:16: 444:29
    let _52: &[((i32, u32), u32)];       // in scope 0 at ui/impl-trait/example-calendar.rs:444:17: 444:29
    let mut _53: &std::vec::Vec<((i32, u32), u32)>; // in scope 0 at ui/impl-trait/example-calendar.rs:444:17: 444:24
    let mut _54: std::ops::RangeTo<usize>; // in scope 0 at ui/impl-trait/example-calendar.rs:444:25: 444:28
    let mut _55: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _58: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _59: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _60: &&[((i32, u32), u32)];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _61: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _63: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _64: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _65: &&[((i32, u32), u32)];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _66: &&[((i32, u32), u32)];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _67: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _68: &&[((i32, u32), u32); 2];   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _69: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _70: (&&[((i32, u32), u32)], &&[((i32, u32), u32); 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _71: &&[((i32, u32), u32)];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _72: &[((i32, u32), u32)];       // in scope 0 at ui/impl-trait/example-calendar.rs:445:16: 445:43
    let _73: &[((i32, u32), u32)];       // in scope 0 at ui/impl-trait/example-calendar.rs:445:17: 445:43
    let mut _74: &std::vec::Vec<((i32, u32), u32)>; // in scope 0 at ui/impl-trait/example-calendar.rs:445:17: 445:24
    let mut _75: std::ops::RangeFrom<usize>; // in scope 0 at ui/impl-trait/example-calendar.rs:445:25: 445:42
    let mut _76: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:445:25: 445:40
    let mut _77: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:445:25: 445:38
    let mut _78: &std::vec::Vec<((i32, u32), u32)>; // in scope 0 at ui/impl-trait/example-calendar.rs:445:25: 445:38
    let mut _79: (usize, bool);          // in scope 0 at ui/impl-trait/example-calendar.rs:445:25: 445:40
    let mut _80: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _83: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _84: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _85: &&[((i32, u32), u32)];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _86: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _88: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _89: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _90: &&[((i32, u32), u32)];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _91: &&[((i32, u32), u32)];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _92: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _93: &&[((i32, u32), u32); 2];   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _94: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _96: (&&[((i32, u32), u32)], &&[((i32, u32), u32); 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _97: &&[((i32, u32), u32)];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _98: &[((i32, u32), u32)];       // in scope 0 at ui/impl-trait/example-calendar.rs:448:16: 448:29
    let _99: &[((i32, u32), u32)];       // in scope 0 at ui/impl-trait/example-calendar.rs:448:17: 448:29
    let mut _100: &std::vec::Vec<((i32, u32), u32)>; // in scope 0 at ui/impl-trait/example-calendar.rs:448:17: 448:24
    let mut _101: std::ops::RangeTo<usize>; // in scope 0 at ui/impl-trait/example-calendar.rs:448:25: 448:28
    let mut _102: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _105: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _106: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _107: &&[((i32, u32), u32)]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _108: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _110: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _111: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _112: &&[((i32, u32), u32)]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _113: &&[((i32, u32), u32)];     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _114: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _115: &&[((i32, u32), u32); 2];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _116: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _117: (&&[((i32, u32), u32)], &&[((i32, u32), u32); 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _118: &&[((i32, u32), u32)]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _119: &[((i32, u32), u32)];      // in scope 0 at ui/impl-trait/example-calendar.rs:449:16: 449:43
    let _120: &[((i32, u32), u32)];      // in scope 0 at ui/impl-trait/example-calendar.rs:449:17: 449:43
    let mut _121: &std::vec::Vec<((i32, u32), u32)>; // in scope 0 at ui/impl-trait/example-calendar.rs:449:17: 449:24
    let mut _122: std::ops::RangeFrom<usize>; // in scope 0 at ui/impl-trait/example-calendar.rs:449:25: 449:42
    let mut _123: usize;                 // in scope 0 at ui/impl-trait/example-calendar.rs:449:25: 449:40
    let mut _124: usize;                 // in scope 0 at ui/impl-trait/example-calendar.rs:449:25: 449:38
    let mut _125: &std::vec::Vec<((i32, u32), u32)>; // in scope 0 at ui/impl-trait/example-calendar.rs:449:25: 449:38
    let mut _126: (usize, bool);         // in scope 0 at ui/impl-trait/example-calendar.rs:449:25: 449:40
    let mut _127: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _130: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _131: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _132: &&[((i32, u32), u32)]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _133: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _135: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _136: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _137: &&[((i32, u32), u32)]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _138: &&[((i32, u32), u32)];     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _139: &&[((i32, u32), u32); 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _140: &&[((i32, u32), u32); 2];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _141: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug wu_1984 => _1;             // in scope 1 at ui/impl-trait/example-calendar.rs:439:9: 439:16
        let _9: &&[((i32, u32), u32)];   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _10: &&[((i32, u32), u32); 2]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _34: &&[((i32, u32), u32)];  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _35: &&[((i32, u32), u32); 2]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _48: std::vec::Vec<((i32, u32), u32)>; // in scope 1 at ui/impl-trait/example-calendar.rs:443:9: 443:16
        let mut _146: &&[((i32, u32), u32); 2]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _147: &&[((i32, u32), u32); 2]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _9;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _10;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _15: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _15;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _34;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _35;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _40: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _40;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug wu_2013 => _48;        // in scope 6 at ui/impl-trait/example-calendar.rs:443:9: 443:16
            let _56: &&[((i32, u32), u32)]; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _57: &&[((i32, u32), u32); 2]; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _81: &&[((i32, u32), u32)]; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _82: &&[((i32, u32), u32); 2]; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _95: std::vec::Vec<((i32, u32), u32)>; // in scope 6 at ui/impl-trait/example-calendar.rs:447:9: 447:16
            let mut _144: &&[((i32, u32), u32); 2]; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _145: &&[((i32, u32), u32); 2]; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 7 {
                debug left_val => _56;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _57;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _62: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 8 {
                    debug kind => _62;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 9 {
                debug left_val => _81;   // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _82;  // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _87: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 10 {
                    debug kind => _87;   // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 11 {
                debug wu_2015 => _95;    // in scope 11 at ui/impl-trait/example-calendar.rs:447:9: 447:16
                let _103: &&[((i32, u32), u32)]; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _104: &&[((i32, u32), u32); 2]; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _128: &&[((i32, u32), u32)]; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _129: &&[((i32, u32), u32); 2]; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _142: &&[((i32, u32), u32); 2]; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _143: &&[((i32, u32), u32); 2]; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 12 {
                    debug left_val => _103; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _104; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _109: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 13 {
                        debug kind => _109; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 14 {
                    debug left_val => _128; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _129; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _134: core::panicking::AssertKind; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 15 {
                        debug kind => _134; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _1 = weeks_uniq(const 1984_i32) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:439:19: 439:35
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:439:19: 439:29
                                         // + literal: Const { ty: fn(i32) -> Vec<((i32, u32), u32)> {weeks_uniq}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_1;                        // scope 1 at ui/impl-trait/example-calendar.rs:440:17: 440:24
        _7 = const RangeTo::<usize> {{ end: 2_usize }}; // scope 1 at ui/impl-trait/example-calendar.rs:440:25: 440:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:440:25: 440:28
                                         // + literal: Const { ty: RangeTo<usize>, val: Value(Scalar(0x0000000000000002)) }
        _5 = <Vec<((i32, u32), u32)> as Index<RangeTo<usize>>>::index(move _6, move _7) -> [return: bb2, unwind: bb39]; // scope 1 at ui/impl-trait/example-calendar.rs:440:17: 440:29
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:440:17: 440:29
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<((i32, u32), u32)>, RangeTo<usize>) -> &'a <Vec<((i32, u32), u32)> as Index<RangeTo<usize>>>::Output {<Vec<((i32, u32), u32)> as Index<RangeTo<usize>>>::index}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = _5;                         // scope 1 at ui/impl-trait/example-calendar.rs:440:16: 440:29
        _3 = &_4;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _147 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[((i32, u32), u32); 2], val: Unevaluated(test_isoweekdate, [], Some(promoted[5])) }
        _8 = _147;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _8);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_2.0: &&[((i32, u32), u32)]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_2.1: &&[((i32, u32), u32); 2]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = <&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq(move _13, move _14) -> [return: bb3, unwind: bb39]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[((i32, u32), u32)], &'b &[((i32, u32), u32); 2]) -> bool {<&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = Not(move _12);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb5, otherwise: bb4]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>(move _17, move _18, move _20, move _22) -> bb39; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[((i32, u32), u32)], &'b &[((i32, u32), u32); 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>}, val: Value(<ZST>) }
    }

    bb5: {
        _27 = &_1;                       // scope 1 at ui/impl-trait/example-calendar.rs:441:17: 441:24
        _31 = &_1;                       // scope 1 at ui/impl-trait/example-calendar.rs:441:25: 441:38
        _30 = Vec::<((i32, u32), u32)>::len(move _31) -> [return: bb6, unwind: bb39]; // scope 1 at ui/impl-trait/example-calendar.rs:441:25: 441:38
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:441:33: 441:36
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<((i32, u32), u32)>) -> usize {Vec::<((i32, u32), u32)>::len}, val: Value(<ZST>) }
    }

    bb6: {
        _32 = CheckedSub(_30, const 2_usize); // scope 1 at ui/impl-trait/example-calendar.rs:441:25: 441:40
        assert(!move (_32.1: bool), "attempt to compute `{} - {}`, which would overflow", move _30, const 2_usize) -> [success: bb7, unwind: bb39]; // scope 1 at ui/impl-trait/example-calendar.rs:441:25: 441:40
    }

    bb7: {
        _29 = move (_32.0: usize);       // scope 1 at ui/impl-trait/example-calendar.rs:441:25: 441:40
        _28 = RangeFrom::<usize> { start: move _29 }; // scope 1 at ui/impl-trait/example-calendar.rs:441:25: 441:42
        _26 = <Vec<((i32, u32), u32)> as Index<RangeFrom<usize>>>::index(move _27, move _28) -> [return: bb8, unwind: bb39]; // scope 1 at ui/impl-trait/example-calendar.rs:441:17: 441:43
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:441:17: 441:43
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<((i32, u32), u32)>, RangeFrom<usize>) -> &'a <Vec<((i32, u32), u32)> as Index<RangeFrom<usize>>>::Output {<Vec<((i32, u32), u32)> as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb8: {
        _25 = _26;                       // scope 1 at ui/impl-trait/example-calendar.rs:441:16: 441:43
        _24 = &_25;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _146 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[((i32, u32), u32); 2], val: Unevaluated(test_isoweekdate, [], Some(promoted[4])) }
        _33 = _146;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _23 = (move _24, move _33);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _34 = (_23.0: &&[((i32, u32), u32)]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _35 = (_23.1: &&[((i32, u32), u32); 2]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _38 = _34;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _39 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _37 = <&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq(move _38, move _39) -> [return: bb9, unwind: bb39]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[((i32, u32), u32)], &'b &[((i32, u32), u32); 2]) -> bool {<&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _36 = Not(move _37);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _36) -> [0: bb11, otherwise: bb10]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _40 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _42 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _44 = _34;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _44;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _35;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _45 = _46;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _41 = core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>(move _42, move _43, move _45, move _47) -> bb39; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[((i32, u32), u32)], &'b &[((i32, u32), u32); 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>}, val: Value(<ZST>) }
    }

    bb11: {
        _48 = weeks_uniq(const 2013_i32) -> [return: bb12, unwind: bb39]; // scope 1 at ui/impl-trait/example-calendar.rs:443:19: 443:35
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:443:19: 443:29
                                         // + literal: Const { ty: fn(i32) -> Vec<((i32, u32), u32)> {weeks_uniq}, val: Value(<ZST>) }
    }

    bb12: {
        _53 = &_48;                      // scope 6 at ui/impl-trait/example-calendar.rs:444:17: 444:24
        _54 = const RangeTo::<usize> {{ end: 2_usize }}; // scope 6 at ui/impl-trait/example-calendar.rs:444:25: 444:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:444:25: 444:28
                                         // + literal: Const { ty: RangeTo<usize>, val: Value(Scalar(0x0000000000000002)) }
        _52 = <Vec<((i32, u32), u32)> as Index<RangeTo<usize>>>::index(move _53, move _54) -> [return: bb13, unwind: bb38]; // scope 6 at ui/impl-trait/example-calendar.rs:444:17: 444:29
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:444:17: 444:29
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<((i32, u32), u32)>, RangeTo<usize>) -> &'a <Vec<((i32, u32), u32)> as Index<RangeTo<usize>>>::Output {<Vec<((i32, u32), u32)> as Index<RangeTo<usize>>>::index}, val: Value(<ZST>) }
    }

    bb13: {
        _51 = _52;                       // scope 6 at ui/impl-trait/example-calendar.rs:444:16: 444:29
        _50 = &_51;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _145 = const _;                  // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[((i32, u32), u32); 2], val: Unevaluated(test_isoweekdate, [], Some(promoted[3])) }
        _55 = _145;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _49 = (move _50, move _55);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _56 = (_49.0: &&[((i32, u32), u32)]); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _57 = (_49.1: &&[((i32, u32), u32); 2]); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _60 = _56;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _61 = _57;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _59 = <&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq(move _60, move _61) -> [return: bb14, unwind: bb38]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[((i32, u32), u32)], &'b &[((i32, u32), u32); 2]) -> bool {<&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _58 = Not(move _59);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _58) -> [0: bb16, otherwise: bb15]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _62 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _64 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _66 = _56;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _65 = _66;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _57;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _67 = _68;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _69 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _63 = core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>(move _64, move _65, move _67, move _69) -> bb38; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[((i32, u32), u32)], &'b &[((i32, u32), u32); 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>}, val: Value(<ZST>) }
    }

    bb16: {
        _74 = &_48;                      // scope 6 at ui/impl-trait/example-calendar.rs:445:17: 445:24
        _78 = &_48;                      // scope 6 at ui/impl-trait/example-calendar.rs:445:25: 445:38
        _77 = Vec::<((i32, u32), u32)>::len(move _78) -> [return: bb17, unwind: bb38]; // scope 6 at ui/impl-trait/example-calendar.rs:445:25: 445:38
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:445:33: 445:36
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<((i32, u32), u32)>) -> usize {Vec::<((i32, u32), u32)>::len}, val: Value(<ZST>) }
    }

    bb17: {
        _79 = CheckedSub(_77, const 2_usize); // scope 6 at ui/impl-trait/example-calendar.rs:445:25: 445:40
        assert(!move (_79.1: bool), "attempt to compute `{} - {}`, which would overflow", move _77, const 2_usize) -> [success: bb18, unwind: bb38]; // scope 6 at ui/impl-trait/example-calendar.rs:445:25: 445:40
    }

    bb18: {
        _76 = move (_79.0: usize);       // scope 6 at ui/impl-trait/example-calendar.rs:445:25: 445:40
        _75 = RangeFrom::<usize> { start: move _76 }; // scope 6 at ui/impl-trait/example-calendar.rs:445:25: 445:42
        _73 = <Vec<((i32, u32), u32)> as Index<RangeFrom<usize>>>::index(move _74, move _75) -> [return: bb19, unwind: bb38]; // scope 6 at ui/impl-trait/example-calendar.rs:445:17: 445:43
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:445:17: 445:43
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<((i32, u32), u32)>, RangeFrom<usize>) -> &'a <Vec<((i32, u32), u32)> as Index<RangeFrom<usize>>>::Output {<Vec<((i32, u32), u32)> as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb19: {
        _72 = _73;                       // scope 6 at ui/impl-trait/example-calendar.rs:445:16: 445:43
        _71 = &_72;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _144 = const _;                  // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[((i32, u32), u32); 2], val: Unevaluated(test_isoweekdate, [], Some(promoted[2])) }
        _80 = _144;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _70 = (move _71, move _80);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _81 = (_70.0: &&[((i32, u32), u32)]); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _82 = (_70.1: &&[((i32, u32), u32); 2]); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _85 = _81;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _86 = _82;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _84 = <&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq(move _85, move _86) -> [return: bb20, unwind: bb38]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[((i32, u32), u32)], &'b &[((i32, u32), u32); 2]) -> bool {<&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq}, val: Value(<ZST>) }
    }

    bb20: {
        _83 = Not(move _84);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _83) -> [0: bb22, otherwise: bb21]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb21: {
        _87 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _89 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _91 = _81;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _90 = _91;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _93 = _82;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _92 = _93;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _94 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _88 = core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>(move _89, move _90, move _92, move _94) -> bb38; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[((i32, u32), u32)], &'b &[((i32, u32), u32); 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>}, val: Value(<ZST>) }
    }

    bb22: {
        _95 = weeks_uniq(const 2015_i32) -> [return: bb23, unwind: bb38]; // scope 6 at ui/impl-trait/example-calendar.rs:447:19: 447:35
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:447:19: 447:29
                                         // + literal: Const { ty: fn(i32) -> Vec<((i32, u32), u32)> {weeks_uniq}, val: Value(<ZST>) }
    }

    bb23: {
        _100 = &_95;                     // scope 11 at ui/impl-trait/example-calendar.rs:448:17: 448:24
        _101 = const RangeTo::<usize> {{ end: 2_usize }}; // scope 11 at ui/impl-trait/example-calendar.rs:448:25: 448:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:448:25: 448:28
                                         // + literal: Const { ty: RangeTo<usize>, val: Value(Scalar(0x0000000000000002)) }
        _99 = <Vec<((i32, u32), u32)> as Index<RangeTo<usize>>>::index(move _100, move _101) -> [return: bb24, unwind: bb37]; // scope 11 at ui/impl-trait/example-calendar.rs:448:17: 448:29
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:448:17: 448:29
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<((i32, u32), u32)>, RangeTo<usize>) -> &'a <Vec<((i32, u32), u32)> as Index<RangeTo<usize>>>::Output {<Vec<((i32, u32), u32)> as Index<RangeTo<usize>>>::index}, val: Value(<ZST>) }
    }

    bb24: {
        _98 = _99;                       // scope 11 at ui/impl-trait/example-calendar.rs:448:16: 448:29
        _97 = &_98;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _143 = const _;                  // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[((i32, u32), u32); 2], val: Unevaluated(test_isoweekdate, [], Some(promoted[1])) }
        _102 = _143;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _96 = (move _97, move _102);     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _103 = (_96.0: &&[((i32, u32), u32)]); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _104 = (_96.1: &&[((i32, u32), u32); 2]); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _107 = _103;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _108 = _104;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _106 = <&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq(move _107, move _108) -> [return: bb25, unwind: bb37]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[((i32, u32), u32)], &'b &[((i32, u32), u32); 2]) -> bool {<&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq}, val: Value(<ZST>) }
    }

    bb25: {
        _105 = Not(move _106);           // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _105) -> [0: bb27, otherwise: bb26]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb26: {
        _109 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _111 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _113 = _103;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _112 = _113;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _115 = _104;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _114 = _115;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _116 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _110 = core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>(move _111, move _112, move _114, move _116) -> bb37; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[((i32, u32), u32)], &'b &[((i32, u32), u32); 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>}, val: Value(<ZST>) }
    }

    bb27: {
        _121 = &_95;                     // scope 11 at ui/impl-trait/example-calendar.rs:449:17: 449:24
        _125 = &_95;                     // scope 11 at ui/impl-trait/example-calendar.rs:449:25: 449:38
        _124 = Vec::<((i32, u32), u32)>::len(move _125) -> [return: bb28, unwind: bb37]; // scope 11 at ui/impl-trait/example-calendar.rs:449:25: 449:38
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:449:33: 449:36
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<((i32, u32), u32)>) -> usize {Vec::<((i32, u32), u32)>::len}, val: Value(<ZST>) }
    }

    bb28: {
        _126 = CheckedSub(_124, const 2_usize); // scope 11 at ui/impl-trait/example-calendar.rs:449:25: 449:40
        assert(!move (_126.1: bool), "attempt to compute `{} - {}`, which would overflow", move _124, const 2_usize) -> [success: bb29, unwind: bb37]; // scope 11 at ui/impl-trait/example-calendar.rs:449:25: 449:40
    }

    bb29: {
        _123 = move (_126.0: usize);     // scope 11 at ui/impl-trait/example-calendar.rs:449:25: 449:40
        _122 = RangeFrom::<usize> { start: move _123 }; // scope 11 at ui/impl-trait/example-calendar.rs:449:25: 449:42
        _120 = <Vec<((i32, u32), u32)> as Index<RangeFrom<usize>>>::index(move _121, move _122) -> [return: bb30, unwind: bb37]; // scope 11 at ui/impl-trait/example-calendar.rs:449:17: 449:43
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:449:17: 449:43
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<((i32, u32), u32)>, RangeFrom<usize>) -> &'a <Vec<((i32, u32), u32)> as Index<RangeFrom<usize>>>::Output {<Vec<((i32, u32), u32)> as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb30: {
        _119 = _120;                     // scope 11 at ui/impl-trait/example-calendar.rs:449:16: 449:43
        _118 = &_119;                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _142 = const _;                  // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[((i32, u32), u32); 2], val: Unevaluated(test_isoweekdate, [], Some(promoted[0])) }
        _127 = _142;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _117 = (move _118, move _127);   // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _128 = (_117.0: &&[((i32, u32), u32)]); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _129 = (_117.1: &&[((i32, u32), u32); 2]); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _132 = _128;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _133 = _129;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _131 = <&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq(move _132, move _133) -> [return: bb31, unwind: bb37]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[((i32, u32), u32)], &'b &[((i32, u32), u32); 2]) -> bool {<&[((i32, u32), u32)] as PartialEq<&[((i32, u32), u32); 2]>>::eq}, val: Value(<ZST>) }
    }

    bb31: {
        _130 = Not(move _131);           // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _130) -> [0: bb33, otherwise: bb32]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb32: {
        _134 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _136 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _138 = _128;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _137 = _138;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _140 = _129;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _139 = _140;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _141 = Option::<Arguments<'_>>::None; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _135 = core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>(move _136, move _137, move _139, move _141) -> bb37; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[((i32, u32), u32)], &'b &[((i32, u32), u32); 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[((i32, u32), u32)], &[((i32, u32), u32); 2]>}, val: Value(<ZST>) }
    }

    bb33: {
        drop(_95) -> [return: bb34, unwind: bb38]; // scope 6 at ui/impl-trait/example-calendar.rs:450:1: 450:2
    }

    bb34: {
        drop(_48) -> [return: bb35, unwind: bb39]; // scope 1 at ui/impl-trait/example-calendar.rs:450:1: 450:2
    }

    bb35: {
        drop(_1) -> bb36;                // scope 0 at ui/impl-trait/example-calendar.rs:450:1: 450:2
    }

    bb36: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:450:2: 450:2
    }

    bb37 (cleanup): {
        drop(_95) -> bb38;               // scope 6 at ui/impl-trait/example-calendar.rs:450:1: 450:2
    }

    bb38 (cleanup): {
        drop(_48) -> bb39;               // scope 1 at ui/impl-trait/example-calendar.rs:450:1: 450:2
    }

    bb39 (cleanup): {
        drop(_1) -> bb40;                // scope 0 at ui/impl-trait/example-calendar.rs:450:1: 450:2
    }

    bb40 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:421:1: 450:2
    }
}

promoted[0] in test_isoweekdate: &&[((i32, u32), u32); 2] = {
    let mut _0: &&[((i32, u32), u32); 2]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[((i32, u32), u32); 2]; // in scope 0 at ui/impl-trait/example-calendar.rs:449:45: 449:80
    let mut _2: [((i32, u32), u32); 2];  // in scope 0 at ui/impl-trait/example-calendar.rs:449:46: 449:80
    let mut _3: ((i32, u32), u32);       // in scope 0 at ui/impl-trait/example-calendar.rs:449:47: 449:62
    let mut _4: (i32, u32);              // in scope 0 at ui/impl-trait/example-calendar.rs:449:48: 449:58
    let mut _5: ((i32, u32), u32);       // in scope 0 at ui/impl-trait/example-calendar.rs:449:64: 449:79
    let mut _6: (i32, u32);              // in scope 0 at ui/impl-trait/example-calendar.rs:449:65: 449:75

    bb0: {
        _4 = (const 2015_i32, const 52_u32); // scope 0 at ui/impl-trait/example-calendar.rs:449:48: 449:58
        _3 = (move _4, const 7_u32);     // scope 0 at ui/impl-trait/example-calendar.rs:449:47: 449:62
        _6 = (const 2015_i32, const 53_u32); // scope 0 at ui/impl-trait/example-calendar.rs:449:65: 449:75
        _5 = (move _6, const 4_u32);     // scope 0 at ui/impl-trait/example-calendar.rs:449:64: 449:79
        _2 = [move _3, move _5];         // scope 0 at ui/impl-trait/example-calendar.rs:449:46: 449:80
        _1 = &_2;                        // scope 0 at ui/impl-trait/example-calendar.rs:449:45: 449:80
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in test_isoweekdate: &&[((i32, u32), u32); 2] = {
    let mut _0: &&[((i32, u32), u32); 2]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[((i32, u32), u32); 2]; // in scope 0 at ui/impl-trait/example-calendar.rs:448:31: 448:64
    let mut _2: [((i32, u32), u32); 2];  // in scope 0 at ui/impl-trait/example-calendar.rs:448:32: 448:64
    let mut _3: ((i32, u32), u32);       // in scope 0 at ui/impl-trait/example-calendar.rs:448:33: 448:47
    let mut _4: (i32, u32);              // in scope 0 at ui/impl-trait/example-calendar.rs:448:34: 448:43
    let mut _5: ((i32, u32), u32);       // in scope 0 at ui/impl-trait/example-calendar.rs:448:49: 448:63
    let mut _6: (i32, u32);              // in scope 0 at ui/impl-trait/example-calendar.rs:448:50: 448:59

    bb0: {
        _4 = (const 2015_i32, const 1_u32); // scope 0 at ui/impl-trait/example-calendar.rs:448:34: 448:43
        _3 = (move _4, const 4_u32);     // scope 0 at ui/impl-trait/example-calendar.rs:448:33: 448:47
        _6 = (const 2015_i32, const 2_u32); // scope 0 at ui/impl-trait/example-calendar.rs:448:50: 448:59
        _5 = (move _6, const 7_u32);     // scope 0 at ui/impl-trait/example-calendar.rs:448:49: 448:63
        _2 = [move _3, move _5];         // scope 0 at ui/impl-trait/example-calendar.rs:448:32: 448:64
        _1 = &_2;                        // scope 0 at ui/impl-trait/example-calendar.rs:448:31: 448:64
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in test_isoweekdate: &&[((i32, u32), u32); 2] = {
    let mut _0: &&[((i32, u32), u32); 2]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[((i32, u32), u32); 2]; // in scope 0 at ui/impl-trait/example-calendar.rs:445:45: 445:79
    let mut _2: [((i32, u32), u32); 2];  // in scope 0 at ui/impl-trait/example-calendar.rs:445:46: 445:79
    let mut _3: ((i32, u32), u32);       // in scope 0 at ui/impl-trait/example-calendar.rs:445:47: 445:62
    let mut _4: (i32, u32);              // in scope 0 at ui/impl-trait/example-calendar.rs:445:48: 445:58
    let mut _5: ((i32, u32), u32);       // in scope 0 at ui/impl-trait/example-calendar.rs:445:64: 445:78
    let mut _6: (i32, u32);              // in scope 0 at ui/impl-trait/example-calendar.rs:445:65: 445:74

    bb0: {
        _4 = (const 2013_i32, const 52_u32); // scope 0 at ui/impl-trait/example-calendar.rs:445:48: 445:58
        _3 = (move _4, const 7_u32);     // scope 0 at ui/impl-trait/example-calendar.rs:445:47: 445:62
        _6 = (const 2014_i32, const 1_u32); // scope 0 at ui/impl-trait/example-calendar.rs:445:65: 445:74
        _5 = (move _6, const 2_u32);     // scope 0 at ui/impl-trait/example-calendar.rs:445:64: 445:78
        _2 = [move _3, move _5];         // scope 0 at ui/impl-trait/example-calendar.rs:445:46: 445:79
        _1 = &_2;                        // scope 0 at ui/impl-trait/example-calendar.rs:445:45: 445:79
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in test_isoweekdate: &&[((i32, u32), u32); 2] = {
    let mut _0: &&[((i32, u32), u32); 2]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[((i32, u32), u32); 2]; // in scope 0 at ui/impl-trait/example-calendar.rs:444:31: 444:64
    let mut _2: [((i32, u32), u32); 2];  // in scope 0 at ui/impl-trait/example-calendar.rs:444:32: 444:64
    let mut _3: ((i32, u32), u32);       // in scope 0 at ui/impl-trait/example-calendar.rs:444:33: 444:47
    let mut _4: (i32, u32);              // in scope 0 at ui/impl-trait/example-calendar.rs:444:34: 444:43
    let mut _5: ((i32, u32), u32);       // in scope 0 at ui/impl-trait/example-calendar.rs:444:49: 444:63
    let mut _6: (i32, u32);              // in scope 0 at ui/impl-trait/example-calendar.rs:444:50: 444:59

    bb0: {
        _4 = (const 2013_i32, const 1_u32); // scope 0 at ui/impl-trait/example-calendar.rs:444:34: 444:43
        _3 = (move _4, const 6_u32);     // scope 0 at ui/impl-trait/example-calendar.rs:444:33: 444:47
        _6 = (const 2013_i32, const 2_u32); // scope 0 at ui/impl-trait/example-calendar.rs:444:50: 444:59
        _5 = (move _6, const 7_u32);     // scope 0 at ui/impl-trait/example-calendar.rs:444:49: 444:63
        _2 = [move _3, move _5];         // scope 0 at ui/impl-trait/example-calendar.rs:444:32: 444:64
        _1 = &_2;                        // scope 0 at ui/impl-trait/example-calendar.rs:444:31: 444:64
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in test_isoweekdate: &&[((i32, u32), u32); 2] = {
    let mut _0: &&[((i32, u32), u32); 2]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[((i32, u32), u32); 2]; // in scope 0 at ui/impl-trait/example-calendar.rs:441:45: 441:79
    let mut _2: [((i32, u32), u32); 2];  // in scope 0 at ui/impl-trait/example-calendar.rs:441:46: 441:79
    let mut _3: ((i32, u32), u32);       // in scope 0 at ui/impl-trait/example-calendar.rs:441:47: 441:62
    let mut _4: (i32, u32);              // in scope 0 at ui/impl-trait/example-calendar.rs:441:48: 441:58
    let mut _5: ((i32, u32), u32);       // in scope 0 at ui/impl-trait/example-calendar.rs:441:64: 441:78
    let mut _6: (i32, u32);              // in scope 0 at ui/impl-trait/example-calendar.rs:441:65: 441:74

    bb0: {
        _4 = (const 1984_i32, const 52_u32); // scope 0 at ui/impl-trait/example-calendar.rs:441:48: 441:58
        _3 = (move _4, const 7_u32);     // scope 0 at ui/impl-trait/example-calendar.rs:441:47: 441:62
        _6 = (const 1985_i32, const 1_u32); // scope 0 at ui/impl-trait/example-calendar.rs:441:65: 441:74
        _5 = (move _6, const 1_u32);     // scope 0 at ui/impl-trait/example-calendar.rs:441:64: 441:78
        _2 = [move _3, move _5];         // scope 0 at ui/impl-trait/example-calendar.rs:441:46: 441:79
        _1 = &_2;                        // scope 0 at ui/impl-trait/example-calendar.rs:441:45: 441:79
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in test_isoweekdate: &&[((i32, u32), u32); 2] = {
    let mut _0: &&[((i32, u32), u32); 2]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[((i32, u32), u32); 2]; // in scope 0 at ui/impl-trait/example-calendar.rs:440:31: 440:65
    let mut _2: [((i32, u32), u32); 2];  // in scope 0 at ui/impl-trait/example-calendar.rs:440:32: 440:65
    let mut _3: ((i32, u32), u32);       // in scope 0 at ui/impl-trait/example-calendar.rs:440:33: 440:48
    let mut _4: (i32, u32);              // in scope 0 at ui/impl-trait/example-calendar.rs:440:34: 440:44
    let mut _5: ((i32, u32), u32);       // in scope 0 at ui/impl-trait/example-calendar.rs:440:50: 440:64
    let mut _6: (i32, u32);              // in scope 0 at ui/impl-trait/example-calendar.rs:440:51: 440:60

    bb0: {
        _4 = (const 1983_i32, const 52_u32); // scope 0 at ui/impl-trait/example-calendar.rs:440:34: 440:44
        _3 = (move _4, const 1_u32);     // scope 0 at ui/impl-trait/example-calendar.rs:440:33: 440:48
        _6 = (const 1984_i32, const 1_u32); // scope 0 at ui/impl-trait/example-calendar.rs:440:51: 440:60
        _5 = (move _6, const 7_u32);     // scope 0 at ui/impl-trait/example-calendar.rs:440:50: 440:64
        _2 = [move _3, move _5];         // scope 0 at ui/impl-trait/example-calendar.rs:440:32: 440:65
        _1 = &_2;                        // scope 0 at ui/impl-trait/example-calendar.rs:440:31: 440:65
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn weeks_uniq(_1: i32) -> Vec<((i32, u32), u32)> {
    debug year => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:422:19: 422:23
    let mut _2: std::iter::Map<std::iter::Map<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>; // in scope 0 at ui/impl-trait/example-calendar.rs:423:13: 423:22
    let mut _3: std::iter::Map<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>; // in scope 0 at ui/impl-trait/example-calendar.rs:423:25: 423:69
    let mut _4: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:423:25: 423:44
    let mut _5: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:423:39: 423:43
    let mut _6: [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]; // in scope 0 at ui/impl-trait/example-calendar.rs:423:49: 423:68
    let mut _7: [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]; // in scope 0 at ui/impl-trait/example-calendar.rs:424:18: 424:33
    let mut _9: (i32, u32);              // in scope 0 at ui/impl-trait/example-calendar.rs:426:26: 426:47
    let mut _10: std::option::Option<(i32, u32)>; // in scope 0 at ui/impl-trait/example-calendar.rs:426:26: 426:38
    let mut _11: &mut std::iter::Map<std::iter::Map<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>; // in scope 0 at ui/impl-trait/example-calendar.rs:426:26: 426:38
    let mut _12: std::iter::Map<std::iter::Map<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>; // in scope 0 at ui/impl-trait/example-calendar.rs:427:19: 427:24
    let mut _13: std::iter::Map<std::iter::Map<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>; // in scope 0 at ui/impl-trait/example-calendar.rs:427:19: 427:24
    let mut _15: std::option::Option<(i32, u32)>; // in scope 0 at ui/impl-trait/example-calendar.rs:427:19: 427:24
    let mut _16: &mut std::iter::Map<std::iter::Map<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>; // in scope 0 at ui/impl-trait/example-calendar.rs:427:19: 427:24
    let mut _17: &mut std::iter::Map<std::iter::Map<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>; // in scope 0 at ui/impl-trait/example-calendar.rs:427:19: 427:24
    let mut _18: isize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:427:9: 434:10
    let mut _20: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:428:16: 428:29
    let mut _21: &(i32, u32);            // in scope 0 at ui/impl-trait/example-calendar.rs:428:16: 428:23
    let mut _22: &(i32, u32);            // in scope 0 at ui/impl-trait/example-calendar.rs:428:27: 428:29
    let mut _23: (u32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:429:17: 429:29
    let _24: ();                         // in scope 0 at ui/impl-trait/example-calendar.rs:431:17: 431:35
    let mut _25: &mut std::vec::Vec<((i32, u32), u32)>; // in scope 0 at ui/impl-trait/example-calendar.rs:431:17: 431:35
    let mut _26: ((i32, u32), u32);      // in scope 0 at ui/impl-trait/example-calendar.rs:431:29: 431:34
    let mut _27: (i32, u32);             // in scope 0 at ui/impl-trait/example-calendar.rs:432:26: 432:28
    let _28: ();                         // in scope 0 at ui/impl-trait/example-calendar.rs:435:9: 435:27
    let mut _29: &mut std::vec::Vec<((i32, u32), u32)>; // in scope 0 at ui/impl-trait/example-calendar.rs:435:9: 435:27
    let mut _30: ((i32, u32), u32);      // in scope 0 at ui/impl-trait/example-calendar.rs:435:21: 435:26
    scope 1 {
        debug weeks => _2;               // in scope 1 at ui/impl-trait/example-calendar.rs:423:13: 423:22
        let mut _0: std::vec::Vec<((i32, u32), u32)>; // return place in scope 1 at ui/impl-trait/example-calendar.rs:425:13: 425:23
        scope 2 {
            debug result => _0;          // in scope 2 at ui/impl-trait/example-calendar.rs:425:13: 425:23
            let mut _8: ((i32, u32), u32); // in scope 2 at ui/impl-trait/example-calendar.rs:426:13: 426:22
            scope 3 {
                debug accum => _8;       // in scope 3 at ui/impl-trait/example-calendar.rs:426:13: 426:22
                let mut _14: std::iter::Map<std::iter::Map<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>; // in scope 3 at ui/impl-trait/example-calendar.rs:427:19: 427:24
                scope 4 {
                    debug iter => _14;   // in scope 4 at ui/impl-trait/example-calendar.rs:427:19: 427:24
                    let _19: (i32, u32); // in scope 4 at ui/impl-trait/example-calendar.rs:427:13: 427:15
                    scope 5 {
                        debug yw => _19; // in scope 5 at ui/impl-trait/example-calendar.rs:427:13: 427:15
                    }
                }
            }
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:423:39: 423:43
        _4 = dates_in_year(move _5) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:423:25: 423:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:423:25: 423:38
                                         // + literal: Const { ty: fn(i32) -> impl Iterator<Item = NaiveDate> + Clone {dates_in_year}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <impl Iterator<Item = NaiveDate> + Clone as Iterator>::map::<(i32, u32, Weekday), [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>(move _4, move _6) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:423:25: 423:69
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:423:45: 423:48
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]) -> Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]> {<impl Iterator<Item = NaiveDate> + Clone as Iterator>::map::<(i32, u32, Weekday), [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = <Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]> as Iterator>::map::<(i32, u32), [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>(move _3, move _7) -> bb3; // scope 0 at ui/impl-trait/example-calendar.rs:423:25: 424:34
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:424:14: 424:17
                                         // + literal: Const { ty: fn(Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]) -> Map<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]> {<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]> as Iterator>::map::<(i32, u32), [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Vec::<((i32, u32), u32)>::new() -> bb4; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<((i32, u32), u32)> {Vec::<((i32, u32), u32)>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &mut _2;                   // scope 2 at ui/impl-trait/example-calendar.rs:426:26: 426:38
        _10 = <Map<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]> as Iterator>::next(move _11) -> [return: bb5, unwind: bb19]; // scope 2 at ui/impl-trait/example-calendar.rs:426:26: 426:38
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:426:32: 426:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut Map<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>) -> Option<<Map<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]> as Iterator>::Item> {<Map<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = Option::<(i32, u32)>::unwrap(move _10) -> [return: bb6, unwind: bb19]; // scope 2 at ui/impl-trait/example-calendar.rs:426:26: 426:47
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:426:39: 426:45
                                         // + literal: Const { ty: fn(Option<(i32, u32)>) -> (i32, u32) {Option::<(i32, u32)>::unwrap}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = (move _9, const 1_u32);     // scope 2 at ui/impl-trait/example-calendar.rs:426:25: 426:51
        _13 = move _2;                   // scope 3 at ui/impl-trait/example-calendar.rs:427:19: 427:24
        _12 = <Map<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]> as IntoIterator>::into_iter(move _13) -> [return: bb7, unwind: bb19]; // scope 3 at ui/impl-trait/example-calendar.rs:427:19: 427:24
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:427:19: 427:24
                                         // + literal: Const { ty: fn(Map<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>) -> <Map<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]> as IntoIterator>::IntoIter {<Map<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = move _12;                  // scope 3 at ui/impl-trait/example-calendar.rs:427:19: 427:24
        goto -> bb8;                     // scope 4 at ui/impl-trait/example-calendar.rs:427:9: 434:10
    }

    bb8: {
        _17 = &mut _14;                  // scope 4 at ui/impl-trait/example-calendar.rs:427:19: 427:24
        _16 = &mut (*_17);               // scope 4 at ui/impl-trait/example-calendar.rs:427:19: 427:24
        _15 = <Map<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]> as Iterator>::next(move _16) -> [return: bb9, unwind: bb19]; // scope 4 at ui/impl-trait/example-calendar.rs:427:19: 427:24
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:427:19: 427:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut Map<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]>) -> Option<<Map<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]> as Iterator>::Item> {<Map<Map<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52]>, [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27]> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = discriminant(_15);         // scope 4 at ui/impl-trait/example-calendar.rs:427:19: 427:24
        switchInt(move _18) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 4 at ui/impl-trait/example-calendar.rs:427:19: 427:24
    }

    bb10: {
        _19 = ((_15 as Some).0: (i32, u32)); // scope 4 at ui/impl-trait/example-calendar.rs:427:13: 427:15
        _21 = &(_8.0: (i32, u32));       // scope 5 at ui/impl-trait/example-calendar.rs:428:16: 428:23
        _22 = &_19;                      // scope 5 at ui/impl-trait/example-calendar.rs:428:27: 428:29
        _20 = <(i32, u32) as PartialEq>::eq(move _21, move _22) -> [return: bb13, unwind: bb19]; // scope 5 at ui/impl-trait/example-calendar.rs:428:16: 428:29
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:428:16: 428:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (i32, u32), &'b (i32, u32)) -> bool {<(i32, u32) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb11: {
        unreachable;                     // scope 4 at ui/impl-trait/example-calendar.rs:427:19: 427:24
    }

    bb12: {
        _29 = &mut _0;                   // scope 3 at ui/impl-trait/example-calendar.rs:435:9: 435:27
        _30 = _8;                        // scope 3 at ui/impl-trait/example-calendar.rs:435:21: 435:26
        _28 = Vec::<((i32, u32), u32)>::push(move _29, move _30) -> [return: bb18, unwind: bb19]; // scope 3 at ui/impl-trait/example-calendar.rs:435:9: 435:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:435:16: 435:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<((i32, u32), u32)>, ((i32, u32), u32)) {Vec::<((i32, u32), u32)>::push}, val: Value(<ZST>) }
    }

    bb13: {
        switchInt(move _20) -> [0: bb16, otherwise: bb14]; // scope 5 at ui/impl-trait/example-calendar.rs:428:16: 428:29
    }

    bb14: {
        _23 = CheckedAdd((_8.1: u32), const 1_u32); // scope 5 at ui/impl-trait/example-calendar.rs:429:17: 429:29
        assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", (_8.1: u32), const 1_u32) -> [success: bb15, unwind: bb19]; // scope 5 at ui/impl-trait/example-calendar.rs:429:17: 429:29
    }

    bb15: {
        (_8.1: u32) = move (_23.0: u32); // scope 5 at ui/impl-trait/example-calendar.rs:429:17: 429:29
        goto -> bb8;                     // scope 5 at ui/impl-trait/example-calendar.rs:428:13: 433:14
    }

    bb16: {
        _25 = &mut _0;                   // scope 5 at ui/impl-trait/example-calendar.rs:431:17: 431:35
        _26 = _8;                        // scope 5 at ui/impl-trait/example-calendar.rs:431:29: 431:34
        _24 = Vec::<((i32, u32), u32)>::push(move _25, move _26) -> [return: bb17, unwind: bb19]; // scope 5 at ui/impl-trait/example-calendar.rs:431:17: 431:35
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:431:24: 431:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<((i32, u32), u32)>, ((i32, u32), u32)) {Vec::<((i32, u32), u32)>::push}, val: Value(<ZST>) }
    }

    bb17: {
        _27 = _19;                       // scope 5 at ui/impl-trait/example-calendar.rs:432:26: 432:28
        _8 = (move _27, const 1_u32);    // scope 5 at ui/impl-trait/example-calendar.rs:432:17: 432:32
        goto -> bb8;                     // scope 5 at ui/impl-trait/example-calendar.rs:428:13: 433:14
    }

    bb18: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:437:6: 437:6
    }

    bb19 (cleanup): {
        drop(_0) -> bb20;                // scope 1 at ui/impl-trait/example-calendar.rs:437:5: 437:6
    }

    bb20 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:422:5: 437:6
    }
}

fn weeks_uniq::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:423:49: 423:52], _2: NaiveDate) -> (i32, u32, Weekday) {
    debug d => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:423:50: 423:51
    let mut _0: (i32, u32, Weekday);     // return place in scope 0 at ui/impl-trait/example-calendar.rs:423:53: 423:53
    let mut _3: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:423:53: 423:68

    bb0: {
        _3 = &_2;                        // scope 0 at ui/impl-trait/example-calendar.rs:423:53: 423:68
        _0 = NaiveDate::isoweekdate(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:423:53: 423:68
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:423:55: 423:66
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> (i32, u32, Weekday) {NaiveDate::isoweekdate}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:423:68: 423:68
    }
}

fn weeks_uniq::{closure#1}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:424:18: 424:27], _2: (i32, u32, Weekday)) -> (i32, u32) {
    let mut _0: (i32, u32);              // return place in scope 0 at ui/impl-trait/example-calendar.rs:424:28: 424:28
    let _3: i32;                         // in scope 0 at ui/impl-trait/example-calendar.rs:424:20: 424:21
    let _4: u32;                         // in scope 0 at ui/impl-trait/example-calendar.rs:424:22: 424:23
    let mut _5: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:424:29: 424:30
    let mut _6: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:424:31: 424:32
    scope 1 {
        debug y => _3;                   // in scope 1 at ui/impl-trait/example-calendar.rs:424:20: 424:21
        debug w => _4;                   // in scope 1 at ui/impl-trait/example-calendar.rs:424:22: 424:23
    }

    bb0: {
        _3 = (_2.0: i32);                // scope 0 at ui/impl-trait/example-calendar.rs:424:20: 424:21
        _4 = (_2.1: u32);                // scope 0 at ui/impl-trait/example-calendar.rs:424:22: 424:23
        _5 = _3;                         // scope 1 at ui/impl-trait/example-calendar.rs:424:29: 424:30
        _6 = _4;                         // scope 1 at ui/impl-trait/example-calendar.rs:424:31: 424:32
        _0 = (move _5, move _6);         // scope 1 at ui/impl-trait/example-calendar.rs:424:28: 424:33
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:424:33: 424:33
    }
}

fn test_by_week() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/example-calendar.rs:452:19: 452:19
    let mut _1: impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:453:9: 453:18
    let mut _2: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:453:21: 453:40
    let mut _3: (&&[NaiveDate], &&[NaiveDate; 5]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &&[NaiveDate];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: &[NaiveDate];                // in scope 0 at ui/impl-trait/example-calendar.rs:455:9: 455:54
    let _6: &[NaiveDate];                // in scope 0 at ui/impl-trait/example-calendar.rs:455:10: 455:54
    let mut _7: &std::vec::Vec<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:455:11: 455:54
    let _8: std::vec::Vec<NaiveDate>;    // in scope 0 at ui/impl-trait/example-calendar.rs:455:11: 455:54
    let mut _9: impl DateIterator;       // in scope 0 at ui/impl-trait/example-calendar.rs:455:11: 455:34
    let mut _10: (u32, impl DateIterator); // in scope 0 at ui/impl-trait/example-calendar.rs:455:11: 455:32
    let mut _11: std::option::Option<(u32, impl DateIterator)>; // in scope 0 at ui/impl-trait/example-calendar.rs:455:11: 455:23
    let mut _12: &mut impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:455:11: 455:23
    let mut _13: &&[NaiveDate; 5];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _14: &[NaiveDate; 5];            // in scope 0 at ui/impl-trait/example-calendar.rs:456:9: 462:10
    let _15: [NaiveDate; 5];             // in scope 0 at ui/impl-trait/example-calendar.rs:456:10: 462:10
    let mut _16: NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:457:13: 457:44
    let mut _17: NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:458:13: 458:44
    let mut _18: NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:459:13: 459:44
    let mut _19: NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:460:13: 460:44
    let mut _20: NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:461:13: 461:44
    let mut _23: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _25: &&[NaiveDate];          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _26: &&[NaiveDate; 5];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _28: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _29: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _30: &&[NaiveDate];          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _31: &&[NaiveDate];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _32: &&[NaiveDate; 5];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _33: &&[NaiveDate; 5];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _35: (&&[NaiveDate], &&[NaiveDate; 7]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _36: &&[NaiveDate];          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _37: &[NaiveDate];               // in scope 0 at ui/impl-trait/example-calendar.rs:465:9: 465:54
    let _38: &[NaiveDate];               // in scope 0 at ui/impl-trait/example-calendar.rs:465:10: 465:54
    let mut _39: &std::vec::Vec<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:465:11: 465:54
    let _40: std::vec::Vec<NaiveDate>;   // in scope 0 at ui/impl-trait/example-calendar.rs:465:11: 465:54
    let mut _41: impl DateIterator;      // in scope 0 at ui/impl-trait/example-calendar.rs:465:11: 465:34
    let mut _42: (u32, impl DateIterator); // in scope 0 at ui/impl-trait/example-calendar.rs:465:11: 465:32
    let mut _43: std::option::Option<(u32, impl DateIterator)>; // in scope 0 at ui/impl-trait/example-calendar.rs:465:11: 465:23
    let mut _44: &mut impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:465:11: 465:23
    let mut _45: &&[NaiveDate; 7];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _46: &[NaiveDate; 7];            // in scope 0 at ui/impl-trait/example-calendar.rs:466:9: 474:10
    let _47: [NaiveDate; 7];             // in scope 0 at ui/impl-trait/example-calendar.rs:466:10: 474:10
    let mut _48: NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:467:13: 467:44
    let mut _49: NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:468:13: 468:44
    let mut _50: NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:469:13: 469:44
    let mut _51: NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:470:13: 470:44
    let mut _52: NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:471:13: 471:45
    let mut _53: NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:472:13: 472:45
    let mut _54: NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:473:13: 473:45
    let mut _57: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _58: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _59: &&[NaiveDate];          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _60: &&[NaiveDate; 7];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _62: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _63: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _64: &&[NaiveDate];          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _65: &&[NaiveDate];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _66: &&[NaiveDate; 7];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _67: &&[NaiveDate; 7];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _69: (&NaiveDate, &NaiveDate); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _70: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _71: NaiveDate;                  // in scope 0 at ui/impl-trait/example-calendar.rs:476:16: 476:55
    let mut _72: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:476:16: 476:46
    let mut _73: &mut impl DateIterator; // in scope 0 at ui/impl-trait/example-calendar.rs:476:16: 476:46
    let mut _74: (u32, impl DateIterator); // in scope 0 at ui/impl-trait/example-calendar.rs:476:16: 476:37
    let mut _75: std::option::Option<(u32, impl DateIterator)>; // in scope 0 at ui/impl-trait/example-calendar.rs:476:16: 476:28
    let mut _76: &mut impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:476:16: 476:28
    let mut _77: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _78: NaiveDate;                  // in scope 0 at ui/impl-trait/example-calendar.rs:476:57: 476:89
    let mut _81: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _82: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _83: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _84: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _86: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _87: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _88: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _89: &NaiveDate;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _90: &NaiveDate;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _91: &NaiveDate;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _92: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug weeks => _1;               // in scope 1 at ui/impl-trait/example-calendar.rs:453:9: 453:18
        let _21: &&[NaiveDate];          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _22: &&[NaiveDate; 5];       // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _55: &&[NaiveDate];          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _56: &&[NaiveDate; 7];       // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _79: &NaiveDate;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _80: &NaiveDate;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        scope 2 {
            debug left_val => _21;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _22;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _27: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _27;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _55;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _56;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _61: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _61;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug left_val => _79;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _80;      // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _85: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 7 {
                debug kind => _85;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = dates_in_year(const 2013_i32) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:453:21: 453:40
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:453:21: 453:34
                                         // + literal: Const { ty: fn(i32) -> impl Iterator<Item = NaiveDate> + Clone {dates_in_year}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {by_week::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl DateIterator)> + Clone>(move _2, by_week::<impl Iterator<Item = NaiveDate> + Clone>) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:453:21: 453:52
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:453:41: 453:43
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone, fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {by_week::<impl Iterator<Item = NaiveDate> + Clone>}) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {<impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {by_week::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl DateIterator)> + Clone>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:453:44: 453:51
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {by_week::<impl Iterator<Item = NaiveDate> + Clone>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = &mut _1;                   // scope 1 at ui/impl-trait/example-calendar.rs:455:11: 455:23
        _11 = <impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::next(move _12) -> bb3; // scope 1 at ui/impl-trait/example-calendar.rs:455:11: 455:23
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:455:17: 455:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = (u32, impl DateIterator)> + Clone) -> Option<<impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::Item> {<impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = Option::<(u32, impl DateIterator)>::unwrap(move _11) -> bb4; // scope 1 at ui/impl-trait/example-calendar.rs:455:11: 455:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:455:24: 455:30
                                         // + literal: Const { ty: fn(Option<(u32, impl DateIterator)>) -> (u32, impl DateIterator) {Option::<(u32, impl DateIterator)>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = move (_10.1: impl DateIterator); // scope 1 at ui/impl-trait/example-calendar.rs:455:11: 455:34
        _8 = <impl DateIterator as Iterator>::collect::<Vec<NaiveDate>>(move _9) -> bb5; // scope 1 at ui/impl-trait/example-calendar.rs:455:11: 455:54
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:455:35: 455:42
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(impl DateIterator) -> Vec<NaiveDate> {<impl DateIterator as Iterator>::collect::<Vec<NaiveDate>>}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = &_8;                        // scope 1 at ui/impl-trait/example-calendar.rs:455:11: 455:54
        _6 = <Vec<NaiveDate> as Deref>::deref(move _7) -> [return: bb6, unwind: bb40]; // scope 1 at ui/impl-trait/example-calendar.rs:455:10: 455:54
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:455:10: 455:54
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<NaiveDate>) -> &'a <Vec<NaiveDate> as Deref>::Target {<Vec<NaiveDate> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _5 = _6;                         // scope 1 at ui/impl-trait/example-calendar.rs:455:9: 455:54
        _4 = &_5;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _16 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 1_u32) -> [return: bb7, unwind: bb40]; // scope 1 at ui/impl-trait/example-calendar.rs:457:13: 457:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:457:13: 457:32
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb7: {
        _17 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 2_u32) -> [return: bb8, unwind: bb40]; // scope 1 at ui/impl-trait/example-calendar.rs:458:13: 458:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:458:13: 458:32
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 3_u32) -> [return: bb9, unwind: bb40]; // scope 1 at ui/impl-trait/example-calendar.rs:459:13: 459:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:459:13: 459:32
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 4_u32) -> [return: bb10, unwind: bb40]; // scope 1 at ui/impl-trait/example-calendar.rs:460:13: 460:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:460:13: 460:32
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb10: {
        _20 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 5_u32) -> [return: bb11, unwind: bb40]; // scope 1 at ui/impl-trait/example-calendar.rs:461:13: 461:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:461:13: 461:32
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb11: {
        _15 = [move _16, move _17, move _18, move _19, move _20]; // scope 1 at ui/impl-trait/example-calendar.rs:456:10: 462:10
        _14 = &_15;                      // scope 1 at ui/impl-trait/example-calendar.rs:456:9: 462:10
        _13 = &_14;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _13);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _21 = (_3.0: &&[NaiveDate]);     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _22 = (_3.1: &&[NaiveDate; 5]);  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _25 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _26 = _22;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _24 = <&[NaiveDate] as PartialEq<&[NaiveDate; 5]>>::eq(move _25, move _26) -> [return: bb12, unwind: bb40]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[NaiveDate], &'b &[NaiveDate; 5]) -> bool {<&[NaiveDate] as PartialEq<&[NaiveDate; 5]>>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        _23 = Not(move _24);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _23) -> [0: bb14, otherwise: bb13]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _27 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _29 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _30 = _31;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _33 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _32 = _33;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _28 = core::panicking::assert_failed::<&[NaiveDate], &[NaiveDate; 5]>(move _29, move _30, move _32, move _34) -> bb40; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[NaiveDate], &'b &[NaiveDate; 5], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[NaiveDate], &[NaiveDate; 5]>}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_8) -> bb15;                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb15: {
        _44 = &mut _1;                   // scope 1 at ui/impl-trait/example-calendar.rs:465:11: 465:23
        _43 = <impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::next(move _44) -> bb16; // scope 1 at ui/impl-trait/example-calendar.rs:465:11: 465:23
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:465:17: 465:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = (u32, impl DateIterator)> + Clone) -> Option<<impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::Item> {<impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::next}, val: Value(<ZST>) }
    }

    bb16: {
        _42 = Option::<(u32, impl DateIterator)>::unwrap(move _43) -> bb17; // scope 1 at ui/impl-trait/example-calendar.rs:465:11: 465:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:465:24: 465:30
                                         // + literal: Const { ty: fn(Option<(u32, impl DateIterator)>) -> (u32, impl DateIterator) {Option::<(u32, impl DateIterator)>::unwrap}, val: Value(<ZST>) }
    }

    bb17: {
        _41 = move (_42.1: impl DateIterator); // scope 1 at ui/impl-trait/example-calendar.rs:465:11: 465:34
        _40 = <impl DateIterator as Iterator>::collect::<Vec<NaiveDate>>(move _41) -> bb18; // scope 1 at ui/impl-trait/example-calendar.rs:465:11: 465:54
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:465:35: 465:42
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(impl DateIterator) -> Vec<NaiveDate> {<impl DateIterator as Iterator>::collect::<Vec<NaiveDate>>}, val: Value(<ZST>) }
    }

    bb18: {
        _39 = &_40;                      // scope 1 at ui/impl-trait/example-calendar.rs:465:11: 465:54
        _38 = <Vec<NaiveDate> as Deref>::deref(move _39) -> [return: bb19, unwind: bb39]; // scope 1 at ui/impl-trait/example-calendar.rs:465:10: 465:54
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:465:10: 465:54
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<NaiveDate>) -> &'a <Vec<NaiveDate> as Deref>::Target {<Vec<NaiveDate> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb19: {
        _37 = _38;                       // scope 1 at ui/impl-trait/example-calendar.rs:465:9: 465:54
        _36 = &_37;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _48 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 6_u32) -> [return: bb20, unwind: bb39]; // scope 1 at ui/impl-trait/example-calendar.rs:467:13: 467:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:467:13: 467:32
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb20: {
        _49 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 7_u32) -> [return: bb21, unwind: bb39]; // scope 1 at ui/impl-trait/example-calendar.rs:468:13: 468:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:468:13: 468:32
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb21: {
        _50 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 8_u32) -> [return: bb22, unwind: bb39]; // scope 1 at ui/impl-trait/example-calendar.rs:469:13: 469:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:469:13: 469:32
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb22: {
        _51 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 9_u32) -> [return: bb23, unwind: bb39]; // scope 1 at ui/impl-trait/example-calendar.rs:470:13: 470:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:470:13: 470:32
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb23: {
        _52 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 10_u32) -> [return: bb24, unwind: bb39]; // scope 1 at ui/impl-trait/example-calendar.rs:471:13: 471:45
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:471:13: 471:32
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb24: {
        _53 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 11_u32) -> [return: bb25, unwind: bb39]; // scope 1 at ui/impl-trait/example-calendar.rs:472:13: 472:45
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:472:13: 472:32
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb25: {
        _54 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 12_u32) -> [return: bb26, unwind: bb39]; // scope 1 at ui/impl-trait/example-calendar.rs:473:13: 473:45
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:473:13: 473:32
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb26: {
        _47 = [move _48, move _49, move _50, move _51, move _52, move _53, move _54]; // scope 1 at ui/impl-trait/example-calendar.rs:466:10: 474:10
        _46 = &_47;                      // scope 1 at ui/impl-trait/example-calendar.rs:466:9: 474:10
        _45 = &_46;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _35 = (move _36, move _45);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _55 = (_35.0: &&[NaiveDate]);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _56 = (_35.1: &&[NaiveDate; 7]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _59 = _55;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _60 = _56;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _58 = <&[NaiveDate] as PartialEq<&[NaiveDate; 7]>>::eq(move _59, move _60) -> [return: bb27, unwind: bb39]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[NaiveDate], &'b &[NaiveDate; 7]) -> bool {<&[NaiveDate] as PartialEq<&[NaiveDate; 7]>>::eq}, val: Value(<ZST>) }
    }

    bb27: {
        _57 = Not(move _58);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _57) -> [0: bb29, otherwise: bb28]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb28: {
        _61 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _63 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _65 = _55;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _64 = _65;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _67 = _56;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _66 = _67;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _68 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _62 = core::panicking::assert_failed::<&[NaiveDate], &[NaiveDate; 7]>(move _63, move _64, move _66, move _68) -> bb39; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[NaiveDate], &'b &[NaiveDate; 7], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[NaiveDate], &[NaiveDate; 7]>}, val: Value(<ZST>) }
    }

    bb29: {
        drop(_40) -> bb30;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb30: {
        _76 = &mut _1;                   // scope 1 at ui/impl-trait/example-calendar.rs:476:16: 476:28
        _75 = <impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::next(move _76) -> bb31; // scope 1 at ui/impl-trait/example-calendar.rs:476:16: 476:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:476:22: 476:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = (u32, impl DateIterator)> + Clone) -> Option<<impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::Item> {<impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::next}, val: Value(<ZST>) }
    }

    bb31: {
        _74 = Option::<(u32, impl DateIterator)>::unwrap(move _75) -> bb32; // scope 1 at ui/impl-trait/example-calendar.rs:476:16: 476:37
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:476:29: 476:35
                                         // + literal: Const { ty: fn(Option<(u32, impl DateIterator)>) -> (u32, impl DateIterator) {Option::<(u32, impl DateIterator)>::unwrap}, val: Value(<ZST>) }
    }

    bb32: {
        _73 = &mut (_74.1: impl DateIterator); // scope 1 at ui/impl-trait/example-calendar.rs:476:16: 476:46
        _72 = <impl DateIterator as Iterator>::nth(move _73, const 0_usize) -> bb33; // scope 1 at ui/impl-trait/example-calendar.rs:476:16: 476:46
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:476:40: 476:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl DateIterator, usize) -> Option<<impl DateIterator as Iterator>::Item> {<impl DateIterator as Iterator>::nth}, val: Value(<ZST>) }
    }

    bb33: {
        _71 = Option::<NaiveDate>::unwrap(move _72) -> bb34; // scope 1 at ui/impl-trait/example-calendar.rs:476:16: 476:55
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:476:47: 476:53
                                         // + literal: Const { ty: fn(Option<NaiveDate>) -> NaiveDate {Option::<NaiveDate>::unwrap}, val: Value(<ZST>) }
    }

    bb34: {
        _70 = &_71;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _78 = NaiveDate::from_ymd(const 2013_i32, const 1_u32, const 13_u32) -> bb35; // scope 1 at ui/impl-trait/example-calendar.rs:476:57: 476:89
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:476:57: 476:76
                                         // + literal: Const { ty: fn(i32, u32, u32) -> NaiveDate {NaiveDate::from_ymd}, val: Value(<ZST>) }
    }

    bb35: {
        _77 = &_78;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _69 = (move _70, move _77);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _79 = (_69.0: &NaiveDate);       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _80 = (_69.1: &NaiveDate);       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _83 = _79;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _84 = _80;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _82 = <NaiveDate as PartialEq>::eq(move _83, move _84) -> bb36; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a NaiveDate, &'b NaiveDate) -> bool {<NaiveDate as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb36: {
        _81 = Not(move _82);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _81) -> [0: bb38, otherwise: bb37]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb37: {
        _85 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _87 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _89 = _79;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _88 = _89;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _91 = _80;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _90 = _91;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _92 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _86 = core::panicking::assert_failed::<NaiveDate, NaiveDate>(move _87, move _88, move _90, move _92); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a NaiveDate, &'b NaiveDate, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<NaiveDate, NaiveDate>}, val: Value(<ZST>) }
    }

    bb38: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:477:2: 477:2
    }

    bb39 (cleanup): {
        drop(_40) -> bb41;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb40 (cleanup): {
        drop(_8) -> bb41;                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb41 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:452:1: 477:2
    }
}

const COLS_PER_DAY: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:480:21: 480:24

    bb0: {
        _0 = const 3_u32;                // scope 0 at ui/impl-trait/example-calendar.rs:480:27: 480:28
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:480:1: 480:29
    }
}

const COLS_PER_WEEK: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/example-calendar.rs:483:22: 483:25
    let mut _1: (u32, bool);             // in scope 0 at ui/impl-trait/example-calendar.rs:483:28: 483:44

    bb0: {
        _1 = CheckedMul(const 7_u32, const _); // scope 0 at ui/impl-trait/example-calendar.rs:483:28: 483:44
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const 7_u32, const _) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:483:28: 483:44
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/impl-trait/example-calendar.rs:483:28: 483:44
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:483:1: 483:45
    }
}

fn format_weeks(_1: impl Iterator<Item = impl DateIterator>) -> impl Iterator<Item = String> {
    debug it => _1;                      // in scope 0 at ui/impl-trait/example-calendar.rs:486:17: 486:19
    let mut _0: impl std::iter::Iterator<Item = std::string::String>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:486:65: 486:91
    let mut _2: impl Iterator<Item = impl DateIterator>; // in scope 0 at ui/impl-trait/example-calendar.rs:487:5: 487:7
    let mut _3: [closure@ui/impl-trait/example-calendar.rs:487:12: 487:18]; // in scope 0 at ui/impl-trait/example-calendar.rs:487:12: 509:6

    bb0: {
        _2 = move _1;                    // scope 0 at ui/impl-trait/example-calendar.rs:487:5: 487:7
        _0 = <impl Iterator<Item = impl DateIterator> as Iterator>::map::<String, [closure@ui/impl-trait/example-calendar.rs:487:12: 487:18]>(move _2, move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:487:5: 509:7
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:487:8: 487:11
                                         // + literal: Const { ty: fn(impl Iterator<Item = impl DateIterator>, [closure@ui/impl-trait/example-calendar.rs:487:12: 487:18]) -> Map<impl Iterator<Item = impl DateIterator>, [closure@ui/impl-trait/example-calendar.rs:487:12: 487:18]> {<impl Iterator<Item = impl DateIterator> as Iterator>::map::<String, [closure@ui/impl-trait/example-calendar.rs:487:12: 487:18]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:510:2: 510:2
    }
}

fn format_weeks::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:487:12: 487:18], _2: impl DateIterator) -> String {
    debug week => _2;                    // in scope 0 at ui/impl-trait/example-calendar.rs:487:13: 487:17
    let mut _0: std::string::String;     // return place in scope 0 at ui/impl-trait/example-calendar.rs:488:13: 488:20
    let mut _3: usize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:488:45: 488:88
    let mut _6: impl DateIterator;       // in scope 0 at ui/impl-trait/example-calendar.rs:493:18: 493:22
    let mut _7: impl DateIterator;       // in scope 0 at ui/impl-trait/example-calendar.rs:493:18: 493:22
    let mut _9: std::option::Option<NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:493:18: 493:22
    let mut _10: &mut impl DateIterator; // in scope 0 at ui/impl-trait/example-calendar.rs:493:18: 493:22
    let mut _11: &mut impl DateIterator; // in scope 0 at ui/impl-trait/example-calendar.rs:493:18: 493:22
    let mut _12: isize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:493:9: 503:10
    let mut _14: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:494:24: 494:58
    let mut _15: &Weekday;               // in scope 0 at ui/impl-trait/example-calendar.rs:494:24: 494:58
    let _16: Weekday;                    // in scope 0 at ui/impl-trait/example-calendar.rs:494:24: 494:35
    let mut _17: &NaiveDate;             // in scope 0 at ui/impl-trait/example-calendar.rs:494:24: 494:35
    let mut _18: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:497:16: 497:21
    let _19: ();                         // in scope 0 at ui/impl-trait/example-calendar.rs:498:17: 498:71
    let mut _20: &mut std::string::String; // in scope 0 at ui/impl-trait/example-calendar.rs:498:17: 498:71
    let mut _21: std::iter::Take<std::iter::Repeat<char>>; // in scope 0 at ui/impl-trait/example-calendar.rs:498:28: 498:70
    let mut _22: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:498:35: 498:69
    let mut _23: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:498:35: 498:60
    let mut _24: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:498:51: 498:59
    let mut _25: (u32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:498:35: 498:60
    let _26: ();                         // in scope 0 at ui/impl-trait/example-calendar.rs:502:13: 502:52
    let mut _27: std::result::Result<(), std::fmt::Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _28: &mut std::string::String; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _29: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _30: &[&str];                // in scope 0 at ui/impl-trait/example-calendar.rs:502:25: 502:33
    let mut _31: &[&str; 1];             // in scope 0 at ui/impl-trait/example-calendar.rs:502:25: 502:33
    let _32: &[&str; 1];                 // in scope 0 at ui/impl-trait/example-calendar.rs:502:25: 502:33
    let mut _33: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _34: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _35: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _36: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _37: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/example-calendar.rs:502:35: 502:42
    let mut _38: &u32;                   // in scope 0 at ui/impl-trait/example-calendar.rs:502:35: 502:42
    let _39: &u32;                       // in scope 0 at ui/impl-trait/example-calendar.rs:502:35: 502:42
    let _40: u32;                        // in scope 0 at ui/impl-trait/example-calendar.rs:502:35: 502:42
    let mut _41: &NaiveDate;             // in scope 0 at ui/impl-trait/example-calendar.rs:502:35: 502:42
    let mut _42: &[std::fmt::rt::v1::Argument]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _43: &[std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _44: &[std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _45: [std::fmt::rt::v1::Argument; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _46: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _47: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _48: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _49: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _50: core::fmt::UnsafeArg;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _51: ();                         // in scope 0 at ui/impl-trait/example-calendar.rs:507:9: 507:69
    let mut _52: &mut std::string::String; // in scope 0 at ui/impl-trait/example-calendar.rs:507:9: 507:69
    let mut _53: std::iter::Take<std::iter::Repeat<char>>; // in scope 0 at ui/impl-trait/example-calendar.rs:507:20: 507:68
    let mut _54: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:507:27: 507:67
    let mut _55: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:507:27: 507:58
    let mut _56: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:507:43: 507:57
    let mut _57: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:507:48: 507:56
    let mut _58: (u32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:507:43: 507:57
    let mut _59: (u32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:507:27: 507:58
    let mut _61: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:509:5: 509:6
    scope 1 {
        debug buf => _0;                 // in scope 1 at ui/impl-trait/example-calendar.rs:488:13: 488:20
        let mut _4: u32;                 // in scope 1 at ui/impl-trait/example-calendar.rs:491:13: 491:25
        scope 2 {
            debug last_day => _4;        // in scope 2 at ui/impl-trait/example-calendar.rs:491:13: 491:25
            let mut _5: bool;            // in scope 2 at ui/impl-trait/example-calendar.rs:492:13: 492:22
            scope 3 {
                debug first => _5;       // in scope 3 at ui/impl-trait/example-calendar.rs:492:13: 492:22
                let mut _8: impl DateIterator; // in scope 3 at ui/impl-trait/example-calendar.rs:493:18: 493:22
                scope 4 {
                    debug iter => _8;    // in scope 4 at ui/impl-trait/example-calendar.rs:493:18: 493:22
                    let _13: NaiveDate;  // in scope 4 at ui/impl-trait/example-calendar.rs:493:13: 493:14
                    scope 5 {
                        debug d => _13;  // in scope 5 at ui/impl-trait/example-calendar.rs:493:13: 493:14
                        let mut _60: &[&str; 1]; // in scope 5 at ui/impl-trait/example-calendar.rs:502:25: 502:33
                        scope 6 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _61 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:488:13: 488:20
        _61 = const true;                // scope 0 at ui/impl-trait/example-calendar.rs:488:13: 488:20
        _3 = const 65_usize;             // scope 0 at ui/impl-trait/example-calendar.rs:488:45: 488:88
        _0 = String::with_capacity(move _3) -> [return: bb1, unwind: bb31]; // scope 0 at ui/impl-trait/example-calendar.rs:488:23: 488:89
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:488:23: 488:44
                                         // + literal: Const { ty: fn(usize) -> String {String::with_capacity}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const 0_u32;                // scope 1 at ui/impl-trait/example-calendar.rs:491:28: 491:29
        _5 = const true;                 // scope 2 at ui/impl-trait/example-calendar.rs:492:25: 492:29
        _61 = const false;               // scope 3 at ui/impl-trait/example-calendar.rs:493:18: 493:22
        _7 = move _2;                    // scope 3 at ui/impl-trait/example-calendar.rs:493:18: 493:22
        _6 = <impl DateIterator as IntoIterator>::into_iter(move _7) -> [return: bb2, unwind: bb28]; // scope 3 at ui/impl-trait/example-calendar.rs:493:18: 493:22
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:493:18: 493:22
                                         // + literal: Const { ty: fn(impl DateIterator) -> <impl DateIterator as IntoIterator>::IntoIter {<impl DateIterator as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = move _6;                    // scope 3 at ui/impl-trait/example-calendar.rs:493:18: 493:22
        goto -> bb3;                     // scope 4 at ui/impl-trait/example-calendar.rs:493:9: 503:10
    }

    bb3: {
        _11 = &mut _8;                   // scope 4 at ui/impl-trait/example-calendar.rs:493:18: 493:22
        _10 = &mut (*_11);               // scope 4 at ui/impl-trait/example-calendar.rs:493:18: 493:22
        _9 = <impl DateIterator as Iterator>::next(move _10) -> [return: bb4, unwind: bb27]; // scope 4 at ui/impl-trait/example-calendar.rs:493:18: 493:22
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:493:18: 493:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl DateIterator) -> Option<<impl DateIterator as Iterator>::Item> {<impl DateIterator as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = discriminant(_9);          // scope 4 at ui/impl-trait/example-calendar.rs:493:18: 493:22
        switchInt(move _12) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 4 at ui/impl-trait/example-calendar.rs:493:18: 493:22
    }

    bb5: {
        _13 = ((_9 as Some).0: NaiveDate); // scope 4 at ui/impl-trait/example-calendar.rs:493:13: 493:14
        _17 = &_13;                      // scope 5 at ui/impl-trait/example-calendar.rs:494:24: 494:35
        _16 = NaiveDate::weekday(move _17) -> [return: bb8, unwind: bb27]; // scope 5 at ui/impl-trait/example-calendar.rs:494:24: 494:35
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:494:26: 494:33
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> Weekday {NaiveDate::weekday}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 4 at ui/impl-trait/example-calendar.rs:493:18: 493:22
    }

    bb7: {
        drop(_8) -> [return: bb22, unwind: bb28]; // scope 3 at ui/impl-trait/example-calendar.rs:503:9: 503:10
    }

    bb8: {
        _15 = &_16;                      // scope 5 at ui/impl-trait/example-calendar.rs:494:24: 494:58
        _14 = Weekday::num_days_from_sunday(move _15) -> [return: bb9, unwind: bb27]; // scope 5 at ui/impl-trait/example-calendar.rs:494:24: 494:58
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:494:36: 494:56
                                         // + literal: Const { ty: for<'a> fn(&'a Weekday) -> u32 {Weekday::num_days_from_sunday}, val: Value(<ZST>) }
    }

    bb9: {
        _4 = move _14;                   // scope 5 at ui/impl-trait/example-calendar.rs:494:13: 494:58
        _18 = _5;                        // scope 5 at ui/impl-trait/example-calendar.rs:497:16: 497:21
        switchInt(move _18) -> [0: bb14, otherwise: bb10]; // scope 5 at ui/impl-trait/example-calendar.rs:497:16: 497:21
    }

    bb10: {
        _20 = &mut _0;                   // scope 5 at ui/impl-trait/example-calendar.rs:498:17: 498:71
        _24 = _4;                        // scope 5 at ui/impl-trait/example-calendar.rs:498:51: 498:59
        _25 = CheckedMul(const _, _24);  // scope 5 at ui/impl-trait/example-calendar.rs:498:35: 498:60
        assert(!move (_25.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, move _24) -> [success: bb11, unwind: bb27]; // scope 5 at ui/impl-trait/example-calendar.rs:498:35: 498:60
    }

    bb11: {
        _23 = move (_25.0: u32);         // scope 5 at ui/impl-trait/example-calendar.rs:498:35: 498:60
        _22 = move _23 as usize (IntToInt); // scope 5 at ui/impl-trait/example-calendar.rs:498:35: 498:69
        _21 = spaces(move _22) -> [return: bb12, unwind: bb27]; // scope 5 at ui/impl-trait/example-calendar.rs:498:28: 498:70
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:498:28: 498:34
                                         // + literal: Const { ty: fn(usize) -> std::iter::Take<std::iter::Repeat<char>> {spaces}, val: Value(<ZST>) }
    }

    bb12: {
        _19 = <String as Extend<char>>::extend::<std::iter::Take<std::iter::Repeat<char>>>(move _20, move _21) -> [return: bb13, unwind: bb27]; // scope 5 at ui/impl-trait/example-calendar.rs:498:17: 498:71
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:498:21: 498:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut String, std::iter::Take<std::iter::Repeat<char>>) {<String as Extend<char>>::extend::<std::iter::Take<std::iter::Repeat<char>>>}, val: Value(<ZST>) }
    }

    bb13: {
        _5 = const false;                // scope 5 at ui/impl-trait/example-calendar.rs:499:17: 499:30
        goto -> bb14;                    // scope 5 at ui/impl-trait/example-calendar.rs:497:13: 500:14
    }

    bb14: {
        _28 = &mut _0;                   // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
        _60 = const _;                   // scope 5 at ui/impl-trait/example-calendar.rs:502:25: 502:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:502:25: 502:33
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(format_weeks::{closure#0}, [impl DateIterator, impl Iterator<Item = impl DateIterator>, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _32 = _60;                       // scope 5 at ui/impl-trait/example-calendar.rs:502:25: 502:33
        _31 = _32;                       // scope 5 at ui/impl-trait/example-calendar.rs:502:25: 502:33
        _30 = move _31 as &[&str] (Pointer(Unsize)); // scope 5 at ui/impl-trait/example-calendar.rs:502:25: 502:33
        _41 = &_13;                      // scope 5 at ui/impl-trait/example-calendar.rs:502:35: 502:42
        _40 = NaiveDate::day(move _41) -> [return: bb15, unwind: bb27]; // scope 5 at ui/impl-trait/example-calendar.rs:502:35: 502:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:502:37: 502:40
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> u32 {NaiveDate::day}, val: Value(<ZST>) }
    }

    bb15: {
        _39 = &_40;                      // scope 5 at ui/impl-trait/example-calendar.rs:502:35: 502:42
        _38 = _39;                       // scope 5 at ui/impl-trait/example-calendar.rs:502:35: 502:42
        _37 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(move _38) -> [return: bb16, unwind: bb27]; // scope 5 at ui/impl-trait/example-calendar.rs:502:35: 502:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:502:35: 502:42
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u32>}, val: Value(<ZST>) }
    }

    bb16: {
        _36 = [move _37];                // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _35 = &_36;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _34 = _35;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _33 = move _34 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _47 = const std::fmt::rt::v1::Alignment::Right; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x01)) }
        _48 = Implied;                   // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _49 = Is(const 2_usize) -> [return: bb17, unwind: bb27]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + literal: Const { ty: fn(usize) -> Count {Is}, val: Value(<ZST>) }
    }

    bb17: {
        _46 = Argument::new(const 0_usize, const ' ', move _47, const 0_u32, move _48, move _49) -> [return: bb18, unwind: bb27]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb18: {
        _45 = [move _46];                // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _44 = &_45;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _43 = _44;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _42 = move _43 as &[std::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _50 = core::fmt::UnsafeArg::new() -> [return: bb19, unwind: bb27]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + literal: Const { ty: unsafe fn() -> core::fmt::UnsafeArg {core::fmt::UnsafeArg::new}, val: Value(<ZST>) }
    }

    bb19: {
        _29 = Arguments::<'_>::new_v1_formatted(move _30, move _33, move _42, move _50) -> [return: bb20, unwind: bb27]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>], &[Argument], core::fmt::UnsafeArg) -> Arguments<'_> {Arguments::<'_>::new_v1_formatted}, val: Value(<ZST>) }
    }

    bb20: {
        _27 = <String as std::fmt::Write>::write_fmt(move _28, move _29) -> [return: bb21, unwind: bb27]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, Arguments<'b>) -> Result<(), std::fmt::Error> {<String as std::fmt::Write>::write_fmt}, val: Value(<ZST>) }
    }

    bb21: {
        _26 = Result::<(), std::fmt::Error>::unwrap(move _27) -> [return: bb32, unwind: bb27]; // scope 5 at ui/impl-trait/example-calendar.rs:502:13: 502:52
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:502:44: 502:50
                                         // + literal: Const { ty: fn(Result<(), std::fmt::Error>) {Result::<(), std::fmt::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb22: {
        _52 = &mut _0;                   // scope 3 at ui/impl-trait/example-calendar.rs:507:9: 507:69
        _57 = _4;                        // scope 3 at ui/impl-trait/example-calendar.rs:507:48: 507:56
        _58 = CheckedSub(const 6_u32, _57); // scope 3 at ui/impl-trait/example-calendar.rs:507:43: 507:57
        assert(!move (_58.1: bool), "attempt to compute `{} - {}`, which would overflow", const 6_u32, move _57) -> [success: bb23, unwind: bb28]; // scope 3 at ui/impl-trait/example-calendar.rs:507:43: 507:57
    }

    bb23: {
        _56 = move (_58.0: u32);         // scope 3 at ui/impl-trait/example-calendar.rs:507:43: 507:57
        _59 = CheckedMul(const _, _56);  // scope 3 at ui/impl-trait/example-calendar.rs:507:27: 507:58
        assert(!move (_59.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, move _56) -> [success: bb24, unwind: bb28]; // scope 3 at ui/impl-trait/example-calendar.rs:507:27: 507:58
    }

    bb24: {
        _55 = move (_59.0: u32);         // scope 3 at ui/impl-trait/example-calendar.rs:507:27: 507:58
        _54 = move _55 as usize (IntToInt); // scope 3 at ui/impl-trait/example-calendar.rs:507:27: 507:67
        _53 = spaces(move _54) -> [return: bb25, unwind: bb28]; // scope 3 at ui/impl-trait/example-calendar.rs:507:20: 507:68
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:507:20: 507:26
                                         // + literal: Const { ty: fn(usize) -> std::iter::Take<std::iter::Repeat<char>> {spaces}, val: Value(<ZST>) }
    }

    bb25: {
        _51 = <String as Extend<char>>::extend::<std::iter::Take<std::iter::Repeat<char>>>(move _52, move _53) -> [return: bb26, unwind: bb28]; // scope 3 at ui/impl-trait/example-calendar.rs:507:9: 507:69
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:507:13: 507:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut String, std::iter::Take<std::iter::Repeat<char>>) {<String as Extend<char>>::extend::<std::iter::Take<std::iter::Repeat<char>>>}, val: Value(<ZST>) }
    }

    bb26: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:509:6: 509:6
    }

    bb27 (cleanup): {
        drop(_8) -> bb28;                // scope 3 at ui/impl-trait/example-calendar.rs:503:9: 503:10
    }

    bb28 (cleanup): {
        drop(_0) -> bb31;                // scope 0 at ui/impl-trait/example-calendar.rs:509:5: 509:6
    }

    bb29 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:487:12: 509:6
    }

    bb30 (cleanup): {
        drop(_2) -> bb29;                // scope 0 at ui/impl-trait/example-calendar.rs:509:5: 509:6
    }

    bb31 (cleanup): {
        switchInt(_61) -> [0: bb29, otherwise: bb30]; // scope 0 at ui/impl-trait/example-calendar.rs:509:5: 509:6
    }

    bb32: {
        goto -> bb3;                     // scope 5 at ui/impl-trait/example-calendar.rs:502:13: 502:52
    }
}

promoted[0] in format_weeks::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/impl-trait/example-calendar.rs:502:25: 502:33
    let mut _1: [&str; 1];               // in scope 0 at ui/impl-trait/example-calendar.rs:502:25: 502:33

    bb0: {
        _1 = [const " "];                // scope 0 at ui/impl-trait/example-calendar.rs:502:25: 502:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:502:25: 502:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:502:25: 502:33
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:502:25: 502:33
    }
}

fn test_format_weeks() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/example-calendar.rs:512:24: 512:24
    let _1: std::option::Option<std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:513:9: 513:17
    let mut _2: std::option::Option<(u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)>; // in scope 0 at ui/impl-trait/example-calendar.rs:513:20: 514:29
    let mut _3: &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:513:20: 514:29
    let mut _4: impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:513:20: 514:22
    let mut _5: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:513:20: 513:39
    let mut _6: [closure@ui/impl-trait/example-calendar.rs:516:14: 516:26]; // in scope 0 at ui/impl-trait/example-calendar.rs:516:14: 520:29
    let mut _7: (&std::option::Option<&str>, &std::option::Option<&str>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _9: std::option::Option<&str>;   // in scope 0 at ui/impl-trait/example-calendar.rs:523:9: 523:40
    let mut _10: std::option::Option<&std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:523:9: 523:26
    let mut _11: &std::option::Option<std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:523:9: 523:26
    let mut _12: [closure@ui/impl-trait/example-calendar.rs:523:31: 523:34]; // in scope 0 at ui/impl-trait/example-calendar.rs:523:31: 523:39
    let mut _13: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _18: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _19: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _21: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _22: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _23: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _24: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _25: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _26: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug jan_2013 => _1;            // in scope 1 at ui/impl-trait/example-calendar.rs:513:9: 513:17
        let _14: &std::option::Option<&str>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _15: &std::option::Option<&str>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _28: &std::option::Option<&str>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _14;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _15;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _20: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _20;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _5 = dates_in_year(const 2013_i32) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:513:20: 513:39
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:513:20: 513:33
                                         // + literal: Const { ty: fn(i32) -> impl Iterator<Item = NaiveDate> + Clone {dates_in_year}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>(move _5, by_month::<impl Iterator<Item = NaiveDate> + Clone>) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:513:20: 514:22
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:514:10: 514:12
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone, fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {<impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:514:13: 514:21
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &mut _4;                    // scope 0 at ui/impl-trait/example-calendar.rs:513:20: 514:29
        _2 = <impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::next(move _3) -> bb3; // scope 0 at ui/impl-trait/example-calendar.rs:513:20: 514:29
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:514:23: 514:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone) -> Option<<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::Item> {<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = Option::<(u32, impl Iterator<Item = NaiveDate> + Clone)>::map::<String, [closure@ui/impl-trait/example-calendar.rs:516:14: 516:26]>(move _2, move _6) -> bb4; // scope 0 at ui/impl-trait/example-calendar.rs:513:20: 520:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:516:10: 516:13
                                         // + literal: Const { ty: fn(Option<(u32, impl Iterator<Item = NaiveDate> + Clone)>, [closure@ui/impl-trait/example-calendar.rs:516:14: 516:26]) -> Option<String> {Option::<(u32, impl Iterator<Item = NaiveDate> + Clone)>::map::<String, [closure@ui/impl-trait/example-calendar.rs:516:14: 516:26]>}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &_1;                       // scope 1 at ui/impl-trait/example-calendar.rs:523:9: 523:26
        _10 = Option::<String>::as_ref(move _11) -> [return: bb5, unwind: bb11]; // scope 1 at ui/impl-trait/example-calendar.rs:523:9: 523:26
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:523:18: 523:24
                                         // + literal: Const { ty: for<'a> fn(&'a Option<String>) -> Option<&'a String> {Option::<String>::as_ref}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = Option::<&String>::map::<&str, [closure@ui/impl-trait/example-calendar.rs:523:31: 523:34]>(move _10, move _12) -> [return: bb6, unwind: bb11]; // scope 1 at ui/impl-trait/example-calendar.rs:523:9: 523:40
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:523:27: 523:30
                                         // + literal: Const { ty: fn(Option<&String>, [closure@ui/impl-trait/example-calendar.rs:523:31: 523:34]) -> Option<&str> {Option::<&String>::map::<&str, [closure@ui/impl-trait/example-calendar.rs:523:31: 523:34]>}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = &_9;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _28 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<&str>, val: Unevaluated(test_format_weeks, [], Some(promoted[0])) }
        _13 = _28;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _13);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _14 = (_7.0: &std::option::Option<&str>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _15 = (_7.1: &std::option::Option<&str>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _18 = _14;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _19 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _17 = <Option<&str> as PartialEq>::eq(move _18, move _19) -> [return: bb7, unwind: bb11]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&str>, &'b Option<&str>) -> bool {<Option<&str> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = Not(move _17);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _16) -> [0: bb9, otherwise: bb8]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _20 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = _14;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = _26;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _21 = core::panicking::assert_failed::<Option<&str>, Option<&str>>(move _22, move _23, move _25, move _27) -> bb11; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&str>, &'b Option<&str>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&str>, Option<&str>>}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_1) -> bb10;                // scope 0 at ui/impl-trait/example-calendar.rs:530:1: 530:2
    }

    bb10: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:530:2: 530:2
    }

    bb11 (cleanup): {
        drop(_1) -> bb12;                // scope 0 at ui/impl-trait/example-calendar.rs:530:1: 530:2
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:512:1: 530:2
    }
}

promoted[0] in test_format_weeks: &Option<&str> = {
    let mut _0: &std::option::Option<&str>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<&str>; // in scope 0 at ui/impl-trait/example-calendar.rs:524:9: 528:38

    bb0: {
        _1 = Option::<&str>::Some(const "        1  2  3  4  5\n  6  7  8  9 10 11 12\n 13 14 15 16 17 18 19\n 20 21 22 23 24 25 26\n 27 28 29 30 31      "); // scope 0 at ui/impl-trait/example-calendar.rs:524:9: 528:38
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:524:14: 528:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn test_format_weeks::{closure#0}(_1: [closure@ui/impl-trait/example-calendar.rs:516:14: 516:26], _2: (u32, impl Iterator<Item = NaiveDate> + Clone)) -> String {
    let mut _0: std::string::String;     // return place in scope 0 at ui/impl-trait/example-calendar.rs:517:13: 517:13
    let _3: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:516:19: 516:24
    let mut _4: impl std::iter::Iterator<Item = std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:517:13: 519:35
    let mut _5: std::iter::Map<impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>; // in scope 0 at ui/impl-trait/example-calendar.rs:517:13: 518:42
    let mut _6: impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:517:13: 517:30
    let mut _7: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:517:13: 517:18
    let mut _8: [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]; // in scope 0 at ui/impl-trait/example-calendar.rs:518:23: 518:41
    let mut _9: &str;                    // in scope 0 at ui/impl-trait/example-calendar.rs:520:24: 520:28
    let _10: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:520:24: 520:28
    scope 1 {
        debug month => _3;               // in scope 1 at ui/impl-trait/example-calendar.rs:516:19: 516:24
    }

    bb0: {
        _3 = move (_2.1: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone); // scope 0 at ui/impl-trait/example-calendar.rs:516:19: 516:24
        _7 = move _3;                    // scope 1 at ui/impl-trait/example-calendar.rs:517:13: 517:18
        _6 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {by_week::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl DateIterator)> + Clone>(move _7, by_week::<impl Iterator<Item = NaiveDate> + Clone>) -> bb1; // scope 1 at ui/impl-trait/example-calendar.rs:517:13: 517:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:517:19: 517:21
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone, fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {by_week::<impl Iterator<Item = NaiveDate> + Clone>}) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {<impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {by_week::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl DateIterator)> + Clone>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:517:22: 517:29
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {by_week::<impl Iterator<Item = NaiveDate> + Clone>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = <impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::map::<impl DateIterator, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>(move _6, move _8) -> bb2; // scope 1 at ui/impl-trait/example-calendar.rs:517:13: 518:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:518:19: 518:22
                                         // + literal: Const { ty: fn(impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]) -> Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]> {<impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::map::<impl DateIterator, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = <Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]> as IteratorExt>::__::<fn(Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>) -> impl Iterator<Item = String> {format_weeks::<impl DateIterator, Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>>}, impl Iterator<Item = String>>(move _5, format_weeks::<impl DateIterator, Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>>) -> bb3; // scope 1 at ui/impl-trait/example-calendar.rs:517:13: 519:35
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:519:19: 519:21
                                         // + literal: Const { ty: fn(Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>, fn(Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>) -> impl Iterator<Item = String> {format_weeks::<impl DateIterator, Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>>}) -> impl Iterator<Item = String> {<Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]> as IteratorExt>::__::<fn(Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>) -> impl Iterator<Item = String> {format_weeks::<impl DateIterator, Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>>}, impl Iterator<Item = String>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:519:22: 519:34
                                         // + literal: Const { ty: fn(Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>) -> impl Iterator<Item = String> {format_weeks::<impl DateIterator, Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35]>>}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = const "\n";                // scope 1 at ui/impl-trait/example-calendar.rs:520:24: 520:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:520:24: 520:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = _10;                        // scope 1 at ui/impl-trait/example-calendar.rs:520:24: 520:28
        _0 = <impl Iterator<Item = String> as IteratorExt>::join(move _4, move _9) -> bb4; // scope 1 at ui/impl-trait/example-calendar.rs:517:13: 520:29
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:520:19: 520:23
                                         // + literal: Const { ty: for<'a> fn(impl Iterator<Item = String>, &'a str) -> String {<impl Iterator<Item = String> as IteratorExt>::join}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:520:29: 520:29
    }
}

fn test_format_weeks::{closure#0}::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:518:23: 518:35], _2: (u32, impl DateIterator)) -> impl DateIterator {
    let mut _0: impl DateIterator;       // return place in scope 0 at ui/impl-trait/example-calendar.rs:518:28: 518:33
    scope 1 {
        debug weeks => _0;               // in scope 1 at ui/impl-trait/example-calendar.rs:518:28: 518:33
    }

    bb0: {
        _0 = move (_2.1: impl DateIterator); // scope 0 at ui/impl-trait/example-calendar.rs:518:28: 518:33
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:518:41: 518:41
    }
}

fn test_format_weeks::{closure#1}(_1: [closure@ui/impl-trait/example-calendar.rs:523:31: 523:34], _2: &String) -> &str {
    debug s => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:523:32: 523:33
    let mut _0: &str;                    // return place in scope 0 at ui/impl-trait/example-calendar.rs:523:36: 523:39
    let mut _3: &std::string::String;    // in scope 0 at ui/impl-trait/example-calendar.rs:523:37: 523:39

    bb0: {
        _3 = _2;                         // scope 0 at ui/impl-trait/example-calendar.rs:523:37: 523:39
        _0 = <String as Deref>::deref(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:523:36: 523:39
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:523:36: 523:39
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:523:39: 523:39
    }
}

fn month_title(_1: u32) -> String {
    debug month => _1;                   // in scope 0 at ui/impl-trait/example-calendar.rs:533:16: 533:21
    let mut _2: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: usize;                       // in scope 0 at ui/impl-trait/example-calendar.rs:538:16: 538:33
    let mut _5: &[&str];                 // in scope 0 at ui/impl-trait/example-calendar.rs:538:16: 538:33
    let _6: &[&str];                     // in scope 0 at ui/impl-trait/example-calendar.rs:538:16: 538:27
    let mut _7: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _8: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _22: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:542:9: 542:13
    let mut _23: &[&str];                // in scope 0 at ui/impl-trait/example-calendar.rs:542:16: 542:27
    let _24: usize;                      // in scope 0 at ui/impl-trait/example-calendar.rs:542:28: 542:48
    let mut _25: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:542:28: 542:39
    let mut _26: u32;                    // in scope 0 at ui/impl-trait/example-calendar.rs:542:29: 542:34
    let mut _27: (u32, bool);            // in scope 0 at ui/impl-trait/example-calendar.rs:542:28: 542:39
    let mut _28: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:542:16: 542:49
    let mut _29: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:542:16: 542:49
    let mut _30: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:543:5: 543:49
    let mut _31: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:543:13: 543:48
    let mut _32: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:543:13: 543:23
    let mut _33: &str;                   // in scope 0 at ui/impl-trait/example-calendar.rs:543:13: 543:23
    let mut _34: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:543:26: 543:48
    let mut _35: !;                      // in scope 0 at ui/impl-trait/example-calendar.rs:543:5: 543:49
    let mut _37: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:544:18: 544:55
    let mut _38: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:544:19: 544:41
    let mut _39: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:544:44: 544:54
    let mut _40: &str;                   // in scope 0 at ui/impl-trait/example-calendar.rs:544:44: 544:54
    let mut _41: (usize, bool);          // in scope 0 at ui/impl-trait/example-calendar.rs:544:18: 544:55
    let mut _43: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:545:17: 545:52
    let mut _44: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:545:17: 545:39
    let mut _45: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:545:42: 545:52
    let mut _46: &str;                   // in scope 0 at ui/impl-trait/example-calendar.rs:545:42: 545:52
    let mut _47: (usize, bool);          // in scope 0 at ui/impl-trait/example-calendar.rs:545:17: 545:52
    let mut _48: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:545:55: 545:61
    let mut _49: (usize, bool);          // in scope 0 at ui/impl-trait/example-calendar.rs:545:17: 545:61
    let mut _50: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:548:44: 548:66
    let _51: ();                         // in scope 0 at ui/impl-trait/example-calendar.rs:549:5: 549:34
    let mut _52: &mut std::string::String; // in scope 0 at ui/impl-trait/example-calendar.rs:549:5: 549:34
    let mut _53: std::iter::Take<std::iter::Repeat<char>>; // in scope 0 at ui/impl-trait/example-calendar.rs:549:19: 549:33
    let mut _54: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:549:26: 549:32
    let _55: ();                         // in scope 0 at ui/impl-trait/example-calendar.rs:550:5: 550:26
    let mut _56: &mut std::string::String; // in scope 0 at ui/impl-trait/example-calendar.rs:550:5: 550:26
    let mut _57: &str;                   // in scope 0 at ui/impl-trait/example-calendar.rs:550:21: 550:25
    let _58: ();                         // in scope 0 at ui/impl-trait/example-calendar.rs:551:5: 551:33
    let mut _59: &mut std::string::String; // in scope 0 at ui/impl-trait/example-calendar.rs:551:5: 551:33
    let mut _60: std::iter::Take<std::iter::Repeat<char>>; // in scope 0 at ui/impl-trait/example-calendar.rs:551:19: 551:32
    let mut _61: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:551:26: 551:31
    let mut _62: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug name => _22;               // in scope 3 at ui/impl-trait/example-calendar.rs:542:9: 542:13
        let _36: usize;                  // in scope 3 at ui/impl-trait/example-calendar.rs:544:9: 544:15
        scope 4 {
            debug before => _36;         // in scope 4 at ui/impl-trait/example-calendar.rs:544:9: 544:15
            let _42: usize;              // in scope 4 at ui/impl-trait/example-calendar.rs:545:9: 545:14
            scope 5 {
                debug after => _42;      // in scope 5 at ui/impl-trait/example-calendar.rs:545:9: 545:14
                let mut _0: std::string::String; // return place in scope 5 at ui/impl-trait/example-calendar.rs:548:9: 548:19
                scope 6 {
                    debug result => _0;  // in scope 6 at ui/impl-trait/example-calendar.rs:548:9: 548:19
                }
            }
        }
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/impl-trait/example-calendar.rs:538:16: 538:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:538:16: 538:27
                                         // + literal: Const { ty: &[&str], val: Unevaluated(MONTH_NAMES, [], None) }
        _5 = _6;                         // scope 0 at ui/impl-trait/example-calendar.rs:538:16: 538:33
        _4 = Len((*_5));                 // scope 0 at ui/impl-trait/example-calendar.rs:538:16: 538:33
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _62 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(month_title, [], Some(promoted[0])) }
        _7 = _62;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _7);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_2.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_2.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 12_usize;            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb2, otherwise: bb1]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<usize, usize>(move _16, move _17, move _19, move _21); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb2: {
        _23 = const _;                   // scope 0 at ui/impl-trait/example-calendar.rs:542:16: 542:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:542:16: 542:27
                                         // + literal: Const { ty: &[&str], val: Unevaluated(MONTH_NAMES, [], None) }
        _26 = _1;                        // scope 0 at ui/impl-trait/example-calendar.rs:542:29: 542:34
        _27 = CheckedSub(_26, const 1_u32); // scope 0 at ui/impl-trait/example-calendar.rs:542:28: 542:39
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", move _26, const 1_u32) -> bb3; // scope 0 at ui/impl-trait/example-calendar.rs:542:28: 542:39
    }

    bb3: {
        _25 = move (_27.0: u32);         // scope 0 at ui/impl-trait/example-calendar.rs:542:28: 542:39
        _24 = move _25 as usize (IntToInt); // scope 0 at ui/impl-trait/example-calendar.rs:542:28: 542:48
        _28 = const 12_usize;            // scope 0 at ui/impl-trait/example-calendar.rs:542:16: 542:49
        _29 = Lt(_24, _28);              // scope 0 at ui/impl-trait/example-calendar.rs:542:16: 542:49
        assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _24) -> bb4; // scope 0 at ui/impl-trait/example-calendar.rs:542:16: 542:49
    }

    bb4: {
        _22 = (*_23)[_24];               // scope 0 at ui/impl-trait/example-calendar.rs:542:16: 542:49
        _33 = _22;                       // scope 3 at ui/impl-trait/example-calendar.rs:543:13: 543:23
        _32 = core::str::<impl str>::len(move _33) -> bb5; // scope 3 at ui/impl-trait/example-calendar.rs:543:13: 543:23
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:543:18: 543:21
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> usize {core::str::<impl str>::len}, val: Value(<ZST>) }
    }

    bb5: {
        _34 = const 21_usize;            // scope 3 at ui/impl-trait/example-calendar.rs:543:26: 543:48
        _31 = Lt(move _32, move _34);    // scope 3 at ui/impl-trait/example-calendar.rs:543:13: 543:48
        _30 = Not(move _31);             // scope 3 at ui/impl-trait/example-calendar.rs:543:5: 543:49
        switchInt(move _30) -> [0: bb7, otherwise: bb6]; // scope 3 at ui/impl-trait/example-calendar.rs:543:5: 543:49
    }

    bb6: {
        _35 = core::panicking::panic(const "assertion failed: name.len() < COLS_PER_WEEK as usize"); // scope 3 at ui/impl-trait/example-calendar.rs:543:5: 543:49
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:543:5: 543:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _38 = const 21_usize;            // scope 3 at ui/impl-trait/example-calendar.rs:544:19: 544:41
        _40 = _22;                       // scope 3 at ui/impl-trait/example-calendar.rs:544:44: 544:54
        _39 = core::str::<impl str>::len(move _40) -> bb8; // scope 3 at ui/impl-trait/example-calendar.rs:544:44: 544:54
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:544:49: 544:52
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> usize {core::str::<impl str>::len}, val: Value(<ZST>) }
    }

    bb8: {
        _41 = CheckedSub(_38, _39);      // scope 3 at ui/impl-trait/example-calendar.rs:544:18: 544:55
        assert(!move (_41.1: bool), "attempt to compute `{} - {}`, which would overflow", move _38, move _39) -> bb9; // scope 3 at ui/impl-trait/example-calendar.rs:544:18: 544:55
    }

    bb9: {
        _37 = move (_41.0: usize);       // scope 3 at ui/impl-trait/example-calendar.rs:544:18: 544:55
        _36 = Div(move _37, const 2_usize); // scope 3 at ui/impl-trait/example-calendar.rs:544:18: 544:59
        _44 = const 21_usize;            // scope 4 at ui/impl-trait/example-calendar.rs:545:17: 545:39
        _46 = _22;                       // scope 4 at ui/impl-trait/example-calendar.rs:545:42: 545:52
        _45 = core::str::<impl str>::len(move _46) -> bb10; // scope 4 at ui/impl-trait/example-calendar.rs:545:42: 545:52
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:545:47: 545:50
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> usize {core::str::<impl str>::len}, val: Value(<ZST>) }
    }

    bb10: {
        _47 = CheckedSub(_44, _45);      // scope 4 at ui/impl-trait/example-calendar.rs:545:17: 545:52
        assert(!move (_47.1: bool), "attempt to compute `{} - {}`, which would overflow", move _44, move _45) -> bb11; // scope 4 at ui/impl-trait/example-calendar.rs:545:17: 545:52
    }

    bb11: {
        _43 = move (_47.0: usize);       // scope 4 at ui/impl-trait/example-calendar.rs:545:17: 545:52
        _48 = _36;                       // scope 4 at ui/impl-trait/example-calendar.rs:545:55: 545:61
        _49 = CheckedSub(_43, _48);      // scope 4 at ui/impl-trait/example-calendar.rs:545:17: 545:61
        assert(!move (_49.1: bool), "attempt to compute `{} - {}`, which would overflow", move _43, move _48) -> bb12; // scope 4 at ui/impl-trait/example-calendar.rs:545:17: 545:61
    }

    bb12: {
        _42 = move (_49.0: usize);       // scope 4 at ui/impl-trait/example-calendar.rs:545:17: 545:61
        _50 = const 21_usize;            // scope 5 at ui/impl-trait/example-calendar.rs:548:44: 548:66
        _0 = String::with_capacity(move _50) -> bb13; // scope 5 at ui/impl-trait/example-calendar.rs:548:22: 548:67
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:548:22: 548:43
                                         // + literal: Const { ty: fn(usize) -> String {String::with_capacity}, val: Value(<ZST>) }
    }

    bb13: {
        _52 = &mut _0;                   // scope 6 at ui/impl-trait/example-calendar.rs:549:5: 549:34
        _54 = _36;                       // scope 6 at ui/impl-trait/example-calendar.rs:549:26: 549:32
        _53 = spaces(move _54) -> [return: bb14, unwind: bb19]; // scope 6 at ui/impl-trait/example-calendar.rs:549:19: 549:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:549:19: 549:25
                                         // + literal: Const { ty: fn(usize) -> std::iter::Take<std::iter::Repeat<char>> {spaces}, val: Value(<ZST>) }
    }

    bb14: {
        _51 = <String as Extend<char>>::extend::<std::iter::Take<std::iter::Repeat<char>>>(move _52, move _53) -> [return: bb15, unwind: bb19]; // scope 6 at ui/impl-trait/example-calendar.rs:549:5: 549:34
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:549:12: 549:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut String, std::iter::Take<std::iter::Repeat<char>>) {<String as Extend<char>>::extend::<std::iter::Take<std::iter::Repeat<char>>>}, val: Value(<ZST>) }
    }

    bb15: {
        _56 = &mut _0;                   // scope 6 at ui/impl-trait/example-calendar.rs:550:5: 550:26
        _57 = _22;                       // scope 6 at ui/impl-trait/example-calendar.rs:550:21: 550:25
        _55 = String::push_str(move _56, move _57) -> [return: bb16, unwind: bb19]; // scope 6 at ui/impl-trait/example-calendar.rs:550:5: 550:26
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:550:12: 550:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, &'b str) {String::push_str}, val: Value(<ZST>) }
    }

    bb16: {
        _59 = &mut _0;                   // scope 6 at ui/impl-trait/example-calendar.rs:551:5: 551:33
        _61 = _42;                       // scope 6 at ui/impl-trait/example-calendar.rs:551:26: 551:31
        _60 = spaces(move _61) -> [return: bb17, unwind: bb19]; // scope 6 at ui/impl-trait/example-calendar.rs:551:19: 551:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:551:19: 551:25
                                         // + literal: Const { ty: fn(usize) -> std::iter::Take<std::iter::Repeat<char>> {spaces}, val: Value(<ZST>) }
    }

    bb17: {
        _58 = <String as Extend<char>>::extend::<std::iter::Take<std::iter::Repeat<char>>>(move _59, move _60) -> [return: bb18, unwind: bb19]; // scope 6 at ui/impl-trait/example-calendar.rs:551:5: 551:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:551:12: 551:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut String, std::iter::Take<std::iter::Repeat<char>>) {<String as Extend<char>>::extend::<std::iter::Take<std::iter::Repeat<char>>>}, val: Value(<ZST>) }
    }

    bb18: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:553:2: 553:2
    }

    bb19 (cleanup): {
        drop(_0) -> bb20;                // scope 5 at ui/impl-trait/example-calendar.rs:553:1: 553:2
    }

    bb20 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:533:1: 553:2
    }
}

promoted[0] in month_title: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:538:35: 538:37

    bb0: {
        _1 = const 12_usize;             // scope 0 at ui/impl-trait/example-calendar.rs:538:35: 538:37
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

const MONTH_NAMES: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at ui/impl-trait/example-calendar.rs:534:24: 534:47
    let mut _1: &[&str; 12];             // in scope 0 at ui/impl-trait/example-calendar.rs:534:50: 537:6
    let _2: &[&str; 12];                 // in scope 0 at ui/impl-trait/example-calendar.rs:534:50: 537:6
    let _3: [&str; 12];                  // in scope 0 at ui/impl-trait/example-calendar.rs:534:51: 537:6
    let mut _4: &[&str; 12];             // in scope 0 at ui/impl-trait/example-calendar.rs:534:50: 537:6

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/impl-trait/example-calendar.rs:534:50: 537:6
        StorageLive(_2);                 // scope 0 at ui/impl-trait/example-calendar.rs:534:50: 537:6
        _4 = const _;                    // scope 0 at ui/impl-trait/example-calendar.rs:534:50: 537:6
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:534:50: 537:6
                                         // + literal: Const { ty: &[&str; 12], val: Unevaluated(MONTH_NAMES, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/impl-trait/example-calendar.rs:534:50: 537:6
        _1 = &(*_2);                     // scope 0 at ui/impl-trait/example-calendar.rs:534:50: 537:6
        _0 = move _1 as &[&str] (Pointer(Unsize)); // scope 0 at ui/impl-trait/example-calendar.rs:534:50: 537:6
        StorageDead(_2);                 // scope 0 at ui/impl-trait/example-calendar.rs:537:5: 537:6
        StorageDead(_1);                 // scope 0 at ui/impl-trait/example-calendar.rs:537:5: 537:6
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:534:5: 537:7
    }
}

promoted[0] in MONTH_NAMES: &[&str; 12] = {
    let mut _0: &[&str; 12];             // return place in scope 0 at ui/impl-trait/example-calendar.rs:534:50: 537:6
    let mut _1: [&str; 12];              // in scope 0 at ui/impl-trait/example-calendar.rs:534:51: 537:6

    bb0: {
        _1 = [const "January", const "February", const "March", const "April", const "May", const "June", const "July", const "August", const "September", const "October", const "November", const "December"]; // scope 0 at ui/impl-trait/example-calendar.rs:534:51: 537:6
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:535:9: 535:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:535:20: 535:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:535:32: 535:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:535:41: 535:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:535:50: 535:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:535:57: 535:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:536:9: 536:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:536:17: 536:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:536:27: 536:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:536:40: 536:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:536:51: 536:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:536:63: 536:73
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:534:50: 537:6
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:534:50: 537:6
    }
}

fn test_month_title() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/example-calendar.rs:555:23: 555:23
    let mut _1: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: usize;                       // in scope 0 at ui/impl-trait/example-calendar.rs:556:16: 556:36
    let mut _4: &std::string::String;    // in scope 0 at ui/impl-trait/example-calendar.rs:556:16: 556:36
    let _5: std::string::String;         // in scope 0 at ui/impl-trait/example-calendar.rs:556:16: 556:30
    let mut _6: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _8: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = month_title(const 1_u32) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:556:16: 556:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:556:16: 556:27
                                         // + literal: Const { ty: fn(u32) -> String {month_title}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at ui/impl-trait/example-calendar.rs:556:16: 556:36
        _3 = String::len(move _4) -> [return: bb2, unwind: bb6]; // scope 0 at ui/impl-trait/example-calendar.rs:556:16: 556:36
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:556:31: 556:34
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> usize {String::len}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(test_month_title, [], Some(promoted[0])) }
        _6 = _21;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_1.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_1.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 21_usize;            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _13 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<usize, usize>(move _15, move _16, move _18, move _20) -> bb6; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_5) -> bb5;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb5: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:557:2: 557:2
    }

    bb6 (cleanup): {
        drop(_5) -> bb7;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:555:1: 557:2
    }
}

promoted[0] in test_month_title: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:556:38: 556:60

    bb0: {
        _1 = const _ as usize (IntToInt); // scope 0 at ui/impl-trait/example-calendar.rs:556:38: 556:60
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn format_month(_1: impl DateIterator) -> impl Iterator<Item = String> {
    debug it => _1;                      // in scope 0 at ui/impl-trait/example-calendar.rs:560:17: 560:19
    let mut _0: impl std::iter::Iterator<Item = std::string::String>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:560:43: 560:69
    let mut _2: std::iter::Peekable<impl DateIterator>; // in scope 0 at ui/impl-trait/example-calendar.rs:561:9: 561:23
    let mut _3: impl DateIterator;       // in scope 0 at ui/impl-trait/example-calendar.rs:561:26: 561:28
    let mut _5: u32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:562:29: 562:63
    let mut _6: &NaiveDate;              // in scope 0 at ui/impl-trait/example-calendar.rs:562:29: 562:63
    let _7: &NaiveDate;                  // in scope 0 at ui/impl-trait/example-calendar.rs:562:29: 562:55
    let mut _8: std::option::Option<&NaiveDate>; // in scope 0 at ui/impl-trait/example-calendar.rs:562:29: 562:46
    let mut _9: &mut std::iter::Peekable<impl DateIterator>; // in scope 0 at ui/impl-trait/example-calendar.rs:562:29: 562:46
    let mut _10: std::option::IntoIter<std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:564:5: 564:28
    let mut _11: std::option::Option<std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:564:5: 564:16
    let mut _12: std::string::String;    // in scope 0 at ui/impl-trait/example-calendar.rs:564:10: 564:15
    let mut _13: impl std::iter::Iterator<Item = std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:565:16: 567:30
    let mut _14: std::iter::Map<impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>; // in scope 0 at ui/impl-trait/example-calendar.rs:565:16: 566:35
    let mut _15: impl std::iter::Iterator<Item = (u32, impl DateIterator)> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:565:16: 565:38
    let mut _16: std::iter::Peekable<impl DateIterator>; // in scope 0 at ui/impl-trait/example-calendar.rs:565:16: 565:26
    let mut _17: [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]; // in scope 0 at ui/impl-trait/example-calendar.rs:566:18: 566:34
    let mut _18: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:567:30: 567:31
    let mut _19: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:568:1: 568:2
    scope 1 {
        debug month_days => _2;          // in scope 1 at ui/impl-trait/example-calendar.rs:561:9: 561:23
        let _4: std::string::String;     // in scope 1 at ui/impl-trait/example-calendar.rs:562:9: 562:14
        scope 2 {
            debug title => _4;           // in scope 2 at ui/impl-trait/example-calendar.rs:562:9: 562:14
        }
    }

    bb0: {
        _18 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:561:9: 561:23
        _19 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:561:9: 561:23
        _3 = move _1;                    // scope 0 at ui/impl-trait/example-calendar.rs:561:26: 561:28
        _2 = <impl DateIterator as Iterator>::peekable(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:561:26: 561:39
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:561:29: 561:37
                                         // + literal: Const { ty: fn(impl DateIterator) -> Peekable<impl DateIterator> {<impl DateIterator as Iterator>::peekable}, val: Value(<ZST>) }
    }

    bb1: {
        _19 = const true;                // scope 0 at ui/impl-trait/example-calendar.rs:561:38: 561:39
        _9 = &mut _2;                    // scope 1 at ui/impl-trait/example-calendar.rs:562:29: 562:46
        _8 = Peekable::<impl DateIterator>::peek(move _9) -> [return: bb2, unwind: bb15]; // scope 1 at ui/impl-trait/example-calendar.rs:562:29: 562:46
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:562:40: 562:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut Peekable<impl DateIterator>) -> Option<&'a <impl DateIterator as Iterator>::Item> {Peekable::<impl DateIterator>::peek}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Option::<&NaiveDate>::unwrap(move _8) -> [return: bb3, unwind: bb15]; // scope 1 at ui/impl-trait/example-calendar.rs:562:29: 562:55
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:562:47: 562:53
                                         // + literal: Const { ty: fn(Option<&NaiveDate>) -> &NaiveDate {Option::<&NaiveDate>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = _7;                         // scope 1 at ui/impl-trait/example-calendar.rs:562:29: 562:63
        _5 = NaiveDate::month(move _6) -> [return: bb4, unwind: bb15]; // scope 1 at ui/impl-trait/example-calendar.rs:562:29: 562:63
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:562:56: 562:61
                                         // + literal: Const { ty: for<'a> fn(&'a NaiveDate) -> u32 {NaiveDate::month}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = month_title(move _5) -> [return: bb5, unwind: bb15]; // scope 1 at ui/impl-trait/example-calendar.rs:562:17: 562:64
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:562:17: 562:28
                                         // + literal: Const { ty: fn(u32) -> String {month_title}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = move _4;                   // scope 2 at ui/impl-trait/example-calendar.rs:564:10: 564:15
        _11 = Option::<String>::Some(move _12); // scope 2 at ui/impl-trait/example-calendar.rs:564:5: 564:16
        _10 = <Option<String> as IntoIterator>::into_iter(move _11) -> [return: bb6, unwind: bb15]; // scope 2 at ui/impl-trait/example-calendar.rs:564:5: 564:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:564:17: 564:26
                                         // + literal: Const { ty: fn(Option<String>) -> <Option<String> as IntoIterator>::IntoIter {<Option<String> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb6: {
        _18 = const true;                // scope 2 at ui/impl-trait/example-calendar.rs:564:27: 564:28
        _19 = const false;               // scope 2 at ui/impl-trait/example-calendar.rs:565:16: 565:26
        _16 = move _2;                   // scope 2 at ui/impl-trait/example-calendar.rs:565:16: 565:26
        _15 = <Peekable<impl DateIterator> as IteratorExt>::__::<fn(Peekable<impl DateIterator>) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {by_week::<Peekable<impl DateIterator>>}, impl Iterator<Item = (u32, impl DateIterator)> + Clone>(move _16, by_week::<Peekable<impl DateIterator>>) -> [return: bb7, unwind: bb13]; // scope 2 at ui/impl-trait/example-calendar.rs:565:16: 565:38
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:565:27: 565:29
                                         // + literal: Const { ty: fn(Peekable<impl DateIterator>, fn(Peekable<impl DateIterator>) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {by_week::<Peekable<impl DateIterator>>}) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {<Peekable<impl DateIterator> as IteratorExt>::__::<fn(Peekable<impl DateIterator>) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {by_week::<Peekable<impl DateIterator>>}, impl Iterator<Item = (u32, impl DateIterator)> + Clone>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:565:30: 565:37
                                         // + literal: Const { ty: fn(Peekable<impl DateIterator>) -> impl Iterator<Item = (u32, impl DateIterator)> + Clone {by_week::<Peekable<impl DateIterator>>}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = <impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::map::<impl DateIterator, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>(move _15, move _17) -> [return: bb8, unwind: bb13]; // scope 2 at ui/impl-trait/example-calendar.rs:565:16: 566:35
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:566:14: 566:17
                                         // + literal: Const { ty: fn(impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]) -> Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]> {<impl Iterator<Item = (u32, impl DateIterator)> + Clone as Iterator>::map::<impl DateIterator, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>}, val: Value(<ZST>) }
    }

    bb8: {
        _13 = <Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]> as IteratorExt>::__::<fn(Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>) -> impl Iterator<Item = String> {format_weeks::<impl DateIterator, Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>>}, impl Iterator<Item = String>>(move _14, format_weeks::<impl DateIterator, Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>>) -> [return: bb9, unwind: bb13]; // scope 2 at ui/impl-trait/example-calendar.rs:565:16: 567:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:567:14: 567:16
                                         // + literal: Const { ty: fn(Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>, fn(Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>) -> impl Iterator<Item = String> {format_weeks::<impl DateIterator, Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>>}) -> impl Iterator<Item = String> {<Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]> as IteratorExt>::__::<fn(Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>) -> impl Iterator<Item = String> {format_weeks::<impl DateIterator, Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>>}, impl Iterator<Item = String>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:567:17: 567:29
                                         // + literal: Const { ty: fn(Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>) -> impl Iterator<Item = String> {format_weeks::<impl DateIterator, Map<impl Iterator<Item = (u32, impl DateIterator)> + Clone, [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29]>>}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = const false;               // scope 2 at ui/impl-trait/example-calendar.rs:564:5: 567:31
        _0 = <std::option::IntoIter<String> as Iterator>::chain::<impl Iterator<Item = String>>(move _10, move _13) -> [return: bb10, unwind: bb13]; // scope 2 at ui/impl-trait/example-calendar.rs:564:5: 567:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:565:10: 565:15
                                         // + literal: Const { ty: fn(std::option::IntoIter<String>, impl Iterator<Item = String>) -> std::iter::Chain<std::option::IntoIter<String>, <impl Iterator<Item = String> as IntoIterator>::IntoIter> {<std::option::IntoIter<String> as Iterator>::chain::<impl Iterator<Item = String>>}, val: Value(<ZST>) }
    }

    bb10: {
        _18 = const false;               // scope 2 at ui/impl-trait/example-calendar.rs:567:30: 567:31
        _19 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:568:1: 568:2
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:568:2: 568:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:560:1: 568:2
    }

    bb12 (cleanup): {
        drop(_10) -> bb15;               // scope 2 at ui/impl-trait/example-calendar.rs:567:30: 567:31
    }

    bb13 (cleanup): {
        switchInt(_18) -> [0: bb15, otherwise: bb12]; // scope 2 at ui/impl-trait/example-calendar.rs:567:30: 567:31
    }

    bb14 (cleanup): {
        drop(_2) -> bb11;                // scope 0 at ui/impl-trait/example-calendar.rs:568:1: 568:2
    }

    bb15 (cleanup): {
        switchInt(_19) -> [0: bb11, otherwise: bb14]; // scope 0 at ui/impl-trait/example-calendar.rs:568:1: 568:2
    }
}

fn format_month::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:566:18: 566:29], _2: (u32, impl DateIterator)) -> impl DateIterator {
    let mut _0: impl DateIterator;       // return place in scope 0 at ui/impl-trait/example-calendar.rs:566:23: 566:27
    scope 1 {
        debug week => _0;                // in scope 1 at ui/impl-trait/example-calendar.rs:566:23: 566:27
    }

    bb0: {
        _0 = move (_2.1: impl DateIterator); // scope 0 at ui/impl-trait/example-calendar.rs:566:23: 566:27
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:566:34: 566:34
    }
}

fn test_format_month() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/example-calendar.rs:570:24: 570:24
    let _1: std::option::Option<std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:571:9: 571:18
    let mut _2: std::option::Option<(u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)>; // in scope 0 at ui/impl-trait/example-calendar.rs:571:21: 572:29
    let mut _3: &mut impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:571:21: 572:29
    let mut _4: impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:571:21: 572:22
    let mut _5: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:571:21: 571:40
    let mut _6: [closure@ui/impl-trait/example-calendar.rs:573:14: 573:25]; // in scope 0 at ui/impl-trait/example-calendar.rs:573:14: 575:24
    let mut _7: (&std::option::Option<&str>, &std::option::Option<&str>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _9: std::option::Option<&str>;   // in scope 0 at ui/impl-trait/example-calendar.rs:578:9: 578:41
    let mut _10: std::option::Option<&std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:578:9: 578:27
    let mut _11: &std::option::Option<std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:578:9: 578:27
    let mut _12: [closure@ui/impl-trait/example-calendar.rs:578:32: 578:35]; // in scope 0 at ui/impl-trait/example-calendar.rs:578:32: 578:40
    let mut _13: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _18: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _19: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _21: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _22: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _23: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _24: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _25: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _26: &std::option::Option<&str>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug month_fmt => _1;           // in scope 1 at ui/impl-trait/example-calendar.rs:571:9: 571:18
        let _14: &std::option::Option<&str>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _15: &std::option::Option<&str>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _28: &std::option::Option<&str>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _14;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _15;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _20: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _20;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _5 = dates_in_year(const 2013_i32) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:571:21: 571:40
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:571:21: 571:34
                                         // + literal: Const { ty: fn(i32) -> impl Iterator<Item = NaiveDate> + Clone {dates_in_year}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>(move _5, by_month::<impl Iterator<Item = NaiveDate> + Clone>) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:571:21: 572:22
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:572:10: 572:12
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone, fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {<impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:572:13: 572:21
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &mut _4;                    // scope 0 at ui/impl-trait/example-calendar.rs:571:21: 572:29
        _2 = <impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::next(move _3) -> bb3; // scope 0 at ui/impl-trait/example-calendar.rs:571:21: 572:29
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:572:23: 572:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone) -> Option<<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::Item> {<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = Option::<(u32, impl Iterator<Item = NaiveDate> + Clone)>::map::<String, [closure@ui/impl-trait/example-calendar.rs:573:14: 573:25]>(move _2, move _6) -> bb4; // scope 0 at ui/impl-trait/example-calendar.rs:571:21: 575:25
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:573:10: 573:13
                                         // + literal: Const { ty: fn(Option<(u32, impl Iterator<Item = NaiveDate> + Clone)>, [closure@ui/impl-trait/example-calendar.rs:573:14: 573:25]) -> Option<String> {Option::<(u32, impl Iterator<Item = NaiveDate> + Clone)>::map::<String, [closure@ui/impl-trait/example-calendar.rs:573:14: 573:25]>}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &_1;                       // scope 1 at ui/impl-trait/example-calendar.rs:578:9: 578:27
        _10 = Option::<String>::as_ref(move _11) -> [return: bb5, unwind: bb11]; // scope 1 at ui/impl-trait/example-calendar.rs:578:9: 578:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:578:19: 578:25
                                         // + literal: Const { ty: for<'a> fn(&'a Option<String>) -> Option<&'a String> {Option::<String>::as_ref}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = Option::<&String>::map::<&str, [closure@ui/impl-trait/example-calendar.rs:578:32: 578:35]>(move _10, move _12) -> [return: bb6, unwind: bb11]; // scope 1 at ui/impl-trait/example-calendar.rs:578:9: 578:41
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:578:28: 578:31
                                         // + literal: Const { ty: fn(Option<&String>, [closure@ui/impl-trait/example-calendar.rs:578:32: 578:35]) -> Option<&str> {Option::<&String>::map::<&str, [closure@ui/impl-trait/example-calendar.rs:578:32: 578:35]>}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = &_9;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _28 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<&str>, val: Unevaluated(test_format_month, [], Some(promoted[0])) }
        _13 = _28;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _13);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _14 = (_7.0: &std::option::Option<&str>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _15 = (_7.1: &std::option::Option<&str>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _18 = _14;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _19 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _17 = <Option<&str> as PartialEq>::eq(move _18, move _19) -> [return: bb7, unwind: bb11]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&str>, &'b Option<&str>) -> bool {<Option<&str> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = Not(move _17);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _16) -> [0: bb9, otherwise: bb8]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _20 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = _14;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = _26;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _21 = core::panicking::assert_failed::<Option<&str>, Option<&str>>(move _22, move _23, move _25, move _27) -> bb11; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&str>, &'b Option<&str>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&str>, Option<&str>>}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_1) -> bb10;                // scope 0 at ui/impl-trait/example-calendar.rs:586:1: 586:2
    }

    bb10: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:586:2: 586:2
    }

    bb11 (cleanup): {
        drop(_1) -> bb12;                // scope 0 at ui/impl-trait/example-calendar.rs:586:1: 586:2
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:570:1: 586:2
    }
}

promoted[0] in test_format_month: &Option<&str> = {
    let mut _0: &std::option::Option<&str>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<&str>; // in scope 0 at ui/impl-trait/example-calendar.rs:579:9: 584:38

    bb0: {
        _1 = Option::<&str>::Some(const "       January       \n        1  2  3  4  5\n  6  7  8  9 10 11 12\n 13 14 15 16 17 18 19\n 20 21 22 23 24 25 26\n 27 28 29 30 31      "); // scope 0 at ui/impl-trait/example-calendar.rs:579:9: 584:38
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:579:14: 584:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn test_format_month::{closure#0}(_1: [closure@ui/impl-trait/example-calendar.rs:573:14: 573:25], _2: (u32, impl Iterator<Item = NaiveDate> + Clone)) -> String {
    let mut _0: std::string::String;     // return place in scope 0 at ui/impl-trait/example-calendar.rs:573:26: 573:26
    let _3: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:573:19: 573:23
    let mut _4: impl std::iter::Iterator<Item = std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:573:26: 574:30
    let mut _5: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:573:26: 573:42
    let mut _6: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:573:26: 573:30
    let mut _7: &str;                    // in scope 0 at ui/impl-trait/example-calendar.rs:575:19: 575:23
    let _8: &str;                        // in scope 0 at ui/impl-trait/example-calendar.rs:575:19: 575:23
    scope 1 {
        debug days => _3;                // in scope 1 at ui/impl-trait/example-calendar.rs:573:19: 573:23
    }

    bb0: {
        _3 = move (_2.1: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone); // scope 0 at ui/impl-trait/example-calendar.rs:573:19: 573:23
        _6 = move _3;                    // scope 1 at ui/impl-trait/example-calendar.rs:573:26: 573:30
        _5 = <impl Iterator<Item = NaiveDate> + Clone as IntoIterator>::into_iter(move _6) -> bb1; // scope 1 at ui/impl-trait/example-calendar.rs:573:26: 573:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:573:31: 573:40
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone) -> <impl Iterator<Item = NaiveDate> + Clone as IntoIterator>::IntoIter {<impl Iterator<Item = NaiveDate> + Clone as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = String> {format_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = String>>(move _5, format_month::<impl Iterator<Item = NaiveDate> + Clone>) -> bb2; // scope 1 at ui/impl-trait/example-calendar.rs:573:26: 574:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:574:14: 574:16
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone, fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = String> {format_month::<impl Iterator<Item = NaiveDate> + Clone>}) -> impl Iterator<Item = String> {<impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = String> {format_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = String>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:574:17: 574:29
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = String> {format_month::<impl Iterator<Item = NaiveDate> + Clone>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const "\n";                 // scope 1 at ui/impl-trait/example-calendar.rs:575:19: 575:23
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:575:19: 575:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/impl-trait/example-calendar.rs:575:19: 575:23
        _0 = <impl Iterator<Item = String> as IteratorExt>::join(move _4, move _7) -> bb3; // scope 1 at ui/impl-trait/example-calendar.rs:573:26: 575:24
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:575:14: 575:18
                                         // + literal: Const { ty: for<'a> fn(impl Iterator<Item = String>, &'a str) -> String {<impl Iterator<Item = String> as IteratorExt>::join}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:575:24: 575:24
    }
}

fn test_format_month::{closure#1}(_1: [closure@ui/impl-trait/example-calendar.rs:578:32: 578:35], _2: &String) -> &str {
    debug s => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:578:33: 578:34
    let mut _0: &str;                    // return place in scope 0 at ui/impl-trait/example-calendar.rs:578:37: 578:40
    let mut _3: &std::string::String;    // in scope 0 at ui/impl-trait/example-calendar.rs:578:38: 578:40

    bb0: {
        _3 = _2;                         // scope 0 at ui/impl-trait/example-calendar.rs:578:38: 578:40
        _0 = <String as Deref>::deref(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:578:37: 578:40
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:578:37: 578:40
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:578:40: 578:40
    }
}

fn format_months(_1: impl Iterator<Item = impl DateIterator>) -> impl Iterator<Item = impl Iterator<Item = String>> {
    debug it => _1;                      // in scope 0 at ui/impl-trait/example-calendar.rs:589:18: 589:20
    let mut _0: impl std::iter::Iterator<Item = impl std::iter::Iterator<Item = std::string::String>>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:590:20: 590:66
    let mut _2: impl Iterator<Item = impl DateIterator>; // in scope 0 at ui/impl-trait/example-calendar.rs:592:5: 592:7

    bb0: {
        _2 = move _1;                    // scope 0 at ui/impl-trait/example-calendar.rs:592:5: 592:7
        _0 = <impl Iterator<Item = impl DateIterator> as Iterator>::map::<impl Iterator<Item = String>, fn(impl DateIterator) -> impl Iterator<Item = String> {format_month::<impl DateIterator>}>(move _2, format_month::<impl DateIterator>) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:592:5: 592:25
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:592:8: 592:11
                                         // + literal: Const { ty: fn(impl Iterator<Item = impl DateIterator>, fn(impl DateIterator) -> impl Iterator<Item = String> {format_month::<impl DateIterator>}) -> Map<impl Iterator<Item = impl DateIterator>, fn(impl DateIterator) -> impl Iterator<Item = String> {format_month::<impl DateIterator>}> {<impl Iterator<Item = impl DateIterator> as Iterator>::map::<impl Iterator<Item = String>, fn(impl DateIterator) -> impl Iterator<Item = String> {format_month::<impl DateIterator>}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:592:12: 592:24
                                         // + literal: Const { ty: fn(impl DateIterator) -> impl Iterator<Item = String> {format_month::<impl DateIterator>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:593:2: 593:2
    }
}

fn PasteBlocks::paste_blocks(_1: Self, _2: usize) -> PasteBlocksIter<<Self as Iterator>::Item> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:599:21: 599:25
    debug sep_width => _2;               // in scope 0 at ui/impl-trait/example-calendar.rs:599:27: 599:36
    let mut _0: PasteBlocksIter<<Self as std::iter::Iterator>::Item>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:599:48: 599:75
    let mut _3: std::vec::Vec<<Self as std::iter::Iterator>::Item>; // in scope 0 at ui/impl-trait/example-calendar.rs:601:20: 601:34
    let mut _4: Self;                    // in scope 0 at ui/impl-trait/example-calendar.rs:601:20: 601:24
    let mut _5: std::vec::Vec<std::option::Option<std::string::String>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
    let mut _6: std::option::Option<std::vec::Vec<usize>>; // in scope 0 at ui/impl-trait/example-calendar.rs:603:25: 603:29
    let mut _7: usize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:604:24: 604:33

    bb0: {
        _4 = move _1;                    // scope 0 at ui/impl-trait/example-calendar.rs:601:20: 601:24
        _3 = <Self as Iterator>::collect::<Vec<<Self as Iterator>::Item>>(move _4) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:601:20: 601:34
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:601:25: 601:32
                                         // + literal: Const { ty: fn(Self) -> Vec<<Self as Iterator>::Item> {<Self as Iterator>::collect::<Vec<<Self as Iterator>::Item>>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = Vec::<Option<String>>::new() -> [return: bb2, unwind: bb3]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<Option<String>> {Vec::<Option<String>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = Option::<Vec<usize>>::None; // scope 0 at ui/impl-trait/example-calendar.rs:603:25: 603:29
        _7 = _2;                         // scope 0 at ui/impl-trait/example-calendar.rs:604:24: 604:33
        _0 = PasteBlocksIter::<<Self as Iterator>::Item> { iters: move _3, cache: move _5, col_widths: move _6, sep_width: move _7 }; // scope 0 at ui/impl-trait/example-calendar.rs:600:9: 605:10
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:606:6: 606:6
    }

    bb3 (cleanup): {
        drop(_3) -> bb4;                 // scope 0 at ui/impl-trait/example-calendar.rs:605:9: 605:10
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:599:5: 606:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:619:1: 619:48>::next(_1: &mut PasteBlocksIter<StrIt>) -> Option<String> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:623:13: 623:22
    let mut _0: std::option::Option<std::string::String>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:623:27: 623:41
    let _2: ();                          // in scope 0 at ui/impl-trait/example-calendar.rs:624:9: 624:27
    let mut _3: &mut std::vec::Vec<std::option::Option<std::string::String>>; // in scope 0 at ui/impl-trait/example-calendar.rs:624:9: 624:27
    let _4: ();                          // in scope 0 at ui/impl-trait/example-calendar.rs:627:9: 627:69
    let mut _5: &mut std::vec::Vec<std::option::Option<std::string::String>>; // in scope 0 at ui/impl-trait/example-calendar.rs:627:9: 627:69
    let mut _6: std::iter::Map<std::slice::IterMut<'_, StrIt>, [closure@ui/impl-trait/example-calendar.rs:627:53: 627:57]>; // in scope 0 at ui/impl-trait/example-calendar.rs:627:27: 627:68
    let mut _7: std::slice::IterMut<'_, StrIt>; // in scope 0 at ui/impl-trait/example-calendar.rs:627:27: 627:48
    let mut _8: &mut [StrIt];            // in scope 0 at ui/impl-trait/example-calendar.rs:627:27: 627:48
    let mut _9: &mut [StrIt];            // in scope 0 at ui/impl-trait/example-calendar.rs:627:27: 627:48
    let mut _10: &mut std::vec::Vec<StrIt>; // in scope 0 at ui/impl-trait/example-calendar.rs:627:27: 627:48
    let mut _11: [closure@ui/impl-trait/example-calendar.rs:627:53: 627:57]; // in scope 0 at ui/impl-trait/example-calendar.rs:627:53: 627:67
    let mut _12: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:630:12: 630:50
    let mut _13: &mut std::slice::Iter<'_, std::option::Option<std::string::String>>; // in scope 0 at ui/impl-trait/example-calendar.rs:630:12: 630:50
    let mut _14: std::slice::Iter<'_, std::option::Option<std::string::String>>; // in scope 0 at ui/impl-trait/example-calendar.rs:630:12: 630:29
    let mut _15: &[std::option::Option<std::string::String>]; // in scope 0 at ui/impl-trait/example-calendar.rs:630:12: 630:29
    let _16: &[std::option::Option<std::string::String>]; // in scope 0 at ui/impl-trait/example-calendar.rs:630:12: 630:29
    let mut _17: &std::vec::Vec<std::option::Option<std::string::String>>; // in scope 0 at ui/impl-trait/example-calendar.rs:630:12: 630:29
    let mut _18: [closure@ui/impl-trait/example-calendar.rs:630:34: 630:37]; // in scope 0 at ui/impl-trait/example-calendar.rs:630:34: 630:49
    let _19: &[usize];                   // in scope 0 at ui/impl-trait/example-calendar.rs:633:13: 633:23
    let mut _20: isize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:634:13: 634:24
    let _21: &std::vec::Vec<usize>;      // in scope 0 at ui/impl-trait/example-calendar.rs:634:18: 634:23
    let _22: &[usize];                   // in scope 0 at ui/impl-trait/example-calendar.rs:634:29: 634:32
    let mut _23: &std::vec::Vec<usize>;  // in scope 0 at ui/impl-trait/example-calendar.rs:634:30: 634:32
    let _24: &[usize];                   // in scope 0 at ui/impl-trait/example-calendar.rs:639:17: 639:53
    let mut _25: std::option::Option<std::vec::Vec<usize>>; // in scope 0 at ui/impl-trait/example-calendar.rs:636:35: 638:32
    let mut _26: std::vec::Vec<usize>;   // in scope 0 at ui/impl-trait/example-calendar.rs:636:40: 638:31
    let mut _27: std::iter::Map<std::slice::Iter<'_, std::option::Option<std::string::String>>, [closure@ui/impl-trait/example-calendar.rs:637:26: 637:30]>; // in scope 0 at ui/impl-trait/example-calendar.rs:636:40: 637:73
    let mut _28: std::slice::Iter<'_, std::option::Option<std::string::String>>; // in scope 0 at ui/impl-trait/example-calendar.rs:636:40: 636:57
    let mut _29: &[std::option::Option<std::string::String>]; // in scope 0 at ui/impl-trait/example-calendar.rs:636:40: 636:57
    let _30: &[std::option::Option<std::string::String>]; // in scope 0 at ui/impl-trait/example-calendar.rs:636:40: 636:57
    let mut _31: &std::vec::Vec<std::option::Option<std::string::String>>; // in scope 0 at ui/impl-trait/example-calendar.rs:636:40: 636:57
    let mut _32: [closure@ui/impl-trait/example-calendar.rs:637:26: 637:30]; // in scope 0 at ui/impl-trait/example-calendar.rs:637:26: 637:72
    let _33: &[usize];                   // in scope 0 at ui/impl-trait/example-calendar.rs:639:18: 639:53
    let mut _34: &std::vec::Vec<usize>;  // in scope 0 at ui/impl-trait/example-calendar.rs:639:19: 639:53
    let _35: &std::vec::Vec<usize>;      // in scope 0 at ui/impl-trait/example-calendar.rs:639:20: 639:53
    let mut _36: std::option::Option<&std::vec::Vec<usize>>; // in scope 0 at ui/impl-trait/example-calendar.rs:639:20: 639:44
    let mut _37: &std::option::Option<std::vec::Vec<usize>>; // in scope 0 at ui/impl-trait/example-calendar.rs:639:20: 639:44
    let mut _39: std::iter::Zip<std::iter::Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, std::option::Option<std::string::String>>>; // in scope 0 at ui/impl-trait/example-calendar.rs:644:25: 644:78
    let mut _40: std::iter::Cloned<std::slice::Iter<'_, usize>>; // in scope 0 at ui/impl-trait/example-calendar.rs:644:25: 644:51
    let mut _41: std::slice::Iter<'_, usize>; // in scope 0 at ui/impl-trait/example-calendar.rs:644:25: 644:42
    let mut _42: &[usize];               // in scope 0 at ui/impl-trait/example-calendar.rs:644:25: 644:42
    let mut _43: std::slice::IterMut<'_, std::option::Option<std::string::String>>; // in scope 0 at ui/impl-trait/example-calendar.rs:644:56: 644:77
    let mut _44: &mut [std::option::Option<std::string::String>]; // in scope 0 at ui/impl-trait/example-calendar.rs:644:56: 644:77
    let mut _45: &mut [std::option::Option<std::string::String>]; // in scope 0 at ui/impl-trait/example-calendar.rs:644:56: 644:77
    let mut _46: &mut std::vec::Vec<std::option::Option<std::string::String>>; // in scope 0 at ui/impl-trait/example-calendar.rs:644:56: 644:77
    let mut _47: [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]; // in scope 0 at ui/impl-trait/example-calendar.rs:645:18: 645:75
    let mut _49: std::option::Option<std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:648:21: 648:33
    let mut _50: &mut std::iter::Map<std::iter::Zip<std::iter::Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, std::option::Option<std::string::String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]>; // in scope 0 at ui/impl-trait/example-calendar.rs:648:21: 648:33
    let mut _51: std::string::String;    // in scope 0 at ui/impl-trait/example-calendar.rs:648:44: 648:57
    let mut _53: std::string::String;    // in scope 0 at ui/impl-trait/example-calendar.rs:650:14: 654:11
    let mut _54: std::iter::Map<std::iter::Zip<std::iter::Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, std::option::Option<std::string::String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]>; // in scope 0 at ui/impl-trait/example-calendar.rs:650:14: 650:19
    let mut _55: std::string::String;    // in scope 0 at ui/impl-trait/example-calendar.rs:650:25: 650:30
    let mut _56: [closure@ui/impl-trait/example-calendar.rs:650:32: 650:49]; // in scope 0 at ui/impl-trait/example-calendar.rs:650:32: 654:10
    let mut _57: &usize;                 // in scope 0 at ui/impl-trait/example-calendar.rs:650:32: 654:10
    let mut _58: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:648:57: 648:58
    scope 1 {
        debug col_widths => _19;         // in scope 1 at ui/impl-trait/example-calendar.rs:633:13: 633:23
        let mut _38: std::iter::Map<std::iter::Zip<std::iter::Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, std::option::Option<std::string::String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]>; // in scope 1 at ui/impl-trait/example-calendar.rs:644:13: 644:22
        scope 3 {
            debug parts => _38;          // in scope 3 at ui/impl-trait/example-calendar.rs:644:13: 644:22
            let _48: std::string::String; // in scope 3 at ui/impl-trait/example-calendar.rs:648:13: 648:18
            scope 4 {
                debug first => _48;      // in scope 4 at ui/impl-trait/example-calendar.rs:648:13: 648:18
                let _52: usize;          // in scope 4 at ui/impl-trait/example-calendar.rs:649:13: 649:22
                scope 5 {
                    debug sep_width => _52; // in scope 5 at ui/impl-trait/example-calendar.rs:649:13: 649:22
                }
            }
        }
    }
    scope 2 {
        debug v => _21;                  // in scope 2 at ui/impl-trait/example-calendar.rs:634:18: 634:23
    }

    bb0: {
        _58 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:624:9: 624:27
        _3 = &mut ((*_1).1: std::vec::Vec<std::option::Option<std::string::String>>); // scope 0 at ui/impl-trait/example-calendar.rs:624:9: 624:27
        _2 = Vec::<Option<String>>::clear(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:624:9: 624:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:624:20: 624:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Option<String>>) {Vec::<Option<String>>::clear}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut ((*_1).1: std::vec::Vec<std::option::Option<std::string::String>>); // scope 0 at ui/impl-trait/example-calendar.rs:627:9: 627:69
        _10 = &mut ((*_1).0: std::vec::Vec<StrIt>); // scope 0 at ui/impl-trait/example-calendar.rs:627:27: 627:48
        _9 = <Vec<StrIt> as DerefMut>::deref_mut(move _10) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:627:27: 627:48
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:627:27: 627:48
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<StrIt>) -> &'a mut <Vec<StrIt> as Deref>::Target {<Vec<StrIt> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &mut (*_9);                 // scope 0 at ui/impl-trait/example-calendar.rs:627:27: 627:48
        _7 = core::slice::<impl [StrIt]>::iter_mut(move _8) -> bb3; // scope 0 at ui/impl-trait/example-calendar.rs:627:27: 627:48
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:627:38: 627:46
                                         // + literal: Const { ty: for<'a> fn(&'a mut [StrIt]) -> std::slice::IterMut<'a, StrIt> {core::slice::<impl [StrIt]>::iter_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = <std::slice::IterMut<'_, StrIt> as Iterator>::map::<Option<String>, [closure@ui/impl-trait/example-calendar.rs:627:53: 627:57]>(move _7, move _11) -> bb4; // scope 0 at ui/impl-trait/example-calendar.rs:627:27: 627:68
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:627:49: 627:52
                                         // + literal: Const { ty: fn(std::slice::IterMut<'_, StrIt>, [closure@ui/impl-trait/example-calendar.rs:627:53: 627:57]) -> Map<std::slice::IterMut<'_, StrIt>, [closure@ui/impl-trait/example-calendar.rs:627:53: 627:57]> {<std::slice::IterMut<'_, StrIt> as Iterator>::map::<Option<String>, [closure@ui/impl-trait/example-calendar.rs:627:53: 627:57]>}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = <Vec<Option<String>> as Extend<Option<String>>>::extend::<Map<std::slice::IterMut<'_, StrIt>, [closure@ui/impl-trait/example-calendar.rs:627:53: 627:57]>>(move _5, move _6) -> bb5; // scope 0 at ui/impl-trait/example-calendar.rs:627:9: 627:69
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:627:20: 627:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Option<String>>, Map<std::slice::IterMut<'_, StrIt>, [closure@ui/impl-trait/example-calendar.rs:627:53: 627:57]>) {<Vec<Option<String>> as Extend<Option<String>>>::extend::<Map<std::slice::IterMut<'_, StrIt>, [closure@ui/impl-trait/example-calendar.rs:627:53: 627:57]>>}, val: Value(<ZST>) }
    }

    bb5: {
        _17 = &((*_1).1: std::vec::Vec<std::option::Option<std::string::String>>); // scope 0 at ui/impl-trait/example-calendar.rs:630:12: 630:29
        _16 = <Vec<Option<String>> as Deref>::deref(move _17) -> bb6; // scope 0 at ui/impl-trait/example-calendar.rs:630:12: 630:29
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:630:12: 630:29
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Option<String>>) -> &'a <Vec<Option<String>> as Deref>::Target {<Vec<Option<String>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = _16;                       // scope 0 at ui/impl-trait/example-calendar.rs:630:12: 630:29
        _14 = core::slice::<impl [Option<String>]>::iter(move _15) -> bb7; // scope 0 at ui/impl-trait/example-calendar.rs:630:12: 630:29
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:630:23: 630:27
                                         // + literal: Const { ty: for<'a> fn(&'a [Option<String>]) -> std::slice::Iter<'a, Option<String>> {core::slice::<impl [Option<String>]>::iter}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = &mut _14;                  // scope 0 at ui/impl-trait/example-calendar.rs:630:12: 630:50
        _12 = <std::slice::Iter<'_, Option<String>> as Iterator>::all::<[closure@ui/impl-trait/example-calendar.rs:630:34: 630:37]>(move _13, move _18) -> bb8; // scope 0 at ui/impl-trait/example-calendar.rs:630:12: 630:50
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:630:30: 630:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, Option<String>>, [closure@ui/impl-trait/example-calendar.rs:630:34: 630:37]) -> bool {<std::slice::Iter<'_, Option<String>> as Iterator>::all::<[closure@ui/impl-trait/example-calendar.rs:630:34: 630:37]>}, val: Value(<ZST>) }
    }

    bb8: {
        switchInt(move _12) -> [0: bb10, otherwise: bb9]; // scope 0 at ui/impl-trait/example-calendar.rs:630:12: 630:50
    }

    bb9: {
        _0 = Option::<String>::None;     // scope 0 at ui/impl-trait/example-calendar.rs:630:60: 630:64
        goto -> bb33;                    // scope 0 at ui/impl-trait/example-calendar.rs:655:6: 655:6
    }

    bb10: {
        _20 = discriminant(((*_1).2: std::option::Option<std::vec::Vec<usize>>)); // scope 0 at ui/impl-trait/example-calendar.rs:633:32: 633:47
        switchInt(move _20) -> [0: bb11, 1: bb13, otherwise: bb12]; // scope 0 at ui/impl-trait/example-calendar.rs:633:26: 633:47
    }

    bb11: {
        _31 = &((*_1).1: std::vec::Vec<std::option::Option<std::string::String>>); // scope 0 at ui/impl-trait/example-calendar.rs:636:40: 636:57
        _30 = <Vec<Option<String>> as Deref>::deref(move _31) -> bb15; // scope 0 at ui/impl-trait/example-calendar.rs:636:40: 636:57
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:636:40: 636:57
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Option<String>>) -> &'a <Vec<Option<String>> as Deref>::Target {<Vec<Option<String>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb12: {
        unreachable;                     // scope 0 at ui/impl-trait/example-calendar.rs:633:32: 633:47
    }

    bb13: {
        _21 = &((((*_1).2: std::option::Option<std::vec::Vec<usize>>) as Some).0: std::vec::Vec<usize>); // scope 0 at ui/impl-trait/example-calendar.rs:634:18: 634:23
        _23 = _21;                       // scope 2 at ui/impl-trait/example-calendar.rs:634:30: 634:32
        _22 = <Vec<usize> as Deref>::deref(move _23) -> bb14; // scope 2 at ui/impl-trait/example-calendar.rs:634:29: 634:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:634:29: 634:32
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<usize>) -> &'a <Vec<usize> as Deref>::Target {<Vec<usize> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb14: {
        _19 = _22;                       // scope 2 at ui/impl-trait/example-calendar.rs:634:28: 634:32
        goto -> bb22;                    // scope 0 at ui/impl-trait/example-calendar.rs:634:31: 634:32
    }

    bb15: {
        _29 = _30;                       // scope 0 at ui/impl-trait/example-calendar.rs:636:40: 636:57
        _28 = core::slice::<impl [Option<String>]>::iter(move _29) -> bb16; // scope 0 at ui/impl-trait/example-calendar.rs:636:40: 636:57
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:636:51: 636:55
                                         // + literal: Const { ty: for<'a> fn(&'a [Option<String>]) -> std::slice::Iter<'a, Option<String>> {core::slice::<impl [Option<String>]>::iter}, val: Value(<ZST>) }
    }

    bb16: {
        _27 = <std::slice::Iter<'_, Option<String>> as Iterator>::map::<usize, [closure@ui/impl-trait/example-calendar.rs:637:26: 637:30]>(move _28, move _32) -> bb17; // scope 0 at ui/impl-trait/example-calendar.rs:636:40: 637:73
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:637:22: 637:25
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, Option<String>>, [closure@ui/impl-trait/example-calendar.rs:637:26: 637:30]) -> Map<std::slice::Iter<'_, Option<String>>, [closure@ui/impl-trait/example-calendar.rs:637:26: 637:30]> {<std::slice::Iter<'_, Option<String>> as Iterator>::map::<usize, [closure@ui/impl-trait/example-calendar.rs:637:26: 637:30]>}, val: Value(<ZST>) }
    }

    bb17: {
        _26 = <Map<std::slice::Iter<'_, Option<String>>, [closure@ui/impl-trait/example-calendar.rs:637:26: 637:30]> as Iterator>::collect::<Vec<usize>>(move _27) -> bb18; // scope 0 at ui/impl-trait/example-calendar.rs:636:40: 638:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:638:22: 638:29
                                         // + literal: Const { ty: fn(Map<std::slice::Iter<'_, Option<String>>, [closure@ui/impl-trait/example-calendar.rs:637:26: 637:30]>) -> Vec<usize> {<Map<std::slice::Iter<'_, Option<String>>, [closure@ui/impl-trait/example-calendar.rs:637:26: 637:30]> as Iterator>::collect::<Vec<usize>>}, val: Value(<ZST>) }
    }

    bb18: {
        _25 = Option::<Vec<usize>>::Some(move _26); // scope 0 at ui/impl-trait/example-calendar.rs:636:35: 638:32
        drop(((*_1).2: std::option::Option<std::vec::Vec<usize>>)) -> [return: bb36, unwind: bb35]; // scope 0 at ui/impl-trait/example-calendar.rs:636:17: 636:32
    }

    bb19: {
        _35 = Option::<&Vec<usize>>::unwrap(move _36) -> bb20; // scope 0 at ui/impl-trait/example-calendar.rs:639:20: 639:53
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:639:45: 639:51
                                         // + literal: Const { ty: fn(Option<&Vec<usize>>) -> &Vec<usize> {Option::<&Vec<usize>>::unwrap}, val: Value(<ZST>) }
    }

    bb20: {
        _34 = _35;                       // scope 0 at ui/impl-trait/example-calendar.rs:639:19: 639:53
        _33 = <Vec<usize> as Deref>::deref(move _34) -> bb21; // scope 0 at ui/impl-trait/example-calendar.rs:639:18: 639:53
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:639:18: 639:53
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<usize>) -> &'a <Vec<usize> as Deref>::Target {<Vec<usize> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb21: {
        _24 = _33;                       // scope 0 at ui/impl-trait/example-calendar.rs:639:17: 639:53
        _19 = _24;                       // scope 0 at ui/impl-trait/example-calendar.rs:639:17: 639:53
        goto -> bb22;                    // scope 0 at ui/impl-trait/example-calendar.rs:640:13: 640:14
    }

    bb22: {
        _42 = _19;                       // scope 1 at ui/impl-trait/example-calendar.rs:644:25: 644:42
        _41 = core::slice::<impl [usize]>::iter(move _42) -> bb23; // scope 1 at ui/impl-trait/example-calendar.rs:644:25: 644:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:644:36: 644:40
                                         // + literal: Const { ty: for<'a> fn(&'a [usize]) -> std::slice::Iter<'a, usize> {core::slice::<impl [usize]>::iter}, val: Value(<ZST>) }
    }

    bb23: {
        _40 = <std::slice::Iter<'_, usize> as Iterator>::cloned::<'_, usize>(move _41) -> bb24; // scope 1 at ui/impl-trait/example-calendar.rs:644:25: 644:51
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:644:43: 644:49
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, usize>) -> Cloned<std::slice::Iter<'_, usize>> {<std::slice::Iter<'_, usize> as Iterator>::cloned::<'_, usize>}, val: Value(<ZST>) }
    }

    bb24: {
        _46 = &mut ((*_1).1: std::vec::Vec<std::option::Option<std::string::String>>); // scope 1 at ui/impl-trait/example-calendar.rs:644:56: 644:77
        _45 = <Vec<Option<String>> as DerefMut>::deref_mut(move _46) -> bb25; // scope 1 at ui/impl-trait/example-calendar.rs:644:56: 644:77
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:644:56: 644:77
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Option<String>>) -> &'a mut <Vec<Option<String>> as Deref>::Target {<Vec<Option<String>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb25: {
        _44 = &mut (*_45);               // scope 1 at ui/impl-trait/example-calendar.rs:644:56: 644:77
        _43 = core::slice::<impl [Option<String>]>::iter_mut(move _44) -> bb26; // scope 1 at ui/impl-trait/example-calendar.rs:644:56: 644:77
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:644:67: 644:75
                                         // + literal: Const { ty: for<'a> fn(&'a mut [Option<String>]) -> std::slice::IterMut<'a, Option<String>> {core::slice::<impl [Option<String>]>::iter_mut}, val: Value(<ZST>) }
    }

    bb26: {
        _39 = <Cloned<std::slice::Iter<'_, usize>> as Iterator>::zip::<std::slice::IterMut<'_, Option<String>>>(move _40, move _43) -> bb27; // scope 1 at ui/impl-trait/example-calendar.rs:644:25: 644:78
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:644:52: 644:55
                                         // + literal: Const { ty: fn(Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, Option<String>>) -> Zip<Cloned<std::slice::Iter<'_, usize>>, <std::slice::IterMut<'_, Option<String>> as IntoIterator>::IntoIter> {<Cloned<std::slice::Iter<'_, usize>> as Iterator>::zip::<std::slice::IterMut<'_, Option<String>>>}, val: Value(<ZST>) }
    }

    bb27: {
        _38 = <Zip<Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, Option<String>>> as Iterator>::map::<String, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]>(move _39, move _47) -> bb28; // scope 1 at ui/impl-trait/example-calendar.rs:644:25: 645:76
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:645:14: 645:17
                                         // + literal: Const { ty: fn(Zip<Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, Option<String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]) -> Map<Zip<Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, Option<String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]> {<Zip<Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, Option<String>>> as Iterator>::map::<String, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]>}, val: Value(<ZST>) }
    }

    bb28: {
        _50 = &mut _38;                  // scope 3 at ui/impl-trait/example-calendar.rs:648:21: 648:33
        _58 = const true;                // scope 3 at ui/impl-trait/example-calendar.rs:648:21: 648:33
        _49 = <Map<Zip<Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, Option<String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]> as Iterator>::next(move _50) -> bb29; // scope 3 at ui/impl-trait/example-calendar.rs:648:21: 648:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:648:27: 648:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut Map<Zip<Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, Option<String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]>) -> Option<<Map<Zip<Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, Option<String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]> as Iterator>::Item> {<Map<Zip<Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, Option<String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb29: {
        _51 = String::new() -> [return: bb30, unwind: bb38]; // scope 3 at ui/impl-trait/example-calendar.rs:648:44: 648:57
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:648:44: 648:55
                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(<ZST>) }
    }

    bb30: {
        _58 = const false;               // scope 3 at ui/impl-trait/example-calendar.rs:648:21: 648:58
        _48 = Option::<String>::unwrap_or(move _49, move _51) -> [return: bb31, unwind: bb38]; // scope 3 at ui/impl-trait/example-calendar.rs:648:21: 648:58
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:648:34: 648:43
                                         // + literal: Const { ty: fn(Option<String>, String) -> String {Option::<String>::unwrap_or}, val: Value(<ZST>) }
    }

    bb31: {
        _58 = const false;               // scope 3 at ui/impl-trait/example-calendar.rs:648:57: 648:58
        _52 = ((*_1).3: usize);          // scope 4 at ui/impl-trait/example-calendar.rs:649:25: 649:39
        _54 = move _38;                  // scope 5 at ui/impl-trait/example-calendar.rs:650:14: 650:19
        _55 = move _48;                  // scope 5 at ui/impl-trait/example-calendar.rs:650:25: 650:30
        _57 = &_52;                      // scope 5 at ui/impl-trait/example-calendar.rs:650:32: 654:10
        _56 = [closure@ui/impl-trait/example-calendar.rs:650:32: 650:49] { sep_width: move _57 }; // scope 5 at ui/impl-trait/example-calendar.rs:650:32: 654:10
                                         // closure
                                         // + def_id: DefId(0:129 ~ example_calendar[ac49]::{impl#10}::next::{closure#4})
                                         // + substs: [
                                         //     StrIt,
                                         //     i16,
                                         //     extern "rust-call" fn((std::string::String, std::string::String)) -> std::string::String,
                                         //     (&usize,),
                                         // ]
        _53 = <Map<Zip<Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, Option<String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]> as Iterator>::fold::<String, [closure@ui/impl-trait/example-calendar.rs:650:32: 650:49]>(move _54, move _55, move _56) -> bb32; // scope 5 at ui/impl-trait/example-calendar.rs:650:14: 654:11
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:650:20: 650:24
                                         // + literal: Const { ty: fn(Map<Zip<Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, Option<String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]>, String, [closure@ui/impl-trait/example-calendar.rs:650:32: 650:49]) -> String {<Map<Zip<Cloned<std::slice::Iter<'_, usize>>, std::slice::IterMut<'_, Option<String>>>, [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26]> as Iterator>::fold::<String, [closure@ui/impl-trait/example-calendar.rs:650:32: 650:49]>}, val: Value(<ZST>) }
    }

    bb32: {
        _0 = Option::<String>::Some(move _53); // scope 5 at ui/impl-trait/example-calendar.rs:650:9: 654:12
        goto -> bb33;                    // scope 0 at ui/impl-trait/example-calendar.rs:655:6: 655:6
    }

    bb33: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:655:6: 655:6
    }

    bb34 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:623:5: 655:6
    }

    bb35 (cleanup): {
        ((*_1).2: std::option::Option<std::vec::Vec<usize>>) = move _25; // scope 0 at ui/impl-trait/example-calendar.rs:636:17: 636:32
        goto -> bb34;                    // scope 0 at ui/impl-trait/example-calendar.rs:636:17: 636:32
    }

    bb36: {
        ((*_1).2: std::option::Option<std::vec::Vec<usize>>) = move _25; // scope 0 at ui/impl-trait/example-calendar.rs:636:17: 636:32
        _37 = &((*_1).2: std::option::Option<std::vec::Vec<usize>>); // scope 0 at ui/impl-trait/example-calendar.rs:639:20: 639:44
        _36 = Option::<Vec<usize>>::as_ref(move _37) -> bb19; // scope 0 at ui/impl-trait/example-calendar.rs:639:20: 639:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:639:36: 639:42
                                         // + literal: Const { ty: for<'a> fn(&'a Option<Vec<usize>>) -> Option<&'a Vec<usize>> {Option::<Vec<usize>>::as_ref}, val: Value(<ZST>) }
    }

    bb37 (cleanup): {
        drop(_49) -> bb34;               // scope 3 at ui/impl-trait/example-calendar.rs:648:57: 648:58
    }

    bb38 (cleanup): {
        switchInt(_58) -> [0: bb34, otherwise: bb37]; // scope 3 at ui/impl-trait/example-calendar.rs:648:57: 648:58
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:619:1: 619:48>::next::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:627:53: 627:57], _2: &mut StrIt) -> Option<String> {
    debug it => _2;                      // in scope 0 at ui/impl-trait/example-calendar.rs:627:54: 627:56
    let mut _0: std::option::Option<std::string::String>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:627:58: 627:58
    let mut _3: &mut StrIt;              // in scope 0 at ui/impl-trait/example-calendar.rs:627:58: 627:67

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/impl-trait/example-calendar.rs:627:58: 627:67
        _0 = <StrIt as Iterator>::next(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:627:58: 627:67
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:627:61: 627:65
                                         // + literal: Const { ty: for<'a> fn(&'a mut StrIt) -> Option<<StrIt as Iterator>::Item> {<StrIt as Iterator>::next}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:627:67: 627:67
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:619:1: 619:48>::next::{closure#1}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:630:34: 630:37], _2: &Option<String>) -> bool {
    debug e => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:630:35: 630:36
    let mut _0: bool;                    // return place in scope 0 at ui/impl-trait/example-calendar.rs:630:38: 630:38
    let mut _3: &std::option::Option<std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:630:38: 630:49

    bb0: {
        _3 = _2;                         // scope 0 at ui/impl-trait/example-calendar.rs:630:38: 630:49
        _0 = Option::<String>::is_none(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:630:38: 630:49
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:630:40: 630:47
                                         // + literal: Const { ty: for<'a> fn(&'a Option<String>) -> bool {Option::<String>::is_none}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:630:49: 630:49
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:619:1: 619:48>::next::{closure#2}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:637:26: 637:30], _2: &Option<String>) -> usize {
    debug ms => _2;                      // in scope 0 at ui/impl-trait/example-calendar.rs:637:27: 637:29
    let mut _0: usize;                   // return place in scope 0 at ui/impl-trait/example-calendar.rs:637:31: 637:31
    let mut _3: std::option::Option<usize>; // in scope 0 at ui/impl-trait/example-calendar.rs:637:31: 637:59
    let mut _4: std::option::Option<&std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:637:31: 637:42
    let mut _5: &std::option::Option<std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:637:31: 637:42
    let mut _6: [closure@ui/impl-trait/example-calendar.rs:637:47: 637:50]; // in scope 0 at ui/impl-trait/example-calendar.rs:637:47: 637:58

    bb0: {
        _5 = _2;                         // scope 0 at ui/impl-trait/example-calendar.rs:637:31: 637:42
        _4 = Option::<String>::as_ref(move _5) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:637:31: 637:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:637:34: 637:40
                                         // + literal: Const { ty: for<'a> fn(&'a Option<String>) -> Option<&'a String> {Option::<String>::as_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Option::<&String>::map::<usize, [closure@ui/impl-trait/example-calendar.rs:637:47: 637:50]>(move _4, move _6) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:637:31: 637:59
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:637:43: 637:46
                                         // + literal: Const { ty: fn(Option<&String>, [closure@ui/impl-trait/example-calendar.rs:637:47: 637:50]) -> Option<usize> {Option::<&String>::map::<usize, [closure@ui/impl-trait/example-calendar.rs:637:47: 637:50]>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Option::<usize>::unwrap_or(move _3, const 0_usize) -> bb3; // scope 0 at ui/impl-trait/example-calendar.rs:637:31: 637:72
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:637:60: 637:69
                                         // + literal: Const { ty: fn(Option<usize>, usize) -> usize {Option::<usize>::unwrap_or}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:637:72: 637:72
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:619:1: 619:48>::next::{closure#2}::{closure#0}(_1: [closure@ui/impl-trait/example-calendar.rs:637:47: 637:50], _2: &String) -> usize {
    debug s => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:637:48: 637:49
    let mut _0: usize;                   // return place in scope 0 at ui/impl-trait/example-calendar.rs:637:51: 637:51
    let mut _3: &std::string::String;    // in scope 0 at ui/impl-trait/example-calendar.rs:637:51: 637:58

    bb0: {
        _3 = _2;                         // scope 0 at ui/impl-trait/example-calendar.rs:637:51: 637:58
        _0 = String::len(move _3) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:637:51: 637:58
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:637:53: 637:56
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> usize {String::len}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:637:58: 637:58
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:619:1: 619:48>::next::{closure#3}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:645:18: 645:26], _2: (usize, &mut Option<String>)) -> String {
    let mut _0: std::string::String;     // return place in scope 0 at ui/impl-trait/example-calendar.rs:645:27: 645:27
    let _3: usize;                       // in scope 0 at ui/impl-trait/example-calendar.rs:645:20: 645:21
    let _4: &mut std::option::Option<std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:645:22: 645:24
    let mut _5: std::option::Option<std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:645:27: 645:36
    let mut _6: &mut std::option::Option<std::string::String>; // in scope 0 at ui/impl-trait/example-calendar.rs:645:27: 645:36
    let mut _7: [closure@ui/impl-trait/example-calendar.rs:645:52: 645:54]; // in scope 0 at ui/impl-trait/example-calendar.rs:645:52: 645:74
    let mut _8: &usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:645:52: 645:74
    scope 1 {
        debug w => _3;                   // in scope 1 at ui/impl-trait/example-calendar.rs:645:20: 645:21
        debug ms => _4;                  // in scope 1 at ui/impl-trait/example-calendar.rs:645:22: 645:24
    }

    bb0: {
        _3 = (_2.0: usize);              // scope 0 at ui/impl-trait/example-calendar.rs:645:20: 645:21
        _4 = move (_2.1: &mut std::option::Option<std::string::String>); // scope 0 at ui/impl-trait/example-calendar.rs:645:22: 645:24
        _6 = &mut (*_4);                 // scope 1 at ui/impl-trait/example-calendar.rs:645:27: 645:36
        _5 = Option::<String>::take(move _6) -> bb1; // scope 1 at ui/impl-trait/example-calendar.rs:645:27: 645:36
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:645:30: 645:34
                                         // + literal: Const { ty: for<'a> fn(&'a mut Option<String>) -> Option<String> {Option::<String>::take}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_3;                        // scope 1 at ui/impl-trait/example-calendar.rs:645:52: 645:74
        _7 = [closure@ui/impl-trait/example-calendar.rs:645:52: 645:54] { w: move _8 }; // scope 1 at ui/impl-trait/example-calendar.rs:645:52: 645:74
                                         // closure
                                         // + def_id: DefId(0:128 ~ example_calendar[ac49]::{impl#10}::next::{closure#3}::{closure#0})
                                         // + substs: [
                                         //     StrIt,
                                         //     i32,
                                         //     extern "rust-call" fn(()) -> std::string::String,
                                         //     (&usize,),
                                         // ]
        _0 = Option::<String>::unwrap_or_else::<[closure@ui/impl-trait/example-calendar.rs:645:52: 645:54]>(move _5, move _7) -> bb2; // scope 1 at ui/impl-trait/example-calendar.rs:645:27: 645:75
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:645:37: 645:51
                                         // + literal: Const { ty: fn(Option<String>, [closure@ui/impl-trait/example-calendar.rs:645:52: 645:54]) -> String {Option::<String>::unwrap_or_else::<[closure@ui/impl-trait/example-calendar.rs:645:52: 645:54]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:645:75: 645:75
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:619:1: 619:48>::next::{closure#3}::{closure#0}(_1: [closure@ui/impl-trait/example-calendar.rs:645:52: 645:54]) -> String {
    debug w => (*(_1.0: &usize));        // in scope 0 at ui/impl-trait/example-calendar.rs:645:20: 645:21
    let mut _0: std::string::String;     // return place in scope 0 at ui/impl-trait/example-calendar.rs:645:55: 645:55
    let mut _2: std::iter::Take<std::iter::Repeat<char>>; // in scope 0 at ui/impl-trait/example-calendar.rs:645:55: 645:64
    let mut _3: usize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:645:62: 645:63
    let mut _4: &usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:645:52: 645:74

    bb0: {
        _4 = deref_copy (_1.0: &usize);  // scope 0 at ui/impl-trait/example-calendar.rs:645:62: 645:63
        _3 = (*_4);                      // scope 0 at ui/impl-trait/example-calendar.rs:645:62: 645:63
        _2 = spaces(move _3) -> bb1;     // scope 0 at ui/impl-trait/example-calendar.rs:645:55: 645:64
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:645:55: 645:61
                                         // + literal: Const { ty: fn(usize) -> std::iter::Take<std::iter::Repeat<char>> {spaces}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <std::iter::Take<std::iter::Repeat<char>> as Iterator>::collect::<String>(move _2) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:645:55: 645:74
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:645:65: 645:72
                                         // + literal: Const { ty: fn(std::iter::Take<std::iter::Repeat<char>>) -> String {<std::iter::Take<std::iter::Repeat<char>> as Iterator>::collect::<String>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:645:74: 645:74
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:619:1: 619:48>::next::{closure#4}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:650:32: 650:49], _2: String, _3: String) -> String {
    debug accum => _2;                   // in scope 0 at ui/impl-trait/example-calendar.rs:650:33: 650:42
    debug next => _3;                    // in scope 0 at ui/impl-trait/example-calendar.rs:650:44: 650:48
    debug sep_width => (*((*_1).0: &usize)); // in scope 0 at ui/impl-trait/example-calendar.rs:649:13: 649:22
    let mut _0: std::string::String;     // return place in scope 0 at ui/impl-trait/example-calendar.rs:650:50: 650:50
    let _4: ();                          // in scope 0 at ui/impl-trait/example-calendar.rs:651:13: 651:44
    let mut _5: &mut std::string::String; // in scope 0 at ui/impl-trait/example-calendar.rs:651:13: 651:44
    let mut _6: std::iter::Take<std::iter::Repeat<char>>; // in scope 0 at ui/impl-trait/example-calendar.rs:651:26: 651:43
    let mut _7: usize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:651:33: 651:42
    let _8: ();                          // in scope 0 at ui/impl-trait/example-calendar.rs:652:13: 652:34
    let mut _9: &mut std::string::String; // in scope 0 at ui/impl-trait/example-calendar.rs:652:13: 652:34
    let mut _10: &str;                   // in scope 0 at ui/impl-trait/example-calendar.rs:652:28: 652:33
    let _11: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:652:28: 652:33
    let mut _12: &std::string::String;   // in scope 0 at ui/impl-trait/example-calendar.rs:652:28: 652:33
    let _13: &std::string::String;       // in scope 0 at ui/impl-trait/example-calendar.rs:652:28: 652:33
    let mut _14: &usize;                 // in scope 0 at ui/impl-trait/example-calendar.rs:650:32: 654:10
    let mut _15: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:654:9: 654:10

    bb0: {
        _15 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:651:13: 651:44
        _15 = const true;                // scope 0 at ui/impl-trait/example-calendar.rs:651:13: 651:44
        _5 = &mut _2;                    // scope 0 at ui/impl-trait/example-calendar.rs:651:13: 651:44
        _14 = deref_copy ((*_1).0: &usize); // scope 0 at ui/impl-trait/example-calendar.rs:651:33: 651:42
        _7 = (*_14);                     // scope 0 at ui/impl-trait/example-calendar.rs:651:33: 651:42
        _6 = spaces(move _7) -> [return: bb1, unwind: bb6]; // scope 0 at ui/impl-trait/example-calendar.rs:651:26: 651:43
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:651:26: 651:32
                                         // + literal: Const { ty: fn(usize) -> std::iter::Take<std::iter::Repeat<char>> {spaces}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <String as Extend<char>>::extend::<std::iter::Take<std::iter::Repeat<char>>>(move _5, move _6) -> [return: bb2, unwind: bb6]; // scope 0 at ui/impl-trait/example-calendar.rs:651:13: 651:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:651:19: 651:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut String, std::iter::Take<std::iter::Repeat<char>>) {<String as Extend<char>>::extend::<std::iter::Take<std::iter::Repeat<char>>>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &mut _2;                    // scope 0 at ui/impl-trait/example-calendar.rs:652:13: 652:34
        _13 = &_3;                       // scope 0 at ui/impl-trait/example-calendar.rs:652:28: 652:33
        _12 = _13;                       // scope 0 at ui/impl-trait/example-calendar.rs:652:28: 652:33
        _11 = <String as Deref>::deref(move _12) -> [return: bb3, unwind: bb6]; // scope 0 at ui/impl-trait/example-calendar.rs:652:28: 652:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:652:28: 652:33
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = _11;                       // scope 0 at ui/impl-trait/example-calendar.rs:652:28: 652:33
        _8 = String::push_str(move _9, move _10) -> [return: bb4, unwind: bb6]; // scope 0 at ui/impl-trait/example-calendar.rs:652:13: 652:34
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:652:19: 652:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, &'b str) {String::push_str}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:653:13: 653:18
        _0 = move _2;                    // scope 0 at ui/impl-trait/example-calendar.rs:653:13: 653:18
        drop(_3) -> [return: bb5, unwind: bb9]; // scope 0 at ui/impl-trait/example-calendar.rs:654:9: 654:10
    }

    bb5: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:654:10: 654:10
    }

    bb6 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at ui/impl-trait/example-calendar.rs:654:9: 654:10
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:650:32: 654:10
    }

    bb8 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/impl-trait/example-calendar.rs:654:9: 654:10
    }

    bb9 (cleanup): {
        switchInt(_15) -> [0: bb7, otherwise: bb8]; // scope 0 at ui/impl-trait/example-calendar.rs:654:9: 654:10
    }
}

fn test_paste_blocks() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/example-calendar.rs:658:24: 658:24
    let _1: std::string::String;         // in scope 0 at ui/impl-trait/example-calendar.rs:659:9: 659:12
    let mut _2: PasteBlocksIter<impl std::iter::Iterator<Item = std::string::String>>; // in scope 0 at ui/impl-trait/example-calendar.rs:659:15: 663:25
    let mut _3: impl std::iter::Iterator<Item = impl std::iter::Iterator<Item = std::string::String>>; // in scope 0 at ui/impl-trait/example-calendar.rs:659:15: 662:27
    let mut _4: std::iter::Take<std::iter::Map<impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>>; // in scope 0 at ui/impl-trait/example-calendar.rs:659:15: 661:17
    let mut _5: std::iter::Map<impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>; // in scope 0 at ui/impl-trait/example-calendar.rs:659:15: 660:44
    let mut _6: impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:659:15: 660:22
    let mut _7: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:659:15: 659:34
    let mut _8: [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]; // in scope 0 at ui/impl-trait/example-calendar.rs:660:27: 660:43
    let mut _9: &str;                    // in scope 0 at ui/impl-trait/example-calendar.rs:664:15: 664:19
    let _10: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:664:15: 664:19
    let mut _11: (&&str, &&str);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _12: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _13: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:666:9: 666:14
    let _14: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:666:10: 666:14
    let mut _15: &std::string::String;   // in scope 0 at ui/impl-trait/example-calendar.rs:666:11: 666:14
    let mut _16: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _20: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _21: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _22: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _24: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _25: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _26: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _27: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _28: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _29: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug row => _1;                 // in scope 1 at ui/impl-trait/example-calendar.rs:659:9: 659:12
        let _17: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _18: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _31: &&str;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _17;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _18;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _23: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _23;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _7 = dates_in_year(const 2013_i32) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:659:15: 659:34
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:659:15: 659:28
                                         // + literal: Const { ty: fn(i32) -> impl Iterator<Item = NaiveDate> + Clone {dates_in_year}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>(move _7, by_month::<impl Iterator<Item = NaiveDate> + Clone>) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:659:15: 660:22
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:660:10: 660:12
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone, fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {<impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:660:13: 660:21
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = <impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::map::<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>(move _6, move _8) -> bb3; // scope 0 at ui/impl-trait/example-calendar.rs:659:15: 660:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:660:23: 660:26
                                         // + literal: Const { ty: fn(impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]) -> Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]> {<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::map::<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = <Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]> as Iterator>::take(move _5, const 3_usize) -> bb4; // scope 0 at ui/impl-trait/example-calendar.rs:659:15: 661:17
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:661:10: 661:14
                                         // + literal: Const { ty: fn(Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>, usize) -> std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>> {<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]> as Iterator>::take}, val: Value(<ZST>) }
    }

    bb4: {
        _3 = <std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>> as IteratorExt>::__::<fn(std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>>) -> impl Iterator<Item = impl Iterator<Item = String>> {format_months::<impl Iterator<Item = NaiveDate> + Clone, std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>>>}, impl Iterator<Item = impl Iterator<Item = String>>>(move _4, format_months::<impl Iterator<Item = NaiveDate> + Clone, std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>>>) -> bb5; // scope 0 at ui/impl-trait/example-calendar.rs:659:15: 662:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:662:10: 662:12
                                         // + literal: Const { ty: fn(std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>>, fn(std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>>) -> impl Iterator<Item = impl Iterator<Item = String>> {format_months::<impl Iterator<Item = NaiveDate> + Clone, std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>>>}) -> impl Iterator<Item = impl Iterator<Item = String>> {<std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>> as IteratorExt>::__::<fn(std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>>) -> impl Iterator<Item = impl Iterator<Item = String>> {format_months::<impl Iterator<Item = NaiveDate> + Clone, std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>>>}, impl Iterator<Item = impl Iterator<Item = String>>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:662:13: 662:26
                                         // + literal: Const { ty: fn(std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>>) -> impl Iterator<Item = impl Iterator<Item = String>> {format_months::<impl Iterator<Item = NaiveDate> + Clone, std::iter::Take<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38]>>>}, val: Value(<ZST>) }
    }

    bb5: {
        _2 = <impl Iterator<Item = impl Iterator<Item = String>> as PasteBlocks>::paste_blocks(move _3, const 1_usize) -> bb6; // scope 0 at ui/impl-trait/example-calendar.rs:659:15: 663:25
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:663:10: 663:22
                                         // + literal: Const { ty: fn(impl Iterator<Item = impl Iterator<Item = String>>, usize) -> PasteBlocksIter<<impl Iterator<Item = impl Iterator<Item = String>> as Iterator>::Item> {<impl Iterator<Item = impl Iterator<Item = String>> as PasteBlocks>::paste_blocks}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = const "\n";                // scope 0 at ui/impl-trait/example-calendar.rs:664:15: 664:19
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:664:15: 664:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = _10;                        // scope 0 at ui/impl-trait/example-calendar.rs:664:15: 664:19
        _1 = <PasteBlocksIter<impl Iterator<Item = String>> as IteratorExt>::join(move _2, move _9) -> bb7; // scope 0 at ui/impl-trait/example-calendar.rs:659:15: 664:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:664:10: 664:14
                                         // + literal: Const { ty: for<'a> fn(PasteBlocksIter<impl Iterator<Item = String>>, &'a str) -> String {<PasteBlocksIter<impl Iterator<Item = String>> as IteratorExt>::join}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = &_1;                       // scope 1 at ui/impl-trait/example-calendar.rs:666:11: 666:14
        _14 = <String as Deref>::deref(move _15) -> [return: bb8, unwind: bb13]; // scope 1 at ui/impl-trait/example-calendar.rs:666:10: 666:14
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:666:10: 666:14
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _13 = _14;                       // scope 1 at ui/impl-trait/example-calendar.rs:666:9: 666:14
        _12 = &_13;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _31 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(test_paste_blocks, [], Some(promoted[0])) }
        _16 = _31;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _11 = (move _12, move _16);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _17 = (_11.0: &&str);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _18 = (_11.1: &&str);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _21 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _22 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _20 = <&str as PartialEq>::eq(move _21, move _22) -> [return: bb9, unwind: bb13]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = Not(move _20);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _19) -> [0: bb11, otherwise: bb10]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _23 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _25 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _27 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _27;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _29 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _28 = _29;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _30 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _24 = core::panicking::assert_failed::<&str, &str>(move _25, move _26, move _28, move _30) -> bb13; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_1) -> bb12;                // scope 0 at ui/impl-trait/example-calendar.rs:675:1: 675:2
    }

    bb12: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:675:2: 675:2
    }

    bb13 (cleanup): {
        drop(_1) -> bb14;                // scope 0 at ui/impl-trait/example-calendar.rs:675:1: 675:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:658:1: 675:2
    }
}

promoted[0] in test_paste_blocks: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/impl-trait/example-calendar.rs:667:9: 673:76

    bb0: {
        _1 = const "       January              February                March        \n        1  2  3  4  5                  1  2                  1  2\n  6  7  8  9 10 11 12   3  4  5  6  7  8  9   3  4  5  6  7  8  9\n 13 14 15 16 17 18 19  10 11 12 13 14 15 16  10 11 12 13 14 15 16\n 20 21 22 23 24 25 26  17 18 19 20 21 22 23  17 18 19 20 21 22 23\n 27 28 29 30 31        24 25 26 27 28        24 25 26 27 28 29 30\n                                             31                  "; // scope 0 at ui/impl-trait/example-calendar.rs:667:9: 673:76
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:667:9: 673:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn test_paste_blocks::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:660:27: 660:38], _2: (u32, impl Iterator<Item = NaiveDate> + Clone)) -> impl Iterator<Item = NaiveDate> + Clone {
    let mut _0: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // return place in scope 0 at ui/impl-trait/example-calendar.rs:660:32: 660:36
    scope 1 {
        debug days => _0;                // in scope 1 at ui/impl-trait/example-calendar.rs:660:32: 660:36
    }

    bb0: {
        _0 = move (_2.1: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone); // scope 0 at ui/impl-trait/example-calendar.rs:660:32: 660:36
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:660:43: 660:43
    }
}

fn Chunks::chunks(_1: Self, _2: usize) -> ChunksIter<Self> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:679:15: 679:19
    debug n => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:679:21: 679:22
    let mut _0: ChunksIter<Self>;        // return place in scope 0 at ui/impl-trait/example-calendar.rs:679:34: 679:50
    let mut _3: bool;                    // in scope 0 at ui/impl-trait/example-calendar.rs:680:9: 680:23
    let mut _4: bool;                    // in scope 0 at ui/impl-trait/example-calendar.rs:680:17: 680:22
    let mut _5: usize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:680:17: 680:18
    let mut _6: !;                       // in scope 0 at ui/impl-trait/example-calendar.rs:680:9: 680:23
    let mut _7: Self;                    // in scope 0 at ui/impl-trait/example-calendar.rs:682:17: 682:21
    let mut _8: usize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:683:16: 683:17

    bb0: {
        _5 = _2;                         // scope 0 at ui/impl-trait/example-calendar.rs:680:17: 680:18
        _4 = Gt(move _5, const 0_usize); // scope 0 at ui/impl-trait/example-calendar.rs:680:17: 680:22
        _3 = Not(move _4);               // scope 0 at ui/impl-trait/example-calendar.rs:680:9: 680:23
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/impl-trait/example-calendar.rs:680:9: 680:23
    }

    bb1: {
        _6 = core::panicking::panic(const "assertion failed: n > 0") -> bb3; // scope 0 at ui/impl-trait/example-calendar.rs:680:9: 680:23
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:680:9: 680:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _7 = move _1;                    // scope 0 at ui/impl-trait/example-calendar.rs:682:17: 682:21
        _8 = _2;                         // scope 0 at ui/impl-trait/example-calendar.rs:683:16: 683:17
        _0 = ChunksIter::<Self> { it: move _7, n: move _8 }; // scope 0 at ui/impl-trait/example-calendar.rs:681:9: 684:10
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:685:6: 685:6
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/impl-trait/example-calendar.rs:685:5: 685:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:679:5: 685:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:702:1: 702:37>::next(_1: &mut ChunksIter<It>) -> Option<Vec<<It as Iterator>::Item>> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:706:13: 706:22
    let mut _0: std::option::Option<std::vec::Vec<<It as std::iter::Iterator>::Item>>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:706:27: 706:48
    let _2: <It as std::iter::Iterator>::Item; // in scope 0 at ui/impl-trait/example-calendar.rs:707:13: 707:18
    let mut _3: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, <It as std::iter::Iterator>::Item>; // in scope 0 at ui/impl-trait/example-calendar.rs:707:21: 707:36
    let mut _4: std::option::Option<<It as std::iter::Iterator>::Item>; // in scope 0 at ui/impl-trait/example-calendar.rs:707:21: 707:35
    let mut _5: &mut It;                 // in scope 0 at ui/impl-trait/example-calendar.rs:707:21: 707:35
    let mut _6: isize;                   // in scope 0 at ui/impl-trait/example-calendar.rs:707:35: 707:36
    let _7: std::option::Option<std::convert::Infallible>; // in scope 0 at ui/impl-trait/example-calendar.rs:707:35: 707:36
    let mut _8: std::option::Option<std::convert::Infallible>; // in scope 0 at ui/impl-trait/example-calendar.rs:707:35: 707:36
    let _9: <It as std::iter::Iterator>::Item; // in scope 0 at ui/impl-trait/example-calendar.rs:707:21: 707:36
    let mut _11: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:709:45: 709:51
    let _12: ();                         // in scope 0 at ui/impl-trait/example-calendar.rs:710:9: 710:27
    let mut _13: &mut std::vec::Vec<<It as std::iter::Iterator>::Item>; // in scope 0 at ui/impl-trait/example-calendar.rs:710:9: 710:27
    let mut _14: <It as std::iter::Iterator>::Item; // in scope 0 at ui/impl-trait/example-calendar.rs:710:21: 710:26
    let mut _15: std::vec::Vec<<It as std::iter::Iterator>::Item>; // in scope 0 at ui/impl-trait/example-calendar.rs:712:14: 713:67
    let mut _16: std::iter::Take<&mut It>; // in scope 0 at ui/impl-trait/example-calendar.rs:712:14: 712:43
    let mut _17: &mut It;                // in scope 0 at ui/impl-trait/example-calendar.rs:712:14: 712:43
    let mut _18: &mut It;                // in scope 0 at ui/impl-trait/example-calendar.rs:712:14: 712:28
    let mut _19: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:712:34: 712:42
    let mut _20: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:712:34: 712:40
    let mut _21: (usize, bool);          // in scope 0 at ui/impl-trait/example-calendar.rs:712:34: 712:42
    let mut _22: std::vec::Vec<<It as std::iter::Iterator>::Item>; // in scope 0 at ui/impl-trait/example-calendar.rs:713:19: 713:25
    let mut _23: [closure@ui/impl-trait/example-calendar.rs:713:27: 713:42]; // in scope 0 at ui/impl-trait/example-calendar.rs:713:27: 713:66
    let mut _24: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:714:5: 714:6
    let mut _25: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:714:5: 714:6
    scope 1 {
        debug first => _2;               // in scope 1 at ui/impl-trait/example-calendar.rs:707:13: 707:18
        let mut _10: std::vec::Vec<<It as std::iter::Iterator>::Item>; // in scope 1 at ui/impl-trait/example-calendar.rs:709:13: 709:23
        scope 6 {
            debug result => _10;         // in scope 6 at ui/impl-trait/example-calendar.rs:709:13: 709:23
        }
    }
    scope 2 {
        debug residual => _7;            // in scope 2 at ui/impl-trait/example-calendar.rs:707:35: 707:36
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;                 // in scope 4 at ui/impl-trait/example-calendar.rs:707:21: 707:36
        scope 5 {
        }
    }

    bb0: {
        _25 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:707:13: 707:18
        _24 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:707:13: 707:18
        _5 = &mut ((*_1).0: It);         // scope 0 at ui/impl-trait/example-calendar.rs:707:21: 707:35
        _4 = <It as Iterator>::next(move _5) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:707:21: 707:35
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:707:29: 707:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut It) -> Option<<It as Iterator>::Item> {<It as Iterator>::next}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Option<<It as Iterator>::Item> as Try>::branch(move _4) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:707:21: 707:36
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:707:21: 707:36
                                         // + literal: Const { ty: fn(Option<<It as Iterator>::Item>) -> ControlFlow<<Option<<It as Iterator>::Item> as Try>::Residual, <Option<<It as Iterator>::Item> as Try>::Output> {<Option<<It as Iterator>::Item> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_3);           // scope 0 at ui/impl-trait/example-calendar.rs:707:21: 707:36
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at ui/impl-trait/example-calendar.rs:707:21: 707:36
    }

    bb3: {
        _9 = move ((_3 as Continue).0: <It as std::iter::Iterator>::Item); // scope 0 at ui/impl-trait/example-calendar.rs:707:21: 707:36
        _25 = const true;                // scope 5 at ui/impl-trait/example-calendar.rs:707:21: 707:36
        _2 = move _9;                    // scope 5 at ui/impl-trait/example-calendar.rs:707:21: 707:36
        _11 = ((*_1).1: usize);          // scope 1 at ui/impl-trait/example-calendar.rs:709:45: 709:51
        _10 = Vec::<<It as Iterator>::Item>::with_capacity(move _11) -> [return: bb7, unwind: bb17]; // scope 1 at ui/impl-trait/example-calendar.rs:709:26: 709:52
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:709:26: 709:44
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> Vec<<It as Iterator>::Item> {Vec::<<It as Iterator>::Item>::with_capacity}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at ui/impl-trait/example-calendar.rs:707:21: 707:36
    }

    bb5: {
        _0 = <Option<Vec<<It as Iterator>::Item>> as FromResidual<Option<Infallible>>>::from_residual(move _8) -> bb6; // scope 3 at ui/impl-trait/example-calendar.rs:707:21: 707:36
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:707:35: 707:36
                                         // + literal: Const { ty: fn(Option<Infallible>) -> Option<Vec<<It as Iterator>::Item>> {<Option<Vec<<It as Iterator>::Item>> as FromResidual<Option<Infallible>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _25 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:714:5: 714:6
        goto -> bb12;                    // scope 0 at ui/impl-trait/example-calendar.rs:714:6: 714:6
    }

    bb7: {
        _24 = const true;                // scope 1 at ui/impl-trait/example-calendar.rs:709:51: 709:52
        _13 = &mut _10;                  // scope 6 at ui/impl-trait/example-calendar.rs:710:9: 710:27
        _25 = const false;               // scope 6 at ui/impl-trait/example-calendar.rs:710:21: 710:26
        _14 = move _2;                   // scope 6 at ui/impl-trait/example-calendar.rs:710:21: 710:26
        _12 = Vec::<<It as Iterator>::Item>::push(move _13, move _14) -> [return: bb8, unwind: bb15]; // scope 6 at ui/impl-trait/example-calendar.rs:710:9: 710:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:710:16: 710:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<<It as Iterator>::Item>, <It as Iterator>::Item) {Vec::<<It as Iterator>::Item>::push}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = &mut ((*_1).0: It);        // scope 6 at ui/impl-trait/example-calendar.rs:712:14: 712:28
        _17 = &mut (*_18);               // scope 6 at ui/impl-trait/example-calendar.rs:712:14: 712:43
        _20 = ((*_1).1: usize);          // scope 6 at ui/impl-trait/example-calendar.rs:712:34: 712:40
        _21 = CheckedSub(_20, const 1_usize); // scope 6 at ui/impl-trait/example-calendar.rs:712:34: 712:42
        assert(!move (_21.1: bool), "attempt to compute `{} - {}`, which would overflow", move _20, const 1_usize) -> [success: bb9, unwind: bb15]; // scope 6 at ui/impl-trait/example-calendar.rs:712:34: 712:42
    }

    bb9: {
        _19 = move (_21.0: usize);       // scope 6 at ui/impl-trait/example-calendar.rs:712:34: 712:42
        _16 = <&mut It as Iterator>::take(move _17, move _19) -> [return: bb10, unwind: bb15]; // scope 6 at ui/impl-trait/example-calendar.rs:712:14: 712:43
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:712:29: 712:33
                                         // + literal: Const { ty: fn(&mut It, usize) -> std::iter::Take<&mut It> {<&mut It as Iterator>::take}, val: Value(<ZST>) }
    }

    bb10: {
        _24 = const false;               // scope 6 at ui/impl-trait/example-calendar.rs:713:19: 713:25
        _22 = move _10;                  // scope 6 at ui/impl-trait/example-calendar.rs:713:19: 713:25
        _15 = <std::iter::Take<&mut It> as Iterator>::fold::<Vec<<It as Iterator>::Item>, [closure@ui/impl-trait/example-calendar.rs:713:27: 713:42]>(move _16, move _22, move _23) -> [return: bb11, unwind: bb15]; // scope 6 at ui/impl-trait/example-calendar.rs:712:14: 713:67
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:713:14: 713:18
                                         // + literal: Const { ty: fn(std::iter::Take<&mut It>, Vec<<It as Iterator>::Item>, [closure@ui/impl-trait/example-calendar.rs:713:27: 713:42]) -> Vec<<It as Iterator>::Item> {<std::iter::Take<&mut It> as Iterator>::fold::<Vec<<It as Iterator>::Item>, [closure@ui/impl-trait/example-calendar.rs:713:27: 713:42]>}, val: Value(<ZST>) }
    }

    bb11: {
        _0 = Option::<Vec<<It as Iterator>::Item>>::Some(move _15); // scope 6 at ui/impl-trait/example-calendar.rs:712:9: 713:68
        _24 = const false;               // scope 1 at ui/impl-trait/example-calendar.rs:714:5: 714:6
        _25 = const false;               // scope 0 at ui/impl-trait/example-calendar.rs:714:5: 714:6
        goto -> bb12;                    // scope 0 at ui/impl-trait/example-calendar.rs:714:6: 714:6
    }

    bb12: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:714:6: 714:6
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:706:5: 714:6
    }

    bb14 (cleanup): {
        drop(_10) -> bb17;               // scope 1 at ui/impl-trait/example-calendar.rs:714:5: 714:6
    }

    bb15 (cleanup): {
        switchInt(_24) -> [0: bb17, otherwise: bb14]; // scope 1 at ui/impl-trait/example-calendar.rs:714:5: 714:6
    }

    bb16 (cleanup): {
        drop(_2) -> bb13;                // scope 0 at ui/impl-trait/example-calendar.rs:714:5: 714:6
    }

    bb17 (cleanup): {
        switchInt(_25) -> [0: bb13, otherwise: bb16]; // scope 0 at ui/impl-trait/example-calendar.rs:714:5: 714:6
    }
}

fn <impl at ui/impl-trait/example-calendar.rs:702:1: 702:37>::next::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:713:27: 713:42], _2: Vec<<It as Iterator>::Item>, _3: <It as Iterator>::Item) -> Vec<<It as Iterator>::Item> {
    debug acc => _2;                     // in scope 0 at ui/impl-trait/example-calendar.rs:713:28: 713:35
    debug next => _3;                    // in scope 0 at ui/impl-trait/example-calendar.rs:713:37: 713:41
    let mut _0: std::vec::Vec<<It as std::iter::Iterator>::Item>; // return place in scope 0 at ui/impl-trait/example-calendar.rs:713:43: 713:43
    let _4: ();                          // in scope 0 at ui/impl-trait/example-calendar.rs:713:45: 713:59
    let mut _5: &mut std::vec::Vec<<It as std::iter::Iterator>::Item>; // in scope 0 at ui/impl-trait/example-calendar.rs:713:45: 713:59
    let mut _6: <It as std::iter::Iterator>::Item; // in scope 0 at ui/impl-trait/example-calendar.rs:713:54: 713:58

    bb0: {
        _5 = &mut _2;                    // scope 0 at ui/impl-trait/example-calendar.rs:713:45: 713:59
        _6 = move _3;                    // scope 0 at ui/impl-trait/example-calendar.rs:713:54: 713:58
        _4 = Vec::<<It as Iterator>::Item>::push(move _5, move _6) -> [return: bb1, unwind: bb2]; // scope 0 at ui/impl-trait/example-calendar.rs:713:45: 713:59
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:713:49: 713:53
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<<It as Iterator>::Item>, <It as Iterator>::Item) {Vec::<<It as Iterator>::Item>::push}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _2;                    // scope 0 at ui/impl-trait/example-calendar.rs:713:61: 713:64
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:713:66: 713:66
    }

    bb2 (cleanup): {
        drop(_2) -> bb3;                 // scope 0 at ui/impl-trait/example-calendar.rs:713:65: 713:66
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:713:27: 713:66
    }
}

fn test_chunks() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/example-calendar.rs:717:18: 717:18
    let _1: &[i32; 7];                   // in scope 0 at ui/impl-trait/example-calendar.rs:718:9: 718:10
    let mut _3: ChunksIter<std::iter::Cloned<std::slice::Iter<'_, i32>>>; // in scope 0 at ui/impl-trait/example-calendar.rs:719:13: 719:40
    let mut _4: std::iter::Cloned<std::slice::Iter<'_, i32>>; // in scope 0 at ui/impl-trait/example-calendar.rs:719:13: 719:30
    let mut _5: std::slice::Iter<'_, i32>; // in scope 0 at ui/impl-trait/example-calendar.rs:719:13: 719:21
    let mut _6: &[i32];                  // in scope 0 at ui/impl-trait/example-calendar.rs:719:13: 719:21
    let mut _7: &[i32; 7];               // in scope 0 at ui/impl-trait/example-calendar.rs:719:13: 719:21
    let mut _8: (&&[std::vec::Vec<i32>], &&[std::vec::Vec<i32>; 3]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &&[std::vec::Vec<i32>];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _10: &[std::vec::Vec<i32>];      // in scope 0 at ui/impl-trait/example-calendar.rs:720:16: 720:19
    let _11: &[std::vec::Vec<i32>];      // in scope 0 at ui/impl-trait/example-calendar.rs:720:17: 720:19
    let mut _12: &std::vec::Vec<std::vec::Vec<i32>>; // in scope 0 at ui/impl-trait/example-calendar.rs:720:18: 720:19
    let mut _13: &&[std::vec::Vec<i32>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _14: &[std::vec::Vec<i32>; 3];   // in scope 0 at ui/impl-trait/example-calendar.rs:720:21: 720:61
    let _15: [std::vec::Vec<i32>; 3];    // in scope 0 at ui/impl-trait/example-calendar.rs:720:22: 720:61
    let mut _16: std::vec::Vec<i32>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _17: std::boxed::Box<[i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _18: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _19: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _20: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _21: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _22: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _23: std::vec::Vec<i32>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _24: std::boxed::Box<[i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _25: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _26: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _27: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _28: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _29: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _30: std::vec::Vec<i32>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _31: std::boxed::Box<[i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _32: std::boxed::Box<[i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _33: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _34: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _35: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _36: std::boxed::Box<[i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _39: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _40: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _41: &&[std::vec::Vec<i32>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _42: &&[std::vec::Vec<i32>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _44: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _45: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _46: &&[std::vec::Vec<i32>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _47: &&[std::vec::Vec<i32>];     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _48: &&[std::vec::Vec<i32>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _49: &&[std::vec::Vec<i32>; 3];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _51: &[i32; 7];              // in scope 0 at ui/impl-trait/example-calendar.rs:718:13: 718:35
    let mut _52: *const [i32; 3];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _53: *const [i32; 3];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _54: *const [i32; 1];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug r => _1;                   // in scope 1 at ui/impl-trait/example-calendar.rs:718:9: 718:10
        let _2: std::vec::Vec<std::vec::Vec<i32>>; // in scope 1 at ui/impl-trait/example-calendar.rs:719:9: 719:10
        scope 2 {
            debug c => _2;               // in scope 2 at ui/impl-trait/example-calendar.rs:719:9: 719:10
            let _37: &&[std::vec::Vec<i32>]; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _38: &&[std::vec::Vec<i32>; 3]; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
            }
            scope 4 {
            }
            scope 5 {
            }
            scope 6 {
                debug left_val => _37;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _38;  // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _43: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 7 {
                    debug kind => _43;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _51 = const _;                   // scope 0 at ui/impl-trait/example-calendar.rs:718:13: 718:35
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:718:13: 718:35
                                         // + literal: Const { ty: &[i32; 7], val: Unevaluated(test_chunks, [], Some(promoted[0])) }
        _1 = _51;                        // scope 0 at ui/impl-trait/example-calendar.rs:718:13: 718:35
        _7 = _1;                         // scope 1 at ui/impl-trait/example-calendar.rs:719:13: 719:21
        _6 = move _7 as &[i32] (Pointer(Unsize)); // scope 1 at ui/impl-trait/example-calendar.rs:719:13: 719:21
        _5 = core::slice::<impl [i32]>::iter(move _6) -> bb1; // scope 1 at ui/impl-trait/example-calendar.rs:719:13: 719:21
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:719:15: 719:19
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> std::slice::Iter<'a, i32> {core::slice::<impl [i32]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <std::slice::Iter<'_, i32> as Iterator>::cloned::<'_, i32>(move _5) -> bb2; // scope 1 at ui/impl-trait/example-calendar.rs:719:13: 719:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:719:22: 719:28
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, i32>) -> Cloned<std::slice::Iter<'_, i32>> {<std::slice::Iter<'_, i32> as Iterator>::cloned::<'_, i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <Cloned<std::slice::Iter<'_, i32>> as Chunks>::chunks(move _4, const 3_usize) -> bb3; // scope 1 at ui/impl-trait/example-calendar.rs:719:13: 719:40
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:719:31: 719:37
                                         // + literal: Const { ty: fn(Cloned<std::slice::Iter<'_, i32>>, usize) -> ChunksIter<Cloned<std::slice::Iter<'_, i32>>> {<Cloned<std::slice::Iter<'_, i32>> as Chunks>::chunks}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = <ChunksIter<Cloned<std::slice::Iter<'_, i32>>> as Iterator>::collect::<Vec<Vec<i32>>>(move _3) -> bb4; // scope 1 at ui/impl-trait/example-calendar.rs:719:13: 719:60
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:719:41: 719:48
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(ChunksIter<Cloned<std::slice::Iter<'_, i32>>>) -> Vec<Vec<i32>> {<ChunksIter<Cloned<std::slice::Iter<'_, i32>>> as Iterator>::collect::<Vec<Vec<i32>>>}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = &_2;                       // scope 2 at ui/impl-trait/example-calendar.rs:720:18: 720:19
        _11 = <Vec<Vec<i32>> as Deref>::deref(move _12) -> [return: bb5, unwind: bb20]; // scope 2 at ui/impl-trait/example-calendar.rs:720:17: 720:19
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:720:17: 720:19
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Vec<i32>>) -> &'a <Vec<Vec<i32>> as Deref>::Target {<Vec<Vec<i32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = _11;                       // scope 2 at ui/impl-trait/example-calendar.rs:720:16: 720:19
        _9 = &_10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const 12_usize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _20 = const 4_usize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _21 = alloc::alloc::exchange_malloc(move _19, move _20) -> [return: bb6, unwind: bb20]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb6: {
        _22 = ShallowInitBox(move _21, [i32; 3]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _52 = (((_22.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_52) = [const 1_i32, const 2_i32, const 3_i32]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _18 = move _22;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _17 = move _18 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _16 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _17) -> [return: bb7, unwind: bb20]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb7: {
        _26 = const 12_usize;            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _27 = const 4_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _28 = alloc::alloc::exchange_malloc(move _26, move _27) -> [return: bb8, unwind: bb19]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb8: {
        _29 = ShallowInitBox(move _28, [i32; 3]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _53 = (((_29.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_53) = [const 4_i32, const 5_i32, const 6_i32]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _25 = move _29;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _24 = move _25 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _23 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _24) -> [return: bb9, unwind: bb19]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb9: {
        _33 = const 4_usize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _34 = const 4_usize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _35 = alloc::alloc::exchange_malloc(move _33, move _34) -> [return: bb10, unwind: bb18]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb10: {
        _36 = ShallowInitBox(move _35, [i32; 1]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _54 = (((_36.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_54) = [const 7_i32];          // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _32 = move _36;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _31 = move _32 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _30 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _31) -> [return: bb11, unwind: bb18]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb11: {
        _15 = [move _16, move _23, move _30]; // scope 2 at ui/impl-trait/example-calendar.rs:720:22: 720:61
        _14 = &_15;                      // scope 2 at ui/impl-trait/example-calendar.rs:720:21: 720:61
        _13 = &_14;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _13);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _37 = (_8.0: &&[std::vec::Vec<i32>]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _38 = (_8.1: &&[std::vec::Vec<i32>; 3]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _41 = _37;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _42 = _38;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _40 = <&[Vec<i32>] as PartialEq<&[Vec<i32>; 3]>>::eq(move _41, move _42) -> [return: bb12, unwind: bb17]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[Vec<i32>], &'b &[Vec<i32>; 3]) -> bool {<&[Vec<i32>] as PartialEq<&[Vec<i32>; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        _39 = Not(move _40);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _39) -> [0: bb14, otherwise: bb13]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _43 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _47 = _37;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _47;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _49 = _38;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = _49;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _50 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _44 = core::panicking::assert_failed::<&[Vec<i32>], &[Vec<i32>; 3]>(move _45, move _46, move _48, move _50) -> bb17; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[Vec<i32>], &'b &[Vec<i32>; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[Vec<i32>], &[Vec<i32>; 3]>}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_15) -> [return: bb15, unwind: bb20]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb15: {
        drop(_2) -> bb16;                // scope 1 at ui/impl-trait/example-calendar.rs:721:1: 721:2
    }

    bb16: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:721:2: 721:2
    }

    bb17 (cleanup): {
        drop(_15) -> bb20;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb18 (cleanup): {
        drop(_23) -> bb19;               // scope 2 at ui/impl-trait/example-calendar.rs:720:60: 720:61
    }

    bb19 (cleanup): {
        drop(_16) -> bb20;               // scope 2 at ui/impl-trait/example-calendar.rs:720:60: 720:61
    }

    bb20 (cleanup): {
        drop(_2) -> bb21;                // scope 1 at ui/impl-trait/example-calendar.rs:721:1: 721:2
    }

    bb21 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:717:1: 721:2
    }
}

promoted[0] in test_chunks: &[i32; 7] = {
    let mut _0: &[i32; 7];               // return place in scope 0 at ui/impl-trait/example-calendar.rs:718:13: 718:35
    let mut _1: [i32; 7];                // in scope 0 at ui/impl-trait/example-calendar.rs:718:14: 718:35

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32, const 7_i32]; // scope 0 at ui/impl-trait/example-calendar.rs:718:14: 718:35
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:718:13: 718:35
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:718:13: 718:35
    }
}

fn format_year(_1: i32, _2: usize) -> String {
    debug year => _1;                    // in scope 0 at ui/impl-trait/example-calendar.rs:724:16: 724:20
    debug months_per_row => _2;          // in scope 0 at ui/impl-trait/example-calendar.rs:724:27: 724:41
    let mut _0: std::string::String;     // return place in scope 0 at ui/impl-trait/example-calendar.rs:724:53: 724:59
    let mut _3: std::iter::Map<ChunksIter<std::iter::Map<impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>>, [closure@ui/impl-trait/example-calendar.rs:737:14: 737:17]>; // in scope 0 at ui/impl-trait/example-calendar.rs:728:5: 744:10
    let mut _4: ChunksIter<std::iter::Map<impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>>; // in scope 0 at ui/impl-trait/example-calendar.rs:728:5: 734:32
    let mut _5: std::iter::Map<impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>; // in scope 0 at ui/impl-trait/example-calendar.rs:728:5: 731:44
    let mut _6: impl std::iter::Iterator<Item = (u32, impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone)> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:728:5: 731:22
    let mut _7: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // in scope 0 at ui/impl-trait/example-calendar.rs:728:5: 728:24
    let mut _8: i32;                     // in scope 0 at ui/impl-trait/example-calendar.rs:728:19: 728:23
    let mut _9: [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]; // in scope 0 at ui/impl-trait/example-calendar.rs:731:27: 731:43
    let mut _10: usize;                  // in scope 0 at ui/impl-trait/example-calendar.rs:734:17: 734:31
    let mut _11: [closure@ui/impl-trait/example-calendar.rs:737:14: 737:17]; // in scope 0 at ui/impl-trait/example-calendar.rs:737:14: 743:24
    let mut _12: &str;                   // in scope 0 at ui/impl-trait/example-calendar.rs:747:15: 747:21
    let _13: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:747:15: 747:21

    bb0: {
        _8 = _1;                         // scope 0 at ui/impl-trait/example-calendar.rs:728:19: 728:23
        _7 = dates_in_year(move _8) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:728:5: 728:24
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:728:5: 728:18
                                         // + literal: Const { ty: fn(i32) -> impl Iterator<Item = NaiveDate> + Clone {dates_in_year}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = <impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>(move _7, by_month::<impl Iterator<Item = NaiveDate> + Clone>) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:728:5: 731:22
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:731:10: 731:12
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone, fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {<impl Iterator<Item = NaiveDate> + Clone as IteratorExt>::__::<fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:731:13: 731:21
                                         // + literal: Const { ty: fn(impl Iterator<Item = NaiveDate> + Clone) -> impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone {by_month::<impl Iterator<Item = NaiveDate> + Clone>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = <impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::map::<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>(move _6, move _9) -> bb3; // scope 0 at ui/impl-trait/example-calendar.rs:728:5: 731:44
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:731:23: 731:26
                                         // + literal: Const { ty: fn(impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]) -> Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]> {<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone as Iterator>::map::<impl Iterator<Item = NaiveDate> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = _2;                        // scope 0 at ui/impl-trait/example-calendar.rs:734:17: 734:31
        _4 = <Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]> as Chunks>::chunks(move _5, move _10) -> bb4; // scope 0 at ui/impl-trait/example-calendar.rs:728:5: 734:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:734:10: 734:16
                                         // + literal: Const { ty: fn(Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>, usize) -> ChunksIter<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>> {<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]> as Chunks>::chunks}, val: Value(<ZST>) }
    }

    bb4: {
        _3 = <ChunksIter<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>> as Iterator>::map::<String, [closure@ui/impl-trait/example-calendar.rs:737:14: 737:17]>(move _4, move _11) -> bb5; // scope 0 at ui/impl-trait/example-calendar.rs:728:5: 744:10
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:737:10: 737:13
                                         // + literal: Const { ty: fn(ChunksIter<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>>, [closure@ui/impl-trait/example-calendar.rs:737:14: 737:17]) -> Map<ChunksIter<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>>, [closure@ui/impl-trait/example-calendar.rs:737:14: 737:17]> {<ChunksIter<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>> as Iterator>::map::<String, [closure@ui/impl-trait/example-calendar.rs:737:14: 737:17]>}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = const "\n\n";              // scope 0 at ui/impl-trait/example-calendar.rs:747:15: 747:21
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:747:15: 747:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 0 at ui/impl-trait/example-calendar.rs:747:15: 747:21
        _0 = <Map<ChunksIter<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>>, [closure@ui/impl-trait/example-calendar.rs:737:14: 737:17]> as IteratorExt>::join(move _3, move _12) -> bb6; // scope 0 at ui/impl-trait/example-calendar.rs:728:5: 747:22
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:747:10: 747:14
                                         // + literal: Const { ty: for<'a> fn(Map<ChunksIter<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>>, [closure@ui/impl-trait/example-calendar.rs:737:14: 737:17]>, &'a str) -> String {<Map<ChunksIter<Map<impl Iterator<Item = (u32, impl Iterator<Item = NaiveDate> + Clone)> + Clone, [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38]>>, [closure@ui/impl-trait/example-calendar.rs:737:14: 737:17]> as IteratorExt>::join}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:748:2: 748:2
    }
}

const COL_SPACING: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-trait/example-calendar.rs:725:24: 725:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/impl-trait/example-calendar.rs:725:32: 725:33
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:725:5: 725:34
    }
}

fn format_year::{closure#0}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:731:27: 731:38], _2: (u32, impl Iterator<Item = NaiveDate> + Clone)) -> impl Iterator<Item = NaiveDate> + Clone {
    let mut _0: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone; // return place in scope 0 at ui/impl-trait/example-calendar.rs:731:32: 731:36
    scope 1 {
        debug days => _0;                // in scope 1 at ui/impl-trait/example-calendar.rs:731:32: 731:36
    }

    bb0: {
        _0 = move (_2.1: impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone); // scope 0 at ui/impl-trait/example-calendar.rs:731:32: 731:36
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:731:43: 731:43
    }
}

fn format_year::{closure#1}(_1: &mut [closure@ui/impl-trait/example-calendar.rs:737:14: 737:17], _2: Vec<impl Iterator<Item = NaiveDate> + Clone>) -> String {
    debug r => _2;                       // in scope 0 at ui/impl-trait/example-calendar.rs:737:15: 737:16
    let mut _0: std::string::String;     // return place in scope 0 at ui/impl-trait/example-calendar.rs:737:18: 737:18
    let mut _3: PasteBlocksIter<impl std::iter::Iterator<Item = std::string::String>>; // in scope 0 at ui/impl-trait/example-calendar.rs:737:18: 742:39
    let mut _4: impl std::iter::Iterator<Item = impl std::iter::Iterator<Item = std::string::String>>; // in scope 0 at ui/impl-trait/example-calendar.rs:737:18: 739:31
    let mut _5: std::vec::IntoIter<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone>; // in scope 0 at ui/impl-trait/example-calendar.rs:737:18: 737:31
    let mut _6: std::vec::Vec<impl std::iter::Iterator<Item = NaiveDate> + std::clone::Clone>; // in scope 0 at ui/impl-trait/example-calendar.rs:737:18: 737:19
    let mut _7: &str;                    // in scope 0 at ui/impl-trait/example-calendar.rs:743:19: 743:23
    let _8: &str;                        // in scope 0 at ui/impl-trait/example-calendar.rs:743:19: 743:23

    bb0: {
        _6 = move _2;                    // scope 0 at ui/impl-trait/example-calendar.rs:737:18: 737:19
        _5 = <Vec<impl Iterator<Item = NaiveDate> + Clone> as IntoIterator>::into_iter(move _6) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:737:18: 737:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:737:20: 737:29
                                         // + literal: Const { ty: fn(Vec<impl Iterator<Item = NaiveDate> + Clone>) -> <Vec<impl Iterator<Item = NaiveDate> + Clone> as IntoIterator>::IntoIter {<Vec<impl Iterator<Item = NaiveDate> + Clone> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <std::vec::IntoIter<impl Iterator<Item = NaiveDate> + Clone> as IteratorExt>::__::<fn(std::vec::IntoIter<impl Iterator<Item = NaiveDate> + Clone>) -> impl Iterator<Item = impl Iterator<Item = String>> {format_months::<impl Iterator<Item = NaiveDate> + Clone, std::vec::IntoIter<impl Iterator<Item = NaiveDate> + Clone>>}, impl Iterator<Item = impl Iterator<Item = String>>>(move _5, format_months::<impl Iterator<Item = NaiveDate> + Clone, std::vec::IntoIter<impl Iterator<Item = NaiveDate> + Clone>>) -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:737:18: 739:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:739:14: 739:16
                                         // + literal: Const { ty: fn(std::vec::IntoIter<impl Iterator<Item = NaiveDate> + Clone>, fn(std::vec::IntoIter<impl Iterator<Item = NaiveDate> + Clone>) -> impl Iterator<Item = impl Iterator<Item = String>> {format_months::<impl Iterator<Item = NaiveDate> + Clone, std::vec::IntoIter<impl Iterator<Item = NaiveDate> + Clone>>}) -> impl Iterator<Item = impl Iterator<Item = String>> {<std::vec::IntoIter<impl Iterator<Item = NaiveDate> + Clone> as IteratorExt>::__::<fn(std::vec::IntoIter<impl Iterator<Item = NaiveDate> + Clone>) -> impl Iterator<Item = impl Iterator<Item = String>> {format_months::<impl Iterator<Item = NaiveDate> + Clone, std::vec::IntoIter<impl Iterator<Item = NaiveDate> + Clone>>}, impl Iterator<Item = impl Iterator<Item = String>>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:739:17: 739:30
                                         // + literal: Const { ty: fn(std::vec::IntoIter<impl Iterator<Item = NaiveDate> + Clone>) -> impl Iterator<Item = impl Iterator<Item = String>> {format_months::<impl Iterator<Item = NaiveDate> + Clone, std::vec::IntoIter<impl Iterator<Item = NaiveDate> + Clone>>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <impl Iterator<Item = impl Iterator<Item = String>> as PasteBlocks>::paste_blocks(move _4, const _) -> bb3; // scope 0 at ui/impl-trait/example-calendar.rs:737:18: 742:39
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:742:14: 742:26
                                         // + literal: Const { ty: fn(impl Iterator<Item = impl Iterator<Item = String>>, usize) -> PasteBlocksIter<<impl Iterator<Item = impl Iterator<Item = String>> as Iterator>::Item> {<impl Iterator<Item = impl Iterator<Item = String>> as PasteBlocks>::paste_blocks}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = const "\n";                 // scope 0 at ui/impl-trait/example-calendar.rs:743:19: 743:23
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:743:19: 743:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 0 at ui/impl-trait/example-calendar.rs:743:19: 743:23
        _0 = <PasteBlocksIter<impl Iterator<Item = String>> as IteratorExt>::join(move _3, move _7) -> bb4; // scope 0 at ui/impl-trait/example-calendar.rs:737:18: 743:24
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:743:14: 743:18
                                         // + literal: Const { ty: for<'a> fn(PasteBlocksIter<impl Iterator<Item = String>>, &'a str) -> String {<PasteBlocksIter<impl Iterator<Item = String>> as IteratorExt>::join}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:743:24: 743:24
    }
}

fn test_format_year() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/example-calendar.rs:750:23: 750:23
    let mut _1: bool;                    // in scope 0 at ui/impl-trait/example-calendar.rs:755:16: 755:20
    let mut _2: &&std::string::String;   // in scope 0 at ui/impl-trait/example-calendar.rs:763:20: 763:54
    let _3: &std::string::String;        // in scope 0 at ui/impl-trait/example-calendar.rs:763:20: 763:54
    let _4: std::string::String;         // in scope 0 at ui/impl-trait/example-calendar.rs:763:21: 763:54
    let mut _5: &&str;                   // in scope 0 at ui/impl-trait/example-calendar.rs:763:56: 792:70
    let _6: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _7: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[&str];                 // in scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
    let mut _9: &[&str; 2];              // in scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
    let _10: &[&str; 2];                 // in scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
    let mut _11: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _13: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _14: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
    let mut _16: &std::string::String;   // in scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
    let _17: &std::string::String;       // in scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
    let _18: std::string::String;        // in scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
    let mut _19: &str;                   // in scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
    let _20: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
    let mut _21: &std::string::String;   // in scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
    let _22: &std::string::String;       // in scope 0 at ui/impl-trait/example-calendar.rs:763:20: 763:54
    let _23: std::string::String;        // in scope 0 at ui/impl-trait/example-calendar.rs:763:21: 763:54
    let mut _24: &str;                   // in scope 0 at ui/impl-trait/example-calendar.rs:756:68: 756:71
    let _25: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:756:68: 756:71
    let _26: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _27: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _28: &[&str];                // in scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
    let mut _29: &[&str; 2];             // in scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
    let _30: &[&str; 2];                 // in scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
    let mut _31: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _32: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _33: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _34: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _35: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
    let mut _36: &std::string::String;   // in scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
    let _37: &std::string::String;       // in scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
    let _38: std::string::String;        // in scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
    let mut _39: &str;                   // in scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
    let _40: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:763:56: 792:70
    let mut _41: &str;                   // in scope 0 at ui/impl-trait/example-calendar.rs:757:71: 757:74
    let _42: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:757:71: 757:74
    let mut _43: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _44: bool;                   // in scope 0 at ui/impl-trait/example-calendar.rs:755:16: 755:20
    let mut _45: &&std::string::String;  // in scope 0 at ui/impl-trait/example-calendar.rs:794:20: 794:54
    let _46: &std::string::String;       // in scope 0 at ui/impl-trait/example-calendar.rs:794:20: 794:54
    let _47: std::string::String;        // in scope 0 at ui/impl-trait/example-calendar.rs:794:21: 794:54
    let mut _48: &&str;                  // in scope 0 at ui/impl-trait/example-calendar.rs:794:56: 823:70
    let _49: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _50: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _51: &[&str];                // in scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
    let mut _52: &[&str; 2];             // in scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
    let _53: &[&str; 2];                 // in scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
    let mut _54: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _55: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _56: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _57: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _58: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
    let mut _59: &std::string::String;   // in scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
    let _60: &std::string::String;       // in scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
    let _61: std::string::String;        // in scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
    let mut _62: &str;                   // in scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
    let _63: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
    let mut _64: &std::string::String;   // in scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
    let _65: &std::string::String;       // in scope 0 at ui/impl-trait/example-calendar.rs:794:20: 794:54
    let _66: std::string::String;        // in scope 0 at ui/impl-trait/example-calendar.rs:794:21: 794:54
    let mut _67: &str;                   // in scope 0 at ui/impl-trait/example-calendar.rs:756:68: 756:71
    let _68: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:756:68: 756:71
    let _69: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _70: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _71: &[&str];                // in scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
    let mut _72: &[&str; 2];             // in scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
    let _73: &[&str; 2];                 // in scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
    let mut _74: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _75: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _76: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _77: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _78: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
    let mut _79: &std::string::String;   // in scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
    let _80: &std::string::String;       // in scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
    let _81: std::string::String;        // in scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
    let mut _82: &str;                   // in scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
    let _83: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:794:56: 823:70
    let mut _84: &str;                   // in scope 0 at ui/impl-trait/example-calendar.rs:757:71: 757:74
    let _85: &str;                       // in scope 0 at ui/impl-trait/example-calendar.rs:757:71: 757:74
    let mut _86: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _87: &[&str; 2];             // in scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
    let mut _88: &[&str; 2];             // in scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
    let mut _89: &&str;                  // in scope 0 at ui/impl-trait/example-calendar.rs:794:56: 823:70
    let mut _90: &[&str; 2];             // in scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
    let mut _91: &[&str; 2];             // in scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
    let mut _92: &&str;                  // in scope 0 at ui/impl-trait/example-calendar.rs:763:56: 792:70

    bb0: {
        _4 = format_year(const 1984_i32, const _) -> bb1; // scope 0 at ui/impl-trait/example-calendar.rs:763:21: 763:54
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:763:21: 763:32
                                         // + literal: Const { ty: fn(i32, usize) -> String {format_year}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at ui/impl-trait/example-calendar.rs:763:20: 763:54
        _2 = &_3;                        // scope 0 at ui/impl-trait/example-calendar.rs:763:20: 763:54
        _92 = const _;                   // scope 0 at ui/impl-trait/example-calendar.rs:763:56: 792:70
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:763:56: 792:70
                                         // + literal: Const { ty: &&str, val: Unevaluated(test_format_year, [], Some(promoted[5])) }
        _5 = _92;                        // scope 0 at ui/impl-trait/example-calendar.rs:763:56: 792:70
        _1 = <&String as PartialEq<&str>>::ne(move _2, move _5) -> [return: bb2, unwind: bb44]; // scope 0 at ui/impl-trait/example-calendar.rs:755:16: 755:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:755:16: 755:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &String, &'b &str) -> bool {<&String as PartialEq<&str>>::ne}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_4) -> bb3;                 // scope 0 at ui/impl-trait/example-calendar.rs:755:19: 755:20
    }

    bb3: {
        switchInt(move _1) -> [0: bb18, otherwise: bb4]; // scope 0 at ui/impl-trait/example-calendar.rs:755:16: 755:20
    }

    bb4: {
        _91 = const _;                   // scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:756:26: 756:48
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(test_format_year, [], Some(promoted[4])) }
        _10 = _91;                       // scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
        _9 = _10;                        // scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
        _8 = move _9 as &[&str] (Pointer(Unsize)); // scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
        _23 = format_year(const 1984_i32, const _) -> bb5; // scope 0 at ui/impl-trait/example-calendar.rs:763:21: 763:54
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:763:21: 763:32
                                         // + literal: Const { ty: fn(i32, usize) -> String {format_year}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = &_23;                      // scope 0 at ui/impl-trait/example-calendar.rs:763:20: 763:54
        _21 = _22;                       // scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
        _20 = <String as Deref>::deref(move _21) -> [return: bb6, unwind: bb43]; // scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:756:50: 756:72
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _19 = _20;                       // scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
        _25 = const ".";                 // scope 0 at ui/impl-trait/example-calendar.rs:756:68: 756:71
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:756:68: 756:71
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _24 = _25;                       // scope 0 at ui/impl-trait/example-calendar.rs:756:68: 756:71
        _18 = str::<impl str>::replace::<'_, &str>(move _19, const " ", move _24) -> [return: bb7, unwind: bb43]; // scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:756:55: 756:62
                                         // + literal: Const { ty: for<'a> fn(&str, &str, &'a str) -> String {str::<impl str>::replace::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:756:63: 756:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _17 = &_18;                      // scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
        _16 = _17;                       // scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
        _15 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _16) -> [return: bb8, unwind: bb42]; // scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:756:50: 756:72
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb8: {
        _14 = [move _15];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _13 = &_14;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = _13;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = move _12 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = Arguments::<'_>::new_v1(move _8, move _11) -> [return: bb9, unwind: bb42]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _6 = _print(move _7) -> [return: bb10, unwind: bb42]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_18) -> [return: bb11, unwind: bb43]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb11: {
        drop(_23) -> bb12;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb12: {
        _90 = const _;                   // scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:757:26: 757:51
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(test_format_year, [], Some(promoted[3])) }
        _30 = _90;                       // scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
        _29 = _30;                       // scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
        _28 = move _29 as &[&str] (Pointer(Unsize)); // scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
        _40 = const "       January              February                March        \n  1  2  3  4  5  6  7            1  2  3  4               1  2  3\n  8  9 10 11 12 13 14   5  6  7  8  9 10 11   4  5  6  7  8  9 10\n 15 16 17 18 19 20 21  12 13 14 15 16 17 18  11 12 13 14 15 16 17\n 22 23 24 25 26 27 28  19 20 21 22 23 24 25  18 19 20 21 22 23 24\n 29 30 31              26 27 28 29           25 26 27 28 29 30 31\n\n        April                  May                  June         \n  1  2  3  4  5  6  7         1  2  3  4  5                  1  2\n  8  9 10 11 12 13 14   6  7  8  9 10 11 12   3  4  5  6  7  8  9\n 15 16 17 18 19 20 21  13 14 15 16 17 18 19  10 11 12 13 14 15 16\n 22 23 24 25 26 27 28  20 21 22 23 24 25 26  17 18 19 20 21 22 23\n 29 30                 27 28 29 30 31        24 25 26 27 28 29 30\n\n        July                 August               September      \n  1  2  3  4  5  6  7            1  2  3  4                     1\n  8  9 10 11 12 13 14   5  6  7  8  9 10 11   2  3  4  5  6  7  8\n 15 16 17 18 19 20 21  12 13 14 15 16 17 18   9 10 11 12 13 14 15\n 22 23 24 25 26 27 28  19 20 21 22 23 24 25  16 17 18 19 20 21 22\n 29 30 31              26 27 28 29 30 31     23 24 25 26 27 28 29\n                                             30                  \n\n       October              November              December       \n     1  2  3  4  5  6               1  2  3                     1\n  7  8  9 10 11 12 13   4  5  6  7  8  9 10   2  3  4  5  6  7  8\n 14 15 16 17 18 19 20  11 12 13 14 15 16 17   9 10 11 12 13 14 15\n 21 22 23 24 25 26 27  18 19 20 21 22 23 24  16 17 18 19 20 21 22\n 28 29 30 31           25 26 27 28 29 30     23 24 25 26 27 28 29\n                                             30 31               "; // scope 0 at ui/impl-trait/example-calendar.rs:763:56: 792:70
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:763:56: 792:70
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _39 = _40;                       // scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
        _42 = const ".";                 // scope 0 at ui/impl-trait/example-calendar.rs:757:71: 757:74
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:757:71: 757:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _41 = _42;                       // scope 0 at ui/impl-trait/example-calendar.rs:757:71: 757:74
        _38 = str::<impl str>::replace::<'_, &str>(move _39, const " ", move _41) -> bb13; // scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:757:58: 757:65
                                         // + literal: Const { ty: for<'a> fn(&str, &str, &'a str) -> String {str::<impl str>::replace::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:757:66: 757:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _37 = &_38;                      // scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
        _36 = _37;                       // scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
        _35 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _36) -> [return: bb14, unwind: bb41]; // scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:757:53: 757:75
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb14: {
        _34 = [move _35];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _33 = &_34;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _32 = _33;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _31 = move _32 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _27 = Arguments::<'_>::new_v1(move _28, move _31) -> [return: bb15, unwind: bb41]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb15: {
        _26 = _print(move _27) -> [return: bb16, unwind: bb41]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_38) -> bb17;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb17: {
        _43 = begin_panic::<&str>(const "calendars didn't match!"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:758:24: 758:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _47 = format_year(const 2015_i32, const _) -> bb19; // scope 0 at ui/impl-trait/example-calendar.rs:794:21: 794:54
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:794:21: 794:32
                                         // + literal: Const { ty: fn(i32, usize) -> String {format_year}, val: Value(<ZST>) }
    }

    bb19: {
        _46 = &_47;                      // scope 0 at ui/impl-trait/example-calendar.rs:794:20: 794:54
        _45 = &_46;                      // scope 0 at ui/impl-trait/example-calendar.rs:794:20: 794:54
        _89 = const _;                   // scope 0 at ui/impl-trait/example-calendar.rs:794:56: 823:70
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:794:56: 823:70
                                         // + literal: Const { ty: &&str, val: Unevaluated(test_format_year, [], Some(promoted[2])) }
        _48 = _89;                       // scope 0 at ui/impl-trait/example-calendar.rs:794:56: 823:70
        _44 = <&String as PartialEq<&str>>::ne(move _45, move _48) -> [return: bb20, unwind: bb40]; // scope 0 at ui/impl-trait/example-calendar.rs:755:16: 755:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:755:16: 755:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &String, &'b &str) -> bool {<&String as PartialEq<&str>>::ne}, val: Value(<ZST>) }
    }

    bb20: {
        drop(_47) -> bb21;               // scope 0 at ui/impl-trait/example-calendar.rs:755:19: 755:20
    }

    bb21: {
        switchInt(move _44) -> [0: bb36, otherwise: bb22]; // scope 0 at ui/impl-trait/example-calendar.rs:755:16: 755:20
    }

    bb22: {
        _88 = const _;                   // scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:756:26: 756:48
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(test_format_year, [], Some(promoted[1])) }
        _53 = _88;                       // scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
        _52 = _53;                       // scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
        _51 = move _52 as &[&str] (Pointer(Unsize)); // scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
        _66 = format_year(const 2015_i32, const _) -> bb23; // scope 0 at ui/impl-trait/example-calendar.rs:794:21: 794:54
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:794:21: 794:32
                                         // + literal: Const { ty: fn(i32, usize) -> String {format_year}, val: Value(<ZST>) }
    }

    bb23: {
        _65 = &_66;                      // scope 0 at ui/impl-trait/example-calendar.rs:794:20: 794:54
        _64 = _65;                       // scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
        _63 = <String as Deref>::deref(move _64) -> [return: bb24, unwind: bb39]; // scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:756:50: 756:72
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb24: {
        _62 = _63;                       // scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
        _68 = const ".";                 // scope 0 at ui/impl-trait/example-calendar.rs:756:68: 756:71
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:756:68: 756:71
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _67 = _68;                       // scope 0 at ui/impl-trait/example-calendar.rs:756:68: 756:71
        _61 = str::<impl str>::replace::<'_, &str>(move _62, const " ", move _67) -> [return: bb25, unwind: bb39]; // scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:756:55: 756:62
                                         // + literal: Const { ty: for<'a> fn(&str, &str, &'a str) -> String {str::<impl str>::replace::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:756:63: 756:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        _60 = &_61;                      // scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
        _59 = _60;                       // scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
        _58 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _59) -> [return: bb26, unwind: bb38]; // scope 0 at ui/impl-trait/example-calendar.rs:756:50: 756:72
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:756:50: 756:72
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb26: {
        _57 = [move _58];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _56 = &_57;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _55 = _56;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _54 = move _55 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _50 = Arguments::<'_>::new_v1(move _51, move _54) -> [return: bb27, unwind: bb38]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb27: {
        _49 = _print(move _50) -> [return: bb28, unwind: bb38]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb28: {
        drop(_61) -> [return: bb29, unwind: bb39]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb29: {
        drop(_66) -> bb30;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb30: {
        _87 = const _;                   // scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:757:26: 757:51
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(test_format_year, [], Some(promoted[0])) }
        _73 = _87;                       // scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
        _72 = _73;                       // scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
        _71 = move _72 as &[&str] (Pointer(Unsize)); // scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
        _83 = const "       January              February                March        \n              1  2  3   1  2  3  4  5  6  7   1  2  3  4  5  6  7\n  4  5  6  7  8  9 10   8  9 10 11 12 13 14   8  9 10 11 12 13 14\n 11 12 13 14 15 16 17  15 16 17 18 19 20 21  15 16 17 18 19 20 21\n 18 19 20 21 22 23 24  22 23 24 25 26 27 28  22 23 24 25 26 27 28\n 25 26 27 28 29 30 31                        29 30 31            \n\n        April                  May                  June         \n           1  2  3  4                  1  2      1  2  3  4  5  6\n  5  6  7  8  9 10 11   3  4  5  6  7  8  9   7  8  9 10 11 12 13\n 12 13 14 15 16 17 18  10 11 12 13 14 15 16  14 15 16 17 18 19 20\n 19 20 21 22 23 24 25  17 18 19 20 21 22 23  21 22 23 24 25 26 27\n 26 27 28 29 30        24 25 26 27 28 29 30  28 29 30            \n                       31                                        \n\n        July                 August               September      \n           1  2  3  4                     1         1  2  3  4  5\n  5  6  7  8  9 10 11   2  3  4  5  6  7  8   6  7  8  9 10 11 12\n 12 13 14 15 16 17 18   9 10 11 12 13 14 15  13 14 15 16 17 18 19\n 19 20 21 22 23 24 25  16 17 18 19 20 21 22  20 21 22 23 24 25 26\n 26 27 28 29 30 31     23 24 25 26 27 28 29  27 28 29 30         \n                       30 31                                     \n\n       October              November              December       \n              1  2  3   1  2  3  4  5  6  7         1  2  3  4  5\n  4  5  6  7  8  9 10   8  9 10 11 12 13 14   6  7  8  9 10 11 12\n 11 12 13 14 15 16 17  15 16 17 18 19 20 21  13 14 15 16 17 18 19\n 18 19 20 21 22 23 24  22 23 24 25 26 27 28  20 21 22 23 24 25 26\n 25 26 27 28 29 30 31  29 30                 27 28 29 30 31      "; // scope 0 at ui/impl-trait/example-calendar.rs:794:56: 823:70
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:794:56: 823:70
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _82 = _83;                       // scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
        _85 = const ".";                 // scope 0 at ui/impl-trait/example-calendar.rs:757:71: 757:74
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:757:71: 757:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _84 = _85;                       // scope 0 at ui/impl-trait/example-calendar.rs:757:71: 757:74
        _81 = str::<impl str>::replace::<'_, &str>(move _82, const " ", move _84) -> bb31; // scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:757:58: 757:65
                                         // + literal: Const { ty: for<'a> fn(&str, &str, &'a str) -> String {str::<impl str>::replace::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:757:66: 757:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb31: {
        _80 = &_81;                      // scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
        _79 = _80;                       // scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
        _78 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _79) -> [return: bb32, unwind: bb37]; // scope 0 at ui/impl-trait/example-calendar.rs:757:53: 757:75
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:757:53: 757:75
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb32: {
        _77 = [move _78];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _76 = &_77;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _75 = _76;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _74 = move _75 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _70 = Arguments::<'_>::new_v1(move _71, move _74) -> [return: bb33, unwind: bb37]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb33: {
        _69 = _print(move _70) -> [return: bb34, unwind: bb37]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb34: {
        drop(_81) -> bb35;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb35: {
        _86 = begin_panic::<&str>(const "calendars didn't match!"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:758:24: 758:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb36: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:824:2: 824:2
    }

    bb37 (cleanup): {
        drop(_81) -> bb45;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb38 (cleanup): {
        drop(_61) -> bb39;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb39 (cleanup): {
        drop(_66) -> bb45;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb40 (cleanup): {
        drop(_47) -> bb45;               // scope 0 at ui/impl-trait/example-calendar.rs:755:19: 755:20
    }

    bb41 (cleanup): {
        drop(_38) -> bb45;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb42 (cleanup): {
        drop(_18) -> bb43;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb43 (cleanup): {
        drop(_23) -> bb45;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb44 (cleanup): {
        drop(_4) -> bb45;                // scope 0 at ui/impl-trait/example-calendar.rs:755:19: 755:20
    }

    bb45 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-calendar.rs:750:1: 824:2
    }
}

promoted[0] in test_format_year: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
    let mut _1: [&str; 2];               // in scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51

    bb0: {
        _1 = [const "expected:\n```\n", const "\n```\n"]; // scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:757:26: 757:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:757:26: 757:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
    }
}

promoted[1] in test_format_year: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
    let mut _1: [&str; 2];               // in scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48

    bb0: {
        _1 = [const "got:\n```\n", const "\n```\n\n"]; // scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:756:26: 756:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:756:26: 756:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
    }
}

promoted[2] in test_format_year: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/impl-trait/example-calendar.rs:794:56: 823:70
    let mut _1: &str;                    // in scope 0 at ui/impl-trait/example-calendar.rs:794:56: 823:70

    bb0: {
        _1 = const "       January              February                March        \n              1  2  3   1  2  3  4  5  6  7   1  2  3  4  5  6  7\n  4  5  6  7  8  9 10   8  9 10 11 12 13 14   8  9 10 11 12 13 14\n 11 12 13 14 15 16 17  15 16 17 18 19 20 21  15 16 17 18 19 20 21\n 18 19 20 21 22 23 24  22 23 24 25 26 27 28  22 23 24 25 26 27 28\n 25 26 27 28 29 30 31                        29 30 31            \n\n        April                  May                  June         \n           1  2  3  4                  1  2      1  2  3  4  5  6\n  5  6  7  8  9 10 11   3  4  5  6  7  8  9   7  8  9 10 11 12 13\n 12 13 14 15 16 17 18  10 11 12 13 14 15 16  14 15 16 17 18 19 20\n 19 20 21 22 23 24 25  17 18 19 20 21 22 23  21 22 23 24 25 26 27\n 26 27 28 29 30        24 25 26 27 28 29 30  28 29 30            \n                       31                                        \n\n        July                 August               September      \n           1  2  3  4                     1         1  2  3  4  5\n  5  6  7  8  9 10 11   2  3  4  5  6  7  8   6  7  8  9 10 11 12\n 12 13 14 15 16 17 18   9 10 11 12 13 14 15  13 14 15 16 17 18 19\n 19 20 21 22 23 24 25  16 17 18 19 20 21 22  20 21 22 23 24 25 26\n 26 27 28 29 30 31     23 24 25 26 27 28 29  27 28 29 30         \n                       30 31                                     \n\n       October              November              December       \n              1  2  3   1  2  3  4  5  6  7         1  2  3  4  5\n  4  5  6  7  8  9 10   8  9 10 11 12 13 14   6  7  8  9 10 11 12\n 11 12 13 14 15 16 17  15 16 17 18 19 20 21  13 14 15 16 17 18 19\n 18 19 20 21 22 23 24  22 23 24 25 26 27 28  20 21 22 23 24 25 26\n 25 26 27 28 29 30 31  29 30                 27 28 29 30 31      "; // scope 0 at ui/impl-trait/example-calendar.rs:794:56: 823:70
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:794:56: 823:70
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:794:56: 823:70
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:794:56: 823:70
    }
}

promoted[3] in test_format_year: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
    let mut _1: [&str; 2];               // in scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51

    bb0: {
        _1 = [const "expected:\n```\n", const "\n```\n"]; // scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:757:26: 757:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:757:26: 757:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:757:26: 757:51
    }
}

promoted[4] in test_format_year: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
    let mut _1: [&str; 2];               // in scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48

    bb0: {
        _1 = [const "got:\n```\n", const "\n```\n\n"]; // scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:756:26: 756:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:756:26: 756:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:756:26: 756:48
    }
}

promoted[5] in test_format_year: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/impl-trait/example-calendar.rs:763:56: 792:70
    let mut _1: &str;                    // in scope 0 at ui/impl-trait/example-calendar.rs:763:56: 792:70

    bb0: {
        _1 = const "       January              February                March        \n  1  2  3  4  5  6  7            1  2  3  4               1  2  3\n  8  9 10 11 12 13 14   5  6  7  8  9 10 11   4  5  6  7  8  9 10\n 15 16 17 18 19 20 21  12 13 14 15 16 17 18  11 12 13 14 15 16 17\n 22 23 24 25 26 27 28  19 20 21 22 23 24 25  18 19 20 21 22 23 24\n 29 30 31              26 27 28 29           25 26 27 28 29 30 31\n\n        April                  May                  June         \n  1  2  3  4  5  6  7         1  2  3  4  5                  1  2\n  8  9 10 11 12 13 14   6  7  8  9 10 11 12   3  4  5  6  7  8  9\n 15 16 17 18 19 20 21  13 14 15 16 17 18 19  10 11 12 13 14 15 16\n 22 23 24 25 26 27 28  20 21 22 23 24 25 26  17 18 19 20 21 22 23\n 29 30                 27 28 29 30 31        24 25 26 27 28 29 30\n\n        July                 August               September      \n  1  2  3  4  5  6  7            1  2  3  4                     1\n  8  9 10 11 12 13 14   5  6  7  8  9 10 11   2  3  4  5  6  7  8\n 15 16 17 18 19 20 21  12 13 14 15 16 17 18   9 10 11 12 13 14 15\n 22 23 24 25 26 27 28  19 20 21 22 23 24 25  16 17 18 19 20 21 22\n 29 30 31              26 27 28 29 30 31     23 24 25 26 27 28 29\n                                             30                  \n\n       October              November              December       \n     1  2  3  4  5  6               1  2  3                     1\n  7  8  9 10 11 12 13   4  5  6  7  8  9 10   2  3  4  5  6  7  8\n 14 15 16 17 18 19 20  11 12 13 14 15 16 17   9 10 11 12 13 14 15\n 21 22 23 24 25 26 27  18 19 20 21 22 23 24  16 17 18 19 20 21 22\n 28 29 30 31           25 26 27 28 29 30     23 24 25 26 27 28 29\n                                             30 31               "; // scope 0 at ui/impl-trait/example-calendar.rs:763:56: 792:70
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:763:56: 792:70
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/example-calendar.rs:763:56: 792:70
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:763:56: 792:70
    }
}

const MONTHS_PER_ROW: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-trait/example-calendar.rs:751:27: 751:32

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/impl-trait/example-calendar.rs:751:35: 751:36
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:751:5: 751:37
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/example-calendar.rs:826:11: 826:11
    let _1: ();                          // in scope 0 at ui/impl-trait/example-calendar.rs:828:5: 828:18
    let _2: ();                          // in scope 0 at ui/impl-trait/example-calendar.rs:829:5: 829:25
    let _3: ();                          // in scope 0 at ui/impl-trait/example-calendar.rs:830:5: 830:20
    let _4: ();                          // in scope 0 at ui/impl-trait/example-calendar.rs:831:5: 831:20
    let _5: ();                          // in scope 0 at ui/impl-trait/example-calendar.rs:832:5: 832:23
    let _6: ();                          // in scope 0 at ui/impl-trait/example-calendar.rs:833:5: 833:19
    let _7: ();                          // in scope 0 at ui/impl-trait/example-calendar.rs:834:5: 834:24
    let _8: ();                          // in scope 0 at ui/impl-trait/example-calendar.rs:835:5: 835:23
    let _9: ();                          // in scope 0 at ui/impl-trait/example-calendar.rs:836:5: 836:24
    let _10: ();                         // in scope 0 at ui/impl-trait/example-calendar.rs:837:5: 837:24
    let _11: ();                         // in scope 0 at ui/impl-trait/example-calendar.rs:838:5: 838:18
    let _12: ();                         // in scope 0 at ui/impl-trait/example-calendar.rs:839:5: 839:23

    bb0: {
        _1 = test_spaces() -> bb1;       // scope 0 at ui/impl-trait/example-calendar.rs:828:5: 828:18
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:828:5: 828:16
                                         // + literal: Const { ty: fn() {test_spaces}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = test_dates_in_year() -> bb2; // scope 0 at ui/impl-trait/example-calendar.rs:829:5: 829:25
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:829:5: 829:23
                                         // + literal: Const { ty: fn() {test_dates_in_year}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = test_group_by() -> bb3;     // scope 0 at ui/impl-trait/example-calendar.rs:830:5: 830:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:830:5: 830:18
                                         // + literal: Const { ty: fn() {test_group_by}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = test_by_month() -> bb4;     // scope 0 at ui/impl-trait/example-calendar.rs:831:5: 831:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:831:5: 831:18
                                         // + literal: Const { ty: fn() {test_by_month}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = test_isoweekdate() -> bb5;  // scope 0 at ui/impl-trait/example-calendar.rs:832:5: 832:23
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:832:5: 832:21
                                         // + literal: Const { ty: fn() {test_isoweekdate}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = test_by_week() -> bb6;      // scope 0 at ui/impl-trait/example-calendar.rs:833:5: 833:19
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:833:5: 833:17
                                         // + literal: Const { ty: fn() {test_by_week}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = test_format_weeks() -> bb7; // scope 0 at ui/impl-trait/example-calendar.rs:834:5: 834:24
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:834:5: 834:22
                                         // + literal: Const { ty: fn() {test_format_weeks}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = test_month_title() -> bb8;  // scope 0 at ui/impl-trait/example-calendar.rs:835:5: 835:23
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:835:5: 835:21
                                         // + literal: Const { ty: fn() {test_month_title}, val: Value(<ZST>) }
    }

    bb8: {
        _9 = test_format_month() -> bb9; // scope 0 at ui/impl-trait/example-calendar.rs:836:5: 836:24
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:836:5: 836:22
                                         // + literal: Const { ty: fn() {test_format_month}, val: Value(<ZST>) }
    }

    bb9: {
        _10 = test_paste_blocks() -> bb10; // scope 0 at ui/impl-trait/example-calendar.rs:837:5: 837:24
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:837:5: 837:22
                                         // + literal: Const { ty: fn() {test_paste_blocks}, val: Value(<ZST>) }
    }

    bb10: {
        _11 = test_chunks() -> bb11;     // scope 0 at ui/impl-trait/example-calendar.rs:838:5: 838:18
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:838:5: 838:16
                                         // + literal: Const { ty: fn() {test_chunks}, val: Value(<ZST>) }
    }

    bb11: {
        _12 = test_format_year() -> bb12; // scope 0 at ui/impl-trait/example-calendar.rs:839:5: 839:23
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-calendar.rs:839:5: 839:21
                                         // + literal: Const { ty: fn() {test_format_year}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:840:2: 840:2
    }
}

fn NaiveDate(_1: i32, _2: u32, _3: u32) -> NaiveDate {
    let mut _0: NaiveDate;               // return place in scope 0 at ui/impl-trait/example-calendar.rs:16:1: 16:17

    bb0: {
        _0 = NaiveDate(move _1, move _2, move _3); // scope 0 at ui/impl-trait/example-calendar.rs:16:1: 16:17
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:16:1: 16:17
    }
}

// MIR FOR CTFE
fn NaiveDate(_1: i32, _2: u32, _3: u32) -> NaiveDate {
    let mut _0: NaiveDate;               // return place in scope 0 at ui/impl-trait/example-calendar.rs:16:1: 16:17

    bb0: {
        _0 = NaiveDate(move _1, move _2, move _3); // scope 0 at ui/impl-trait/example-calendar.rs:16:1: 16:17
        return;                          // scope 0 at ui/impl-trait/example-calendar.rs:16:1: 16:17
    }
}
