// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn hide(_1: T) -> impl Foo {
    debug x => _1;
    let mut _0: impl Foo;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn <impl at ui/impl-trait/equality-rpass.rs:16:1: 16:25>::leak(_1: U) -> T {
    debug self => _1;
    let mut _0: T;
    let _2: !;

    bb0: {
        _2 = begin_panic::<&str>(const "type mismatch") -> bb1;
    }

    bb1 (cleanup): {
        drop(_1) -> [return: bb2, unwind terminate];
    }

    bb2 (cleanup): {
        resume;
    }
}

fn <impl at ui/impl-trait/equality-rpass.rs:19:1: 19:22>::leak(_1: T) -> T {
    debug self => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn CheckIfSend::check(_1: Self) -> <Self as CheckIfSend>::T {
    debug self => _1;
    let mut _0: <Self as CheckIfSend>::T;

    bb0: {
        _0 = <<Self as CheckIfSend>::T as Default>::default() -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn lucky_seven() -> impl Fn(usize) -> u8 {
    let mut _0: impl Fn(usize) -> u8;
    let _1: [u8; 7];
    scope 1 {
        debug a => _1;
    }

    bb0: {
        _1 = [const 1_u8, const 2_u8, const 3_u8, const 4_u8, const 5_u8, const 6_u8, const 7_u8];
        _0 = [closure@ui/impl-trait/equality-rpass.rs:36:5: 36:13] { a: _1 };
        return;
    }
}

fn lucky_seven::{closure#0}(_1: &[closure@ui/impl-trait/equality-rpass.rs:36:5: 36:13], _2: usize) -> u8 {
    debug i => _2;
    debug a => ((*_1).0: [u8; 7]);
    let mut _0: u8;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        _3 = const 7_usize;
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = ((*_1).0: [u8; 7])[_2];
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&impl Foo, &impl Foo);
    let mut _2: &impl Foo;
    let _3: impl Foo;
    let mut _4: &impl Foo;
    let _5: impl Foo;
    let _6: &impl Foo;
    let _7: &impl Foo;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&usize, &usize);
    let mut _14: &usize;
    let _15: usize;
    let _16: &impl Foo;
    let _17: impl Foo;
    let mut _18: [u8; 5];
    let _19: &usize;
    let _20: &usize;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: usize;
    let mut _24: usize;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&usize, &usize);
    let mut _29: &usize;
    let _30: usize;
    let _31: &impl Fn(usize) -> u8;
    let _32: impl Fn(usize) -> u8;
    let _33: &usize;
    let _34: &usize;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: usize;
    let mut _38: usize;
    let _40: !;
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: (&i32, &i32);
    let mut _43: &i32;
    let _44: i32;
    let mut _45: impl Foo;
    let _46: &i32;
    let _47: &i32;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: i32;
    let mut _51: i32;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: (&bool, &bool);
    let mut _56: &bool;
    let _57: bool;
    let mut _58: impl Foo;
    let _59: &bool;
    let _60: &bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let _66: !;
    let mut _67: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _68: &bool;
    let mut _69: &i32;
    let mut _70: &usize;
    let mut _71: &usize;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _19;
        debug right_val => _20;
        let _25: core::panicking::AssertKind;
        scope 4 {
            debug kind => _25;
        }
    }
    scope 5 {
        debug left_val => _33;
        debug right_val => _34;
        let _39: core::panicking::AssertKind;
        scope 6 {
            debug kind => _39;
        }
    }
    scope 7 {
        debug left_val => _46;
        debug right_val => _47;
        let _52: core::panicking::AssertKind;
        scope 8 {
            debug kind => _52;
        }
    }
    scope 9 {
        debug left_val => _59;
        debug right_val => _60;
        let _65: core::panicking::AssertKind;
        scope 10 {
            debug kind => _65;
        }
    }

    bb0: {
        _3 = hide::<i32>(const 42_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _5 = hide::<i32>(const 42_i32) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = &_5;
        _1 = (move _2, move _4);
        _6 = (_1.0: &impl Foo);
        _7 = (_1.1: &impl Foo);
        _9 = <impl Foo as PartialEq>::eq(_6, _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<impl Foo, impl Foo>(move _10, _6, _7, move _12) -> unwind continue;
    }

    bb5: {
        _18 = [const 0_u8; 5];
        _17 = hide::<[u8; 5]>(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        _16 = &_17;
        _15 = std::mem::size_of_val::<impl Foo>(_16) -> [return: bb7, unwind continue];
    }

    bb7: {
        _14 = &_15;
        _71 = const _;
        _13 = (move _14, _71);
        _19 = (_13.0: &usize);
        _20 = (_13.1: &usize);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<usize, usize>(move _25, _19, _20, move _27) -> unwind continue;
    }

    bb9: {
        _32 = lucky_seven() -> [return: bb10, unwind continue];
    }

    bb10: {
        _31 = &_32;
        _30 = std::mem::size_of_val::<impl Fn(usize) -> u8>(_31) -> [return: bb11, unwind continue];
    }

    bb11: {
        _29 = &_30;
        _70 = const _;
        _28 = (move _29, _70);
        _33 = (_28.0: &usize);
        _34 = (_28.1: &usize);
        _37 = (*_33);
        _38 = (*_34);
        _36 = Eq(move _37, move _38);
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _39 = core::panicking::AssertKind::Eq;
        _41 = Option::<Arguments<'_>>::None;
        _40 = core::panicking::assert_failed::<usize, usize>(move _39, _33, _34, move _41) -> unwind continue;
    }

    bb13: {
        _45 = hide::<i32>(const 5_i32) -> [return: bb14, unwind continue];
    }

    bb14: {
        _44 = <impl Foo as Leak<i32>>::leak(move _45) -> [return: bb15, unwind continue];
    }

    bb15: {
        _43 = &_44;
        _69 = const _;
        _42 = (move _43, _69);
        _46 = (_42.0: &i32);
        _47 = (_42.1: &i32);
        _50 = (*_46);
        _51 = (*_47);
        _49 = Eq(move _50, move _51);
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<i32, i32>(move _52, _46, _47, move _54) -> unwind continue;
    }

    bb17: {
        _58 = hide::<i32>(const 0_i32) -> [return: bb18, unwind continue];
    }

    bb18: {
        _57 = <impl Foo as CheckIfSend>::check(move _58) -> [return: bb19, unwind continue];
    }

    bb19: {
        _56 = &_57;
        _68 = const _;
        _55 = (move _56, _68);
        _59 = (_55.0: &bool);
        _60 = (_55.1: &bool);
        _63 = (*_59);
        _64 = (*_60);
        _62 = Eq(move _63, move _64);
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _65 = core::panicking::AssertKind::Eq;
        _67 = Option::<Arguments<'_>>::None;
        _66 = core::panicking::assert_failed::<bool, bool>(move _65, _59, _60, move _67) -> unwind continue;
    }

    bb21: {
        return;
    }
}

promoted[0] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 7_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 5_usize;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}
