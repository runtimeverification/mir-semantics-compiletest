// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn iter(_1: Vec<(u32, &u32)>) -> impl DoubleEndedIterator + Iterator<Item = (u32, &u32)> {
    debug v => _1;                       // in scope 0 at ui/impl-trait/rpit-assoc-pair-with-lifetime.rs:3:17: 3:18
    let mut _0: impl std::iter::DoubleEndedIterator + std::iter::Iterator<Item = (u32, &u32)>; // return place in scope 0 at ui/impl-trait/rpit-assoc-pair-with-lifetime.rs:3:44: 3:88
    let mut _2: std::vec::Vec<(u32, &u32)>; // in scope 0 at ui/impl-trait/rpit-assoc-pair-with-lifetime.rs:4:5: 4:6

    bb0: {
        _2 = move _1;                    // scope 0 at ui/impl-trait/rpit-assoc-pair-with-lifetime.rs:4:5: 4:6
        _0 = <Vec<(u32, &u32)> as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at ui/impl-trait/rpit-assoc-pair-with-lifetime.rs:4:5: 4:18
                                         // mir::Constant
                                         // + span: ui/impl-trait/rpit-assoc-pair-with-lifetime.rs:4:7: 4:16
                                         // + literal: Const { ty: fn(Vec<(u32, &u32)>) -> <Vec<(u32, &u32)> as IntoIterator>::IntoIter {<Vec<(u32, &u32)> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/rpit-assoc-pair-with-lifetime.rs:5:2: 5:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/rpit-assoc-pair-with-lifetime.rs:7:11: 7:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/rpit-assoc-pair-with-lifetime.rs:7:13: 7:13
    }
}
