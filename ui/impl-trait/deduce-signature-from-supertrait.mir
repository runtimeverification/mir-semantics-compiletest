// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/deduce-signature-from-supertrait.rs:11:11: 11:11
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/impl-trait/deduce-signature-from-supertrait.rs:15:2: 15:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/impl-trait/deduce-signature-from-supertrait.rs:12:18: 12:21], _2: i32) -> () {
    debug x => _2;                       // in scope 0 at ui/impl-trait/deduce-signature-from-supertrait.rs:12:19: 12:20
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/deduce-signature-from-supertrait.rs:12:22: 12:22
    let mut _3: std::string::String;     // in scope 0 at ui/impl-trait/deduce-signature-from-supertrait.rs:13:17: 13:30
    let mut _4: &i32;                    // in scope 0 at ui/impl-trait/deduce-signature-from-supertrait.rs:13:17: 13:30
    scope 1 {
    }

    bb0: {
        _4 = &_2;                        // scope 0 at ui/impl-trait/deduce-signature-from-supertrait.rs:13:17: 13:30
        _3 = <i32 as ToString>::to_string(move _4) -> bb1; // scope 0 at ui/impl-trait/deduce-signature-from-supertrait.rs:13:17: 13:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/deduce-signature-from-supertrait.rs:13:19: 13:28
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> String {<i32 as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_3) -> bb2;                 // scope 0 at ui/impl-trait/deduce-signature-from-supertrait.rs:13:30: 13:31
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/deduce-signature-from-supertrait.rs:14:6: 14:6
    }
}
