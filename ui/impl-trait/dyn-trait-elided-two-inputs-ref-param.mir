// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Alpha::item(_1: &Self) -> Box<Item> {
    debug self => _1;
    let mut _0: std::boxed::Box<Item>;
    let mut _2: !;

    bb0: {
        _2 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }
}

fn alpha(_1: &str, _2: &str) -> impl Alpha<(dyn Object + 'static)> {
    debug x => _1;
    debug y => _2;
    let mut _0: impl Alpha<(dyn Object + 'static)>;

    bb0: {
        return;
    }
}

fn is_static(_1: T) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn bar(_1: &str) -> &impl Alpha<(dyn Object + 'static)> {
    debug x => _1;
    let mut _0: &impl Alpha<(dyn Object + 'static)>;
    let mut _2: &();

    bb0: {
        _2 = const _;
        _0 = _2;
        return;
    }
}

promoted[0] in bar: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _6: &str;
    let _7: &str;
    let _8: &std::string::String;
    let _9: ();
    let mut _10: std::boxed::Box<dyn Object>;
    let mut _11: &impl Alpha<(dyn Object + 'static)>;
    let mut _12: &[&str; 1];
    scope 1 {
        debug s => _1;
        let _5: &impl Alpha<(dyn Object + 'static)>;
        scope 3 {
            debug r => _5;
        }
    }
    scope 2 {
        debug res => _2;
    }

    bb0: {
        _12 = const _;
        _4 = _12 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = format(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = move _2;
        _8 = &_1;
        _7 = <String as Deref>::deref(_8) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _6 = _7;
        _5 = bar(move _6) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _11 = _5;
        _10 = <impl Alpha<(dyn Object + 'static)> as Alpha<dyn Object>>::item(move _11) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _9 = is_static::<Box<dyn Object>>(move _10) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_1) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "foo"];
        _0 = &_1;
        return;
    }
}
