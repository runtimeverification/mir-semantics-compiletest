// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: impl Usizer) -> usize {
    debug u => _1;
    let mut _0: usize;
    let mut _2: usize;

    bb0: {
        _2 = <impl Usizer as Usizer>::m(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Add(const N, move _2);
        return;
    }
}

fn <impl at ui/impl-trait/explicit-generic-args-with-impl-trait/const-args.rs:13:1: 13:25>::m(_1: Usizable) -> usize {
    debug self => const Usizable;
    let mut _0: usize;

    bb0: {
        _0 = const 16_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let _4: &usize;
    let _5: &usize;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: usize;
    let mut _9: usize;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: &usize;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _3 = f::<4, Usizable>(const Usizable) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _13 = const _;
        _1 = (move _2, _13);
        _4 = (_1.0: &usize);
        _5 = (_1.1: &usize);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<usize, usize>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 20_usize;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}
