// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn keys(_1: &Result<u32, u32>) -> impl Debug + '_ {
    debug x => _1;                       // in scope 0 at ui/impl-trait/lifetimes2.rs:3:17: 3:18
    let mut _0: impl std::fmt::Debug + '_; // return place in scope 0 at ui/impl-trait/lifetimes2.rs:3:45: 3:70
    let mut _2: isize;                   // in scope 0 at ui/impl-trait/lifetimes2.rs:5:9: 5:16
    let _3: &u32;                        // in scope 0 at ui/impl-trait/lifetimes2.rs:5:12: 5:15
    let mut _4: &u32;                    // in scope 0 at ui/impl-trait/lifetimes2.rs:5:23: 5:26
    let _5: &u32;                        // in scope 0 at ui/impl-trait/lifetimes2.rs:6:13: 6:16
    let mut _6: &u32;                    // in scope 0 at ui/impl-trait/lifetimes2.rs:6:25: 6:28
    scope 1 {
        debug map => _3;                 // in scope 1 at ui/impl-trait/lifetimes2.rs:5:12: 5:15
    }
    scope 2 {
        debug map => _5;                 // in scope 2 at ui/impl-trait/lifetimes2.rs:6:13: 6:16
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/impl-trait/lifetimes2.rs:4:11: 4:12
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/impl-trait/lifetimes2.rs:4:5: 4:12
    }

    bb1: {
        _5 = &(((*_1) as Err).0: u32);   // scope 0 at ui/impl-trait/lifetimes2.rs:6:13: 6:16
        _6 = _5;                         // scope 2 at ui/impl-trait/lifetimes2.rs:6:25: 6:28
        _0 = Result::<&u32, &u32>::Err(move _6); // scope 2 at ui/impl-trait/lifetimes2.rs:6:21: 6:29
        goto -> bb4;                     // scope 0 at ui/impl-trait/lifetimes2.rs:6:28: 6:29
    }

    bb2: {
        unreachable;                     // scope 0 at ui/impl-trait/lifetimes2.rs:4:11: 4:12
    }

    bb3: {
        _3 = &(((*_1) as Ok).0: u32);    // scope 0 at ui/impl-trait/lifetimes2.rs:5:12: 5:15
        _4 = _3;                         // scope 1 at ui/impl-trait/lifetimes2.rs:5:23: 5:26
        _0 = Result::<&u32, &u32>::Ok(move _4); // scope 1 at ui/impl-trait/lifetimes2.rs:5:20: 5:27
        goto -> bb4;                     // scope 0 at ui/impl-trait/lifetimes2.rs:5:26: 5:27
    }

    bb4: {
        return;                          // scope 0 at ui/impl-trait/lifetimes2.rs:8:2: 8:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/lifetimes2.rs:10:11: 10:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/lifetimes2.rs:10:13: 10:13
    }
}
