// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn nested_assoc_type() -> impl Iterator<Item = impl Sized> {
    let mut _0: impl std::iter::Iterator<Item = impl Sized>;
    let mut _1: &[i32];
    let mut _2: &[i32; 1];

    bb0: {
        _2 = const _;
        _1 = _2 as &[i32] (Pointer(Unsize));
        _0 = core::slice::<impl [i32]>::iter(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in nested_assoc_type: &[i32; 1] = {
    let mut _0: &[i32; 1];
    let mut _1: [i32; 1];

    bb0: {
        _1 = [const 1_i32];
        _0 = &_1;
        return;
    }
}

fn nested_assoc_lifetime() -> impl Iterator<Item = impl Captures<'_>> {
    let mut _0: impl std::iter::Iterator<Item = impl Captures<'_>>;
    let mut _1: &[i32];
    let mut _2: &[i32; 1];

    bb0: {
        _2 = const _;
        _1 = _2 as &[i32] (Pointer(Unsize));
        _0 = core::slice::<impl [i32]>::iter(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in nested_assoc_lifetime: &[i32; 1] = {
    let mut _0: &[i32; 1];
    let mut _1: [i32; 1];

    bb0: {
        _1 = [const 1_i32];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
