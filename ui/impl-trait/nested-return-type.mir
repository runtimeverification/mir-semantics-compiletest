// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn nested_assoc_type() -> impl Iterator<Item = impl Sized> {
    let mut _0: impl std::iter::Iterator<Item = impl Sized>; // return place in scope 0 at ui/impl-trait/nested-return-type.rs:8:38: 8:70
    let mut _1: &[i32];                  // in scope 0 at ui/impl-trait/nested-return-type.rs:9:5: 9:15
    let mut _2: &[i32; 1];               // in scope 0 at ui/impl-trait/nested-return-type.rs:9:5: 9:15
    let mut _3: &[i32; 1];               // in scope 0 at ui/impl-trait/nested-return-type.rs:9:5: 9:15

    bb0: {
        _3 = const _;                    // scope 0 at ui/impl-trait/nested-return-type.rs:9:5: 9:15
                                         // mir::Constant
                                         // + span: ui/impl-trait/nested-return-type.rs:9:5: 9:15
                                         // + literal: Const { ty: &[i32; 1], val: Unevaluated(nested_assoc_type, [ReErased, T], Some(promoted[0])) }
        _2 = _3;                         // scope 0 at ui/impl-trait/nested-return-type.rs:9:5: 9:15
        _1 = move _2 as &[i32] (Pointer(Unsize)); // scope 0 at ui/impl-trait/nested-return-type.rs:9:5: 9:15
        _0 = core::slice::<impl [i32]>::iter(move _1) -> bb1; // scope 0 at ui/impl-trait/nested-return-type.rs:9:5: 9:15
                                         // mir::Constant
                                         // + span: ui/impl-trait/nested-return-type.rs:9:9: 9:13
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> std::slice::Iter<'a, i32> {core::slice::<impl [i32]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/nested-return-type.rs:10:2: 10:2
    }
}

promoted[0] in nested_assoc_type: &[i32; 1] = {
    let mut _0: &[i32; 1];               // return place in scope 0 at ui/impl-trait/nested-return-type.rs:9:5: 9:15
    let mut _1: [i32; 1];                // in scope 0 at ui/impl-trait/nested-return-type.rs:9:5: 9:8

    bb0: {
        _1 = [const 1_i32];              // scope 0 at ui/impl-trait/nested-return-type.rs:9:5: 9:8
        _0 = &_1;                        // scope 0 at ui/impl-trait/nested-return-type.rs:9:5: 9:15
        return;                          // scope 0 at ui/impl-trait/nested-return-type.rs:9:5: 9:15
    }
}

fn nested_assoc_lifetime() -> impl Iterator<Item = impl Captures<'_>> {
    let mut _0: impl std::iter::Iterator<Item = impl Captures<'_>>; // return place in scope 0 at ui/impl-trait/nested-return-type.rs:12:42: 12:81
    let mut _1: &[i32];                  // in scope 0 at ui/impl-trait/nested-return-type.rs:13:5: 13:15
    let mut _2: &[i32; 1];               // in scope 0 at ui/impl-trait/nested-return-type.rs:13:5: 13:15
    let mut _3: &[i32; 1];               // in scope 0 at ui/impl-trait/nested-return-type.rs:13:5: 13:15

    bb0: {
        _3 = const _;                    // scope 0 at ui/impl-trait/nested-return-type.rs:13:5: 13:15
                                         // mir::Constant
                                         // + span: ui/impl-trait/nested-return-type.rs:13:5: 13:15
                                         // + literal: Const { ty: &[i32; 1], val: Unevaluated(nested_assoc_lifetime, [ReErased, T], Some(promoted[0])) }
        _2 = _3;                         // scope 0 at ui/impl-trait/nested-return-type.rs:13:5: 13:15
        _1 = move _2 as &[i32] (Pointer(Unsize)); // scope 0 at ui/impl-trait/nested-return-type.rs:13:5: 13:15
        _0 = core::slice::<impl [i32]>::iter(move _1) -> bb1; // scope 0 at ui/impl-trait/nested-return-type.rs:13:5: 13:15
                                         // mir::Constant
                                         // + span: ui/impl-trait/nested-return-type.rs:13:9: 13:13
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> std::slice::Iter<'a, i32> {core::slice::<impl [i32]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/nested-return-type.rs:14:2: 14:2
    }
}

promoted[0] in nested_assoc_lifetime: &[i32; 1] = {
    let mut _0: &[i32; 1];               // return place in scope 0 at ui/impl-trait/nested-return-type.rs:13:5: 13:15
    let mut _1: [i32; 1];                // in scope 0 at ui/impl-trait/nested-return-type.rs:13:5: 13:8

    bb0: {
        _1 = [const 1_i32];              // scope 0 at ui/impl-trait/nested-return-type.rs:13:5: 13:8
        _0 = &_1;                        // scope 0 at ui/impl-trait/nested-return-type.rs:13:5: 13:15
        return;                          // scope 0 at ui/impl-trait/nested-return-type.rs:13:5: 13:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/nested-return-type.rs:16:11: 16:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/nested-return-type.rs:16:13: 16:13
    }
}
