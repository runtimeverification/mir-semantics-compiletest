// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn no_least_region(_1: &u32, _2: &u32) -> impl MultiRegionTrait<'_, '_> {
    debug x => _1;                       // in scope 0 at ui/impl-trait/needs_least_region_or_bound.rs:6:28: 6:29
    debug y => _2;                       // in scope 0 at ui/impl-trait/needs_least_region_or_bound.rs:6:40: 6:41
    let mut _0: impl MultiRegionTrait<'_, '_>; // return place in scope 0 at ui/impl-trait/needs_least_region_or_bound.rs:6:55: 6:84
    let mut _3: &u32;                    // in scope 0 at ui/impl-trait/needs_least_region_or_bound.rs:18:6: 18:7
    let mut _4: &u32;                    // in scope 0 at ui/impl-trait/needs_least_region_or_bound.rs:18:9: 18:10

    bb0: {
        _3 = _1;                         // scope 0 at ui/impl-trait/needs_least_region_or_bound.rs:18:6: 18:7
        _4 = _2;                         // scope 0 at ui/impl-trait/needs_least_region_or_bound.rs:18:9: 18:10
        _0 = (move _3, move _4);         // scope 0 at ui/impl-trait/needs_least_region_or_bound.rs:18:5: 18:11
        return;                          // scope 0 at ui/impl-trait/needs_least_region_or_bound.rs:19:2: 19:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/needs_least_region_or_bound.rs:21:11: 21:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/needs_least_region_or_bound.rs:21:13: 21:13
    }
}
