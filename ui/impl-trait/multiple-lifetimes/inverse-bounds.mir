// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn upper_bounds(_1: Invert<'_>, _2: Invert<'_>) -> Invert<'_> {
    debug a => _1;                       // in scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:14:37: 14:38
    debug b => _2;                       // in scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:14:52: 14:53
    let mut _0: Invert<'_>;              // return place in scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:42:9: 42:10
    let mut _3: bool;                    // in scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:42:16: 42:27
    scope 1 {
        debug p => _0;                   // in scope 1 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:42:9: 42:10
    }

    bb0: {
        _3 = condition() -> bb1;         // scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:42:16: 42:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:42:16: 42:25
                                         // + literal: Const { ty: fn() -> bool {condition}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:42:16: 42:27
    }

    bb2: {
        _0 = move _1;                    // scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:42:30: 42:31
        goto -> bb4;                     // scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:42:13: 42:44
    }

    bb3: {
        _0 = move _2;                    // scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:42:41: 42:42
        goto -> bb4;                     // scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:42:13: 42:44
    }

    bb4: {
        return;                          // scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:44:2: 44:2
    }
}

fn condition() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:46:19: 46:23

    bb0: {
        _0 = const true;                 // scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:47:5: 47:9
        return;                          // scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:48:2: 48:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:50:11: 50:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:50:13: 50:13
    }
}

fn Invert(_1: fn(&u8)) -> Invert<'_> {
    let mut _0: Invert<'_>;              // return place in scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:12:1: 12:18

    bb0: {
        _0 = Invert::<'_>(move _1);      // scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:12:1: 12:18
        return;                          // scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:12:1: 12:18
    }
}

// MIR FOR CTFE
fn Invert(_1: fn(&u8)) -> Invert<'_> {
    let mut _0: Invert<'_>;              // return place in scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:12:1: 12:18

    bb0: {
        _0 = Invert::<'_>(move _1);      // scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:12:1: 12:18
        return;                          // scope 0 at ui/impl-trait/multiple-lifetimes/inverse-bounds.rs:12:1: 12:18
    }
}
