// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn upper_bounds(_1: &u8, _2: &u8) -> Foo<'_, '_> {
    debug a => _1;                       // in scope 0 at ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs:13:25: 13:26
    debug b => _2;                       // in scope 0 at ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs:13:36: 13:37
    let mut _0: Foo<'_, '_>;             // return place in scope 0 at ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs:13:50: 13:61
    let mut _3: &u8;                     // in scope 0 at ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs:25:6: 25:7
    let mut _4: &u8;                     // in scope 0 at ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs:25:9: 25:10

    bb0: {
        _3 = _1;                         // scope 0 at ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs:25:6: 25:7
        _4 = _2;                         // scope 0 at ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs:25:9: 25:10
        _0 = (move _3, move _4);         // scope 0 at ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs:25:5: 25:11
        return;                          // scope 0 at ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs:26:2: 26:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs:28:11: 28:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs:28:13: 28:13
    }
}
