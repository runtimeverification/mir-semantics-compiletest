// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bug(_1: impl Iterator<Item = [(); { |x: u32| { x }; 4 }]>) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:3:62: 3:62

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:3:63: 3:64
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:3:64: 3:64
    }
}

bug::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:3:37: 3:58
    let _1: [closure@ui/impl-trait/closure-in-impl-trait-arg.rs:3:39: 3:47]; // in scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:3:39: 3:53

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:3:39: 3:53
        _1 = [closure@ui/impl-trait/closure-in-impl-trait-arg.rs:3:39: 3:47]; // scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:3:39: 3:53
                                         // closure
                                         // + def_id: DefId(0:5 ~ closure_in_impl_trait_arg[9485]::bug::{constant#0}::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn((u32,)) -> u32,
                                         //     (),
                                         // ]
        StorageDead(_1);                 // scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:3:53: 3:54
        _0 = const 4_usize;              // scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:3:55: 3:56
        return;                          // scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:3:37: 3:58
    }
}

fn bug::{constant#0}::{closure#0}(_1: &[closure@ui/impl-trait/closure-in-impl-trait-arg.rs:3:39: 3:47], _2: u32) -> u32 {
    debug x => _2;                       // in scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:3:40: 3:41
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:3:48: 3:48

    bb0: {
        _0 = _2;                         // scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:3:50: 3:51
        return;                          // scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:3:53: 3:53
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:5:11: 5:11
    let _1: ();                          // in scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:6:5: 6:28
    let mut _2: std::iter::Empty<[(); 4]>; // in scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:6:9: 6:27

    bb0: {
        _2 = std::iter::empty::<[(); 4]>() -> bb1; // scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:6:9: 6:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/closure-in-impl-trait-arg.rs:6:9: 6:25
                                         // + literal: Const { ty: fn() -> std::iter::Empty<[(); 4]> {std::iter::empty::<[(); 4]>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = bug::<std::iter::Empty<[(); 4]>>(move _2) -> bb2; // scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:6:5: 6:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/closure-in-impl-trait-arg.rs:6:5: 6:8
                                         // + literal: Const { ty: fn(std::iter::Empty<[(); 4]>) {bug::<std::iter::Empty<[(); 4]>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/closure-in-impl-trait-arg.rs:7:2: 7:2
    }
}
