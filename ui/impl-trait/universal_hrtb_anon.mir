// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn hrtb(_1: impl Fn(&u32) -> u32) -> u32 {
    debug f => _1;                       // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:3:9: 3:10
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:3:37: 3:40
    let mut _2: u32;                     // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:5: 4:11
    let mut _3: &impl Fn(&u32) -> u32;   // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:5: 4:6
    let mut _4: (&u32,);                 // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:5: 4:11
    let mut _5: &u32;                    // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:7: 4:10
    let _6: &u32;                        // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:7: 4:10
    let mut _7: u32;                     // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:14: 4:20
    let mut _8: &impl Fn(&u32) -> u32;   // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:14: 4:15
    let mut _9: (&u32,);                 // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:14: 4:20
    let mut _10: &u32;                   // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:16: 4:19
    let _11: &u32;                       // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:16: 4:19
    let mut _12: (u32, bool);            // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:5: 4:20
    let mut _13: &u32;                   // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:16: 4:19
    let mut _14: &u32;                   // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:7: 4:10

    bb0: {
        _3 = &_1;                        // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:5: 4:6
        _14 = const _;                   // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:7: 4:10
                                         // mir::Constant
                                         // + span: ui/impl-trait/universal_hrtb_anon.rs:4:7: 4:10
                                         // + literal: Const { ty: &u32, val: Unevaluated(hrtb, [impl Fn(&u32) -> u32], Some(promoted[1])) }
        _6 = _14;                        // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:7: 4:10
        _5 = _6;                         // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:7: 4:10
        _4 = (move _5,);                 // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:5: 4:11
        _2 = <impl Fn(&u32) -> u32 as Fn<(&u32,)>>::call(move _3, move _4) -> [return: bb1, unwind: bb5]; // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:5: 4:11
                                         // mir::Constant
                                         // + span: ui/impl-trait/universal_hrtb_anon.rs:4:5: 4:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a impl Fn(&u32) -> u32, (&u32,)) -> <impl Fn(&u32) -> u32 as FnOnce<(&u32,)>>::Output {<impl Fn(&u32) -> u32 as Fn<(&u32,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_1;                        // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:14: 4:15
        _13 = const _;                   // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:16: 4:19
                                         // mir::Constant
                                         // + span: ui/impl-trait/universal_hrtb_anon.rs:4:16: 4:19
                                         // + literal: Const { ty: &u32, val: Unevaluated(hrtb, [impl Fn(&u32) -> u32], Some(promoted[0])) }
        _11 = _13;                       // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:16: 4:19
        _10 = _11;                       // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:16: 4:19
        _9 = (move _10,);                // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:14: 4:20
        _7 = <impl Fn(&u32) -> u32 as Fn<(&u32,)>>::call(move _8, move _9) -> [return: bb2, unwind: bb5]; // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:14: 4:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/universal_hrtb_anon.rs:4:14: 4:15
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a impl Fn(&u32) -> u32, (&u32,)) -> <impl Fn(&u32) -> u32 as FnOnce<(&u32,)>>::Output {<impl Fn(&u32) -> u32 as Fn<(&u32,)>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = CheckedAdd(_2, _7);        // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:5: 4:20
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _7) -> [success: bb3, unwind: bb5]; // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:5: 4:20
    }

    bb3: {
        _0 = move (_12.0: u32);          // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:5: 4:20
        drop(_1) -> bb4;                 // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:5:1: 5:2
    }

    bb4: {
        return;                          // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:5:2: 5:2
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:5:1: 5:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:3:1: 5:2
    }
}

promoted[0] in hrtb: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:16: 4:19
    let mut _1: u32;                     // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:17: 4:19

    bb0: {
        _1 = const 44_u32;               // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:17: 4:19
        _0 = &_1;                        // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:16: 4:19
        return;                          // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:16: 4:19
    }
}

promoted[1] in hrtb: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:7: 4:10
    let mut _1: u32;                     // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:8: 4:10

    bb0: {
        _1 = const 22_u32;               // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:8: 4:10
        _0 = &_1;                        // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:7: 4:10
        return;                          // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:4:7: 4:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:7:11: 7:11
    let _1: u32;                         // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:8:9: 8:12
    let mut _2: [closure@ui/impl-trait/universal_hrtb_anon.rs:8:20: 8:23]; // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:8:20: 8:29
    let mut _3: (&u32, &u32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug sum => _1;                 // in scope 1 at ui/impl-trait/universal_hrtb_anon.rs:8:9: 8:12
        let _6: &u32;                    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _7: &u32;                    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _20: &u32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _6;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _7;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _12: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _12;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = hrtb::<[closure@ui/impl-trait/universal_hrtb_anon.rs:8:20: 8:23]>(move _2) -> bb1; // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:8:15: 8:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/universal_hrtb_anon.rs:8:15: 8:19
                                         // + literal: Const { ty: fn([closure@ui/impl-trait/universal_hrtb_anon.rs:8:20: 8:23]) -> u32 {hrtb::<[closure@ui/impl-trait/universal_hrtb_anon.rs:8:20: 8:23]>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _20 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _20;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &u32);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &u32);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = (*_6);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = const 132_u32;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = Eq(move _10, move _11);     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _8 = Not(move _9);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<u32, u32>(move _14, move _15, move _17, move _19); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:10:2: 10:2
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:9:21: 9:32
    let mut _2: (u32, bool);             // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:9:21: 9:32
    let mut _3: u32;                     // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:9:21: 9:25
    let mut _4: (u32, bool);             // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:9:21: 9:25
    let mut _5: u32;                     // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:9:28: 9:32
    let mut _6: (u32, bool);             // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:9:28: 9:32

    bb0: {
        _4 = CheckedMul(const 22_u32, const 2_u32); // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:9:21: 9:25
        _3 = move (_4.0: u32);           // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:9:21: 9:25
        _6 = CheckedMul(const 44_u32, const 2_u32); // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:9:28: 9:32
        _5 = move (_6.0: u32);           // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:9:28: 9:32
        _2 = CheckedAdd(_3, _5);         // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:9:21: 9:32
        _1 = move (_2.0: u32);           // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:9:21: 9:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: &[closure@ui/impl-trait/universal_hrtb_anon.rs:8:20: 8:23], _2: &u32) -> u32 {
    debug x => _2;                       // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:8:21: 8:22
    let mut _0: u32;                     // return place in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:8:24: 8:24
    let mut _3: &u32;                    // in scope 0 at ui/impl-trait/universal_hrtb_anon.rs:8:24: 8:25

    bb0: {
        _3 = _2;                         // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:8:24: 8:25
        _0 = <&u32 as Mul<u32>>::mul(move _3, const 2_u32) -> bb1; // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:8:24: 8:29
                                         // mir::Constant
                                         // + span: ui/impl-trait/universal_hrtb_anon.rs:8:24: 8:29
                                         // + literal: Const { ty: fn(&u32, u32) -> <&u32 as Mul<u32>>::Output {<&u32 as Mul<u32>>::mul}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/universal_hrtb_anon.rs:8:29: 8:29
    }
}
