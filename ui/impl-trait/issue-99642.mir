// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test() -> impl Iterator<Item = impl Sized> {
    let mut _0: impl std::iter::Iterator<Item = impl Sized>;
    let mut _1: std::boxed::Box<dyn std::iter::Iterator<Item = i32>>;
    let mut _2: std::boxed::Box<std::ops::RangeFrom<i32>>;
    let mut _3: std::ops::RangeFrom<i32>;

    bb0: {
        _3 = RangeFrom::<i32> { start: const 0_i32 };
        _2 = Box::<RangeFrom<i32>>::new(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2 as std::boxed::Box<dyn std::iter::Iterator<Item = i32>> (PointerCoercion(Unsize));
        _0 = move _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
