// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test() -> impl Iterator<Item = impl Sized> {
    let mut _0: impl std::iter::Iterator<Item = impl Sized>; // return place in scope 0 at ui/impl-trait/issue-99642.rs:3:14: 3:46
    let mut _1: std::boxed::Box<dyn std::iter::Iterator<Item = i32>>; // in scope 0 at ui/impl-trait/issue-99642.rs:4:5: 4:49
    let mut _2: std::boxed::Box<dyn std::iter::Iterator<Item = i32>>; // in scope 0 at ui/impl-trait/issue-99642.rs:4:5: 4:49
    let mut _3: std::boxed::Box<std::ops::RangeFrom<i32>>; // in scope 0 at ui/impl-trait/issue-99642.rs:4:5: 4:18
    let mut _4: std::ops::RangeFrom<i32>; // in scope 0 at ui/impl-trait/issue-99642.rs:4:14: 4:17

    bb0: {
        _4 = const RangeFrom::<i32> {{ start: 0_i32 }}; // scope 0 at ui/impl-trait/issue-99642.rs:4:14: 4:17
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-99642.rs:4:14: 4:17
                                         // + literal: Const { ty: RangeFrom<i32>, val: Value(Scalar(0x00000000)) }
        _3 = Box::<RangeFrom<i32>>::new(move _4) -> bb1; // scope 0 at ui/impl-trait/issue-99642.rs:4:5: 4:18
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-99642.rs:4:5: 4:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(RangeFrom<i32>) -> Box<RangeFrom<i32>> {Box::<RangeFrom<i32>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = move _3 as std::boxed::Box<dyn std::iter::Iterator<Item = i32>> (Pointer(Unsize)); // scope 0 at ui/impl-trait/issue-99642.rs:4:5: 4:18
        _1 = move _2;                    // scope 0 at ui/impl-trait/issue-99642.rs:4:5: 4:49
        _0 = move _1 as std::boxed::Box<dyn std::iter::Iterator<Item = i32>> (Pointer(Unsize)); // scope 0 at ui/impl-trait/issue-99642.rs:4:5: 4:49
        return;                          // scope 0 at ui/impl-trait/issue-99642.rs:5:2: 5:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/issue-99642.rs:7:11: 7:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/issue-99642.rs:7:13: 7:13
    }
}
