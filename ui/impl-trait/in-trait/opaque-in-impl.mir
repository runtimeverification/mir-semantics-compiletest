// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/in-trait/opaque-in-impl.rs:14:1: 14:16>::foo(_1: &()) -> impl Debug {
    debug self => _1;
    let mut _0: impl std::fmt::Debug;

    bb0: {
        _0 = const "Hello, world";
        return;
    }
}

fn <impl at ui/impl-trait/in-trait/opaque-in-impl.rs:20:1: 20:61>::foo(_1: &PhantomData<T>) -> impl Debug {
    debug self => _1;
    let mut _0: impl std::fmt::Debug;

    bb0: {
        _0 = <T as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/impl-trait/in-trait/opaque-in-impl.rs:30:1: 30:16>::bar(_1: &()) -> impl Debug {
    debug self => _1;
    let mut _0: impl std::fmt::Debug;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &&str;
    let _10: &str;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _11 = const _;
        _4 = _11 as &[&str] (Pointer(Unsize));
        _10 = std::any::type_name::<T>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = format(move _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = move _2;
        return;
    }
}

promoted[0] in <impl at ui/impl-trait/in-trait/opaque-in-impl.rs:30:1: 30:16>::bar: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Hello with generic "];
        _0 = &_1;
        return;
    }
}

fn <impl at ui/impl-trait/in-trait/opaque-in-impl.rs:40:1: 40:20>::baz(_1: &String) -> impl Debug + '_ {
    debug self => _1;
    let mut _0: impl std::fmt::Debug + '_;

    bb0: {
        _0 = (_1,);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &impl std::fmt::Debug;
    let _9: impl std::fmt::Debug;
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &impl std::fmt::Debug;
    let _18: impl std::fmt::Debug;
    let _19: ();
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    let _26: &impl std::fmt::Debug + '_;
    let _27: impl std::fmt::Debug + '_;
    let mut _28: &std::string::String;
    let _29: std::string::String;
    let _30: &str;
    let mut _31: &[&str; 2];
    let mut _32: &();
    let mut _33: &[&str; 2];
    let mut _34: &();
    let mut _35: &[&str; 2];

    bb0: {
        _35 = const _;
        _3 = _35 as &[&str] (Pointer(Unsize));
        _34 = const _;
        _9 = <() as Foo>::foo(_34) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &_9;
        _7 = core::fmt::rt::Argument::<'_>::new_debug::<impl Debug>(_8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = _print(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _33 = const _;
        _12 = _33 as &[&str] (Pointer(Unsize));
        _32 = const _;
        _18 = <() as Bar>::bar::<u64>(_32) -> [return: bb5, unwind continue];
    }

    bb5: {
        _17 = &_18;
        _16 = core::fmt::rt::Argument::<'_>::new_debug::<impl Debug>(_17) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _10 = _print(move _11) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        drop(_18) -> [return: bb9, unwind continue];
    }

    bb9: {
        _31 = const _;
        _21 = _31 as &[&str] (Pointer(Unsize));
        _30 = const "hi";
        _29 = <str as ToString>::to_string(_30) -> [return: bb10, unwind continue];
    }

    bb10: {
        _28 = &_29;
        _27 = <String as Baz>::baz(move _28) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _26 = &_27;
        _25 = core::fmt::rt::Argument::<'_>::new_debug::<impl Debug + '_>(_26) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _24 = [move _25];
        _23 = &_24;
        _22 = _23 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _20 = Arguments::<'_>::new_v1(move _21, move _22) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        _19 = _print(move _20) -> [return: bb14, unwind: bb16];
    }

    bb14: {
        drop(_29) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_29) -> [return: bb18, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_18) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
