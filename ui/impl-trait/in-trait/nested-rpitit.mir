// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/in-trait/nested-rpitit.rs:15:1: 15:15>::bar(_1: A) -> &str {
    debug self => _1;                    // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:16:12: 16:16
    let mut _0: &str;                    // return place in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:16:21: 16:33

    bb0: {
        _0 = const "Hello, world";       // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:17:9: 17:23
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/nested-rpitit.rs:17:9: 17:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:18:6: 18:6
    }
}

fn <impl at ui/impl-trait/in-trait/nested-rpitit.rs:23:1: 23:15>::bar(_1: B) -> Box<i32> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:24:12: 24:16
    let mut _0: std::boxed::Box<i32>;    // return place in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:24:21: 24:29

    bb0: {
        _0 = Box::<i32>::new(const 42_i32) -> bb1; // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:25:9: 25:21
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/nested-rpitit.rs:25:9: 25:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:26:6: 26:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:29:11: 29:11
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:14: 30:37
    let mut _4: &[&str; 2];              // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:14: 30:37
    let _5: &[&str; 2];                  // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:14: 30:37
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:39: 30:48
    let mut _11: &&str;                  // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:39: 30:48
    let _12: &&str;                      // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:39: 30:48
    let _13: &str;                       // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:39: 30:48
    let _14: &str;                       // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:41: 30:48
    let mut _15: A;                      // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:41: 30:42
    let _16: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _17: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _18: &[&str];                // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:14: 31:37
    let mut _19: &[&str; 2];             // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:14: 31:37
    let _20: &[&str; 2];                 // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:14: 31:37
    let mut _21: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _22: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _23: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _24: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _25: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:39: 31:48
    let mut _26: &&i32;                  // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:39: 31:48
    let _27: &&i32;                      // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:39: 31:48
    let _28: &i32;                       // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:39: 31:48
    let _29: std::boxed::Box<i32>;       // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:41: 31:48
    let mut _30: B;                      // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:41: 31:42
    let mut _31: &[&str; 2];             // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:14: 31:37
    let mut _32: &[&str; 2];             // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:14: 30:37
    let mut _33: *const i32;             // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:41: 31:48

    bb0: {
        _32 = const _;                   // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:14: 30:37
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/nested-rpitit.rs:30:14: 30:37
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _5 = _32;                        // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:14: 30:37
        _4 = _5;                         // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:14: 30:37
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:14: 30:37
        _14 = <A as Foo>::bar(move _15) -> bb1; // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:41: 30:48
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/nested-rpitit.rs:30:43: 30:46
                                         // + literal: Const { ty: fn(A) -> impl Deref<Target = impl std::fmt::Display + ?Sized> {<A as Foo>::bar}, val: Value(<ZST>) }
    }

    bb1: {
        _13 = _14;                       // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:39: 30:48
        _12 = &_13;                      // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:39: 30:48
        _11 = _12;                       // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:39: 30:48
        _10 = core::fmt::ArgumentV1::<'_>::new_debug::<&str>(move _11) -> bb2; // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:39: 30:48
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/nested-rpitit.rs:30:39: 30:48
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&str>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = [move _10];                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = _print(move _2) -> bb4;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        _31 = const _;                   // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:14: 31:37
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/nested-rpitit.rs:31:14: 31:37
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _20 = _31;                       // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:14: 31:37
        _19 = _20;                       // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:14: 31:37
        _18 = move _19 as &[&str] (Pointer(Unsize)); // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:14: 31:37
        _29 = <B as Foo>::bar(move _30) -> bb5; // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:41: 31:48
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/nested-rpitit.rs:31:43: 31:46
                                         // + literal: Const { ty: fn(B) -> impl Deref<Target = impl std::fmt::Display + ?Sized> {<B as Foo>::bar}, val: Value(<ZST>) }
    }

    bb5: {
        _33 = (((_29.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:39: 31:48
        _28 = &(*_33);                   // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:39: 31:48
        _27 = &_28;                      // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:39: 31:48
        _26 = _27;                       // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:39: 31:48
        _25 = core::fmt::ArgumentV1::<'_>::new_debug::<&i32>(move _26) -> [return: bb6, unwind: bb10]; // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:39: 31:48
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/nested-rpitit.rs:31:39: 31:48
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b &i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&i32>}, val: Value(<ZST>) }
    }

    bb6: {
        _24 = [move _25];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _23 = &_24;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _22 = _23;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = move _22 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _17 = Arguments::<'_>::new_v1(move _18, move _21) -> [return: bb7, unwind: bb10]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = _print(move _17) -> [return: bb8, unwind: bb10]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_29) -> bb9;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb9: {
        return;                          // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:32:2: 32:2
    }

    bb10 (cleanup): {
        drop(_29) -> bb11;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:29:1: 32:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:14: 31:37
    let mut _1: [&str; 2];               // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:14: 31:37

    bb0: {
        _1 = [const "Another for you: ", const "\n"]; // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:14: 31:37
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/nested-rpitit.rs:31:14: 31:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/nested-rpitit.rs:31:14: 31:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:14: 31:37
        return;                          // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:31:14: 31:37
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:14: 30:37
    let mut _1: [&str; 2];               // in scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:14: 30:37

    bb0: {
        _1 = [const "Message for you: ", const "\n"]; // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:14: 30:37
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/nested-rpitit.rs:30:14: 30:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/nested-rpitit.rs:30:14: 30:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:14: 30:37
        return;                          // scope 0 at ui/impl-trait/in-trait/nested-rpitit.rs:30:14: 30:37
    }
}
