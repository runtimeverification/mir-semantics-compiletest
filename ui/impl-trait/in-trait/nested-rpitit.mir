// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/in-trait/nested-rpitit.rs:17:1: 17:15>::bar(_1: A) -> &str {
    debug self => const A;
    let mut _0: &str;

    bb0: {
        _0 = const "Hello, world";
        return;
    }
}

fn <impl at ui/impl-trait/in-trait/nested-rpitit.rs:25:1: 25:15>::bar(_1: B) -> Box<i32> {
    debug self => const B;
    let mut _0: std::boxed::Box<i32>;

    bb0: {
        _0 = Box::<i32>::new(const 42_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &&str;
    let _9: &str;
    let _10: &str;
    let _11: ();
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: [core::fmt::rt::Argument<'_>; 1];
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &&i32;
    let _19: &i32;
    let _20: std::boxed::Box<i32>;
    let mut _21: &[&str; 2];
    let mut _22: &[&str; 2];
    let mut _23: *const i32;
    let mut _24: *const ();
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: bool;

    bb0: {
        _22 = const _;
        _3 = _22 as &[&str] (Pointer(Unsize));
        _10 = <A as Foo>::bar(const A) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = _10;
        _8 = &_9;
        _7 = core::fmt::rt::Argument::<'_>::new_debug::<&str>(_8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = _print(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _21 = const _;
        _13 = _21 as &[&str] (Pointer(Unsize));
        _20 = <B as Foo>::bar(const B) -> [return: bb5, unwind continue];
    }

    bb5: {
        _23 = (((_20.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _24 = _23 as *const () (PtrToPtr);
        _25 = _24 as usize (Transmute);
        _26 = AlignOf(i32);
        _27 = Sub(_26, const 1_usize);
        _28 = BitAnd(_25, _27);
        _29 = Eq(_28, const 0_usize);
        assert(_29, "misaligned pointer dereference: address must be a multiple of {} but is {}", _26, _25) -> [success: bb12, unwind unreachable];
    }

    bb6: {
        _16 = [move _17];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _11 = _print(move _12) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        drop(_20) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_20) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        _19 = &(*_23);
        _18 = &_19;
        _17 = core::fmt::rt::Argument::<'_>::new_debug::<&i32>(_18) -> [return: bb6, unwind: bb10];
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Another for you: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Message for you: ", const "\n"];
        _0 = &_1;
        return;
    }
}
