// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/in-trait/where-clause.rs:15:1: 15:45>::foo(_1: &D) -> impl Debug {
    debug self => _1;                    // in scope 0 at ui/impl-trait/in-trait/where-clause.rs:16:16: 16:24
    let mut _0: impl std::fmt::Debug;    // return place in scope 0 at ui/impl-trait/in-trait/where-clause.rs:16:29: 16:39
    let mut _2: &D;                      // in scope 0 at ui/impl-trait/in-trait/where-clause.rs:20:9: 20:21

    bb0: {
        _2 = _1;                         // scope 0 at ui/impl-trait/in-trait/where-clause.rs:20:9: 20:21
        _0 = <D as Clone>::clone(move _2) -> bb1; // scope 0 at ui/impl-trait/in-trait/where-clause.rs:20:9: 20:21
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/where-clause.rs:20:14: 20:19
                                         // + literal: Const { ty: for<'a> fn(&'a D) -> D {<D as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/in-trait/where-clause.rs:21:6: 21:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/in-trait/where-clause.rs:24:11: 24:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/in-trait/where-clause.rs:24:13: 24:13
    }
}
