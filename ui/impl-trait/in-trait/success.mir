// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/in-trait/success.rs:14:1: 14:17>::bar(_1: &i32) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/impl-trait/in-trait/success.rs:20:1: 20:26>::bar(_1: &&str) -> &str {
    debug self => _1;
    let mut _0: &str;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/impl-trait/in-trait/success.rs:28:1: 28:17>::bar(_1: &Yay) -> String {
    debug self => _1;
    let mut _0: std::string::String;

    bb0: {
        _0 = <String as From<&str>>::from(const ":^)") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn foo_generically(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &impl std::fmt::Display;
    let _10: impl std::fmt::Display;
    let mut _11: &T;
    let mut _12: &[&str; 2];

    bb0: {
        _12 = const _;
        _4 = _12 as &[&str] (Pointer(Unsize));
        _11 = &_1;
        _10 = <T as Foo>::bar(move _11) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<impl std::fmt::Display>(_9) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _2 = _print(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_10) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        drop(_1) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_10) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

promoted[0] in foo_generically: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &&str;
    let _9: &str;
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &i32;
    let _18: i32;
    let _19: ();
    let mut _20: &i32;
    let mut _21: &[&str; 2];
    let mut _22: &&str;
    let mut _23: &[&str; 2];

    bb0: {
        _23 = const _;
        _3 = _23 as &[&str] (Pointer(Unsize));
        _22 = const _;
        _9 = <&str as Foo>::bar(_22) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &_9;
        _7 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = _print(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _21 = const _;
        _12 = _21 as &[&str] (Pointer(Unsize));
        _20 = const _;
        _18 = <i32 as Foo>::bar(_20) -> [return: bb5, unwind continue];
    }

    bb5: {
        _17 = &_18;
        _16 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_17) -> [return: bb6, unwind continue];
    }

    bb6: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = _print(move _11) -> [return: bb8, unwind continue];
    }

    bb8: {
        _19 = foo_generically::<Yay>(const Yay) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "The answer is ", const "!\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Hello, world.";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
