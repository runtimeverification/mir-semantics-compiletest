// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/in-trait/success.rs:12:1: 12:17>::bar(_1: &i32) -> i32 {
    debug self => _1;                    // in scope 0 at ui/impl-trait/in-trait/success.rs:13:12: 13:17
    let mut _0: i32;                     // return place in scope 0 at ui/impl-trait/in-trait/success.rs:13:22: 13:25

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/impl-trait/in-trait/success.rs:14:9: 14:14
        return;                          // scope 0 at ui/impl-trait/in-trait/success.rs:15:6: 15:6
    }
}

fn <impl at ui/impl-trait/in-trait/success.rs:18:1: 18:26>::bar(_1: &&str) -> &str {
    debug self => _1;                    // in scope 0 at ui/impl-trait/in-trait/success.rs:19:12: 19:17
    let mut _0: &str;                    // return place in scope 0 at ui/impl-trait/in-trait/success.rs:19:22: 19:34

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/impl-trait/in-trait/success.rs:20:9: 20:14
        return;                          // scope 0 at ui/impl-trait/in-trait/success.rs:21:6: 21:6
    }
}

fn <impl at ui/impl-trait/in-trait/success.rs:26:1: 26:17>::bar(_1: &Yay) -> String {
    debug self => _1;                    // in scope 0 at ui/impl-trait/in-trait/success.rs:27:12: 27:17
    let mut _0: std::string::String;     // return place in scope 0 at ui/impl-trait/in-trait/success.rs:27:22: 27:28

    bb0: {
        _0 = <String as From<&str>>::from(const ":^)") -> bb1; // scope 0 at ui/impl-trait/in-trait/success.rs:28:9: 28:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:28:9: 28:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:28:22: 28:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/in-trait/success.rs:29:6: 29:6
    }
}

fn foo_generically(_1: T) -> () {
    debug t => _1;                       // in scope 0 at ui/impl-trait/in-trait/success.rs:32:28: 32:29
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/in-trait/success.rs:32:34: 32:34
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/impl-trait/in-trait/success.rs:33:14: 33:18
    let mut _5: &[&str; 2];              // in scope 0 at ui/impl-trait/in-trait/success.rs:33:14: 33:18
    let _6: &[&str; 2];                  // in scope 0 at ui/impl-trait/in-trait/success.rs:33:14: 33:18
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/in-trait/success.rs:33:20: 33:27
    let mut _12: &impl std::fmt::Display; // in scope 0 at ui/impl-trait/in-trait/success.rs:33:20: 33:27
    let _13: &impl std::fmt::Display;    // in scope 0 at ui/impl-trait/in-trait/success.rs:33:20: 33:27
    let _14: impl std::fmt::Display;     // in scope 0 at ui/impl-trait/in-trait/success.rs:33:20: 33:27
    let mut _15: &T;                     // in scope 0 at ui/impl-trait/in-trait/success.rs:33:20: 33:27
    let mut _16: &[&str; 2];             // in scope 0 at ui/impl-trait/in-trait/success.rs:33:14: 33:18

    bb0: {
        _16 = const _;                   // scope 0 at ui/impl-trait/in-trait/success.rs:33:14: 33:18
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:33:14: 33:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(foo_generically, [T], Some(promoted[0])) }
        _6 = _16;                        // scope 0 at ui/impl-trait/in-trait/success.rs:33:14: 33:18
        _5 = _6;                         // scope 0 at ui/impl-trait/in-trait/success.rs:33:14: 33:18
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/impl-trait/in-trait/success.rs:33:14: 33:18
        _15 = &_1;                       // scope 0 at ui/impl-trait/in-trait/success.rs:33:20: 33:27
        _14 = <T as Foo>::bar(move _15) -> [return: bb1, unwind: bb8]; // scope 0 at ui/impl-trait/in-trait/success.rs:33:20: 33:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:33:22: 33:25
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> impl std::fmt::Display {<T as Foo>::bar}, val: Value(<ZST>) }
    }

    bb1: {
        _13 = &_14;                      // scope 0 at ui/impl-trait/in-trait/success.rs:33:20: 33:27
        _12 = _13;                       // scope 0 at ui/impl-trait/in-trait/success.rs:33:20: 33:27
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<impl std::fmt::Display>(move _12) -> [return: bb2, unwind: bb7]; // scope 0 at ui/impl-trait/in-trait/success.rs:33:20: 33:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:33:20: 33:27
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b impl std::fmt::Display) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<impl std::fmt::Display>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb3, unwind: bb7]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = _print(move _3) -> [return: bb4, unwind: bb7]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_14) -> [return: bb5, unwind: bb8]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb5: {
        drop(_1) -> bb6;                 // scope 0 at ui/impl-trait/in-trait/success.rs:34:1: 34:2
    }

    bb6: {
        return;                          // scope 0 at ui/impl-trait/in-trait/success.rs:34:2: 34:2
    }

    bb7 (cleanup): {
        drop(_14) -> bb8;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb8 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at ui/impl-trait/in-trait/success.rs:34:1: 34:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/in-trait/success.rs:32:1: 34:2
    }
}

promoted[0] in foo_generically: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/impl-trait/in-trait/success.rs:33:14: 33:18
    let mut _1: [&str; 2];               // in scope 0 at ui/impl-trait/in-trait/success.rs:33:14: 33:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/impl-trait/in-trait/success.rs:33:14: 33:18
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:33:14: 33:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:33:14: 33:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/in-trait/success.rs:33:14: 33:18
        return;                          // scope 0 at ui/impl-trait/in-trait/success.rs:33:14: 33:18
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/in-trait/success.rs:36:11: 36:11
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/impl-trait/in-trait/success.rs:37:14: 37:18
    let mut _4: &[&str; 2];              // in scope 0 at ui/impl-trait/in-trait/success.rs:37:14: 37:18
    let _5: &[&str; 2];                  // in scope 0 at ui/impl-trait/in-trait/success.rs:37:14: 37:18
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:41
    let mut _11: &&str;                  // in scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:41
    let _12: &&str;                      // in scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:41
    let _13: &str;                       // in scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:41
    let mut _14: &&str;                  // in scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:41
    let _15: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _16: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _17: &[&str];                // in scope 0 at ui/impl-trait/in-trait/success.rs:38:14: 38:33
    let mut _18: &[&str; 2];             // in scope 0 at ui/impl-trait/in-trait/success.rs:38:14: 38:33
    let _19: &[&str; 2];                 // in scope 0 at ui/impl-trait/in-trait/success.rs:38:14: 38:33
    let mut _20: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _21: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _22: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _23: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _24: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:43
    let mut _25: &i32;                   // in scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:43
    let _26: &i32;                       // in scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:43
    let _27: i32;                        // in scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:43
    let mut _28: &i32;                   // in scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:43
    let _29: ();                         // in scope 0 at ui/impl-trait/in-trait/success.rs:39:5: 39:25
    let mut _30: Yay;                    // in scope 0 at ui/impl-trait/in-trait/success.rs:39:21: 39:24
    let mut _31: &i32;                   // in scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:43
    let mut _32: &[&str; 2];             // in scope 0 at ui/impl-trait/in-trait/success.rs:38:14: 38:33
    let mut _33: &&str;                  // in scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:41
    let mut _34: &[&str; 2];             // in scope 0 at ui/impl-trait/in-trait/success.rs:37:14: 37:18

    bb0: {
        _34 = const _;                   // scope 0 at ui/impl-trait/in-trait/success.rs:37:14: 37:18
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:37:14: 37:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[3])) }
        _5 = _34;                        // scope 0 at ui/impl-trait/in-trait/success.rs:37:14: 37:18
        _4 = _5;                         // scope 0 at ui/impl-trait/in-trait/success.rs:37:14: 37:18
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/impl-trait/in-trait/success.rs:37:14: 37:18
        _33 = const _;                   // scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:41
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:37:20: 37:41
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[2])) }
        _14 = _33;                       // scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:41
        _13 = <&str as Foo>::bar(move _14) -> bb1; // scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:41
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:37:36: 37:39
                                         // + literal: Const { ty: for<'a> fn(&'a &str) -> impl std::fmt::Display {<&str as Foo>::bar}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = &_13;                      // scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:41
        _11 = _12;                       // scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:41
        _10 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _11) -> bb2; // scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:41
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:37:20: 37:41
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = [move _10];                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = _print(move _2) -> bb4;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        _32 = const _;                   // scope 0 at ui/impl-trait/in-trait/success.rs:38:14: 38:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:38:14: 38:33
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _19 = _32;                       // scope 0 at ui/impl-trait/in-trait/success.rs:38:14: 38:33
        _18 = _19;                       // scope 0 at ui/impl-trait/in-trait/success.rs:38:14: 38:33
        _17 = move _18 as &[&str] (Pointer(Unsize)); // scope 0 at ui/impl-trait/in-trait/success.rs:38:14: 38:33
        _31 = const _;                   // scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:43
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:38:35: 38:43
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _28 = _31;                       // scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:43
        _27 = <i32 as Foo>::bar(move _28) -> bb5; // scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:43
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:38:38: 38:41
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> impl std::fmt::Display {<i32 as Foo>::bar}, val: Value(<ZST>) }
    }

    bb5: {
        _26 = &_27;                      // scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:43
        _25 = _26;                       // scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:43
        _24 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _25) -> bb6; // scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:43
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:38:35: 38:43
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb6: {
        _23 = [move _24];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _22 = &_23;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = _22;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = move _21 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _16 = Arguments::<'_>::new_v1(move _17, move _20) -> bb7; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = _print(move _16) -> bb8;   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb8: {
        _29 = foo_generically::<Yay>(move _30) -> bb9; // scope 0 at ui/impl-trait/in-trait/success.rs:39:5: 39:25
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:39:5: 39:20
                                         // + literal: Const { ty: fn(Yay) {foo_generically::<Yay>}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/impl-trait/in-trait/success.rs:40:2: 40:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:43
    let mut _1: i32;                     // in scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:37

    bb0: {
        _1 = const 42_i32;               // scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:37
        _0 = &_1;                        // scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:43
        return;                          // scope 0 at ui/impl-trait/in-trait/success.rs:38:35: 38:43
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/impl-trait/in-trait/success.rs:38:14: 38:33
    let mut _1: [&str; 2];               // in scope 0 at ui/impl-trait/in-trait/success.rs:38:14: 38:33

    bb0: {
        _1 = [const "The answer is ", const "!\n"]; // scope 0 at ui/impl-trait/in-trait/success.rs:38:14: 38:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:38:14: 38:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:38:14: 38:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/in-trait/success.rs:38:14: 38:33
        return;                          // scope 0 at ui/impl-trait/in-trait/success.rs:38:14: 38:33
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:41
    let mut _1: &str;                    // in scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:35

    bb0: {
        _1 = const "Hello, world.";      // scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:35
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:37:20: 37:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:41
        return;                          // scope 0 at ui/impl-trait/in-trait/success.rs:37:20: 37:41
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/impl-trait/in-trait/success.rs:37:14: 37:18
    let mut _1: [&str; 2];               // in scope 0 at ui/impl-trait/in-trait/success.rs:37:14: 37:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/impl-trait/in-trait/success.rs:37:14: 37:18
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:37:14: 37:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/success.rs:37:14: 37:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/in-trait/success.rs:37:14: 37:18
        return;                          // scope 0 at ui/impl-trait/in-trait/success.rs:37:14: 37:18
    }
}
