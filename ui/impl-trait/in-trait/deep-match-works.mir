// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/in-trait/deep-match-works.rs:12:1: 12:16>::bar() -> Wrapper<i32> {
    let mut _0: Wrapper<i32>;            // return place in scope 0 at ui/impl-trait/in-trait/deep-match-works.rs:13:17: 13:29

    bb0: {
        _0 = const Wrapper::<i32>(0_i32); // scope 0 at ui/impl-trait/in-trait/deep-match-works.rs:13:32: 13:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/deep-match-works.rs:13:32: 13:42
                                         // + literal: Const { ty: Wrapper<i32>, val: Value(Scalar(0x00000000)) }
        return;                          // scope 0 at ui/impl-trait/in-trait/deep-match-works.rs:13:44: 13:44
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/in-trait/deep-match-works.rs:16:11: 16:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/in-trait/deep-match-works.rs:16:13: 16:13
    }
}

fn Wrapper(_1: T) -> Wrapper<T> {
    let mut _0: Wrapper<T>;              // return place in scope 0 at ui/impl-trait/in-trait/deep-match-works.rs:6:1: 6:18

    bb0: {
        _0 = Wrapper::<T>(move _1);      // scope 0 at ui/impl-trait/in-trait/deep-match-works.rs:6:1: 6:18
        return;                          // scope 0 at ui/impl-trait/in-trait/deep-match-works.rs:6:1: 6:18
    }
}

// MIR FOR CTFE
fn Wrapper(_1: T) -> Wrapper<T> {
    let mut _0: Wrapper<T>;              // return place in scope 0 at ui/impl-trait/in-trait/deep-match-works.rs:6:1: 6:18

    bb0: {
        _0 = Wrapper::<T>(move _1);      // scope 0 at ui/impl-trait/in-trait/deep-match-works.rs:6:1: 6:18
        return;                          // scope 0 at ui/impl-trait/in-trait/deep-match-works.rs:6:1: 6:18
    }
}
