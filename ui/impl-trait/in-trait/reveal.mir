// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/in-trait/reveal.rs:10:1: 10:16>::f() -> Box<String> {
    let mut _0: std::boxed::Box<std::string::String>; // return place in scope 0 at ui/impl-trait/in-trait/reveal.rs:11:15: 11:26
    let mut _1: std::string::String;     // in scope 0 at ui/impl-trait/in-trait/reveal.rs:12:18: 12:31

    bb0: {
        _1 = String::new() -> bb1;       // scope 0 at ui/impl-trait/in-trait/reveal.rs:12:18: 12:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/reveal.rs:12:18: 12:29
                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Box::<String>::new(move _1) -> bb2; // scope 0 at ui/impl-trait/in-trait/reveal.rs:12:9: 12:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/reveal.rs:12:9: 12:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(String) -> Box<String> {Box::<String>::new}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/in-trait/reveal.rs:13:6: 13:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/in-trait/reveal.rs:16:11: 16:11
    let _1: std::boxed::Box<std::string::String>; // in scope 0 at ui/impl-trait/in-trait/reveal.rs:17:9: 17:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/impl-trait/in-trait/reveal.rs:17:9: 17:10
    }

    bb0: {
        _1 = <() as Foo>::f() -> bb1;    // scope 0 at ui/impl-trait/in-trait/reveal.rs:17:26: 17:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/in-trait/reveal.rs:17:26: 17:40
                                         // + literal: Const { ty: fn() -> Box<impl Sized> {<() as Foo>::f}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/impl-trait/in-trait/reveal.rs:18:1: 18:2
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/in-trait/reveal.rs:18:2: 18:2
    }
}
