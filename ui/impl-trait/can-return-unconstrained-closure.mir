// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn make_identity() -> impl Sized {
    let mut _0: impl Sized;              // return place in scope 0 at ui/impl-trait/can-return-unconstrained-closure.rs:15:23: 15:33

    bb0: {
        return;                          // scope 0 at ui/impl-trait/can-return-unconstrained-closure.rs:17:2: 17:2
    }
}

fn make_identity::{closure#0}(_1: &[closure@ui/impl-trait/can-return-unconstrained-closure.rs:16:5: 16:22], _2: &i32) -> &i32 {
    debug x => _2;                       // in scope 0 at ui/impl-trait/can-return-unconstrained-closure.rs:16:6: 16:7
    let mut _0: &i32;                    // return place in scope 0 at ui/impl-trait/can-return-unconstrained-closure.rs:16:23: 16:23

    bb0: {
        _0 = _2;                         // scope 0 at ui/impl-trait/can-return-unconstrained-closure.rs:16:23: 16:24
        return;                          // scope 0 at ui/impl-trait/can-return-unconstrained-closure.rs:16:24: 16:24
    }
}

fn make_identity_static() -> impl Sized + 'static {
    let mut _0: impl Sized + 'static;    // return place in scope 0 at ui/impl-trait/can-return-unconstrained-closure.rs:19:30: 19:50

    bb0: {
        return;                          // scope 0 at ui/impl-trait/can-return-unconstrained-closure.rs:21:2: 21:2
    }
}

fn make_identity_static::{closure#0}(_1: &[closure@ui/impl-trait/can-return-unconstrained-closure.rs:20:5: 20:22], _2: &i32) -> &i32 {
    debug x => _2;                       // in scope 0 at ui/impl-trait/can-return-unconstrained-closure.rs:20:6: 20:7
    let mut _0: &i32;                    // return place in scope 0 at ui/impl-trait/can-return-unconstrained-closure.rs:20:23: 20:23

    bb0: {
        _0 = _2;                         // scope 0 at ui/impl-trait/can-return-unconstrained-closure.rs:20:23: 20:24
        return;                          // scope 0 at ui/impl-trait/can-return-unconstrained-closure.rs:20:24: 20:24
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/can-return-unconstrained-closure.rs:23:11: 23:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/can-return-unconstrained-closure.rs:23:13: 23:13
    }
}
