// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn take_edge_counters(_1: &mut Option<Vec<i32>>) -> Option<impl Iterator<Item = i32>> {
    debug x => _1;                       // in scope 0 at ui/impl-trait/fallback.rs:4:5: 4:6
    let mut _0: std::option::Option<impl std::iter::Iterator<Item = i32>>; // return place in scope 0 at ui/impl-trait/fallback.rs:5:6: 5:39
    let mut _2: std::option::Option<std::vec::Vec<i32>>; // in scope 0 at ui/impl-trait/fallback.rs:6:5: 6:13
    let mut _3: &mut std::option::Option<std::vec::Vec<i32>>; // in scope 0 at ui/impl-trait/fallback.rs:6:5: 6:13
    let mut _4: std::option::Option<std::vec::IntoIter<i32>>; // in scope 0 at ui/impl-trait/fallback.rs:6:21: 6:25
    let mut _5: [closure@ui/impl-trait/fallback.rs:6:27: 6:30]; // in scope 0 at ui/impl-trait/fallback.rs:6:27: 6:50

    bb0: {
        _3 = &mut (*_1);                 // scope 0 at ui/impl-trait/fallback.rs:6:5: 6:13
        _2 = Option::<Vec<i32>>::take(move _3) -> bb1; // scope 0 at ui/impl-trait/fallback.rs:6:5: 6:13
                                         // mir::Constant
                                         // + span: ui/impl-trait/fallback.rs:6:7: 6:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut Option<Vec<i32>>) -> Option<Vec<i32>> {Option::<Vec<i32>>::take}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Option::<std::vec::IntoIter<i32>>::None; // scope 0 at ui/impl-trait/fallback.rs:6:21: 6:25
        _0 = Option::<Vec<i32>>::map_or::<Option<std::vec::IntoIter<i32>>, [closure@ui/impl-trait/fallback.rs:6:27: 6:30]>(move _2, move _4, move _5) -> bb2; // scope 0 at ui/impl-trait/fallback.rs:6:5: 6:51
                                         // mir::Constant
                                         // + span: ui/impl-trait/fallback.rs:6:14: 6:20
                                         // + literal: Const { ty: fn(Option<Vec<i32>>, Option<std::vec::IntoIter<i32>>, [closure@ui/impl-trait/fallback.rs:6:27: 6:30]) -> Option<std::vec::IntoIter<i32>> {Option::<Vec<i32>>::map_or::<Option<std::vec::IntoIter<i32>>, [closure@ui/impl-trait/fallback.rs:6:27: 6:30]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/fallback.rs:7:2: 7:2
    }
}

fn take_edge_counters::{closure#0}(_1: [closure@ui/impl-trait/fallback.rs:6:27: 6:30], _2: Vec<i32>) -> Option<std::vec::IntoIter<i32>> {
    debug m => _2;                       // in scope 0 at ui/impl-trait/fallback.rs:6:28: 6:29
    let mut _0: std::option::Option<std::vec::IntoIter<i32>>; // return place in scope 0 at ui/impl-trait/fallback.rs:6:31: 6:31
    let mut _3: std::vec::IntoIter<i32>; // in scope 0 at ui/impl-trait/fallback.rs:6:36: 6:49
    let mut _4: std::vec::Vec<i32>;      // in scope 0 at ui/impl-trait/fallback.rs:6:36: 6:37

    bb0: {
        _4 = move _2;                    // scope 0 at ui/impl-trait/fallback.rs:6:36: 6:37
        _3 = <Vec<i32> as IntoIterator>::into_iter(move _4) -> bb1; // scope 0 at ui/impl-trait/fallback.rs:6:36: 6:49
                                         // mir::Constant
                                         // + span: ui/impl-trait/fallback.rs:6:38: 6:47
                                         // + literal: Const { ty: fn(Vec<i32>) -> <Vec<i32> as IntoIterator>::IntoIter {<Vec<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Option::<std::vec::IntoIter<i32>>::Some(move _3); // scope 0 at ui/impl-trait/fallback.rs:6:31: 6:50
        return;                          // scope 0 at ui/impl-trait/fallback.rs:6:50: 6:50
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/fallback.rs:9:11: 9:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/fallback.rs:9:13: 9:13
    }
}
