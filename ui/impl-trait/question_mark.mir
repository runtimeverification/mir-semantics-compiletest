// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/question_mark.rs:5:10: 5:15>::fmt(_1: &Target, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/question_mark.rs:5:10: 5:15
    debug f => _2;                       // in scope 0 at ui/impl-trait/question_mark.rs:5:10: 5:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/impl-trait/question_mark.rs:5:10: 5:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/impl-trait/question_mark.rs:5:10: 5:15
    let mut _4: &str;                    // in scope 0 at ui/impl-trait/question_mark.rs:5:10: 5:15
    let _5: &str;                        // in scope 0 at ui/impl-trait/question_mark.rs:5:10: 5:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/impl-trait/question_mark.rs:5:10: 5:15
        _5 = const "Target";             // scope 0 at ui/impl-trait/question_mark.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/impl-trait/question_mark.rs:5:10: 5:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/impl-trait/question_mark.rs:5:10: 5:15
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/impl-trait/question_mark.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/impl-trait/question_mark.rs:5:10: 5:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/question_mark.rs:5:15: 5:15
    }
}

fn <impl at ui/impl-trait/question_mark.rs:8:10: 8:15>::fmt(_1: &Source, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/question_mark.rs:8:10: 8:15
    debug f => _2;                       // in scope 0 at ui/impl-trait/question_mark.rs:8:10: 8:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/impl-trait/question_mark.rs:8:10: 8:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/impl-trait/question_mark.rs:8:10: 8:15
    let mut _4: &str;                    // in scope 0 at ui/impl-trait/question_mark.rs:8:10: 8:15
    let _5: &str;                        // in scope 0 at ui/impl-trait/question_mark.rs:8:10: 8:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/impl-trait/question_mark.rs:8:10: 8:15
        _5 = const "Source";             // scope 0 at ui/impl-trait/question_mark.rs:8:10: 8:15
                                         // mir::Constant
                                         // + span: ui/impl-trait/question_mark.rs:8:10: 8:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/impl-trait/question_mark.rs:8:10: 8:15
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/impl-trait/question_mark.rs:8:10: 8:15
                                         // mir::Constant
                                         // + span: ui/impl-trait/question_mark.rs:8:10: 8:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/question_mark.rs:8:15: 8:15
    }
}

fn <impl at ui/impl-trait/question_mark.rs:10:1: 10:29>::from(_1: Source) -> Target {
    let mut _0: Target;                  // return place in scope 0 at ui/impl-trait/question_mark.rs:11:27: 11:31

    bb0: {
        return;                          // scope 0 at ui/impl-trait/question_mark.rs:13:6: 13:6
    }
}

fn maybe_source() -> Result<(), Source> {
    let mut _0: std::result::Result<(), Source>; // return place in scope 0 at ui/impl-trait/question_mark.rs:16:22: 16:40
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _1 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn typaram() -> Result<(), impl Debug> {
    let mut _0: std::result::Result<(), impl std::fmt::Debug>; // return place in scope 0 at ui/impl-trait/question_mark.rs:20:21: 20:43
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, Source>>; // in scope 0 at ui/impl-trait/question_mark.rs:21:5: 21:20
    let mut _2: std::result::Result<(), Source>; // in scope 0 at ui/impl-trait/question_mark.rs:21:5: 21:19
    let mut _3: isize;                   // in scope 0 at ui/impl-trait/question_mark.rs:21:19: 21:20
    let _4: std::result::Result<std::convert::Infallible, Source>; // in scope 0 at ui/impl-trait/question_mark.rs:21:19: 21:20
    let mut _5: std::result::Result<std::convert::Infallible, Source>; // in scope 0 at ui/impl-trait/question_mark.rs:21:19: 21:20
    let _6: ();                          // in scope 0 at ui/impl-trait/question_mark.rs:21:5: 21:20
    scope 1 {
        debug residual => _4;            // in scope 1 at ui/impl-trait/question_mark.rs:21:19: 21:20
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;                 // in scope 3 at ui/impl-trait/question_mark.rs:21:5: 21:20
        scope 4 {
        }
    }

    bb0: {
        _2 = maybe_source() -> bb1;      // scope 0 at ui/impl-trait/question_mark.rs:21:5: 21:19
                                         // mir::Constant
                                         // + span: ui/impl-trait/question_mark.rs:21:5: 21:17
                                         // + literal: Const { ty: fn() -> Result<(), Source> {maybe_source}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <Result<(), Source> as Try>::branch(move _2) -> bb2; // scope 0 at ui/impl-trait/question_mark.rs:21:5: 21:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/question_mark.rs:21:5: 21:20
                                         // + literal: Const { ty: fn(Result<(), Source>) -> ControlFlow<<Result<(), Source> as Try>::Residual, <Result<(), Source> as Try>::Output> {<Result<(), Source> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = discriminant(_1);           // scope 0 at ui/impl-trait/question_mark.rs:21:5: 21:20
        switchInt(move _3) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at ui/impl-trait/question_mark.rs:21:5: 21:20
    }

    bb3: {
        _0 = const Result::<(), Target>::Ok(()); // scope 0 at ui/impl-trait/question_mark.rs:22:5: 22:24
                                         // mir::Constant
                                         // + span: ui/impl-trait/question_mark.rs:22:5: 22:24
                                         // + literal: Const { ty: Result<(), Target>, val: Value(Scalar(0x00)) }
        goto -> bb6;                     // scope 0 at ui/impl-trait/question_mark.rs:23:2: 23:2
    }

    bb4: {
        unreachable;                     // scope 0 at ui/impl-trait/question_mark.rs:21:5: 21:20
    }

    bb5: {
        _0 = <Result<(), Target> as FromResidual<Result<Infallible, Source>>>::from_residual(move _5) -> bb6; // scope 2 at ui/impl-trait/question_mark.rs:21:5: 21:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/question_mark.rs:21:19: 21:20
                                         // + literal: Const { ty: fn(Result<Infallible, Source>) -> Result<(), Target> {<Result<(), Target> as FromResidual<Result<Infallible, Source>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/impl-trait/question_mark.rs:23:2: 23:2
    }
}

fn direct() -> Result<(), impl Debug> {
    let mut _0: std::result::Result<(), impl std::fmt::Debug>; // return place in scope 0 at ui/impl-trait/question_mark.rs:25:20: 25:42
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, Source>>; // in scope 0 at ui/impl-trait/question_mark.rs:26:5: 26:20
    let mut _2: std::result::Result<(), Source>; // in scope 0 at ui/impl-trait/question_mark.rs:26:5: 26:19
    let mut _3: isize;                   // in scope 0 at ui/impl-trait/question_mark.rs:26:19: 26:20
    let _4: std::result::Result<std::convert::Infallible, Source>; // in scope 0 at ui/impl-trait/question_mark.rs:26:19: 26:20
    let mut _5: std::result::Result<std::convert::Infallible, Source>; // in scope 0 at ui/impl-trait/question_mark.rs:26:19: 26:20
    let _6: ();                          // in scope 0 at ui/impl-trait/question_mark.rs:26:5: 26:20
    scope 1 {
        debug residual => _4;            // in scope 1 at ui/impl-trait/question_mark.rs:26:19: 26:20
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;                 // in scope 3 at ui/impl-trait/question_mark.rs:26:5: 26:20
        scope 4 {
        }
    }

    bb0: {
        _2 = maybe_source() -> bb1;      // scope 0 at ui/impl-trait/question_mark.rs:26:5: 26:19
                                         // mir::Constant
                                         // + span: ui/impl-trait/question_mark.rs:26:5: 26:17
                                         // + literal: Const { ty: fn() -> Result<(), Source> {maybe_source}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <Result<(), Source> as Try>::branch(move _2) -> bb2; // scope 0 at ui/impl-trait/question_mark.rs:26:5: 26:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/question_mark.rs:26:5: 26:20
                                         // + literal: Const { ty: fn(Result<(), Source>) -> ControlFlow<<Result<(), Source> as Try>::Residual, <Result<(), Source> as Try>::Output> {<Result<(), Source> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = discriminant(_1);           // scope 0 at ui/impl-trait/question_mark.rs:26:5: 26:20
        switchInt(move _3) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at ui/impl-trait/question_mark.rs:26:5: 26:20
    }

    bb3: {
        _0 = const Result::<(), Target>::Err(Target); // scope 0 at ui/impl-trait/question_mark.rs:27:5: 27:16
                                         // mir::Constant
                                         // + span: ui/impl-trait/question_mark.rs:27:5: 27:16
                                         // + literal: Const { ty: Result<(), Target>, val: Value(Scalar(0x01)) }
        goto -> bb6;                     // scope 0 at ui/impl-trait/question_mark.rs:28:2: 28:2
    }

    bb4: {
        unreachable;                     // scope 0 at ui/impl-trait/question_mark.rs:26:5: 26:20
    }

    bb5: {
        _0 = <Result<(), Target> as FromResidual<Result<Infallible, Source>>>::from_residual(move _5) -> bb6; // scope 2 at ui/impl-trait/question_mark.rs:26:5: 26:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/question_mark.rs:26:19: 26:20
                                         // + literal: Const { ty: fn(Result<Infallible, Source>) -> Result<(), Target> {<Result<(), Target> as FromResidual<Result<Infallible, Source>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/impl-trait/question_mark.rs:28:2: 28:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/question_mark.rs:30:11: 30:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/question_mark.rs:30:13: 30:13
    }
}
