// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: T) -> impl Into<[T; { const FOO: usize = 1; FOO }]> {
    debug t => _1;                       // in scope 0 at ui/impl-trait/nesting.rs:4:11: 4:12
    let mut _0: impl std::convert::Into<[T; { const FOO: usize = 1; FOO }]>; // return place in scope 0 at ui/impl-trait/nesting.rs:4:20: 4:65
    let mut _2: T;                       // in scope 0 at ui/impl-trait/nesting.rs:5:6: 5:7

    bb0: {
        _2 = move _1;                    // scope 0 at ui/impl-trait/nesting.rs:5:6: 5:7
        _0 = [move _2];                  // scope 0 at ui/impl-trait/nesting.rs:5:5: 5:8
        return;                          // scope 0 at ui/impl-trait/nesting.rs:6:2: 6:2
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-trait/nesting.rs:4:34: 4:63

    bb0: {
        _0 = const _;                    // scope 0 at ui/impl-trait/nesting.rs:4:58: 4:61
        return;                          // scope 0 at ui/impl-trait/nesting.rs:4:34: 4:63
    }
}

const foo::{constant#0}::FOO: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-trait/nesting.rs:4:47: 4:52

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/impl-trait/nesting.rs:4:55: 4:56
        return;                          // scope 0 at ui/impl-trait/nesting.rs:4:36: 4:57
    }
}

fn bar() -> impl Into<[u8; { const FOO: usize = 1; FOO }]> {
    let mut _0: impl std::convert::Into<[u8; { const FOO: usize = 1; FOO }]>; // return place in scope 0 at ui/impl-trait/nesting.rs:8:13: 8:59

    bb0: {
        _0 = [const 99_u8];              // scope 0 at ui/impl-trait/nesting.rs:9:5: 9:9
        return;                          // scope 0 at ui/impl-trait/nesting.rs:10:2: 10:2
    }
}

bar::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-trait/nesting.rs:8:28: 8:57

    bb0: {
        _0 = const _;                    // scope 0 at ui/impl-trait/nesting.rs:8:52: 8:55
        return;                          // scope 0 at ui/impl-trait/nesting.rs:8:28: 8:57
    }
}

const bar::{constant#0}::FOO: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-trait/nesting.rs:8:41: 8:46

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/impl-trait/nesting.rs:8:49: 8:50
        return;                          // scope 0 at ui/impl-trait/nesting.rs:8:30: 8:51
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/nesting.rs:12:11: 12:11
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/impl-trait/nesting.rs:13:14: 13:20
    let mut _4: &[&str; 2];              // in scope 0 at ui/impl-trait/nesting.rs:13:14: 13:20
    let _5: &[&str; 2];                  // in scope 0 at ui/impl-trait/nesting.rs:13:14: 13:20
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/nesting.rs:13:22: 13:36
    let mut _11: &[i32; 1];              // in scope 0 at ui/impl-trait/nesting.rs:13:22: 13:36
    let _12: &[i32; 1];                  // in scope 0 at ui/impl-trait/nesting.rs:13:22: 13:36
    let _13: [i32; 1];                   // in scope 0 at ui/impl-trait/nesting.rs:13:22: 13:36
    let mut _14: impl std::convert::Into<[i32; { const FOO: usize = 1; FOO }]>; // in scope 0 at ui/impl-trait/nesting.rs:13:22: 13:29
    let _15: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _16: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _17: &[&str];                // in scope 0 at ui/impl-trait/nesting.rs:14:14: 14:20
    let mut _18: &[&str; 2];             // in scope 0 at ui/impl-trait/nesting.rs:14:14: 14:20
    let _19: &[&str; 2];                 // in scope 0 at ui/impl-trait/nesting.rs:14:14: 14:20
    let mut _20: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _21: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _22: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _23: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _24: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/nesting.rs:14:22: 14:34
    let mut _25: &[u8; 1];               // in scope 0 at ui/impl-trait/nesting.rs:14:22: 14:34
    let _26: &[u8; 1];                   // in scope 0 at ui/impl-trait/nesting.rs:14:22: 14:34
    let _27: [u8; 1];                    // in scope 0 at ui/impl-trait/nesting.rs:14:22: 14:34
    let mut _28: impl std::convert::Into<[u8; { const FOO: usize = 1; FOO }]>; // in scope 0 at ui/impl-trait/nesting.rs:14:22: 14:27
    let mut _29: &[&str; 2];             // in scope 0 at ui/impl-trait/nesting.rs:14:14: 14:20
    let mut _30: &[&str; 2];             // in scope 0 at ui/impl-trait/nesting.rs:13:14: 13:20

    bb0: {
        _30 = const _;                   // scope 0 at ui/impl-trait/nesting.rs:13:14: 13:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/nesting.rs:13:14: 13:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _5 = _30;                        // scope 0 at ui/impl-trait/nesting.rs:13:14: 13:20
        _4 = _5;                         // scope 0 at ui/impl-trait/nesting.rs:13:14: 13:20
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/impl-trait/nesting.rs:13:14: 13:20
        _14 = foo::<i32>(const 42_i32) -> bb1; // scope 0 at ui/impl-trait/nesting.rs:13:22: 13:29
                                         // mir::Constant
                                         // + span: ui/impl-trait/nesting.rs:13:22: 13:25
                                         // + literal: Const { ty: fn(i32) -> impl Into<[i32; { const FOO: usize = 1; FOO }]> {foo::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _13 = <impl Into<[i32; { const FOO: usize = 1; FOO }]> as Into<[i32; 1]>>::into(move _14) -> bb2; // scope 0 at ui/impl-trait/nesting.rs:13:22: 13:36
                                         // mir::Constant
                                         // + span: ui/impl-trait/nesting.rs:13:30: 13:34
                                         // + literal: Const { ty: fn(impl Into<[i32; { const FOO: usize = 1; FOO }]>) -> [i32; 1] {<impl Into<[i32; { const FOO: usize = 1; FOO }]> as Into<[i32; 1]>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = &_13;                      // scope 0 at ui/impl-trait/nesting.rs:13:22: 13:36
        _11 = _12;                       // scope 0 at ui/impl-trait/nesting.rs:13:22: 13:36
        _10 = core::fmt::ArgumentV1::<'_>::new_debug::<[i32; 1]>(move _11) -> bb3; // scope 0 at ui/impl-trait/nesting.rs:13:22: 13:36
                                         // mir::Constant
                                         // + span: ui/impl-trait/nesting.rs:13:22: 13:36
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b [i32; 1]) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<[i32; 1]>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = [move _10];                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb4; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _1 = _print(move _2) -> bb5;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb5: {
        _29 = const _;                   // scope 0 at ui/impl-trait/nesting.rs:14:14: 14:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/nesting.rs:14:14: 14:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _19 = _29;                       // scope 0 at ui/impl-trait/nesting.rs:14:14: 14:20
        _18 = _19;                       // scope 0 at ui/impl-trait/nesting.rs:14:14: 14:20
        _17 = move _18 as &[&str] (Pointer(Unsize)); // scope 0 at ui/impl-trait/nesting.rs:14:14: 14:20
        _28 = bar() -> bb6;              // scope 0 at ui/impl-trait/nesting.rs:14:22: 14:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/nesting.rs:14:22: 14:25
                                         // + literal: Const { ty: fn() -> impl Into<[u8; { const FOO: usize = 1; FOO }]> {bar}, val: Value(<ZST>) }
    }

    bb6: {
        _27 = <impl Into<[u8; { const FOO: usize = 1; FOO }]> as Into<[u8; 1]>>::into(move _28) -> bb7; // scope 0 at ui/impl-trait/nesting.rs:14:22: 14:34
                                         // mir::Constant
                                         // + span: ui/impl-trait/nesting.rs:14:28: 14:32
                                         // + literal: Const { ty: fn(impl Into<[u8; { const FOO: usize = 1; FOO }]>) -> [u8; 1] {<impl Into<[u8; { const FOO: usize = 1; FOO }]> as Into<[u8; 1]>>::into}, val: Value(<ZST>) }
    }

    bb7: {
        _26 = &_27;                      // scope 0 at ui/impl-trait/nesting.rs:14:22: 14:34
        _25 = _26;                       // scope 0 at ui/impl-trait/nesting.rs:14:22: 14:34
        _24 = core::fmt::ArgumentV1::<'_>::new_debug::<[u8; 1]>(move _25) -> bb8; // scope 0 at ui/impl-trait/nesting.rs:14:22: 14:34
                                         // mir::Constant
                                         // + span: ui/impl-trait/nesting.rs:14:22: 14:34
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b [u8; 1]) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<[u8; 1]>}, val: Value(<ZST>) }
    }

    bb8: {
        _23 = [move _24];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _22 = &_23;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = _22;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = move _21 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _16 = Arguments::<'_>::new_v1(move _17, move _20) -> bb9; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = _print(move _16) -> bb10;  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/impl-trait/nesting.rs:15:2: 15:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/impl-trait/nesting.rs:14:14: 14:20
    let mut _1: [&str; 2];               // in scope 0 at ui/impl-trait/nesting.rs:14:14: 14:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/impl-trait/nesting.rs:14:14: 14:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/nesting.rs:14:14: 14:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/nesting.rs:14:14: 14:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/nesting.rs:14:14: 14:20
        return;                          // scope 0 at ui/impl-trait/nesting.rs:14:14: 14:20
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/impl-trait/nesting.rs:13:14: 13:20
    let mut _1: [&str; 2];               // in scope 0 at ui/impl-trait/nesting.rs:13:14: 13:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/impl-trait/nesting.rs:13:14: 13:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/nesting.rs:13:14: 13:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/nesting.rs:13:14: 13:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/nesting.rs:13:14: 13:20
        return;                          // scope 0 at ui/impl-trait/nesting.rs:13:14: 13:20
    }
}
