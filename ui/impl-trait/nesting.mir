// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: T) -> impl Into<[T; { const FOO: usize = 1; FOO }]> {
    debug t => _1;
    let mut _0: impl std::convert::Into<[T; { const FOO: usize = 1; FOO }]>;

    bb0: {
        _0 = [move _1];
        return;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const foo::{constant#0}::FOO: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn bar() -> impl Into<[u8; { const FOO: usize = 1; FOO }]> {
    let mut _0: impl std::convert::Into<[u8; { const FOO: usize = 1; FOO }]>;

    bb0: {
        _0 = [const 99_u8];
        return;
    }
}

bar::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const bar::{constant#0}::FOO: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &[i32; 1];
    let _9: [i32; 1];
    let mut _10: impl std::convert::Into<[i32; { const FOO: usize = 1; FOO }]>;
    let _11: ();
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: [core::fmt::rt::Argument<'_>; 1];
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &[u8; 1];
    let _19: [u8; 1];
    let mut _20: impl std::convert::Into<[u8; { const FOO: usize = 1; FOO }]>;
    let mut _21: &[&str; 2];
    let mut _22: &[&str; 2];

    bb0: {
        _22 = const _;
        _3 = _22 as &[&str] (Pointer(Unsize));
        _10 = foo::<i32>(const 42_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = <impl Into<[i32; { const FOO: usize = 1; FOO }]> as Into<[i32; 1]>>::into(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = &_9;
        _7 = core::fmt::rt::Argument::<'_>::new_debug::<[i32; 1]>(_8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        _1 = _print(move _2) -> [return: bb5, unwind continue];
    }

    bb5: {
        _21 = const _;
        _13 = _21 as &[&str] (Pointer(Unsize));
        _20 = bar() -> [return: bb6, unwind continue];
    }

    bb6: {
        _19 = <impl Into<[u8; { const FOO: usize = 1; FOO }]> as Into<[u8; 1]>>::into(move _20) -> [return: bb7, unwind continue];
    }

    bb7: {
        _18 = &_19;
        _17 = core::fmt::rt::Argument::<'_>::new_debug::<[u8; 1]>(_18) -> [return: bb8, unwind continue];
    }

    bb8: {
        _16 = [move _17];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb9, unwind continue];
    }

    bb9: {
        _11 = _print(move _12) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
