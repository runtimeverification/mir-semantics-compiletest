// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &main::Existential;
    let _9: main::Existential;
    let mut _10: &[&str; 2];

    bb0: {
        _10 = const _;
        _3 = _10 as &[&str] (Pointer(Unsize));
        _9 = f() -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &_9;
        _7 = core::fmt::rt::Argument::<'_>::new_debug::<Existential>(_8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = _print(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn f() -> Existential {
    let mut _0: main::Existential;

    bb0: {
        return;
    }
}
