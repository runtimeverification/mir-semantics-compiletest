// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/issue-49685.rs:5:11: 5:11
    let mut _1: std::iter::FlatMap<std::option::IntoIter<()>, std::iter::FlatMap<std::option::IntoIter<()>, impl std::iter::Iterator<Item = ()>, fn(()) -> impl std::iter::Iterator<Item = ()> {func}>, [closure@ui/impl-trait/issue-49685.rs:8:19: 8:22]>; // in scope 0 at ui/impl-trait/issue-49685.rs:6:13: 8:59
    let mut _2: std::option::IntoIter<()>; // in scope 0 at ui/impl-trait/issue-49685.rs:6:13: 7:21
    let mut _3: std::option::Option<()>; // in scope 0 at ui/impl-trait/issue-49685.rs:6:13: 6:21
    let mut _4: [closure@ui/impl-trait/issue-49685.rs:8:19: 8:22]; // in scope 0 at ui/impl-trait/issue-49685.rs:8:19: 8:58
    scope 1 {
    }

    bb0: {
        _3 = const Option::<()>::Some(()); // scope 0 at ui/impl-trait/issue-49685.rs:6:13: 6:21
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49685.rs:6:13: 6:21
                                         // + literal: Const { ty: Option<()>, val: Value(Scalar(0x01)) }
        _2 = <Option<()> as IntoIterator>::into_iter(move _3) -> bb1; // scope 0 at ui/impl-trait/issue-49685.rs:6:13: 7:21
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49685.rs:7:10: 7:19
                                         // + literal: Const { ty: fn(Option<()>) -> <Option<()> as IntoIterator>::IntoIter {<Option<()> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <std::option::IntoIter<()> as Iterator>::flat_map::<FlatMap<std::option::IntoIter<()>, impl Iterator<Item = ()>, fn(()) -> impl Iterator<Item = ()> {func}>, [closure@ui/impl-trait/issue-49685.rs:8:19: 8:22]>(move _2, move _4) -> bb2; // scope 0 at ui/impl-trait/issue-49685.rs:6:13: 8:59
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49685.rs:8:10: 8:18
                                         // + literal: Const { ty: fn(std::option::IntoIter<()>, [closure@ui/impl-trait/issue-49685.rs:8:19: 8:22]) -> FlatMap<std::option::IntoIter<()>, FlatMap<std::option::IntoIter<()>, impl Iterator<Item = ()>, fn(()) -> impl Iterator<Item = ()> {func}>, [closure@ui/impl-trait/issue-49685.rs:8:19: 8:22]> {<std::option::IntoIter<()> as Iterator>::flat_map::<FlatMap<std::option::IntoIter<()>, impl Iterator<Item = ()>, fn(()) -> impl Iterator<Item = ()> {func}>, [closure@ui/impl-trait/issue-49685.rs:8:19: 8:22]>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/impl-trait/issue-49685.rs:8:59: 8:60
    }

    bb3: {
        return;                          // scope 0 at ui/impl-trait/issue-49685.rs:9:2: 9:2
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/impl-trait/issue-49685.rs:8:19: 8:22], _2: ()) -> FlatMap<std::option::IntoIter<()>, impl Iterator<Item = ()>, fn(()) -> impl Iterator<Item = ()> {func}> {
    let mut _0: std::iter::FlatMap<std::option::IntoIter<()>, impl std::iter::Iterator<Item = ()>, fn(()) -> impl std::iter::Iterator<Item = ()> {func}>; // return place in scope 0 at ui/impl-trait/issue-49685.rs:8:23: 8:23
    let mut _3: std::option::IntoIter<()>; // in scope 0 at ui/impl-trait/issue-49685.rs:8:23: 8:43
    let mut _4: std::option::Option<()>; // in scope 0 at ui/impl-trait/issue-49685.rs:8:23: 8:31

    bb0: {
        _4 = const Option::<()>::Some(()); // scope 0 at ui/impl-trait/issue-49685.rs:8:23: 8:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49685.rs:8:23: 8:31
                                         // + literal: Const { ty: Option<()>, val: Value(Scalar(0x01)) }
        _3 = <Option<()> as IntoIterator>::into_iter(move _4) -> bb1; // scope 0 at ui/impl-trait/issue-49685.rs:8:23: 8:43
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49685.rs:8:32: 8:41
                                         // + literal: Const { ty: fn(Option<()>) -> <Option<()> as IntoIterator>::IntoIter {<Option<()> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <std::option::IntoIter<()> as Iterator>::flat_map::<impl Iterator<Item = ()>, fn(()) -> impl Iterator<Item = ()> {func}>(move _3, func) -> bb2; // scope 0 at ui/impl-trait/issue-49685.rs:8:23: 8:58
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49685.rs:8:44: 8:52
                                         // + literal: Const { ty: fn(std::option::IntoIter<()>, fn(()) -> impl Iterator<Item = ()> {func}) -> FlatMap<std::option::IntoIter<()>, impl Iterator<Item = ()>, fn(()) -> impl Iterator<Item = ()> {func}> {<std::option::IntoIter<()> as Iterator>::flat_map::<impl Iterator<Item = ()>, fn(()) -> impl Iterator<Item = ()> {func}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49685.rs:8:53: 8:57
                                         // + literal: Const { ty: fn(()) -> impl Iterator<Item = ()> {func}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/issue-49685.rs:8:58: 8:58
    }
}

fn func(_1: ()) -> impl Iterator<Item = ()> {
    let mut _0: impl std::iter::Iterator<Item = ()>; // return place in scope 0 at ui/impl-trait/issue-49685.rs:11:19: 11:43
    let mut _2: std::option::IntoIter<()>; // in scope 0 at ui/impl-trait/issue-49685.rs:12:5: 12:25
    let mut _3: std::option::Option<()>; // in scope 0 at ui/impl-trait/issue-49685.rs:12:5: 12:13
    let mut _4: [closure@ui/impl-trait/issue-49685.rs:12:35: 12:38]; // in scope 0 at ui/impl-trait/issue-49685.rs:12:35: 12:45

    bb0: {
        _3 = const Option::<()>::Some(()); // scope 0 at ui/impl-trait/issue-49685.rs:12:5: 12:13
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49685.rs:12:5: 12:13
                                         // + literal: Const { ty: Option<()>, val: Value(Scalar(0x01)) }
        _2 = <Option<()> as IntoIterator>::into_iter(move _3) -> bb1; // scope 0 at ui/impl-trait/issue-49685.rs:12:5: 12:25
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49685.rs:12:14: 12:23
                                         // + literal: Const { ty: fn(Option<()>) -> <Option<()> as IntoIterator>::IntoIter {<Option<()> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <std::option::IntoIter<()> as Iterator>::flat_map::<Vec<()>, [closure@ui/impl-trait/issue-49685.rs:12:35: 12:38]>(move _2, move _4) -> bb2; // scope 0 at ui/impl-trait/issue-49685.rs:12:5: 12:46
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49685.rs:12:26: 12:34
                                         // + literal: Const { ty: fn(std::option::IntoIter<()>, [closure@ui/impl-trait/issue-49685.rs:12:35: 12:38]) -> FlatMap<std::option::IntoIter<()>, Vec<()>, [closure@ui/impl-trait/issue-49685.rs:12:35: 12:38]> {<std::option::IntoIter<()> as Iterator>::flat_map::<Vec<()>, [closure@ui/impl-trait/issue-49685.rs:12:35: 12:38]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/issue-49685.rs:13:2: 13:2
    }
}

fn func::{closure#0}(_1: &mut [closure@ui/impl-trait/issue-49685.rs:12:35: 12:38], _2: ()) -> Vec<()> {
    let mut _0: std::vec::Vec<()>;       // return place in scope 0 at ui/impl-trait/issue-49685.rs:12:39: 12:39

    bb0: {
        _0 = Vec::<()>::new() -> bb1;    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<()> {Vec::<()>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/issue-49685.rs:12:45: 12:45
    }
}
