// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/recursive-type-alias-impl-trait-declaration.rs:9:1: 9:35>::eq(_1: &Bar, _2: &(Bar, i32)) -> bool {
    debug self => _1;                    // in scope 0 at ui/impl-trait/recursive-type-alias-impl-trait-declaration.rs:10:11: 10:16
    debug _other => _2;                  // in scope 0 at ui/impl-trait/recursive-type-alias-impl-trait-declaration.rs:10:18: 10:24
    let mut _0: bool;                    // return place in scope 0 at ui/impl-trait/recursive-type-alias-impl-trait-declaration.rs:10:42: 10:46

    bb0: {
        _0 = const true;                 // scope 0 at ui/impl-trait/recursive-type-alias-impl-trait-declaration.rs:11:9: 11:13
        return;                          // scope 0 at ui/impl-trait/recursive-type-alias-impl-trait-declaration.rs:12:6: 12:6
    }
}

fn foo() -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/impl-trait/recursive-type-alias-impl-trait-declaration.rs:15:13: 15:16

    bb0: {
        return;                          // scope 0 at ui/impl-trait/recursive-type-alias-impl-trait-declaration.rs:17:2: 17:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/recursive-type-alias-impl-trait-declaration.rs:19:11: 19:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/recursive-type-alias-impl-trait-declaration.rs:19:13: 19:13
    }
}
