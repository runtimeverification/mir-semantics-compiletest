// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/trait_resolution.rs:9:1: 9:30>::into_stream(_1: EventStream<S>) -> impl Debug {
    debug self => _1;                    // in scope 0 at ui/impl-trait/trait_resolution.rs:10:20: 10:24
    let mut _0: impl std::fmt::Debug;    // return place in scope 0 at ui/impl-trait/trait_resolution.rs:10:29: 10:39
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _2 = core::panicking::panic(const "not implemented") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_1) -> bb2;                 // scope 0 at ui/impl-trait/trait_resolution.rs:12:5: 12:6
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/trait_resolution.rs:10:5: 12:6
    }
}

fn <impl at ui/impl-trait/trait_resolution.rs:9:1: 9:30>::into_reader(_1: EventStream<S>) -> impl Debug {
    debug self => _1;                    // in scope 0 at ui/impl-trait/trait_resolution.rs:14:24: 14:28
    let mut _0: impl std::fmt::Debug;    // return place in scope 0 at ui/impl-trait/trait_resolution.rs:14:33: 14:43
    let mut _2: impl std::fmt::Debug;    // in scope 0 at ui/impl-trait/trait_resolution.rs:15:28: 15:46
    let mut _3: EventStream<S>;          // in scope 0 at ui/impl-trait/trait_resolution.rs:15:28: 15:32

    bb0: {
        _3 = move _1;                    // scope 0 at ui/impl-trait/trait_resolution.rs:15:28: 15:32
        _2 = EventStream::<S>::into_stream(move _3) -> bb1; // scope 0 at ui/impl-trait/trait_resolution.rs:15:28: 15:46
                                         // mir::Constant
                                         // + span: ui/impl-trait/trait_resolution.rs:15:33: 15:44
                                         // + literal: Const { ty: fn(EventStream<S>) -> impl Debug {EventStream::<S>::into_stream}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <ReaderStream<impl Debug> as From<impl Debug>>::from(move _2) -> bb2; // scope 0 at ui/impl-trait/trait_resolution.rs:15:9: 15:47
                                         // mir::Constant
                                         // + span: ui/impl-trait/trait_resolution.rs:15:9: 15:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(impl Debug) -> ReaderStream<impl Debug> {<ReaderStream<impl Debug> as From<impl Debug>>::from}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/trait_resolution.rs:16:6: 16:6
    }
}

fn <impl at ui/impl-trait/trait_resolution.rs:19:10: 19:15>::fmt(_1: &ReaderStream<S>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/trait_resolution.rs:19:10: 19:15
    debug f => _2;                       // in scope 0 at ui/impl-trait/trait_resolution.rs:19:10: 19:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/impl-trait/trait_resolution.rs:19:10: 19:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/impl-trait/trait_resolution.rs:19:10: 19:15
    let mut _4: &str;                    // in scope 0 at ui/impl-trait/trait_resolution.rs:19:10: 19:15
    let _5: &str;                        // in scope 0 at ui/impl-trait/trait_resolution.rs:19:10: 19:15
    let mut _6: &str;                    // in scope 0 at ui/impl-trait/trait_resolution.rs:21:5: 21:14
    let _7: &str;                        // in scope 0 at ui/impl-trait/trait_resolution.rs:21:5: 21:14
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/impl-trait/trait_resolution.rs:21:5: 21:14
    let mut _9: &&S;                     // in scope 0 at ui/impl-trait/trait_resolution.rs:21:5: 21:14
    let _10: &&S;                        // in scope 0 at ui/impl-trait/trait_resolution.rs:21:5: 21:14
    let _11: &S;                         // in scope 0 at ui/impl-trait/trait_resolution.rs:21:5: 21:14

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/impl-trait/trait_resolution.rs:19:10: 19:15
        _5 = const "ReaderStream";       // scope 0 at ui/impl-trait/trait_resolution.rs:19:10: 19:15
                                         // mir::Constant
                                         // + span: ui/impl-trait/trait_resolution.rs:19:10: 19:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/impl-trait/trait_resolution.rs:19:10: 19:15
        _7 = const "stream";             // scope 0 at ui/impl-trait/trait_resolution.rs:21:5: 21:14
                                         // mir::Constant
                                         // + span: ui/impl-trait/trait_resolution.rs:21:5: 21:14
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/impl-trait/trait_resolution.rs:21:5: 21:14
        _11 = &((*_1).0: S);             // scope 0 at ui/impl-trait/trait_resolution.rs:21:5: 21:14
        _10 = &_11;                      // scope 0 at ui/impl-trait/trait_resolution.rs:21:5: 21:14
        _9 = _10;                        // scope 0 at ui/impl-trait/trait_resolution.rs:21:5: 21:14
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/impl-trait/trait_resolution.rs:21:5: 21:14
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/impl-trait/trait_resolution.rs:19:10: 19:15
                                         // mir::Constant
                                         // + span: ui/impl-trait/trait_resolution.rs:19:10: 19:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/trait_resolution.rs:19:15: 19:15
    }
}

fn <impl at ui/impl-trait/trait_resolution.rs:24:1: 24:36>::from(_1: S) -> ReaderStream<S> {
    debug stream => _1;                  // in scope 0 at ui/impl-trait/trait_resolution.rs:25:13: 25:19
    let mut _0: ReaderStream<S>;         // return place in scope 0 at ui/impl-trait/trait_resolution.rs:25:27: 25:31
    let mut _2: S;                       // in scope 0 at ui/impl-trait/trait_resolution.rs:26:24: 26:30

    bb0: {
        _2 = move _1;                    // scope 0 at ui/impl-trait/trait_resolution.rs:26:24: 26:30
        _0 = ReaderStream::<S> { stream: move _2 }; // scope 0 at ui/impl-trait/trait_resolution.rs:26:9: 26:32
        return;                          // scope 0 at ui/impl-trait/trait_resolution.rs:27:6: 27:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/trait_resolution.rs:30:11: 30:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/trait_resolution.rs:30:13: 30:13
    }
}
