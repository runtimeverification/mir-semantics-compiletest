// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn hrtb(_1: impl for<'a> Fn(&'a u32) -> &'a u32) -> u32 {
    debug f => _1;
    let mut _0: u32;
    let mut _2: &u32;
    let mut _3: &impl for<'a> Fn(&'a u32) -> &'a u32;
    let mut _4: (&u32,);
    let mut _5: &u32;
    let mut _6: &impl for<'a> Fn(&'a u32) -> &'a u32;
    let mut _7: (&u32,);
    let mut _8: &u32;
    let mut _9: &u32;

    bb0: {
        _3 = &_1;
        _9 = const _;
        _4 = (_9,);
        _2 = <impl for<'a> Fn(&'a u32) -> &'a u32 as Fn<(&u32,)>>::call(move _3, move _4) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = &_1;
        _8 = const _;
        _7 = (_8,);
        _5 = <impl for<'a> Fn(&'a u32) -> &'a u32 as Fn<(&u32,)>>::call(move _6, move _7) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = <&u32 as Add>::add(move _2, move _5) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_1) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

promoted[0] in hrtb: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 44_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in hrtb: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 22_u32;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: u32;
    let mut _2: (&u32, &u32);
    let mut _3: &u32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: u32;
    let mut _9: u32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug sum => _1;
        let _4: &u32;
        let _5: &u32;
        let mut _13: &u32;
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
    }

    bb0: {
        _1 = hrtb::<[closure@ui/impl-trait/universal_hrtb_named.rs:8:20: 8:23]>(const ZeroSized: [closure@ui/impl-trait/universal_hrtb_named.rs:8:20: 8:23]) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_1;
        _13 = const _;
        _2 = (move _3, _13);
        _4 = (_2.0: &u32);
        _5 = (_2.1: &u32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<u32, u32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = Add(const 22_u32, const 44_u32);
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/impl-trait/universal_hrtb_named.rs:8:20: 8:23], _2: &u32) -> &u32 {
    debug x => _2;
    let mut _0: &u32;

    bb0: {
        _0 = _2;
        return;
    }
}
