// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo_pass() -> impl FooLike<Output = <T as impl_trait::Trait>::Assoc> {
    let mut _0: impl FooLike<Output = <T as impl_trait::Trait>::Assoc>;

    bb0: {
        return;
    }
}

fn foo2_pass() -> impl FooLike<Output = <T as lifetimes::Trait<'_>>::Assoc> + '_ {
    let mut _0: impl FooLike<Output = <T as lifetimes::Trait<'_>>::Assoc> + '_;

    bb0: {
        return;
    }
}

fn foo2_pass2() -> impl FooLike<Output = <T as lifetimes::Trait<'_>>::Assoc> + '_ {
    let mut _0: impl FooLike<Output = <T as lifetimes::Trait<'_>>::Assoc> + '_;
    let mut _1: &();

    bb0: {
        _1 = const _;
        _0 = Foo::<&()>(_1);
        return;
    }
}

promoted[0] in foo2_pass2: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn define() -> Ex {
    let mut _0: opaque_types::Ex;

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}
