// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> impl Copy {
    let mut _0: impl std::marker::Copy;  // return place in scope 0 at ui/impl-trait/closure-calling-parent-fn.rs:10:13: 10:22

    bb0: {
        return;                          // scope 0 at ui/impl-trait/closure-calling-parent-fn.rs:10:36: 10:36
    }
}

fn foo::{closure#0}(_1: &[closure@ui/impl-trait/closure-calling-parent-fn.rs:10:25: 10:27]) -> impl Copy {
    let mut _0: impl std::marker::Copy;  // return place in scope 0 at ui/impl-trait/closure-calling-parent-fn.rs:10:28: 10:28

    bb0: {
        _0 = foo() -> bb1;               // scope 0 at ui/impl-trait/closure-calling-parent-fn.rs:10:28: 10:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/closure-calling-parent-fn.rs:10:28: 10:31
                                         // + literal: Const { ty: fn() -> impl Copy {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/closure-calling-parent-fn.rs:10:33: 10:33
    }
}

fn bar() -> impl Copy {
    let mut _0: impl std::marker::Copy;  // return place in scope 0 at ui/impl-trait/closure-calling-parent-fn.rs:11:13: 11:22

    bb0: {
        return;                          // scope 0 at ui/impl-trait/closure-calling-parent-fn.rs:11:36: 11:36
    }
}

fn bar::{closure#0}(_1: &[closure@ui/impl-trait/closure-calling-parent-fn.rs:11:25: 11:27]) -> impl Copy {
    let mut _0: impl std::marker::Copy;  // return place in scope 0 at ui/impl-trait/closure-calling-parent-fn.rs:11:28: 11:28

    bb0: {
        _0 = bar() -> bb1;               // scope 0 at ui/impl-trait/closure-calling-parent-fn.rs:11:28: 11:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/closure-calling-parent-fn.rs:11:28: 11:31
                                         // + literal: Const { ty: fn() -> impl Copy {bar}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/closure-calling-parent-fn.rs:11:33: 11:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/closure-calling-parent-fn.rs:12:11: 12:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/closure-calling-parent-fn.rs:12:14: 12:14
    }
}
