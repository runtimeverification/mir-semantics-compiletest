// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test() -> impl Sized {
    let mut _0: impl Sized;              // return place in scope 0 at ui/impl-trait/recursive-impl-trait-type-direct.rs:5:14: 5:24

    bb0: {
        _0 = test() -> bb1;              // scope 0 at ui/impl-trait/recursive-impl-trait-type-direct.rs:6:5: 6:11
                                         // mir::Constant
                                         // + span: ui/impl-trait/recursive-impl-trait-type-direct.rs:6:5: 6:9
                                         // + literal: Const { ty: fn() -> impl Sized {test}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/recursive-impl-trait-type-direct.rs:7:2: 7:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/recursive-impl-trait-type-direct.rs:9:11: 9:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/recursive-impl-trait-type-direct.rs:9:13: 9:13
    }
}
