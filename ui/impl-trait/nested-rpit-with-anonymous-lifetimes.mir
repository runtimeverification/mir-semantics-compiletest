// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:12:1: 12:23>::vec_number_iterable_per_item_in_auxiliary_object(_1: &VecNumber<'_>) -> impl Iterator<Item = (&usize, impl Iterator<Item = &Number<'_>>)> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:14:9: 14:14
    let mut _0: impl std::iter::Iterator<Item = (&usize, impl std::iter::Iterator<Item = &Number<'_>>)>; // return place in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:15:10: 15:78
    let mut _2: std::slice::Iter<'_, usize>; // in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:9: 16:37
    let mut _3: &[usize];                // in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:9: 16:37
    let _4: &[usize];                    // in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:9: 16:37
    let mut _5: &std::vec::Vec<usize>;   // in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:9: 16:37
    let mut _6: [closure@ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:42: 16:50]; // in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:42: 19:10
    let mut _7: &std::vec::Vec<usize>;   // in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:14:9: 14:14

    bb0: {
        _7 = deref_copy ((*_1).1: &std::vec::Vec<usize>); // scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:9: 16:37
        _5 = _7;                         // scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:9: 16:37
        _4 = <Vec<usize> as Deref>::deref(move _5) -> bb1; // scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:9: 16:37
                                         // mir::Constant
                                         // + span: ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:9: 16:37
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<usize>) -> &'a <Vec<usize> as Deref>::Target {<Vec<usize> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:9: 16:37
        _2 = core::slice::<impl [usize]>::iter(move _3) -> bb2; // scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:9: 16:37
                                         // mir::Constant
                                         // + span: ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:31: 16:35
                                         // + literal: Const { ty: for<'a> fn(&'a [usize]) -> std::slice::Iter<'a, usize> {core::slice::<impl [usize]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = [closure@ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:42: 16:50] { self: _1 }; // scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:42: 19:10
                                         // closure
                                         // + def_id: DefId(0:13 ~ nested_rpit_with_anonymous_lifetimes[fbcf]::{impl#0}::vec_number_iterable_per_item_in_auxiliary_object::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     i16,
                                         //     extern "rust-call" fn((&usize,)) -> (&usize, std::slice::Iter<'_, Number<'_>>),
                                         //     (&VecNumber<'_>,),
                                         // ]
        _0 = <std::slice::Iter<'_, usize> as Iterator>::map::<(&usize, std::slice::Iter<'_, Number<'_>>), [closure@ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:42: 16:50]>(move _2, move _6) -> bb3; // scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:9: 19:11
                                         // mir::Constant
                                         // + span: ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:38: 16:41
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, usize>, [closure@ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:42: 16:50]) -> Map<std::slice::Iter<'_, usize>, [closure@ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:42: 16:50]> {<std::slice::Iter<'_, usize> as Iterator>::map::<(&usize, std::slice::Iter<'_, Number<'_>>), [closure@ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:42: 16:50]>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:20:6: 20:6
    }
}

fn <impl at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:12:1: 12:23>::vec_number_iterable_per_item_in_auxiliary_object::{closure#0}(_1: &mut [closure@ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:42: 16:50], _2: &usize) -> (&usize, std::slice::Iter<'_, Number<'_>>) {
    debug n => _2;                       // in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:48: 16:49
    debug self => ((*_1).0: &VecNumber<'_>); // in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:14:9: 14:14
    let mut _0: (&usize, std::slice::Iter<'_, Number<'_>>); // return place in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:51: 16:51
    let _3: std::slice::Iter<'_, Number<'_>>; // in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:17:17: 17:28
    let mut _4: &[Number<'_>];           // in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:17:31: 17:53
    let _5: &[Number<'_>];               // in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:17:31: 17:53
    let mut _6: &std::vec::Vec<Number<'_>>; // in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:17:31: 17:53
    let mut _7: &usize;                  // in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:18:14: 18:15
    let mut _8: std::slice::Iter<'_, Number<'_>>; // in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:18:17: 18:28
    let mut _9: &VecNumber<'_>;          // in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:16:42: 19:10
    scope 1 {
        debug iter_number => _3;         // in scope 1 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:17:17: 17:28
    }

    bb0: {
        _9 = deref_copy ((*_1).0: &VecNumber<'_>); // scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:17:31: 17:53
        _6 = &((*_9).0: std::vec::Vec<Number<'_>>); // scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:17:31: 17:53
        _5 = <Vec<Number<'_>> as Deref>::deref(move _6) -> bb1; // scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:17:31: 17:53
                                         // mir::Constant
                                         // + span: ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:17:31: 17:53
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Number<'_>>) -> &'a <Vec<Number<'_>> as Deref>::Target {<Vec<Number<'_>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:17:31: 17:53
        _3 = core::slice::<impl [Number<'_>]>::iter(move _4) -> bb2; // scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:17:31: 17:53
                                         // mir::Constant
                                         // + span: ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:17:47: 17:51
                                         // + literal: Const { ty: for<'a> fn(&'a [Number<'_>]) -> std::slice::Iter<'a, Number<'_>> {core::slice::<impl [Number<'_>]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = _2;                         // scope 1 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:18:14: 18:15
        _8 = move _3;                    // scope 1 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:18:17: 18:28
        _0 = (move _7, move _8);         // scope 1 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:18:13: 18:29
        return;                          // scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:19:10: 19:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:23:11: 23:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/nested-rpit-with-anonymous-lifetimes.rs:23:13: 23:13
    }
}
