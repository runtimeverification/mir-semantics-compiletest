// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-trait/projection.rs:12:1: 12:22>::foo(_1: &D) -> Option<()> {
    debug self => _1;                    // in scope 0 at ui/impl-trait/projection.rs:14:12: 14:16
    let mut _0: std::option::Option<()>; // return place in scope 0 at ui/impl-trait/projection.rs:14:21: 14:31

    bb0: {
        _0 = const Option::<()>::None;   // scope 0 at ui/impl-trait/projection.rs:14:34: 14:38
                                         // mir::Constant
                                         // + span: ui/impl-trait/projection.rs:14:34: 14:38
                                         // + literal: Const { ty: Option<()>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/impl-trait/projection.rs:14:40: 14:40
    }
}

fn run(_1: F) -> () {
    debug f => _1;                       // in scope 0 at ui/impl-trait/projection.rs:17:11: 17:12
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/projection.rs:18:5: 18:5
    let _2: &D;                          // in scope 0 at ui/impl-trait/projection.rs:21:9: 21:10
    let mut _3: std::option::Option<<&D as Tr>::It>; // in scope 0 at ui/impl-trait/projection.rs:22:25: 22:32
    let mut _4: &D;                      // in scope 0 at ui/impl-trait/projection.rs:22:25: 22:32
    let mut _5: isize;                   // in scope 0 at ui/impl-trait/projection.rs:22:15: 22:22
    let _7: ();                          // in scope 0 at ui/impl-trait/projection.rs:23:9: 23:13
    let mut _8: &F;                      // in scope 0 at ui/impl-trait/projection.rs:23:9: 23:10
    let mut _9: (<&D as Tr>::It,);       // in scope 0 at ui/impl-trait/projection.rs:23:9: 23:13
    let mut _10: &D;                     // in scope 0 at ui/impl-trait/projection.rs:21:13: 21:15
    scope 1 {
        debug d => _2;                   // in scope 1 at ui/impl-trait/projection.rs:21:9: 21:10
        scope 2 {
            debug i => _6;               // in scope 2 at ui/impl-trait/projection.rs:22:20: 22:21
            let _6: <&D as Tr>::It;      // in scope 2 at ui/impl-trait/projection.rs:22:20: 22:21
        }
    }

    bb0: {
        _10 = const _;                   // scope 0 at ui/impl-trait/projection.rs:21:13: 21:15
                                         // mir::Constant
                                         // + span: ui/impl-trait/projection.rs:21:13: 21:15
                                         // + literal: Const { ty: &D, val: Unevaluated(run, [F], Some(promoted[0])) }
        _2 = _10;                        // scope 0 at ui/impl-trait/projection.rs:21:13: 21:15
        goto -> bb1;                     // scope 1 at ui/impl-trait/projection.rs:22:5: 24:6
    }

    bb1: {
        _4 = _2;                         // scope 2 at ui/impl-trait/projection.rs:22:25: 22:32
        _3 = <&D as Tr>::foo(move _4) -> [return: bb2, unwind: bb6]; // scope 2 at ui/impl-trait/projection.rs:22:25: 22:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/projection.rs:22:27: 22:30
                                         // + literal: Const { ty: fn(&D) -> Option<<&D as Tr>::It> {<&D as Tr>::foo}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = discriminant(_3);           // scope 2 at ui/impl-trait/projection.rs:22:15: 22:22
        switchInt(move _5) -> [1: bb3, otherwise: bb4]; // scope 2 at ui/impl-trait/projection.rs:22:15: 22:22
    }

    bb3: {
        _6 = move ((_3 as Some).0: <&D as Tr>::It); // scope 2 at ui/impl-trait/projection.rs:22:20: 22:21
        _8 = &_1;                        // scope 2 at ui/impl-trait/projection.rs:23:9: 23:10
        _7 = <F as Fn<(<&D as Tr>::It,)>>::call(move _8, move _9) -> [return: bb8, unwind: bb6]; // scope 2 at ui/impl-trait/projection.rs:23:9: 23:13
                                         // mir::Constant
                                         // + span: ui/impl-trait/projection.rs:23:9: 23:10
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a F, (<&D as Tr>::It,)) -> <F as FnOnce<(<&D as Tr>::It,)>>::Output {<F as Fn<(<&D as Tr>::It,)>>::call}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/impl-trait/projection.rs:25:1: 25:2
    }

    bb5: {
        return;                          // scope 0 at ui/impl-trait/projection.rs:25:2: 25:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/impl-trait/projection.rs:25:1: 25:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/projection.rs:17:1: 25:2
    }

    bb8: {
        goto -> bb1;                     // scope 2 at ui/impl-trait/projection.rs:23:9: 23:13
    }
}

promoted[0] in run: &D = {
    let mut _0: &D;                      // return place in scope 0 at ui/impl-trait/projection.rs:21:13: 21:15
    let mut _1: D;                       // in scope 0 at ui/impl-trait/projection.rs:21:14: 21:15

    bb0: {
        _1 = D;                          // scope 0 at ui/impl-trait/projection.rs:21:14: 21:15
        _0 = &_1;                        // scope 0 at ui/impl-trait/projection.rs:21:13: 21:15
        return;                          // scope 0 at ui/impl-trait/projection.rs:21:13: 21:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/projection.rs:27:11: 27:11
    let _1: ();                          // in scope 0 at ui/impl-trait/projection.rs:28:5: 28:16
    let mut _2: [closure@ui/impl-trait/projection.rs:28:9: 28:12]; // in scope 0 at ui/impl-trait/projection.rs:28:9: 28:15

    bb0: {
        _1 = run::<[closure@ui/impl-trait/projection.rs:28:9: 28:12]>(move _2) -> bb1; // scope 0 at ui/impl-trait/projection.rs:28:5: 28:16
                                         // mir::Constant
                                         // + span: ui/impl-trait/projection.rs:28:5: 28:8
                                         // + literal: Const { ty: fn([closure@ui/impl-trait/projection.rs:28:9: 28:12]) {run::<[closure@ui/impl-trait/projection.rs:28:9: 28:12]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/projection.rs:29:2: 29:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/impl-trait/projection.rs:28:9: 28:12], _2: ()) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/projection.rs:28:13: 28:13

    bb0: {
        return;                          // scope 0 at ui/impl-trait/projection.rs:28:15: 28:15
    }
}
