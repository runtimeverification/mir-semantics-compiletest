// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &u32) -> impl Trait<'_> {
    debug x => _1;                       // in scope 0 at ui/impl-trait/region-escape-via-bound-contravariant.rs:16:16: 16:17
    let mut _0: impl Trait<'_>;          // return place in scope 0 at ui/impl-trait/region-escape-via-bound-contravariant.rs:16:31: 16:45

    bb0: {
        _0 = _1;                         // scope 0 at ui/impl-trait/region-escape-via-bound-contravariant.rs:19:5: 19:6
        return;                          // scope 0 at ui/impl-trait/region-escape-via-bound-contravariant.rs:20:2: 20:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/region-escape-via-bound-contravariant.rs:22:11: 22:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/region-escape-via-bound-contravariant.rs:22:14: 22:14
    }
}
