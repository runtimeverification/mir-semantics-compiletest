// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> impl Deprecated {
    let mut _0: impl Deprecated;         // return place in scope 0 at ui/impl-trait/deprecated_annotation.rs:15:13: 15:28

    bb0: {
        return;                          // scope 0 at ui/impl-trait/deprecated_annotation.rs:15:45: 15:45
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/deprecated_annotation.rs:17:11: 17:11
    let _1: impl Deprecated;             // in scope 0 at ui/impl-trait/deprecated_annotation.rs:18:5: 18:10

    bb0: {
        _1 = foo() -> bb1;               // scope 0 at ui/impl-trait/deprecated_annotation.rs:18:5: 18:10
                                         // mir::Constant
                                         // + span: ui/impl-trait/deprecated_annotation.rs:18:5: 18:8
                                         // + literal: Const { ty: fn() -> impl Deprecated {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/deprecated_annotation.rs:19:2: 19:2
    }
}
