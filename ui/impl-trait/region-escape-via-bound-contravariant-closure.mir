// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &u32) -> impl Fn() -> &u32 {
    debug x => _1;                       // in scope 0 at ui/impl-trait/region-escape-via-bound-contravariant-closure.rs:12:16: 12:17
    let mut _0: impl Fn() -> &u32;       // return place in scope 0 at ui/impl-trait/region-escape-via-bound-contravariant-closure.rs:12:31: 12:51

    bb0: {
        _0 = [closure@ui/impl-trait/region-escape-via-bound-contravariant-closure.rs:15:5: 15:12] { x: _1 }; // scope 0 at ui/impl-trait/region-escape-via-bound-contravariant-closure.rs:15:5: 15:14
                                         // closure
                                         // + def_id: DefId(0:6 ~ region_escape_via_bound_contravariant_closure[ab99]::foo::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     ReErased,
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> &u32,
                                         //     (&u32,),
                                         // ]
        return;                          // scope 0 at ui/impl-trait/region-escape-via-bound-contravariant-closure.rs:16:2: 16:2
    }
}

fn foo::{closure#0}(_1: &[closure@ui/impl-trait/region-escape-via-bound-contravariant-closure.rs:15:5: 15:12]) -> &u32 {
    debug x => ((*_1).0: &u32);          // in scope 0 at ui/impl-trait/region-escape-via-bound-contravariant-closure.rs:12:16: 12:17
    let mut _0: &u32;                    // return place in scope 0 at ui/impl-trait/region-escape-via-bound-contravariant-closure.rs:15:5: 15:14

    bb0: {
        _0 = deref_copy ((*_1).0: &u32); // scope 0 at ui/impl-trait/region-escape-via-bound-contravariant-closure.rs:15:13: 15:14
        return;                          // scope 0 at ui/impl-trait/region-escape-via-bound-contravariant-closure.rs:15:14: 15:14
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/region-escape-via-bound-contravariant-closure.rs:18:11: 18:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/region-escape-via-bound-contravariant-closure.rs:18:14: 18:14
    }
}
