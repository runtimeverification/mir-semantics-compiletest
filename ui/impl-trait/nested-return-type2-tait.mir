// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> impl Trait<Assoc = Sendable> {
    let mut _0: impl Trait<Assoc = Sendable>; // return place in scope 0 at ui/impl-trait/nested-return-type2-tait.rs:28:13: 28:41

    bb0: {
        return;                          // scope 0 at ui/impl-trait/nested-return-type2-tait.rs:31:2: 31:2
    }
}

fn foo::{closure#0}(_1: &[closure@ui/impl-trait/nested-return-type2-tait.rs:30:5: 30:7]) -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/impl-trait/nested-return-type2-tait.rs:30:8: 30:8

    bb0: {
        _0 = const 42_i32;               // scope 0 at ui/impl-trait/nested-return-type2-tait.rs:30:8: 30:10
        return;                          // scope 0 at ui/impl-trait/nested-return-type2-tait.rs:30:10: 30:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/nested-return-type2-tait.rs:33:11: 33:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/nested-return-type2-tait.rs:34:2: 34:2
    }
}
