// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn fibs(_1: u32) -> impl Iterator<Item = u128> {
    debug n => _1;                       // in scope 0 at ui/impl-trait/issue-49579.rs:3:9: 3:10
    let mut _0: impl std::iter::Iterator<Item = u128>; // return place in scope 0 at ui/impl-trait/issue-49579.rs:3:20: 3:44
    let mut _2: std::iter::Scan<std::ops::Range<u32>, (u128, u128), [closure@ui/impl-trait/issue-49579.rs:5:19: 5:26]>; // in scope 0 at ui/impl-trait/issue-49579.rs:4:5: 8:7
    let mut _3: std::ops::Range<u32>;    // in scope 0 at ui/impl-trait/issue-49579.rs:4:5: 4:13
    let mut _4: u32;                     // in scope 0 at ui/impl-trait/issue-49579.rs:4:11: 4:12
    let mut _5: (u128, u128);            // in scope 0 at ui/impl-trait/issue-49579.rs:5:11: 5:17
    let mut _6: [closure@ui/impl-trait/issue-49579.rs:5:19: 5:26]; // in scope 0 at ui/impl-trait/issue-49579.rs:5:19: 8:6
    let mut _7: &[closure@ui/impl-trait/issue-49579.rs:9:11: 9:19]; // in scope 0 at ui/impl-trait/issue-49579.rs:9:10: 9:21
    let mut _8: &[closure@ui/impl-trait/issue-49579.rs:9:11: 9:19]; // in scope 0 at ui/impl-trait/issue-49579.rs:9:10: 9:21

    bb0: {
        _4 = _1;                         // scope 0 at ui/impl-trait/issue-49579.rs:4:11: 4:12
        _3 = std::ops::Range::<u32> { start: const 0_u32, end: move _4 }; // scope 0 at ui/impl-trait/issue-49579.rs:4:5: 4:13
        _5 = const (0_u128, 1_u128);     // scope 0 at ui/impl-trait/issue-49579.rs:5:11: 5:17
        _2 = <std::ops::Range<u32> as Iterator>::scan::<(u128, u128), (u128, u128), [closure@ui/impl-trait/issue-49579.rs:5:19: 5:26]>(move _3, move _5, move _6) -> bb1; // scope 0 at ui/impl-trait/issue-49579.rs:4:5: 8:7
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49579.rs:5:6: 5:10
                                         // + literal: Const { ty: fn(std::ops::Range<u32>, (u128, u128), [closure@ui/impl-trait/issue-49579.rs:5:19: 5:26]) -> Scan<std::ops::Range<u32>, (u128, u128), [closure@ui/impl-trait/issue-49579.rs:5:19: 5:26]> {<std::ops::Range<u32> as Iterator>::scan::<(u128, u128), (u128, u128), [closure@ui/impl-trait/issue-49579.rs:5:19: 5:26]>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = const _;                    // scope 0 at ui/impl-trait/issue-49579.rs:9:10: 9:21
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49579.rs:9:10: 9:21
                                         // + literal: Const { ty: &[closure@ui/impl-trait/issue-49579.rs:9:11: 9:19], val: Unevaluated(fibs, [], Some(promoted[0])) }
        _7 = _8;                         // scope 0 at ui/impl-trait/issue-49579.rs:9:10: 9:21
        _0 = <Scan<std::ops::Range<u32>, (u128, u128), [closure@ui/impl-trait/issue-49579.rs:5:19: 5:26]> as Iterator>::map::<u128, &[closure@ui/impl-trait/issue-49579.rs:9:11: 9:19]>(move _2, move _7) -> bb2; // scope 0 at ui/impl-trait/issue-49579.rs:4:5: 9:22
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49579.rs:9:6: 9:9
                                         // + literal: Const { ty: fn(Scan<std::ops::Range<u32>, (u128, u128), [closure@ui/impl-trait/issue-49579.rs:5:19: 5:26]>, &[closure@ui/impl-trait/issue-49579.rs:9:11: 9:19]) -> Map<Scan<std::ops::Range<u32>, (u128, u128), [closure@ui/impl-trait/issue-49579.rs:5:19: 5:26]>, &[closure@ui/impl-trait/issue-49579.rs:9:11: 9:19]> {<Scan<std::ops::Range<u32>, (u128, u128), [closure@ui/impl-trait/issue-49579.rs:5:19: 5:26]> as Iterator>::map::<u128, &[closure@ui/impl-trait/issue-49579.rs:9:11: 9:19]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/issue-49579.rs:10:2: 10:2
    }
}

promoted[0] in fibs: &[closure@ui/impl-trait/issue-49579.rs:9:11: 9:19] = {
    let mut _0: &[closure@ui/impl-trait/issue-49579.rs:9:11: 9:19]; // return place in scope 0 at ui/impl-trait/issue-49579.rs:9:10: 9:21
    let mut _1: [closure@ui/impl-trait/issue-49579.rs:9:11: 9:19]; // in scope 0 at ui/impl-trait/issue-49579.rs:9:11: 9:21

    bb0: {
        _1 = [closure@ui/impl-trait/issue-49579.rs:9:11: 9:19]; // scope 0 at ui/impl-trait/issue-49579.rs:9:11: 9:21
                                         // closure
                                         // + def_id: DefId(0:5 ~ issue_49579[4586]::fibs::{closure#1})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(((u128, u128),)) -> u128,
                                         //     (),
                                         // ]
        _0 = &_1;                        // scope 0 at ui/impl-trait/issue-49579.rs:9:10: 9:21
        return;                          // scope 0 at ui/impl-trait/issue-49579.rs:9:10: 9:21
    }
}

fn fibs::{closure#0}(_1: &mut [closure@ui/impl-trait/issue-49579.rs:5:19: 5:26], _2: &mut (u128, u128), _3: u32) -> Option<(u128, u128)> {
    debug st => _2;                      // in scope 0 at ui/impl-trait/issue-49579.rs:5:20: 5:22
    let mut _0: std::option::Option<(u128, u128)>; // return place in scope 0 at ui/impl-trait/issue-49579.rs:5:27: 5:27
    let mut _4: u128;                    // in scope 0 at ui/impl-trait/issue-49579.rs:6:16: 6:20
    let mut _5: u128;                    // in scope 0 at ui/impl-trait/issue-49579.rs:6:22: 6:33
    let mut _6: u128;                    // in scope 0 at ui/impl-trait/issue-49579.rs:6:22: 6:26
    let mut _7: u128;                    // in scope 0 at ui/impl-trait/issue-49579.rs:6:29: 6:33
    let mut _8: (u128, bool);            // in scope 0 at ui/impl-trait/issue-49579.rs:6:22: 6:33
    let mut _9: (u128, u128);            // in scope 0 at ui/impl-trait/issue-49579.rs:7:14: 7:17

    bb0: {
        _4 = ((*_2).1: u128);            // scope 0 at ui/impl-trait/issue-49579.rs:6:16: 6:20
        _6 = ((*_2).0: u128);            // scope 0 at ui/impl-trait/issue-49579.rs:6:22: 6:26
        _7 = ((*_2).1: u128);            // scope 0 at ui/impl-trait/issue-49579.rs:6:29: 6:33
        _8 = CheckedAdd(_6, _7);         // scope 0 at ui/impl-trait/issue-49579.rs:6:22: 6:33
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, move _7) -> bb1; // scope 0 at ui/impl-trait/issue-49579.rs:6:22: 6:33
    }

    bb1: {
        _5 = move (_8.0: u128);          // scope 0 at ui/impl-trait/issue-49579.rs:6:22: 6:33
        (*_2) = (move _4, move _5);      // scope 0 at ui/impl-trait/issue-49579.rs:6:9: 6:34
        _9 = (*_2);                      // scope 0 at ui/impl-trait/issue-49579.rs:7:14: 7:17
        _0 = Option::<(u128, u128)>::Some(move _9); // scope 0 at ui/impl-trait/issue-49579.rs:7:9: 7:18
        return;                          // scope 0 at ui/impl-trait/issue-49579.rs:8:6: 8:6
    }
}

fn fibs::{closure#1}(_1: &[closure@ui/impl-trait/issue-49579.rs:9:11: 9:19], _2: (u128, u128)) -> u128 {
    let mut _0: u128;                    // return place in scope 0 at ui/impl-trait/issue-49579.rs:9:13: 9:14
    scope 1 {
        debug f => _0;                   // in scope 1 at ui/impl-trait/issue-49579.rs:9:13: 9:14
    }

    bb0: {
        _0 = (_2.0: u128);               // scope 0 at ui/impl-trait/issue-49579.rs:9:13: 9:14
        return;                          // scope 0 at ui/impl-trait/issue-49579.rs:9:21: 9:21
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/issue-49579.rs:12:11: 12:11
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/impl-trait/issue-49579.rs:13:14: 13:20
    let mut _4: &[&str; 2];              // in scope 0 at ui/impl-trait/issue-49579.rs:13:14: 13:20
    let _5: &[&str; 2];                  // in scope 0 at ui/impl-trait/issue-49579.rs:13:14: 13:20
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/issue-49579.rs:13:22: 13:50
    let mut _11: &std::vec::Vec<u128>;   // in scope 0 at ui/impl-trait/issue-49579.rs:13:22: 13:50
    let _12: &std::vec::Vec<u128>;       // in scope 0 at ui/impl-trait/issue-49579.rs:13:22: 13:50
    let _13: std::vec::Vec<u128>;        // in scope 0 at ui/impl-trait/issue-49579.rs:13:22: 13:50
    let mut _14: impl std::iter::Iterator<Item = u128>; // in scope 0 at ui/impl-trait/issue-49579.rs:13:22: 13:30
    let mut _15: &[&str; 2];             // in scope 0 at ui/impl-trait/issue-49579.rs:13:14: 13:20

    bb0: {
        _15 = const _;                   // scope 0 at ui/impl-trait/issue-49579.rs:13:14: 13:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49579.rs:13:14: 13:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _15;                        // scope 0 at ui/impl-trait/issue-49579.rs:13:14: 13:20
        _4 = _5;                         // scope 0 at ui/impl-trait/issue-49579.rs:13:14: 13:20
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/impl-trait/issue-49579.rs:13:14: 13:20
        _14 = fibs(const 10_u32) -> bb1; // scope 0 at ui/impl-trait/issue-49579.rs:13:22: 13:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49579.rs:13:22: 13:26
                                         // + literal: Const { ty: fn(u32) -> impl Iterator<Item = u128> {fibs}, val: Value(<ZST>) }
    }

    bb1: {
        _13 = <impl Iterator<Item = u128> as Iterator>::collect::<Vec<u128>>(move _14) -> bb2; // scope 0 at ui/impl-trait/issue-49579.rs:13:22: 13:50
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49579.rs:13:31: 13:38
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(impl Iterator<Item = u128>) -> Vec<u128> {<impl Iterator<Item = u128> as Iterator>::collect::<Vec<u128>>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = &_13;                      // scope 0 at ui/impl-trait/issue-49579.rs:13:22: 13:50
        _11 = _12;                       // scope 0 at ui/impl-trait/issue-49579.rs:13:22: 13:50
        _10 = core::fmt::ArgumentV1::<'_>::new_debug::<Vec<u128>>(move _11) -> [return: bb3, unwind: bb7]; // scope 0 at ui/impl-trait/issue-49579.rs:13:22: 13:50
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49579.rs:13:22: 13:50
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Vec<u128>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Vec<u128>>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = [move _10];                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> [return: bb4, unwind: bb7]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _1 = _print(move _2) -> [return: bb5, unwind: bb7]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_13) -> bb6;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb6: {
        return;                          // scope 0 at ui/impl-trait/issue-49579.rs:14:2: 14:2
    }

    bb7 (cleanup): {
        drop(_13) -> bb8;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/issue-49579.rs:12:1: 14:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/impl-trait/issue-49579.rs:13:14: 13:20
    let mut _1: [&str; 2];               // in scope 0 at ui/impl-trait/issue-49579.rs:13:14: 13:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/impl-trait/issue-49579.rs:13:14: 13:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49579.rs:13:14: 13:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/issue-49579.rs:13:14: 13:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/issue-49579.rs:13:14: 13:20
        return;                          // scope 0 at ui/impl-trait/issue-49579.rs:13:14: 13:20
    }
}
