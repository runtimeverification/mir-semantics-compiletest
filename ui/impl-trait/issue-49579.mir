// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn fibs(_1: u32) -> impl Iterator<Item = u128> {
    debug n => _1;
    let mut _0: impl std::iter::Iterator<Item = u128>;
    let mut _2: std::iter::Scan<std::ops::Range<u32>, (u128, u128), [closure@ui/impl-trait/issue-49579.rs:5:19: 5:26]>;
    let mut _3: std::ops::Range<u32>;
    let mut _4: (u128, u128);
    let mut _5: &[closure@ui/impl-trait/issue-49579.rs:9:11: 9:19];

    bb0: {
        _3 = std::ops::Range::<u32> { start: const 0_u32, end: _1 };
        _4 = (const 0_u128, const 1_u128);
        _2 = <std::ops::Range<u32> as Iterator>::scan::<(u128, u128), (u128, u128), [closure@ui/impl-trait/issue-49579.rs:5:19: 5:26]>(move _3, move _4, const ZeroSized: [closure@ui/impl-trait/issue-49579.rs:5:19: 5:26]) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = const _;
        _0 = <Scan<std::ops::Range<u32>, (u128, u128), [closure@ui/impl-trait/issue-49579.rs:5:19: 5:26]> as Iterator>::map::<u128, &[closure@ui/impl-trait/issue-49579.rs:9:11: 9:19]>(move _2, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in fibs: &[closure@ui/impl-trait/issue-49579.rs:9:11: 9:19] = {
    let mut _0: &[closure@ui/impl-trait/issue-49579.rs:9:11: 9:19];
    let mut _1: [closure@ui/impl-trait/issue-49579.rs:9:11: 9:19];

    bb0: {
        _1 = [closure@ui/impl-trait/issue-49579.rs:9:11: 9:19];
        _0 = &_1;
        return;
    }
}

fn fibs::{closure#0}(_1: &mut [closure@ui/impl-trait/issue-49579.rs:5:19: 5:26], _2: &mut (u128, u128), _3: u32) -> Option<(u128, u128)> {
    debug st => _2;
    let mut _0: std::option::Option<(u128, u128)>;
    let mut _4: u128;
    let mut _5: u128;
    let mut _6: u128;
    let mut _7: u128;
    let mut _8: (u128, u128);

    bb0: {
        _4 = ((*_2).1: u128);
        _6 = ((*_2).0: u128);
        _7 = ((*_2).1: u128);
        _5 = Add(move _6, move _7);
        (*_2) = (move _4, move _5);
        _8 = (*_2);
        _0 = Option::<(u128, u128)>::Some(move _8);
        return;
    }
}

fn fibs::{closure#1}(_1: &[closure@ui/impl-trait/issue-49579.rs:9:11: 9:19], _2: (u128, u128)) -> u128 {
    let mut _0: u128;
    scope 1 {
        debug f => _0;
    }

    bb0: {
        _0 = (_2.0: u128);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &std::vec::Vec<u128>;
    let _9: std::vec::Vec<u128>;
    let mut _10: impl std::iter::Iterator<Item = u128>;
    let mut _11: &[&str; 2];

    bb0: {
        _11 = const _;
        _3 = _11 as &[&str] (Pointer(Unsize));
        _10 = fibs(const 10_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = <impl Iterator<Item = u128> as Iterator>::collect::<Vec<u128>>(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = &_9;
        _7 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<u128>>(_8) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _1 = _print(move _2) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_9) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_9) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
