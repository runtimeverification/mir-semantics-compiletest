// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn frob(_1: &str) -> impl Deref<Target = Path> + '_ {
    debug path => _1;                    // in scope 0 at ui/impl-trait/autoderef.rs:7:9: 7:13
    let mut _0: impl std::ops::Deref<Target = std::path::Path> + '_; // return place in scope 0 at ui/impl-trait/autoderef.rs:7:24: 7:54
    let mut _2: &std::ffi::OsStr;        // in scope 0 at ui/impl-trait/autoderef.rs:8:5: 8:30
    let _3: &std::ffi::OsStr;            // in scope 0 at ui/impl-trait/autoderef.rs:8:5: 8:21
    let mut _4: &str;                    // in scope 0 at ui/impl-trait/autoderef.rs:8:16: 8:20

    bb0: {
        _4 = _1;                         // scope 0 at ui/impl-trait/autoderef.rs:8:16: 8:20
        _3 = OsStr::new::<str>(move _4) -> bb1; // scope 0 at ui/impl-trait/autoderef.rs:8:5: 8:21
                                         // mir::Constant
                                         // + span: ui/impl-trait/autoderef.rs:8:5: 8:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> &'a OsStr {OsStr::new::<str>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _3;                         // scope 0 at ui/impl-trait/autoderef.rs:8:5: 8:30
        _0 = <OsStr as AsRef<Path>>::as_ref(move _2) -> bb2; // scope 0 at ui/impl-trait/autoderef.rs:8:5: 8:30
                                         // mir::Constant
                                         // + span: ui/impl-trait/autoderef.rs:8:22: 8:28
                                         // + literal: Const { ty: for<'a> fn(&'a OsStr) -> &'a Path {<OsStr as AsRef<Path>>::as_ref}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/autoderef.rs:9:2: 9:2
    }
}

fn open_parent(_1: &Path) -> () {
    debug _path => _1;                   // in scope 0 at ui/impl-trait/autoderef.rs:11:23: 11:28
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/autoderef.rs:11:43: 11:43
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/autoderef.rs:15:11: 15:11
    let _1: impl std::ops::Deref<Target = std::path::Path> + '_; // in scope 0 at ui/impl-trait/autoderef.rs:16:9: 16:17
    let mut _2: &str;                    // in scope 0 at ui/impl-trait/autoderef.rs:16:25: 16:32
    let _3: &str;                        // in scope 0 at ui/impl-trait/autoderef.rs:16:25: 16:32
    let _4: ();                          // in scope 0 at ui/impl-trait/autoderef.rs:18:5: 18:27
    let mut _5: &std::path::Path;        // in scope 0 at ui/impl-trait/autoderef.rs:18:17: 18:26
    let _6: &std::path::Path;            // in scope 0 at ui/impl-trait/autoderef.rs:18:17: 18:26
    let mut _7: &impl std::ops::Deref<Target = std::path::Path> + '_; // in scope 0 at ui/impl-trait/autoderef.rs:18:17: 18:26
    let _8: &impl std::ops::Deref<Target = std::path::Path> + '_; // in scope 0 at ui/impl-trait/autoderef.rs:18:17: 18:26
    scope 1 {
        debug old_path => _1;            // in scope 1 at ui/impl-trait/autoderef.rs:16:9: 16:17
    }

    bb0: {
        _3 = const "hello";              // scope 0 at ui/impl-trait/autoderef.rs:16:25: 16:32
                                         // mir::Constant
                                         // + span: ui/impl-trait/autoderef.rs:16:25: 16:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/impl-trait/autoderef.rs:16:25: 16:32
        _1 = frob(move _2) -> bb1;       // scope 0 at ui/impl-trait/autoderef.rs:16:20: 16:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/autoderef.rs:16:20: 16:24
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> impl Deref<Target = Path> + 'a {frob}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_1;                        // scope 1 at ui/impl-trait/autoderef.rs:18:17: 18:26
        _7 = _8;                         // scope 1 at ui/impl-trait/autoderef.rs:18:17: 18:26
        _6 = <impl Deref<Target = Path> + '_ as Deref>::deref(move _7) -> bb2; // scope 1 at ui/impl-trait/autoderef.rs:18:17: 18:26
                                         // mir::Constant
                                         // + span: ui/impl-trait/autoderef.rs:18:17: 18:26
                                         // + literal: Const { ty: for<'a> fn(&'a impl Deref<Target = Path> + '_) -> &'a <impl Deref<Target = Path> + '_ as Deref>::Target {<impl Deref<Target = Path> + '_ as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = _6;                         // scope 1 at ui/impl-trait/autoderef.rs:18:17: 18:26
        _4 = open_parent(move _5) -> bb3; // scope 1 at ui/impl-trait/autoderef.rs:18:5: 18:27
                                         // mir::Constant
                                         // + span: ui/impl-trait/autoderef.rs:18:5: 18:16
                                         // + literal: Const { ty: for<'path> fn(&'path Path) {open_parent}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/impl-trait/autoderef.rs:19:2: 19:2
    }
}
