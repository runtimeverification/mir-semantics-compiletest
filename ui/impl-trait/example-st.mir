// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bind(_1: A, _2: F) -> impl for<'a> FnMut(&'a mut State) -> Result<U, ()> {
    debug a => _1;                       // in scope 0 at ui/impl-trait/example-st.rs:11:24: 11:29
    debug f => _2;                       // in scope 0 at ui/impl-trait/example-st.rs:11:34: 11:39
    let mut _0: impl for<'a> FnMut(&'a mut State) -> std::result::Result<U, ()>; // return place in scope 0 at ui/impl-trait/example-st.rs:12:27: 12:69

    bb0: {
        _0 = [closure@ui/impl-trait/example-st.rs:17:5: 17:18] { a: move _1, f: move _2 }; // scope 0 at ui/impl-trait/example-st.rs:17:5: 20:6
                                         // closure
                                         // + def_id: DefId(0:16 ~ example_st[f70d]::bind::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     U,
                                         //     A,
                                         //     B,
                                         //     F,
                                         //     i16,
                                         //     for<'a> extern "rust-call" fn((&'a mut State,)) -> std::result::Result<U, ()>,
                                         //     (A, F),
                                         // ]
        return;                          // scope 0 at ui/impl-trait/example-st.rs:21:2: 21:2
    }
}

fn bind::{closure#0}(_1: &mut [closure@ui/impl-trait/example-st.rs:17:5: 17:18], _2: &mut State) -> Result<U, ()> {
    debug state => _2;                   // in scope 0 at ui/impl-trait/example-st.rs:17:11: 17:16
    debug a => ((*_1).0: A);             // in scope 0 at ui/impl-trait/example-st.rs:11:24: 11:29
    debug f => ((*_1).1: F);             // in scope 0 at ui/impl-trait/example-st.rs:11:34: 11:39
    let mut _0: std::result::Result<U, ()>; // return place in scope 0 at ui/impl-trait/example-st.rs:17:19: 17:19
    let _3: T;                           // in scope 0 at ui/impl-trait/example-st.rs:18:13: 18:14
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, T>; // in scope 0 at ui/impl-trait/example-st.rs:18:17: 18:26
    let mut _5: std::result::Result<T, ()>; // in scope 0 at ui/impl-trait/example-st.rs:18:17: 18:25
    let mut _6: &mut A;                  // in scope 0 at ui/impl-trait/example-st.rs:18:17: 18:18
    let mut _7: (&mut State,);           // in scope 0 at ui/impl-trait/example-st.rs:18:17: 18:25
    let mut _8: &mut State;              // in scope 0 at ui/impl-trait/example-st.rs:18:19: 18:24
    let mut _9: isize;                   // in scope 0 at ui/impl-trait/example-st.rs:18:25: 18:26
    let _10: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/impl-trait/example-st.rs:18:25: 18:26
    let mut _11: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/impl-trait/example-st.rs:18:25: 18:26
    let _12: T;                          // in scope 0 at ui/impl-trait/example-st.rs:18:17: 18:26
    let mut _13: &mut B;                 // in scope 0 at ui/impl-trait/example-st.rs:19:9: 19:13
    let mut _14: B;                      // in scope 0 at ui/impl-trait/example-st.rs:19:9: 19:13
    let mut _15: &mut F;                 // in scope 0 at ui/impl-trait/example-st.rs:19:9: 19:10
    let mut _16: (T,);                   // in scope 0 at ui/impl-trait/example-st.rs:19:9: 19:13
    let mut _17: T;                      // in scope 0 at ui/impl-trait/example-st.rs:19:11: 19:12
    let mut _18: (&mut State,);          // in scope 0 at ui/impl-trait/example-st.rs:19:9: 19:20
    let mut _19: &mut State;             // in scope 0 at ui/impl-trait/example-st.rs:19:14: 19:19
    let mut _20: bool;                   // in scope 0 at ui/impl-trait/example-st.rs:20:5: 20:6
    scope 1 {
        debug r => _3;                   // in scope 1 at ui/impl-trait/example-st.rs:18:13: 18:14
    }
    scope 2 {
        debug residual => _10;           // in scope 2 at ui/impl-trait/example-st.rs:18:25: 18:26
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;                // in scope 4 at ui/impl-trait/example-st.rs:18:17: 18:26
        scope 5 {
        }
    }

    bb0: {
        _20 = const false;               // scope 0 at ui/impl-trait/example-st.rs:18:13: 18:14
        _6 = &mut ((*_1).0: A);          // scope 0 at ui/impl-trait/example-st.rs:18:17: 18:18
        _8 = &mut (*_2);                 // scope 0 at ui/impl-trait/example-st.rs:18:19: 18:24
        _7 = (move _8,);                 // scope 0 at ui/impl-trait/example-st.rs:18:17: 18:25
        _5 = <A as FnMut<(&mut State,)>>::call_mut(move _6, move _7) -> bb1; // scope 0 at ui/impl-trait/example-st.rs:18:17: 18:25
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-st.rs:18:17: 18:18
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut A, (&mut State,)) -> <A as FnOnce<(&mut State,)>>::Output {<A as FnMut<(&mut State,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <Result<T, ()> as Try>::branch(move _5) -> bb2; // scope 0 at ui/impl-trait/example-st.rs:18:17: 18:26
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-st.rs:18:17: 18:26
                                         // + literal: Const { ty: fn(Result<T, ()>) -> ControlFlow<<Result<T, ()> as Try>::Residual, <Result<T, ()> as Try>::Output> {<Result<T, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = discriminant(_4);           // scope 0 at ui/impl-trait/example-st.rs:18:17: 18:26
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at ui/impl-trait/example-st.rs:18:17: 18:26
    }

    bb3: {
        _12 = move ((_4 as Continue).0: T); // scope 0 at ui/impl-trait/example-st.rs:18:17: 18:26
        _20 = const true;                // scope 5 at ui/impl-trait/example-st.rs:18:17: 18:26
        _3 = move _12;                   // scope 5 at ui/impl-trait/example-st.rs:18:17: 18:26
        _15 = &mut ((*_1).1: F);         // scope 1 at ui/impl-trait/example-st.rs:19:9: 19:10
        _20 = const false;               // scope 1 at ui/impl-trait/example-st.rs:19:11: 19:12
        _17 = move _3;                   // scope 1 at ui/impl-trait/example-st.rs:19:11: 19:12
        _16 = (move _17,);               // scope 1 at ui/impl-trait/example-st.rs:19:9: 19:13
        _14 = <F as FnMut<(T,)>>::call_mut(move _15, move _16) -> [return: bb7, unwind: bb13]; // scope 1 at ui/impl-trait/example-st.rs:19:9: 19:13
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-st.rs:19:9: 19:10
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (T,)) -> <F as FnOnce<(T,)>>::Output {<F as FnMut<(T,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at ui/impl-trait/example-st.rs:18:17: 18:26
    }

    bb5: {
        _0 = <Result<U, ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _11) -> bb6; // scope 3 at ui/impl-trait/example-st.rs:18:17: 18:26
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-st.rs:18:25: 18:26
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<U, ()> {<Result<U, ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _20 = const false;               // scope 0 at ui/impl-trait/example-st.rs:20:5: 20:6
        goto -> bb9;                     // scope 0 at ui/impl-trait/example-st.rs:20:6: 20:6
    }

    bb7: {
        _13 = &mut _14;                  // scope 1 at ui/impl-trait/example-st.rs:19:9: 19:13
        _19 = &mut (*_2);                // scope 1 at ui/impl-trait/example-st.rs:19:14: 19:19
        _18 = (move _19,);               // scope 1 at ui/impl-trait/example-st.rs:19:9: 19:20
        _0 = <B as FnMut<(&mut State,)>>::call_mut(move _13, move _18) -> [return: bb8, unwind: bb10]; // scope 1 at ui/impl-trait/example-st.rs:19:9: 19:20
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-st.rs:19:9: 19:13
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut B, (&mut State,)) -> <B as FnOnce<(&mut State,)>>::Output {<B as FnMut<(&mut State,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb8: {
        _20 = const false;               // scope 0 at ui/impl-trait/example-st.rs:20:5: 20:6
        drop(_14) -> bb9;                // scope 0 at ui/impl-trait/example-st.rs:20:5: 20:6
    }

    bb9: {
        return;                          // scope 0 at ui/impl-trait/example-st.rs:20:6: 20:6
    }

    bb10 (cleanup): {
        drop(_14) -> bb11;               // scope 0 at ui/impl-trait/example-st.rs:20:5: 20:6
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/example-st.rs:17:5: 20:6
    }

    bb12 (cleanup): {
        drop(_3) -> bb11;                // scope 0 at ui/impl-trait/example-st.rs:20:5: 20:6
    }

    bb13 (cleanup): {
        switchInt(_20) -> [0: bb11, otherwise: bb12]; // scope 0 at ui/impl-trait/example-st.rs:20:5: 20:6
    }
}

fn atom(_1: T) -> impl for<'a> FnMut(&'a mut State) -> Result<T, ()> {
    debug x => _1;                       // in scope 0 at ui/impl-trait/example-st.rs:23:12: 23:13
    let mut _0: impl for<'a> FnMut(&'a mut State) -> std::result::Result<T, ()>; // return place in scope 0 at ui/impl-trait/example-st.rs:23:21: 23:63
    let mut _2: std::option::Option<T>;  // in scope 0 at ui/impl-trait/example-st.rs:24:9: 24:14
    let mut _3: T;                       // in scope 0 at ui/impl-trait/example-st.rs:24:22: 24:23
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/impl-trait/example-st.rs:24:9: 24:14
    }

    bb0: {
        _3 = move _1;                    // scope 0 at ui/impl-trait/example-st.rs:24:22: 24:23
        _2 = Option::<T>::Some(move _3); // scope 0 at ui/impl-trait/example-st.rs:24:17: 24:24
        _0 = [closure@ui/impl-trait/example-st.rs:25:5: 25:13] { x: move _2 }; // scope 1 at ui/impl-trait/example-st.rs:25:5: 25:42
                                         // closure
                                         // + def_id: DefId(0:19 ~ example_st[f70d]::atom::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     i16,
                                         //     for<'a> extern "rust-call" fn((&'a mut State,)) -> std::result::Result<T, ()>,
                                         //     (std::option::Option<T>,),
                                         // ]
        return;                          // scope 0 at ui/impl-trait/example-st.rs:26:2: 26:2
    }
}

fn atom::{closure#0}(_1: &mut [closure@ui/impl-trait/example-st.rs:25:5: 25:13], _2: &mut State) -> Result<T, ()> {
    debug x => ((*_1).0: std::option::Option<T>); // in scope 0 at ui/impl-trait/example-st.rs:24:9: 24:14
    let mut _0: std::result::Result<T, ()>; // return place in scope 0 at ui/impl-trait/example-st.rs:25:14: 25:14
    let mut _3: std::option::Option<T>;  // in scope 0 at ui/impl-trait/example-st.rs:25:14: 25:22
    let mut _4: &mut std::option::Option<T>; // in scope 0 at ui/impl-trait/example-st.rs:25:14: 25:22
    let mut _5: std::result::Result<T, ()>; // in scope 0 at ui/impl-trait/example-st.rs:25:30: 25:37
    let mut _6: ();                      // in scope 0 at ui/impl-trait/example-st.rs:25:34: 25:36

    bb0: {
        _4 = &mut ((*_1).0: std::option::Option<T>); // scope 0 at ui/impl-trait/example-st.rs:25:14: 25:22
        _3 = Option::<T>::take(move _4) -> bb1; // scope 0 at ui/impl-trait/example-st.rs:25:14: 25:22
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-st.rs:25:16: 25:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Option<T>) -> Option<T> {Option::<T>::take}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = Result::<T, ()>::Err(move _6); // scope 0 at ui/impl-trait/example-st.rs:25:30: 25:37
        _0 = Option::<T>::map_or::<Result<T, ()>, fn(T) -> Result<T, ()> {Result::<T, ()>::Ok}>(move _3, move _5, Result::<T, ()>::Ok) -> bb2; // scope 0 at ui/impl-trait/example-st.rs:25:14: 25:42
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-st.rs:25:23: 25:29
                                         // + literal: Const { ty: fn(Option<T>, Result<T, ()>, fn(T) -> Result<T, ()> {Result::<T, ()>::Ok}) -> Result<T, ()> {Option::<T>::map_or::<Result<T, ()>, fn(T) -> Result<T, ()> {Result::<T, ()>::Ok}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-st.rs:25:39: 25:41
                                         // + literal: Const { ty: fn(T) -> Result<T, ()> {Result::<T, ()>::Ok}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/impl-trait/example-st.rs:25:42: 25:42
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/example-st.rs:28:11: 28:11
    let mut _1: (&std::result::Result<bool, ()>, &std::result::Result<bool, ()>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::result::Result<bool, ()>; // in scope 0 at ui/impl-trait/example-st.rs:29:16: 29:58
    let mut _4: &mut impl for<'a> FnMut(&'a mut State) -> std::result::Result<bool, ()>; // in scope 0 at ui/impl-trait/example-st.rs:29:16: 29:46
    let mut _5: impl for<'a> FnMut(&'a mut State) -> std::result::Result<bool, ()>; // in scope 0 at ui/impl-trait/example-st.rs:29:16: 29:46
    let mut _6: impl for<'a> FnMut(&'a mut State) -> std::result::Result<i32, ()>; // in scope 0 at ui/impl-trait/example-st.rs:29:21: 29:28
    let mut _7: [closure@ui/impl-trait/example-st.rs:29:30: 29:33]; // in scope 0 at ui/impl-trait/example-st.rs:29:30: 29:45
    let mut _8: (&mut State,);           // in scope 0 at ui/impl-trait/example-st.rs:29:16: 29:58
    let mut _9: &mut State;              // in scope 0 at ui/impl-trait/example-st.rs:29:47: 29:57
    let mut _10: &mut State;             // in scope 0 at ui/impl-trait/example-st.rs:29:47: 29:57
    let mut _11: State;                  // in scope 0 at ui/impl-trait/example-st.rs:29:52: 29:57
    let mut _12: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _13: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _14: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _17: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _18: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _20: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _21: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _22: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _23: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _24: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _25: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _27: &std::result::Result<bool, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _13;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _14;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _19: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _19;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _6 = atom::<i32>(const 5_i32) -> bb1; // scope 0 at ui/impl-trait/example-st.rs:29:21: 29:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-st.rs:29:21: 29:25
                                         // + literal: Const { ty: fn(i32) -> impl for<'a> FnMut(&'a mut State) -> Result<i32, ()> {atom::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = bind::<i32, bool, impl for<'a> FnMut(&'a mut State) -> Result<i32, ()>, impl for<'a> FnMut(&'a mut State) -> Result<bool, ()>, [closure@ui/impl-trait/example-st.rs:29:30: 29:33]>(move _6, move _7) -> bb2; // scope 0 at ui/impl-trait/example-st.rs:29:16: 29:46
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-st.rs:29:16: 29:20
                                         // + literal: Const { ty: fn(impl for<'a> FnMut(&'a mut State) -> Result<i32, ()>, [closure@ui/impl-trait/example-st.rs:29:30: 29:33]) -> impl for<'a> FnMut(&'a mut State) -> Result<bool, ()> {bind::<i32, bool, impl for<'a> FnMut(&'a mut State) -> Result<i32, ()>, impl for<'a> FnMut(&'a mut State) -> Result<bool, ()>, [closure@ui/impl-trait/example-st.rs:29:30: 29:33]>}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &mut _5;                    // scope 0 at ui/impl-trait/example-st.rs:29:16: 29:46
        _10 = &mut _11;                  // scope 0 at ui/impl-trait/example-st.rs:29:47: 29:57
        _9 = &mut (*_10);                // scope 0 at ui/impl-trait/example-st.rs:29:47: 29:57
        _8 = (move _9,);                 // scope 0 at ui/impl-trait/example-st.rs:29:16: 29:58
        _3 = <impl for<'a> FnMut(&'a mut State) -> Result<bool, ()> as FnMut<(&mut State,)>>::call_mut(move _4, move _8) -> bb3; // scope 0 at ui/impl-trait/example-st.rs:29:16: 29:58
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-st.rs:29:16: 29:46
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut impl for<'a> FnMut(&'a mut State) -> Result<bool, ()>, (&mut State,)) -> <impl for<'a> FnMut(&'a mut State) -> Result<bool, ()> as FnOnce<(&mut State,)>>::Output {<impl for<'a> FnMut(&'a mut State) -> Result<bool, ()> as FnMut<(&mut State,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Result<bool, ()>, val: Unevaluated(main, [], Some(promoted[0])) }
        _12 = _27;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _12);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _13 = (_1.0: &std::result::Result<bool, ()>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _14 = (_1.1: &std::result::Result<bool, ()>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _17 = _13;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _18 = _14;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _16 = <Result<bool, ()> as PartialEq>::eq(move _17, move _18) -> bb4; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<bool, ()>, &'b Result<bool, ()>) -> bool {<Result<bool, ()> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = Not(move _16);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _15) -> [0: bb6, otherwise: bb5]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _19 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = _13;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _23;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _14;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = _25;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _20 = core::panicking::assert_failed::<Result<bool, ()>, Result<bool, ()>>(move _21, move _22, move _24, move _26); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<bool, ()>, &'b Result<bool, ()>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<bool, ()>, Result<bool, ()>>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/impl-trait/example-st.rs:30:2: 30:2
    }
}

promoted[0] in main: &Result<bool, ()> = {
    let mut _0: &std::result::Result<bool, ()>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::result::Result<bool, ()>; // in scope 0 at ui/impl-trait/example-st.rs:29:60: 29:68

    bb0: {
        _1 = Result::<bool, ()>::Ok(const true); // scope 0 at ui/impl-trait/example-st.rs:29:60: 29:68
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/impl-trait/example-st.rs:29:30: 29:33], _2: i32) -> impl for<'a> FnMut(&'a mut State) -> Result<bool, ()> {
    debug x => _2;                       // in scope 0 at ui/impl-trait/example-st.rs:29:31: 29:32
    let mut _0: impl for<'a> FnMut(&'a mut State) -> std::result::Result<bool, ()>; // return place in scope 0 at ui/impl-trait/example-st.rs:29:34: 29:34
    let mut _3: bool;                    // in scope 0 at ui/impl-trait/example-st.rs:29:39: 29:44
    let mut _4: i32;                     // in scope 0 at ui/impl-trait/example-st.rs:29:39: 29:40

    bb0: {
        _4 = _2;                         // scope 0 at ui/impl-trait/example-st.rs:29:39: 29:40
        _3 = Gt(move _4, const 4_i32);   // scope 0 at ui/impl-trait/example-st.rs:29:39: 29:44
        _0 = atom::<bool>(move _3) -> bb1; // scope 0 at ui/impl-trait/example-st.rs:29:34: 29:45
                                         // mir::Constant
                                         // + span: ui/impl-trait/example-st.rs:29:34: 29:38
                                         // + literal: Const { ty: fn(bool) -> impl for<'a> FnMut(&'a mut State) -> Result<bool, ()> {atom::<bool>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-trait/example-st.rs:29:45: 29:45
    }
}
