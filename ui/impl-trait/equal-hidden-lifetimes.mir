// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn equal_regions_static(_1: &i32) -> impl Sized {
    debug x => _1;                       // in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:7:38: 7:39
    let mut _0: impl Sized;              // return place in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:7:53: 7:63

    bb0: {
        _0 = _1;                         // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:9:5: 9:6
        return;                          // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:10:2: 10:2
    }
}

fn equal_regions(_1: &i32) -> impl Sized + '_ {
    debug x => _1;                       // in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:13:34: 13:35
    let mut _0: impl Sized + '_;         // return place in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:13:49: 13:64
    let _2: &i32;                        // in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:14:9: 14:10
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/impl-trait/equal-hidden-lifetimes.rs:14:9: 14:10
        let _3: &i32;                    // in scope 1 at ui/impl-trait/equal-hidden-lifetimes.rs:15:9: 15:10
        scope 2 {
            debug z => _3;               // in scope 2 at ui/impl-trait/equal-hidden-lifetimes.rs:15:9: 15:10
        }
    }

    bb0: {
        _2 = _1;                         // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:14:22: 14:23
        _3 = _2;                         // scope 1 at ui/impl-trait/equal-hidden-lifetimes.rs:15:22: 15:23
        _0 = _1;                         // scope 2 at ui/impl-trait/equal-hidden-lifetimes.rs:16:5: 16:6
        return;                          // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:17:2: 17:2
    }
}

fn equal_regions_rev(_1: &i32) -> impl Sized + '_ {
    debug x => _1;                       // in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:20:38: 20:39
    let mut _0: impl Sized + '_;         // return place in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:20:53: 20:68
    let _2: &i32;                        // in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:21:9: 21:10
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/impl-trait/equal-hidden-lifetimes.rs:21:9: 21:10
        let _3: &i32;                    // in scope 1 at ui/impl-trait/equal-hidden-lifetimes.rs:22:9: 22:10
        scope 2 {
            debug z => _3;               // in scope 2 at ui/impl-trait/equal-hidden-lifetimes.rs:22:9: 22:10
        }
    }

    bb0: {
        _2 = _1;                         // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:21:22: 21:23
        _3 = _2;                         // scope 1 at ui/impl-trait/equal-hidden-lifetimes.rs:22:22: 22:23
        _0 = _1;                         // scope 2 at ui/impl-trait/equal-hidden-lifetimes.rs:23:5: 23:6
        return;                          // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:24:2: 24:2
    }
}

fn equal_regions_inv(_1: *mut &i32) -> impl Sized + '_ {
    debug x => _1;                       // in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:27:38: 27:39
    let mut _0: impl Sized + '_;         // return place in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:27:58: 27:73
    let _2: *mut &i32;                   // in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:28:9: 28:10
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/impl-trait/equal-hidden-lifetimes.rs:28:9: 28:10
        let _3: *mut &i32;               // in scope 1 at ui/impl-trait/equal-hidden-lifetimes.rs:29:9: 29:10
        scope 2 {
            debug z => _3;               // in scope 2 at ui/impl-trait/equal-hidden-lifetimes.rs:29:9: 29:10
        }
    }

    bb0: {
        _2 = _1;                         // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:28:27: 28:28
        _3 = _2;                         // scope 1 at ui/impl-trait/equal-hidden-lifetimes.rs:29:27: 29:28
        _0 = _1;                         // scope 2 at ui/impl-trait/equal-hidden-lifetimes.rs:30:5: 30:6
        return;                          // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:31:2: 31:2
    }
}

fn equal_regions_inv_rev(_1: *mut &i32) -> impl Sized + '_ {
    debug x => _1;                       // in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:34:42: 34:43
    let mut _0: impl Sized + '_;         // return place in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:34:62: 34:77
    let _2: *mut &i32;                   // in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:35:9: 35:10
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/impl-trait/equal-hidden-lifetimes.rs:35:9: 35:10
        let _3: *mut &i32;               // in scope 1 at ui/impl-trait/equal-hidden-lifetimes.rs:36:9: 36:10
        scope 2 {
            debug z => _3;               // in scope 2 at ui/impl-trait/equal-hidden-lifetimes.rs:36:9: 36:10
        }
    }

    bb0: {
        _2 = _1;                         // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:35:27: 35:28
        _3 = _2;                         // scope 1 at ui/impl-trait/equal-hidden-lifetimes.rs:36:27: 36:28
        _0 = _1;                         // scope 2 at ui/impl-trait/equal-hidden-lifetimes.rs:37:5: 37:6
        return;                          // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:38:2: 38:2
    }
}

fn contravariant_lub(_1: fn(&()), _2: fn(&()), _3: bool) -> impl Sized + '_ {
    debug x => _1;                       // in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:42:5: 42:6
    debug y => _2;                       // in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:43:5: 43:6
    debug c => _3;                       // in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:44:5: 44:6
    let mut _0: impl Sized + '_;         // return place in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:45:6: 45:21
    let mut _4: bool;                    // in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:46:8: 46:9

    bb0: {
        _4 = _3;                         // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:46:8: 46:9
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:46:8: 46:9
    }

    bb1: {
        _0 = _1;                         // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:46:12: 46:13
        goto -> bb3;                     // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:46:5: 46:26
    }

    bb2: {
        _0 = _2;                         // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:46:23: 46:24
        goto -> bb3;                     // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:46:5: 46:26
    }

    bb3: {
        return;                          // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:47:2: 47:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:49:11: 49:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/equal-hidden-lifetimes.rs:49:13: 49:13
    }
}
