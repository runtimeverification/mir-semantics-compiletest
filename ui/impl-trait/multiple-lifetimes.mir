// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn multiple_lifeteimes(_1: &mut &T) -> impl X<'_> + '_ {
    debug x => _1;                       // in scope 0 at ui/impl-trait/multiple-lifetimes.rs:8:44: 8:45
    let mut _0: impl X<'_> + '_;         // return place in scope 0 at ui/impl-trait/multiple-lifetimes.rs:8:65: 8:80
    let mut _2: &mut &T;                 // in scope 0 at ui/impl-trait/multiple-lifetimes.rs:9:5: 9:6

    bb0: {
        _2 = move _1;                    // scope 0 at ui/impl-trait/multiple-lifetimes.rs:9:5: 9:6
        _0 = &mut (*_2);                 // scope 0 at ui/impl-trait/multiple-lifetimes.rs:9:5: 9:6
        return;                          // scope 0 at ui/impl-trait/multiple-lifetimes.rs:10:2: 10:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/multiple-lifetimes.rs:12:11: 12:11

    bb0: {
        return;                          // scope 0 at ui/impl-trait/multiple-lifetimes.rs:12:13: 12:13
    }
}
