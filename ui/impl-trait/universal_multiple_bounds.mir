// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: impl Display + Clone) -> String {
    debug f => _1;
    let mut _0: std::string::String;
    let _2: impl Display + Clone;
    let mut _3: &impl Display + Clone;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 2];
    let _9: [core::fmt::rt::Argument<'_>; 2];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &impl Display + Clone;
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &impl Display + Clone;
    scope 1 {
        debug g => _2;
        let _4: std::string::String;
        let mut _14: &[&str; 2];
        scope 2 {
            debug res => _4;
        }
    }

    bb0: {
        _3 = &_1;
        _2 = <impl Display + Clone as Clone>::clone(move _3) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _14 = const _;
        _6 = _14 as &[&str] (Pointer(Unsize));
        _11 = &_1;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<impl Display + Clone>(_11) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _13 = &_2;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<impl Display + Clone>(_13) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _9 = [move _10, move _12];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _4 = format(move _5) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _0 = move _4;
        drop(_2) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        drop(_1) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }
}

promoted[0] in foo: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const " + "];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let mut _2: std::string::String;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: (&std::string::String, &&str);
    let mut _7: &std::string::String;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: &[&str; 1];
    scope 1 {
        debug sum => _1;
        let _8: &std::string::String;
        let _9: &&str;
        let mut _15: &&str;
        scope 3 {
            debug left_val => _8;
            debug right_val => _9;
            let _12: core::panicking::AssertKind;
            scope 4 {
                debug kind => _12;
            }
        }
    }
    scope 2 {
        debug res => _3;
    }

    bb0: {
        _16 = const _;
        _5 = _16 as &[&str] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = format(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = move _3;
        _1 = foo::<String>(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = &_1;
        _15 = const _;
        _6 = (move _7, _15);
        _8 = (_6.0: &std::string::String);
        _9 = (_6.1: &&str);
        _11 = <String as PartialEq<&str>>::eq(_8, _9) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<String, &str>(move _12, _8, _9, move _14) -> bb8;
    }

    bb6: {
        drop(_1) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "22 + 22";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "22"];
        _0 = &_1;
        return;
    }
}
