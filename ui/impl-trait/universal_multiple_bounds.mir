// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: impl Display + Clone) -> String {
    debug f => _1;                       // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:5:8: 5:9
    let _2: impl Display + Clone;        // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:6:9: 6:10
    let mut _3: &impl Display + Clone;   // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:6:13: 6:22
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _5: &[&str];                 // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:7:13: 7:22
    let mut _6: &[&str; 2];              // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:7:13: 7:22
    let _7: &[&str; 2];                  // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:7:13: 7:22
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _9: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _10: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _11: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:7:24: 7:25
    let mut _13: &impl Display + Clone;  // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:7:24: 7:25
    let _14: &impl Display + Clone;      // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:7:24: 7:25
    let mut _15: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:7:27: 7:28
    let mut _16: &impl Display + Clone;  // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:7:27: 7:28
    let _17: &impl Display + Clone;      // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:7:27: 7:28
    scope 1 {
        debug g => _2;                   // in scope 1 at ui/impl-trait/universal_multiple_bounds.rs:6:9: 6:10
        let mut _0: std::string::String; // return place in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        let mut _18: &[&str; 2];         // in scope 1 at ui/impl-trait/universal_multiple_bounds.rs:7:13: 7:22
        scope 2 {
            debug res => _0;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        }
    }

    bb0: {
        _3 = &_1;                        // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:6:13: 6:22
        _2 = <impl Display + Clone as Clone>::clone(move _3) -> [return: bb1, unwind: bb9]; // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:6:13: 6:22
                                         // mir::Constant
                                         // + span: ui/impl-trait/universal_multiple_bounds.rs:6:15: 6:20
                                         // + literal: Const { ty: for<'a> fn(&'a impl Display + Clone) -> impl Display + Clone {<impl Display + Clone as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _18 = const _;                   // scope 1 at ui/impl-trait/universal_multiple_bounds.rs:7:13: 7:22
                                         // mir::Constant
                                         // + span: ui/impl-trait/universal_multiple_bounds.rs:7:13: 7:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(foo, [impl Display + Clone], Some(promoted[0])) }
        _7 = _18;                        // scope 1 at ui/impl-trait/universal_multiple_bounds.rs:7:13: 7:22
        _6 = _7;                         // scope 1 at ui/impl-trait/universal_multiple_bounds.rs:7:13: 7:22
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 1 at ui/impl-trait/universal_multiple_bounds.rs:7:13: 7:22
        _14 = &_1;                       // scope 1 at ui/impl-trait/universal_multiple_bounds.rs:7:24: 7:25
        _13 = _14;                       // scope 1 at ui/impl-trait/universal_multiple_bounds.rs:7:24: 7:25
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<impl Display + Clone>(move _13) -> [return: bb2, unwind: bb8]; // scope 1 at ui/impl-trait/universal_multiple_bounds.rs:7:24: 7:25
                                         // mir::Constant
                                         // + span: ui/impl-trait/universal_multiple_bounds.rs:7:24: 7:25
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b impl Display + Clone) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<impl Display + Clone>}, val: Value(<ZST>) }
    }

    bb2: {
        _17 = &_2;                       // scope 1 at ui/impl-trait/universal_multiple_bounds.rs:7:27: 7:28
        _16 = _17;                       // scope 1 at ui/impl-trait/universal_multiple_bounds.rs:7:27: 7:28
        _15 = core::fmt::ArgumentV1::<'_>::new_display::<impl Display + Clone>(move _16) -> [return: bb3, unwind: bb8]; // scope 1 at ui/impl-trait/universal_multiple_bounds.rs:7:27: 7:28
                                         // mir::Constant
                                         // + span: ui/impl-trait/universal_multiple_bounds.rs:7:27: 7:28
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b impl Display + Clone) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<impl Display + Clone>}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = [move _12, move _15];      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _10 = &_11;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = _10;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> [return: bb4, unwind: bb8]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = format(move _4) -> [return: bb5, unwind: bb8]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind: bb9]; // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:8:1: 8:2
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:8:1: 8:2
    }

    bb7: {
        return;                          // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:8:2: 8:2
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:8:1: 8:2
    }

    bb9 (cleanup): {
        drop(_1) -> bb10;                // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:8:1: 8:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:5:1: 8:2
    }
}

promoted[0] in foo: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:7:13: 7:22
    let mut _1: [&str; 2];               // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:7:13: 7:22

    bb0: {
        _1 = [const "", const " + "];    // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:7:13: 7:22
                                         // mir::Constant
                                         // + span: ui/impl-trait/universal_multiple_bounds.rs:7:13: 7:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/impl-trait/universal_multiple_bounds.rs:7:13: 7:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:7:13: 7:22
        return;                          // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:7:13: 7:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:10:11: 10:11
    let _1: std::string::String;         // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:11:9: 11:12
    let mut _2: std::string::String;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let _3: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _5: &[&str];                 // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:11:27: 11:31
    let mut _6: &[&str; 1];              // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:11:27: 11:31
    let _7: &[&str; 1];                  // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:11:27: 11:31
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _10: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _11: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _12: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _13: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _18: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _19: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _21: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _22: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _23: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _24: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _25: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _26: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _29: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _30: &[&str; 1];             // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:11:27: 11:31
    scope 1 {
        debug sum => _1;                 // in scope 1 at ui/impl-trait/universal_multiple_bounds.rs:11:9: 11:12
        let _14: &std::string::String;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _15: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _28: &&str;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 3 {
            debug left_val => _14;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _15;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _20: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _20;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 2 {
        debug res => _3;                 // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }

    bb0: {
        _30 = const _;                   // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:11:27: 11:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/universal_multiple_bounds.rs:11:27: 11:31
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[2])) }
        _7 = _30;                        // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:11:27: 11:31
        _6 = _7;                         // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:11:27: 11:31
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:11:27: 11:31
        _29 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[1])) }
        _10 = _29;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = format(move _4) -> bb2;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = move _3;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _1 = foo::<String>(move _2) -> bb3; // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:11:15: 11:33
                                         // mir::Constant
                                         // + span: ui/impl-trait/universal_multiple_bounds.rs:11:15: 11:18
                                         // + literal: Const { ty: fn(String) -> String {foo::<String>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _28 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _13 = _28;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _11 = (move _12, move _13);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _14 = (_11.0: &std::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _15 = (_11.1: &&str);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _18 = _14;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _19 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _17 = <String as PartialEq<&str>>::eq(move _18, move _19) -> [return: bb4, unwind: bb8]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = Not(move _17);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _16) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _20 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = _14;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _15;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _21 = core::panicking::assert_failed::<String, &str>(move _22, move _23, move _25, move _27) -> bb8; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:13:1: 13:2
    }

    bb7: {
        return;                          // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:13:2: 13:2
    }

    bb8 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:13:1: 13:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:10:1: 13:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:12:21: 12:31

    bb0: {
        _1 = const "22 + 22";            // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:12:21: 12:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/universal_multiple_bounds.rs:12:21: 12:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:11:27: 11:31
    let mut _1: [&str; 1];               // in scope 0 at ui/impl-trait/universal_multiple_bounds.rs:11:27: 11:31

    bb0: {
        _1 = [const "22"];               // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:11:27: 11:31
                                         // mir::Constant
                                         // + span: ui/impl-trait/universal_multiple_bounds.rs:11:27: 11:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:11:27: 11:31
        return;                          // scope 0 at ui/impl-trait/universal_multiple_bounds.rs:11:27: 11:31
    }
}
