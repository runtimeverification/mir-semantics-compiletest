// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-brace-before-else_fixed.rs:5:11: 5:11
    let mut _2: std::option::Option<i32>; // in scope 0 at ui/let-else/let-else-brace-before-else_fixed.rs:18:19: 18:43
    scope 1 {
        scope 2 {
            let _1: i32;                 // in scope 2 at ui/let-else/let-else-brace-before-else_fixed.rs:14:28: 14:29
            scope 3 {
                scope 5 {
                }
                scope 6 {
                }
            }
            scope 4 {
                debug n => _1;           // in scope 4 at ui/let-else/let-else-brace-before-else_fixed.rs:14:28: 14:29
            }
        }
    }

    bb0: {
        _1 = const 1_i32;                // scope 2 at ui/let-else/let-else-brace-before-else_fixed.rs:14:28: 14:29
        _2 = unsafe_fn::<Option<i32>>() -> bb1; // scope 6 at ui/let-else/let-else-brace-before-else_fixed.rs:18:29: 18:40
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-brace-before-else_fixed.rs:18:29: 18:38
                                         // + literal: Const { ty: unsafe fn() -> Option<i32> {unsafe_fn::<Option<i32>>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/let-else/let-else-brace-before-else_fixed.rs:22:2: 22:2
    }
}

fn unsafe_fn() -> T {
    let mut _0: T;                       // return place in scope 0 at ui/let-else/let-else-brace-before-else_fixed.rs:24:29: 24:30
    let _1: !;                           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _1 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}
