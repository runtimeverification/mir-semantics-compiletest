// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: !;
    let _2: &std::string::String;
    let mut _3: main::MyEnum;
    let mut _4: std::string::String;
    let mut _5: isize;
    let mut _6: (&&std::string::String, &&str);
    let mut _7: &&std::string::String;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: !;
    let mut _17: (&i32, &i32);
    let mut _18: &i32;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: i32;
    let mut _24: i32;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: std::option::Option<i32>;
    let mut _29: isize;
    let mut _30: !;
    scope 1 {
        debug x => _2;
        let _8: &&std::string::String;
        let _9: &&str;
        let mut _15: i32;
        let mut _32: &&str;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug x => _15;
            let _19: &i32;
            let _20: &i32;
            let mut _31: &i32;
            scope 5 {
            }
            scope 6 {
            }
            scope 7 {
                debug left_val => _19;
                debug right_val => _20;
                let _25: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _25;
                }
            }
            scope 9 {
            }
        }
    }

    bb0: {
        _4 = String::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = MyEnum::B { f: move _4 };
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb4, otherwise: bb5];
    }

    bb2: {
        _7 = &_2;
        _32 = const _;
        _6 = (move _7, _32);
        _8 = (_6.0: &&std::string::String);
        _9 = (_6.1: &&str);
        _11 = <&String as PartialEq<&str>>::eq(_8, _9) -> [return: bb7, unwind: bb21];
    }

    bb3: {
        _2 = &((_3 as A).0: std::string::String);
        goto -> bb2;
    }

    bb4: {
        _2 = &((_3 as B).0: std::string::String);
        goto -> bb2;
    }

    bb5: {
        drop(_3) -> [return: bb6, unwind continue];
    }

    bb6: {
        _1 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb7: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<&String, &str>(move _12, _8, _9, move _14) -> bb21;
    }

    bb9: {
        _15 = const 1_i32;
        goto -> bb10;
    }

    bb10: {
        switchInt(_15) -> [4: bb14, otherwise: bb11];
    }

    bb11: {
        switchInt(_15) -> [3: bb13, otherwise: bb12];
    }

    bb12: {
        _15 = Add(_15, const 1_i32);
        goto -> bb10;
    }

    bb13: {
        _18 = &_15;
        _31 = const _;
        _17 = (move _18, _31);
        _19 = (_17.0: &i32);
        _20 = (_17.1: &i32);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb16, otherwise: bb15];
    }

    bb14: {
        _16 = begin_panic::<&str>(const "explicit panic") -> bb21;
    }

    bb15: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<i32, i32>(move _25, _19, _20, move _27) -> bb21;
    }

    bb16: {
        _28 = Option::<i32>::Some(const 2_i32);
        _29 = discriminant(_28);
        switchInt(move _29) -> [1: bb18, otherwise: bb17];
    }

    bb17: {
        drop(_3) -> [return: bb20, unwind continue];
    }

    bb18: {
        switchInt(((_28 as Some).0: i32)) -> [1: bb19, otherwise: bb17];
    }

    bb19: {
        _30 = begin_panic::<&str>(const "explicit panic") -> bb21;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_3) -> [return: bb22, unwind terminate];
    }

    bb22 (cleanup): {
        resume;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "";
        _0 = &_1;
        return;
    }
}

fn MyEnum::A(_1: String) -> MyEnum {
    let mut _0: main::MyEnum;

    bb0: {
        _0 = MyEnum::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MyEnum::A(_1: String) -> MyEnum {
    let mut _0: main::MyEnum;

    bb0: {
        _0 = MyEnum::A(move _1);
        return;
    }
}
