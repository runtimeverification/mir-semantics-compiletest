// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn ref_() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:6:11: 6:11
    let _1: std::vec::Vec<u8>;           // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:7:9: 7:14
    let mut _2: &[u8];                   // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:7:26: 7:47
    let _3: &[u8];                       // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:7:26: 7:38
    let mut _4: &[u8; 5];                // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:7:26: 7:34
    let _5: &[u8; 5];                    // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:7:26: 7:34
    let mut _6: std::ops::RangeFull;     // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:7:35: 7:37
    let mut _8: std::vec::Vec<u8>;       // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:8:21: 8:26
    let mut _11: isize;                  // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:19:9: 19:20
    let _13: &[u8];                      // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:20:20: 20:21
    let mut _14: &std::vec::Vec<u8>;     // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:20:20: 20:21
    let mut _16: &std::option::Option<std::vec::Vec<u8>>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:23:23: 23:28
    let mut _17: isize;                  // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:23:9: 23:20
    let _19: &[u8];                      // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:24:20: 24:21
    let mut _20: &std::vec::Vec<u8>;     // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:24:20: 24:21
    let mut _22: &std::option::Option<std::vec::Vec<u8>>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:28:19: 28:24
    let mut _23: isize;                  // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:28:9: 28:16
    let _25: &[u8];                      // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:29:20: 29:21
    let mut _26: &std::vec::Vec<u8>;     // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:29:20: 29:21
    let mut _28: std::option::Option<&[u8]>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:31:34: 31:49
    let mut _29: &std::option::Option<std::vec::Vec<u8>>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:31:34: 31:49
    let mut _30: isize;                  // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:31:9: 31:16
    let mut _33: std::option::Option<&[u8]>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:33:39: 33:54
    let mut _34: &std::option::Option<std::vec::Vec<u8>>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:33:39: 33:54
    let mut _35: isize;                  // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:33:9: 33:21
    let mut _38: &[u8];                  // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:33:14: 33:20
    scope 1 {
        debug bytes => _1;               // in scope 1 at ui/let-else/let-else-ref-bindings-pass.rs:7:9: 7:14
        let _7: std::option::Option<std::vec::Vec<u8>>; // in scope 1 at ui/let-else/let-else-ref-bindings-pass.rs:8:9: 8:13
        scope 2 {
            debug some => _7;            // in scope 2 at ui/let-else/let-else-ref-bindings-pass.rs:8:9: 8:13
            let _9: &();                 // in scope 2 at ui/let-else/let-else-ref-bindings-pass.rs:10:14: 10:19
            let mut _37: &std::option::Option<()>; // in scope 2 at ui/let-else/let-else-ref-bindings-pass.rs:10:14: 10:19
            scope 3 {
                debug a => _9;           // in scope 3 at ui/let-else/let-else-ref-bindings-pass.rs:10:14: 10:19
                let _10: &std::vec::Vec<u8>; // in scope 3 at ui/let-else/let-else-ref-bindings-pass.rs:19:14: 19:19
                scope 4 {
                    debug a => _10;      // in scope 4 at ui/let-else/let-else-ref-bindings-pass.rs:19:14: 19:19
                    let _12: &[u8];      // in scope 4 at ui/let-else/let-else-ref-bindings-pass.rs:20:9: 20:10
                    scope 5 {
                        debug b => _12;  // in scope 5 at ui/let-else/let-else-ref-bindings-pass.rs:20:9: 20:10
                        let _15: &std::vec::Vec<u8>; // in scope 5 at ui/let-else/let-else-ref-bindings-pass.rs:23:14: 23:19
                        scope 6 {
                            debug a => _15; // in scope 6 at ui/let-else/let-else-ref-bindings-pass.rs:23:14: 23:19
                            let _18: &[u8]; // in scope 6 at ui/let-else/let-else-ref-bindings-pass.rs:24:9: 24:10
                            scope 7 {
                                debug b => _18; // in scope 7 at ui/let-else/let-else-ref-bindings-pass.rs:24:9: 24:10
                                let _21: &std::vec::Vec<u8>; // in scope 7 at ui/let-else/let-else-ref-bindings-pass.rs:28:14: 28:15
                                scope 8 {
                                    debug a => _21; // in scope 8 at ui/let-else/let-else-ref-bindings-pass.rs:28:14: 28:15
                                    let _24: &[u8]; // in scope 8 at ui/let-else/let-else-ref-bindings-pass.rs:29:9: 29:10
                                    scope 9 {
                                        debug b => _24; // in scope 9 at ui/let-else/let-else-ref-bindings-pass.rs:29:9: 29:10
                                        let _27: &[u8]; // in scope 9 at ui/let-else/let-else-ref-bindings-pass.rs:31:14: 31:15
                                        scope 10 {
                                            debug a => _27; // in scope 10 at ui/let-else/let-else-ref-bindings-pass.rs:31:14: 31:15
                                            let _31: &[u8]; // in scope 10 at ui/let-else/let-else-ref-bindings-pass.rs:32:9: 32:10
                                            scope 11 {
                                                debug b => _31; // in scope 11 at ui/let-else/let-else-ref-bindings-pass.rs:32:9: 32:10
                                                let _32: &&[u8]; // in scope 11 at ui/let-else/let-else-ref-bindings-pass.rs:33:14: 33:20
                                                scope 12 {
                                                    debug a => _32; // in scope 12 at ui/let-else/let-else-ref-bindings-pass.rs:33:14: 33:20
                                                    let _36: &[u8]; // in scope 12 at ui/let-else/let-else-ref-bindings-pass.rs:34:9: 34:10
                                                    scope 13 {
                                                        debug b => _36; // in scope 13 at ui/let-else/let-else-ref-bindings-pass.rs:34:9: 34:10
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _5 = const b"Hello";             // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:7:26: 7:34
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:7:26: 7:34
                                         // + literal: Const { ty: &[u8; 5], val: Value(Scalar(alloc1)) }
        _4 = _5;                         // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:7:26: 7:34
        _3 = <[u8; 5] as Index<RangeFull>>::index(move _4, move _6) -> bb1; // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:7:26: 7:38
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:7:26: 7:38
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 5], RangeFull) -> &'a <[u8; 5] as Index<RangeFull>>::Output {<[u8; 5] as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _3;                         // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:7:26: 7:47
        _1 = slice::<impl [u8]>::to_vec(move _2) -> bb2; // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:7:26: 7:47
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:7:39: 7:45
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = move _1;                    // scope 1 at ui/let-else/let-else-ref-bindings-pass.rs:8:21: 8:26
        _7 = Option::<Vec<u8>>::Some(move _8); // scope 1 at ui/let-else/let-else-ref-bindings-pass.rs:8:16: 8:27
        _37 = const _;                   // scope 2 at ui/let-else/let-else-ref-bindings-pass.rs:10:14: 10:19
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:10:14: 10:19
                                         // + literal: Const { ty: &Option<()>, val: Unevaluated(ref_, [], Some(promoted[0])) }
        _9 = &(((*_37) as Some).0: ());  // scope 2 at ui/let-else/let-else-ref-bindings-pass.rs:10:14: 10:19
        _11 = discriminant(_7);          // scope 3 at ui/let-else/let-else-ref-bindings-pass.rs:19:23: 19:27
        switchInt(move _11) -> [1: bb3, otherwise: bb13]; // scope 3 at ui/let-else/let-else-ref-bindings-pass.rs:19:9: 19:20
    }

    bb3: {
        _10 = &((_7 as Some).0: std::vec::Vec<u8>); // scope 3 at ui/let-else/let-else-ref-bindings-pass.rs:19:14: 19:19
        _14 = _10;                       // scope 4 at ui/let-else/let-else-ref-bindings-pass.rs:20:20: 20:21
        _13 = <Vec<u8> as Deref>::deref(move _14) -> [return: bb4, unwind: bb15]; // scope 4 at ui/let-else/let-else-ref-bindings-pass.rs:20:20: 20:21
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:20:20: 20:21
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = _13;                       // scope 4 at ui/let-else/let-else-ref-bindings-pass.rs:20:20: 20:21
        _16 = &_7;                       // scope 5 at ui/let-else/let-else-ref-bindings-pass.rs:23:23: 23:28
        _17 = discriminant((*_16));      // scope 5 at ui/let-else/let-else-ref-bindings-pass.rs:23:23: 23:28
        switchInt(move _17) -> [1: bb5, otherwise: bb13]; // scope 5 at ui/let-else/let-else-ref-bindings-pass.rs:23:9: 23:20
    }

    bb5: {
        _15 = &(((*_16) as Some).0: std::vec::Vec<u8>); // scope 5 at ui/let-else/let-else-ref-bindings-pass.rs:23:14: 23:19
        _20 = _15;                       // scope 6 at ui/let-else/let-else-ref-bindings-pass.rs:24:20: 24:21
        _19 = <Vec<u8> as Deref>::deref(move _20) -> [return: bb6, unwind: bb15]; // scope 6 at ui/let-else/let-else-ref-bindings-pass.rs:24:20: 24:21
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:24:20: 24:21
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _18 = _19;                       // scope 6 at ui/let-else/let-else-ref-bindings-pass.rs:24:20: 24:21
        _22 = &_7;                       // scope 7 at ui/let-else/let-else-ref-bindings-pass.rs:28:19: 28:24
        _23 = discriminant((*_22));      // scope 7 at ui/let-else/let-else-ref-bindings-pass.rs:28:19: 28:24
        switchInt(move _23) -> [1: bb7, otherwise: bb13]; // scope 7 at ui/let-else/let-else-ref-bindings-pass.rs:28:9: 28:16
    }

    bb7: {
        _21 = &(((*_22) as Some).0: std::vec::Vec<u8>); // scope 7 at ui/let-else/let-else-ref-bindings-pass.rs:28:14: 28:15
        _26 = _21;                       // scope 8 at ui/let-else/let-else-ref-bindings-pass.rs:29:20: 29:21
        _25 = <Vec<u8> as Deref>::deref(move _26) -> [return: bb8, unwind: bb15]; // scope 8 at ui/let-else/let-else-ref-bindings-pass.rs:29:20: 29:21
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:29:20: 29:21
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _24 = _25;                       // scope 8 at ui/let-else/let-else-ref-bindings-pass.rs:29:20: 29:21
        _29 = &_7;                       // scope 9 at ui/let-else/let-else-ref-bindings-pass.rs:31:34: 31:49
        _28 = Option::<Vec<u8>>::as_deref(move _29) -> [return: bb9, unwind: bb15]; // scope 9 at ui/let-else/let-else-ref-bindings-pass.rs:31:34: 31:49
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:31:39: 31:47
                                         // + literal: Const { ty: for<'a> fn(&'a Option<Vec<u8>>) -> Option<&'a <Vec<u8> as Deref>::Target> {Option::<Vec<u8>>::as_deref}, val: Value(<ZST>) }
    }

    bb9: {
        _30 = discriminant(_28);         // scope 9 at ui/let-else/let-else-ref-bindings-pass.rs:31:34: 31:49
        switchInt(move _30) -> [1: bb10, otherwise: bb13]; // scope 9 at ui/let-else/let-else-ref-bindings-pass.rs:31:9: 31:16
    }

    bb10: {
        _27 = ((_28 as Some).0: &[u8]);  // scope 9 at ui/let-else/let-else-ref-bindings-pass.rs:31:14: 31:15
        _31 = _27;                       // scope 10 at ui/let-else/let-else-ref-bindings-pass.rs:32:20: 32:21
        _34 = &_7;                       // scope 11 at ui/let-else/let-else-ref-bindings-pass.rs:33:39: 33:54
        _33 = Option::<Vec<u8>>::as_deref(move _34) -> [return: bb11, unwind: bb15]; // scope 11 at ui/let-else/let-else-ref-bindings-pass.rs:33:39: 33:54
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:33:44: 33:52
                                         // + literal: Const { ty: for<'a> fn(&'a Option<Vec<u8>>) -> Option<&'a <Vec<u8> as Deref>::Target> {Option::<Vec<u8>>::as_deref}, val: Value(<ZST>) }
    }

    bb11: {
        _35 = discriminant(_33);         // scope 11 at ui/let-else/let-else-ref-bindings-pass.rs:33:39: 33:54
        switchInt(move _35) -> [1: bb12, otherwise: bb13]; // scope 11 at ui/let-else/let-else-ref-bindings-pass.rs:33:9: 33:21
    }

    bb12: {
        _32 = &((_33 as Some).0: &[u8]); // scope 11 at ui/let-else/let-else-ref-bindings-pass.rs:33:14: 33:20
        _38 = deref_copy (*_32);         // scope 12 at ui/let-else/let-else-ref-bindings-pass.rs:34:20: 34:21
        _36 = _38;                       // scope 12 at ui/let-else/let-else-ref-bindings-pass.rs:34:20: 34:21
        drop(_7) -> bb14;                // scope 1 at ui/let-else/let-else-ref-bindings-pass.rs:35:1: 35:2
    }

    bb13: {
        drop(_7) -> bb14;                // scope 1 at ui/let-else/let-else-ref-bindings-pass.rs:35:1: 35:2
    }

    bb14: {
        return;                          // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:35:2: 35:2
    }

    bb15 (cleanup): {
        drop(_7) -> bb16;                // scope 1 at ui/let-else/let-else-ref-bindings-pass.rs:35:1: 35:2
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:6:1: 35:2
    }
}

alloc1 (size: 5, align: 1) {
    48 65 6c 6c 6f                                  │ Hello
}

promoted[0] in ref_: &Option<()> = {
    let mut _0: &std::option::Option<()>; // return place in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:10:14: 10:19
    let mut _1: std::option::Option<()>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:10:23: 10:31
    let mut _2: ();                      // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:10:28: 10:30

    bb0: {
        _2 = ();                         // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:10:28: 10:30
        _1 = Option::<()>::Some(move _2); // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:10:23: 10:31
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:10:14: 10:19
        return;                          // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:10:14: 10:19
    }
}

fn ref_mut() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:37:14: 37:14
    let _1: &mut ();                     // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:39:14: 39:23
    let mut _2: std::option::Option<()>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:39:27: 39:35
    let mut _4: &[u8];                   // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:41:26: 41:47
    let _5: &[u8];                       // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:41:26: 41:38
    let mut _6: &[u8; 5];                // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:41:26: 41:34
    let _7: &[u8; 5];                    // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:41:26: 41:34
    let mut _8: std::ops::RangeFull;     // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:41:35: 41:37
    let mut _10: std::vec::Vec<u8>;      // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:42:25: 42:30
    let mut _12: isize;                  // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:51:9: 51:24
    let mut _14: &mut [u8];              // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:52:24: 52:25
    let mut _15: &mut std::vec::Vec<u8>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:52:24: 52:25
    let mut _17: &mut std::option::Option<std::vec::Vec<u8>>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:55:27: 55:36
    let mut _18: isize;                  // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:55:9: 55:24
    let mut _20: &mut [u8];              // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:56:24: 56:25
    let mut _21: &mut std::vec::Vec<u8>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:56:24: 56:25
    let mut _23: &mut std::option::Option<std::vec::Vec<u8>>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:59:19: 59:28
    let mut _24: isize;                  // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:59:9: 59:16
    let mut _26: &mut [u8];              // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:60:24: 60:25
    let mut _27: &mut std::vec::Vec<u8>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:60:24: 60:25
    let mut _29: std::option::Option<&mut [u8]>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:62:38: 62:57
    let mut _30: &mut std::option::Option<std::vec::Vec<u8>>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:62:38: 62:57
    let mut _31: isize;                  // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:62:9: 62:16
    let mut _34: std::option::Option<&mut [u8]>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:64:46: 64:65
    let mut _35: &mut std::option::Option<std::vec::Vec<u8>>; // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:64:46: 64:65
    let mut _36: isize;                  // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:64:9: 64:24
    let mut _38: &mut [u8];              // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:64:14: 64:23
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/let-else/let-else-ref-bindings-pass.rs:39:14: 39:23
        let _3: std::vec::Vec<u8>;       // in scope 1 at ui/let-else/let-else-ref-bindings-pass.rs:41:9: 41:14
        scope 2 {
            debug bytes => _3;           // in scope 2 at ui/let-else/let-else-ref-bindings-pass.rs:41:9: 41:14
            let mut _9: std::option::Option<std::vec::Vec<u8>>; // in scope 2 at ui/let-else/let-else-ref-bindings-pass.rs:42:9: 42:17
            scope 3 {
                debug some => _9;        // in scope 3 at ui/let-else/let-else-ref-bindings-pass.rs:42:9: 42:17
                let _11: &mut std::vec::Vec<u8>; // in scope 3 at ui/let-else/let-else-ref-bindings-pass.rs:51:14: 51:23
                scope 4 {
                    debug a => _11;      // in scope 4 at ui/let-else/let-else-ref-bindings-pass.rs:51:14: 51:23
                    let _13: &mut [u8];  // in scope 4 at ui/let-else/let-else-ref-bindings-pass.rs:52:9: 52:10
                    scope 5 {
                        debug b => _13;  // in scope 5 at ui/let-else/let-else-ref-bindings-pass.rs:52:9: 52:10
                        let _16: &mut std::vec::Vec<u8>; // in scope 5 at ui/let-else/let-else-ref-bindings-pass.rs:55:14: 55:23
                        scope 6 {
                            debug a => _16; // in scope 6 at ui/let-else/let-else-ref-bindings-pass.rs:55:14: 55:23
                            let _19: &mut [u8]; // in scope 6 at ui/let-else/let-else-ref-bindings-pass.rs:56:9: 56:10
                            scope 7 {
                                debug b => _19; // in scope 7 at ui/let-else/let-else-ref-bindings-pass.rs:56:9: 56:10
                                let _22: &mut std::vec::Vec<u8>; // in scope 7 at ui/let-else/let-else-ref-bindings-pass.rs:59:14: 59:15
                                scope 8 {
                                    debug a => _22; // in scope 8 at ui/let-else/let-else-ref-bindings-pass.rs:59:14: 59:15
                                    let _25: &mut [u8]; // in scope 8 at ui/let-else/let-else-ref-bindings-pass.rs:60:9: 60:10
                                    scope 9 {
                                        debug b => _25; // in scope 9 at ui/let-else/let-else-ref-bindings-pass.rs:60:9: 60:10
                                        let _28: &mut [u8]; // in scope 9 at ui/let-else/let-else-ref-bindings-pass.rs:62:14: 62:15
                                        scope 10 {
                                            debug a => _28; // in scope 10 at ui/let-else/let-else-ref-bindings-pass.rs:62:14: 62:15
                                            let _32: &mut [u8]; // in scope 10 at ui/let-else/let-else-ref-bindings-pass.rs:63:9: 63:10
                                            scope 11 {
                                                debug b => _32; // in scope 11 at ui/let-else/let-else-ref-bindings-pass.rs:63:9: 63:10
                                                let _33: &mut &mut [u8]; // in scope 11 at ui/let-else/let-else-ref-bindings-pass.rs:64:14: 64:23
                                                scope 12 {
                                                    debug a => _33; // in scope 12 at ui/let-else/let-else-ref-bindings-pass.rs:64:14: 64:23
                                                    let _37: &mut [u8]; // in scope 12 at ui/let-else/let-else-ref-bindings-pass.rs:65:9: 65:10
                                                    scope 13 {
                                                        debug b => _37; // in scope 13 at ui/let-else/let-else-ref-bindings-pass.rs:65:9: 65:10
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const Option::<()>::Some(()); // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:39:27: 39:35
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:39:27: 39:35
                                         // + literal: Const { ty: Option<()>, val: Value(Scalar(0x01)) }
        _1 = &mut ((_2 as Some).0: ());  // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:39:14: 39:23
        _7 = const b"Hello";             // scope 1 at ui/let-else/let-else-ref-bindings-pass.rs:41:26: 41:34
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:41:26: 41:34
                                         // + literal: Const { ty: &[u8; 5], val: Value(Scalar(alloc2)) }
        _6 = _7;                         // scope 1 at ui/let-else/let-else-ref-bindings-pass.rs:41:26: 41:34
        _5 = <[u8; 5] as Index<RangeFull>>::index(move _6, move _8) -> bb1; // scope 1 at ui/let-else/let-else-ref-bindings-pass.rs:41:26: 41:38
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:41:26: 41:38
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 5], RangeFull) -> &'a <[u8; 5] as Index<RangeFull>>::Output {<[u8; 5] as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 1 at ui/let-else/let-else-ref-bindings-pass.rs:41:26: 41:47
        _3 = slice::<impl [u8]>::to_vec(move _4) -> bb2; // scope 1 at ui/let-else/let-else-ref-bindings-pass.rs:41:26: 41:47
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:41:39: 41:45
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = move _3;                   // scope 2 at ui/let-else/let-else-ref-bindings-pass.rs:42:25: 42:30
        _9 = Option::<Vec<u8>>::Some(move _10); // scope 2 at ui/let-else/let-else-ref-bindings-pass.rs:42:20: 42:31
        _12 = discriminant(_9);          // scope 3 at ui/let-else/let-else-ref-bindings-pass.rs:51:27: 51:31
        switchInt(move _12) -> [1: bb3, otherwise: bb13]; // scope 3 at ui/let-else/let-else-ref-bindings-pass.rs:51:9: 51:24
    }

    bb3: {
        _11 = &mut ((_9 as Some).0: std::vec::Vec<u8>); // scope 3 at ui/let-else/let-else-ref-bindings-pass.rs:51:14: 51:23
        _15 = &mut (*_11);               // scope 4 at ui/let-else/let-else-ref-bindings-pass.rs:52:24: 52:25
        _14 = <Vec<u8> as DerefMut>::deref_mut(move _15) -> [return: bb4, unwind: bb15]; // scope 4 at ui/let-else/let-else-ref-bindings-pass.rs:52:24: 52:25
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:52:24: 52:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u8>) -> &'a mut <Vec<u8> as Deref>::Target {<Vec<u8> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = &mut (*_14);               // scope 4 at ui/let-else/let-else-ref-bindings-pass.rs:52:24: 52:25
        _17 = &mut _9;                   // scope 5 at ui/let-else/let-else-ref-bindings-pass.rs:55:27: 55:36
        _18 = discriminant((*_17));      // scope 5 at ui/let-else/let-else-ref-bindings-pass.rs:55:27: 55:36
        switchInt(move _18) -> [1: bb5, otherwise: bb13]; // scope 5 at ui/let-else/let-else-ref-bindings-pass.rs:55:9: 55:24
    }

    bb5: {
        _16 = &mut (((*_17) as Some).0: std::vec::Vec<u8>); // scope 5 at ui/let-else/let-else-ref-bindings-pass.rs:55:14: 55:23
        _21 = &mut (*_16);               // scope 6 at ui/let-else/let-else-ref-bindings-pass.rs:56:24: 56:25
        _20 = <Vec<u8> as DerefMut>::deref_mut(move _21) -> [return: bb6, unwind: bb15]; // scope 6 at ui/let-else/let-else-ref-bindings-pass.rs:56:24: 56:25
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:56:24: 56:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u8>) -> &'a mut <Vec<u8> as Deref>::Target {<Vec<u8> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb6: {
        _19 = &mut (*_20);               // scope 6 at ui/let-else/let-else-ref-bindings-pass.rs:56:24: 56:25
        _23 = &mut _9;                   // scope 7 at ui/let-else/let-else-ref-bindings-pass.rs:59:19: 59:28
        _24 = discriminant((*_23));      // scope 7 at ui/let-else/let-else-ref-bindings-pass.rs:59:19: 59:28
        switchInt(move _24) -> [1: bb7, otherwise: bb13]; // scope 7 at ui/let-else/let-else-ref-bindings-pass.rs:59:9: 59:16
    }

    bb7: {
        _22 = &mut (((*_23) as Some).0: std::vec::Vec<u8>); // scope 7 at ui/let-else/let-else-ref-bindings-pass.rs:59:14: 59:15
        _27 = &mut (*_22);               // scope 8 at ui/let-else/let-else-ref-bindings-pass.rs:60:24: 60:25
        _26 = <Vec<u8> as DerefMut>::deref_mut(move _27) -> [return: bb8, unwind: bb15]; // scope 8 at ui/let-else/let-else-ref-bindings-pass.rs:60:24: 60:25
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:60:24: 60:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u8>) -> &'a mut <Vec<u8> as Deref>::Target {<Vec<u8> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb8: {
        _25 = &mut (*_26);               // scope 8 at ui/let-else/let-else-ref-bindings-pass.rs:60:24: 60:25
        _30 = &mut _9;                   // scope 9 at ui/let-else/let-else-ref-bindings-pass.rs:62:38: 62:57
        _29 = Option::<Vec<u8>>::as_deref_mut(move _30) -> [return: bb9, unwind: bb15]; // scope 9 at ui/let-else/let-else-ref-bindings-pass.rs:62:38: 62:57
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:62:43: 62:55
                                         // + literal: Const { ty: for<'a> fn(&'a mut Option<Vec<u8>>) -> Option<&'a mut <Vec<u8> as Deref>::Target> {Option::<Vec<u8>>::as_deref_mut}, val: Value(<ZST>) }
    }

    bb9: {
        _31 = discriminant(_29);         // scope 9 at ui/let-else/let-else-ref-bindings-pass.rs:62:38: 62:57
        switchInt(move _31) -> [1: bb10, otherwise: bb13]; // scope 9 at ui/let-else/let-else-ref-bindings-pass.rs:62:9: 62:16
    }

    bb10: {
        _28 = move ((_29 as Some).0: &mut [u8]); // scope 9 at ui/let-else/let-else-ref-bindings-pass.rs:62:14: 62:15
        _32 = &mut (*_28);               // scope 10 at ui/let-else/let-else-ref-bindings-pass.rs:63:24: 63:25
        _35 = &mut _9;                   // scope 11 at ui/let-else/let-else-ref-bindings-pass.rs:64:46: 64:65
        _34 = Option::<Vec<u8>>::as_deref_mut(move _35) -> [return: bb11, unwind: bb15]; // scope 11 at ui/let-else/let-else-ref-bindings-pass.rs:64:46: 64:65
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:64:51: 64:63
                                         // + literal: Const { ty: for<'a> fn(&'a mut Option<Vec<u8>>) -> Option<&'a mut <Vec<u8> as Deref>::Target> {Option::<Vec<u8>>::as_deref_mut}, val: Value(<ZST>) }
    }

    bb11: {
        _36 = discriminant(_34);         // scope 11 at ui/let-else/let-else-ref-bindings-pass.rs:64:46: 64:65
        switchInt(move _36) -> [1: bb12, otherwise: bb13]; // scope 11 at ui/let-else/let-else-ref-bindings-pass.rs:64:9: 64:24
    }

    bb12: {
        _33 = &mut ((_34 as Some).0: &mut [u8]); // scope 11 at ui/let-else/let-else-ref-bindings-pass.rs:64:14: 64:23
        _38 = deref_copy (*_33);         // scope 12 at ui/let-else/let-else-ref-bindings-pass.rs:65:24: 65:25
        _37 = &mut (*_38);               // scope 12 at ui/let-else/let-else-ref-bindings-pass.rs:65:24: 65:25
        drop(_9) -> bb14;                // scope 2 at ui/let-else/let-else-ref-bindings-pass.rs:66:1: 66:2
    }

    bb13: {
        drop(_9) -> bb14;                // scope 2 at ui/let-else/let-else-ref-bindings-pass.rs:66:1: 66:2
    }

    bb14: {
        return;                          // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:66:2: 66:2
    }

    bb15 (cleanup): {
        drop(_9) -> bb16;                // scope 2 at ui/let-else/let-else-ref-bindings-pass.rs:66:1: 66:2
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:37:1: 66:2
    }
}

alloc2 (size: 5, align: 1) {
    48 65 6c 6c 6f                                  │ Hello
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:68:11: 68:11
    let _1: ();                          // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:69:5: 69:11
    let _2: ();                          // in scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:70:5: 70:14

    bb0: {
        _1 = ref_() -> bb1;              // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:69:5: 69:11
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:69:5: 69:9
                                         // + literal: Const { ty: fn() {ref_}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = ref_mut() -> bb2;           // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:70:5: 70:14
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-ref-bindings-pass.rs:70:5: 70:12
                                         // + literal: Const { ty: fn() {ref_mut}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/let-else/let-else-ref-bindings-pass.rs:71:2: 71:2
    }
}
