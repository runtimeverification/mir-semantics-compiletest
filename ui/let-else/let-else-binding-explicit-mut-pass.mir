// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:5:11: 5:11
    let _1: &mut i32;                    // in scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:6:14: 6:15
    let mut _2: &mut &mut std::option::Option<i32>; // in scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:6:19: 6:39
    let mut _3: &mut std::option::Option<i32>; // in scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:6:24: 6:39
    let mut _4: std::option::Option<i32>; // in scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:6:29: 6:39
    let mut _5: isize;                   // in scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:6:9: 6:16
    let mut _6: (i32, bool);             // in scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:7:5: 7:12
    let mut _8: &mut std::option::Option<i32>; // in scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:10:37: 10:57
    let mut _9: &mut &mut std::option::Option<i32>; // in scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:10:37: 10:57
    let mut _10: &mut std::option::Option<i32>; // in scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:10:42: 10:57
    let mut _11: std::option::Option<i32>; // in scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:10:47: 10:57
    let mut _12: isize;                  // in scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:10:9: 10:16
    let mut _13: (i32, bool);            // in scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:11:5: 11:12
    let mut _14: &mut std::option::Option<i32>; // in scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:6:19: 6:39
    let mut _15: &mut std::option::Option<i32>; // in scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:6:19: 6:39
    let mut _16: &mut std::option::Option<i32>; // in scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:10:37: 10:57
    scope 1 {
        debug n => _1;                   // in scope 1 at ui/let-else/let-else-binding-explicit-mut-pass.rs:6:14: 6:15
        scope 2 {
            let _7: &mut i32;            // in scope 2 at ui/let-else/let-else-binding-explicit-mut-pass.rs:10:14: 10:15
            scope 3 {
                debug n => _7;           // in scope 3 at ui/let-else/let-else-binding-explicit-mut-pass.rs:10:14: 10:15
                scope 4 {
                }
            }
        }
    }

    bb0: {
        _4 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:6:29: 6:39
        _3 = &mut _4;                    // scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:6:24: 6:39
        _2 = &mut _3;                    // scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:6:19: 6:39
        _14 = deref_copy (*_2);          // scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:6:19: 6:39
        _5 = discriminant((*_14));       // scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:6:19: 6:39
        switchInt(move _5) -> [1: bb1, otherwise: bb5]; // scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:6:9: 6:16
    }

    bb1: {
        _15 = deref_copy (*_2);          // scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:6:14: 6:15
        _1 = &mut (((*_15) as Some).0: i32); // scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:6:14: 6:15
        _6 = CheckedAdd((*_1), const 1_i32); // scope 1 at ui/let-else/let-else-binding-explicit-mut-pass.rs:7:5: 7:12
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_1), const 1_i32) -> bb2; // scope 1 at ui/let-else/let-else-binding-explicit-mut-pass.rs:7:5: 7:12
    }

    bb2: {
        (*_1) = move (_6.0: i32);        // scope 1 at ui/let-else/let-else-binding-explicit-mut-pass.rs:7:5: 7:12
        _11 = Option::<i32>::Some(const 5_i32); // scope 2 at ui/let-else/let-else-binding-explicit-mut-pass.rs:10:47: 10:57
        _10 = &mut _11;                  // scope 2 at ui/let-else/let-else-binding-explicit-mut-pass.rs:10:42: 10:57
        _9 = &mut _10;                   // scope 2 at ui/let-else/let-else-binding-explicit-mut-pass.rs:10:37: 10:57
        _16 = deref_copy (*_9);          // scope 2 at ui/let-else/let-else-binding-explicit-mut-pass.rs:10:37: 10:57
        _8 = &mut (*_16);                // scope 2 at ui/let-else/let-else-binding-explicit-mut-pass.rs:10:37: 10:57
        _12 = discriminant((*_8));       // scope 2 at ui/let-else/let-else-binding-explicit-mut-pass.rs:10:37: 10:57
        switchInt(move _12) -> [1: bb3, otherwise: bb5]; // scope 2 at ui/let-else/let-else-binding-explicit-mut-pass.rs:10:9: 10:16
    }

    bb3: {
        _7 = &mut (((*_8) as Some).0: i32); // scope 2 at ui/let-else/let-else-binding-explicit-mut-pass.rs:10:14: 10:15
        _13 = CheckedAdd((*_7), const 1_i32); // scope 3 at ui/let-else/let-else-binding-explicit-mut-pass.rs:11:5: 11:12
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_7), const 1_i32) -> bb4; // scope 3 at ui/let-else/let-else-binding-explicit-mut-pass.rs:11:5: 11:12
    }

    bb4: {
        (*_7) = move (_13.0: i32);       // scope 3 at ui/let-else/let-else-binding-explicit-mut-pass.rs:11:5: 11:12
        goto -> bb5;                     // scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:13:2: 13:2
    }

    bb5: {
        return;                          // scope 0 at ui/let-else/let-else-binding-explicit-mut-pass.rs:13:2: 13:2
    }
}
