// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &str) -> Result<impl Debug + '_, ()> {
    debug x => _1;                       // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:9:12: 9:13
    let mut _0: std::result::Result<impl std::fmt::Debug + '_, ()>; // return place in scope 0 at ui/let-else/let-else-temp-borrowck.rs:9:27: 9:54
    let mut _2: &str;                    // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:10:8: 10:9

    bb0: {
        _2 = _1;                         // scope 0 at ui/let-else/let-else-temp-borrowck.rs:10:8: 10:9
        _0 = Result::<&str, ()>::Ok(move _2); // scope 0 at ui/let-else/let-else-temp-borrowck.rs:10:5: 10:10
        return;                          // scope 0 at ui/let-else/let-else-temp-borrowck.rs:11:2: 11:2
    }
}

fn let_else() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-temp-borrowck.rs:13:15: 13:15
    let _1: std::string::String;         // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:14:9: 14:10
    let mut _2: std::result::Result<impl std::fmt::Debug + '_, ()>; // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:15:17: 15:24
    let mut _3: &str;                    // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:15:21: 15:23
    let _4: &str;                        // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:15:21: 15:23
    let mut _5: &std::string::String;    // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:15:21: 15:23
    let _6: &std::string::String;        // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:15:21: 15:23
    let mut _7: isize;                   // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:15:9: 15:14
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/let-else/let-else-temp-borrowck.rs:14:9: 14:10
        scope 2 {
        }
    }

    bb0: {
        _1 = <String as From<&str>>::from(const "Hey") -> bb1; // scope 0 at ui/let-else/let-else-temp-borrowck.rs:14:13: 14:32
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temp-borrowck.rs:14:13: 14:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temp-borrowck.rs:14:26: 14:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _6 = &_1;                        // scope 1 at ui/let-else/let-else-temp-borrowck.rs:15:21: 15:23
        _5 = _6;                         // scope 1 at ui/let-else/let-else-temp-borrowck.rs:15:21: 15:23
        _4 = <String as Deref>::deref(move _5) -> [return: bb2, unwind: bb7]; // scope 1 at ui/let-else/let-else-temp-borrowck.rs:15:21: 15:23
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temp-borrowck.rs:15:21: 15:23
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _4;                         // scope 1 at ui/let-else/let-else-temp-borrowck.rs:15:21: 15:23
        _2 = foo(move _3) -> [return: bb3, unwind: bb7]; // scope 1 at ui/let-else/let-else-temp-borrowck.rs:15:17: 15:24
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temp-borrowck.rs:15:17: 15:20
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<impl Debug + 'a, ()> {foo}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = discriminant(_2);           // scope 1 at ui/let-else/let-else-temp-borrowck.rs:15:17: 15:24
        switchInt(move _7) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/let-else/let-else-temp-borrowck.rs:15:9: 15:14
    }

    bb4: {
        drop(_1) -> bb6;                 // scope 0 at ui/let-else/let-else-temp-borrowck.rs:16:1: 16:2
    }

    bb5: {
        drop(_1) -> bb6;                 // scope 0 at ui/let-else/let-else-temp-borrowck.rs:16:1: 16:2
    }

    bb6: {
        return;                          // scope 0 at ui/let-else/let-else-temp-borrowck.rs:16:2: 16:2
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/let-else/let-else-temp-borrowck.rs:16:1: 16:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-temp-borrowck.rs:13:1: 16:2
    }
}

fn if_let() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-temp-borrowck.rs:18:13: 18:13
    let _1: std::string::String;         // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:19:9: 19:10
    let mut _2: std::result::Result<impl std::fmt::Debug + '_, ()>; // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:20:28: 20:35
    let mut _3: &str;                    // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:20:32: 20:34
    let _4: &str;                        // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:20:32: 20:34
    let mut _5: &std::string::String;    // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:20:32: 20:34
    let _6: &std::string::String;        // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:20:32: 20:34
    let mut _7: isize;                   // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:20:20: 20:25
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/let-else/let-else-temp-borrowck.rs:19:9: 19:10
        scope 2 {
        }
        scope 3 {
            debug s => _8;               // in scope 3 at ui/let-else/let-else-temp-borrowck.rs:20:23: 20:24
            let _8: impl std::fmt::Debug + '_; // in scope 3 at ui/let-else/let-else-temp-borrowck.rs:20:23: 20:24
        }
    }

    bb0: {
        _1 = <String as From<&str>>::from(const "Hey") -> bb1; // scope 0 at ui/let-else/let-else-temp-borrowck.rs:19:13: 19:32
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temp-borrowck.rs:19:13: 19:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temp-borrowck.rs:19:26: 19:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _6 = &_1;                        // scope 3 at ui/let-else/let-else-temp-borrowck.rs:20:32: 20:34
        _5 = _6;                         // scope 3 at ui/let-else/let-else-temp-borrowck.rs:20:32: 20:34
        _4 = <String as Deref>::deref(move _5) -> [return: bb2, unwind: bb7]; // scope 3 at ui/let-else/let-else-temp-borrowck.rs:20:32: 20:34
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temp-borrowck.rs:20:32: 20:34
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _4;                         // scope 3 at ui/let-else/let-else-temp-borrowck.rs:20:32: 20:34
        _2 = foo(move _3) -> [return: bb3, unwind: bb7]; // scope 3 at ui/let-else/let-else-temp-borrowck.rs:20:28: 20:35
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temp-borrowck.rs:20:28: 20:31
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<impl Debug + 'a, ()> {foo}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = discriminant(_2);           // scope 3 at ui/let-else/let-else-temp-borrowck.rs:20:20: 20:25
        switchInt(move _7) -> [0: bb4, otherwise: bb5]; // scope 3 at ui/let-else/let-else-temp-borrowck.rs:20:20: 20:25
    }

    bb4: {
        _8 = move ((_2 as Ok).0: impl std::fmt::Debug + '_); // scope 3 at ui/let-else/let-else-temp-borrowck.rs:20:23: 20:24
        drop(_1) -> bb6;                 // scope 0 at ui/let-else/let-else-temp-borrowck.rs:21:1: 21:2
    }

    bb5: {
        drop(_1) -> bb6;                 // scope 0 at ui/let-else/let-else-temp-borrowck.rs:21:1: 21:2
    }

    bb6: {
        return;                          // scope 0 at ui/let-else/let-else-temp-borrowck.rs:21:2: 21:2
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/let-else/let-else-temp-borrowck.rs:21:1: 21:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-temp-borrowck.rs:18:1: 21:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-temp-borrowck.rs:23:11: 23:11
    let _1: ();                          // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:24:5: 24:15
    let _2: ();                          // in scope 0 at ui/let-else/let-else-temp-borrowck.rs:25:5: 25:13

    bb0: {
        _1 = let_else() -> bb1;          // scope 0 at ui/let-else/let-else-temp-borrowck.rs:24:5: 24:15
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temp-borrowck.rs:24:5: 24:13
                                         // + literal: Const { ty: fn() {let_else}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = if_let() -> bb2;            // scope 0 at ui/let-else/let-else-temp-borrowck.rs:25:5: 25:13
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temp-borrowck.rs:25:5: 25:11
                                         // + literal: Const { ty: fn() {if_let}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/let-else/let-else-temp-borrowck.rs:26:2: 26:2
    }
}
