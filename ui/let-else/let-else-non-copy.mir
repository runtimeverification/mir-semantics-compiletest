// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/let-else/let-else-non-copy.rs:15:16: 15:21>::clone(_1: &Copyable) -> Copyable {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-non-copy.rs:15:16: 15:21
    let mut _0: Copyable;                // return place in scope 0 at ui/let-else/let-else-non-copy.rs:15:16: 15:21

    bb0: {
        return;                          // scope 0 at ui/let-else/let-else-non-copy.rs:15:21: 15:21
    }
}

fn let_else() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-non-copy.rs:28:15: 28:15
    let _1: std::vec::Vec<Wrapper>;      // in scope 0 at ui/let-else/let-else-non-copy.rs:29:9: 29:12
    let mut _2: std::boxed::Box<[Wrapper]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[Wrapper; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[Wrapper; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: Wrapper;                 // in scope 0 at ui/let-else/let-else-non-copy.rs:29:20: 29:63
    let mut _9: std::slice::Iter<'_, Wrapper>; // in scope 0 at ui/let-else/let-else-non-copy.rs:30:17: 30:21
    let mut _10: &std::vec::Vec<Wrapper>; // in scope 0 at ui/let-else/let-else-non-copy.rs:30:17: 30:21
    let mut _12: std::option::Option<&Wrapper>; // in scope 0 at ui/let-else/let-else-non-copy.rs:30:17: 30:21
    let mut _13: &mut std::slice::Iter<'_, Wrapper>; // in scope 0 at ui/let-else/let-else-non-copy.rs:30:17: 30:21
    let mut _14: &mut std::slice::Iter<'_, Wrapper>; // in scope 0 at ui/let-else/let-else-non-copy.rs:30:17: 30:21
    let mut _15: isize;                  // in scope 0 at ui/let-else/let-else-non-copy.rs:30:5: 32:6
    let mut _18: *const [Wrapper; 1];    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug vec => _1;                 // in scope 1 at ui/let-else/let-else-non-copy.rs:29:9: 29:12
        let mut _11: std::slice::Iter<'_, Wrapper>; // in scope 1 at ui/let-else/let-else-non-copy.rs:30:17: 30:21
        scope 3 {
            debug iter => _11;           // in scope 3 at ui/let-else/let-else-non-copy.rs:30:17: 30:21
            let _16: &Wrapper;           // in scope 3 at ui/let-else/let-else-non-copy.rs:30:9: 30:13
            scope 4 {
                debug item => _16;       // in scope 4 at ui/let-else/let-else-non-copy.rs:30:9: 30:13
                let _17: Copyable;       // in scope 4 at ui/let-else/let-else-non-copy.rs:31:28: 31:37
                scope 5 {
                    debug _copyable => _17; // in scope 5 at ui/let-else/let-else-non-copy.rs:31:28: 31:37
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 1_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 1_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [Wrapper; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = const Wrapper {{ field: NonCopy::Thing(Copyable) }}; // scope 0 at ui/let-else/let-else-non-copy.rs:29:20: 29:63
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-non-copy.rs:29:20: 29:63
                                         // + literal: Const { ty: Wrapper, val: Value(Scalar(0x00)) }
        _18 = (((_7.0: std::ptr::Unique<[Wrapper; 1]>).0: std::ptr::NonNull<[Wrapper; 1]>).0: *const [Wrapper; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_18) = [move _8];              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[Wrapper]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [Wrapper]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[Wrapper]>) -> Vec<Wrapper> {slice::<impl [Wrapper]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = &_1;                       // scope 1 at ui/let-else/let-else-non-copy.rs:30:17: 30:21
        _9 = <&Vec<Wrapper> as IntoIterator>::into_iter(move _10) -> [return: bb3, unwind: bb10]; // scope 1 at ui/let-else/let-else-non-copy.rs:30:17: 30:21
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-non-copy.rs:30:17: 30:21
                                         // + literal: Const { ty: fn(&Vec<Wrapper>) -> <&Vec<Wrapper> as IntoIterator>::IntoIter {<&Vec<Wrapper> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = move _9;                   // scope 1 at ui/let-else/let-else-non-copy.rs:30:17: 30:21
        goto -> bb4;                     // scope 3 at ui/let-else/let-else-non-copy.rs:30:5: 32:6
    }

    bb4: {
        _14 = &mut _11;                  // scope 3 at ui/let-else/let-else-non-copy.rs:30:17: 30:21
        _13 = &mut (*_14);               // scope 3 at ui/let-else/let-else-non-copy.rs:30:17: 30:21
        _12 = <std::slice::Iter<'_, Wrapper> as Iterator>::next(move _13) -> [return: bb5, unwind: bb10]; // scope 3 at ui/let-else/let-else-non-copy.rs:30:17: 30:21
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-non-copy.rs:30:17: 30:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, Wrapper>) -> Option<<std::slice::Iter<'_, Wrapper> as Iterator>::Item> {<std::slice::Iter<'_, Wrapper> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = discriminant(_12);         // scope 3 at ui/let-else/let-else-non-copy.rs:30:17: 30:21
        switchInt(move _15) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 3 at ui/let-else/let-else-non-copy.rs:30:17: 30:21
    }

    bb6: {
        _16 = ((_12 as Some).0: &Wrapper); // scope 3 at ui/let-else/let-else-non-copy.rs:30:9: 30:13
        goto -> bb4;                     // scope 4 at ui/let-else/let-else-non-copy.rs:31:13: 31:38
    }

    bb7: {
        unreachable;                     // scope 3 at ui/let-else/let-else-non-copy.rs:30:17: 30:21
    }

    bb8: {
        drop(_1) -> bb9;                 // scope 0 at ui/let-else/let-else-non-copy.rs:33:1: 33:2
    }

    bb9: {
        return;                          // scope 0 at ui/let-else/let-else-non-copy.rs:33:2: 33:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/let-else/let-else-non-copy.rs:33:1: 33:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-non-copy.rs:28:1: 33:2
    }
}

fn if_let() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-non-copy.rs:35:13: 35:13
    let _1: std::vec::Vec<Wrapper>;      // in scope 0 at ui/let-else/let-else-non-copy.rs:36:9: 36:12
    let mut _2: std::boxed::Box<[Wrapper]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[Wrapper; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[Wrapper; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: Wrapper;                 // in scope 0 at ui/let-else/let-else-non-copy.rs:36:20: 36:63
    let mut _9: std::slice::Iter<'_, Wrapper>; // in scope 0 at ui/let-else/let-else-non-copy.rs:37:17: 37:21
    let mut _10: &std::vec::Vec<Wrapper>; // in scope 0 at ui/let-else/let-else-non-copy.rs:37:17: 37:21
    let mut _12: std::option::Option<&Wrapper>; // in scope 0 at ui/let-else/let-else-non-copy.rs:37:17: 37:21
    let mut _13: &mut std::slice::Iter<'_, Wrapper>; // in scope 0 at ui/let-else/let-else-non-copy.rs:37:17: 37:21
    let mut _14: &mut std::slice::Iter<'_, Wrapper>; // in scope 0 at ui/let-else/let-else-non-copy.rs:37:17: 37:21
    let mut _15: isize;                  // in scope 0 at ui/let-else/let-else-non-copy.rs:37:5: 39:6
    let mut _19: *const [Wrapper; 1];    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug vec => _1;                 // in scope 1 at ui/let-else/let-else-non-copy.rs:36:9: 36:12
        let mut _11: std::slice::Iter<'_, Wrapper>; // in scope 1 at ui/let-else/let-else-non-copy.rs:37:17: 37:21
        scope 3 {
            debug iter => _11;           // in scope 3 at ui/let-else/let-else-non-copy.rs:37:17: 37:21
            let _16: &Wrapper;           // in scope 3 at ui/let-else/let-else-non-copy.rs:37:9: 37:13
            scope 4 {
                debug item => _16;       // in scope 4 at ui/let-else/let-else-non-copy.rs:37:9: 37:13
                let _17: Copyable;       // in scope 4 at ui/let-else/let-else-non-copy.rs:38:13: 38:22
                scope 5 {
                    debug _copyable => _17; // in scope 5 at ui/let-else/let-else-non-copy.rs:38:13: 38:22
                }
                scope 6 {
                    debug copyable => _18; // in scope 6 at ui/let-else/let-else-non-copy.rs:38:47: 38:55
                    let _18: Copyable;   // in scope 6 at ui/let-else/let-else-non-copy.rs:38:47: 38:55
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 1_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 1_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [Wrapper; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = const Wrapper {{ field: NonCopy::Thing(Copyable) }}; // scope 0 at ui/let-else/let-else-non-copy.rs:36:20: 36:63
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-non-copy.rs:36:20: 36:63
                                         // + literal: Const { ty: Wrapper, val: Value(Scalar(0x00)) }
        _19 = (((_7.0: std::ptr::Unique<[Wrapper; 1]>).0: std::ptr::NonNull<[Wrapper; 1]>).0: *const [Wrapper; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_19) = [move _8];              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[Wrapper]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [Wrapper]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[Wrapper]>) -> Vec<Wrapper> {slice::<impl [Wrapper]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = &_1;                       // scope 1 at ui/let-else/let-else-non-copy.rs:37:17: 37:21
        _9 = <&Vec<Wrapper> as IntoIterator>::into_iter(move _10) -> [return: bb3, unwind: bb10]; // scope 1 at ui/let-else/let-else-non-copy.rs:37:17: 37:21
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-non-copy.rs:37:17: 37:21
                                         // + literal: Const { ty: fn(&Vec<Wrapper>) -> <&Vec<Wrapper> as IntoIterator>::IntoIter {<&Vec<Wrapper> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = move _9;                   // scope 1 at ui/let-else/let-else-non-copy.rs:37:17: 37:21
        goto -> bb4;                     // scope 3 at ui/let-else/let-else-non-copy.rs:37:5: 39:6
    }

    bb4: {
        _14 = &mut _11;                  // scope 3 at ui/let-else/let-else-non-copy.rs:37:17: 37:21
        _13 = &mut (*_14);               // scope 3 at ui/let-else/let-else-non-copy.rs:37:17: 37:21
        _12 = <std::slice::Iter<'_, Wrapper> as Iterator>::next(move _13) -> [return: bb5, unwind: bb10]; // scope 3 at ui/let-else/let-else-non-copy.rs:37:17: 37:21
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-non-copy.rs:37:17: 37:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, Wrapper>) -> Option<<std::slice::Iter<'_, Wrapper> as Iterator>::Item> {<std::slice::Iter<'_, Wrapper> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = discriminant(_12);         // scope 3 at ui/let-else/let-else-non-copy.rs:37:17: 37:21
        switchInt(move _15) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 3 at ui/let-else/let-else-non-copy.rs:37:17: 37:21
    }

    bb6: {
        _16 = ((_12 as Some).0: &Wrapper); // scope 3 at ui/let-else/let-else-non-copy.rs:37:9: 37:13
        goto -> bb4;                     // scope 6 at ui/let-else/let-else-non-copy.rs:38:32: 38:56
    }

    bb7: {
        unreachable;                     // scope 3 at ui/let-else/let-else-non-copy.rs:37:17: 37:21
    }

    bb8: {
        drop(_1) -> bb9;                 // scope 0 at ui/let-else/let-else-non-copy.rs:40:1: 40:2
    }

    bb9: {
        return;                          // scope 0 at ui/let-else/let-else-non-copy.rs:40:2: 40:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/let-else/let-else-non-copy.rs:40:1: 40:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-non-copy.rs:35:1: 40:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-non-copy.rs:42:11: 42:11
    let _1: ();                          // in scope 0 at ui/let-else/let-else-non-copy.rs:43:5: 43:15
    let _2: ();                          // in scope 0 at ui/let-else/let-else-non-copy.rs:44:5: 44:13

    bb0: {
        _1 = let_else() -> bb1;          // scope 0 at ui/let-else/let-else-non-copy.rs:43:5: 43:15
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-non-copy.rs:43:5: 43:13
                                         // + literal: Const { ty: fn() {let_else}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = if_let() -> bb2;            // scope 0 at ui/let-else/let-else-non-copy.rs:44:5: 44:13
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-non-copy.rs:44:5: 44:11
                                         // + literal: Const { ty: fn() {if_let}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/let-else/let-else-non-copy.rs:45:2: 45:2
    }
}

fn NonCopy::Thing(_1: Copyable) -> NonCopy {
    let mut _0: NonCopy;                 // return place in scope 0 at ui/let-else/let-else-non-copy.rs:19:5: 19:10

    bb0: {
        _0 = NonCopy::Thing(move _1);    // scope 0 at ui/let-else/let-else-non-copy.rs:19:5: 19:10
        return;                          // scope 0 at ui/let-else/let-else-non-copy.rs:19:5: 19:10
    }
}

// MIR FOR CTFE
fn NonCopy::Thing(_1: Copyable) -> NonCopy {
    let mut _0: NonCopy;                 // return place in scope 0 at ui/let-else/let-else-non-copy.rs:19:5: 19:10

    bb0: {
        _0 = NonCopy::Thing(move _1);    // scope 0 at ui/let-else/let-else-non-copy.rs:19:5: 19:10
        return;                          // scope 0 at ui/let-else/let-else-non-copy.rs:19:5: 19:10
    }
}
