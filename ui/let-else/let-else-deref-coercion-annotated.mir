// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/let-else/let-else-deref-coercion-annotated.rs:18:1: 18:19>::deref(_1: &Foo) -> &Bar {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:20:14: 20:19
    let mut _0: &Bar;                    // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:21:9: 21:16

    bb0: {
        _0 = &((*_1).0: Bar);            // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:21:9: 21:16
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:22:6: 22:6
    }
}

fn <impl at ui/let-else/let-else-deref-coercion-annotated.rs:24:1: 24:22>::deref_mut(_1: &mut Foo) -> &mut Bar {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:25:18: 25:27
    let mut _0: &mut Bar;                // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:25:32: 25:40
    let mut _2: &mut Bar;                // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:26:9: 26:20
    let mut _3: &mut Bar;                // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:26:9: 26:20

    bb0: {
        _3 = &mut ((*_1).0: Bar);        // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:26:9: 26:20
        _2 = &mut (*_3);                 // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:26:9: 26:20
        _0 = &mut (*_2);                 // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:26:9: 26:20
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:27:6: 27:6
    }
}

fn <impl at ui/let-else/let-else-deref-coercion-annotated.rs:29:1: 29:9>::bar(_1: &Bar) -> Option<u32> {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:30:12: 30:17
    let mut _0: std::option::Option<u32>; // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:30:22: 30:33
    let _2: &u32;                        // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:31:26: 31:27
    let mut _3: &Bar;                    // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:31:37: 31:41
    let mut _4: isize;                   // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:31:13: 31:28
    let mut _5: u32;                     // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:34:21: 34:23
    scope 1 {
        debug z => _2;                   // in scope 1 at ui/let-else/let-else-deref-coercion-annotated.rs:31:26: 31:27
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:31:37: 31:41
        _4 = discriminant((*_3));        // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:31:37: 31:41
        switchInt(move _4) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:31:13: 31:28
    }

    bb1: {
        _2 = &(((*_3) as Present).0: u32); // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:31:26: 31:27
        _5 = (*_2);                      // scope 1 at ui/let-else/let-else-deref-coercion-annotated.rs:34:21: 34:23
        _0 = Option::<u32>::Some(move _5); // scope 1 at ui/let-else/let-else-deref-coercion-annotated.rs:34:16: 34:24
        goto -> bb3;                     // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:35:6: 35:6
    }

    bb2: {
        _0 = Option::<u32>::None;        // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:32:20: 32:24
        goto -> bb3;                     // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:32:13: 32:24
    }

    bb3: {
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:35:6: 35:6
    }
}

fn <impl at ui/let-else/let-else-deref-coercion-annotated.rs:37:1: 37:9>::set_bar_annotated(_1: &mut Foo, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:38:26: 38:35
    debug value => _2;                   // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:38:37: 38:42
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:38:49: 38:49
    let _3: &mut u32;                    // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:39:26: 39:27
    let mut _4: &mut Bar;                // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:39:41: 39:45
    let mut _5: &mut Bar;                // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:39:41: 39:45
    let mut _6: &mut Foo;                // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:39:41: 39:45
    let mut _7: isize;                   // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:39:13: 39:28
    let mut _8: u32;                     // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:42:14: 42:19
    scope 1 {
        debug z => _3;                   // in scope 1 at ui/let-else/let-else-deref-coercion-annotated.rs:39:26: 39:27
    }

    bb0: {
        _6 = &mut (*_1);                 // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:39:41: 39:45
        _5 = <Foo as DerefMut>::deref_mut(move _6) -> bb1; // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:39:41: 39:45
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-deref-coercion-annotated.rs:39:41: 39:45
                                         // + literal: Const { ty: for<'a> fn(&'a mut Foo) -> &'a mut <Foo as Deref>::Target {<Foo as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut (*_5);                 // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:39:41: 39:45
        _7 = discriminant((*_4));        // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:39:41: 39:45
        switchInt(move _7) -> [0: bb2, otherwise: bb3]; // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:39:13: 39:28
    }

    bb2: {
        _3 = &mut (((*_4) as Present).0: u32); // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:39:26: 39:27
        _8 = _2;                         // scope 1 at ui/let-else/let-else-deref-coercion-annotated.rs:42:14: 42:19
        (*_3) = move _8;                 // scope 1 at ui/let-else/let-else-deref-coercion-annotated.rs:42:9: 42:19
        goto -> bb3;                     // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:43:6: 43:6
    }

    bb3: {
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:43:6: 43:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:46:11: 46:11
    let mut _1: Foo;                     // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:47:9: 47:16
    let mut _2: Bar;                     // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:47:23: 47:38
    let _3: ();                          // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:48:5: 48:30
    let mut _4: &mut Foo;                // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:48:5: 48:30
    let mut _5: (&std::option::Option<u32>, &std::option::Option<u32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &std::option::Option<u32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _7: std::option::Option<u32>;    // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:49:16: 49:25
    let mut _8: &Bar;                    // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:49:16: 49:25
    let _9: &Bar;                        // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:49:16: 49:25
    let mut _10: &Foo;                   // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:49:16: 49:25
    let mut _11: &std::option::Option<u32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: &std::option::Option<u32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: &std::option::Option<u32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &std::option::Option<u32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &std::option::Option<u32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &std::option::Option<u32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &std::option::Option<u32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _26: ();                         // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:50:5: 50:25
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/let-else/let-else-deref-coercion-annotated.rs:47:9: 47:16
        let _12: &std::option::Option<u32>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _13: &std::option::Option<u32>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _27: &std::option::Option<u32>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _12;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _13;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _18: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _18;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = Bar::Present(const 1_u32);  // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:47:23: 47:38
        _1 = Foo(move _2);               // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:47:19: 47:39
        _4 = &mut _1;                    // scope 1 at ui/let-else/let-else-deref-coercion-annotated.rs:48:5: 48:30
        _3 = Foo::set_bar_annotated(move _4, const 42_u32) -> bb1; // scope 1 at ui/let-else/let-else-deref-coercion-annotated.rs:48:5: 48:30
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-deref-coercion-annotated.rs:48:9: 48:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut Foo, u32) {Foo::set_bar_annotated}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = &_1;                       // scope 1 at ui/let-else/let-else-deref-coercion-annotated.rs:49:16: 49:25
        _9 = <Foo as Deref>::deref(move _10) -> bb2; // scope 1 at ui/let-else/let-else-deref-coercion-annotated.rs:49:16: 49:25
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-deref-coercion-annotated.rs:49:16: 49:25
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) -> &'a <Foo as Deref>::Target {<Foo as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _9;                         // scope 1 at ui/let-else/let-else-deref-coercion-annotated.rs:49:16: 49:25
        _7 = Bar::bar(move _8) -> bb3;   // scope 1 at ui/let-else/let-else-deref-coercion-annotated.rs:49:16: 49:25
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-deref-coercion-annotated.rs:49:20: 49:23
                                         // + literal: Const { ty: for<'a> fn(&'a Bar) -> Option<u32> {Bar::bar}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &_7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<u32>, val: Unevaluated(main, [], Some(promoted[0])) }
        _11 = _27;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _11);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_5.0: &std::option::Option<u32>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_5.1: &std::option::Option<u32>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = _13;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = <Option<u32> as PartialEq>::eq(move _16, move _17) -> bb4; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u32>, &'b Option<u32>) -> bool {<Option<u32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = Not(move _15);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<Option<u32>, Option<u32>>(move _20, move _21, move _23, move _25); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<u32>, &'b Option<u32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<u32>, Option<u32>>}, val: Value(<ZST>) }
    }

    bb6: {
        _26 = inner() -> bb7;            // scope 1 at ui/let-else/let-else-deref-coercion-annotated.rs:50:5: 50:25
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-deref-coercion-annotated.rs:50:5: 50:23
                                         // + literal: Const { ty: fn() {inner}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:51:2: 51:2
    }
}

promoted[0] in main: &Option<u32> = {
    let mut _0: &std::option::Option<u32>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<u32>; // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:49:27: 49:35

    bb0: {
        _1 = Option::<u32>::Some(const 42_u32); // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:49:27: 49:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn irrefutable::<impl at ui/let-else/let-else-deref-coercion-annotated.rs:58:5: 58:23>::deref(_1: &irrefutable::Foo) -> &irrefutable::Bar {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:60:18: 60:23
    let mut _0: &irrefutable::Bar;       // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:61:13: 61:20

    bb0: {
        _0 = &((*_1).0: irrefutable::Bar); // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:61:13: 61:20
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:62:10: 62:10
    }
}

fn irrefutable::<impl at ui/let-else/let-else-deref-coercion-annotated.rs:64:5: 64:26>::deref_mut(_1: &mut irrefutable::Foo) -> &mut irrefutable::Bar {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:65:22: 65:31
    let mut _0: &mut irrefutable::Bar;   // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:65:36: 65:44
    let mut _2: &mut irrefutable::Bar;   // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:66:13: 66:24
    let mut _3: &mut irrefutable::Bar;   // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:66:13: 66:24

    bb0: {
        _3 = &mut ((*_1).0: irrefutable::Bar); // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:66:13: 66:24
        _2 = &mut (*_3);                 // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:66:13: 66:24
        _0 = &mut (*_2);                 // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:66:13: 66:24
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:67:10: 67:10
    }
}

fn foo(_1: &mut irrefutable::Foo) -> () {
    debug x => _1;                       // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:69:12: 69:13
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:69:25: 69:25
    let _2: &mut u32;                    // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:70:17: 70:18
    let mut _3: &mut irrefutable::Bar;   // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:70:32: 70:33
    let mut _4: &mut irrefutable::Bar;   // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:70:32: 70:33
    let mut _5: &mut irrefutable::Foo;   // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:70:32: 70:33
    let mut _6: (&u32, &u32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _8: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug z => _2;                   // in scope 1 at ui/let-else/let-else-deref-coercion-annotated.rs:70:17: 70:18
        let _9: &u32;                    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _10: &u32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _23: &u32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _9;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _10;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _15: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _15;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _5 = &mut (*_1);                 // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:70:32: 70:33
        _4 = <irrefutable::Foo as DerefMut>::deref_mut(move _5) -> bb1; // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:70:32: 70:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-deref-coercion-annotated.rs:70:32: 70:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut irrefutable::Foo) -> &'a mut <irrefutable::Foo as Deref>::Target {<irrefutable::Foo as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut (*_4);                 // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:70:32: 70:33
        _2 = &mut ((*_3).0: u32);        // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:70:17: 70:18
        (*_2) = const 42_u32;            // scope 1 at ui/let-else/let-else-deref-coercion-annotated.rs:71:9: 71:16
        _7 = &(((*_1).0: irrefutable::Bar).0: u32); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _23 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(foo, [], Some(promoted[0])) }
        _8 = _23;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _8);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_6.0: &u32);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_6.1: &u32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = const 42_u32;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<u32, u32>(move _17, move _18, move _20, move _22); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:73:6: 73:6
    }
}

promoted[0] in foo: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:72:29: 72:31

    bb0: {
        _1 = const 42_u32;               // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:72:29: 72:31
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn inner() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:74:20: 74:20
    let _1: ();                          // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:75:9: 75:30
    let mut _2: &mut irrefutable::Foo;   // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:75:13: 75:29
    let mut _3: &mut irrefutable::Foo;   // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:75:13: 75:29
    let mut _4: irrefutable::Foo;        // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:75:18: 75:29
    let mut _5: irrefutable::Bar;        // in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:75:22: 75:28

    bb0: {
        _5 = const irrefutable::Bar(1_u32); // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:75:22: 75:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-deref-coercion-annotated.rs:75:22: 75:28
                                         // + literal: Const { ty: irrefutable::Bar, val: Value(Scalar(0x00000001)) }
        _4 = irrefutable::Foo(move _5);  // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:75:18: 75:29
        _3 = &mut _4;                    // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:75:13: 75:29
        _2 = &mut (*_3);                 // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:75:13: 75:29
        _1 = foo(move _2) -> bb1;        // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:75:9: 75:30
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-deref-coercion-annotated.rs:75:9: 75:12
                                         // + literal: Const { ty: for<'a> fn(&'a mut irrefutable::Foo) {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:76:6: 76:6
    }
}

fn Foo(_1: Bar) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:12:1: 12:11

    bb0: {
        _0 = Foo(move _1);               // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:12:1: 12:11
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:12:1: 12:11
    }
}

// MIR FOR CTFE
fn Foo(_1: Bar) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:12:1: 12:11

    bb0: {
        _0 = Foo(move _1);               // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:12:1: 12:11
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:12:1: 12:11
    }
}

fn Bar::Present(_1: u32) -> Bar {
    let mut _0: Bar;                     // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:15:5: 15:12

    bb0: {
        _0 = Bar::Present(move _1);      // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:15:5: 15:12
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:15:5: 15:12
    }
}

// MIR FOR CTFE
fn Bar::Present(_1: u32) -> Bar {
    let mut _0: Bar;                     // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:15:5: 15:12

    bb0: {
        _0 = Bar::Present(move _1);      // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:15:5: 15:12
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:15:5: 15:12
    }
}

fn irrefutable::Foo(_1: irrefutable::Bar) -> irrefutable::Foo {
    let mut _0: irrefutable::Foo;        // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:56:5: 56:15

    bb0: {
        _0 = irrefutable::Foo(move _1);  // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:56:5: 56:15
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:56:5: 56:15
    }
}

// MIR FOR CTFE
fn irrefutable::Foo(_1: irrefutable::Bar) -> irrefutable::Foo {
    let mut _0: irrefutable::Foo;        // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:56:5: 56:15

    bb0: {
        _0 = irrefutable::Foo(move _1);  // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:56:5: 56:15
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:56:5: 56:15
    }
}

fn irrefutable::Bar(_1: u32) -> irrefutable::Bar {
    let mut _0: irrefutable::Bar;        // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:57:5: 57:15

    bb0: {
        _0 = irrefutable::Bar(move _1);  // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:57:5: 57:15
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:57:5: 57:15
    }
}

// MIR FOR CTFE
fn irrefutable::Bar(_1: u32) -> irrefutable::Bar {
    let mut _0: irrefutable::Bar;        // return place in scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:57:5: 57:15

    bb0: {
        _0 = irrefutable::Bar(move _1);  // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:57:5: 57:15
        return;                          // scope 0 at ui/let-else/let-else-deref-coercion-annotated.rs:57:5: 57:15
    }
}
