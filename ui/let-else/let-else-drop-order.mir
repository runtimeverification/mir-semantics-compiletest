// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/let-else/let-else-drop-order.rs:25:10: 25:15>::clone(_1: &DropAccountant) -> DropAccountant {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:25:10: 25:15
    let mut _0: DropAccountant;          // return place in scope 0 at ui/let-else/let-else-drop-order.rs:25:10: 25:15
    let mut _2: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:26:23: 26:52
    let mut _3: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:26:23: 26:52
    let _4: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:26:23: 26:52

    bb0: {
        _4 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>); // scope 0 at ui/let-else/let-else-drop-order.rs:26:23: 26:52
        _3 = _4;                         // scope 0 at ui/let-else/let-else-drop-order.rs:26:23: 26:52
        _2 = <Rc<RefCell<Vec<Vec<String>>>> as Clone>::clone(move _3) -> bb1; // scope 0 at ui/let-else/let-else-drop-order.rs:26:23: 26:52
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:26:23: 26:52
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<Vec<String>>>>) -> Rc<RefCell<Vec<Vec<String>>>> {<Rc<RefCell<Vec<Vec<String>>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = DropAccountant(move _2);    // scope 0 at ui/let-else/let-else-drop-order.rs:25:10: 25:15
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:25:15: 25:15
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::new() -> DropAccountant {
    let mut _0: DropAccountant;          // return place in scope 0 at ui/let-else/let-else-drop-order.rs:29:17: 29:21
    let mut _1: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:30:14: 30:32

    bb0: {
        _1 = <Rc<RefCell<Vec<Vec<String>>>> as Default>::default() -> bb1; // scope 0 at ui/let-else/let-else-drop-order.rs:30:14: 30:32
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:30:14: 30:30
                                         // + literal: Const { ty: fn() -> Rc<RefCell<Vec<Vec<String>>>> {<Rc<RefCell<Vec<Vec<String>>>> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = DropAccountant(move _1);    // scope 0 at ui/let-else/let-else-drop-order.rs:30:9: 30:33
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:31:6: 31:6
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::build_droppy(_1: &DropAccountant, _2: u32) -> Droppy<u32> {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:32:21: 32:26
    debug v => _2;                       // in scope 0 at ui/let-else/let-else-drop-order.rs:32:28: 32:29
    let mut _0: Droppy<u32>;             // return place in scope 0 at ui/let-else/let-else-drop-order.rs:32:39: 32:50
    let mut _3: DropAccountant;          // in scope 0 at ui/let-else/let-else-drop-order.rs:33:16: 33:28
    let mut _4: &DropAccountant;         // in scope 0 at ui/let-else/let-else-drop-order.rs:33:16: 33:28
    let mut _5: u32;                     // in scope 0 at ui/let-else/let-else-drop-order.rs:33:30: 33:31

    bb0: {
        _4 = _1;                         // scope 0 at ui/let-else/let-else-drop-order.rs:33:16: 33:28
        _3 = <DropAccountant as Clone>::clone(move _4) -> bb1; // scope 0 at ui/let-else/let-else-drop-order.rs:33:16: 33:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:33:21: 33:26
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant) -> DropAccountant {<DropAccountant as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _2;                         // scope 0 at ui/let-else/let-else-drop-order.rs:33:30: 33:31
        _0 = Droppy::<u32>(move _3, move _5); // scope 0 at ui/let-else/let-else-drop-order.rs:33:9: 33:32
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:34:6: 34:6
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::build_droppy_enum_none(_1: &DropAccountant, _2: u32) -> ((), DroppyEnum<u32>) {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:35:31: 35:36
    debug _v => _2;                      // in scope 0 at ui/let-else/let-else-drop-order.rs:35:38: 35:40
    let mut _0: ((), DroppyEnum<u32>);   // return place in scope 0 at ui/let-else/let-else-drop-order.rs:35:50: 35:71
    let mut _3: ();                      // in scope 0 at ui/let-else/let-else-drop-order.rs:36:10: 36:12
    let mut _4: DroppyEnum<u32>;         // in scope 0 at ui/let-else/let-else-drop-order.rs:36:14: 36:44
    let mut _5: DropAccountant;          // in scope 0 at ui/let-else/let-else-drop-order.rs:36:31: 36:43
    let mut _6: &DropAccountant;         // in scope 0 at ui/let-else/let-else-drop-order.rs:36:31: 36:43

    bb0: {
        _6 = _1;                         // scope 0 at ui/let-else/let-else-drop-order.rs:36:31: 36:43
        _5 = <DropAccountant as Clone>::clone(move _6) -> bb1; // scope 0 at ui/let-else/let-else-drop-order.rs:36:31: 36:43
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:36:36: 36:41
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant) -> DropAccountant {<DropAccountant as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = DroppyEnum::<u32>::None(move _5); // scope 0 at ui/let-else/let-else-drop-order.rs:36:14: 36:44
        _0 = (move _3, move _4);         // scope 0 at ui/let-else/let-else-drop-order.rs:36:9: 36:45
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:37:6: 37:6
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::new_list(_1: &DropAccountant, _2: impl ToString) -> () {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:38:17: 38:22
    debug s => _2;                       // in scope 0 at ui/let-else/let-else-drop-order.rs:38:24: 38:25
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-drop-order.rs:38:42: 38:42
    let _3: ();                          // in scope 0 at ui/let-else/let-else-drop-order.rs:39:9: 39:54
    let mut _4: &mut std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:39:9: 39:54
    let mut _5: &mut std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:39:9: 39:54
    let mut _6: &mut std::cell::RefMut<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:39:9: 39:54
    let mut _7: std::cell::RefMut<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:39:9: 39:28
    let mut _8: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:39:9: 39:28
    let _9: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:39:9: 39:28
    let mut _10: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:39:9: 39:28
    let mut _11: std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _12: std::boxed::Box<[std::string::String]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _13: std::boxed::Box<[std::string::String; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _14: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _15: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _16: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _17: std::boxed::Box<[std::string::String; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _18: std::string::String;    // in scope 0 at ui/let-else/let-else-drop-order.rs:39:39: 39:52
    let mut _19: &impl ToString;         // in scope 0 at ui/let-else/let-else-drop-order.rs:39:39: 39:52
    let mut _20: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _21: *const [std::string::String; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }

    bb0: {
        _10 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>); // scope 0 at ui/let-else/let-else-drop-order.rs:39:9: 39:28
        _9 = <Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref(move _10) -> [return: bb1, unwind: bb11]; // scope 0 at ui/let-else/let-else-drop-order.rs:39:9: 39:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:39:9: 39:28
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<Vec<String>>>>) -> &'a <Rc<RefCell<Vec<Vec<String>>>> as Deref>::Target {<Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _9;                         // scope 0 at ui/let-else/let-else-drop-order.rs:39:9: 39:28
        _7 = RefCell::<Vec<Vec<String>>>::borrow_mut(move _8) -> [return: bb2, unwind: bb11]; // scope 0 at ui/let-else/let-else-drop-order.rs:39:9: 39:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:39:16: 39:26
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<Vec<String>>>) -> RefMut<'a, Vec<Vec<String>>> {RefCell::<Vec<Vec<String>>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &mut _7;                    // scope 0 at ui/let-else/let-else-drop-order.rs:39:9: 39:54
        _5 = <RefMut<'_, Vec<Vec<String>>> as DerefMut>::deref_mut(move _6) -> [return: bb3, unwind: bb10]; // scope 0 at ui/let-else/let-else-drop-order.rs:39:9: 39:54
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:39:9: 39:54
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Vec<Vec<String>>>) -> &'a mut <RefMut<'_, Vec<Vec<String>>> as Deref>::Target {<RefMut<'_, Vec<Vec<String>>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = &mut (*_5);                 // scope 0 at ui/let-else/let-else-drop-order.rs:39:9: 39:54
        _14 = const 24_usize;            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _15 = const 8_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _16 = alloc::alloc::exchange_malloc(move _14, move _15) -> [return: bb4, unwind: bb10]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb4: {
        _17 = ShallowInitBox(move _16, [std::string::String; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _19 = &_2;                       // scope 0 at ui/let-else/let-else-drop-order.rs:39:39: 39:52
        _18 = <impl ToString as ToString>::to_string(move _19) -> [return: bb5, unwind: bb13]; // scope 0 at ui/let-else/let-else-drop-order.rs:39:39: 39:52
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:39:41: 39:50
                                         // + literal: Const { ty: for<'a> fn(&'a impl ToString) -> String {<impl ToString as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb5: {
        _21 = (((_17.0: std::ptr::Unique<[std::string::String; 1]>).0: std::ptr::NonNull<[std::string::String; 1]>).0: *const [std::string::String; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_21) = [move _18];             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _13 = move _17;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _12 = move _13 as std::boxed::Box<[std::string::String]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _11 = slice::<impl [String]>::into_vec::<std::alloc::Global>(move _12) -> [return: bb6, unwind: bb10]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[String]>) -> Vec<String> {slice::<impl [String]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb6: {
        _3 = Vec::<Vec<String>>::push(move _4, move _11) -> [return: bb7, unwind: bb10]; // scope 0 at ui/let-else/let-else-drop-order.rs:39:9: 39:54
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:39:29: 39:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Vec<String>>, Vec<String>) {Vec::<Vec<String>>::push}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_7) -> [return: bb8, unwind: bb11]; // scope 0 at ui/let-else/let-else-drop-order.rs:39:54: 39:55
    }

    bb8: {
        drop(_2) -> bb9;                 // scope 0 at ui/let-else/let-else-drop-order.rs:40:5: 40:6
    }

    bb9: {
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:40:6: 40:6
    }

    bb10 (cleanup): {
        drop(_7) -> bb11;                // scope 0 at ui/let-else/let-else-drop-order.rs:39:54: 39:55
    }

    bb11 (cleanup): {
        drop(_2) -> bb12;                // scope 0 at ui/let-else/let-else-drop-order.rs:40:5: 40:6
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-drop-order.rs:38:5: 40:6
    }

    bb13 (cleanup): {
        _20 = alloc::alloc::box_free::<[String; 1], std::alloc::Global>(move (_17.0: std::ptr::Unique<[std::string::String; 1]>), move (_17.1: std::alloc::Global)) -> bb10; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[String; 1]>, std::alloc::Global) {alloc::alloc::box_free::<[String; 1], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::push(_1: &DropAccountant, _2: impl ToString) -> () {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:41:13: 41:18
    debug s => _2;                       // in scope 0 at ui/let-else/let-else-drop-order.rs:41:20: 41:21
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-drop-order.rs:41:38: 41:38
    let _3: std::string::String;         // in scope 0 at ui/let-else/let-else-drop-order.rs:42:13: 42:14
    let mut _4: &impl ToString;          // in scope 0 at ui/let-else/let-else-drop-order.rs:42:17: 42:30
    let mut _6: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:43:28: 43:47
    let _7: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:43:28: 43:47
    let mut _8: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:43:28: 43:47
    let _9: ();                          // in scope 0 at ui/let-else/let-else-drop-order.rs:44:9: 44:45
    let mut _10: &mut std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:44:9: 44:45
    let mut _11: &mut std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:44:9: 44:37
    let mut _12: std::option::Option<&mut std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:44:9: 44:28
    let mut _13: &mut [std::vec::Vec<std::string::String>]; // in scope 0 at ui/let-else/let-else-drop-order.rs:44:9: 44:28
    let mut _14: &mut [std::vec::Vec<std::string::String>]; // in scope 0 at ui/let-else/let-else-drop-order.rs:44:9: 44:28
    let mut _15: &mut std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:44:9: 44:28
    let mut _16: &mut std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:44:9: 44:28
    let mut _17: &mut std::cell::RefMut<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:44:9: 44:28
    let mut _18: std::string::String;    // in scope 0 at ui/let-else/let-else-drop-order.rs:44:43: 44:44
    let mut _19: bool;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:45:5: 45:6
    scope 1 {
        debug s => _3;                   // in scope 1 at ui/let-else/let-else-drop-order.rs:42:13: 42:14
        let mut _5: std::cell::RefMut<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 1 at ui/let-else/let-else-drop-order.rs:43:13: 43:25
        scope 2 {
            debug accounts => _5;        // in scope 2 at ui/let-else/let-else-drop-order.rs:43:13: 43:25
        }
    }

    bb0: {
        _19 = const false;               // scope 0 at ui/let-else/let-else-drop-order.rs:42:13: 42:14
        _4 = &_2;                        // scope 0 at ui/let-else/let-else-drop-order.rs:42:17: 42:30
        _3 = <impl ToString as ToString>::to_string(move _4) -> [return: bb1, unwind: bb12]; // scope 0 at ui/let-else/let-else-drop-order.rs:42:17: 42:30
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:42:19: 42:28
                                         // + literal: Const { ty: for<'a> fn(&'a impl ToString) -> String {<impl ToString as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _19 = const true;                // scope 0 at ui/let-else/let-else-drop-order.rs:42:29: 42:30
        _8 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>); // scope 1 at ui/let-else/let-else-drop-order.rs:43:28: 43:47
        _7 = <Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref(move _8) -> [return: bb2, unwind: bb15]; // scope 1 at ui/let-else/let-else-drop-order.rs:43:28: 43:47
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:43:28: 43:47
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<Vec<String>>>>) -> &'a <Rc<RefCell<Vec<Vec<String>>>> as Deref>::Target {<Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = _7;                         // scope 1 at ui/let-else/let-else-drop-order.rs:43:28: 43:47
        _5 = RefCell::<Vec<Vec<String>>>::borrow_mut(move _6) -> [return: bb3, unwind: bb15]; // scope 1 at ui/let-else/let-else-drop-order.rs:43:28: 43:47
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:43:35: 43:45
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<Vec<String>>>) -> RefMut<'a, Vec<Vec<String>>> {RefCell::<Vec<Vec<String>>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _17 = &mut _5;                   // scope 2 at ui/let-else/let-else-drop-order.rs:44:9: 44:28
        _16 = <RefMut<'_, Vec<Vec<String>>> as DerefMut>::deref_mut(move _17) -> [return: bb4, unwind: bb11]; // scope 2 at ui/let-else/let-else-drop-order.rs:44:9: 44:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:44:9: 44:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Vec<Vec<String>>>) -> &'a mut <RefMut<'_, Vec<Vec<String>>> as Deref>::Target {<RefMut<'_, Vec<Vec<String>>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = &mut (*_16);               // scope 2 at ui/let-else/let-else-drop-order.rs:44:9: 44:28
        _14 = <Vec<Vec<String>> as DerefMut>::deref_mut(move _15) -> [return: bb5, unwind: bb11]; // scope 2 at ui/let-else/let-else-drop-order.rs:44:9: 44:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:44:9: 44:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Vec<String>>) -> &'a mut <Vec<Vec<String>> as Deref>::Target {<Vec<Vec<String>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &mut (*_14);               // scope 2 at ui/let-else/let-else-drop-order.rs:44:9: 44:28
        _12 = core::slice::<impl [Vec<String>]>::last_mut(move _13) -> [return: bb6, unwind: bb11]; // scope 2 at ui/let-else/let-else-drop-order.rs:44:9: 44:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:44:18: 44:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut [Vec<String>]) -> Option<&'a mut Vec<String>> {core::slice::<impl [Vec<String>]>::last_mut}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = Option::<&mut Vec<String>>::unwrap(move _12) -> [return: bb7, unwind: bb11]; // scope 2 at ui/let-else/let-else-drop-order.rs:44:9: 44:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:44:29: 44:35
                                         // + literal: Const { ty: fn(Option<&mut Vec<String>>) -> &mut Vec<String> {Option::<&mut Vec<String>>::unwrap}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = &mut (*_11);               // scope 2 at ui/let-else/let-else-drop-order.rs:44:9: 44:45
        _19 = const false;               // scope 2 at ui/let-else/let-else-drop-order.rs:44:43: 44:44
        _18 = move _3;                   // scope 2 at ui/let-else/let-else-drop-order.rs:44:43: 44:44
        _9 = Vec::<String>::push(move _10, move _18) -> [return: bb8, unwind: bb11]; // scope 2 at ui/let-else/let-else-drop-order.rs:44:9: 44:45
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:44:38: 44:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<String>, String) {Vec::<String>::push}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_5) -> [return: bb9, unwind: bb15]; // scope 1 at ui/let-else/let-else-drop-order.rs:45:5: 45:6
    }

    bb9: {
        _19 = const false;               // scope 0 at ui/let-else/let-else-drop-order.rs:45:5: 45:6
        drop(_2) -> bb10;                // scope 0 at ui/let-else/let-else-drop-order.rs:45:5: 45:6
    }

    bb10: {
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:45:6: 45:6
    }

    bb11 (cleanup): {
        drop(_5) -> bb15;                // scope 1 at ui/let-else/let-else-drop-order.rs:45:5: 45:6
    }

    bb12 (cleanup): {
        drop(_2) -> bb13;                // scope 0 at ui/let-else/let-else-drop-order.rs:45:5: 45:6
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-drop-order.rs:41:5: 45:6
    }

    bb14 (cleanup): {
        drop(_3) -> bb12;                // scope 0 at ui/let-else/let-else-drop-order.rs:45:5: 45:6
    }

    bb15 (cleanup): {
        switchInt(_19) -> [0: bb12, otherwise: bb14]; // scope 0 at ui/let-else/let-else-drop-order.rs:45:5: 45:6
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table(_1: &DropAccountant) -> () {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:46:20: 46:25
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-drop-order.rs:46:27: 46:27
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:9: 81:59
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _4: &[&str];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _5: &[&str; 1];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let _6: &[&str; 1];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let _10: std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:49:13: 49:21
    let mut _11: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:49:24: 49:39
    let _12: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:49:24: 49:39
    let mut _13: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:49:24: 49:39
    let _15: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:50:28: 50:56
    let mut _16: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:50:28: 50:36
    let _17: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:50:28: 50:36
    let mut _18: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:50:28: 50:36
    let mut _19: usize;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:50:37: 50:55
    let mut _20: usize;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:50:37: 50:51
    let mut _21: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:50:37: 50:51
    let _22: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:50:37: 50:51
    let mut _23: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:50:37: 50:51
    let mut _24: (usize, bool);          // in scope 0 at ui/let-else/let-else-drop-order.rs:50:37: 50:55
    let _26: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:51:21: 51:49
    let mut _27: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:51:21: 51:29
    let _28: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:51:21: 51:29
    let mut _29: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:51:21: 51:29
    let mut _30: usize;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:51:30: 51:48
    let mut _31: usize;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:51:30: 51:44
    let mut _32: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:51:30: 51:44
    let _33: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:51:30: 51:44
    let mut _34: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:51:30: 51:44
    let mut _35: (usize, bool);          // in scope 0 at ui/let-else/let-else-drop-order.rs:51:30: 51:48
    let mut _37: &[std::string::String]; // in scope 0 at ui/let-else/let-else-drop-order.rs:52:42: 52:53
    let _38: &[std::string::String];     // in scope 0 at ui/let-else/let-else-drop-order.rs:52:42: 52:53
    let mut _39: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:52:42: 52:53
    let mut _41: &[std::string::String]; // in scope 0 at ui/let-else/let-else-drop-order.rs:53:35: 53:39
    let _42: &[std::string::String];     // in scope 0 at ui/let-else/let-else-drop-order.rs:53:35: 53:39
    let mut _43: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:53:35: 53:39
    let mut _45: std::option::Option<usize>; // in scope 0 at ui/let-else/let-else-drop-order.rs:65:23: 65:58
    let mut _46: std::iter::Map<std::slice::Iter<'_, &str>, [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]>; // in scope 0 at ui/let-else/let-else-drop-order.rs:65:23: 65:52
    let mut _47: std::slice::Iter<'_, &str>; // in scope 0 at ui/let-else/let-else-drop-order.rs:65:23: 65:35
    let mut _48: &[&str];                // in scope 0 at ui/let-else/let-else-drop-order.rs:65:23: 65:35
    let _49: &[&str];                    // in scope 0 at ui/let-else/let-else-drop-order.rs:65:23: 65:28
    let mut _50: [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]; // in scope 0 at ui/let-else/let-else-drop-order.rs:65:40: 65:51
    let mut _52: std::option::Option<usize>; // in scope 0 at ui/let-else/let-else-drop-order.rs:66:30: 66:71
    let mut _53: std::iter::Map<std::slice::Iter<'_, std::string::String>, [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]>; // in scope 0 at ui/let-else/let-else-drop-order.rs:66:30: 66:65
    let mut _54: std::slice::Iter<'_, std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:66:30: 66:48
    let mut _55: &[std::string::String]; // in scope 0 at ui/let-else/let-else-drop-order.rs:66:30: 66:48
    let _56: &[std::string::String];     // in scope 0 at ui/let-else/let-else-drop-order.rs:66:30: 66:48
    let mut _57: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:66:30: 66:48
    let mut _58: [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]; // in scope 0 at ui/let-else/let-else-drop-order.rs:66:53: 66:64
    let mut _60: std::option::Option<usize>; // in scope 0 at ui/let-else/let-else-drop-order.rs:67:28: 67:62
    let mut _61: std::iter::Map<std::slice::Iter<'_, std::string::String>, [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]>; // in scope 0 at ui/let-else/let-else-drop-order.rs:67:28: 67:56
    let mut _62: std::slice::Iter<'_, std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:67:28: 67:39
    let mut _63: &[std::string::String]; // in scope 0 at ui/let-else/let-else-drop-order.rs:67:28: 67:39
    let _64: &[std::string::String];     // in scope 0 at ui/let-else/let-else-drop-order.rs:67:28: 67:39
    let mut _65: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:67:28: 67:39
    let mut _66: [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]; // in scope 0 at ui/let-else/let-else-drop-order.rs:67:44: 67:55
    let _67: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _68: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _69: &[&str];                // in scope 0 at ui/let-else/let-else-drop-order.rs:70:13: 70:76
    let mut _70: &[&str; 4];             // in scope 0 at ui/let-else/let-else-drop-order.rs:70:13: 70:76
    let _71: &[&str; 4];                 // in scope 0 at ui/let-else/let-else-drop-order.rs:70:13: 70:76
    let mut _72: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _73: &[core::fmt::ArgumentV1<'_>; 6]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _74: &[core::fmt::ArgumentV1<'_>; 6]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _75: [core::fmt::ArgumentV1<'_>; 6]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _76: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:71:13: 71:24
    let mut _77: &&str;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:71:13: 71:24
    let _78: &&str;                      // in scope 0 at ui/let-else/let-else-drop-order.rs:71:13: 71:24
    let mut _79: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:71:26: 71:40
    let mut _80: &std::string::String;   // in scope 0 at ui/let-else/let-else-drop-order.rs:71:26: 71:40
    let _81: &std::string::String;       // in scope 0 at ui/let-else/let-else-drop-order.rs:71:26: 71:40
    let _82: &std::string::String;       // in scope 0 at ui/let-else/let-else-drop-order.rs:71:26: 71:40
    let mut _83: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:71:26: 71:37
    let mut _84: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:71:42: 71:49
    let mut _85: &std::string::String;   // in scope 0 at ui/let-else/let-else-drop-order.rs:71:42: 71:49
    let _86: &std::string::String;       // in scope 0 at ui/let-else/let-else-drop-order.rs:71:42: 71:49
    let _87: &std::string::String;       // in scope 0 at ui/let-else/let-else-drop-order.rs:71:42: 71:49
    let mut _88: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:71:42: 71:46
    let mut _89: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:70:20: 70:27
    let mut _90: &usize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:70:20: 70:27
    let _91: &usize;                     // in scope 0 at ui/let-else/let-else-drop-order.rs:70:20: 70:27
    let mut _92: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:70:36: 70:50
    let mut _93: &usize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:70:36: 70:50
    let _94: &usize;                     // in scope 0 at ui/let-else/let-else-drop-order.rs:70:36: 70:50
    let mut _95: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:70:59: 70:71
    let mut _96: &usize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:70:59: 70:71
    let _97: &usize;                     // in scope 0 at ui/let-else/let-else-drop-order.rs:70:59: 70:71
    let mut _98: &[std::fmt::rt::v1::Argument]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _99: &[std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _100: &[std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _101: [std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _102: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _103: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _104: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _105: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _106: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _107: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _108: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _109: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _110: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _111: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _112: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _113: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _114: core::fmt::UnsafeArg;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _115: ();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _116: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _117: &[&str];               // in scope 0 at ui/let-else/let-else-drop-order.rs:73:18: 73:81
    let mut _118: &[&str; 4];            // in scope 0 at ui/let-else/let-else-drop-order.rs:73:18: 73:81
    let _119: &[&str; 4];                // in scope 0 at ui/let-else/let-else-drop-order.rs:73:18: 73:81
    let mut _120: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _121: &[core::fmt::ArgumentV1<'_>; 6]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _122: &[core::fmt::ArgumentV1<'_>; 6]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _123: [core::fmt::ArgumentV1<'_>; 6]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _124: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:73:83: 73:85
    let mut _125: &&str;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:73:83: 73:85
    let _126: &&str;                     // in scope 0 at ui/let-else/let-else-drop-order.rs:73:83: 73:85
    let mut _127: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:73:87: 73:89
    let mut _128: &&str;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:73:87: 73:89
    let _129: &&str;                     // in scope 0 at ui/let-else/let-else-drop-order.rs:73:87: 73:89
    let mut _130: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:73:91: 73:93
    let mut _131: &&str;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:73:91: 73:93
    let _132: &&str;                     // in scope 0 at ui/let-else/let-else-drop-order.rs:73:91: 73:93
    let mut _133: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:73:25: 73:32
    let mut _134: &usize;                // in scope 0 at ui/let-else/let-else-drop-order.rs:73:25: 73:32
    let _135: &usize;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:73:25: 73:32
    let mut _136: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:73:41: 73:55
    let mut _137: &usize;                // in scope 0 at ui/let-else/let-else-drop-order.rs:73:41: 73:55
    let _138: &usize;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:73:41: 73:55
    let mut _139: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:73:64: 73:76
    let mut _140: &usize;                // in scope 0 at ui/let-else/let-else-drop-order.rs:73:64: 73:76
    let _141: &usize;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:73:64: 73:76
    let mut _142: &[std::fmt::rt::v1::Argument]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _143: &[std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _144: &[std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _145: [std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _146: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _147: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _148: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _149: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _150: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _151: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _152: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _153: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _154: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _155: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _156: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _157: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _158: core::fmt::UnsafeArg;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _159: std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, std::string::String>>, std::slice::Iter<'_, std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:76:13: 76:76
    let mut _160: std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, std::string::String>>, std::slice::Iter<'_, std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:76:13: 76:76
    let mut _161: std::iter::Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:76:13: 76:54
    let mut _162: std::slice::Iter<'_, &str>; // in scope 0 at ui/let-else/let-else-drop-order.rs:76:13: 76:25
    let mut _163: &[&str];               // in scope 0 at ui/let-else/let-else-drop-order.rs:76:13: 76:25
    let _164: &[&str];                   // in scope 0 at ui/let-else/let-else-drop-order.rs:76:13: 76:18
    let mut _165: std::slice::Iter<'_, std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:76:30: 76:53
    let mut _166: &[std::string::String]; // in scope 0 at ui/let-else/let-else-drop-order.rs:76:30: 76:53
    let _167: &[std::string::String];    // in scope 0 at ui/let-else/let-else-drop-order.rs:76:30: 76:46
    let mut _168: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:76:30: 76:41
    let mut _169: std::ops::RangeFrom<usize>; // in scope 0 at ui/let-else/let-else-drop-order.rs:76:42: 76:45
    let mut _170: std::slice::Iter<'_, std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:76:59: 76:75
    let mut _171: &[std::string::String]; // in scope 0 at ui/let-else/let-else-drop-order.rs:76:59: 76:75
    let _172: &[std::string::String];    // in scope 0 at ui/let-else/let-else-drop-order.rs:76:59: 76:68
    let mut _173: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:76:59: 76:63
    let mut _174: std::ops::RangeFrom<usize>; // in scope 0 at ui/let-else/let-else-drop-order.rs:76:64: 76:67
    let mut _176: std::option::Option<((&&str, &std::string::String), &std::string::String)>; // in scope 0 at ui/let-else/let-else-drop-order.rs:76:13: 76:76
    let mut _177: &mut std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, std::string::String>>, std::slice::Iter<'_, std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:76:13: 76:76
    let mut _178: &mut std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, std::string::String>>, std::slice::Iter<'_, std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:76:13: 76:76
    let mut _179: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:75:9: 82:10
    let _183: ();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _184: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _185: &[&str];               // in scope 0 at ui/let-else/let-else-drop-order.rs:79:17: 79:80
    let mut _186: &[&str; 4];            // in scope 0 at ui/let-else/let-else-drop-order.rs:79:17: 79:80
    let _187: &[&str; 4];                // in scope 0 at ui/let-else/let-else-drop-order.rs:79:17: 79:80
    let mut _188: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _189: &[core::fmt::ArgumentV1<'_>; 6]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _190: &[core::fmt::ArgumentV1<'_>; 6]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _191: [core::fmt::ArgumentV1<'_>; 6]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _192: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:80:17: 80:18
    let mut _193: &&&str;                // in scope 0 at ui/let-else/let-else-drop-order.rs:80:17: 80:18
    let _194: &&&str;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:80:17: 80:18
    let mut _195: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:80:20: 80:28
    let mut _196: &&std::string::String; // in scope 0 at ui/let-else/let-else-drop-order.rs:80:20: 80:28
    let _197: &&std::string::String;     // in scope 0 at ui/let-else/let-else-drop-order.rs:80:20: 80:28
    let mut _198: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:80:30: 80:36
    let mut _199: &&std::string::String; // in scope 0 at ui/let-else/let-else-drop-order.rs:80:30: 80:36
    let _200: &&std::string::String;     // in scope 0 at ui/let-else/let-else-drop-order.rs:80:30: 80:36
    let mut _201: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:79:24: 79:31
    let mut _202: &usize;                // in scope 0 at ui/let-else/let-else-drop-order.rs:79:24: 79:31
    let _203: &usize;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:79:24: 79:31
    let mut _204: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:79:40: 79:54
    let mut _205: &usize;                // in scope 0 at ui/let-else/let-else-drop-order.rs:79:40: 79:54
    let _206: &usize;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:79:40: 79:54
    let mut _207: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-drop-order.rs:79:63: 79:75
    let mut _208: &usize;                // in scope 0 at ui/let-else/let-else-drop-order.rs:79:63: 79:75
    let _209: &usize;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:79:63: 79:75
    let mut _210: &[std::fmt::rt::v1::Argument]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _211: &[std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _212: &[std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _213: [std::fmt::rt::v1::Argument; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _214: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _215: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _216: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _217: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _218: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _219: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _220: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _221: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _222: std::fmt::rt::v1::Argument; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _223: std::fmt::rt::v1::Alignment; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _224: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _225: std::fmt::rt::v1::Count; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _226: core::fmt::UnsafeArg;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _234: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _235: &[&str; 1];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    scope 1 {
        debug accounts => _10;           // in scope 1 at ui/let-else/let-else-drop-order.rs:49:13: 49:21
        let _14: &std::vec::Vec<std::string::String>; // in scope 1 at ui/let-else/let-else-drop-order.rs:50:13: 50:24
        scope 2 {
            debug before_last => _14;    // in scope 2 at ui/let-else/let-else-drop-order.rs:50:13: 50:24
            let _25: &std::vec::Vec<std::string::String>; // in scope 2 at ui/let-else/let-else-drop-order.rs:51:13: 51:17
            scope 3 {
                debug last => _25;       // in scope 3 at ui/let-else/let-else-drop-order.rs:51:13: 51:17
                let _36: std::vec::Vec<std::string::String>; // in scope 3 at ui/let-else/let-else-drop-order.rs:52:13: 52:24
                scope 4 {
                    debug before_last => _36; // in scope 4 at ui/let-else/let-else-drop-order.rs:52:13: 52:24
                    let _40: std::vec::Vec<std::string::String>; // in scope 4 at ui/let-else/let-else-drop-order.rs:53:13: 53:17
                    scope 5 {
                        debug last => _40; // in scope 5 at ui/let-else/let-else-drop-order.rs:53:13: 53:17
                        let _44: usize;  // in scope 5 at ui/let-else/let-else-drop-order.rs:65:13: 65:20
                        scope 6 {
                            debug max_len => _44; // in scope 6 at ui/let-else/let-else-drop-order.rs:65:13: 65:20
                            let _51: usize; // in scope 6 at ui/let-else/let-else-drop-order.rs:66:13: 66:27
                            scope 7 {
                                debug max_len_before => _51; // in scope 7 at ui/let-else/let-else-drop-order.rs:66:13: 66:27
                                let _59: usize; // in scope 7 at ui/let-else/let-else-drop-order.rs:67:13: 67:25
                                scope 8 {
                                    debug max_len_last => _59; // in scope 8 at ui/let-else/let-else-drop-order.rs:67:13: 67:25
                                    let mut _175: std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, std::string::String>>, std::slice::Iter<'_, std::string::String>>; // in scope 8 at ui/let-else/let-else-drop-order.rs:76:13: 76:76
                                    let mut _228: &&str; // in scope 8 at ui/let-else/let-else-drop-order.rs:73:91: 73:93
                                    let mut _229: &&str; // in scope 8 at ui/let-else/let-else-drop-order.rs:73:87: 73:89
                                    let mut _230: &&str; // in scope 8 at ui/let-else/let-else-drop-order.rs:73:83: 73:85
                                    let mut _231: &[&str; 4]; // in scope 8 at ui/let-else/let-else-drop-order.rs:73:18: 73:81
                                    let mut _232: &&str; // in scope 8 at ui/let-else/let-else-drop-order.rs:71:13: 71:24
                                    let mut _233: &[&str; 4]; // in scope 8 at ui/let-else/let-else-drop-order.rs:70:13: 70:76
                                    scope 9 {
                                    }
                                    scope 10 {
                                    }
                                    scope 11 {
                                        debug iter => _175; // in scope 11 at ui/let-else/let-else-drop-order.rs:76:13: 76:76
                                        let _180: &&str; // in scope 11 at ui/let-else/let-else-drop-order.rs:75:15: 75:16
                                        let _181: &std::string::String; // in scope 11 at ui/let-else/let-else-drop-order.rs:75:18: 75:26
                                        let _182: &std::string::String; // in scope 11 at ui/let-else/let-else-drop-order.rs:75:29: 75:35
                                        scope 12 {
                                            debug l => _180; // in scope 12 at ui/let-else/let-else-drop-order.rs:75:15: 75:16
                                            debug l_before => _181; // in scope 12 at ui/let-else/let-else-drop-order.rs:75:18: 75:26
                                            debug l_last => _182; // in scope 12 at ui/let-else/let-else-drop-order.rs:75:29: 75:35
                                            let mut _227: &[&str; 4]; // in scope 12 at ui/let-else/let-else-drop-order.rs:79:17: 79:80
                                            scope 13 {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _235 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(DropAccountant::print_table, [], Some(promoted[8])) }
        _6 = _235;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        _5 = _6;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        _234 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(DropAccountant::print_table, [], Some(promoted[7])) }
        _9 = _234;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _print(move _3) -> bb2;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:9: 81:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:9: 81:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>); // scope 0 at ui/let-else/let-else-drop-order.rs:49:24: 49:39
        _12 = <Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref(move _13) -> bb3; // scope 0 at ui/let-else/let-else-drop-order.rs:49:24: 49:39
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:49:24: 49:39
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<Vec<String>>>>) -> &'a <Rc<RefCell<Vec<Vec<String>>>> as Deref>::Target {<Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = _12;                       // scope 0 at ui/let-else/let-else-drop-order.rs:49:24: 49:39
        _10 = RefCell::<Vec<Vec<String>>>::borrow(move _11) -> bb4; // scope 0 at ui/let-else/let-else-drop-order.rs:49:24: 49:39
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:49:31: 49:37
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<Vec<String>>>) -> Ref<'a, Vec<Vec<String>>> {RefCell::<Vec<Vec<String>>>::borrow}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = &_10;                      // scope 1 at ui/let-else/let-else-drop-order.rs:50:28: 50:36
        _17 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _18) -> [return: bb5, unwind: bb97]; // scope 1 at ui/let-else/let-else-drop-order.rs:50:28: 50:36
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:50:28: 50:36
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<Vec<String>>>) -> &'a <Ref<'_, Vec<Vec<String>>> as Deref>::Target {<Ref<'_, Vec<Vec<String>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = _17;                       // scope 1 at ui/let-else/let-else-drop-order.rs:50:28: 50:36
        _23 = &_10;                      // scope 1 at ui/let-else/let-else-drop-order.rs:50:37: 50:51
        _22 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _23) -> [return: bb6, unwind: bb97]; // scope 1 at ui/let-else/let-else-drop-order.rs:50:37: 50:51
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:50:37: 50:51
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<Vec<String>>>) -> &'a <Ref<'_, Vec<Vec<String>>> as Deref>::Target {<Ref<'_, Vec<Vec<String>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _21 = _22;                       // scope 1 at ui/let-else/let-else-drop-order.rs:50:37: 50:51
        _20 = Vec::<Vec<String>>::len(move _21) -> [return: bb7, unwind: bb97]; // scope 1 at ui/let-else/let-else-drop-order.rs:50:37: 50:51
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:50:46: 50:49
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Vec<String>>) -> usize {Vec::<Vec<String>>::len}, val: Value(<ZST>) }
    }

    bb7: {
        _24 = CheckedSub(_20, const 2_usize); // scope 1 at ui/let-else/let-else-drop-order.rs:50:37: 50:55
        assert(!move (_24.1: bool), "attempt to compute `{} - {}`, which would overflow", move _20, const 2_usize) -> [success: bb8, unwind: bb97]; // scope 1 at ui/let-else/let-else-drop-order.rs:50:37: 50:55
    }

    bb8: {
        _19 = move (_24.0: usize);       // scope 1 at ui/let-else/let-else-drop-order.rs:50:37: 50:55
        _15 = <Vec<Vec<String>> as Index<usize>>::index(move _16, move _19) -> [return: bb9, unwind: bb97]; // scope 1 at ui/let-else/let-else-drop-order.rs:50:28: 50:56
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:50:28: 50:56
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Vec<String>>, usize) -> &'a <Vec<Vec<String>> as Index<usize>>::Output {<Vec<Vec<String>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb9: {
        _14 = _15;                       // scope 1 at ui/let-else/let-else-drop-order.rs:50:27: 50:56
        _29 = &_10;                      // scope 2 at ui/let-else/let-else-drop-order.rs:51:21: 51:29
        _28 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _29) -> [return: bb10, unwind: bb97]; // scope 2 at ui/let-else/let-else-drop-order.rs:51:21: 51:29
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:51:21: 51:29
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<Vec<String>>>) -> &'a <Ref<'_, Vec<Vec<String>>> as Deref>::Target {<Ref<'_, Vec<Vec<String>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb10: {
        _27 = _28;                       // scope 2 at ui/let-else/let-else-drop-order.rs:51:21: 51:29
        _34 = &_10;                      // scope 2 at ui/let-else/let-else-drop-order.rs:51:30: 51:44
        _33 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _34) -> [return: bb11, unwind: bb97]; // scope 2 at ui/let-else/let-else-drop-order.rs:51:30: 51:44
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:51:30: 51:44
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<Vec<String>>>) -> &'a <Ref<'_, Vec<Vec<String>>> as Deref>::Target {<Ref<'_, Vec<Vec<String>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb11: {
        _32 = _33;                       // scope 2 at ui/let-else/let-else-drop-order.rs:51:30: 51:44
        _31 = Vec::<Vec<String>>::len(move _32) -> [return: bb12, unwind: bb97]; // scope 2 at ui/let-else/let-else-drop-order.rs:51:30: 51:44
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:51:39: 51:42
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Vec<String>>) -> usize {Vec::<Vec<String>>::len}, val: Value(<ZST>) }
    }

    bb12: {
        _35 = CheckedSub(_31, const 1_usize); // scope 2 at ui/let-else/let-else-drop-order.rs:51:30: 51:48
        assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", move _31, const 1_usize) -> [success: bb13, unwind: bb97]; // scope 2 at ui/let-else/let-else-drop-order.rs:51:30: 51:48
    }

    bb13: {
        _30 = move (_35.0: usize);       // scope 2 at ui/let-else/let-else-drop-order.rs:51:30: 51:48
        _26 = <Vec<Vec<String>> as Index<usize>>::index(move _27, move _30) -> [return: bb14, unwind: bb97]; // scope 2 at ui/let-else/let-else-drop-order.rs:51:21: 51:49
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:51:21: 51:49
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Vec<String>>, usize) -> &'a <Vec<Vec<String>> as Index<usize>>::Output {<Vec<Vec<String>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb14: {
        _25 = _26;                       // scope 2 at ui/let-else/let-else-drop-order.rs:51:20: 51:49
        _39 = _14;                       // scope 3 at ui/let-else/let-else-drop-order.rs:52:42: 52:53
        _38 = <Vec<String> as Deref>::deref(move _39) -> [return: bb15, unwind: bb97]; // scope 3 at ui/let-else/let-else-drop-order.rs:52:42: 52:53
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:52:42: 52:53
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> &'a <Vec<String> as Deref>::Target {<Vec<String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb15: {
        _37 = _38;                       // scope 3 at ui/let-else/let-else-drop-order.rs:52:42: 52:53
        _36 = get_comma_list(move _37) -> [return: bb16, unwind: bb97]; // scope 3 at ui/let-else/let-else-drop-order.rs:52:27: 52:54
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:52:27: 52:41
                                         // + literal: Const { ty: for<'a> fn(&'a [String]) -> Vec<String> {get_comma_list}, val: Value(<ZST>) }
    }

    bb16: {
        _43 = _25;                       // scope 4 at ui/let-else/let-else-drop-order.rs:53:35: 53:39
        _42 = <Vec<String> as Deref>::deref(move _43) -> [return: bb17, unwind: bb96]; // scope 4 at ui/let-else/let-else-drop-order.rs:53:35: 53:39
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:53:35: 53:39
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> &'a <Vec<String> as Deref>::Target {<Vec<String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb17: {
        _41 = _42;                       // scope 4 at ui/let-else/let-else-drop-order.rs:53:35: 53:39
        _40 = get_comma_list(move _41) -> [return: bb18, unwind: bb96]; // scope 4 at ui/let-else/let-else-drop-order.rs:53:20: 53:40
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:53:20: 53:34
                                         // + literal: Const { ty: for<'a> fn(&'a [String]) -> Vec<String> {get_comma_list}, val: Value(<ZST>) }
    }

    bb18: {
        _49 = const _;                   // scope 5 at ui/let-else/let-else-drop-order.rs:65:23: 65:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:65:23: 65:28
                                         // + literal: Const { ty: &[&str], val: Unevaluated(LINES, [], None) }
        _48 = _49;                       // scope 5 at ui/let-else/let-else-drop-order.rs:65:23: 65:35
        _47 = core::slice::<impl [&str]>::iter(move _48) -> [return: bb19, unwind: bb95]; // scope 5 at ui/let-else/let-else-drop-order.rs:65:23: 65:35
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:65:29: 65:33
                                         // + literal: Const { ty: for<'a> fn(&'a [&str]) -> std::slice::Iter<'a, &str> {core::slice::<impl [&str]>::iter}, val: Value(<ZST>) }
    }

    bb19: {
        _46 = <std::slice::Iter<'_, &str> as Iterator>::map::<usize, [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]>(move _47, move _50) -> [return: bb20, unwind: bb95]; // scope 5 at ui/let-else/let-else-drop-order.rs:65:23: 65:52
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:65:36: 65:39
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, &str>, [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]) -> Map<std::slice::Iter<'_, &str>, [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]> {<std::slice::Iter<'_, &str> as Iterator>::map::<usize, [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]>}, val: Value(<ZST>) }
    }

    bb20: {
        _45 = <Map<std::slice::Iter<'_, &str>, [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]> as Iterator>::max(move _46) -> [return: bb21, unwind: bb95]; // scope 5 at ui/let-else/let-else-drop-order.rs:65:23: 65:58
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:65:53: 65:56
                                         // + literal: Const { ty: fn(Map<std::slice::Iter<'_, &str>, [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]>) -> Option<<Map<std::slice::Iter<'_, &str>, [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]> as Iterator>::Item> {<Map<std::slice::Iter<'_, &str>, [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]> as Iterator>::max}, val: Value(<ZST>) }
    }

    bb21: {
        _44 = Option::<usize>::unwrap(move _45) -> [return: bb22, unwind: bb95]; // scope 5 at ui/let-else/let-else-drop-order.rs:65:23: 65:67
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:65:59: 65:65
                                         // + literal: Const { ty: fn(Option<usize>) -> usize {Option::<usize>::unwrap}, val: Value(<ZST>) }
    }

    bb22: {
        _57 = &_36;                      // scope 6 at ui/let-else/let-else-drop-order.rs:66:30: 66:48
        _56 = <Vec<String> as Deref>::deref(move _57) -> [return: bb23, unwind: bb95]; // scope 6 at ui/let-else/let-else-drop-order.rs:66:30: 66:48
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:66:30: 66:48
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> &'a <Vec<String> as Deref>::Target {<Vec<String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb23: {
        _55 = _56;                       // scope 6 at ui/let-else/let-else-drop-order.rs:66:30: 66:48
        _54 = core::slice::<impl [String]>::iter(move _55) -> [return: bb24, unwind: bb95]; // scope 6 at ui/let-else/let-else-drop-order.rs:66:30: 66:48
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:66:42: 66:46
                                         // + literal: Const { ty: for<'a> fn(&'a [String]) -> std::slice::Iter<'a, String> {core::slice::<impl [String]>::iter}, val: Value(<ZST>) }
    }

    bb24: {
        _53 = <std::slice::Iter<'_, String> as Iterator>::map::<usize, [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]>(move _54, move _58) -> [return: bb25, unwind: bb95]; // scope 6 at ui/let-else/let-else-drop-order.rs:66:30: 66:65
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:66:49: 66:52
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]) -> Map<std::slice::Iter<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]> {<std::slice::Iter<'_, String> as Iterator>::map::<usize, [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]>}, val: Value(<ZST>) }
    }

    bb25: {
        _52 = <Map<std::slice::Iter<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]> as Iterator>::max(move _53) -> [return: bb26, unwind: bb95]; // scope 6 at ui/let-else/let-else-drop-order.rs:66:30: 66:71
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:66:66: 66:69
                                         // + literal: Const { ty: fn(Map<std::slice::Iter<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]>) -> Option<<Map<std::slice::Iter<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]> as Iterator>::Item> {<Map<std::slice::Iter<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]> as Iterator>::max}, val: Value(<ZST>) }
    }

    bb26: {
        _51 = Option::<usize>::unwrap(move _52) -> [return: bb27, unwind: bb95]; // scope 6 at ui/let-else/let-else-drop-order.rs:66:30: 66:80
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:66:72: 66:78
                                         // + literal: Const { ty: fn(Option<usize>) -> usize {Option::<usize>::unwrap}, val: Value(<ZST>) }
    }

    bb27: {
        _65 = &_40;                      // scope 7 at ui/let-else/let-else-drop-order.rs:67:28: 67:39
        _64 = <Vec<String> as Deref>::deref(move _65) -> [return: bb28, unwind: bb95]; // scope 7 at ui/let-else/let-else-drop-order.rs:67:28: 67:39
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:67:28: 67:39
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> &'a <Vec<String> as Deref>::Target {<Vec<String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb28: {
        _63 = _64;                       // scope 7 at ui/let-else/let-else-drop-order.rs:67:28: 67:39
        _62 = core::slice::<impl [String]>::iter(move _63) -> [return: bb29, unwind: bb95]; // scope 7 at ui/let-else/let-else-drop-order.rs:67:28: 67:39
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:67:33: 67:37
                                         // + literal: Const { ty: for<'a> fn(&'a [String]) -> std::slice::Iter<'a, String> {core::slice::<impl [String]>::iter}, val: Value(<ZST>) }
    }

    bb29: {
        _61 = <std::slice::Iter<'_, String> as Iterator>::map::<usize, [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]>(move _62, move _66) -> [return: bb30, unwind: bb95]; // scope 7 at ui/let-else/let-else-drop-order.rs:67:28: 67:56
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:67:40: 67:43
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]) -> Map<std::slice::Iter<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]> {<std::slice::Iter<'_, String> as Iterator>::map::<usize, [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]>}, val: Value(<ZST>) }
    }

    bb30: {
        _60 = <Map<std::slice::Iter<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]> as Iterator>::max(move _61) -> [return: bb31, unwind: bb95]; // scope 7 at ui/let-else/let-else-drop-order.rs:67:28: 67:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:67:57: 67:60
                                         // + literal: Const { ty: fn(Map<std::slice::Iter<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]>) -> Option<<Map<std::slice::Iter<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]> as Iterator>::Item> {<Map<std::slice::Iter<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]> as Iterator>::max}, val: Value(<ZST>) }
    }

    bb31: {
        _59 = Option::<usize>::unwrap(move _60) -> [return: bb32, unwind: bb95]; // scope 7 at ui/let-else/let-else-drop-order.rs:67:28: 67:71
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:67:63: 67:69
                                         // + literal: Const { ty: fn(Option<usize>) -> usize {Option::<usize>::unwrap}, val: Value(<ZST>) }
    }

    bb32: {
        _233 = const _;                  // scope 8 at ui/let-else/let-else-drop-order.rs:70:13: 70:76
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:70:13: 70:76
                                         // + literal: Const { ty: &[&str; 4], val: Unevaluated(DropAccountant::print_table, [], Some(promoted[6])) }
        _71 = _233;                      // scope 8 at ui/let-else/let-else-drop-order.rs:70:13: 70:76
        _70 = _71;                       // scope 8 at ui/let-else/let-else-drop-order.rs:70:13: 70:76
        _69 = move _70 as &[&str] (Pointer(Unsize)); // scope 8 at ui/let-else/let-else-drop-order.rs:70:13: 70:76
        _232 = const _;                  // scope 8 at ui/let-else/let-else-drop-order.rs:71:13: 71:24
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:71:13: 71:24
                                         // + literal: Const { ty: &&str, val: Unevaluated(DropAccountant::print_table, [], Some(promoted[5])) }
        _78 = _232;                      // scope 8 at ui/let-else/let-else-drop-order.rs:71:13: 71:24
        _77 = _78;                       // scope 8 at ui/let-else/let-else-drop-order.rs:71:13: 71:24
        _76 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _77) -> [return: bb33, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:71:13: 71:24
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:71:13: 71:24
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb33: {
        _83 = &_36;                      // scope 8 at ui/let-else/let-else-drop-order.rs:71:26: 71:37
        _82 = <Vec<String> as Index<usize>>::index(move _83, const 0_usize) -> [return: bb34, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:71:26: 71:40
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:71:26: 71:40
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, usize) -> &'a <Vec<String> as Index<usize>>::Output {<Vec<String> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb34: {
        _81 = _82;                       // scope 8 at ui/let-else/let-else-drop-order.rs:71:26: 71:40
        _80 = _81;                       // scope 8 at ui/let-else/let-else-drop-order.rs:71:26: 71:40
        _79 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _80) -> [return: bb35, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:71:26: 71:40
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:71:26: 71:40
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb35: {
        _88 = &_40;                      // scope 8 at ui/let-else/let-else-drop-order.rs:71:42: 71:46
        _87 = <Vec<String> as Index<usize>>::index(move _88, const 0_usize) -> [return: bb36, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:71:42: 71:49
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:71:42: 71:49
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, usize) -> &'a <Vec<String> as Index<usize>>::Output {<Vec<String> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb36: {
        _86 = _87;                       // scope 8 at ui/let-else/let-else-drop-order.rs:71:42: 71:49
        _85 = _86;                       // scope 8 at ui/let-else/let-else-drop-order.rs:71:42: 71:49
        _84 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _85) -> [return: bb37, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:71:42: 71:49
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:71:42: 71:49
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb37: {
        _91 = &_44;                      // scope 8 at ui/let-else/let-else-drop-order.rs:70:20: 70:27
        _90 = _91;                       // scope 8 at ui/let-else/let-else-drop-order.rs:70:20: 70:27
        _89 = core::fmt::ArgumentV1::<'_>::from_usize(move _90) -> [return: bb38, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:70:20: 70:27
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:70:20: 70:27
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> core::fmt::ArgumentV1<'a> {core::fmt::ArgumentV1::<'_>::from_usize}, val: Value(<ZST>) }
    }

    bb38: {
        _94 = &_51;                      // scope 8 at ui/let-else/let-else-drop-order.rs:70:36: 70:50
        _93 = _94;                       // scope 8 at ui/let-else/let-else-drop-order.rs:70:36: 70:50
        _92 = core::fmt::ArgumentV1::<'_>::from_usize(move _93) -> [return: bb39, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:70:36: 70:50
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:70:36: 70:50
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> core::fmt::ArgumentV1<'a> {core::fmt::ArgumentV1::<'_>::from_usize}, val: Value(<ZST>) }
    }

    bb39: {
        _97 = &_59;                      // scope 8 at ui/let-else/let-else-drop-order.rs:70:59: 70:71
        _96 = _97;                       // scope 8 at ui/let-else/let-else-drop-order.rs:70:59: 70:71
        _95 = core::fmt::ArgumentV1::<'_>::from_usize(move _96) -> [return: bb40, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:70:59: 70:71
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:70:59: 70:71
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> core::fmt::ArgumentV1<'a> {core::fmt::ArgumentV1::<'_>::from_usize}, val: Value(<ZST>) }
    }

    bb40: {
        _75 = [move _76, move _79, move _84, move _89, move _92, move _95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _74 = &_75;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _73 = _74;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _72 = move _73 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _103 = const std::fmt::rt::v1::Alignment::Left; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x00)) }
        _104 = Implied;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _105 = Param(const 3_usize) -> [return: bb41, unwind: bb95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize) -> Count {Param}, val: Value(<ZST>) }
    }

    bb41: {
        _102 = Argument::new(const 0_usize, const ' ', move _103, const 0_u32, move _104, move _105) -> [return: bb42, unwind: bb95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb42: {
        _107 = const std::fmt::rt::v1::Alignment::Left; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x00)) }
        _108 = Implied;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _109 = Param(const 4_usize) -> [return: bb43, unwind: bb95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize) -> Count {Param}, val: Value(<ZST>) }
    }

    bb43: {
        _106 = Argument::new(const 1_usize, const ' ', move _107, const 0_u32, move _108, move _109) -> [return: bb44, unwind: bb95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb44: {
        _111 = const std::fmt::rt::v1::Alignment::Left; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x00)) }
        _112 = Implied;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _113 = Param(const 5_usize) -> [return: bb45, unwind: bb95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize) -> Count {Param}, val: Value(<ZST>) }
    }

    bb45: {
        _110 = Argument::new(const 2_usize, const ' ', move _111, const 0_u32, move _112, move _113) -> [return: bb46, unwind: bb95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb46: {
        _101 = [move _102, move _106, move _110]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _100 = &_101;                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _99 = _100;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _98 = move _99 as &[std::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _114 = core::fmt::UnsafeArg::new() -> [return: bb47, unwind: bb95]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: unsafe fn() -> core::fmt::UnsafeArg {core::fmt::UnsafeArg::new}, val: Value(<ZST>) }
    }

    bb47: {
        _68 = Arguments::<'_>::new_v1_formatted(move _69, move _72, move _98, move _114) -> [return: bb48, unwind: bb95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>], &[Argument], core::fmt::UnsafeArg) -> Arguments<'_> {Arguments::<'_>::new_v1_formatted}, val: Value(<ZST>) }
    }

    bb48: {
        _67 = _print(move _68) -> [return: bb49, unwind: bb95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb49: {
        _231 = const _;                  // scope 8 at ui/let-else/let-else-drop-order.rs:73:18: 73:81
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:18: 73:81
                                         // + literal: Const { ty: &[&str; 4], val: Unevaluated(DropAccountant::print_table, [], Some(promoted[4])) }
        _119 = _231;                     // scope 8 at ui/let-else/let-else-drop-order.rs:73:18: 73:81
        _118 = _119;                     // scope 8 at ui/let-else/let-else-drop-order.rs:73:18: 73:81
        _117 = move _118 as &[&str] (Pointer(Unsize)); // scope 8 at ui/let-else/let-else-drop-order.rs:73:18: 73:81
        _230 = const _;                  // scope 8 at ui/let-else/let-else-drop-order.rs:73:83: 73:85
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:83: 73:85
                                         // + literal: Const { ty: &&str, val: Unevaluated(DropAccountant::print_table, [], Some(promoted[3])) }
        _126 = _230;                     // scope 8 at ui/let-else/let-else-drop-order.rs:73:83: 73:85
        _125 = _126;                     // scope 8 at ui/let-else/let-else-drop-order.rs:73:83: 73:85
        _124 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _125) -> [return: bb50, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:73:83: 73:85
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:83: 73:85
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb50: {
        _229 = const _;                  // scope 8 at ui/let-else/let-else-drop-order.rs:73:87: 73:89
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:87: 73:89
                                         // + literal: Const { ty: &&str, val: Unevaluated(DropAccountant::print_table, [], Some(promoted[2])) }
        _129 = _229;                     // scope 8 at ui/let-else/let-else-drop-order.rs:73:87: 73:89
        _128 = _129;                     // scope 8 at ui/let-else/let-else-drop-order.rs:73:87: 73:89
        _127 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _128) -> [return: bb51, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:73:87: 73:89
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:87: 73:89
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb51: {
        _228 = const _;                  // scope 8 at ui/let-else/let-else-drop-order.rs:73:91: 73:93
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:91: 73:93
                                         // + literal: Const { ty: &&str, val: Unevaluated(DropAccountant::print_table, [], Some(promoted[1])) }
        _132 = _228;                     // scope 8 at ui/let-else/let-else-drop-order.rs:73:91: 73:93
        _131 = _132;                     // scope 8 at ui/let-else/let-else-drop-order.rs:73:91: 73:93
        _130 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _131) -> [return: bb52, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:73:91: 73:93
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:91: 73:93
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb52: {
        _135 = &_44;                     // scope 8 at ui/let-else/let-else-drop-order.rs:73:25: 73:32
        _134 = _135;                     // scope 8 at ui/let-else/let-else-drop-order.rs:73:25: 73:32
        _133 = core::fmt::ArgumentV1::<'_>::from_usize(move _134) -> [return: bb53, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:73:25: 73:32
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:25: 73:32
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> core::fmt::ArgumentV1<'a> {core::fmt::ArgumentV1::<'_>::from_usize}, val: Value(<ZST>) }
    }

    bb53: {
        _138 = &_51;                     // scope 8 at ui/let-else/let-else-drop-order.rs:73:41: 73:55
        _137 = _138;                     // scope 8 at ui/let-else/let-else-drop-order.rs:73:41: 73:55
        _136 = core::fmt::ArgumentV1::<'_>::from_usize(move _137) -> [return: bb54, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:73:41: 73:55
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:41: 73:55
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> core::fmt::ArgumentV1<'a> {core::fmt::ArgumentV1::<'_>::from_usize}, val: Value(<ZST>) }
    }

    bb54: {
        _141 = &_59;                     // scope 8 at ui/let-else/let-else-drop-order.rs:73:64: 73:76
        _140 = _141;                     // scope 8 at ui/let-else/let-else-drop-order.rs:73:64: 73:76
        _139 = core::fmt::ArgumentV1::<'_>::from_usize(move _140) -> [return: bb55, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:73:64: 73:76
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:64: 73:76
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> core::fmt::ArgumentV1<'a> {core::fmt::ArgumentV1::<'_>::from_usize}, val: Value(<ZST>) }
    }

    bb55: {
        _123 = [move _124, move _127, move _130, move _133, move _136, move _139]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _122 = &_123;                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _121 = _122;                     // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _120 = move _121 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _147 = const std::fmt::rt::v1::Alignment::Left; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x00)) }
        _148 = Implied;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _149 = Param(const 3_usize) -> [return: bb56, unwind: bb95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize) -> Count {Param}, val: Value(<ZST>) }
    }

    bb56: {
        _146 = Argument::new(const 0_usize, const '-', move _147, const 0_u32, move _148, move _149) -> [return: bb57, unwind: bb95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb57: {
        _151 = const std::fmt::rt::v1::Alignment::Left; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x00)) }
        _152 = Implied;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _153 = Param(const 4_usize) -> [return: bb58, unwind: bb95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize) -> Count {Param}, val: Value(<ZST>) }
    }

    bb58: {
        _150 = Argument::new(const 1_usize, const '-', move _151, const 0_u32, move _152, move _153) -> [return: bb59, unwind: bb95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb59: {
        _155 = const std::fmt::rt::v1::Alignment::Left; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x00)) }
        _156 = Implied;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _157 = Param(const 5_usize) -> [return: bb60, unwind: bb95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize) -> Count {Param}, val: Value(<ZST>) }
    }

    bb60: {
        _154 = Argument::new(const 2_usize, const '-', move _155, const 0_u32, move _156, move _157) -> [return: bb61, unwind: bb95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb61: {
        _145 = [move _146, move _150, move _154]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _144 = &_145;                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _143 = _144;                     // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _142 = move _143 as &[std::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _158 = core::fmt::UnsafeArg::new() -> [return: bb62, unwind: bb95]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: unsafe fn() -> core::fmt::UnsafeArg {core::fmt::UnsafeArg::new}, val: Value(<ZST>) }
    }

    bb62: {
        _116 = Arguments::<'_>::new_v1_formatted(move _117, move _120, move _142, move _158) -> [return: bb63, unwind: bb95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>], &[Argument], core::fmt::UnsafeArg) -> Arguments<'_> {Arguments::<'_>::new_v1_formatted}, val: Value(<ZST>) }
    }

    bb63: {
        _115 = _print(move _116) -> [return: bb64, unwind: bb95]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb64: {
        _164 = const _;                  // scope 8 at ui/let-else/let-else-drop-order.rs:76:13: 76:18
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:76:13: 76:18
                                         // + literal: Const { ty: &[&str], val: Unevaluated(LINES, [], None) }
        _163 = _164;                     // scope 8 at ui/let-else/let-else-drop-order.rs:76:13: 76:25
        _162 = core::slice::<impl [&str]>::iter(move _163) -> [return: bb65, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:76:13: 76:25
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:76:19: 76:23
                                         // + literal: Const { ty: for<'a> fn(&'a [&str]) -> std::slice::Iter<'a, &str> {core::slice::<impl [&str]>::iter}, val: Value(<ZST>) }
    }

    bb65: {
        _168 = &_36;                     // scope 8 at ui/let-else/let-else-drop-order.rs:76:30: 76:41
        _169 = const RangeFrom::<usize> {{ start: 1_usize }}; // scope 8 at ui/let-else/let-else-drop-order.rs:76:42: 76:45
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:76:42: 76:45
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000001)) }
        _167 = <Vec<String> as Index<RangeFrom<usize>>>::index(move _168, move _169) -> [return: bb66, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:76:30: 76:46
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:76:30: 76:46
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, RangeFrom<usize>) -> &'a <Vec<String> as Index<RangeFrom<usize>>>::Output {<Vec<String> as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb66: {
        _166 = _167;                     // scope 8 at ui/let-else/let-else-drop-order.rs:76:30: 76:53
        _165 = core::slice::<impl [String]>::iter(move _166) -> [return: bb67, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:76:30: 76:53
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:76:47: 76:51
                                         // + literal: Const { ty: for<'a> fn(&'a [String]) -> std::slice::Iter<'a, String> {core::slice::<impl [String]>::iter}, val: Value(<ZST>) }
    }

    bb67: {
        _161 = <std::slice::Iter<'_, &str> as Iterator>::zip::<std::slice::Iter<'_, String>>(move _162, move _165) -> [return: bb68, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:76:13: 76:54
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:76:26: 76:29
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>) -> Zip<std::slice::Iter<'_, &str>, <std::slice::Iter<'_, String> as IntoIterator>::IntoIter> {<std::slice::Iter<'_, &str> as Iterator>::zip::<std::slice::Iter<'_, String>>}, val: Value(<ZST>) }
    }

    bb68: {
        _173 = &_40;                     // scope 8 at ui/let-else/let-else-drop-order.rs:76:59: 76:63
        _174 = const RangeFrom::<usize> {{ start: 1_usize }}; // scope 8 at ui/let-else/let-else-drop-order.rs:76:64: 76:67
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:76:64: 76:67
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000001)) }
        _172 = <Vec<String> as Index<RangeFrom<usize>>>::index(move _173, move _174) -> [return: bb69, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:76:59: 76:68
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:76:59: 76:68
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, RangeFrom<usize>) -> &'a <Vec<String> as Index<RangeFrom<usize>>>::Output {<Vec<String> as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb69: {
        _171 = _172;                     // scope 8 at ui/let-else/let-else-drop-order.rs:76:59: 76:75
        _170 = core::slice::<impl [String]>::iter(move _171) -> [return: bb70, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:76:59: 76:75
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:76:69: 76:73
                                         // + literal: Const { ty: for<'a> fn(&'a [String]) -> std::slice::Iter<'a, String> {core::slice::<impl [String]>::iter}, val: Value(<ZST>) }
    }

    bb70: {
        _160 = <Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>> as Iterator>::zip::<std::slice::Iter<'_, String>>(move _161, move _170) -> [return: bb71, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:76:13: 76:76
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:76:55: 76:58
                                         // + literal: Const { ty: fn(Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>>, std::slice::Iter<'_, String>) -> Zip<Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>>, <std::slice::Iter<'_, String> as IntoIterator>::IntoIter> {<Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>> as Iterator>::zip::<std::slice::Iter<'_, String>>}, val: Value(<ZST>) }
    }

    bb71: {
        _159 = <Zip<Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>>, std::slice::Iter<'_, String>> as IntoIterator>::into_iter(move _160) -> [return: bb72, unwind: bb95]; // scope 8 at ui/let-else/let-else-drop-order.rs:76:13: 76:76
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:76:13: 76:76
                                         // + literal: Const { ty: fn(Zip<Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>>, std::slice::Iter<'_, String>>) -> <Zip<Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>>, std::slice::Iter<'_, String>> as IntoIterator>::IntoIter {<Zip<Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>>, std::slice::Iter<'_, String>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb72: {
        _175 = move _159;                // scope 8 at ui/let-else/let-else-drop-order.rs:76:13: 76:76
        goto -> bb73;                    // scope 11 at ui/let-else/let-else-drop-order.rs:75:9: 82:10
    }

    bb73: {
        _178 = &mut _175;                // scope 11 at ui/let-else/let-else-drop-order.rs:76:13: 76:76
        _177 = &mut (*_178);             // scope 11 at ui/let-else/let-else-drop-order.rs:76:13: 76:76
        _176 = <Zip<Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>>, std::slice::Iter<'_, String>> as Iterator>::next(move _177) -> [return: bb74, unwind: bb95]; // scope 11 at ui/let-else/let-else-drop-order.rs:76:13: 76:76
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:76:13: 76:76
                                         // + literal: Const { ty: for<'a> fn(&'a mut Zip<Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>>, std::slice::Iter<'_, String>>) -> Option<<Zip<Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>>, std::slice::Iter<'_, String>> as Iterator>::Item> {<Zip<Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>>, std::slice::Iter<'_, String>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb74: {
        _179 = discriminant(_176);       // scope 11 at ui/let-else/let-else-drop-order.rs:76:13: 76:76
        switchInt(move _179) -> [0: bb77, 1: bb75, otherwise: bb76]; // scope 11 at ui/let-else/let-else-drop-order.rs:76:13: 76:76
    }

    bb75: {
        _180 = ((((_176 as Some).0: ((&&str, &std::string::String), &std::string::String)).0: (&&str, &std::string::String)).0: &&str); // scope 11 at ui/let-else/let-else-drop-order.rs:75:15: 75:16
        _181 = ((((_176 as Some).0: ((&&str, &std::string::String), &std::string::String)).0: (&&str, &std::string::String)).1: &std::string::String); // scope 11 at ui/let-else/let-else-drop-order.rs:75:18: 75:26
        _182 = (((_176 as Some).0: ((&&str, &std::string::String), &std::string::String)).1: &std::string::String); // scope 11 at ui/let-else/let-else-drop-order.rs:75:29: 75:35
        _227 = const _;                  // scope 12 at ui/let-else/let-else-drop-order.rs:79:17: 79:80
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:79:17: 79:80
                                         // + literal: Const { ty: &[&str; 4], val: Unevaluated(DropAccountant::print_table, [], Some(promoted[0])) }
        _187 = _227;                     // scope 12 at ui/let-else/let-else-drop-order.rs:79:17: 79:80
        _186 = _187;                     // scope 12 at ui/let-else/let-else-drop-order.rs:79:17: 79:80
        _185 = move _186 as &[&str] (Pointer(Unsize)); // scope 12 at ui/let-else/let-else-drop-order.rs:79:17: 79:80
        _194 = &_180;                    // scope 12 at ui/let-else/let-else-drop-order.rs:80:17: 80:18
        _193 = _194;                     // scope 12 at ui/let-else/let-else-drop-order.rs:80:17: 80:18
        _192 = core::fmt::ArgumentV1::<'_>::new_display::<&&str>(move _193) -> [return: bb78, unwind: bb95]; // scope 12 at ui/let-else/let-else-drop-order.rs:80:17: 80:18
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:80:17: 80:18
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: for<'b> fn(&'b &&str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&&str>}, val: Value(<ZST>) }
    }

    bb76: {
        unreachable;                     // scope 11 at ui/let-else/let-else-drop-order.rs:76:13: 76:76
    }

    bb77: {
        drop(_40) -> [return: bb92, unwind: bb96]; // scope 4 at ui/let-else/let-else-drop-order.rs:83:5: 83:6
    }

    bb78: {
        _197 = &_181;                    // scope 12 at ui/let-else/let-else-drop-order.rs:80:20: 80:28
        _196 = _197;                     // scope 12 at ui/let-else/let-else-drop-order.rs:80:20: 80:28
        _195 = core::fmt::ArgumentV1::<'_>::new_display::<&String>(move _196) -> [return: bb79, unwind: bb95]; // scope 12 at ui/let-else/let-else-drop-order.rs:80:20: 80:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:80:20: 80:28
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: for<'b> fn(&'b &String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&String>}, val: Value(<ZST>) }
    }

    bb79: {
        _200 = &_182;                    // scope 12 at ui/let-else/let-else-drop-order.rs:80:30: 80:36
        _199 = _200;                     // scope 12 at ui/let-else/let-else-drop-order.rs:80:30: 80:36
        _198 = core::fmt::ArgumentV1::<'_>::new_display::<&String>(move _199) -> [return: bb80, unwind: bb95]; // scope 12 at ui/let-else/let-else-drop-order.rs:80:30: 80:36
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:80:30: 80:36
                                         // + user_ty: UserType(18)
                                         // + literal: Const { ty: for<'b> fn(&'b &String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&String>}, val: Value(<ZST>) }
    }

    bb80: {
        _203 = &_44;                     // scope 12 at ui/let-else/let-else-drop-order.rs:79:24: 79:31
        _202 = _203;                     // scope 12 at ui/let-else/let-else-drop-order.rs:79:24: 79:31
        _201 = core::fmt::ArgumentV1::<'_>::from_usize(move _202) -> [return: bb81, unwind: bb95]; // scope 12 at ui/let-else/let-else-drop-order.rs:79:24: 79:31
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:79:24: 79:31
                                         // + user_ty: UserType(19)
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> core::fmt::ArgumentV1<'a> {core::fmt::ArgumentV1::<'_>::from_usize}, val: Value(<ZST>) }
    }

    bb81: {
        _206 = &_51;                     // scope 12 at ui/let-else/let-else-drop-order.rs:79:40: 79:54
        _205 = _206;                     // scope 12 at ui/let-else/let-else-drop-order.rs:79:40: 79:54
        _204 = core::fmt::ArgumentV1::<'_>::from_usize(move _205) -> [return: bb82, unwind: bb95]; // scope 12 at ui/let-else/let-else-drop-order.rs:79:40: 79:54
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:79:40: 79:54
                                         // + user_ty: UserType(20)
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> core::fmt::ArgumentV1<'a> {core::fmt::ArgumentV1::<'_>::from_usize}, val: Value(<ZST>) }
    }

    bb82: {
        _209 = &_59;                     // scope 12 at ui/let-else/let-else-drop-order.rs:79:63: 79:75
        _208 = _209;                     // scope 12 at ui/let-else/let-else-drop-order.rs:79:63: 79:75
        _207 = core::fmt::ArgumentV1::<'_>::from_usize(move _208) -> [return: bb83, unwind: bb95]; // scope 12 at ui/let-else/let-else-drop-order.rs:79:63: 79:75
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:79:63: 79:75
                                         // + user_ty: UserType(21)
                                         // + literal: Const { ty: for<'a> fn(&'a usize) -> core::fmt::ArgumentV1<'a> {core::fmt::ArgumentV1::<'_>::from_usize}, val: Value(<ZST>) }
    }

    bb83: {
        _191 = [move _192, move _195, move _198, move _201, move _204, move _207]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _190 = &_191;                    // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _189 = _190;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _188 = move _189 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _215 = const std::fmt::rt::v1::Alignment::Left; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x00)) }
        _216 = Implied;                  // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _217 = Param(const 3_usize) -> [return: bb84, unwind: bb95]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize) -> Count {Param}, val: Value(<ZST>) }
    }

    bb84: {
        _214 = Argument::new(const 0_usize, const ' ', move _215, const 0_u32, move _216, move _217) -> [return: bb85, unwind: bb95]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb85: {
        _219 = const std::fmt::rt::v1::Alignment::Left; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x00)) }
        _220 = Implied;                  // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _221 = Param(const 4_usize) -> [return: bb86, unwind: bb95]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize) -> Count {Param}, val: Value(<ZST>) }
    }

    bb86: {
        _218 = Argument::new(const 1_usize, const ' ', move _219, const 0_u32, move _220, move _221) -> [return: bb87, unwind: bb95]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb87: {
        _223 = const std::fmt::rt::v1::Alignment::Left; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: std::fmt::rt::v1::Alignment, val: Value(Scalar(0x00)) }
        _224 = Implied;                  // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _225 = Param(const 5_usize) -> [return: bb88, unwind: bb95]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize) -> Count {Param}, val: Value(<ZST>) }
    }

    bb88: {
        _222 = Argument::new(const 2_usize, const ' ', move _223, const 0_u32, move _224, move _225) -> [return: bb89, unwind: bb95]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: fn(usize, char, std::fmt::rt::v1::Alignment, u32, Count, Count) -> Argument {Argument::new}, val: Value(<ZST>) }
    }

    bb89: {
        _213 = [move _214, move _218, move _222]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _212 = &_213;                    // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _211 = _212;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _210 = move _211 as &[std::fmt::rt::v1::Argument] (Pointer(Unsize)); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _226 = core::fmt::UnsafeArg::new() -> [return: bb90, unwind: bb95]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: unsafe fn() -> core::fmt::UnsafeArg {core::fmt::UnsafeArg::new}, val: Value(<ZST>) }
    }

    bb90: {
        _184 = Arguments::<'_>::new_v1_formatted(move _185, move _188, move _210, move _226) -> [return: bb91, unwind: bb95]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>], &[Argument], core::fmt::UnsafeArg) -> Arguments<'_> {Arguments::<'_>::new_v1_formatted}, val: Value(<ZST>) }
    }

    bb91: {
        _183 = _print(move _184) -> [return: bb99, unwind: bb95]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb92: {
        drop(_36) -> [return: bb93, unwind: bb97]; // scope 3 at ui/let-else/let-else-drop-order.rs:83:5: 83:6
    }

    bb93: {
        drop(_10) -> bb94;               // scope 0 at ui/let-else/let-else-drop-order.rs:83:5: 83:6
    }

    bb94: {
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:83:6: 83:6
    }

    bb95 (cleanup): {
        drop(_40) -> bb96;               // scope 4 at ui/let-else/let-else-drop-order.rs:83:5: 83:6
    }

    bb96 (cleanup): {
        drop(_36) -> bb97;               // scope 3 at ui/let-else/let-else-drop-order.rs:83:5: 83:6
    }

    bb97 (cleanup): {
        drop(_10) -> bb98;               // scope 0 at ui/let-else/let-else-drop-order.rs:83:5: 83:6
    }

    bb98 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-drop-order.rs:46:5: 83:6
    }

    bb99: {
        goto -> bb73;                    // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    }
}

promoted[0] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &[&str; 4] = {
    let mut _0: &[&str; 4];              // return place in scope 0 at ui/let-else/let-else-drop-order.rs:79:17: 79:80
    let mut _1: [&str; 4];               // in scope 0 at ui/let-else/let-else-drop-order.rs:79:17: 79:80

    bb0: {
        _1 = [const "| ", const " | ", const " | ", const " |\n"]; // scope 0 at ui/let-else/let-else-drop-order.rs:79:17: 79:80
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:79:17: 79:80
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:79:17: 79:80
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:79:17: 79:80
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:79:17: 79:80
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-drop-order.rs:79:17: 79:80
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:79:17: 79:80
    }
}

promoted[1] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/let-else/let-else-drop-order.rs:73:91: 73:93
    let mut _1: &str;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:73:91: 73:93

    bb0: {
        _1 = const "";                   // scope 0 at ui/let-else/let-else-drop-order.rs:73:91: 73:93
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:91: 73:93
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-drop-order.rs:73:91: 73:93
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:73:91: 73:93
    }
}

promoted[2] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/let-else/let-else-drop-order.rs:73:87: 73:89
    let mut _1: &str;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:73:87: 73:89

    bb0: {
        _1 = const "";                   // scope 0 at ui/let-else/let-else-drop-order.rs:73:87: 73:89
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:87: 73:89
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-drop-order.rs:73:87: 73:89
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:73:87: 73:89
    }
}

promoted[3] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/let-else/let-else-drop-order.rs:73:83: 73:85
    let mut _1: &str;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:73:83: 73:85

    bb0: {
        _1 = const "";                   // scope 0 at ui/let-else/let-else-drop-order.rs:73:83: 73:85
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:83: 73:85
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-drop-order.rs:73:83: 73:85
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:73:83: 73:85
    }
}

promoted[4] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &[&str; 4] = {
    let mut _0: &[&str; 4];              // return place in scope 0 at ui/let-else/let-else-drop-order.rs:73:18: 73:81
    let mut _1: [&str; 4];               // in scope 0 at ui/let-else/let-else-drop-order.rs:73:18: 73:81

    bb0: {
        _1 = [const "| ", const " | ", const " | ", const " |\n"]; // scope 0 at ui/let-else/let-else-drop-order.rs:73:18: 73:81
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:18: 73:81
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:18: 73:81
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:18: 73:81
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:73:18: 73:81
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-drop-order.rs:73:18: 73:81
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:73:18: 73:81
    }
}

promoted[5] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/let-else/let-else-drop-order.rs:71:13: 71:24
    let mut _1: &str;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:71:13: 71:24

    bb0: {
        _1 = const "construct";          // scope 0 at ui/let-else/let-else-drop-order.rs:71:13: 71:24
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:71:13: 71:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-drop-order.rs:71:13: 71:24
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:71:13: 71:24
    }
}

promoted[6] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &[&str; 4] = {
    let mut _0: &[&str; 4];              // return place in scope 0 at ui/let-else/let-else-drop-order.rs:70:13: 70:76
    let mut _1: [&str; 4];               // in scope 0 at ui/let-else/let-else-drop-order.rs:70:13: 70:76

    bb0: {
        _1 = [const "| ", const " | ", const " | ", const " |\n"]; // scope 0 at ui/let-else/let-else-drop-order.rs:70:13: 70:76
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:70:13: 70:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:70:13: 70:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:70:13: 70:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:70:13: 70:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-drop-order.rs:70:13: 70:76
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:70:13: 70:76
    }
}

promoted[7] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[8] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

const LINES: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at ui/let-else/let-else-drop-order.rs:54:22: 54:29
    let mut _1: &[&str; 9];              // in scope 0 at ui/let-else/let-else-drop-order.rs:54:32: 64:10
    let _2: &[&str; 9];                  // in scope 0 at ui/let-else/let-else-drop-order.rs:54:32: 64:10
    let _3: [&str; 9];                   // in scope 0 at ui/let-else/let-else-drop-order.rs:54:33: 64:10
    let mut _4: &[&str; 9];              // in scope 0 at ui/let-else/let-else-drop-order.rs:54:32: 64:10

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/let-else/let-else-drop-order.rs:54:32: 64:10
        StorageLive(_2);                 // scope 0 at ui/let-else/let-else-drop-order.rs:54:32: 64:10
        _4 = const _;                    // scope 0 at ui/let-else/let-else-drop-order.rs:54:32: 64:10
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:54:32: 64:10
                                         // + literal: Const { ty: &[&str; 9], val: Unevaluated(LINES, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/let-else/let-else-drop-order.rs:54:32: 64:10
        _1 = &(*_2);                     // scope 0 at ui/let-else/let-else-drop-order.rs:54:32: 64:10
        _0 = move _1 as &[&str] (Pointer(Unsize)); // scope 0 at ui/let-else/let-else-drop-order.rs:54:32: 64:10
        StorageDead(_2);                 // scope 0 at ui/let-else/let-else-drop-order.rs:64:9: 64:10
        StorageDead(_1);                 // scope 0 at ui/let-else/let-else-drop-order.rs:64:9: 64:10
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:54:9: 64:11
    }
}

promoted[0] in LINES: &[&str; 9] = {
    let mut _0: &[&str; 9];              // return place in scope 0 at ui/let-else/let-else-drop-order.rs:54:32: 64:10
    let mut _1: [&str; 9];               // in scope 0 at ui/let-else/let-else-drop-order.rs:54:33: 64:10

    bb0: {
        _1 = [const "vanilla", const "&", const "&mut", const "move", const "fn(this)", const "tuple", const "array", const "ref &", const "ref mut &mut"]; // scope 0 at ui/let-else/let-else-drop-order.rs:54:33: 64:10
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:55:13: 55:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:56:13: 56:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:57:13: 57:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:58:13: 58:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:59:13: 59:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:60:13: 60:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:61:13: 61:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:62:13: 62:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:63:13: 63:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-drop-order.rs:54:32: 64:10
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:54:32: 64:10
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table::{closure#0}(_1: &mut [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43], _2: &&str) -> usize {
    debug v => _2;                       // in scope 0 at ui/let-else/let-else-drop-order.rs:65:41: 65:42
    let mut _0: usize;                   // return place in scope 0 at ui/let-else/let-else-drop-order.rs:65:44: 65:44
    let mut _3: &str;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:65:44: 65:51
    let mut _4: &str;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:65:41: 65:42

    bb0: {
        _4 = deref_copy (*_2);           // scope 0 at ui/let-else/let-else-drop-order.rs:65:44: 65:51
        _3 = _4;                         // scope 0 at ui/let-else/let-else-drop-order.rs:65:44: 65:51
        _0 = core::str::<impl str>::len(move _3) -> bb1; // scope 0 at ui/let-else/let-else-drop-order.rs:65:44: 65:51
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:65:46: 65:49
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> usize {core::str::<impl str>::len}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:65:51: 65:51
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table::{closure#1}(_1: &mut [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56], _2: &String) -> usize {
    debug v => _2;                       // in scope 0 at ui/let-else/let-else-drop-order.rs:66:54: 66:55
    let mut _0: usize;                   // return place in scope 0 at ui/let-else/let-else-drop-order.rs:66:57: 66:57
    let mut _3: &std::string::String;    // in scope 0 at ui/let-else/let-else-drop-order.rs:66:57: 66:64

    bb0: {
        _3 = _2;                         // scope 0 at ui/let-else/let-else-drop-order.rs:66:57: 66:64
        _0 = String::len(move _3) -> bb1; // scope 0 at ui/let-else/let-else-drop-order.rs:66:57: 66:64
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:66:59: 66:62
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> usize {String::len}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:66:64: 66:64
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table::{closure#2}(_1: &mut [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47], _2: &String) -> usize {
    debug v => _2;                       // in scope 0 at ui/let-else/let-else-drop-order.rs:67:45: 67:46
    let mut _0: usize;                   // return place in scope 0 at ui/let-else/let-else-drop-order.rs:67:48: 67:48
    let mut _3: &std::string::String;    // in scope 0 at ui/let-else/let-else-drop-order.rs:67:48: 67:55

    bb0: {
        _3 = _2;                         // scope 0 at ui/let-else/let-else-drop-order.rs:67:48: 67:55
        _0 = String::len(move _3) -> bb1; // scope 0 at ui/let-else/let-else-drop-order.rs:67:48: 67:55
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:67:50: 67:53
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> usize {String::len}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:67:55: 67:55
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::assert_all_equal_to(_1: &DropAccountant, _2: &str) -> () {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:85:28: 85:33
    debug st => _2;                      // in scope 0 at ui/let-else/let-else-drop-order.rs:85:35: 85:37
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-drop-order.rs:85:45: 85:45
    let _3: std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:86:13: 86:21
    let mut _4: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:86:24: 86:39
    let _5: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:86:24: 86:39
    let mut _6: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:86:24: 86:39
    let _8: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:87:21: 87:49
    let mut _9: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:87:21: 87:29
    let _10: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:87:21: 87:29
    let mut _11: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:87:21: 87:29
    let mut _12: usize;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:87:30: 87:48
    let mut _13: usize;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:87:30: 87:44
    let mut _14: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:87:30: 87:44
    let _15: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:87:30: 87:44
    let mut _16: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:87:30: 87:44
    let mut _17: (usize, bool);          // in scope 0 at ui/let-else/let-else-drop-order.rs:87:30: 87:48
    let mut _19: &[std::string::String]; // in scope 0 at ui/let-else/let-else-drop-order.rs:88:35: 88:39
    let _20: &[std::string::String];     // in scope 0 at ui/let-else/let-else-drop-order.rs:88:35: 88:39
    let mut _21: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:88:35: 88:39
    let mut _22: std::slice::Iter<'_, std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
    let mut _23: std::slice::Iter<'_, std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
    let mut _24: &[std::string::String]; // in scope 0 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
    let _25: &[std::string::String];     // in scope 0 at ui/let-else/let-else-drop-order.rs:89:21: 89:30
    let mut _26: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:89:21: 89:25
    let mut _27: std::ops::RangeFrom<usize>; // in scope 0 at ui/let-else/let-else-drop-order.rs:89:26: 89:29
    let mut _29: std::option::Option<&std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
    let mut _30: &mut std::slice::Iter<'_, std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
    let mut _31: &mut std::slice::Iter<'_, std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
    let mut _32: isize;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:89:9: 91:10
    let mut _34: (&&str, &&str);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _35: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _36: &str;                       // in scope 0 at ui/let-else/let-else-drop-order.rs:90:24: 90:35
    let mut _37: &str;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:90:24: 90:35
    let _38: &str;                       // in scope 0 at ui/let-else/let-else-drop-order.rs:90:24: 90:35
    let mut _39: &std::string::String;   // in scope 0 at ui/let-else/let-else-drop-order.rs:90:24: 90:35
    let mut _40: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _41: &str;                       // in scope 0 at ui/let-else/let-else-drop-order.rs:90:37: 90:46
    let mut _42: &str;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:90:37: 90:46
    let mut _45: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _46: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _47: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _48: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _50: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _51: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _52: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _53: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _54: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _55: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug accounts => _3;            // in scope 1 at ui/let-else/let-else-drop-order.rs:86:13: 86:21
        let _7: &std::vec::Vec<std::string::String>; // in scope 1 at ui/let-else/let-else-drop-order.rs:87:13: 87:17
        scope 2 {
            debug last => _7;            // in scope 2 at ui/let-else/let-else-drop-order.rs:87:13: 87:17
            let _18: std::vec::Vec<std::string::String>; // in scope 2 at ui/let-else/let-else-drop-order.rs:88:13: 88:17
            scope 3 {
                debug last => _18;       // in scope 3 at ui/let-else/let-else-drop-order.rs:88:13: 88:17
                let mut _28: std::slice::Iter<'_, std::string::String>; // in scope 3 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
                scope 4 {
                    debug iter => _28;   // in scope 4 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
                    let _33: &std::string::String; // in scope 4 at ui/let-else/let-else-drop-order.rs:89:13: 89:17
                    scope 5 {
                        debug line => _33; // in scope 5 at ui/let-else/let-else-drop-order.rs:89:13: 89:17
                        let _43: &&str;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _44: &&str;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        scope 6 {
                            debug left_val => _43; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _44; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _49: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 7 {
                                debug kind => _49; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _6 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>); // scope 0 at ui/let-else/let-else-drop-order.rs:86:24: 86:39
        _5 = <Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref(move _6) -> bb1; // scope 0 at ui/let-else/let-else-drop-order.rs:86:24: 86:39
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:86:24: 86:39
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<Vec<String>>>>) -> &'a <Rc<RefCell<Vec<Vec<String>>>> as Deref>::Target {<Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at ui/let-else/let-else-drop-order.rs:86:24: 86:39
        _3 = RefCell::<Vec<Vec<String>>>::borrow(move _4) -> bb2; // scope 0 at ui/let-else/let-else-drop-order.rs:86:24: 86:39
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:86:31: 86:37
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<Vec<String>>>) -> Ref<'a, Vec<Vec<String>>> {RefCell::<Vec<Vec<String>>>::borrow}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &_3;                       // scope 1 at ui/let-else/let-else-drop-order.rs:87:21: 87:29
        _10 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _11) -> [return: bb3, unwind: bb26]; // scope 1 at ui/let-else/let-else-drop-order.rs:87:21: 87:29
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:87:21: 87:29
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<Vec<String>>>) -> &'a <Ref<'_, Vec<Vec<String>>> as Deref>::Target {<Ref<'_, Vec<Vec<String>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = _10;                        // scope 1 at ui/let-else/let-else-drop-order.rs:87:21: 87:29
        _16 = &_3;                       // scope 1 at ui/let-else/let-else-drop-order.rs:87:30: 87:44
        _15 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _16) -> [return: bb4, unwind: bb26]; // scope 1 at ui/let-else/let-else-drop-order.rs:87:30: 87:44
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:87:30: 87:44
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<Vec<String>>>) -> &'a <Ref<'_, Vec<Vec<String>>> as Deref>::Target {<Ref<'_, Vec<Vec<String>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = _15;                       // scope 1 at ui/let-else/let-else-drop-order.rs:87:30: 87:44
        _13 = Vec::<Vec<String>>::len(move _14) -> [return: bb5, unwind: bb26]; // scope 1 at ui/let-else/let-else-drop-order.rs:87:30: 87:44
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:87:39: 87:42
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Vec<String>>) -> usize {Vec::<Vec<String>>::len}, val: Value(<ZST>) }
    }

    bb5: {
        _17 = CheckedSub(_13, const 1_usize); // scope 1 at ui/let-else/let-else-drop-order.rs:87:30: 87:48
        assert(!move (_17.1: bool), "attempt to compute `{} - {}`, which would overflow", move _13, const 1_usize) -> [success: bb6, unwind: bb26]; // scope 1 at ui/let-else/let-else-drop-order.rs:87:30: 87:48
    }

    bb6: {
        _12 = move (_17.0: usize);       // scope 1 at ui/let-else/let-else-drop-order.rs:87:30: 87:48
        _8 = <Vec<Vec<String>> as Index<usize>>::index(move _9, move _12) -> [return: bb7, unwind: bb26]; // scope 1 at ui/let-else/let-else-drop-order.rs:87:21: 87:49
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:87:21: 87:49
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Vec<String>>, usize) -> &'a <Vec<Vec<String>> as Index<usize>>::Output {<Vec<Vec<String>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb7: {
        _7 = _8;                         // scope 1 at ui/let-else/let-else-drop-order.rs:87:20: 87:49
        _21 = _7;                        // scope 2 at ui/let-else/let-else-drop-order.rs:88:35: 88:39
        _20 = <Vec<String> as Deref>::deref(move _21) -> [return: bb8, unwind: bb26]; // scope 2 at ui/let-else/let-else-drop-order.rs:88:35: 88:39
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:88:35: 88:39
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> &'a <Vec<String> as Deref>::Target {<Vec<String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _19 = _20;                       // scope 2 at ui/let-else/let-else-drop-order.rs:88:35: 88:39
        _18 = get_comma_list(move _19) -> [return: bb9, unwind: bb26]; // scope 2 at ui/let-else/let-else-drop-order.rs:88:20: 88:40
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:88:20: 88:34
                                         // + literal: Const { ty: for<'a> fn(&'a [String]) -> Vec<String> {get_comma_list}, val: Value(<ZST>) }
    }

    bb9: {
        _26 = &_18;                      // scope 3 at ui/let-else/let-else-drop-order.rs:89:21: 89:25
        _27 = const RangeFrom::<usize> {{ start: 1_usize }}; // scope 3 at ui/let-else/let-else-drop-order.rs:89:26: 89:29
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:89:26: 89:29
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000001)) }
        _25 = <Vec<String> as Index<RangeFrom<usize>>>::index(move _26, move _27) -> [return: bb10, unwind: bb25]; // scope 3 at ui/let-else/let-else-drop-order.rs:89:21: 89:30
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:89:21: 89:30
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, RangeFrom<usize>) -> &'a <Vec<String> as Index<RangeFrom<usize>>>::Output {<Vec<String> as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb10: {
        _24 = _25;                       // scope 3 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
        _23 = core::slice::<impl [String]>::iter(move _24) -> [return: bb11, unwind: bb25]; // scope 3 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:89:31: 89:35
                                         // + literal: Const { ty: for<'a> fn(&'a [String]) -> std::slice::Iter<'a, String> {core::slice::<impl [String]>::iter}, val: Value(<ZST>) }
    }

    bb11: {
        _22 = <std::slice::Iter<'_, String> as IntoIterator>::into_iter(move _23) -> [return: bb12, unwind: bb25]; // scope 3 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:89:21: 89:37
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, String>) -> <std::slice::Iter<'_, String> as IntoIterator>::IntoIter {<std::slice::Iter<'_, String> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb12: {
        _28 = move _22;                  // scope 3 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
        goto -> bb13;                    // scope 4 at ui/let-else/let-else-drop-order.rs:89:9: 91:10
    }

    bb13: {
        _31 = &mut _28;                  // scope 4 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
        _30 = &mut (*_31);               // scope 4 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
        _29 = <std::slice::Iter<'_, String> as Iterator>::next(move _30) -> [return: bb14, unwind: bb25]; // scope 4 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:89:21: 89:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, String>) -> Option<<std::slice::Iter<'_, String> as Iterator>::Item> {<std::slice::Iter<'_, String> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb14: {
        _32 = discriminant(_29);         // scope 4 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
        switchInt(move _32) -> [0: bb17, 1: bb15, otherwise: bb16]; // scope 4 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
    }

    bb15: {
        _33 = ((_29 as Some).0: &std::string::String); // scope 4 at ui/let-else/let-else-drop-order.rs:89:13: 89:17
        _39 = _33;                       // scope 5 at ui/let-else/let-else-drop-order.rs:90:24: 90:35
        _38 = <String as Deref>::deref(move _39) -> [return: bb18, unwind: bb25]; // scope 5 at ui/let-else/let-else-drop-order.rs:90:24: 90:35
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:90:24: 90:35
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb16: {
        unreachable;                     // scope 4 at ui/let-else/let-else-drop-order.rs:89:21: 89:37
    }

    bb17: {
        drop(_18) -> [return: bb23, unwind: bb26]; // scope 2 at ui/let-else/let-else-drop-order.rs:92:5: 92:6
    }

    bb18: {
        _37 = _38;                       // scope 5 at ui/let-else/let-else-drop-order.rs:90:24: 90:35
        _36 = core::str::<impl str>::trim(move _37) -> [return: bb19, unwind: bb25]; // scope 5 at ui/let-else/let-else-drop-order.rs:90:24: 90:35
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:90:29: 90:33
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> &'a str {core::str::<impl str>::trim}, val: Value(<ZST>) }
    }

    bb19: {
        _35 = &_36;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _42 = _2;                        // scope 5 at ui/let-else/let-else-drop-order.rs:90:37: 90:46
        _41 = core::str::<impl str>::trim(move _42) -> [return: bb20, unwind: bb25]; // scope 5 at ui/let-else/let-else-drop-order.rs:90:37: 90:46
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:90:40: 90:44
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> &'a str {core::str::<impl str>::trim}, val: Value(<ZST>) }
    }

    bb20: {
        _40 = &_41;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _34 = (move _35, move _40);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _43 = (_34.0: &&str);            // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _44 = (_34.1: &&str);            // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _47 = _43;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _48 = _44;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _46 = <&str as PartialEq>::eq(move _47, move _48) -> [return: bb21, unwind: bb25]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb21: {
        _45 = Not(move _46);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _45) -> [0: bb13, otherwise: bb22]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb22: {
        _49 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _51 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _53 = _43;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _52 = _53;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _55 = _44;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _54 = _55;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _56 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _50 = core::panicking::assert_failed::<&str, &str>(move _51, move _52, move _54, move _56) -> bb25; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb23: {
        drop(_3) -> bb24;                // scope 0 at ui/let-else/let-else-drop-order.rs:92:5: 92:6
    }

    bb24: {
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:92:6: 92:6
    }

    bb25 (cleanup): {
        drop(_18) -> bb26;               // scope 2 at ui/let-else/let-else-drop-order.rs:92:5: 92:6
    }

    bb26 (cleanup): {
        drop(_3) -> bb27;                // scope 0 at ui/let-else/let-else-drop-order.rs:92:5: 92:6
    }

    bb27 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-drop-order.rs:85:5: 92:6
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::assert_equality_last_two_lists(_1: &DropAccountant) -> () {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:94:39: 94:44
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-drop-order.rs:94:46: 94:46
    let _2: std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:95:13: 95:21
    let mut _3: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:95:24: 95:39
    let _4: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:95:24: 95:39
    let mut _5: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:95:24: 95:39
    let _7: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:96:21: 96:49
    let mut _8: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:96:21: 96:29
    let _9: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:96:21: 96:29
    let mut _10: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:96:21: 96:29
    let mut _11: usize;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:96:30: 96:48
    let mut _12: usize;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:96:30: 96:44
    let mut _13: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:96:30: 96:44
    let _14: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:96:30: 96:44
    let mut _15: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:96:30: 96:44
    let mut _16: (usize, bool);          // in scope 0 at ui/let-else/let-else-drop-order.rs:96:30: 96:48
    let _18: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:97:28: 97:56
    let mut _19: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:97:28: 97:36
    let _20: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:97:28: 97:36
    let mut _21: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:97:28: 97:36
    let mut _22: usize;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:97:37: 97:55
    let mut _23: usize;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:97:37: 97:51
    let mut _24: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:97:37: 97:51
    let _25: &std::vec::Vec<std::vec::Vec<std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:97:37: 97:51
    let mut _26: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:97:37: 97:51
    let mut _27: (usize, bool);          // in scope 0 at ui/let-else/let-else-drop-order.rs:97:37: 97:55
    let mut _28: std::iter::Zip<std::slice::Iter<'_, std::string::String>, std::slice::Iter<'_, std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:98:23: 98:68
    let mut _29: std::iter::Zip<std::slice::Iter<'_, std::string::String>, std::slice::Iter<'_, std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:98:23: 98:68
    let mut _30: std::slice::Iter<'_, std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:98:23: 98:39
    let mut _31: &[std::string::String]; // in scope 0 at ui/let-else/let-else-drop-order.rs:98:23: 98:39
    let _32: &[std::string::String];     // in scope 0 at ui/let-else/let-else-drop-order.rs:98:23: 98:32
    let mut _33: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:98:23: 98:27
    let mut _34: std::ops::RangeFrom<usize>; // in scope 0 at ui/let-else/let-else-drop-order.rs:98:28: 98:31
    let mut _35: std::slice::Iter<'_, std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:98:44: 98:67
    let mut _36: &[std::string::String]; // in scope 0 at ui/let-else/let-else-drop-order.rs:98:44: 98:67
    let _37: &[std::string::String];     // in scope 0 at ui/let-else/let-else-drop-order.rs:98:44: 98:60
    let mut _38: &std::vec::Vec<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:98:44: 98:55
    let mut _39: std::ops::RangeFrom<usize>; // in scope 0 at ui/let-else/let-else-drop-order.rs:98:56: 98:59
    let mut _41: std::option::Option<(&std::string::String, &std::string::String)>; // in scope 0 at ui/let-else/let-else-drop-order.rs:98:23: 98:68
    let mut _42: &mut std::iter::Zip<std::slice::Iter<'_, std::string::String>, std::slice::Iter<'_, std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:98:23: 98:68
    let mut _43: &mut std::iter::Zip<std::slice::Iter<'_, std::string::String>, std::slice::Iter<'_, std::string::String>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:98:23: 98:68
    let mut _44: isize;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:98:9: 102:10
    let mut _47: bool;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:99:16: 99:53
    let mut _48: bool;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:99:17: 99:53
    let mut _49: bool;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:99:18: 99:38
    let mut _50: bool;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:99:18: 99:24
    let mut _51: &&std::string::String;  // in scope 0 at ui/let-else/let-else-drop-order.rs:99:18: 99:19
    let mut _52: &&std::string::String;  // in scope 0 at ui/let-else/let-else-drop-order.rs:99:23: 99:24
    let mut _53: bool;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:99:28: 99:38
    let mut _54: &&std::string::String;  // in scope 0 at ui/let-else/let-else-drop-order.rs:99:28: 99:29
    let mut _55: &&str;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:99:33: 99:38
    let mut _56: bool;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:99:42: 99:52
    let mut _57: &&std::string::String;  // in scope 0 at ui/let-else/let-else-drop-order.rs:99:42: 99:43
    let mut _58: &&str;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:99:47: 99:52
    let mut _59: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    scope 1 {
        debug accounts => _2;            // in scope 1 at ui/let-else/let-else-drop-order.rs:95:13: 95:21
        let _6: &std::vec::Vec<std::string::String>; // in scope 1 at ui/let-else/let-else-drop-order.rs:96:13: 96:17
        scope 2 {
            debug last => _6;            // in scope 2 at ui/let-else/let-else-drop-order.rs:96:13: 96:17
            let _17: &std::vec::Vec<std::string::String>; // in scope 2 at ui/let-else/let-else-drop-order.rs:97:13: 97:24
            scope 3 {
                debug before_last => _17; // in scope 3 at ui/let-else/let-else-drop-order.rs:97:13: 97:24
                let mut _40: std::iter::Zip<std::slice::Iter<'_, std::string::String>, std::slice::Iter<'_, std::string::String>>; // in scope 3 at ui/let-else/let-else-drop-order.rs:98:23: 98:68
                scope 4 {
                    debug iter => _40;   // in scope 4 at ui/let-else/let-else-drop-order.rs:98:23: 98:68
                    let _45: &std::string::String; // in scope 4 at ui/let-else/let-else-drop-order.rs:98:14: 98:15
                    let _46: &std::string::String; // in scope 4 at ui/let-else/let-else-drop-order.rs:98:17: 98:18
                    scope 5 {
                        debug l => _45;  // in scope 5 at ui/let-else/let-else-drop-order.rs:98:14: 98:15
                        debug b => _46;  // in scope 5 at ui/let-else/let-else-drop-order.rs:98:17: 98:18
                        let mut _60: &&str; // in scope 5 at ui/let-else/let-else-drop-order.rs:99:47: 99:52
                        let mut _61: &&str; // in scope 5 at ui/let-else/let-else-drop-order.rs:99:33: 99:38
                    }
                }
            }
        }
    }

    bb0: {
        _5 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>); // scope 0 at ui/let-else/let-else-drop-order.rs:95:24: 95:39
        _4 = <Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref(move _5) -> bb1; // scope 0 at ui/let-else/let-else-drop-order.rs:95:24: 95:39
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:95:24: 95:39
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<Vec<String>>>>) -> &'a <Rc<RefCell<Vec<Vec<String>>>> as Deref>::Target {<Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at ui/let-else/let-else-drop-order.rs:95:24: 95:39
        _2 = RefCell::<Vec<Vec<String>>>::borrow(move _3) -> bb2; // scope 0 at ui/let-else/let-else-drop-order.rs:95:24: 95:39
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:95:31: 95:37
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<Vec<String>>>) -> Ref<'a, Vec<Vec<String>>> {RefCell::<Vec<Vec<String>>>::borrow}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = &_2;                       // scope 1 at ui/let-else/let-else-drop-order.rs:96:21: 96:29
        _9 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _10) -> [return: bb3, unwind: bb35]; // scope 1 at ui/let-else/let-else-drop-order.rs:96:21: 96:29
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:96:21: 96:29
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<Vec<String>>>) -> &'a <Ref<'_, Vec<Vec<String>>> as Deref>::Target {<Ref<'_, Vec<Vec<String>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = _9;                         // scope 1 at ui/let-else/let-else-drop-order.rs:96:21: 96:29
        _15 = &_2;                       // scope 1 at ui/let-else/let-else-drop-order.rs:96:30: 96:44
        _14 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _15) -> [return: bb4, unwind: bb35]; // scope 1 at ui/let-else/let-else-drop-order.rs:96:30: 96:44
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:96:30: 96:44
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<Vec<String>>>) -> &'a <Ref<'_, Vec<Vec<String>>> as Deref>::Target {<Ref<'_, Vec<Vec<String>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = _14;                       // scope 1 at ui/let-else/let-else-drop-order.rs:96:30: 96:44
        _12 = Vec::<Vec<String>>::len(move _13) -> [return: bb5, unwind: bb35]; // scope 1 at ui/let-else/let-else-drop-order.rs:96:30: 96:44
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:96:39: 96:42
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Vec<String>>) -> usize {Vec::<Vec<String>>::len}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = CheckedSub(_12, const 1_usize); // scope 1 at ui/let-else/let-else-drop-order.rs:96:30: 96:48
        assert(!move (_16.1: bool), "attempt to compute `{} - {}`, which would overflow", move _12, const 1_usize) -> [success: bb6, unwind: bb35]; // scope 1 at ui/let-else/let-else-drop-order.rs:96:30: 96:48
    }

    bb6: {
        _11 = move (_16.0: usize);       // scope 1 at ui/let-else/let-else-drop-order.rs:96:30: 96:48
        _7 = <Vec<Vec<String>> as Index<usize>>::index(move _8, move _11) -> [return: bb7, unwind: bb35]; // scope 1 at ui/let-else/let-else-drop-order.rs:96:21: 96:49
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:96:21: 96:49
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Vec<String>>, usize) -> &'a <Vec<Vec<String>> as Index<usize>>::Output {<Vec<Vec<String>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb7: {
        _6 = _7;                         // scope 1 at ui/let-else/let-else-drop-order.rs:96:20: 96:49
        _21 = &_2;                       // scope 2 at ui/let-else/let-else-drop-order.rs:97:28: 97:36
        _20 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _21) -> [return: bb8, unwind: bb35]; // scope 2 at ui/let-else/let-else-drop-order.rs:97:28: 97:36
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:97:28: 97:36
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<Vec<String>>>) -> &'a <Ref<'_, Vec<Vec<String>>> as Deref>::Target {<Ref<'_, Vec<Vec<String>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _19 = _20;                       // scope 2 at ui/let-else/let-else-drop-order.rs:97:28: 97:36
        _26 = &_2;                       // scope 2 at ui/let-else/let-else-drop-order.rs:97:37: 97:51
        _25 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _26) -> [return: bb9, unwind: bb35]; // scope 2 at ui/let-else/let-else-drop-order.rs:97:37: 97:51
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:97:37: 97:51
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<Vec<String>>>) -> &'a <Ref<'_, Vec<Vec<String>>> as Deref>::Target {<Ref<'_, Vec<Vec<String>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _24 = _25;                       // scope 2 at ui/let-else/let-else-drop-order.rs:97:37: 97:51
        _23 = Vec::<Vec<String>>::len(move _24) -> [return: bb10, unwind: bb35]; // scope 2 at ui/let-else/let-else-drop-order.rs:97:37: 97:51
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:97:46: 97:49
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Vec<String>>) -> usize {Vec::<Vec<String>>::len}, val: Value(<ZST>) }
    }

    bb10: {
        _27 = CheckedSub(_23, const 2_usize); // scope 2 at ui/let-else/let-else-drop-order.rs:97:37: 97:55
        assert(!move (_27.1: bool), "attempt to compute `{} - {}`, which would overflow", move _23, const 2_usize) -> [success: bb11, unwind: bb35]; // scope 2 at ui/let-else/let-else-drop-order.rs:97:37: 97:55
    }

    bb11: {
        _22 = move (_27.0: usize);       // scope 2 at ui/let-else/let-else-drop-order.rs:97:37: 97:55
        _18 = <Vec<Vec<String>> as Index<usize>>::index(move _19, move _22) -> [return: bb12, unwind: bb35]; // scope 2 at ui/let-else/let-else-drop-order.rs:97:28: 97:56
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:97:28: 97:56
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Vec<String>>, usize) -> &'a <Vec<Vec<String>> as Index<usize>>::Output {<Vec<Vec<String>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb12: {
        _17 = _18;                       // scope 2 at ui/let-else/let-else-drop-order.rs:97:27: 97:56
        _33 = _6;                        // scope 3 at ui/let-else/let-else-drop-order.rs:98:23: 98:27
        _34 = const RangeFrom::<usize> {{ start: 1_usize }}; // scope 3 at ui/let-else/let-else-drop-order.rs:98:28: 98:31
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:98:28: 98:31
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000001)) }
        _32 = <Vec<String> as Index<RangeFrom<usize>>>::index(move _33, move _34) -> [return: bb13, unwind: bb35]; // scope 3 at ui/let-else/let-else-drop-order.rs:98:23: 98:32
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:98:23: 98:32
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, RangeFrom<usize>) -> &'a <Vec<String> as Index<RangeFrom<usize>>>::Output {<Vec<String> as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb13: {
        _31 = _32;                       // scope 3 at ui/let-else/let-else-drop-order.rs:98:23: 98:39
        _30 = core::slice::<impl [String]>::iter(move _31) -> [return: bb14, unwind: bb35]; // scope 3 at ui/let-else/let-else-drop-order.rs:98:23: 98:39
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:98:33: 98:37
                                         // + literal: Const { ty: for<'a> fn(&'a [String]) -> std::slice::Iter<'a, String> {core::slice::<impl [String]>::iter}, val: Value(<ZST>) }
    }

    bb14: {
        _38 = _17;                       // scope 3 at ui/let-else/let-else-drop-order.rs:98:44: 98:55
        _39 = const RangeFrom::<usize> {{ start: 1_usize }}; // scope 3 at ui/let-else/let-else-drop-order.rs:98:56: 98:59
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:98:56: 98:59
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000001)) }
        _37 = <Vec<String> as Index<RangeFrom<usize>>>::index(move _38, move _39) -> [return: bb15, unwind: bb35]; // scope 3 at ui/let-else/let-else-drop-order.rs:98:44: 98:60
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:98:44: 98:60
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, RangeFrom<usize>) -> &'a <Vec<String> as Index<RangeFrom<usize>>>::Output {<Vec<String> as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb15: {
        _36 = _37;                       // scope 3 at ui/let-else/let-else-drop-order.rs:98:44: 98:67
        _35 = core::slice::<impl [String]>::iter(move _36) -> [return: bb16, unwind: bb35]; // scope 3 at ui/let-else/let-else-drop-order.rs:98:44: 98:67
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:98:61: 98:65
                                         // + literal: Const { ty: for<'a> fn(&'a [String]) -> std::slice::Iter<'a, String> {core::slice::<impl [String]>::iter}, val: Value(<ZST>) }
    }

    bb16: {
        _29 = <std::slice::Iter<'_, String> as Iterator>::zip::<std::slice::Iter<'_, String>>(move _30, move _35) -> [return: bb17, unwind: bb35]; // scope 3 at ui/let-else/let-else-drop-order.rs:98:23: 98:68
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:98:40: 98:43
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, String>, std::slice::Iter<'_, String>) -> Zip<std::slice::Iter<'_, String>, <std::slice::Iter<'_, String> as IntoIterator>::IntoIter> {<std::slice::Iter<'_, String> as Iterator>::zip::<std::slice::Iter<'_, String>>}, val: Value(<ZST>) }
    }

    bb17: {
        _28 = <Zip<std::slice::Iter<'_, String>, std::slice::Iter<'_, String>> as IntoIterator>::into_iter(move _29) -> [return: bb18, unwind: bb35]; // scope 3 at ui/let-else/let-else-drop-order.rs:98:23: 98:68
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:98:23: 98:68
                                         // + literal: Const { ty: fn(Zip<std::slice::Iter<'_, String>, std::slice::Iter<'_, String>>) -> <Zip<std::slice::Iter<'_, String>, std::slice::Iter<'_, String>> as IntoIterator>::IntoIter {<Zip<std::slice::Iter<'_, String>, std::slice::Iter<'_, String>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb18: {
        _40 = move _28;                  // scope 3 at ui/let-else/let-else-drop-order.rs:98:23: 98:68
        goto -> bb19;                    // scope 4 at ui/let-else/let-else-drop-order.rs:98:9: 102:10
    }

    bb19: {
        _43 = &mut _40;                  // scope 4 at ui/let-else/let-else-drop-order.rs:98:23: 98:68
        _42 = &mut (*_43);               // scope 4 at ui/let-else/let-else-drop-order.rs:98:23: 98:68
        _41 = <Zip<std::slice::Iter<'_, String>, std::slice::Iter<'_, String>> as Iterator>::next(move _42) -> [return: bb20, unwind: bb35]; // scope 4 at ui/let-else/let-else-drop-order.rs:98:23: 98:68
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:98:23: 98:68
                                         // + literal: Const { ty: for<'a> fn(&'a mut Zip<std::slice::Iter<'_, String>, std::slice::Iter<'_, String>>) -> Option<<Zip<std::slice::Iter<'_, String>, std::slice::Iter<'_, String>> as Iterator>::Item> {<Zip<std::slice::Iter<'_, String>, std::slice::Iter<'_, String>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb20: {
        _44 = discriminant(_41);         // scope 4 at ui/let-else/let-else-drop-order.rs:98:23: 98:68
        switchInt(move _44) -> [0: bb23, 1: bb21, otherwise: bb22]; // scope 4 at ui/let-else/let-else-drop-order.rs:98:23: 98:68
    }

    bb21: {
        _45 = (((_41 as Some).0: (&std::string::String, &std::string::String)).0: &std::string::String); // scope 4 at ui/let-else/let-else-drop-order.rs:98:14: 98:15
        _46 = (((_41 as Some).0: (&std::string::String, &std::string::String)).1: &std::string::String); // scope 4 at ui/let-else/let-else-drop-order.rs:98:17: 98:18
        _51 = &_45;                      // scope 5 at ui/let-else/let-else-drop-order.rs:99:18: 99:19
        _52 = &_46;                      // scope 5 at ui/let-else/let-else-drop-order.rs:99:23: 99:24
        _50 = <&String as PartialEq>::eq(move _51, move _52) -> [return: bb30, unwind: bb35]; // scope 5 at ui/let-else/let-else-drop-order.rs:99:18: 99:24
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:99:18: 99:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &String, &'b &String) -> bool {<&String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        unreachable;                     // scope 4 at ui/let-else/let-else-drop-order.rs:98:23: 98:68
    }

    bb23: {
        drop(_2) -> bb34;                // scope 0 at ui/let-else/let-else-drop-order.rs:103:5: 103:6
    }

    bb24: {
        _48 = const true;                // scope 5 at ui/let-else/let-else-drop-order.rs:99:17: 99:53
        goto -> bb26;                    // scope 5 at ui/let-else/let-else-drop-order.rs:99:17: 99:53
    }

    bb25: {
        _57 = &_46;                      // scope 5 at ui/let-else/let-else-drop-order.rs:99:42: 99:43
        _60 = const _;                   // scope 5 at ui/let-else/let-else-drop-order.rs:99:47: 99:52
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:99:47: 99:52
                                         // + literal: Const { ty: &&str, val: Unevaluated(DropAccountant::assert_equality_last_two_lists, [], Some(promoted[0])) }
        _58 = _60;                       // scope 5 at ui/let-else/let-else-drop-order.rs:99:47: 99:52
        _56 = <&String as PartialEq<&str>>::eq(move _57, move _58) -> [return: bb32, unwind: bb35]; // scope 5 at ui/let-else/let-else-drop-order.rs:99:42: 99:52
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:99:42: 99:52
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &String, &'b &str) -> bool {<&String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb26: {
        _47 = Not(move _48);             // scope 5 at ui/let-else/let-else-drop-order.rs:99:16: 99:53
        switchInt(move _47) -> [0: bb19, otherwise: bb33]; // scope 5 at ui/let-else/let-else-drop-order.rs:99:16: 99:53
    }

    bb27: {
        _49 = const true;                // scope 5 at ui/let-else/let-else-drop-order.rs:99:18: 99:38
        goto -> bb29;                    // scope 5 at ui/let-else/let-else-drop-order.rs:99:18: 99:38
    }

    bb28: {
        _54 = &_45;                      // scope 5 at ui/let-else/let-else-drop-order.rs:99:28: 99:29
        _61 = const _;                   // scope 5 at ui/let-else/let-else-drop-order.rs:99:33: 99:38
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:99:33: 99:38
                                         // + literal: Const { ty: &&str, val: Unevaluated(DropAccountant::assert_equality_last_two_lists, [], Some(promoted[1])) }
        _55 = _61;                       // scope 5 at ui/let-else/let-else-drop-order.rs:99:33: 99:38
        _53 = <&String as PartialEq<&str>>::eq(move _54, move _55) -> [return: bb31, unwind: bb35]; // scope 5 at ui/let-else/let-else-drop-order.rs:99:28: 99:38
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:99:28: 99:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &String, &'b &str) -> bool {<&String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb29: {
        switchInt(move _49) -> [0: bb25, otherwise: bb24]; // scope 5 at ui/let-else/let-else-drop-order.rs:99:17: 99:53
    }

    bb30: {
        switchInt(move _50) -> [0: bb28, otherwise: bb27]; // scope 5 at ui/let-else/let-else-drop-order.rs:99:18: 99:38
    }

    bb31: {
        _49 = move _53;                  // scope 5 at ui/let-else/let-else-drop-order.rs:99:18: 99:38
        goto -> bb29;                    // scope 5 at ui/let-else/let-else-drop-order.rs:99:18: 99:38
    }

    bb32: {
        _48 = move _56;                  // scope 5 at ui/let-else/let-else-drop-order.rs:99:17: 99:53
        goto -> bb26;                    // scope 5 at ui/let-else/let-else-drop-order.rs:99:17: 99:53
    }

    bb33: {
        _59 = begin_panic::<&str>(const "not equal: '{last:?}' != '{before_last:?}'") -> bb35; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:100:24: 100:68
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb34: {
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:103:6: 103:6
    }

    bb35 (cleanup): {
        drop(_2) -> bb36;                // scope 0 at ui/let-else/let-else-drop-order.rs:103:5: 103:6
    }

    bb36 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-drop-order.rs:94:5: 103:6
    }
}

promoted[0] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::assert_equality_last_two_lists: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/let-else/let-else-drop-order.rs:99:47: 99:52
    let mut _1: &str;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:99:47: 99:52

    bb0: {
        _1 = const "n/a";                // scope 0 at ui/let-else/let-else-drop-order.rs:99:47: 99:52
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:99:47: 99:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-drop-order.rs:99:47: 99:52
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:99:47: 99:52
    }
}

promoted[1] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::assert_equality_last_two_lists: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/let-else/let-else-drop-order.rs:99:33: 99:38
    let mut _1: &str;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:99:33: 99:38

    bb0: {
        _1 = const "n/a";                // scope 0 at ui/let-else/let-else-drop-order.rs:99:33: 99:38
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:99:33: 99:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-drop-order.rs:99:33: 99:38
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:99:33: 99:38
    }
}

fn get_comma_list(_1: &[String]) -> Vec<String> {
    debug sl => _1;                      // in scope 0 at ui/let-else/let-else-drop-order.rs:106:19: 106:21
    let mut _0: std::vec::Vec<std::string::String>; // return place in scope 0 at ui/let-else/let-else-drop-order.rs:106:37: 106:48
    let mut _2: std::iter::Chain<std::iter::Once<std::string::String>, std::iter::Map<std::slice::Chunks<'_, std::string::String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>>; // in scope 0 at ui/let-else/let-else-drop-order.rs:107:5: 108:55
    let mut _3: std::iter::Once<std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:107:5: 107:35
    let mut _4: std::string::String;     // in scope 0 at ui/let-else/let-else-drop-order.rs:107:21: 107:34
    let mut _5: &std::string::String;    // in scope 0 at ui/let-else/let-else-drop-order.rs:107:21: 107:34
    let _6: usize;                       // in scope 0 at ui/let-else/let-else-drop-order.rs:107:24: 107:25
    let mut _7: usize;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:107:21: 107:26
    let mut _8: bool;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:107:21: 107:26
    let mut _9: std::iter::Map<std::slice::Chunks<'_, std::string::String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>; // in scope 0 at ui/let-else/let-else-drop-order.rs:108:16: 108:54
    let mut _10: std::slice::Chunks<'_, std::string::String>; // in scope 0 at ui/let-else/let-else-drop-order.rs:108:16: 108:33
    let mut _11: &[std::string::String]; // in scope 0 at ui/let-else/let-else-drop-order.rs:108:16: 108:33
    let _12: &[std::string::String];     // in scope 0 at ui/let-else/let-else-drop-order.rs:108:16: 108:23
    let mut _13: &[std::string::String]; // in scope 0 at ui/let-else/let-else-drop-order.rs:108:16: 108:18
    let mut _14: std::ops::RangeFrom<usize>; // in scope 0 at ui/let-else/let-else-drop-order.rs:108:19: 108:22
    let mut _15: [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]; // in scope 0 at ui/let-else/let-else-drop-order.rs:108:38: 108:53
    let mut _16: bool;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:108:54: 108:55

    bb0: {
        _16 = const false;               // scope 0 at ui/let-else/let-else-drop-order.rs:107:5: 108:55
        _6 = const 0_usize;              // scope 0 at ui/let-else/let-else-drop-order.rs:107:24: 107:25
        _7 = Len((*_1));                 // scope 0 at ui/let-else/let-else-drop-order.rs:107:21: 107:26
        _8 = Lt(_6, _7);                 // scope 0 at ui/let-else/let-else-drop-order.rs:107:21: 107:26
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> bb1; // scope 0 at ui/let-else/let-else-drop-order.rs:107:21: 107:26
    }

    bb1: {
        _5 = &(*_1)[_6];                 // scope 0 at ui/let-else/let-else-drop-order.rs:107:21: 107:34
        _4 = <String as Clone>::clone(move _5) -> bb2; // scope 0 at ui/let-else/let-else-drop-order.rs:107:21: 107:34
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:107:27: 107:32
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> String {<String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = once::<String>(move _4) -> bb3; // scope 0 at ui/let-else/let-else-drop-order.rs:107:5: 107:35
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:107:5: 107:20
                                         // + literal: Const { ty: fn(String) -> std::iter::Once<String> {once::<String>}, val: Value(<ZST>) }
    }

    bb3: {
        _16 = const true;                // scope 0 at ui/let-else/let-else-drop-order.rs:107:34: 107:35
        _13 = _1;                        // scope 0 at ui/let-else/let-else-drop-order.rs:108:16: 108:18
        _14 = const RangeFrom::<usize> {{ start: 1_usize }}; // scope 0 at ui/let-else/let-else-drop-order.rs:108:19: 108:22
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:108:19: 108:22
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000001)) }
        _12 = <[String] as Index<RangeFrom<usize>>>::index(move _13, move _14) -> [return: bb4, unwind: bb11]; // scope 0 at ui/let-else/let-else-drop-order.rs:108:16: 108:23
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:108:16: 108:23
                                         // + literal: Const { ty: for<'a> fn(&'a [String], RangeFrom<usize>) -> &'a <[String] as Index<RangeFrom<usize>>>::Output {<[String] as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = _12;                       // scope 0 at ui/let-else/let-else-drop-order.rs:108:16: 108:33
        _10 = core::slice::<impl [String]>::chunks(move _11, const 2_usize) -> [return: bb5, unwind: bb11]; // scope 0 at ui/let-else/let-else-drop-order.rs:108:16: 108:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:108:24: 108:30
                                         // + literal: Const { ty: for<'a> fn(&'a [String], usize) -> Chunks<'a, String> {core::slice::<impl [String]>::chunks}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = <Chunks<'_, String> as Iterator>::map::<String, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>(move _10, move _15) -> [return: bb6, unwind: bb11]; // scope 0 at ui/let-else/let-else-drop-order.rs:108:16: 108:54
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:108:34: 108:37
                                         // + literal: Const { ty: fn(Chunks<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]) -> Map<Chunks<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]> {<Chunks<'_, String> as Iterator>::map::<String, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = const false;               // scope 0 at ui/let-else/let-else-drop-order.rs:107:5: 108:55
        _2 = <std::iter::Once<String> as Iterator>::chain::<Map<Chunks<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>>(move _3, move _9) -> [return: bb7, unwind: bb11]; // scope 0 at ui/let-else/let-else-drop-order.rs:107:5: 108:55
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:108:10: 108:15
                                         // + literal: Const { ty: fn(std::iter::Once<String>, Map<Chunks<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>) -> std::iter::Chain<std::iter::Once<String>, <Map<Chunks<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]> as IntoIterator>::IntoIter> {<std::iter::Once<String> as Iterator>::chain::<Map<Chunks<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>>}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = const false;               // scope 0 at ui/let-else/let-else-drop-order.rs:108:54: 108:55
        _0 = <std::iter::Chain<std::iter::Once<String>, Map<Chunks<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>> as Iterator>::collect::<Vec<String>>(move _2) -> bb8; // scope 0 at ui/let-else/let-else-drop-order.rs:107:5: 109:34
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:109:10: 109:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::iter::Chain<std::iter::Once<String>, Map<Chunks<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>>) -> Vec<String> {<std::iter::Chain<std::iter::Once<String>, Map<Chunks<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>> as Iterator>::collect::<Vec<String>>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:110:2: 110:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-drop-order.rs:106:1: 110:2
    }

    bb10 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at ui/let-else/let-else-drop-order.rs:108:54: 108:55
    }

    bb11 (cleanup): {
        switchInt(_16) -> [0: bb9, otherwise: bb10]; // scope 0 at ui/let-else/let-else-drop-order.rs:108:54: 108:55
    }
}

fn get_comma_list::{closure#0}(_1: &mut [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41], _2: &[String]) -> String {
    debug c => _2;                       // in scope 0 at ui/let-else/let-else-drop-order.rs:108:39: 108:40
    let mut _0: std::string::String;     // return place in scope 0 at ui/let-else/let-else-drop-order.rs:108:42: 108:42
    let mut _3: &[std::string::String];  // in scope 0 at ui/let-else/let-else-drop-order.rs:108:42: 108:53
    let mut _4: &str;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:108:49: 108:52
    let _5: &str;                        // in scope 0 at ui/let-else/let-else-drop-order.rs:108:49: 108:52

    bb0: {
        _3 = _2;                         // scope 0 at ui/let-else/let-else-drop-order.rs:108:42: 108:53
        _5 = const ",";                  // scope 0 at ui/let-else/let-else-drop-order.rs:108:49: 108:52
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:108:49: 108:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/let-else/let-else-drop-order.rs:108:49: 108:52
        _0 = slice::<impl [String]>::join::<&str>(move _3, move _4) -> bb1; // scope 0 at ui/let-else/let-else-drop-order.rs:108:42: 108:53
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:108:44: 108:48
                                         // + literal: Const { ty: for<'a> fn(&'a [String], &str) -> <[String] as Join<&str>>::Output {slice::<impl [String]>::join::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:108:53: 108:53
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:114:1: 114:27>::drop(_1: &mut Droppy<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:115:13: 115:22
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-drop-order.rs:115:24: 115:24
    let _2: ();                          // in scope 0 at ui/let-else/let-else-drop-order.rs:116:9: 116:28
    let mut _3: &DropAccountant;         // in scope 0 at ui/let-else/let-else-drop-order.rs:116:9: 116:28

    bb0: {
        _3 = &((*_1).0: DropAccountant); // scope 0 at ui/let-else/let-else-drop-order.rs:116:9: 116:28
        _2 = DropAccountant::push::<&str>(move _3, const "drop") -> bb1; // scope 0 at ui/let-else/let-else-drop-order.rs:116:9: 116:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:116:16: 116:20
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:116:21: 116:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:117:6: 117:6
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:126:1: 126:31>::drop(_1: &mut DroppyEnum<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:127:13: 127:22
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-drop-order.rs:127:24: 127:24
    let _2: ();                          // in scope 0 at ui/let-else/let-else-drop-order.rs:128:9: 132:22
    let mut _3: &DropAccountant;         // in scope 0 at ui/let-else/let-else-drop-order.rs:128:9: 132:22
    let _4: &mut DropAccountant;         // in scope 0 at ui/let-else/let-else-drop-order.rs:128:9: 131:10
    let mut _5: isize;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:129:13: 129:42
    let _6: &mut DropAccountant;         // in scope 0 at ui/let-else/let-else-drop-order.rs:129:30: 129:33
    let _7: &mut T;                      // in scope 0 at ui/let-else/let-else-drop-order.rs:129:35: 129:41
    let _8: &mut DropAccountant;         // in scope 0 at ui/let-else/let-else-drop-order.rs:130:30: 130:33
    scope 1 {
        debug acc => _6;                 // in scope 1 at ui/let-else/let-else-drop-order.rs:129:30: 129:33
        debug _inner => _7;              // in scope 1 at ui/let-else/let-else-drop-order.rs:129:35: 129:41
    }
    scope 2 {
        debug acc => _8;                 // in scope 2 at ui/let-else/let-else-drop-order.rs:130:30: 130:33
    }

    bb0: {
        _5 = discriminant((*_1));        // scope 0 at ui/let-else/let-else-drop-order.rs:128:15: 128:19
        switchInt(move _5) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/let-else/let-else-drop-order.rs:128:9: 128:19
    }

    bb1: {
        _8 = &mut (((*_1) as None).0: DropAccountant); // scope 0 at ui/let-else/let-else-drop-order.rs:130:30: 130:33
        _4 = &mut (*_8);                 // scope 2 at ui/let-else/let-else-drop-order.rs:130:38: 130:41
        goto -> bb4;                     // scope 0 at ui/let-else/let-else-drop-order.rs:130:40: 130:41
    }

    bb2: {
        unreachable;                     // scope 0 at ui/let-else/let-else-drop-order.rs:128:15: 128:19
    }

    bb3: {
        _6 = &mut (((*_1) as Some).0: DropAccountant); // scope 0 at ui/let-else/let-else-drop-order.rs:129:30: 129:33
        _7 = &mut (((*_1) as Some).1: T); // scope 0 at ui/let-else/let-else-drop-order.rs:129:35: 129:41
        _4 = move _6;                    // scope 1 at ui/let-else/let-else-drop-order.rs:129:46: 129:49
        goto -> bb4;                     // scope 0 at ui/let-else/let-else-drop-order.rs:129:48: 129:49
    }

    bb4: {
        _3 = &(*_4);                     // scope 0 at ui/let-else/let-else-drop-order.rs:128:9: 132:22
        _2 = DropAccountant::push::<&str>(move _3, const "drop") -> bb5; // scope 0 at ui/let-else/let-else-drop-order.rs:128:9: 132:22
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:132:10: 132:14
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:132:15: 132:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:133:6: 133:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-drop-order.rs:230:11: 230:11
    let _1: DropAccountant;              // in scope 0 at ui/let-else/let-else-drop-order.rs:231:9: 231:12
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/let-else/let-else-drop-order.rs:233:14: 233:39
    let mut _5: &[&str; 1];              // in scope 0 at ui/let-else/let-else-drop-order.rs:233:14: 233:39
    let _6: &[&str; 1];                  // in scope 0 at ui/let-else/let-else-drop-order.rs:233:14: 233:39
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:236:5: 236:26
    let mut _11: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:236:5: 236:26
    let mut _14: Droppy<u32>;            // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _15: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _16: u32;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
    let _17: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _18: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let _19: Droppy<u32>;                // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _20: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _21: u32;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
    let _22: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _23: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _24: Droppy<u32>;            // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _25: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _26: u32;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
    let _27: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _28: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _30: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _31: u32;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
    let mut _32: Droppy<u32>;            // in scope 0 at ui/let-else/let-else-drop-order.rs:152:17: 155:18
    let _34: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _35: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _36: Droppy<u32>;            // in scope 0 at ui/let-else/let-else-drop-order.rs:161:31: 161:59
    let mut _37: Droppy<u32>;            // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _38: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _39: u32;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
    let _40: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _41: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let _42: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:217:9: 217:24
    let mut _43: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:217:9: 217:24
    let _44: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:218:9: 218:24
    let mut _45: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:218:9: 218:24
    let _46: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:219:9: 219:24
    let mut _47: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:219:9: 219:24
    let _48: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:220:9: 220:24
    let mut _49: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:220:9: 220:24
    let _50: Droppy<u32>;                // in scope 0 at ui/let-else/let-else-drop-order.rs:223:35: 223:54
    let mut _51: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:223:35: 223:54
    let mut _52: u32;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:223:52: 223:53
    let _53: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _54: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _55: Droppy<u32>;            // in scope 0 at ui/let-else/let-else-drop-order.rs:226:39: 226:58
    let mut _56: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:226:39: 226:58
    let mut _57: u32;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:226:56: 226:57
    let _58: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _59: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let _60: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:238:5: 238:31
    let mut _61: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:238:5: 238:31
    let mut _64: Droppy<u32>;            // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _65: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _66: u32;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _67: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _68: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _69: Droppy<u32>;                // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _70: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _71: u32;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _72: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _73: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _74: Droppy<u32>;            // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _75: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _76: u32;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _77: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _78: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _80: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _81: u32;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let mut _82: Droppy<u32>;            // in scope 0 at ui/let-else/let-else-drop-order.rs:152:17: 155:18
    let _84: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _85: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _86: Droppy<u32>;            // in scope 0 at ui/let-else/let-else-drop-order.rs:161:31: 161:59
    let mut _87: Droppy<u32>;            // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _88: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _89: u32;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _90: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _91: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _92: Droppy<u32>;            // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _93: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _94: u32;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _95: ();                         // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _96: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _97: Droppy<u32>;            // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _98: &DropAccountant;        // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _99: u32;                    // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _100: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _101: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _102: Droppy<u32>;               // in scope 0 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
    let mut _103: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
    let mut _104: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:196:51: 196:52
    let _105: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _106: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _107: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
    let mut _108: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
    let mut _109: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:199:55: 199:56
    let _110: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _111: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _112: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:240:5: 240:41
    let mut _113: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:240:5: 240:41
    let _114: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:241:5: 241:22
    let mut _115: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:241:5: 241:22
    let _116: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:244:5: 244:27
    let mut _117: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:244:5: 244:27
    let mut _121: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _122: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _123: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
    let _124: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _125: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _127: &u32;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:142:32: 142:39
    let _128: Droppy<u32>;               // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _129: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _130: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
    let _131: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _132: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _134: &mut u32;              // in scope 0 at ui/let-else/let-else-drop-order.rs:145:36: 145:49
    let mut _135: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _136: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _137: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
    let _138: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _139: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _141: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _142: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
    let mut _144: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:152:17: 155:18
    let _146: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _147: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _149: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:161:31: 161:59
    let mut _150: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _151: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
    let mut _152: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
    let _153: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _154: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let _155: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:217:9: 217:24
    let mut _156: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:217:9: 217:24
    let _157: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:218:9: 218:24
    let mut _158: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:218:9: 218:24
    let _159: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:219:9: 219:24
    let mut _160: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:219:9: 219:24
    let _161: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:220:9: 220:24
    let mut _162: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:220:9: 220:24
    let _164: Droppy<u32>;               // in scope 0 at ui/let-else/let-else-drop-order.rs:223:35: 223:54
    let mut _165: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:223:35: 223:54
    let mut _166: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:223:52: 223:53
    let _167: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _168: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _170: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:226:39: 226:58
    let mut _171: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:226:39: 226:58
    let mut _172: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:226:56: 226:57
    let _173: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let mut _174: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
    let _175: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:246:5: 246:32
    let mut _176: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:246:5: 246:32
    let mut _180: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _181: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _182: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _183: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _184: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _186: &u32;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:142:32: 142:39
    let _187: Droppy<u32>;               // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _188: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _189: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _190: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _191: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _193: &mut u32;              // in scope 0 at ui/let-else/let-else-drop-order.rs:145:36: 145:49
    let mut _194: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _195: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _196: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _197: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _198: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _200: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _201: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let mut _203: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:152:17: 155:18
    let _205: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _206: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _208: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:161:31: 161:59
    let mut _209: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _210: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _211: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _212: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _213: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _215: (u32, i32);            // in scope 0 at ui/let-else/let-else-drop-order.rs:170:37: 170:49
    let mut _216: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:170:38: 170:44
    let mut _217: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _218: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _219: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _220: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _221: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _223: [u32; 1];              // in scope 0 at ui/let-else/let-else-drop-order.rs:173:33: 173:41
    let mut _224: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:173:34: 173:40
    let mut _225: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _226: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _227: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _228: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _229: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _231: &u32;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:196:39: 196:55
    let _232: Droppy<u32>;               // in scope 0 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
    let mut _233: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
    let mut _234: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:196:51: 196:52
    let _235: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _236: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _238: &mut u32;              // in scope 0 at ui/let-else/let-else-drop-order.rs:199:39: 199:59
    let mut _239: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
    let mut _240: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
    let mut _241: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:199:55: 199:56
    let _242: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _243: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _244: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:248:5: 248:41
    let mut _245: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:248:5: 248:41
    let _246: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:249:5: 249:22
    let mut _247: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:249:5: 249:22
    let _248: ();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:9: 81:59
    let mut _249: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _250: &[&str];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _251: &[&str; 1];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let _252: &[&str; 1];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _253: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _254: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let _255: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let _256: ();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _257: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _258: &[&str];               // in scope 0 at ui/let-else/let-else-drop-order.rs:253:14: 253:42
    let mut _259: &[&str; 1];            // in scope 0 at ui/let-else/let-else-drop-order.rs:253:14: 253:42
    let _260: &[&str; 1];                // in scope 0 at ui/let-else/let-else-drop-order.rs:253:14: 253:42
    let mut _261: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _262: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _263: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _264: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:255:5: 255:40
    let mut _265: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:255:5: 255:40
    let _268: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _269: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _270: ((), DroppyEnum<u32>); // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _271: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _272: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let mut _273: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:256:24: 256:46
    let _274: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _275: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _276: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _277: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _278: &DroppyEnum<u32>;      // in scope 0 at ui/let-else/let-else-drop-order.rs:142:32: 142:39
    let _279: ((), DroppyEnum<u32>);     // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _280: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _281: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let mut _282: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:256:24: 256:46
    let _283: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _284: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _285: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _286: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _287: &mut DroppyEnum<u32>;  // in scope 0 at ui/let-else/let-else-drop-order.rs:145:36: 145:49
    let mut _288: ((), DroppyEnum<u32>); // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _289: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _290: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let mut _291: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:256:24: 256:46
    let _292: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _293: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _295: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _296: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _297: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _298: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _299: ((), DroppyEnum<u32>); // in scope 0 at ui/let-else/let-else-drop-order.rs:152:17: 155:18
    let mut _301: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:256:24: 256:46
    let _302: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _303: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _304: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _305: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _306: ((), DroppyEnum<u32>); // in scope 0 at ui/let-else/let-else-drop-order.rs:161:31: 161:59
    let mut _307: ((), DroppyEnum<u32>); // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _308: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _309: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let mut _310: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:256:24: 256:46
    let _311: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _312: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _313: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _314: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _315: (DroppyEnum<u32>, i32); // in scope 0 at ui/let-else/let-else-drop-order.rs:170:37: 170:49
    let mut _316: DroppyEnum<u32>;       // in scope 0 at ui/let-else/let-else-drop-order.rs:170:38: 170:44
    let mut _317: ((), DroppyEnum<u32>); // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _318: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _319: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let mut _320: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:256:24: 256:46
    let _321: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _322: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _323: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _324: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _325: [DroppyEnum<u32>; 1];  // in scope 0 at ui/let-else/let-else-drop-order.rs:173:33: 173:41
    let mut _326: DroppyEnum<u32>;       // in scope 0 at ui/let-else/let-else-drop-order.rs:173:34: 173:40
    let mut _327: ((), DroppyEnum<u32>); // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _328: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _329: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let mut _330: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:256:24: 256:46
    let _331: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _332: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _333: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _334: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _335: &DroppyEnum<u32>;      // in scope 0 at ui/let-else/let-else-drop-order.rs:196:39: 196:55
    let _336: ((), DroppyEnum<u32>);     // in scope 0 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
    let mut _337: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
    let mut _338: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:196:51: 196:52
    let mut _339: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:256:24: 256:46
    let _340: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _341: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _342: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _343: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _344: &mut DroppyEnum<u32>;  // in scope 0 at ui/let-else/let-else-drop-order.rs:199:39: 199:59
    let mut _345: ((), DroppyEnum<u32>); // in scope 0 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
    let mut _346: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
    let mut _347: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:199:55: 199:56
    let mut _348: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:256:24: 256:46
    let _349: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _350: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _351: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:257:5: 257:41
    let mut _352: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:257:5: 257:41
    let _355: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _356: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _358: ((), DroppyEnum<u32>); // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _359: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _360: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let mut _361: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:258:24: 258:47
    let _362: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _363: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _364: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _365: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _367: &DroppyEnum<u32>;      // in scope 0 at ui/let-else/let-else-drop-order.rs:142:32: 142:39
    let _368: ((), DroppyEnum<u32>);     // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _369: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _370: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let mut _371: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:258:24: 258:47
    let _372: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _373: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _374: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _375: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _377: &mut DroppyEnum<u32>;  // in scope 0 at ui/let-else/let-else-drop-order.rs:145:36: 145:49
    let mut _378: ((), DroppyEnum<u32>); // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _379: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _380: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let mut _381: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:258:24: 258:47
    let _382: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _383: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _385: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _386: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _387: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _388: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _390: ((), DroppyEnum<u32>); // in scope 0 at ui/let-else/let-else-drop-order.rs:152:17: 155:18
    let mut _392: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:258:24: 258:47
    let _393: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _394: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _395: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _396: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _398: ((), DroppyEnum<u32>); // in scope 0 at ui/let-else/let-else-drop-order.rs:161:31: 161:59
    let mut _399: ((), DroppyEnum<u32>); // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _400: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _401: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let mut _402: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:258:24: 258:47
    let _403: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _404: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _405: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _406: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _408: (DroppyEnum<u32>, i32); // in scope 0 at ui/let-else/let-else-drop-order.rs:170:37: 170:49
    let mut _409: DroppyEnum<u32>;       // in scope 0 at ui/let-else/let-else-drop-order.rs:170:38: 170:44
    let mut _410: ((), DroppyEnum<u32>); // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _411: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _412: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let mut _413: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:258:24: 258:47
    let _414: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _415: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _416: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _417: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _419: [DroppyEnum<u32>; 1];  // in scope 0 at ui/let-else/let-else-drop-order.rs:173:33: 173:41
    let mut _420: DroppyEnum<u32>;       // in scope 0 at ui/let-else/let-else-drop-order.rs:173:34: 173:40
    let mut _421: ((), DroppyEnum<u32>); // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _422: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _423: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let mut _424: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:258:24: 258:47
    let _425: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _426: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _427: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _428: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _430: &DroppyEnum<u32>;      // in scope 0 at ui/let-else/let-else-drop-order.rs:196:39: 196:55
    let _431: ((), DroppyEnum<u32>);     // in scope 0 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
    let mut _432: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
    let mut _433: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:196:51: 196:52
    let mut _434: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:258:24: 258:47
    let _435: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _436: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _437: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _438: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _440: &mut DroppyEnum<u32>;  // in scope 0 at ui/let-else/let-else-drop-order.rs:199:39: 199:59
    let mut _441: ((), DroppyEnum<u32>); // in scope 0 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
    let mut _442: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
    let mut _443: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:199:55: 199:56
    let mut _444: isize;                 // in scope 0 at ui/let-else/let-else-drop-order.rs:258:24: 258:47
    let _445: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _446: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _447: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:259:5: 259:22
    let mut _448: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:259:5: 259:22
    let _449: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:261:5: 261:41
    let mut _450: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:261:5: 261:41
    let mut _451: &str;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:261:29: 261:40
    let _452: &str;                      // in scope 0 at ui/let-else/let-else-drop-order.rs:261:29: 261:40
    let _453: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:263:5: 263:40
    let mut _454: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:263:5: 263:40
    let _457: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _458: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _459: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _460: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _461: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _462: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _463: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _464: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _465: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _466: &u32;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:142:32: 142:39
    let _467: Droppy<u32>;               // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _468: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _469: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _470: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _471: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _472: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _473: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _474: &mut u32;              // in scope 0 at ui/let-else/let-else-drop-order.rs:145:36: 145:49
    let mut _475: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _476: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _477: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _478: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _479: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _481: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _482: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _483: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _484: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _485: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:152:17: 155:18
    let _487: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _488: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _489: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _490: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _491: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:161:31: 161:59
    let mut _492: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _493: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _494: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _495: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _496: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _497: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _498: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _499: (u32, i32);            // in scope 0 at ui/let-else/let-else-drop-order.rs:170:37: 170:49
    let mut _500: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:170:38: 170:44
    let mut _501: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _502: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _503: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _504: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _505: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _506: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _507: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _508: [u32; 1];              // in scope 0 at ui/let-else/let-else-drop-order.rs:173:33: 173:41
    let mut _509: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:173:34: 173:40
    let mut _510: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _511: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _512: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _513: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _514: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _515: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _516: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _517: &u32;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:196:39: 196:55
    let _518: Droppy<u32>;               // in scope 0 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
    let mut _519: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
    let mut _520: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:196:51: 196:52
    let _521: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _522: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _523: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _524: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _525: &mut u32;              // in scope 0 at ui/let-else/let-else-drop-order.rs:199:39: 199:59
    let mut _526: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
    let mut _527: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
    let mut _528: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:199:55: 199:56
    let _529: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _530: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _531: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:265:5: 265:40
    let mut _532: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:265:5: 265:40
    let _535: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _536: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _537: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _538: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _539: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _540: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _541: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _542: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _543: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _544: &u32;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:142:32: 142:39
    let _545: Droppy<u32>;               // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _546: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _547: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _548: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _549: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _550: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _551: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _552: &mut u32;              // in scope 0 at ui/let-else/let-else-drop-order.rs:145:36: 145:49
    let mut _553: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _554: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _555: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _556: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _557: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _559: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _560: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _561: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _562: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _563: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:152:17: 155:18
    let _565: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _566: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _567: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _568: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _569: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:161:31: 161:59
    let mut _570: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _571: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _572: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _573: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _574: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _575: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _576: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _577: (u32, i32);            // in scope 0 at ui/let-else/let-else-drop-order.rs:170:37: 170:49
    let mut _578: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:170:38: 170:44
    let mut _579: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _580: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _581: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _582: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _583: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _584: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _585: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _586: [u32; 1];              // in scope 0 at ui/let-else/let-else-drop-order.rs:173:33: 173:41
    let mut _587: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:173:34: 173:40
    let mut _588: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _589: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
    let mut _590: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
    let _591: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _592: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _593: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _594: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _595: &u32;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:196:39: 196:55
    let _596: Droppy<u32>;               // in scope 0 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
    let mut _597: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
    let mut _598: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:196:51: 196:52
    let _599: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _600: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _601: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _602: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    let mut _603: &mut u32;              // in scope 0 at ui/let-else/let-else-drop-order.rs:199:39: 199:59
    let mut _604: Droppy<u32>;           // in scope 0 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
    let mut _605: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
    let mut _606: u32;                   // in scope 0 at ui/let-else/let-else-drop-order.rs:199:55: 199:56
    let _607: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let mut _608: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    let _609: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:267:5: 267:22
    let mut _610: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:267:5: 267:22
    let _611: ();                        // in scope 0 at ui/let-else/let-else-drop-order.rs:269:5: 269:41
    let mut _612: &DropAccountant;       // in scope 0 at ui/let-else/let-else-drop-order.rs:269:5: 269:41
    let mut _613: &str;                  // in scope 0 at ui/let-else/let-else-drop-order.rs:269:29: 269:40
    let _614: &str;                      // in scope 0 at ui/let-else/let-else-drop-order.rs:269:29: 269:40
    scope 1 {
        debug acc => _1;                 // in scope 1 at ui/let-else/let-else-drop-order.rs:231:9: 231:12
        let _12: &DropAccountant;        // in scope 1 at ui/let-else/let-else-drop-order.rs:205:13: 205:16
        let mut _619: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        let mut _620: &[&str; 1];        // in scope 1 at ui/let-else/let-else-drop-order.rs:233:14: 233:39
        scope 2 {
            debug acc => _12;            // in scope 2 at ui/let-else/let-else-drop-order.rs:205:13: 205:16
            let _13: u32;                // in scope 2 at ui/let-else/let-else-drop-order.rs:213:13: 213:14
            scope 3 {
                debug v => _13;          // in scope 3 at ui/let-else/let-else-drop-order.rs:213:13: 213:14
                let _29: Droppy<u32>;    // in scope 3 at ui/let-else/let-else-drop-order.rs:149:17: 149:18
                let _62: &DropAccountant; // in scope 3 at ui/let-else/let-else-drop-order.rs:179:13: 179:16
                scope 4 {
                }
                scope 5 {
                }
                scope 6 {
                }
                scope 7 {
                    debug w => _29;      // in scope 7 at ui/let-else/let-else-drop-order.rs:149:17: 149:18
                    let _33: Droppy<u32>; // in scope 7 at ui/let-else/let-else-drop-order.rs:153:25: 153:26
                    scope 8 {
                    }
                    scope 9 {
                        debug w => _33;  // in scope 9 at ui/let-else/let-else-drop-order.rs:153:25: 153:26
                    }
                }
                scope 10 {
                }
                scope 11 {
                }
                scope 12 {
                }
                scope 13 {
                    debug acc => _62;    // in scope 13 at ui/let-else/let-else-drop-order.rs:179:13: 179:16
                    let _63: u32;        // in scope 13 at ui/let-else/let-else-drop-order.rs:180:13: 180:14
                    scope 14 {
                        debug v => _63;  // in scope 14 at ui/let-else/let-else-drop-order.rs:180:13: 180:14
                        let _79: Droppy<u32>; // in scope 14 at ui/let-else/let-else-drop-order.rs:149:17: 149:18
                        let _118: &DropAccountant; // in scope 14 at ui/let-else/let-else-drop-order.rs:205:13: 205:16
                        scope 15 {
                        }
                        scope 16 {
                        }
                        scope 17 {
                        }
                        scope 18 {
                            debug w => _79; // in scope 18 at ui/let-else/let-else-drop-order.rs:149:17: 149:18
                            let _83: Droppy<u32>; // in scope 18 at ui/let-else/let-else-drop-order.rs:153:25: 153:26
                            scope 19 {
                            }
                            scope 20 {
                                debug w => _83; // in scope 20 at ui/let-else/let-else-drop-order.rs:153:25: 153:26
                            }
                        }
                        scope 21 {
                        }
                        scope 22 {
                        }
                        scope 23 {
                        }
                        scope 24 {
                        }
                        scope 25 {
                        }
                        scope 26 {
                            debug acc => _118; // in scope 26 at ui/let-else/let-else-drop-order.rs:205:13: 205:16
                            let _119: u32; // in scope 26 at ui/let-else/let-else-drop-order.rs:213:13: 213:14
                            scope 27 {
                                debug v => _119; // in scope 27 at ui/let-else/let-else-drop-order.rs:213:13: 213:14
                                let _120: u32; // in scope 27 at ui/let-else/let-else-drop-order.rs:245:17: 245:19
                                let _126: u32; // in scope 27 at ui/let-else/let-else-drop-order.rs:245:17: 245:19
                                let _133: u32; // in scope 27 at ui/let-else/let-else-drop-order.rs:245:17: 245:19
                                let _140: Droppy<u32>; // in scope 27 at ui/let-else/let-else-drop-order.rs:149:17: 149:18
                                let _148: u32; // in scope 27 at ui/let-else/let-else-drop-order.rs:245:17: 245:19
                                let _163: &u32; // in scope 27 at ui/let-else/let-else-drop-order.rs:245:17: 245:19
                                let _169: &mut u32; // in scope 27 at ui/let-else/let-else-drop-order.rs:245:17: 245:19
                                let _177: &DropAccountant; // in scope 27 at ui/let-else/let-else-drop-order.rs:179:13: 179:16
                                scope 28 {
                                    debug _v => _120; // in scope 28 at ui/let-else/let-else-drop-order.rs:245:17: 245:19
                                }
                                scope 29 {
                                    debug _v => _126; // in scope 29 at ui/let-else/let-else-drop-order.rs:245:17: 245:19
                                }
                                scope 30 {
                                    debug _v => _133; // in scope 30 at ui/let-else/let-else-drop-order.rs:245:17: 245:19
                                }
                                scope 31 {
                                    debug w => _140; // in scope 31 at ui/let-else/let-else-drop-order.rs:149:17: 149:18
                                    let _143: u32; // in scope 31 at ui/let-else/let-else-drop-order.rs:245:17: 245:19
                                    let _145: Droppy<u32>; // in scope 31 at ui/let-else/let-else-drop-order.rs:153:25: 153:26
                                    scope 32 {
                                        debug _v => _143; // in scope 32 at ui/let-else/let-else-drop-order.rs:245:17: 245:19
                                    }
                                    scope 33 {
                                        debug w => _145; // in scope 33 at ui/let-else/let-else-drop-order.rs:153:25: 153:26
                                    }
                                }
                                scope 34 {
                                    debug _v => _148; // in scope 34 at ui/let-else/let-else-drop-order.rs:245:17: 245:19
                                }
                                scope 35 {
                                    debug _v => _163; // in scope 35 at ui/let-else/let-else-drop-order.rs:245:17: 245:19
                                }
                                scope 36 {
                                    debug _v => _169; // in scope 36 at ui/let-else/let-else-drop-order.rs:245:17: 245:19
                                }
                                scope 37 {
                                    debug acc => _177; // in scope 37 at ui/let-else/let-else-drop-order.rs:179:13: 179:16
                                    let _178: u32; // in scope 37 at ui/let-else/let-else-drop-order.rs:180:13: 180:14
                                    scope 38 {
                                        debug v => _178; // in scope 38 at ui/let-else/let-else-drop-order.rs:180:13: 180:14
                                        let _179: u32; // in scope 38 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                        let _185: u32; // in scope 38 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                        let _192: u32; // in scope 38 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                        let _199: Droppy<u32>; // in scope 38 at ui/let-else/let-else-drop-order.rs:149:17: 149:18
                                        let _207: u32; // in scope 38 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                        let _214: u32; // in scope 38 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                        let _222: u32; // in scope 38 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                        let _230: &u32; // in scope 38 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                        let _237: &mut u32; // in scope 38 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                        let _266: &DropAccountant; // in scope 38 at ui/let-else/let-else-drop-order.rs:179:13: 179:16
                                        let mut _615: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                        let mut _616: &[&str; 1]; // in scope 38 at ui/let-else/let-else-drop-order.rs:253:14: 253:42
                                        let mut _617: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
                                        let mut _618: &[&str; 1]; // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                        scope 39 {
                                            debug _v => _179; // in scope 39 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                        }
                                        scope 40 {
                                            debug _v => _185; // in scope 40 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                        }
                                        scope 41 {
                                            debug _v => _192; // in scope 41 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                        }
                                        scope 42 {
                                            debug w => _199; // in scope 42 at ui/let-else/let-else-drop-order.rs:149:17: 149:18
                                            let _202: u32; // in scope 42 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                            let _204: Droppy<u32>; // in scope 42 at ui/let-else/let-else-drop-order.rs:153:25: 153:26
                                            scope 43 {
                                                debug _v => _202; // in scope 43 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                            }
                                            scope 44 {
                                                debug w => _204; // in scope 44 at ui/let-else/let-else-drop-order.rs:153:25: 153:26
                                            }
                                        }
                                        scope 45 {
                                            debug _v => _207; // in scope 45 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                        }
                                        scope 46 {
                                            debug _v => _214; // in scope 46 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                        }
                                        scope 47 {
                                            debug _v => _222; // in scope 47 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                        }
                                        scope 48 {
                                            debug _v => _230; // in scope 48 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                        }
                                        scope 49 {
                                            debug _v => _237; // in scope 49 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
                                        }
                                        scope 50 {
                                            debug acc => _266; // in scope 50 at ui/let-else/let-else-drop-order.rs:179:13: 179:16
                                            let _267: u32; // in scope 50 at ui/let-else/let-else-drop-order.rs:180:13: 180:14
                                            scope 51 {
                                                debug v => _267; // in scope 51 at ui/let-else/let-else-drop-order.rs:180:13: 180:14
                                                let _294: ((), DroppyEnum<u32>); // in scope 51 at ui/let-else/let-else-drop-order.rs:149:17: 149:18
                                                let _353: &DropAccountant; // in scope 51 at ui/let-else/let-else-drop-order.rs:179:13: 179:16
                                                scope 52 {
                                                }
                                                scope 53 {
                                                }
                                                scope 54 {
                                                }
                                                scope 55 {
                                                    debug w => _294; // in scope 55 at ui/let-else/let-else-drop-order.rs:149:17: 149:18
                                                    let _300: ((), DroppyEnum<u32>); // in scope 55 at ui/let-else/let-else-drop-order.rs:153:25: 153:26
                                                    scope 56 {
                                                    }
                                                    scope 57 {
                                                        debug w => _300; // in scope 57 at ui/let-else/let-else-drop-order.rs:153:25: 153:26
                                                    }
                                                }
                                                scope 58 {
                                                }
                                                scope 59 {
                                                }
                                                scope 60 {
                                                }
                                                scope 61 {
                                                }
                                                scope 62 {
                                                }
                                                scope 63 {
                                                    debug acc => _353; // in scope 63 at ui/let-else/let-else-drop-order.rs:179:13: 179:16
                                                    let _354: u32; // in scope 63 at ui/let-else/let-else-drop-order.rs:180:13: 180:14
                                                    scope 64 {
                                                        debug v => _354; // in scope 64 at ui/let-else/let-else-drop-order.rs:180:13: 180:14
                                                        let _357: u32; // in scope 64 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                        let _366: u32; // in scope 64 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                        let _376: u32; // in scope 64 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                        let _384: ((), DroppyEnum<u32>); // in scope 64 at ui/let-else/let-else-drop-order.rs:149:17: 149:18
                                                        let _397: u32; // in scope 64 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                        let _407: u32; // in scope 64 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                        let _418: u32; // in scope 64 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                        let _429: &u32; // in scope 64 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                        let _439: &mut u32; // in scope 64 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                        let _455: &DropAccountant; // in scope 64 at ui/let-else/let-else-drop-order.rs:179:13: 179:16
                                                        scope 65 {
                                                            debug _v => _357; // in scope 65 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                        }
                                                        scope 66 {
                                                            debug _v => _366; // in scope 66 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                        }
                                                        scope 67 {
                                                            debug _v => _376; // in scope 67 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                        }
                                                        scope 68 {
                                                            debug w => _384; // in scope 68 at ui/let-else/let-else-drop-order.rs:149:17: 149:18
                                                            let _389: u32; // in scope 68 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                            let _391: ((), DroppyEnum<u32>); // in scope 68 at ui/let-else/let-else-drop-order.rs:153:25: 153:26
                                                            scope 69 {
                                                                debug _v => _389; // in scope 69 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                            }
                                                            scope 70 {
                                                                debug w => _391; // in scope 70 at ui/let-else/let-else-drop-order.rs:153:25: 153:26
                                                            }
                                                        }
                                                        scope 71 {
                                                            debug _v => _397; // in scope 71 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                        }
                                                        scope 72 {
                                                            debug _v => _407; // in scope 72 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                        }
                                                        scope 73 {
                                                            debug _v => _418; // in scope 73 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                        }
                                                        scope 74 {
                                                            debug _v => _429; // in scope 74 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                        }
                                                        scope 75 {
                                                            debug _v => _439; // in scope 75 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
                                                        }
                                                        scope 76 {
                                                            debug acc => _455; // in scope 76 at ui/let-else/let-else-drop-order.rs:179:13: 179:16
                                                            let _456: u32; // in scope 76 at ui/let-else/let-else-drop-order.rs:180:13: 180:14
                                                            scope 77 {
                                                                debug v => _456; // in scope 77 at ui/let-else/let-else-drop-order.rs:180:13: 180:14
                                                                let _480: Droppy<u32>; // in scope 77 at ui/let-else/let-else-drop-order.rs:149:17: 149:18
                                                                let _533: &DropAccountant; // in scope 77 at ui/let-else/let-else-drop-order.rs:179:13: 179:16
                                                                scope 78 {
                                                                }
                                                                scope 79 {
                                                                }
                                                                scope 80 {
                                                                }
                                                                scope 81 {
                                                                    debug w => _480; // in scope 81 at ui/let-else/let-else-drop-order.rs:149:17: 149:18
                                                                    let _486: Droppy<u32>; // in scope 81 at ui/let-else/let-else-drop-order.rs:153:25: 153:26
                                                                    scope 82 {
                                                                    }
                                                                    scope 83 {
                                                                        debug w => _486; // in scope 83 at ui/let-else/let-else-drop-order.rs:153:25: 153:26
                                                                    }
                                                                }
                                                                scope 84 {
                                                                }
                                                                scope 85 {
                                                                }
                                                                scope 86 {
                                                                }
                                                                scope 87 {
                                                                }
                                                                scope 88 {
                                                                }
                                                                scope 89 {
                                                                    debug acc => _533; // in scope 89 at ui/let-else/let-else-drop-order.rs:179:13: 179:16
                                                                    let _534: u32; // in scope 89 at ui/let-else/let-else-drop-order.rs:180:13: 180:14
                                                                    scope 90 {
                                                                        debug v => _534; // in scope 90 at ui/let-else/let-else-drop-order.rs:180:13: 180:14
                                                                        let _558: Droppy<u32>; // in scope 90 at ui/let-else/let-else-drop-order.rs:149:17: 149:18
                                                                        scope 91 {
                                                                        }
                                                                        scope 92 {
                                                                        }
                                                                        scope 93 {
                                                                        }
                                                                        scope 94 {
                                                                            debug w => _558; // in scope 94 at ui/let-else/let-else-drop-order.rs:149:17: 149:18
                                                                            let _564: Droppy<u32>; // in scope 94 at ui/let-else/let-else-drop-order.rs:153:25: 153:26
                                                                            scope 95 {
                                                                            }
                                                                            scope 96 {
                                                                                debug w => _564; // in scope 96 at ui/let-else/let-else-drop-order.rs:153:25: 153:26
                                                                            }
                                                                        }
                                                                        scope 97 {
                                                                        }
                                                                        scope 98 {
                                                                        }
                                                                        scope 99 {
                                                                        }
                                                                        scope 100 {
                                                                        }
                                                                        scope 101 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = DropAccountant::new() -> bb1; // scope 0 at ui/let-else/let-else-drop-order.rs:231:15: 231:36
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:231:15: 231:34
                                         // + literal: Const { ty: fn() -> DropAccountant {DropAccountant::new}, val: Value(<ZST>) }
    }

    bb1: {
        _620 = const _;                  // scope 1 at ui/let-else/let-else-drop-order.rs:233:14: 233:39
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:233:14: 233:39
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[5])) }
        _6 = _620;                       // scope 1 at ui/let-else/let-else-drop-order.rs:233:14: 233:39
        _5 = _6;                         // scope 1 at ui/let-else/let-else-drop-order.rs:233:14: 233:39
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 1 at ui/let-else/let-else-drop-order.rs:233:14: 233:39
        _619 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[4])) }
        _9 = _619;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb2, unwind: bb387]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb387]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = &_1;                       // scope 1 at ui/let-else/let-else-drop-order.rs:236:5: 236:26
        _10 = DropAccountant::new_list::<&str>(move _11, const "let _") -> [return: bb4, unwind: bb387]; // scope 1 at ui/let-else/let-else-drop-order.rs:236:5: 236:26
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:236:9: 236:17
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::new_list::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:236:18: 236:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _12 = &_1;                       // scope 1 at ui/let-else/let-else-drop-order.rs:237:11: 237:15
        _13 = const 0_u32;               // scope 2 at ui/let-else/let-else-drop-order.rs:213:17: 213:18
        _15 = _12;                       // scope 3 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
        _16 = const 0_u32;               // scope 3 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
        _14 = DropAccountant::build_droppy(move _15, move _16) -> [return: bb5, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:215:57: 215:69
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_14) -> [return: bb6, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:209:32: 209:33
    }

    bb6: {
        _18 = _12;                       // scope 4 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
        _17 = DropAccountant::push::<&str>(move _18, const "body") -> [return: bb7, unwind: bb387]; // scope 4 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:21: 210:25
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:26: 210:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _20 = _12;                       // scope 3 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
        _21 = _13;                       // scope 3 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
        _19 = DropAccountant::build_droppy(move _20, move _21) -> [return: bb8, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:215:57: 215:69
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb8: {
        _23 = _12;                       // scope 5 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
        _22 = DropAccountant::push::<&str>(move _23, const "body") -> [return: bb9, unwind: bb386]; // scope 5 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:21: 210:25
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:26: 210:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        drop(_19) -> [return: bb10, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:211:13: 211:14
    }

    bb10: {
        _25 = _12;                       // scope 3 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
        _26 = _13;                       // scope 3 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
        _24 = DropAccountant::build_droppy(move _25, move _26) -> [return: bb11, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:215:57: 215:69
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb11: {
        _28 = _12;                       // scope 6 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
        _27 = DropAccountant::push::<&str>(move _28, const "body") -> [return: bb12, unwind: bb385]; // scope 6 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:21: 210:25
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:26: 210:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        drop(_24) -> [return: bb13, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:211:13: 211:14
    }

    bb13: {
        _30 = _12;                       // scope 3 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
        _31 = _13;                       // scope 3 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
        _29 = DropAccountant::build_droppy(move _30, move _31) -> [return: bb14, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:215:57: 215:69
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb14: {
        _33 = move _29;                  // scope 7 at ui/let-else/let-else-drop-order.rs:153:29: 153:30
        _32 = move _33;                  // scope 9 at ui/let-else/let-else-drop-order.rs:154:21: 154:22
        drop(_32) -> [return: bb15, unwind: bb387]; // scope 7 at ui/let-else/let-else-drop-order.rs:209:32: 209:33
    }

    bb15: {
        _35 = _12;                       // scope 8 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
        _34 = DropAccountant::push::<&str>(move _35, const "body") -> [return: bb16, unwind: bb387]; // scope 8 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:21: 210:25
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:26: 210:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb16: {
        _38 = _12;                       // scope 3 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
        _39 = _13;                       // scope 3 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
        _37 = DropAccountant::build_droppy(move _38, move _39) -> [return: bb17, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:215:57: 215:69
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb17: {
        _36 = identity::<Droppy<u32>>(move _37) -> [return: bb18, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:161:31: 161:59
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:161:31: 161:53
                                         // + literal: Const { ty: fn(Droppy<u32>) -> Droppy<u32> {identity::<Droppy<u32>>}, val: Value(<ZST>) }
    }

    bb18: {
        drop(_36) -> [return: bb19, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:209:32: 209:33
    }

    bb19: {
        _41 = _12;                       // scope 10 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
        _40 = DropAccountant::push::<&str>(move _41, const "body") -> [return: bb20, unwind: bb387]; // scope 10 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:21: 210:25
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:26: 210:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb20: {
        _43 = _12;                       // scope 3 at ui/let-else/let-else-drop-order.rs:217:9: 217:24
        _42 = DropAccountant::push::<&str>(move _43, const "n/a") -> [return: bb21, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:217:9: 217:24
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:217:13: 217:17
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:217:18: 217:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _45 = _12;                       // scope 3 at ui/let-else/let-else-drop-order.rs:218:9: 218:24
        _44 = DropAccountant::push::<&str>(move _45, const "n/a") -> [return: bb22, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:218:9: 218:24
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:218:13: 218:17
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:218:18: 218:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb22: {
        _47 = _12;                       // scope 3 at ui/let-else/let-else-drop-order.rs:219:9: 219:24
        _46 = DropAccountant::push::<&str>(move _47, const "n/a") -> [return: bb23, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:219:9: 219:24
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:219:13: 219:17
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:219:18: 219:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb23: {
        _49 = _12;                       // scope 3 at ui/let-else/let-else-drop-order.rs:220:9: 220:24
        _48 = DropAccountant::push::<&str>(move _49, const "n/a") -> [return: bb24, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:220:9: 220:24
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:220:13: 220:17
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:220:18: 220:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb24: {
        _51 = _12;                       // scope 3 at ui/let-else/let-else-drop-order.rs:223:35: 223:54
        _52 = _13;                       // scope 3 at ui/let-else/let-else-drop-order.rs:223:52: 223:53
        _50 = DropAccountant::build_droppy(move _51, move _52) -> [return: bb25, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:223:35: 223:54
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:223:39: 223:51
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb25: {
        _54 = _12;                       // scope 11 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
        _53 = DropAccountant::push::<&str>(move _54, const "body") -> [return: bb26, unwind: bb384]; // scope 11 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:21: 210:25
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:26: 210:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb26: {
        drop(_50) -> [return: bb27, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:211:13: 211:14
    }

    bb27: {
        _56 = _12;                       // scope 3 at ui/let-else/let-else-drop-order.rs:226:39: 226:58
        _57 = _13;                       // scope 3 at ui/let-else/let-else-drop-order.rs:226:56: 226:57
        _55 = DropAccountant::build_droppy(move _56, move _57) -> [return: bb28, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:226:39: 226:58
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:226:43: 226:55
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb28: {
        _59 = _12;                       // scope 12 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
        _58 = DropAccountant::push::<&str>(move _59, const "body") -> [return: bb29, unwind: bb383]; // scope 12 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:21: 210:25
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:26: 210:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb29: {
        drop(_55) -> [return: bb30, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:211:13: 211:14
    }

    bb30: {
        _61 = &_1;                       // scope 3 at ui/let-else/let-else-drop-order.rs:238:5: 238:31
        _60 = DropAccountant::new_list::<&str>(move _61, const "let else _") -> [return: bb31, unwind: bb387]; // scope 3 at ui/let-else/let-else-drop-order.rs:238:5: 238:31
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:238:9: 238:17
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::new_list::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:238:18: 238:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb31: {
        _62 = &_1;                       // scope 3 at ui/let-else/let-else-drop-order.rs:239:15: 239:19
        _63 = const 0_u32;               // scope 13 at ui/let-else/let-else-drop-order.rs:239:21: 239:22
        _65 = _62;                       // scope 14 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _66 = const 0_u32;               // scope 14 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _64 = DropAccountant::build_droppy(move _65, move _66) -> [return: bb32, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:239:27: 239:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb32: {
        drop(_64) -> [return: bb33, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb33: {
        _68 = _62;                       // scope 15 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _67 = DropAccountant::push::<&str>(move _68, const "body") -> [return: bb34, unwind: bb387]; // scope 15 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb34: {
        _70 = _62;                       // scope 14 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _71 = _63;                       // scope 14 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _69 = DropAccountant::build_droppy(move _70, move _71) -> [return: bb35, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:239:27: 239:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb35: {
        _73 = _62;                       // scope 16 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _72 = DropAccountant::push::<&str>(move _73, const "body") -> [return: bb36, unwind: bb382]; // scope 16 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb36: {
        drop(_69) -> [return: bb37, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb37: {
        _75 = _62;                       // scope 14 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _76 = _63;                       // scope 14 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _74 = DropAccountant::build_droppy(move _75, move _76) -> [return: bb38, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:239:27: 239:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb38: {
        _78 = _62;                       // scope 17 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _77 = DropAccountant::push::<&str>(move _78, const "body") -> [return: bb39, unwind: bb381]; // scope 17 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb39: {
        drop(_74) -> [return: bb40, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb40: {
        _80 = _62;                       // scope 14 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _81 = _63;                       // scope 14 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _79 = DropAccountant::build_droppy(move _80, move _81) -> [return: bb41, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:239:27: 239:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb41: {
        _83 = move _79;                  // scope 18 at ui/let-else/let-else-drop-order.rs:153:29: 153:30
        _82 = move _83;                  // scope 20 at ui/let-else/let-else-drop-order.rs:154:21: 154:22
        drop(_82) -> [return: bb42, unwind: bb387]; // scope 18 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb42: {
        _85 = _62;                       // scope 19 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _84 = DropAccountant::push::<&str>(move _85, const "body") -> [return: bb43, unwind: bb387]; // scope 19 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb43: {
        _88 = _62;                       // scope 14 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _89 = _63;                       // scope 14 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _87 = DropAccountant::build_droppy(move _88, move _89) -> [return: bb44, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:239:27: 239:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb44: {
        _86 = identity::<Droppy<u32>>(move _87) -> [return: bb45, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:161:31: 161:59
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:161:31: 161:53
                                         // + literal: Const { ty: fn(Droppy<u32>) -> Droppy<u32> {identity::<Droppy<u32>>}, val: Value(<ZST>) }
    }

    bb45: {
        drop(_86) -> [return: bb46, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb46: {
        _91 = _62;                       // scope 21 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _90 = DropAccountant::push::<&str>(move _91, const "body") -> [return: bb47, unwind: bb387]; // scope 21 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb47: {
        _93 = _62;                       // scope 14 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _94 = _63;                       // scope 14 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _92 = DropAccountant::build_droppy(move _93, move _94) -> [return: bb48, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:239:27: 239:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb48: {
        drop(_92) -> [return: bb49, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb49: {
        _96 = _62;                       // scope 22 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _95 = DropAccountant::push::<&str>(move _96, const "body") -> [return: bb50, unwind: bb387]; // scope 22 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb50: {
        _98 = _62;                       // scope 14 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _99 = _63;                       // scope 14 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _97 = DropAccountant::build_droppy(move _98, move _99) -> [return: bb51, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:239:27: 239:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb51: {
        drop(_97) -> [return: bb52, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb52: {
        _101 = _62;                      // scope 23 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _100 = DropAccountant::push::<&str>(move _101, const "body") -> [return: bb53, unwind: bb387]; // scope 23 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb53: {
        _103 = _62;                      // scope 14 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
        _104 = _63;                      // scope 14 at ui/let-else/let-else-drop-order.rs:196:51: 196:52
        _102 = DropAccountant::build_droppy(move _103, move _104) -> [return: bb54, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:239:27: 239:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb54: {
        _106 = _62;                      // scope 24 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _105 = DropAccountant::push::<&str>(move _106, const "body") -> [return: bb55, unwind: bb380]; // scope 24 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb55: {
        drop(_102) -> [return: bb56, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb56: {
        _108 = _62;                      // scope 14 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
        _109 = _63;                      // scope 14 at ui/let-else/let-else-drop-order.rs:199:55: 199:56
        _107 = DropAccountant::build_droppy(move _108, move _109) -> [return: bb57, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:239:27: 239:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb57: {
        _111 = _62;                      // scope 25 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _110 = DropAccountant::push::<&str>(move _111, const "body") -> [return: bb58, unwind: bb379]; // scope 25 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb58: {
        drop(_107) -> [return: bb59, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb59: {
        _113 = &_1;                      // scope 14 at ui/let-else/let-else-drop-order.rs:240:5: 240:41
        _112 = DropAccountant::assert_equality_last_two_lists(move _113) -> [return: bb60, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:240:5: 240:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:240:9: 240:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant) {DropAccountant::assert_equality_last_two_lists}, val: Value(<ZST>) }
    }

    bb60: {
        _115 = &_1;                      // scope 14 at ui/let-else/let-else-drop-order.rs:241:5: 241:22
        _114 = DropAccountant::print_table(move _115) -> [return: bb61, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:241:5: 241:22
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:241:9: 241:20
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant) {DropAccountant::print_table}, val: Value(<ZST>) }
    }

    bb61: {
        _117 = &_1;                      // scope 14 at ui/let-else/let-else-drop-order.rs:244:5: 244:27
        _116 = DropAccountant::new_list::<&str>(move _117, const "let _v") -> [return: bb62, unwind: bb387]; // scope 14 at ui/let-else/let-else-drop-order.rs:244:5: 244:27
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:244:9: 244:17
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::new_list::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:244:18: 244:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb62: {
        _118 = &_1;                      // scope 14 at ui/let-else/let-else-drop-order.rs:245:11: 245:15
        _119 = const 0_u32;              // scope 26 at ui/let-else/let-else-drop-order.rs:213:17: 213:18
        _122 = _118;                     // scope 27 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
        _123 = const 0_u32;              // scope 27 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
        _121 = DropAccountant::build_droppy(move _122, move _123) -> [return: bb63, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:215:57: 215:69
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb63: {
        _120 = (_121.1: u32);            // scope 27 at ui/let-else/let-else-drop-order.rs:139:31: 139:37
        drop(_121) -> [return: bb64, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:209:32: 209:33
    }

    bb64: {
        _125 = _118;                     // scope 28 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
        _124 = DropAccountant::push::<&str>(move _125, const "body") -> [return: bb65, unwind: bb387]; // scope 28 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:21: 210:25
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:26: 210:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb65: {
        _129 = _118;                     // scope 27 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
        _130 = _119;                     // scope 27 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
        _128 = DropAccountant::build_droppy(move _129, move _130) -> [return: bb66, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:215:57: 215:69
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb66: {
        _127 = &(_128.1: u32);           // scope 27 at ui/let-else/let-else-drop-order.rs:142:32: 142:39
        _126 = (*_127);                  // scope 27 at ui/let-else/let-else-drop-order.rs:245:17: 245:19
        _132 = _118;                     // scope 29 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
        _131 = DropAccountant::push::<&str>(move _132, const "body") -> [return: bb67, unwind: bb378]; // scope 29 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:21: 210:25
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:26: 210:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb67: {
        drop(_128) -> [return: bb68, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:211:13: 211:14
    }

    bb68: {
        _136 = _118;                     // scope 27 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
        _137 = _119;                     // scope 27 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
        _135 = DropAccountant::build_droppy(move _136, move _137) -> [return: bb69, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:215:57: 215:69
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb69: {
        _134 = &mut (_135.1: u32);       // scope 27 at ui/let-else/let-else-drop-order.rs:145:36: 145:49
        _133 = (*_134);                  // scope 27 at ui/let-else/let-else-drop-order.rs:245:17: 245:19
        _139 = _118;                     // scope 30 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
        _138 = DropAccountant::push::<&str>(move _139, const "body") -> [return: bb70, unwind: bb377]; // scope 30 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:21: 210:25
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:26: 210:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb70: {
        drop(_135) -> [return: bb71, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:211:13: 211:14
    }

    bb71: {
        _141 = _118;                     // scope 27 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
        _142 = _119;                     // scope 27 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
        _140 = DropAccountant::build_droppy(move _141, move _142) -> [return: bb72, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:215:57: 215:69
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb72: {
        _145 = move _140;                // scope 31 at ui/let-else/let-else-drop-order.rs:153:29: 153:30
        _144 = move _145;                // scope 33 at ui/let-else/let-else-drop-order.rs:154:21: 154:22
        _143 = (_144.1: u32);            // scope 31 at ui/let-else/let-else-drop-order.rs:152:17: 156:19
        drop(_144) -> [return: bb73, unwind: bb387]; // scope 31 at ui/let-else/let-else-drop-order.rs:209:32: 209:33
    }

    bb73: {
        _147 = _118;                     // scope 32 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
        _146 = DropAccountant::push::<&str>(move _147, const "body") -> [return: bb74, unwind: bb387]; // scope 32 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:21: 210:25
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:26: 210:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb74: {
        _151 = _118;                     // scope 27 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
        _152 = _119;                     // scope 27 at ui/let-else/let-else-drop-order.rs:215:70: 215:71
        _150 = DropAccountant::build_droppy(move _151, move _152) -> [return: bb75, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:215:53: 215:72
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:215:57: 215:69
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb75: {
        _149 = identity::<Droppy<u32>>(move _150) -> [return: bb76, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:161:31: 161:59
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:161:31: 161:53
                                         // + literal: Const { ty: fn(Droppy<u32>) -> Droppy<u32> {identity::<Droppy<u32>>}, val: Value(<ZST>) }
    }

    bb76: {
        _148 = (_149.1: u32);            // scope 27 at ui/let-else/let-else-drop-order.rs:161:31: 161:61
        drop(_149) -> [return: bb77, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:209:32: 209:33
    }

    bb77: {
        _154 = _118;                     // scope 34 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
        _153 = DropAccountant::push::<&str>(move _154, const "body") -> [return: bb78, unwind: bb387]; // scope 34 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:21: 210:25
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:26: 210:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb78: {
        _156 = _118;                     // scope 27 at ui/let-else/let-else-drop-order.rs:217:9: 217:24
        _155 = DropAccountant::push::<&str>(move _156, const "n/a") -> [return: bb79, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:217:9: 217:24
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:217:13: 217:17
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:217:18: 217:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb79: {
        _158 = _118;                     // scope 27 at ui/let-else/let-else-drop-order.rs:218:9: 218:24
        _157 = DropAccountant::push::<&str>(move _158, const "n/a") -> [return: bb80, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:218:9: 218:24
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:218:13: 218:17
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:218:18: 218:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb80: {
        _160 = _118;                     // scope 27 at ui/let-else/let-else-drop-order.rs:219:9: 219:24
        _159 = DropAccountant::push::<&str>(move _160, const "n/a") -> [return: bb81, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:219:9: 219:24
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:219:13: 219:17
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:219:18: 219:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb81: {
        _162 = _118;                     // scope 27 at ui/let-else/let-else-drop-order.rs:220:9: 220:24
        _161 = DropAccountant::push::<&str>(move _162, const "n/a") -> [return: bb82, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:220:9: 220:24
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:220:13: 220:17
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:220:18: 220:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb82: {
        _165 = _118;                     // scope 27 at ui/let-else/let-else-drop-order.rs:223:35: 223:54
        _166 = _119;                     // scope 27 at ui/let-else/let-else-drop-order.rs:223:52: 223:53
        _164 = DropAccountant::build_droppy(move _165, move _166) -> [return: bb83, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:223:35: 223:54
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:223:39: 223:51
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb83: {
        _163 = &(_164.1: u32);           // scope 27 at ui/let-else/let-else-drop-order.rs:223:34: 223:56
        _168 = _118;                     // scope 35 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
        _167 = DropAccountant::push::<&str>(move _168, const "body") -> [return: bb84, unwind: bb376]; // scope 35 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:21: 210:25
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:26: 210:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb84: {
        drop(_164) -> [return: bb85, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:211:13: 211:14
    }

    bb85: {
        _171 = _118;                     // scope 27 at ui/let-else/let-else-drop-order.rs:226:39: 226:58
        _172 = _119;                     // scope 27 at ui/let-else/let-else-drop-order.rs:226:56: 226:57
        _170 = DropAccountant::build_droppy(move _171, move _172) -> [return: bb86, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:226:39: 226:58
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:226:43: 226:55
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb86: {
        _169 = &mut (_170.1: u32);       // scope 27 at ui/let-else/let-else-drop-order.rs:226:34: 226:60
        _174 = _118;                     // scope 36 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
        _173 = DropAccountant::push::<&str>(move _174, const "body") -> [return: bb87, unwind: bb375]; // scope 36 at ui/let-else/let-else-drop-order.rs:210:17: 210:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:21: 210:25
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:210:26: 210:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb87: {
        drop(_170) -> [return: bb88, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:211:13: 211:14
    }

    bb88: {
        _176 = &_1;                      // scope 27 at ui/let-else/let-else-drop-order.rs:246:5: 246:32
        _175 = DropAccountant::new_list::<&str>(move _176, const "let else _v") -> [return: bb89, unwind: bb387]; // scope 27 at ui/let-else/let-else-drop-order.rs:246:5: 246:32
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:246:9: 246:17
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::new_list::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:246:18: 246:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb89: {
        _177 = &_1;                      // scope 27 at ui/let-else/let-else-drop-order.rs:247:15: 247:19
        _178 = const 0_u32;              // scope 37 at ui/let-else/let-else-drop-order.rs:247:21: 247:22
        _181 = _177;                     // scope 38 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _182 = const 0_u32;              // scope 38 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _180 = DropAccountant::build_droppy(move _181, move _182) -> [return: bb90, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:247:28: 247:40
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb90: {
        _179 = (_180.1: u32);            // scope 38 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
        drop(_180) -> [return: bb91, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb91: {
        _184 = _177;                     // scope 39 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _183 = DropAccountant::push::<&str>(move _184, const "body") -> [return: bb92, unwind: bb387]; // scope 39 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb92: {
        _188 = _177;                     // scope 38 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _189 = _178;                     // scope 38 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _187 = DropAccountant::build_droppy(move _188, move _189) -> [return: bb93, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:247:28: 247:40
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb93: {
        _186 = &(_187.1: u32);           // scope 38 at ui/let-else/let-else-drop-order.rs:142:32: 142:39
        _185 = (*_186);                  // scope 38 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
        _191 = _177;                     // scope 40 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _190 = DropAccountant::push::<&str>(move _191, const "body") -> [return: bb94, unwind: bb374]; // scope 40 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb94: {
        drop(_187) -> [return: bb95, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb95: {
        _195 = _177;                     // scope 38 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _196 = _178;                     // scope 38 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _194 = DropAccountant::build_droppy(move _195, move _196) -> [return: bb96, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:247:28: 247:40
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb96: {
        _193 = &mut (_194.1: u32);       // scope 38 at ui/let-else/let-else-drop-order.rs:145:36: 145:49
        _192 = (*_193);                  // scope 38 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
        _198 = _177;                     // scope 41 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _197 = DropAccountant::push::<&str>(move _198, const "body") -> [return: bb97, unwind: bb373]; // scope 41 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb97: {
        drop(_194) -> [return: bb98, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb98: {
        _200 = _177;                     // scope 38 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _201 = _178;                     // scope 38 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _199 = DropAccountant::build_droppy(move _200, move _201) -> [return: bb99, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:247:28: 247:40
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb99: {
        _204 = move _199;                // scope 42 at ui/let-else/let-else-drop-order.rs:153:29: 153:30
        _203 = move _204;                // scope 44 at ui/let-else/let-else-drop-order.rs:154:21: 154:22
        _202 = (_203.1: u32);            // scope 42 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
        drop(_203) -> [return: bb100, unwind: bb387]; // scope 42 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb100: {
        _206 = _177;                     // scope 43 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _205 = DropAccountant::push::<&str>(move _206, const "body") -> [return: bb101, unwind: bb387]; // scope 43 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb101: {
        _210 = _177;                     // scope 38 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _211 = _178;                     // scope 38 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _209 = DropAccountant::build_droppy(move _210, move _211) -> [return: bb102, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:247:28: 247:40
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb102: {
        _208 = identity::<Droppy<u32>>(move _209) -> [return: bb103, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:161:31: 161:59
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:161:31: 161:53
                                         // + literal: Const { ty: fn(Droppy<u32>) -> Droppy<u32> {identity::<Droppy<u32>>}, val: Value(<ZST>) }
    }

    bb103: {
        _207 = (_208.1: u32);            // scope 38 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
        drop(_208) -> [return: bb104, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb104: {
        _213 = _177;                     // scope 45 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _212 = DropAccountant::push::<&str>(move _213, const "body") -> [return: bb105, unwind: bb387]; // scope 45 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb105: {
        _218 = _177;                     // scope 38 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _219 = _178;                     // scope 38 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _217 = DropAccountant::build_droppy(move _218, move _219) -> [return: bb106, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:247:28: 247:40
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb106: {
        _216 = (_217.1: u32);            // scope 38 at ui/let-else/let-else-drop-order.rs:170:38: 170:44
        _215 = (move _216, const 77_i32); // scope 38 at ui/let-else/let-else-drop-order.rs:170:37: 170:49
        _214 = (_215.0: u32);            // scope 38 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
        drop(_217) -> [return: bb107, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb107: {
        _221 = _177;                     // scope 46 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _220 = DropAccountant::push::<&str>(move _221, const "body") -> [return: bb108, unwind: bb387]; // scope 46 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb108: {
        _226 = _177;                     // scope 38 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _227 = _178;                     // scope 38 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _225 = DropAccountant::build_droppy(move _226, move _227) -> [return: bb109, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:247:28: 247:40
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb109: {
        _224 = (_225.1: u32);            // scope 38 at ui/let-else/let-else-drop-order.rs:173:34: 173:40
        _223 = [move _224];              // scope 38 at ui/let-else/let-else-drop-order.rs:173:33: 173:41
        _222 = _223[0 of 1];             // scope 38 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
        drop(_225) -> [return: bb110, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb110: {
        _229 = _177;                     // scope 47 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _228 = DropAccountant::push::<&str>(move _229, const "body") -> [return: bb111, unwind: bb387]; // scope 47 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb111: {
        _233 = _177;                     // scope 38 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
        _234 = _178;                     // scope 38 at ui/let-else/let-else-drop-order.rs:196:51: 196:52
        _232 = DropAccountant::build_droppy(move _233, move _234) -> [return: bb112, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:247:28: 247:40
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb112: {
        _231 = &(_232.1: u32);           // scope 38 at ui/let-else/let-else-drop-order.rs:196:39: 196:55
        _230 = _231;                     // scope 38 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
        _236 = _177;                     // scope 48 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _235 = DropAccountant::push::<&str>(move _236, const "body") -> [return: bb113, unwind: bb372]; // scope 48 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb113: {
        drop(_232) -> [return: bb114, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb114: {
        _240 = _177;                     // scope 38 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
        _241 = _178;                     // scope 38 at ui/let-else/let-else-drop-order.rs:199:55: 199:56
        _239 = DropAccountant::build_droppy(move _240, move _241) -> [return: bb115, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:247:28: 247:40
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb115: {
        _238 = &mut (_239.1: u32);       // scope 38 at ui/let-else/let-else-drop-order.rs:199:39: 199:59
        _237 = move _238;                // scope 38 at ui/let-else/let-else-drop-order.rs:247:24: 247:26
        _243 = _177;                     // scope 49 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _242 = DropAccountant::push::<&str>(move _243, const "body") -> [return: bb116, unwind: bb371]; // scope 49 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb116: {
        drop(_239) -> [return: bb117, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb117: {
        _245 = &_1;                      // scope 38 at ui/let-else/let-else-drop-order.rs:248:5: 248:41
        _244 = DropAccountant::assert_equality_last_two_lists(move _245) -> [return: bb118, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:248:5: 248:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:248:9: 248:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant) {DropAccountant::assert_equality_last_two_lists}, val: Value(<ZST>) }
    }

    bb118: {
        _247 = &_1;                      // scope 38 at ui/let-else/let-else-drop-order.rs:249:5: 249:22
        _246 = DropAccountant::print_table(move _247) -> [return: bb119, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:249:5: 249:22
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:249:9: 249:20
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant) {DropAccountant::print_table}, val: Value(<ZST>) }
    }

    bb119: {
        _618 = const _;                  // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[3])) }
        _252 = _618;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        _251 = _252;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        _250 = move _251 as &[&str] (Pointer(Unsize)); // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        _617 = const _;                  // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[2])) }
        _255 = _617;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _254 = _255;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _253 = move _254 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _249 = Arguments::<'_>::new_v1(move _250, move _253) -> [return: bb120, unwind: bb387]; // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb120: {
        _248 = _print(move _249) -> [return: bb121, unwind: bb387]; // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:9: 81:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:9: 81:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb121: {
        _616 = const _;                  // scope 38 at ui/let-else/let-else-drop-order.rs:253:14: 253:42
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:253:14: 253:42
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _260 = _616;                     // scope 38 at ui/let-else/let-else-drop-order.rs:253:14: 253:42
        _259 = _260;                     // scope 38 at ui/let-else/let-else-drop-order.rs:253:14: 253:42
        _258 = move _259 as &[&str] (Pointer(Unsize)); // scope 38 at ui/let-else/let-else-drop-order.rs:253:14: 253:42
        _615 = const _;                  // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[0])) }
        _263 = _615;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _262 = _263;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _261 = move _262 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _257 = Arguments::<'_>::new_v1(move _258, move _261) -> [return: bb122, unwind: bb387]; // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb122: {
        _256 = _print(move _257) -> [return: bb123, unwind: bb387]; // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb123: {
        _265 = &_1;                      // scope 38 at ui/let-else/let-else-drop-order.rs:255:5: 255:40
        _264 = DropAccountant::new_list::<&str>(move _265, const "let else _ mismatch") -> [return: bb124, unwind: bb387]; // scope 38 at ui/let-else/let-else-drop-order.rs:255:5: 255:40
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:255:9: 255:17
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::new_list::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:255:18: 255:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb124: {
        _266 = &_1;                      // scope 38 at ui/let-else/let-else-drop-order.rs:256:15: 256:19
        _267 = const 1_u32;              // scope 50 at ui/let-else/let-else-drop-order.rs:256:21: 256:22
        _271 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _272 = const 1_u32;              // scope 51 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _270 = DropAccountant::build_droppy_enum_none(move _271, move _272) -> [return: bb125, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:256:48: 256:70
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb125: {
        _273 = discriminant((_270.1: DroppyEnum<u32>)); // scope 51 at ui/let-else/let-else-drop-order.rs:139:31: 139:37
        switchInt(move _273) -> [0: bb126, otherwise: bb127]; // scope 51 at ui/let-else/let-else-drop-order.rs:256:24: 256:46
    }

    bb126: {
        drop(_270) -> [return: bb129, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb127: {
        drop(_270) -> [return: bb128, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb128: {
        _269 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _268 = DropAccountant::push::<&str>(move _269, const "else") -> [return: bb389, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb129: {
        _275 = _266;                     // scope 52 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _274 = DropAccountant::push::<&str>(move _275, const "body") -> [return: bb390, unwind: bb387]; // scope 52 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb130: {
        _280 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _281 = _267;                     // scope 51 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _279 = DropAccountant::build_droppy_enum_none(move _280, move _281) -> [return: bb131, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:256:48: 256:70
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb131: {
        _278 = &(_279.1: DroppyEnum<u32>); // scope 51 at ui/let-else/let-else-drop-order.rs:142:32: 142:39
        _282 = discriminant((*_278));    // scope 51 at ui/let-else/let-else-drop-order.rs:142:32: 142:39
        switchInt(move _282) -> [0: bb132, otherwise: bb133]; // scope 51 at ui/let-else/let-else-drop-order.rs:142:21: 142:30
    }

    bb132: {
        _284 = _266;                     // scope 53 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _283 = DropAccountant::push::<&str>(move _284, const "body") -> [return: bb135, unwind: bb370]; // scope 53 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb133: {
        drop(_279) -> [return: bb134, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb134: {
        _277 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _276 = DropAccountant::push::<&str>(move _277, const "else") -> [return: bb391, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb135: {
        drop(_279) -> [return: bb136, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb136: {
        _289 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _290 = _267;                     // scope 51 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _288 = DropAccountant::build_droppy_enum_none(move _289, move _290) -> [return: bb137, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:256:48: 256:70
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb137: {
        _287 = &mut (_288.1: DroppyEnum<u32>); // scope 51 at ui/let-else/let-else-drop-order.rs:145:36: 145:49
        _291 = discriminant((*_287));    // scope 51 at ui/let-else/let-else-drop-order.rs:145:36: 145:49
        switchInt(move _291) -> [0: bb138, otherwise: bb139]; // scope 51 at ui/let-else/let-else-drop-order.rs:145:21: 145:34
    }

    bb138: {
        _293 = _266;                     // scope 54 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _292 = DropAccountant::push::<&str>(move _293, const "body") -> [return: bb141, unwind: bb369]; // scope 54 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb139: {
        drop(_288) -> [return: bb140, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb140: {
        _286 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _285 = DropAccountant::push::<&str>(move _286, const "else") -> [return: bb392, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb141: {
        drop(_288) -> [return: bb142, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb142: {
        _295 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _296 = _267;                     // scope 51 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _294 = DropAccountant::build_droppy_enum_none(move _295, move _296) -> [return: bb143, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:256:48: 256:70
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb143: {
        _300 = move _294;                // scope 55 at ui/let-else/let-else-drop-order.rs:153:29: 153:30
        _299 = move _300;                // scope 57 at ui/let-else/let-else-drop-order.rs:154:21: 154:22
        _301 = discriminant((_299.1: DroppyEnum<u32>)); // scope 55 at ui/let-else/let-else-drop-order.rs:152:17: 156:19
        switchInt(move _301) -> [0: bb144, otherwise: bb145]; // scope 55 at ui/let-else/let-else-drop-order.rs:256:24: 256:46
    }

    bb144: {
        drop(_299) -> [return: bb147, unwind: bb387]; // scope 55 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb145: {
        drop(_299) -> [return: bb146, unwind: bb387]; // scope 55 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb146: {
        _298 = _266;                     // scope 55 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _297 = DropAccountant::push::<&str>(move _298, const "else") -> [return: bb393, unwind: bb387]; // scope 55 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb147: {
        _303 = _266;                     // scope 56 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _302 = DropAccountant::push::<&str>(move _303, const "body") -> [return: bb394, unwind: bb387]; // scope 56 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb148: {
        _308 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _309 = _267;                     // scope 51 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _307 = DropAccountant::build_droppy_enum_none(move _308, move _309) -> [return: bb149, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:256:48: 256:70
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb149: {
        _306 = identity::<((), DroppyEnum<u32>)>(move _307) -> [return: bb150, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:161:31: 161:59
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:161:31: 161:53
                                         // + literal: Const { ty: fn(((), DroppyEnum<u32>)) -> ((), DroppyEnum<u32>) {identity::<((), DroppyEnum<u32>)>}, val: Value(<ZST>) }
    }

    bb150: {
        _310 = discriminant((_306.1: DroppyEnum<u32>)); // scope 51 at ui/let-else/let-else-drop-order.rs:161:31: 161:61
        switchInt(move _310) -> [0: bb151, otherwise: bb152]; // scope 51 at ui/let-else/let-else-drop-order.rs:256:24: 256:46
    }

    bb151: {
        drop(_306) -> [return: bb154, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb152: {
        drop(_306) -> [return: bb153, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb153: {
        _305 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _304 = DropAccountant::push::<&str>(move _305, const "else") -> [return: bb395, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb154: {
        _312 = _266;                     // scope 58 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _311 = DropAccountant::push::<&str>(move _312, const "body") -> [return: bb396, unwind: bb387]; // scope 58 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb155: {
        _318 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _319 = _267;                     // scope 51 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _317 = DropAccountant::build_droppy_enum_none(move _318, move _319) -> [return: bb156, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:256:48: 256:70
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb156: {
        _316 = move (_317.1: DroppyEnum<u32>); // scope 51 at ui/let-else/let-else-drop-order.rs:170:38: 170:44
        _315 = (move _316, const 77_i32); // scope 51 at ui/let-else/let-else-drop-order.rs:170:37: 170:49
        _320 = discriminant((_315.0: DroppyEnum<u32>)); // scope 51 at ui/let-else/let-else-drop-order.rs:170:37: 170:49
        switchInt(move _320) -> [0: bb157, otherwise: bb159]; // scope 51 at ui/let-else/let-else-drop-order.rs:170:21: 170:35
    }

    bb157: {
        switchInt((_315.1: i32)) -> [77: bb158, otherwise: bb159]; // scope 51 at ui/let-else/let-else-drop-order.rs:170:21: 170:35
    }

    bb158: {
        drop(_315) -> [return: bb161, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb159: {
        drop(_315) -> [return: bb160, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb160: {
        _314 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _313 = DropAccountant::push::<&str>(move _314, const "else") -> [return: bb397, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb161: {
        _322 = _266;                     // scope 59 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _321 = DropAccountant::push::<&str>(move _322, const "body") -> [return: bb398, unwind: bb387]; // scope 59 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb162: {
        _328 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _329 = _267;                     // scope 51 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _327 = DropAccountant::build_droppy_enum_none(move _328, move _329) -> [return: bb163, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:256:48: 256:70
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb163: {
        _326 = move (_327.1: DroppyEnum<u32>); // scope 51 at ui/let-else/let-else-drop-order.rs:173:34: 173:40
        _325 = [move _326];              // scope 51 at ui/let-else/let-else-drop-order.rs:173:33: 173:41
        _330 = discriminant(_325[0 of 1]); // scope 51 at ui/let-else/let-else-drop-order.rs:173:33: 173:41
        switchInt(move _330) -> [0: bb164, otherwise: bb165]; // scope 51 at ui/let-else/let-else-drop-order.rs:173:21: 173:31
    }

    bb164: {
        drop(_325) -> [return: bb167, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb165: {
        drop(_325) -> [return: bb166, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb166: {
        _324 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _323 = DropAccountant::push::<&str>(move _324, const "else") -> [return: bb399, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb167: {
        _332 = _266;                     // scope 60 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _331 = DropAccountant::push::<&str>(move _332, const "body") -> [return: bb400, unwind: bb387]; // scope 60 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb168: {
        _337 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
        _338 = _267;                     // scope 51 at ui/let-else/let-else-drop-order.rs:196:51: 196:52
        _336 = DropAccountant::build_droppy_enum_none(move _337, move _338) -> [return: bb169, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:256:48: 256:70
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb169: {
        _335 = &(_336.1: DroppyEnum<u32>); // scope 51 at ui/let-else/let-else-drop-order.rs:196:39: 196:55
        _339 = discriminant((*_335));    // scope 51 at ui/let-else/let-else-drop-order.rs:196:39: 196:55
        switchInt(move _339) -> [0: bb170, otherwise: bb171]; // scope 51 at ui/let-else/let-else-drop-order.rs:256:24: 256:46
    }

    bb170: {
        _341 = _266;                     // scope 61 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _340 = DropAccountant::push::<&str>(move _341, const "body") -> [return: bb173, unwind: bb368]; // scope 61 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb171: {
        drop(_336) -> [return: bb172, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb172: {
        _334 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _333 = DropAccountant::push::<&str>(move _334, const "else") -> [return: bb401, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb173: {
        drop(_336) -> [return: bb174, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb174: {
        _346 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
        _347 = _267;                     // scope 51 at ui/let-else/let-else-drop-order.rs:199:55: 199:56
        _345 = DropAccountant::build_droppy_enum_none(move _346, move _347) -> [return: bb175, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:256:48: 256:70
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb175: {
        _344 = &mut (_345.1: DroppyEnum<u32>); // scope 51 at ui/let-else/let-else-drop-order.rs:199:39: 199:59
        _348 = discriminant((*_344));    // scope 51 at ui/let-else/let-else-drop-order.rs:199:39: 199:59
        switchInt(move _348) -> [0: bb176, otherwise: bb177]; // scope 51 at ui/let-else/let-else-drop-order.rs:256:24: 256:46
    }

    bb176: {
        _350 = _266;                     // scope 62 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _349 = DropAccountant::push::<&str>(move _350, const "body") -> [return: bb179, unwind: bb367]; // scope 62 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb177: {
        drop(_345) -> [return: bb178, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb178: {
        _343 = _266;                     // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _342 = DropAccountant::push::<&str>(move _343, const "else") -> [return: bb402, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb179: {
        drop(_345) -> [return: bb180, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb180: {
        _352 = &_1;                      // scope 51 at ui/let-else/let-else-drop-order.rs:257:5: 257:41
        _351 = DropAccountant::new_list::<&str>(move _352, const "let else _v mismatch") -> [return: bb181, unwind: bb387]; // scope 51 at ui/let-else/let-else-drop-order.rs:257:5: 257:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:257:9: 257:17
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::new_list::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:257:18: 257:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb181: {
        _353 = &_1;                      // scope 51 at ui/let-else/let-else-drop-order.rs:258:15: 258:19
        _354 = const 1_u32;              // scope 63 at ui/let-else/let-else-drop-order.rs:258:21: 258:22
        _359 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _360 = const 1_u32;              // scope 64 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _358 = DropAccountant::build_droppy_enum_none(move _359, move _360) -> [return: bb182, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:258:49: 258:71
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb182: {
        _361 = discriminant((_358.1: DroppyEnum<u32>)); // scope 64 at ui/let-else/let-else-drop-order.rs:139:31: 139:37
        switchInt(move _361) -> [0: bb183, otherwise: bb184]; // scope 64 at ui/let-else/let-else-drop-order.rs:258:24: 258:47
    }

    bb183: {
        _357 = (((_358.1: DroppyEnum<u32>) as Some).1: u32); // scope 64 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
        drop(_358) -> [return: bb186, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb184: {
        drop(_358) -> [return: bb185, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb185: {
        _356 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _355 = DropAccountant::push::<&str>(move _356, const "else") -> [return: bb403, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb186: {
        _363 = _353;                     // scope 65 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _362 = DropAccountant::push::<&str>(move _363, const "body") -> [return: bb404, unwind: bb387]; // scope 65 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb187: {
        _369 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _370 = _354;                     // scope 64 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _368 = DropAccountant::build_droppy_enum_none(move _369, move _370) -> [return: bb188, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:258:49: 258:71
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb188: {
        _367 = &(_368.1: DroppyEnum<u32>); // scope 64 at ui/let-else/let-else-drop-order.rs:142:32: 142:39
        _371 = discriminant((*_367));    // scope 64 at ui/let-else/let-else-drop-order.rs:142:32: 142:39
        switchInt(move _371) -> [0: bb189, otherwise: bb190]; // scope 64 at ui/let-else/let-else-drop-order.rs:142:21: 142:30
    }

    bb189: {
        _366 = (((*_367) as Some).1: u32); // scope 64 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
        _373 = _353;                     // scope 66 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _372 = DropAccountant::push::<&str>(move _373, const "body") -> [return: bb192, unwind: bb366]; // scope 66 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb190: {
        drop(_368) -> [return: bb191, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb191: {
        _365 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _364 = DropAccountant::push::<&str>(move _365, const "else") -> [return: bb405, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb192: {
        drop(_368) -> [return: bb193, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb193: {
        _379 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _380 = _354;                     // scope 64 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _378 = DropAccountant::build_droppy_enum_none(move _379, move _380) -> [return: bb194, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:258:49: 258:71
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb194: {
        _377 = &mut (_378.1: DroppyEnum<u32>); // scope 64 at ui/let-else/let-else-drop-order.rs:145:36: 145:49
        _381 = discriminant((*_377));    // scope 64 at ui/let-else/let-else-drop-order.rs:145:36: 145:49
        switchInt(move _381) -> [0: bb195, otherwise: bb196]; // scope 64 at ui/let-else/let-else-drop-order.rs:145:21: 145:34
    }

    bb195: {
        _376 = (((*_377) as Some).1: u32); // scope 64 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
        _383 = _353;                     // scope 67 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _382 = DropAccountant::push::<&str>(move _383, const "body") -> [return: bb198, unwind: bb365]; // scope 67 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb196: {
        drop(_378) -> [return: bb197, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb197: {
        _375 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _374 = DropAccountant::push::<&str>(move _375, const "else") -> [return: bb406, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb198: {
        drop(_378) -> [return: bb199, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb199: {
        _385 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _386 = _354;                     // scope 64 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _384 = DropAccountant::build_droppy_enum_none(move _385, move _386) -> [return: bb200, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:258:49: 258:71
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb200: {
        _391 = move _384;                // scope 68 at ui/let-else/let-else-drop-order.rs:153:29: 153:30
        _390 = move _391;                // scope 70 at ui/let-else/let-else-drop-order.rs:154:21: 154:22
        _392 = discriminant((_390.1: DroppyEnum<u32>)); // scope 68 at ui/let-else/let-else-drop-order.rs:152:17: 156:19
        switchInt(move _392) -> [0: bb201, otherwise: bb202]; // scope 68 at ui/let-else/let-else-drop-order.rs:258:24: 258:47
    }

    bb201: {
        _389 = (((_390.1: DroppyEnum<u32>) as Some).1: u32); // scope 68 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
        drop(_390) -> [return: bb204, unwind: bb387]; // scope 68 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb202: {
        drop(_390) -> [return: bb203, unwind: bb387]; // scope 68 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb203: {
        _388 = _353;                     // scope 68 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _387 = DropAccountant::push::<&str>(move _388, const "else") -> [return: bb407, unwind: bb387]; // scope 68 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb204: {
        _394 = _353;                     // scope 69 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _393 = DropAccountant::push::<&str>(move _394, const "body") -> [return: bb408, unwind: bb387]; // scope 69 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb205: {
        _400 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _401 = _354;                     // scope 64 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _399 = DropAccountant::build_droppy_enum_none(move _400, move _401) -> [return: bb206, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:258:49: 258:71
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb206: {
        _398 = identity::<((), DroppyEnum<u32>)>(move _399) -> [return: bb207, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:161:31: 161:59
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:161:31: 161:53
                                         // + literal: Const { ty: fn(((), DroppyEnum<u32>)) -> ((), DroppyEnum<u32>) {identity::<((), DroppyEnum<u32>)>}, val: Value(<ZST>) }
    }

    bb207: {
        _402 = discriminant((_398.1: DroppyEnum<u32>)); // scope 64 at ui/let-else/let-else-drop-order.rs:161:31: 161:61
        switchInt(move _402) -> [0: bb208, otherwise: bb209]; // scope 64 at ui/let-else/let-else-drop-order.rs:258:24: 258:47
    }

    bb208: {
        _397 = (((_398.1: DroppyEnum<u32>) as Some).1: u32); // scope 64 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
        drop(_398) -> [return: bb211, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb209: {
        drop(_398) -> [return: bb210, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb210: {
        _396 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _395 = DropAccountant::push::<&str>(move _396, const "else") -> [return: bb409, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb211: {
        _404 = _353;                     // scope 71 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _403 = DropAccountant::push::<&str>(move _404, const "body") -> [return: bb410, unwind: bb387]; // scope 71 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb212: {
        _411 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _412 = _354;                     // scope 64 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _410 = DropAccountant::build_droppy_enum_none(move _411, move _412) -> [return: bb213, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:258:49: 258:71
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb213: {
        _409 = move (_410.1: DroppyEnum<u32>); // scope 64 at ui/let-else/let-else-drop-order.rs:170:38: 170:44
        _408 = (move _409, const 77_i32); // scope 64 at ui/let-else/let-else-drop-order.rs:170:37: 170:49
        _413 = discriminant((_408.0: DroppyEnum<u32>)); // scope 64 at ui/let-else/let-else-drop-order.rs:170:37: 170:49
        switchInt(move _413) -> [0: bb214, otherwise: bb216]; // scope 64 at ui/let-else/let-else-drop-order.rs:170:21: 170:35
    }

    bb214: {
        switchInt((_408.1: i32)) -> [77: bb215, otherwise: bb216]; // scope 64 at ui/let-else/let-else-drop-order.rs:170:21: 170:35
    }

    bb215: {
        _407 = (((_408.0: DroppyEnum<u32>) as Some).1: u32); // scope 64 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
        drop(_408) -> [return: bb218, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb216: {
        drop(_408) -> [return: bb217, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb217: {
        _406 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _405 = DropAccountant::push::<&str>(move _406, const "else") -> [return: bb411, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb218: {
        _415 = _353;                     // scope 72 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _414 = DropAccountant::push::<&str>(move _415, const "body") -> [return: bb412, unwind: bb387]; // scope 72 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb219: {
        _422 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _423 = _354;                     // scope 64 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _421 = DropAccountant::build_droppy_enum_none(move _422, move _423) -> [return: bb220, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:258:49: 258:71
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb220: {
        _420 = move (_421.1: DroppyEnum<u32>); // scope 64 at ui/let-else/let-else-drop-order.rs:173:34: 173:40
        _419 = [move _420];              // scope 64 at ui/let-else/let-else-drop-order.rs:173:33: 173:41
        _424 = discriminant(_419[0 of 1]); // scope 64 at ui/let-else/let-else-drop-order.rs:173:33: 173:41
        switchInt(move _424) -> [0: bb221, otherwise: bb222]; // scope 64 at ui/let-else/let-else-drop-order.rs:173:21: 173:31
    }

    bb221: {
        _418 = ((_419[0 of 1] as Some).1: u32); // scope 64 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
        drop(_419) -> [return: bb224, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb222: {
        drop(_419) -> [return: bb223, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb223: {
        _417 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _416 = DropAccountant::push::<&str>(move _417, const "else") -> [return: bb413, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb224: {
        _426 = _353;                     // scope 73 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _425 = DropAccountant::push::<&str>(move _426, const "body") -> [return: bb414, unwind: bb387]; // scope 73 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb225: {
        _432 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
        _433 = _354;                     // scope 64 at ui/let-else/let-else-drop-order.rs:196:51: 196:52
        _431 = DropAccountant::build_droppy_enum_none(move _432, move _433) -> [return: bb226, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:258:49: 258:71
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb226: {
        _430 = &(_431.1: DroppyEnum<u32>); // scope 64 at ui/let-else/let-else-drop-order.rs:196:39: 196:55
        _434 = discriminant((*_430));    // scope 64 at ui/let-else/let-else-drop-order.rs:196:39: 196:55
        switchInt(move _434) -> [0: bb227, otherwise: bb228]; // scope 64 at ui/let-else/let-else-drop-order.rs:258:24: 258:47
    }

    bb227: {
        _429 = &(((*_430) as Some).1: u32); // scope 64 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
        _436 = _353;                     // scope 74 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _435 = DropAccountant::push::<&str>(move _436, const "body") -> [return: bb230, unwind: bb364]; // scope 74 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb228: {
        drop(_431) -> [return: bb229, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb229: {
        _428 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _427 = DropAccountant::push::<&str>(move _428, const "else") -> [return: bb415, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb230: {
        drop(_431) -> [return: bb231, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb231: {
        _442 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
        _443 = _354;                     // scope 64 at ui/let-else/let-else-drop-order.rs:199:55: 199:56
        _441 = DropAccountant::build_droppy_enum_none(move _442, move _443) -> [return: bb232, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:258:49: 258:71
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> ((), DroppyEnum<u32>) {DropAccountant::build_droppy_enum_none}, val: Value(<ZST>) }
    }

    bb232: {
        _440 = &mut (_441.1: DroppyEnum<u32>); // scope 64 at ui/let-else/let-else-drop-order.rs:199:39: 199:59
        _444 = discriminant((*_440));    // scope 64 at ui/let-else/let-else-drop-order.rs:199:39: 199:59
        switchInt(move _444) -> [0: bb233, otherwise: bb234]; // scope 64 at ui/let-else/let-else-drop-order.rs:258:24: 258:47
    }

    bb233: {
        _439 = &mut (((*_440) as Some).1: u32); // scope 64 at ui/let-else/let-else-drop-order.rs:258:44: 258:46
        _446 = _353;                     // scope 75 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _445 = DropAccountant::push::<&str>(move _446, const "body") -> [return: bb236, unwind: bb363]; // scope 75 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb234: {
        drop(_441) -> [return: bb235, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb235: {
        _438 = _353;                     // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _437 = DropAccountant::push::<&str>(move _438, const "else") -> [return: bb416, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb236: {
        drop(_441) -> [return: bb237, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb237: {
        _448 = &_1;                      // scope 64 at ui/let-else/let-else-drop-order.rs:259:5: 259:22
        _447 = DropAccountant::print_table(move _448) -> [return: bb238, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:259:5: 259:22
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:259:9: 259:20
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant) {DropAccountant::print_table}, val: Value(<ZST>) }
    }

    bb238: {
        _450 = &_1;                      // scope 64 at ui/let-else/let-else-drop-order.rs:261:5: 261:41
        _452 = const "drop,else";        // scope 64 at ui/let-else/let-else-drop-order.rs:261:29: 261:40
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:261:29: 261:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _451 = _452;                     // scope 64 at ui/let-else/let-else-drop-order.rs:261:29: 261:40
        _449 = DropAccountant::assert_all_equal_to(move _450, move _451) -> [return: bb239, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:261:5: 261:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:261:9: 261:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a DropAccountant, &'b str) {DropAccountant::assert_all_equal_to}, val: Value(<ZST>) }
    }

    bb239: {
        _454 = &_1;                      // scope 64 at ui/let-else/let-else-drop-order.rs:263:5: 263:40
        _453 = DropAccountant::new_list::<&str>(move _454, const "let else 0 mismatch") -> [return: bb240, unwind: bb387]; // scope 64 at ui/let-else/let-else-drop-order.rs:263:5: 263:40
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:263:9: 263:17
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::new_list::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:263:18: 263:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb240: {
        _455 = &_1;                      // scope 64 at ui/let-else/let-else-drop-order.rs:264:15: 264:19
        _456 = const 1_u32;              // scope 76 at ui/let-else/let-else-drop-order.rs:264:21: 264:22
        _460 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _461 = const 1_u32;              // scope 77 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _459 = DropAccountant::build_droppy(move _460, move _461) -> [return: bb241, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:264:27: 264:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb241: {
        switchInt((_459.1: u32)) -> [0: bb242, otherwise: bb243]; // scope 77 at ui/let-else/let-else-drop-order.rs:264:24: 264:25
    }

    bb242: {
        drop(_459) -> [return: bb245, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb243: {
        drop(_459) -> [return: bb244, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb244: {
        _458 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _457 = DropAccountant::push::<&str>(move _458, const "else") -> [return: bb417, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb245: {
        _463 = _455;                     // scope 78 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _462 = DropAccountant::push::<&str>(move _463, const "body") -> [return: bb418, unwind: bb387]; // scope 78 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb246: {
        _468 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _469 = _456;                     // scope 77 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _467 = DropAccountant::build_droppy(move _468, move _469) -> [return: bb247, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:264:27: 264:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb247: {
        _466 = &(_467.1: u32);           // scope 77 at ui/let-else/let-else-drop-order.rs:142:32: 142:39
        switchInt((*_466)) -> [0: bb248, otherwise: bb249]; // scope 77 at ui/let-else/let-else-drop-order.rs:142:21: 142:30
    }

    bb248: {
        _471 = _455;                     // scope 79 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _470 = DropAccountant::push::<&str>(move _471, const "body") -> [return: bb251, unwind: bb362]; // scope 79 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb249: {
        drop(_467) -> [return: bb250, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb250: {
        _465 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _464 = DropAccountant::push::<&str>(move _465, const "else") -> [return: bb419, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb251: {
        drop(_467) -> [return: bb252, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb252: {
        _476 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _477 = _456;                     // scope 77 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _475 = DropAccountant::build_droppy(move _476, move _477) -> [return: bb253, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:264:27: 264:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb253: {
        _474 = &mut (_475.1: u32);       // scope 77 at ui/let-else/let-else-drop-order.rs:145:36: 145:49
        switchInt((*_474)) -> [0: bb254, otherwise: bb255]; // scope 77 at ui/let-else/let-else-drop-order.rs:145:21: 145:34
    }

    bb254: {
        _479 = _455;                     // scope 80 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _478 = DropAccountant::push::<&str>(move _479, const "body") -> [return: bb257, unwind: bb361]; // scope 80 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb255: {
        drop(_475) -> [return: bb256, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb256: {
        _473 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _472 = DropAccountant::push::<&str>(move _473, const "else") -> [return: bb420, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb257: {
        drop(_475) -> [return: bb258, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb258: {
        _481 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _482 = _456;                     // scope 77 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _480 = DropAccountant::build_droppy(move _481, move _482) -> [return: bb259, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:264:27: 264:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb259: {
        _486 = move _480;                // scope 81 at ui/let-else/let-else-drop-order.rs:153:29: 153:30
        _485 = move _486;                // scope 83 at ui/let-else/let-else-drop-order.rs:154:21: 154:22
        switchInt((_485.1: u32)) -> [0: bb260, otherwise: bb261]; // scope 81 at ui/let-else/let-else-drop-order.rs:264:24: 264:25
    }

    bb260: {
        drop(_485) -> [return: bb263, unwind: bb387]; // scope 81 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb261: {
        drop(_485) -> [return: bb262, unwind: bb387]; // scope 81 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb262: {
        _484 = _455;                     // scope 81 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _483 = DropAccountant::push::<&str>(move _484, const "else") -> [return: bb421, unwind: bb387]; // scope 81 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb263: {
        _488 = _455;                     // scope 82 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _487 = DropAccountant::push::<&str>(move _488, const "body") -> [return: bb422, unwind: bb387]; // scope 82 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb264: {
        _493 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _494 = _456;                     // scope 77 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _492 = DropAccountant::build_droppy(move _493, move _494) -> [return: bb265, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:264:27: 264:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb265: {
        _491 = identity::<Droppy<u32>>(move _492) -> [return: bb266, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:161:31: 161:59
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:161:31: 161:53
                                         // + literal: Const { ty: fn(Droppy<u32>) -> Droppy<u32> {identity::<Droppy<u32>>}, val: Value(<ZST>) }
    }

    bb266: {
        switchInt((_491.1: u32)) -> [0: bb267, otherwise: bb268]; // scope 77 at ui/let-else/let-else-drop-order.rs:264:24: 264:25
    }

    bb267: {
        drop(_491) -> [return: bb270, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb268: {
        drop(_491) -> [return: bb269, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb269: {
        _490 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _489 = DropAccountant::push::<&str>(move _490, const "else") -> [return: bb423, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb270: {
        _496 = _455;                     // scope 84 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _495 = DropAccountant::push::<&str>(move _496, const "body") -> [return: bb424, unwind: bb387]; // scope 84 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb271: {
        _502 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _503 = _456;                     // scope 77 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _501 = DropAccountant::build_droppy(move _502, move _503) -> [return: bb272, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:264:27: 264:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb272: {
        _500 = (_501.1: u32);            // scope 77 at ui/let-else/let-else-drop-order.rs:170:38: 170:44
        _499 = (move _500, const 77_i32); // scope 77 at ui/let-else/let-else-drop-order.rs:170:37: 170:49
        switchInt((_499.0: u32)) -> [0: bb273, otherwise: bb274]; // scope 77 at ui/let-else/let-else-drop-order.rs:170:21: 170:35
    }

    bb273: {
        drop(_501) -> [return: bb276, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb274: {
        drop(_501) -> [return: bb275, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb275: {
        _498 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _497 = DropAccountant::push::<&str>(move _498, const "else") -> [return: bb425, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb276: {
        _505 = _455;                     // scope 85 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _504 = DropAccountant::push::<&str>(move _505, const "body") -> [return: bb426, unwind: bb387]; // scope 85 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb277: {
        _511 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _512 = _456;                     // scope 77 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _510 = DropAccountant::build_droppy(move _511, move _512) -> [return: bb278, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:264:27: 264:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb278: {
        _509 = (_510.1: u32);            // scope 77 at ui/let-else/let-else-drop-order.rs:173:34: 173:40
        _508 = [move _509];              // scope 77 at ui/let-else/let-else-drop-order.rs:173:33: 173:41
        switchInt(_508[0 of 1]) -> [0: bb279, otherwise: bb280]; // scope 77 at ui/let-else/let-else-drop-order.rs:173:21: 173:31
    }

    bb279: {
        drop(_510) -> [return: bb282, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb280: {
        drop(_510) -> [return: bb281, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb281: {
        _507 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _506 = DropAccountant::push::<&str>(move _507, const "else") -> [return: bb427, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb282: {
        _514 = _455;                     // scope 86 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _513 = DropAccountant::push::<&str>(move _514, const "body") -> [return: bb428, unwind: bb387]; // scope 86 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb283: {
        _519 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
        _520 = _456;                     // scope 77 at ui/let-else/let-else-drop-order.rs:196:51: 196:52
        _518 = DropAccountant::build_droppy(move _519, move _520) -> [return: bb284, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:264:27: 264:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb284: {
        _517 = &(_518.1: u32);           // scope 77 at ui/let-else/let-else-drop-order.rs:196:39: 196:55
        switchInt((*_517)) -> [0: bb285, otherwise: bb286]; // scope 77 at ui/let-else/let-else-drop-order.rs:264:24: 264:25
    }

    bb285: {
        _522 = _455;                     // scope 87 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _521 = DropAccountant::push::<&str>(move _522, const "body") -> [return: bb288, unwind: bb360]; // scope 87 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb286: {
        drop(_518) -> [return: bb287, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb287: {
        _516 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _515 = DropAccountant::push::<&str>(move _516, const "else") -> [return: bb429, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb288: {
        drop(_518) -> [return: bb289, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb289: {
        _527 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
        _528 = _456;                     // scope 77 at ui/let-else/let-else-drop-order.rs:199:55: 199:56
        _526 = DropAccountant::build_droppy(move _527, move _528) -> [return: bb290, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:264:27: 264:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb290: {
        _525 = &mut (_526.1: u32);       // scope 77 at ui/let-else/let-else-drop-order.rs:199:39: 199:59
        switchInt((*_525)) -> [0: bb291, otherwise: bb292]; // scope 77 at ui/let-else/let-else-drop-order.rs:264:24: 264:25
    }

    bb291: {
        _530 = _455;                     // scope 88 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _529 = DropAccountant::push::<&str>(move _530, const "body") -> [return: bb294, unwind: bb359]; // scope 88 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb292: {
        drop(_526) -> [return: bb293, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb293: {
        _524 = _455;                     // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _523 = DropAccountant::push::<&str>(move _524, const "else") -> [return: bb430, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb294: {
        drop(_526) -> [return: bb295, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb295: {
        _532 = &_1;                      // scope 77 at ui/let-else/let-else-drop-order.rs:265:5: 265:40
        _531 = DropAccountant::new_list::<&str>(move _532, const "let else 0 mismatch") -> [return: bb296, unwind: bb387]; // scope 77 at ui/let-else/let-else-drop-order.rs:265:5: 265:40
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:265:9: 265:17
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::new_list::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:265:18: 265:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb296: {
        _533 = &_1;                      // scope 77 at ui/let-else/let-else-drop-order.rs:266:15: 266:19
        _534 = const 1_u32;              // scope 89 at ui/let-else/let-else-drop-order.rs:266:21: 266:22
        _538 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _539 = const 1_u32;              // scope 90 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _537 = DropAccountant::build_droppy(move _538, move _539) -> [return: bb297, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:266:27: 266:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb297: {
        switchInt((_537.1: u32)) -> [0: bb298, otherwise: bb299]; // scope 90 at ui/let-else/let-else-drop-order.rs:266:24: 266:25
    }

    bb298: {
        drop(_537) -> [return: bb301, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb299: {
        drop(_537) -> [return: bb300, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb300: {
        _536 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _535 = DropAccountant::push::<&str>(move _536, const "else") -> [return: bb431, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb301: {
        _541 = _533;                     // scope 91 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _540 = DropAccountant::push::<&str>(move _541, const "body") -> [return: bb432, unwind: bb387]; // scope 91 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb302: {
        _546 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _547 = _534;                     // scope 90 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _545 = DropAccountant::build_droppy(move _546, move _547) -> [return: bb303, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:266:27: 266:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb303: {
        _544 = &(_545.1: u32);           // scope 90 at ui/let-else/let-else-drop-order.rs:142:32: 142:39
        switchInt((*_544)) -> [0: bb304, otherwise: bb305]; // scope 90 at ui/let-else/let-else-drop-order.rs:142:21: 142:30
    }

    bb304: {
        _549 = _533;                     // scope 92 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _548 = DropAccountant::push::<&str>(move _549, const "body") -> [return: bb307, unwind: bb358]; // scope 92 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb305: {
        drop(_545) -> [return: bb306, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb306: {
        _543 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _542 = DropAccountant::push::<&str>(move _543, const "else") -> [return: bb433, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb307: {
        drop(_545) -> [return: bb308, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb308: {
        _554 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _555 = _534;                     // scope 90 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _553 = DropAccountant::build_droppy(move _554, move _555) -> [return: bb309, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:266:27: 266:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb309: {
        _552 = &mut (_553.1: u32);       // scope 90 at ui/let-else/let-else-drop-order.rs:145:36: 145:49
        switchInt((*_552)) -> [0: bb310, otherwise: bb311]; // scope 90 at ui/let-else/let-else-drop-order.rs:145:21: 145:34
    }

    bb310: {
        _557 = _533;                     // scope 93 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _556 = DropAccountant::push::<&str>(move _557, const "body") -> [return: bb313, unwind: bb357]; // scope 93 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb311: {
        drop(_553) -> [return: bb312, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb312: {
        _551 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _550 = DropAccountant::push::<&str>(move _551, const "else") -> [return: bb434, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb313: {
        drop(_553) -> [return: bb314, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb314: {
        _559 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _560 = _534;                     // scope 90 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _558 = DropAccountant::build_droppy(move _559, move _560) -> [return: bb315, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:266:27: 266:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb315: {
        _564 = move _558;                // scope 94 at ui/let-else/let-else-drop-order.rs:153:29: 153:30
        _563 = move _564;                // scope 96 at ui/let-else/let-else-drop-order.rs:154:21: 154:22
        switchInt((_563.1: u32)) -> [0: bb316, otherwise: bb317]; // scope 94 at ui/let-else/let-else-drop-order.rs:266:24: 266:25
    }

    bb316: {
        drop(_563) -> [return: bb319, unwind: bb387]; // scope 94 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb317: {
        drop(_563) -> [return: bb318, unwind: bb387]; // scope 94 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb318: {
        _562 = _533;                     // scope 94 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _561 = DropAccountant::push::<&str>(move _562, const "else") -> [return: bb435, unwind: bb387]; // scope 94 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb319: {
        _566 = _533;                     // scope 95 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _565 = DropAccountant::push::<&str>(move _566, const "body") -> [return: bb436, unwind: bb387]; // scope 95 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb320: {
        _571 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _572 = _534;                     // scope 90 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _570 = DropAccountant::build_droppy(move _571, move _572) -> [return: bb321, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:266:27: 266:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb321: {
        _569 = identity::<Droppy<u32>>(move _570) -> [return: bb322, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:161:31: 161:59
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:161:31: 161:53
                                         // + literal: Const { ty: fn(Droppy<u32>) -> Droppy<u32> {identity::<Droppy<u32>>}, val: Value(<ZST>) }
    }

    bb322: {
        switchInt((_569.1: u32)) -> [0: bb323, otherwise: bb324]; // scope 90 at ui/let-else/let-else-drop-order.rs:266:24: 266:25
    }

    bb323: {
        drop(_569) -> [return: bb326, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb324: {
        drop(_569) -> [return: bb325, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb325: {
        _568 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _567 = DropAccountant::push::<&str>(move _568, const "else") -> [return: bb437, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb326: {
        _574 = _533;                     // scope 97 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _573 = DropAccountant::push::<&str>(move _574, const "body") -> [return: bb438, unwind: bb387]; // scope 97 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb327: {
        _580 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _581 = _534;                     // scope 90 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _579 = DropAccountant::build_droppy(move _580, move _581) -> [return: bb328, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:266:27: 266:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb328: {
        _578 = (_579.1: u32);            // scope 90 at ui/let-else/let-else-drop-order.rs:170:38: 170:44
        _577 = (move _578, const 77_i32); // scope 90 at ui/let-else/let-else-drop-order.rs:170:37: 170:49
        switchInt((_577.0: u32)) -> [0: bb329, otherwise: bb330]; // scope 90 at ui/let-else/let-else-drop-order.rs:170:21: 170:35
    }

    bb329: {
        drop(_579) -> [return: bb332, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb330: {
        drop(_579) -> [return: bb331, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb331: {
        _576 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _575 = DropAccountant::push::<&str>(move _576, const "else") -> [return: bb439, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb332: {
        _583 = _533;                     // scope 98 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _582 = DropAccountant::push::<&str>(move _583, const "body") -> [return: bb440, unwind: bb387]; // scope 98 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb333: {
        _589 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
        _590 = _534;                     // scope 90 at ui/let-else/let-else-drop-order.rs:194:60: 194:61
        _588 = DropAccountant::build_droppy(move _589, move _590) -> [return: bb334, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:194:49: 194:62
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:266:27: 266:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb334: {
        _587 = (_588.1: u32);            // scope 90 at ui/let-else/let-else-drop-order.rs:173:34: 173:40
        _586 = [move _587];              // scope 90 at ui/let-else/let-else-drop-order.rs:173:33: 173:41
        switchInt(_586[0 of 1]) -> [0: bb335, otherwise: bb336]; // scope 90 at ui/let-else/let-else-drop-order.rs:173:21: 173:31
    }

    bb335: {
        drop(_588) -> [return: bb338, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb336: {
        drop(_588) -> [return: bb337, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:188:22: 188:23
    }

    bb337: {
        _585 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _584 = DropAccountant::push::<&str>(move _585, const "else") -> [return: bb441, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb338: {
        _592 = _533;                     // scope 99 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _591 = DropAccountant::push::<&str>(move _592, const "body") -> [return: bb442, unwind: bb387]; // scope 99 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb339: {
        _597 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
        _598 = _534;                     // scope 90 at ui/let-else/let-else-drop-order.rs:196:51: 196:52
        _596 = DropAccountant::build_droppy(move _597, move _598) -> [return: bb340, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:196:40: 196:53
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:266:27: 266:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb340: {
        _595 = &(_596.1: u32);           // scope 90 at ui/let-else/let-else-drop-order.rs:196:39: 196:55
        switchInt((*_595)) -> [0: bb341, otherwise: bb342]; // scope 90 at ui/let-else/let-else-drop-order.rs:266:24: 266:25
    }

    bb341: {
        _600 = _533;                     // scope 100 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _599 = DropAccountant::push::<&str>(move _600, const "body") -> [return: bb344, unwind: bb356]; // scope 100 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb342: {
        drop(_596) -> [return: bb343, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb343: {
        _594 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _593 = DropAccountant::push::<&str>(move _594, const "else") -> [return: bb443, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb344: {
        drop(_596) -> [return: bb345, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb345: {
        _605 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
        _606 = _534;                     // scope 90 at ui/let-else/let-else-drop-order.rs:199:55: 199:56
        _604 = DropAccountant::build_droppy(move _605, move _606) -> [return: bb346, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:199:44: 199:57
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:266:27: 266:39
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, u32) -> Droppy<u32> {DropAccountant::build_droppy}, val: Value(<ZST>) }
    }

    bb346: {
        _603 = &mut (_604.1: u32);       // scope 90 at ui/let-else/let-else-drop-order.rs:199:39: 199:59
        switchInt((*_603)) -> [0: bb347, otherwise: bb348]; // scope 90 at ui/let-else/let-else-drop-order.rs:266:24: 266:25
    }

    bb347: {
        _608 = _533;                     // scope 101 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
        _607 = DropAccountant::push::<&str>(move _608, const "body") -> [return: bb350, unwind: bb355]; // scope 101 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:25: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:189:30: 189:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb348: {
        drop(_604) -> [return: bb349, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb349: {
        _602 = _533;                     // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
        _601 = DropAccountant::push::<&str>(move _602, const "else") -> [return: bb444, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:29: 186:33
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant, &str) {DropAccountant::push::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:186:34: 186:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb350: {
        drop(_604) -> [return: bb351, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb351: {
        _610 = &_1;                      // scope 90 at ui/let-else/let-else-drop-order.rs:267:5: 267:22
        _609 = DropAccountant::print_table(move _610) -> [return: bb352, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:267:5: 267:22
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:267:9: 267:20
                                         // + literal: Const { ty: for<'a> fn(&'a DropAccountant) {DropAccountant::print_table}, val: Value(<ZST>) }
    }

    bb352: {
        _612 = &_1;                      // scope 90 at ui/let-else/let-else-drop-order.rs:269:5: 269:41
        _614 = const "drop,else";        // scope 90 at ui/let-else/let-else-drop-order.rs:269:29: 269:40
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:269:29: 269:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _613 = _614;                     // scope 90 at ui/let-else/let-else-drop-order.rs:269:29: 269:40
        _611 = DropAccountant::assert_all_equal_to(move _612, move _613) -> [return: bb353, unwind: bb387]; // scope 90 at ui/let-else/let-else-drop-order.rs:269:5: 269:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:269:9: 269:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a DropAccountant, &'b str) {DropAccountant::assert_all_equal_to}, val: Value(<ZST>) }
    }

    bb353: {
        drop(_1) -> bb354;               // scope 0 at ui/let-else/let-else-drop-order.rs:270:1: 270:2
    }

    bb354: {
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:270:2: 270:2
    }

    bb355 (cleanup): {
        drop(_604) -> bb387;             // scope 90 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb356 (cleanup): {
        drop(_596) -> bb387;             // scope 90 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb357 (cleanup): {
        drop(_553) -> bb387;             // scope 90 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb358 (cleanup): {
        drop(_545) -> bb387;             // scope 90 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb359 (cleanup): {
        drop(_526) -> bb387;             // scope 77 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb360 (cleanup): {
        drop(_518) -> bb387;             // scope 77 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb361 (cleanup): {
        drop(_475) -> bb387;             // scope 77 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb362 (cleanup): {
        drop(_467) -> bb387;             // scope 77 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb363 (cleanup): {
        drop(_441) -> bb387;             // scope 64 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb364 (cleanup): {
        drop(_431) -> bb387;             // scope 64 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb365 (cleanup): {
        drop(_378) -> bb387;             // scope 64 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb366 (cleanup): {
        drop(_368) -> bb387;             // scope 64 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb367 (cleanup): {
        drop(_345) -> bb387;             // scope 51 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb368 (cleanup): {
        drop(_336) -> bb387;             // scope 51 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb369 (cleanup): {
        drop(_288) -> bb387;             // scope 51 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb370 (cleanup): {
        drop(_279) -> bb387;             // scope 51 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb371 (cleanup): {
        drop(_239) -> bb387;             // scope 38 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb372 (cleanup): {
        drop(_232) -> bb387;             // scope 38 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb373 (cleanup): {
        drop(_194) -> bb387;             // scope 38 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb374 (cleanup): {
        drop(_187) -> bb387;             // scope 38 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb375 (cleanup): {
        drop(_170) -> bb387;             // scope 27 at ui/let-else/let-else-drop-order.rs:211:13: 211:14
    }

    bb376 (cleanup): {
        drop(_164) -> bb387;             // scope 27 at ui/let-else/let-else-drop-order.rs:211:13: 211:14
    }

    bb377 (cleanup): {
        drop(_135) -> bb387;             // scope 27 at ui/let-else/let-else-drop-order.rs:211:13: 211:14
    }

    bb378 (cleanup): {
        drop(_128) -> bb387;             // scope 27 at ui/let-else/let-else-drop-order.rs:211:13: 211:14
    }

    bb379 (cleanup): {
        drop(_107) -> bb387;             // scope 14 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb380 (cleanup): {
        drop(_102) -> bb387;             // scope 14 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb381 (cleanup): {
        drop(_74) -> bb387;              // scope 14 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb382 (cleanup): {
        drop(_69) -> bb387;              // scope 14 at ui/let-else/let-else-drop-order.rs:191:17: 191:18
    }

    bb383 (cleanup): {
        drop(_55) -> bb387;              // scope 3 at ui/let-else/let-else-drop-order.rs:211:13: 211:14
    }

    bb384 (cleanup): {
        drop(_50) -> bb387;              // scope 3 at ui/let-else/let-else-drop-order.rs:211:13: 211:14
    }

    bb385 (cleanup): {
        drop(_24) -> bb387;              // scope 3 at ui/let-else/let-else-drop-order.rs:211:13: 211:14
    }

    bb386 (cleanup): {
        drop(_19) -> bb387;              // scope 3 at ui/let-else/let-else-drop-order.rs:211:13: 211:14
    }

    bb387 (cleanup): {
        drop(_1) -> bb388;               // scope 0 at ui/let-else/let-else-drop-order.rs:270:1: 270:2
    }

    bb388 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-drop-order.rs:230:1: 270:2
    }

    bb389: {
        goto -> bb130;                   // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb390: {
        goto -> bb130;                   // scope 52 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb391: {
        goto -> bb136;                   // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb392: {
        goto -> bb142;                   // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb393: {
        goto -> bb148;                   // scope 55 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb394: {
        goto -> bb148;                   // scope 56 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb395: {
        goto -> bb155;                   // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb396: {
        goto -> bb155;                   // scope 58 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb397: {
        goto -> bb162;                   // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb398: {
        goto -> bb162;                   // scope 59 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb399: {
        goto -> bb168;                   // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb400: {
        goto -> bb168;                   // scope 60 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb401: {
        goto -> bb174;                   // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb402: {
        goto -> bb180;                   // scope 51 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb403: {
        goto -> bb187;                   // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb404: {
        goto -> bb187;                   // scope 65 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb405: {
        goto -> bb193;                   // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb406: {
        goto -> bb199;                   // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb407: {
        goto -> bb205;                   // scope 68 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb408: {
        goto -> bb205;                   // scope 69 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb409: {
        goto -> bb212;                   // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb410: {
        goto -> bb212;                   // scope 71 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb411: {
        goto -> bb219;                   // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb412: {
        goto -> bb219;                   // scope 72 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb413: {
        goto -> bb225;                   // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb414: {
        goto -> bb225;                   // scope 73 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb415: {
        goto -> bb231;                   // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb416: {
        goto -> bb237;                   // scope 64 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb417: {
        goto -> bb246;                   // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb418: {
        goto -> bb246;                   // scope 78 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb419: {
        goto -> bb252;                   // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb420: {
        goto -> bb258;                   // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb421: {
        goto -> bb264;                   // scope 81 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb422: {
        goto -> bb264;                   // scope 82 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb423: {
        goto -> bb271;                   // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb424: {
        goto -> bb271;                   // scope 84 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb425: {
        goto -> bb277;                   // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb426: {
        goto -> bb277;                   // scope 85 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb427: {
        goto -> bb283;                   // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb428: {
        goto -> bb283;                   // scope 86 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb429: {
        goto -> bb289;                   // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb430: {
        goto -> bb295;                   // scope 77 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb431: {
        goto -> bb302;                   // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb432: {
        goto -> bb302;                   // scope 91 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb433: {
        goto -> bb308;                   // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb434: {
        goto -> bb314;                   // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb435: {
        goto -> bb320;                   // scope 94 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb436: {
        goto -> bb320;                   // scope 95 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb437: {
        goto -> bb327;                   // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb438: {
        goto -> bb327;                   // scope 97 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb439: {
        goto -> bb333;                   // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb440: {
        goto -> bb333;                   // scope 98 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb441: {
        goto -> bb339;                   // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb442: {
        goto -> bb339;                   // scope 99 at ui/let-else/let-else-drop-order.rs:189:21: 189:37
    }

    bb443: {
        goto -> bb345;                   // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }

    bb444: {
        goto -> bb351;                   // scope 90 at ui/let-else/let-else-drop-order.rs:186:25: 186:41
    }
}

promoted[0] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/let-else/let-else-drop-order.rs:253:14: 253:42
    let mut _1: [&str; 1];               // in scope 0 at ui/let-else/let-else-drop-order.rs:253:14: 253:42

    bb0: {
        _1 = [const " --- mismatching cases ---\n"]; // scope 0 at ui/let-else/let-else-drop-order.rs:253:14: 253:42
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:253:14: 253:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-drop-order.rs:253:14: 253:42
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:253:14: 253:42
    }
}

promoted[2] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

promoted[4] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/let-else/let-else-drop-order.rs:233:14: 233:39
    let mut _1: [&str; 1];               // in scope 0 at ui/let-else/let-else-drop-order.rs:233:14: 233:39

    bb0: {
        _1 = [const " --- matching cases ---\n"]; // scope 0 at ui/let-else/let-else-drop-order.rs:233:14: 233:39
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-drop-order.rs:233:14: 233:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-drop-order.rs:233:14: 233:39
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:233:14: 233:39
    }
}

fn DropAccountant(_1: Rc<RefCell<Vec<Vec<String>>>>) -> DropAccountant {
    let mut _0: DropAccountant;          // return place in scope 0 at ui/let-else/let-else-drop-order.rs:26:1: 26:22

    bb0: {
        _0 = DropAccountant(move _1);    // scope 0 at ui/let-else/let-else-drop-order.rs:26:1: 26:22
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:26:1: 26:22
    }
}

// MIR FOR CTFE
fn DropAccountant(_1: Rc<RefCell<Vec<Vec<String>>>>) -> DropAccountant {
    let mut _0: DropAccountant;          // return place in scope 0 at ui/let-else/let-else-drop-order.rs:26:1: 26:22

    bb0: {
        _0 = DropAccountant(move _1);    // scope 0 at ui/let-else/let-else-drop-order.rs:26:1: 26:22
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:26:1: 26:22
    }
}

fn Droppy(_1: DropAccountant, _2: T) -> Droppy<T> {
    let mut _0: Droppy<T>;               // return place in scope 0 at ui/let-else/let-else-drop-order.rs:112:1: 112:17

    bb0: {
        _0 = Droppy::<T>(move _1, move _2); // scope 0 at ui/let-else/let-else-drop-order.rs:112:1: 112:17
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:112:1: 112:17
    }
}

// MIR FOR CTFE
fn Droppy(_1: DropAccountant, _2: T) -> Droppy<T> {
    let mut _0: Droppy<T>;               // return place in scope 0 at ui/let-else/let-else-drop-order.rs:112:1: 112:17

    bb0: {
        _0 = Droppy::<T>(move _1, move _2); // scope 0 at ui/let-else/let-else-drop-order.rs:112:1: 112:17
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:112:1: 112:17
    }
}

fn DroppyEnum::Some(_1: DropAccountant, _2: T) -> DroppyEnum<T> {
    let mut _0: DroppyEnum<T>;           // return place in scope 0 at ui/let-else/let-else-drop-order.rs:122:5: 122:9

    bb0: {
        _0 = DroppyEnum::<T>::Some(move _1, move _2); // scope 0 at ui/let-else/let-else-drop-order.rs:122:5: 122:9
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:122:5: 122:9
    }
}

// MIR FOR CTFE
fn DroppyEnum::Some(_1: DropAccountant, _2: T) -> DroppyEnum<T> {
    let mut _0: DroppyEnum<T>;           // return place in scope 0 at ui/let-else/let-else-drop-order.rs:122:5: 122:9

    bb0: {
        _0 = DroppyEnum::<T>::Some(move _1, move _2); // scope 0 at ui/let-else/let-else-drop-order.rs:122:5: 122:9
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:122:5: 122:9
    }
}

fn DroppyEnum::None(_1: DropAccountant) -> DroppyEnum<T> {
    let mut _0: DroppyEnum<T>;           // return place in scope 0 at ui/let-else/let-else-drop-order.rs:123:5: 123:9

    bb0: {
        _0 = DroppyEnum::<T>::None(move _1); // scope 0 at ui/let-else/let-else-drop-order.rs:123:5: 123:9
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:123:5: 123:9
    }
}

// MIR FOR CTFE
fn DroppyEnum::None(_1: DropAccountant) -> DroppyEnum<T> {
    let mut _0: DroppyEnum<T>;           // return place in scope 0 at ui/let-else/let-else-drop-order.rs:123:5: 123:9

    bb0: {
        _0 = DroppyEnum::<T>::None(move _1); // scope 0 at ui/let-else/let-else-drop-order.rs:123:5: 123:9
        return;                          // scope 0 at ui/let-else/let-else-drop-order.rs:123:5: 123:9
    }
}
