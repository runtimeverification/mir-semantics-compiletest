// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/let-else/let-else-drop-order.rs:25:10: 25:15>::clone(_1: &DropAccountant) -> DropAccountant {
    debug self => _1;
    let mut _0: DropAccountant;
    let mut _2: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>;
    let _3: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>;

    bb0: {
        _3 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>);
        _2 = <Rc<RefCell<Vec<Vec<String>>>> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = DropAccountant(move _2);
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::new() -> DropAccountant {
    let mut _0: DropAccountant;
    let mut _1: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>;

    bb0: {
        _1 = <Rc<RefCell<Vec<Vec<String>>>> as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = DropAccountant(move _1);
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::build_droppy(_1: &DropAccountant, _2: u32) -> Droppy<u32> {
    debug self => _1;
    debug v => _2;
    let mut _0: Droppy<u32>;
    let mut _3: DropAccountant;

    bb0: {
        _3 = <DropAccountant as Clone>::clone(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Droppy::<u32>(move _3, _2);
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::build_droppy_enum_none(_1: &DropAccountant, _2: u32) -> ((), DroppyEnum<u32>) {
    debug self => _1;
    debug _v => _2;
    let mut _0: ((), DroppyEnum<u32>);
    let mut _3: DroppyEnum<u32>;
    let mut _4: DropAccountant;

    bb0: {
        _4 = <DropAccountant as Clone>::clone(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = DroppyEnum::<u32>::None(move _4);
        _0 = (const (), move _3);
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::new_list(_1: &DropAccountant, _2: impl ToString) -> () {
    debug self => _1;
    debug s => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: &mut std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _5: &mut std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _6: &mut std::cell::RefMut<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _7: std::cell::RefMut<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _8: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let _9: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _10: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>;
    let mut _11: std::vec::Vec<std::string::String>;
    let mut _12: std::boxed::Box<[std::string::String]>;
    let mut _13: std::boxed::Box<[std::string::String; 1]>;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: *mut u8;
    let mut _17: std::boxed::Box<[std::string::String; 1]>;
    let mut _18: std::string::String;
    let mut _19: &impl ToString;
    let mut _20: &mut std::boxed::Box<[std::string::String; 1]>;
    let mut _21: ();
    let mut _22: *const [std::string::String; 1];
    let mut _23: *const ();
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: bool;
    scope 1 {
    }

    bb0: {
        _10 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>);
        _9 = <Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref(move _10) -> [return: bb1, unwind: bb11];
    }

    bb1: {
        _8 = _9;
        _7 = RefCell::<Vec<Vec<String>>>::borrow_mut(move _8) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _6 = &mut _7;
        _5 = <RefMut<'_, Vec<Vec<String>>> as DerefMut>::deref_mut(move _6) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _4 = _5;
        _14 = SizeOf([std::string::String; 1]);
        _15 = AlignOf([std::string::String; 1]);
        _16 = alloc::alloc::exchange_malloc(move _14, move _15) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _17 = ShallowInitBox(move _16, [std::string::String; 1]);
        _19 = &_2;
        _18 = <impl ToString as ToString>::to_string(move _19) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _22 = (((_17.0: std::ptr::Unique<[std::string::String; 1]>).0: std::ptr::NonNull<[std::string::String; 1]>).0: *const [std::string::String; 1]);
        _23 = _22 as *const () (PtrToPtr);
        _24 = _23 as usize (Transmute);
        _25 = AlignOf(std::string::String);
        _26 = Sub(_25, const 1_usize);
        _27 = BitAnd(_24, _26);
        _28 = Eq(_27, const 0_usize);
        assert(_28, "misaligned pointer dereference: address must be a multiple of {} but is {}", _25, _24) -> [success: bb14, unwind unreachable];
    }

    bb6: {
        _3 = Vec::<Vec<String>>::push(move _4, move _11) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        drop(_7) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_7) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        _20 = &mut _17;
        _21 = <Box<[String; 1]> as Drop>::drop(move _20) -> [return: bb15, unwind terminate];
    }

    bb14: {
        (*_22) = [move _18];
        _13 = move _17;
        _12 = move _13 as std::boxed::Box<[std::string::String]> (Pointer(Unsize));
        _11 = slice::<impl [String]>::into_vec::<std::alloc::Global>(move _12) -> [return: bb6, unwind: bb10];
    }

    bb15 (cleanup): {
        goto -> bb10;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::push(_1: &DropAccountant, _2: impl ToString) -> () {
    debug self => _1;
    debug s => _2;
    let mut _0: ();
    let _3: std::string::String;
    let mut _4: &impl ToString;
    let mut _6: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let _7: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _8: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>;
    let _9: ();
    let mut _10: &mut std::vec::Vec<std::string::String>;
    let mut _11: &mut std::vec::Vec<std::string::String>;
    let mut _12: std::option::Option<&mut std::vec::Vec<std::string::String>>;
    let mut _13: &mut [std::vec::Vec<std::string::String>];
    let mut _14: &mut [std::vec::Vec<std::string::String>];
    let mut _15: &mut std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _16: &mut std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _17: &mut std::cell::RefMut<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _18: std::string::String;
    let mut _19: bool;
    scope 1 {
        debug s => _3;
        let mut _5: std::cell::RefMut<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
        scope 2 {
            debug accounts => _5;
        }
    }

    bb0: {
        _19 = const false;
        _4 = &_2;
        _3 = <impl ToString as ToString>::to_string(move _4) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        _19 = const true;
        _8 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>);
        _7 = <Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref(move _8) -> [return: bb2, unwind: bb15];
    }

    bb2: {
        _6 = _7;
        _5 = RefCell::<Vec<Vec<String>>>::borrow_mut(move _6) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _17 = &mut _5;
        _16 = <RefMut<'_, Vec<Vec<String>>> as DerefMut>::deref_mut(move _17) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _15 = _16;
        _14 = <Vec<Vec<String>> as DerefMut>::deref_mut(move _15) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _13 = _14;
        _12 = core::slice::<impl [Vec<String>]>::last_mut(move _13) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _11 = Option::<&mut Vec<String>>::unwrap(move _12) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _10 = _11;
        _19 = const false;
        _18 = move _3;
        _9 = Vec::<String>::push(move _10, move _18) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        drop(_5) -> [return: bb9, unwind: bb15];
    }

    bb9: {
        _19 = const false;
        drop(_2) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_5) -> [return: bb15, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_2) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate];
    }

    bb15 (cleanup): {
        switchInt(_19) -> [0: bb12, otherwise: bb14];
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table(_1: &DropAccountant) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _6: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let _7: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _8: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>;
    let _10: &std::vec::Vec<std::string::String>;
    let mut _11: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _12: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _13: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _17: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _18: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let _20: &std::vec::Vec<std::string::String>;
    let mut _21: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _22: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _23: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _27: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _28: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _30: &[std::string::String];
    let _31: &[std::string::String];
    let mut _33: &[std::string::String];
    let _34: &[std::string::String];
    let mut _36: std::option::Option<usize>;
    let mut _37: std::iter::Map<std::slice::Iter<'_, &str>, [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]>;
    let mut _38: std::slice::Iter<'_, &str>;
    let _39: &[&str];
    let mut _41: std::option::Option<usize>;
    let mut _42: std::iter::Map<std::slice::Iter<'_, std::string::String>, [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]>;
    let mut _43: std::slice::Iter<'_, std::string::String>;
    let mut _44: &[std::string::String];
    let _45: &[std::string::String];
    let mut _46: &std::vec::Vec<std::string::String>;
    let mut _48: std::option::Option<usize>;
    let mut _49: std::iter::Map<std::slice::Iter<'_, std::string::String>, [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]>;
    let mut _50: std::slice::Iter<'_, std::string::String>;
    let mut _51: &[std::string::String];
    let _52: &[std::string::String];
    let mut _53: &std::vec::Vec<std::string::String>;
    let _54: ();
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: &[core::fmt::rt::Argument<'_>];
    let _58: &[core::fmt::rt::Argument<'_>; 6];
    let _59: [core::fmt::rt::Argument<'_>; 6];
    let mut _60: core::fmt::rt::Argument<'_>;
    let mut _61: core::fmt::rt::Argument<'_>;
    let _62: &std::string::String;
    let _63: &std::string::String;
    let mut _64: &std::vec::Vec<std::string::String>;
    let mut _65: core::fmt::rt::Argument<'_>;
    let _66: &std::string::String;
    let _67: &std::string::String;
    let mut _68: &std::vec::Vec<std::string::String>;
    let mut _69: core::fmt::rt::Argument<'_>;
    let _70: &usize;
    let mut _71: core::fmt::rt::Argument<'_>;
    let _72: &usize;
    let mut _73: core::fmt::rt::Argument<'_>;
    let _74: &usize;
    let mut _75: &[core::fmt::rt::Placeholder];
    let _76: &[core::fmt::rt::Placeholder; 3];
    let _77: [core::fmt::rt::Placeholder; 3];
    let mut _78: core::fmt::rt::Placeholder;
    let mut _79: core::fmt::rt::Alignment;
    let mut _80: core::fmt::rt::Count;
    let mut _81: core::fmt::rt::Count;
    let mut _82: core::fmt::rt::Placeholder;
    let mut _83: core::fmt::rt::Alignment;
    let mut _84: core::fmt::rt::Count;
    let mut _85: core::fmt::rt::Count;
    let mut _86: core::fmt::rt::Placeholder;
    let mut _87: core::fmt::rt::Alignment;
    let mut _88: core::fmt::rt::Count;
    let mut _89: core::fmt::rt::Count;
    let mut _90: core::fmt::rt::UnsafeArg;
    let _91: ();
    let mut _92: std::fmt::Arguments<'_>;
    let mut _93: &[&str];
    let mut _94: &[core::fmt::rt::Argument<'_>];
    let _95: &[core::fmt::rt::Argument<'_>; 6];
    let _96: [core::fmt::rt::Argument<'_>; 6];
    let mut _97: core::fmt::rt::Argument<'_>;
    let mut _98: core::fmt::rt::Argument<'_>;
    let mut _99: core::fmt::rt::Argument<'_>;
    let mut _100: core::fmt::rt::Argument<'_>;
    let _101: &usize;
    let mut _102: core::fmt::rt::Argument<'_>;
    let _103: &usize;
    let mut _104: core::fmt::rt::Argument<'_>;
    let _105: &usize;
    let mut _106: &[core::fmt::rt::Placeholder];
    let _107: &[core::fmt::rt::Placeholder; 3];
    let _108: [core::fmt::rt::Placeholder; 3];
    let mut _109: core::fmt::rt::Placeholder;
    let mut _110: core::fmt::rt::Alignment;
    let mut _111: core::fmt::rt::Count;
    let mut _112: core::fmt::rt::Count;
    let mut _113: core::fmt::rt::Placeholder;
    let mut _114: core::fmt::rt::Alignment;
    let mut _115: core::fmt::rt::Count;
    let mut _116: core::fmt::rt::Count;
    let mut _117: core::fmt::rt::Placeholder;
    let mut _118: core::fmt::rt::Alignment;
    let mut _119: core::fmt::rt::Count;
    let mut _120: core::fmt::rt::Count;
    let mut _121: core::fmt::rt::UnsafeArg;
    let mut _122: std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, std::string::String>>, std::slice::Iter<'_, std::string::String>>;
    let mut _123: std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, std::string::String>>, std::slice::Iter<'_, std::string::String>>;
    let mut _124: std::iter::Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, std::string::String>>;
    let mut _125: std::slice::Iter<'_, &str>;
    let _126: &[&str];
    let mut _127: std::slice::Iter<'_, std::string::String>;
    let mut _128: &[std::string::String];
    let _129: &[std::string::String];
    let mut _130: &std::vec::Vec<std::string::String>;
    let mut _131: std::ops::RangeFrom<usize>;
    let mut _132: std::slice::Iter<'_, std::string::String>;
    let mut _133: &[std::string::String];
    let _134: &[std::string::String];
    let mut _135: &std::vec::Vec<std::string::String>;
    let mut _136: std::ops::RangeFrom<usize>;
    let mut _138: std::option::Option<((&&str, &std::string::String), &std::string::String)>;
    let mut _139: &mut std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, std::string::String>>, std::slice::Iter<'_, std::string::String>>;
    let mut _140: isize;
    let _144: ();
    let mut _145: std::fmt::Arguments<'_>;
    let mut _146: &[&str];
    let mut _147: &[core::fmt::rt::Argument<'_>];
    let _148: &[core::fmt::rt::Argument<'_>; 6];
    let _149: [core::fmt::rt::Argument<'_>; 6];
    let mut _150: core::fmt::rt::Argument<'_>;
    let _151: &&&str;
    let mut _152: core::fmt::rt::Argument<'_>;
    let _153: &&std::string::String;
    let mut _154: core::fmt::rt::Argument<'_>;
    let _155: &&std::string::String;
    let mut _156: core::fmt::rt::Argument<'_>;
    let _157: &usize;
    let mut _158: core::fmt::rt::Argument<'_>;
    let _159: &usize;
    let mut _160: core::fmt::rt::Argument<'_>;
    let _161: &usize;
    let mut _162: &[core::fmt::rt::Placeholder];
    let _163: &[core::fmt::rt::Placeholder; 3];
    let _164: [core::fmt::rt::Placeholder; 3];
    let mut _165: core::fmt::rt::Placeholder;
    let mut _166: core::fmt::rt::Alignment;
    let mut _167: core::fmt::rt::Count;
    let mut _168: core::fmt::rt::Count;
    let mut _169: core::fmt::rt::Placeholder;
    let mut _170: core::fmt::rt::Alignment;
    let mut _171: core::fmt::rt::Count;
    let mut _172: core::fmt::rt::Count;
    let mut _173: core::fmt::rt::Placeholder;
    let mut _174: core::fmt::rt::Alignment;
    let mut _175: core::fmt::rt::Count;
    let mut _176: core::fmt::rt::Count;
    let mut _177: core::fmt::rt::UnsafeArg;
    let mut _185: &[&str; 1];
    scope 1 {
        debug accounts => _5;
        let _9: &std::vec::Vec<std::string::String>;
        scope 2 {
            debug before_last => _9;
            let _19: &std::vec::Vec<std::string::String>;
            scope 3 {
                debug last => _19;
                let _29: std::vec::Vec<std::string::String>;
                scope 4 {
                    debug before_last => _29;
                    let _32: std::vec::Vec<std::string::String>;
                    scope 5 {
                        debug last => _32;
                        let _35: usize;
                        scope 6 {
                            debug max_len => _35;
                            let _40: usize;
                            scope 7 {
                                debug max_len_before => _40;
                                let _47: usize;
                                scope 8 {
                                    debug max_len_last => _47;
                                    let mut _137: std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, std::string::String>>, std::slice::Iter<'_, std::string::String>>;
                                    let mut _179: &&str;
                                    let mut _180: &&str;
                                    let mut _181: &&str;
                                    let mut _182: &[&str; 4];
                                    let mut _183: &&str;
                                    let mut _184: &[&str; 4];
                                    scope 9 {
                                    }
                                    scope 10 {
                                    }
                                    scope 11 {
                                        debug iter => _137;
                                        let _141: &&str;
                                        let _142: &std::string::String;
                                        let _143: &std::string::String;
                                        scope 12 {
                                            debug l => _141;
                                            debug l_before => _142;
                                            debug l_last => _143;
                                            let mut _178: &[&str; 4];
                                            scope 13 {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _185 = const _;
        _4 = _185 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _print(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>);
        _7 = <Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = _7;
        _5 = RefCell::<Vec<Vec<String>>>::borrow(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _13 = &_5;
        _12 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _13) -> [return: bb5, unwind: bb95];
    }

    bb5: {
        _11 = _12;
        _18 = &_5;
        _17 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _18) -> [return: bb6, unwind: bb95];
    }

    bb6: {
        _16 = _17;
        _15 = Vec::<Vec<String>>::len(move _16) -> [return: bb7, unwind: bb95];
    }

    bb7: {
        _14 = Sub(move _15, const 2_usize);
        _10 = <Vec<Vec<String>> as Index<usize>>::index(move _11, move _14) -> [return: bb8, unwind: bb95];
    }

    bb8: {
        _9 = _10;
        _23 = &_5;
        _22 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _23) -> [return: bb9, unwind: bb95];
    }

    bb9: {
        _21 = _22;
        _28 = &_5;
        _27 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _28) -> [return: bb10, unwind: bb95];
    }

    bb10: {
        _26 = _27;
        _25 = Vec::<Vec<String>>::len(move _26) -> [return: bb11, unwind: bb95];
    }

    bb11: {
        _24 = Sub(move _25, const 1_usize);
        _20 = <Vec<Vec<String>> as Index<usize>>::index(move _21, move _24) -> [return: bb12, unwind: bb95];
    }

    bb12: {
        _19 = _20;
        _31 = <Vec<String> as Deref>::deref(_9) -> [return: bb13, unwind: bb95];
    }

    bb13: {
        _30 = _31;
        _29 = get_comma_list(move _30) -> [return: bb14, unwind: bb95];
    }

    bb14: {
        _34 = <Vec<String> as Deref>::deref(_19) -> [return: bb15, unwind: bb94];
    }

    bb15: {
        _33 = _34;
        _32 = get_comma_list(move _33) -> [return: bb16, unwind: bb94];
    }

    bb16: {
        _39 = const _;
        _38 = core::slice::<impl [&str]>::iter(_39) -> [return: bb17, unwind: bb93];
    }

    bb17: {
        _37 = <std::slice::Iter<'_, &str> as Iterator>::map::<usize, [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]>(move _38, const ZeroSized: [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]) -> [return: bb18, unwind: bb93];
    }

    bb18: {
        _36 = <Map<std::slice::Iter<'_, &str>, [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43]> as Iterator>::max(move _37) -> [return: bb19, unwind: bb93];
    }

    bb19: {
        _35 = Option::<usize>::unwrap(move _36) -> [return: bb20, unwind: bb93];
    }

    bb20: {
        _46 = &_29;
        _45 = <Vec<String> as Deref>::deref(move _46) -> [return: bb21, unwind: bb93];
    }

    bb21: {
        _44 = _45;
        _43 = core::slice::<impl [String]>::iter(move _44) -> [return: bb22, unwind: bb93];
    }

    bb22: {
        _42 = <std::slice::Iter<'_, String> as Iterator>::map::<usize, [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]>(move _43, const ZeroSized: [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]) -> [return: bb23, unwind: bb93];
    }

    bb23: {
        _41 = <Map<std::slice::Iter<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56]> as Iterator>::max(move _42) -> [return: bb24, unwind: bb93];
    }

    bb24: {
        _40 = Option::<usize>::unwrap(move _41) -> [return: bb25, unwind: bb93];
    }

    bb25: {
        _53 = &_32;
        _52 = <Vec<String> as Deref>::deref(move _53) -> [return: bb26, unwind: bb93];
    }

    bb26: {
        _51 = _52;
        _50 = core::slice::<impl [String]>::iter(move _51) -> [return: bb27, unwind: bb93];
    }

    bb27: {
        _49 = <std::slice::Iter<'_, String> as Iterator>::map::<usize, [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]>(move _50, const ZeroSized: [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]) -> [return: bb28, unwind: bb93];
    }

    bb28: {
        _48 = <Map<std::slice::Iter<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47]> as Iterator>::max(move _49) -> [return: bb29, unwind: bb93];
    }

    bb29: {
        _47 = Option::<usize>::unwrap(move _48) -> [return: bb30, unwind: bb93];
    }

    bb30: {
        _184 = const _;
        _56 = _184 as &[&str] (Pointer(Unsize));
        _183 = const _;
        _60 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_183) -> [return: bb31, unwind: bb93];
    }

    bb31: {
        _64 = &_29;
        _63 = <Vec<String> as Index<usize>>::index(move _64, const 0_usize) -> [return: bb32, unwind: bb93];
    }

    bb32: {
        _62 = _63;
        _61 = core::fmt::rt::Argument::<'_>::new_display::<String>(_62) -> [return: bb33, unwind: bb93];
    }

    bb33: {
        _68 = &_32;
        _67 = <Vec<String> as Index<usize>>::index(move _68, const 0_usize) -> [return: bb34, unwind: bb93];
    }

    bb34: {
        _66 = _67;
        _65 = core::fmt::rt::Argument::<'_>::new_display::<String>(_66) -> [return: bb35, unwind: bb93];
    }

    bb35: {
        _70 = &_35;
        _69 = core::fmt::rt::Argument::<'_>::from_usize(_70) -> [return: bb36, unwind: bb93];
    }

    bb36: {
        _72 = &_40;
        _71 = core::fmt::rt::Argument::<'_>::from_usize(_72) -> [return: bb37, unwind: bb93];
    }

    bb37: {
        _74 = &_47;
        _73 = core::fmt::rt::Argument::<'_>::from_usize(_74) -> [return: bb38, unwind: bb93];
    }

    bb38: {
        _59 = [move _60, move _61, move _65, move _69, move _71, move _73];
        _58 = &_59;
        _57 = _58 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _79 = core::fmt::rt::Alignment::Left;
        _80 = core::fmt::rt::Count::Implied;
        _81 = core::fmt::rt::Count::Param(const 3_usize) -> [return: bb39, unwind: bb93];
    }

    bb39: {
        _78 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _79, const 0_u32, move _80, move _81) -> [return: bb40, unwind: bb93];
    }

    bb40: {
        _83 = core::fmt::rt::Alignment::Left;
        _84 = core::fmt::rt::Count::Implied;
        _85 = core::fmt::rt::Count::Param(const 4_usize) -> [return: bb41, unwind: bb93];
    }

    bb41: {
        _82 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _83, const 0_u32, move _84, move _85) -> [return: bb42, unwind: bb93];
    }

    bb42: {
        _87 = core::fmt::rt::Alignment::Left;
        _88 = core::fmt::rt::Count::Implied;
        _89 = core::fmt::rt::Count::Param(const 5_usize) -> [return: bb43, unwind: bb93];
    }

    bb43: {
        _86 = core::fmt::rt::Placeholder::new(const 2_usize, const ' ', move _87, const 0_u32, move _88, move _89) -> [return: bb44, unwind: bb93];
    }

    bb44: {
        _77 = [move _78, move _82, move _86];
        _76 = &_77;
        _75 = _76 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _90 = core::fmt::rt::UnsafeArg::new() -> [return: bb45, unwind: bb93];
    }

    bb45: {
        _55 = Arguments::<'_>::new_v1_formatted(move _56, move _57, move _75, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb46, unwind: bb93];
    }

    bb46: {
        _54 = _print(move _55) -> [return: bb47, unwind: bb93];
    }

    bb47: {
        _182 = const _;
        _93 = _182 as &[&str] (Pointer(Unsize));
        _181 = const _;
        _97 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_181) -> [return: bb48, unwind: bb93];
    }

    bb48: {
        _180 = const _;
        _98 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_180) -> [return: bb49, unwind: bb93];
    }

    bb49: {
        _179 = const _;
        _99 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_179) -> [return: bb50, unwind: bb93];
    }

    bb50: {
        _101 = &_35;
        _100 = core::fmt::rt::Argument::<'_>::from_usize(_101) -> [return: bb51, unwind: bb93];
    }

    bb51: {
        _103 = &_40;
        _102 = core::fmt::rt::Argument::<'_>::from_usize(_103) -> [return: bb52, unwind: bb93];
    }

    bb52: {
        _105 = &_47;
        _104 = core::fmt::rt::Argument::<'_>::from_usize(_105) -> [return: bb53, unwind: bb93];
    }

    bb53: {
        _96 = [move _97, move _98, move _99, move _100, move _102, move _104];
        _95 = &_96;
        _94 = _95 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _110 = core::fmt::rt::Alignment::Left;
        _111 = core::fmt::rt::Count::Implied;
        _112 = core::fmt::rt::Count::Param(const 3_usize) -> [return: bb54, unwind: bb93];
    }

    bb54: {
        _109 = core::fmt::rt::Placeholder::new(const 0_usize, const '-', move _110, const 0_u32, move _111, move _112) -> [return: bb55, unwind: bb93];
    }

    bb55: {
        _114 = core::fmt::rt::Alignment::Left;
        _115 = core::fmt::rt::Count::Implied;
        _116 = core::fmt::rt::Count::Param(const 4_usize) -> [return: bb56, unwind: bb93];
    }

    bb56: {
        _113 = core::fmt::rt::Placeholder::new(const 1_usize, const '-', move _114, const 0_u32, move _115, move _116) -> [return: bb57, unwind: bb93];
    }

    bb57: {
        _118 = core::fmt::rt::Alignment::Left;
        _119 = core::fmt::rt::Count::Implied;
        _120 = core::fmt::rt::Count::Param(const 5_usize) -> [return: bb58, unwind: bb93];
    }

    bb58: {
        _117 = core::fmt::rt::Placeholder::new(const 2_usize, const '-', move _118, const 0_u32, move _119, move _120) -> [return: bb59, unwind: bb93];
    }

    bb59: {
        _108 = [move _109, move _113, move _117];
        _107 = &_108;
        _106 = _107 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _121 = core::fmt::rt::UnsafeArg::new() -> [return: bb60, unwind: bb93];
    }

    bb60: {
        _92 = Arguments::<'_>::new_v1_formatted(move _93, move _94, move _106, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb61, unwind: bb93];
    }

    bb61: {
        _91 = _print(move _92) -> [return: bb62, unwind: bb93];
    }

    bb62: {
        _126 = const _;
        _125 = core::slice::<impl [&str]>::iter(_126) -> [return: bb63, unwind: bb93];
    }

    bb63: {
        _130 = &_29;
        _131 = RangeFrom::<usize> { start: const 1_usize };
        _129 = <Vec<String> as Index<RangeFrom<usize>>>::index(move _130, move _131) -> [return: bb64, unwind: bb93];
    }

    bb64: {
        _128 = _129;
        _127 = core::slice::<impl [String]>::iter(move _128) -> [return: bb65, unwind: bb93];
    }

    bb65: {
        _124 = <std::slice::Iter<'_, &str> as Iterator>::zip::<std::slice::Iter<'_, String>>(move _125, move _127) -> [return: bb66, unwind: bb93];
    }

    bb66: {
        _135 = &_32;
        _136 = RangeFrom::<usize> { start: const 1_usize };
        _134 = <Vec<String> as Index<RangeFrom<usize>>>::index(move _135, move _136) -> [return: bb67, unwind: bb93];
    }

    bb67: {
        _133 = _134;
        _132 = core::slice::<impl [String]>::iter(move _133) -> [return: bb68, unwind: bb93];
    }

    bb68: {
        _123 = <Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>> as Iterator>::zip::<std::slice::Iter<'_, String>>(move _124, move _132) -> [return: bb69, unwind: bb93];
    }

    bb69: {
        _122 = <Zip<Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>>, std::slice::Iter<'_, String>> as IntoIterator>::into_iter(move _123) -> [return: bb70, unwind: bb93];
    }

    bb70: {
        _137 = move _122;
        goto -> bb71;
    }

    bb71: {
        _139 = &mut _137;
        _138 = <Zip<Zip<std::slice::Iter<'_, &str>, std::slice::Iter<'_, String>>, std::slice::Iter<'_, String>> as Iterator>::next(_139) -> [return: bb72, unwind: bb93];
    }

    bb72: {
        _140 = discriminant(_138);
        switchInt(move _140) -> [0: bb75, 1: bb73, otherwise: bb74];
    }

    bb73: {
        _141 = ((((_138 as Some).0: ((&&str, &std::string::String), &std::string::String)).0: (&&str, &std::string::String)).0: &&str);
        _142 = ((((_138 as Some).0: ((&&str, &std::string::String), &std::string::String)).0: (&&str, &std::string::String)).1: &std::string::String);
        _143 = (((_138 as Some).0: ((&&str, &std::string::String), &std::string::String)).1: &std::string::String);
        _178 = const _;
        _146 = _178 as &[&str] (Pointer(Unsize));
        _151 = &_141;
        _150 = core::fmt::rt::Argument::<'_>::new_display::<&&str>(_151) -> [return: bb76, unwind: bb93];
    }

    bb74: {
        unreachable;
    }

    bb75: {
        drop(_32) -> [return: bb90, unwind: bb94];
    }

    bb76: {
        _153 = &_142;
        _152 = core::fmt::rt::Argument::<'_>::new_display::<&String>(_153) -> [return: bb77, unwind: bb93];
    }

    bb77: {
        _155 = &_143;
        _154 = core::fmt::rt::Argument::<'_>::new_display::<&String>(_155) -> [return: bb78, unwind: bb93];
    }

    bb78: {
        _157 = &_35;
        _156 = core::fmt::rt::Argument::<'_>::from_usize(_157) -> [return: bb79, unwind: bb93];
    }

    bb79: {
        _159 = &_40;
        _158 = core::fmt::rt::Argument::<'_>::from_usize(_159) -> [return: bb80, unwind: bb93];
    }

    bb80: {
        _161 = &_47;
        _160 = core::fmt::rt::Argument::<'_>::from_usize(_161) -> [return: bb81, unwind: bb93];
    }

    bb81: {
        _149 = [move _150, move _152, move _154, move _156, move _158, move _160];
        _148 = &_149;
        _147 = _148 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _166 = core::fmt::rt::Alignment::Left;
        _167 = core::fmt::rt::Count::Implied;
        _168 = core::fmt::rt::Count::Param(const 3_usize) -> [return: bb82, unwind: bb93];
    }

    bb82: {
        _165 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _166, const 0_u32, move _167, move _168) -> [return: bb83, unwind: bb93];
    }

    bb83: {
        _170 = core::fmt::rt::Alignment::Left;
        _171 = core::fmt::rt::Count::Implied;
        _172 = core::fmt::rt::Count::Param(const 4_usize) -> [return: bb84, unwind: bb93];
    }

    bb84: {
        _169 = core::fmt::rt::Placeholder::new(const 1_usize, const ' ', move _170, const 0_u32, move _171, move _172) -> [return: bb85, unwind: bb93];
    }

    bb85: {
        _174 = core::fmt::rt::Alignment::Left;
        _175 = core::fmt::rt::Count::Implied;
        _176 = core::fmt::rt::Count::Param(const 5_usize) -> [return: bb86, unwind: bb93];
    }

    bb86: {
        _173 = core::fmt::rt::Placeholder::new(const 2_usize, const ' ', move _174, const 0_u32, move _175, move _176) -> [return: bb87, unwind: bb93];
    }

    bb87: {
        _164 = [move _165, move _169, move _173];
        _163 = &_164;
        _162 = _163 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _177 = core::fmt::rt::UnsafeArg::new() -> [return: bb88, unwind: bb93];
    }

    bb88: {
        _145 = Arguments::<'_>::new_v1_formatted(move _146, move _147, move _162, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb89, unwind: bb93];
    }

    bb89: {
        _144 = _print(move _145) -> [return: bb97, unwind: bb93];
    }

    bb90: {
        drop(_29) -> [return: bb91, unwind: bb95];
    }

    bb91: {
        drop(_5) -> [return: bb92, unwind continue];
    }

    bb92: {
        return;
    }

    bb93 (cleanup): {
        drop(_32) -> [return: bb94, unwind terminate];
    }

    bb94 (cleanup): {
        drop(_29) -> [return: bb95, unwind terminate];
    }

    bb95 (cleanup): {
        drop(_5) -> [return: bb96, unwind terminate];
    }

    bb96 (cleanup): {
        resume;
    }

    bb97: {
        goto -> bb71;
    }
}

promoted[0] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "| ", const " | ", const " | ", const " |\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "";
        _0 = &_1;
        return;
    }
}

promoted[2] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "";
        _0 = &_1;
        return;
    }
}

promoted[3] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "";
        _0 = &_1;
        return;
    }
}

promoted[4] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "| ", const " | ", const " | ", const " |\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "construct";
        _0 = &_1;
        return;
    }
}

promoted[6] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "| ", const " | ", const " | ", const " |\n"];
        _0 = &_1;
        return;
    }
}

promoted[7] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\n"];
        _0 = &_1;
        return;
    }
}

const LINES: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 9];
    let _2: &[&str; 9];
    let _3: [&str; 9];
    let mut _4: &[&str; 9];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in LINES: &[&str; 9] = {
    let mut _0: &[&str; 9];
    let mut _1: [&str; 9];

    bb0: {
        _1 = [const "vanilla", const "&", const "&mut", const "move", const "fn(this)", const "tuple", const "array", const "ref &", const "ref mut &mut"];
        _0 = &_1;
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table::{closure#0}(_1: &mut [closure@ui/let-else/let-else-drop-order.rs:65:40: 65:43], _2: &&str) -> usize {
    debug v => _2;
    let mut _0: usize;
    let mut _3: &str;

    bb0: {
        _3 = deref_copy (*_2);
        _0 = core::str::<impl str>::len(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table::{closure#1}(_1: &mut [closure@ui/let-else/let-else-drop-order.rs:66:53: 66:56], _2: &String) -> usize {
    debug v => _2;
    let mut _0: usize;

    bb0: {
        _0 = String::len(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::print_table::{closure#2}(_1: &mut [closure@ui/let-else/let-else-drop-order.rs:67:44: 67:47], _2: &String) -> usize {
    debug v => _2;
    let mut _0: usize;

    bb0: {
        _0 = String::len(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::assert_all_equal_to(_1: &DropAccountant, _2: &str) -> () {
    debug self => _1;
    debug st => _2;
    let mut _0: ();
    let _3: std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _4: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let _5: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _6: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>;
    let _8: &std::vec::Vec<std::string::String>;
    let mut _9: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _10: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _11: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _15: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _16: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _18: &[std::string::String];
    let _19: &[std::string::String];
    let mut _20: std::slice::Iter<'_, std::string::String>;
    let mut _21: std::slice::Iter<'_, std::string::String>;
    let mut _22: &[std::string::String];
    let _23: &[std::string::String];
    let mut _24: &std::vec::Vec<std::string::String>;
    let mut _25: std::ops::RangeFrom<usize>;
    let mut _27: std::option::Option<&std::string::String>;
    let mut _28: &mut std::slice::Iter<'_, std::string::String>;
    let mut _29: isize;
    let mut _31: (&&str, &&str);
    let mut _32: &&str;
    let _33: &str;
    let mut _34: &str;
    let _35: &str;
    let mut _36: &&str;
    let _37: &str;
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug accounts => _3;
        let _7: &std::vec::Vec<std::string::String>;
        scope 2 {
            debug last => _7;
            let _17: std::vec::Vec<std::string::String>;
            scope 3 {
                debug last => _17;
                let mut _26: std::slice::Iter<'_, std::string::String>;
                scope 4 {
                    debug iter => _26;
                    let _30: &std::string::String;
                    scope 5 {
                        debug line => _30;
                        let _38: &&str;
                        let _39: &&str;
                        scope 6 {
                            debug left_val => _38;
                            debug right_val => _39;
                            let _42: core::panicking::AssertKind;
                            scope 7 {
                                debug kind => _42;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _6 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>);
        _5 = <Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = _5;
        _3 = RefCell::<Vec<Vec<String>>>::borrow(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _11 = &_3;
        _10 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _11) -> [return: bb3, unwind: bb25];
    }

    bb3: {
        _9 = _10;
        _16 = &_3;
        _15 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _16) -> [return: bb4, unwind: bb25];
    }

    bb4: {
        _14 = _15;
        _13 = Vec::<Vec<String>>::len(move _14) -> [return: bb5, unwind: bb25];
    }

    bb5: {
        _12 = Sub(move _13, const 1_usize);
        _8 = <Vec<Vec<String>> as Index<usize>>::index(move _9, move _12) -> [return: bb6, unwind: bb25];
    }

    bb6: {
        _7 = _8;
        _19 = <Vec<String> as Deref>::deref(_7) -> [return: bb7, unwind: bb25];
    }

    bb7: {
        _18 = _19;
        _17 = get_comma_list(move _18) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        _24 = &_17;
        _25 = RangeFrom::<usize> { start: const 1_usize };
        _23 = <Vec<String> as Index<RangeFrom<usize>>>::index(move _24, move _25) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        _22 = _23;
        _21 = core::slice::<impl [String]>::iter(move _22) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        _20 = <std::slice::Iter<'_, String> as IntoIterator>::into_iter(move _21) -> [return: bb11, unwind: bb24];
    }

    bb11: {
        _26 = move _20;
        goto -> bb12;
    }

    bb12: {
        _28 = &mut _26;
        _27 = <std::slice::Iter<'_, String> as Iterator>::next(_28) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb16, 1: bb14, otherwise: bb15];
    }

    bb14: {
        _30 = ((_27 as Some).0: &std::string::String);
        _35 = <String as Deref>::deref(_30) -> [return: bb17, unwind: bb24];
    }

    bb15: {
        unreachable;
    }

    bb16: {
        drop(_17) -> [return: bb22, unwind: bb25];
    }

    bb17: {
        _34 = _35;
        _33 = core::str::<impl str>::trim(move _34) -> [return: bb18, unwind: bb24];
    }

    bb18: {
        _32 = &_33;
        _37 = core::str::<impl str>::trim(_2) -> [return: bb19, unwind: bb24];
    }

    bb19: {
        _36 = &_37;
        _31 = (move _32, move _36);
        _38 = (_31.0: &&str);
        _39 = (_31.1: &&str);
        _41 = <&str as PartialEq>::eq(_38, _39) -> [return: bb20, unwind: bb24];
    }

    bb20: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb12, otherwise: bb21];
    }

    bb21: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<&str, &str>(move _42, _38, _39, move _44) -> bb24;
    }

    bb22: {
        drop(_3) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_17) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        drop(_3) -> [return: bb26, unwind terminate];
    }

    bb26 (cleanup): {
        resume;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::assert_equality_last_two_lists(_1: &DropAccountant) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _3: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let _4: &std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _5: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>;
    let _7: &std::vec::Vec<std::string::String>;
    let mut _8: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _9: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _10: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _14: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _15: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let _17: &std::vec::Vec<std::string::String>;
    let mut _18: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _19: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _20: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let _24: &std::vec::Vec<std::vec::Vec<std::string::String>>;
    let mut _25: &std::cell::Ref<'_, std::vec::Vec<std::vec::Vec<std::string::String>>>;
    let mut _26: std::iter::Zip<std::slice::Iter<'_, std::string::String>, std::slice::Iter<'_, std::string::String>>;
    let mut _27: std::iter::Zip<std::slice::Iter<'_, std::string::String>, std::slice::Iter<'_, std::string::String>>;
    let mut _28: std::slice::Iter<'_, std::string::String>;
    let mut _29: &[std::string::String];
    let _30: &[std::string::String];
    let mut _31: std::ops::RangeFrom<usize>;
    let mut _32: std::slice::Iter<'_, std::string::String>;
    let mut _33: &[std::string::String];
    let _34: &[std::string::String];
    let mut _35: std::ops::RangeFrom<usize>;
    let mut _37: std::option::Option<(&std::string::String, &std::string::String)>;
    let mut _38: &mut std::iter::Zip<std::slice::Iter<'_, std::string::String>, std::slice::Iter<'_, std::string::String>>;
    let mut _39: isize;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: &&std::string::String;
    let mut _47: &&std::string::String;
    let mut _48: bool;
    let mut _49: &&std::string::String;
    let mut _50: bool;
    let mut _51: &&std::string::String;
    let _52: !;
    scope 1 {
        debug accounts => _2;
        let _6: &std::vec::Vec<std::string::String>;
        scope 2 {
            debug last => _6;
            let _16: &std::vec::Vec<std::string::String>;
            scope 3 {
                debug before_last => _16;
                let mut _36: std::iter::Zip<std::slice::Iter<'_, std::string::String>, std::slice::Iter<'_, std::string::String>>;
                scope 4 {
                    debug iter => _36;
                    let _40: &std::string::String;
                    let _41: &std::string::String;
                    scope 5 {
                        debug l => _40;
                        debug b => _41;
                        let mut _53: &&str;
                        let mut _54: &&str;
                    }
                }
            }
        }
    }

    bb0: {
        _5 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<std::vec::Vec<std::string::String>>>>);
        _4 = <Rc<RefCell<Vec<Vec<String>>>> as Deref>::deref(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = _4;
        _2 = RefCell::<Vec<Vec<String>>>::borrow(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = &_2;
        _9 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _10) -> [return: bb3, unwind: bb33];
    }

    bb3: {
        _8 = _9;
        _15 = &_2;
        _14 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _15) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _13 = _14;
        _12 = Vec::<Vec<String>>::len(move _13) -> [return: bb5, unwind: bb33];
    }

    bb5: {
        _11 = Sub(move _12, const 1_usize);
        _7 = <Vec<Vec<String>> as Index<usize>>::index(move _8, move _11) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        _6 = _7;
        _20 = &_2;
        _19 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _20) -> [return: bb7, unwind: bb33];
    }

    bb7: {
        _18 = _19;
        _25 = &_2;
        _24 = <Ref<'_, Vec<Vec<String>>> as Deref>::deref(move _25) -> [return: bb8, unwind: bb33];
    }

    bb8: {
        _23 = _24;
        _22 = Vec::<Vec<String>>::len(move _23) -> [return: bb9, unwind: bb33];
    }

    bb9: {
        _21 = Sub(move _22, const 2_usize);
        _17 = <Vec<Vec<String>> as Index<usize>>::index(move _18, move _21) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        _16 = _17;
        _31 = RangeFrom::<usize> { start: const 1_usize };
        _30 = <Vec<String> as Index<RangeFrom<usize>>>::index(_6, move _31) -> [return: bb11, unwind: bb33];
    }

    bb11: {
        _29 = _30;
        _28 = core::slice::<impl [String]>::iter(move _29) -> [return: bb12, unwind: bb33];
    }

    bb12: {
        _35 = RangeFrom::<usize> { start: const 1_usize };
        _34 = <Vec<String> as Index<RangeFrom<usize>>>::index(_16, move _35) -> [return: bb13, unwind: bb33];
    }

    bb13: {
        _33 = _34;
        _32 = core::slice::<impl [String]>::iter(move _33) -> [return: bb14, unwind: bb33];
    }

    bb14: {
        _27 = <std::slice::Iter<'_, String> as Iterator>::zip::<std::slice::Iter<'_, String>>(move _28, move _32) -> [return: bb15, unwind: bb33];
    }

    bb15: {
        _26 = <Zip<std::slice::Iter<'_, String>, std::slice::Iter<'_, String>> as IntoIterator>::into_iter(move _27) -> [return: bb16, unwind: bb33];
    }

    bb16: {
        _36 = move _26;
        goto -> bb17;
    }

    bb17: {
        _38 = &mut _36;
        _37 = <Zip<std::slice::Iter<'_, String>, std::slice::Iter<'_, String>> as Iterator>::next(_38) -> [return: bb18, unwind: bb33];
    }

    bb18: {
        _39 = discriminant(_37);
        switchInt(move _39) -> [0: bb21, 1: bb19, otherwise: bb20];
    }

    bb19: {
        _40 = (((_37 as Some).0: (&std::string::String, &std::string::String)).0: &std::string::String);
        _41 = (((_37 as Some).0: (&std::string::String, &std::string::String)).1: &std::string::String);
        _46 = &_40;
        _47 = &_41;
        _45 = <&String as PartialEq>::eq(move _46, move _47) -> [return: bb28, unwind: bb33];
    }

    bb20: {
        unreachable;
    }

    bb21: {
        drop(_2) -> [return: bb32, unwind continue];
    }

    bb22: {
        _43 = const true;
        goto -> bb24;
    }

    bb23: {
        _51 = &_41;
        _53 = const _;
        _50 = <&String as PartialEq<&str>>::eq(move _51, _53) -> [return: bb30, unwind: bb33];
    }

    bb24: {
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb17, otherwise: bb31];
    }

    bb25: {
        _44 = const true;
        goto -> bb27;
    }

    bb26: {
        _49 = &_40;
        _54 = const _;
        _48 = <&String as PartialEq<&str>>::eq(move _49, _54) -> [return: bb29, unwind: bb33];
    }

    bb27: {
        switchInt(move _44) -> [0: bb23, otherwise: bb22];
    }

    bb28: {
        switchInt(move _45) -> [0: bb26, otherwise: bb25];
    }

    bb29: {
        _44 = move _48;
        goto -> bb27;
    }

    bb30: {
        _43 = move _50;
        goto -> bb24;
    }

    bb31: {
        _52 = begin_panic::<&str>(const "not equal: '{last:?}' != '{before_last:?}'") -> bb33;
    }

    bb32: {
        return;
    }

    bb33 (cleanup): {
        drop(_2) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::assert_equality_last_two_lists: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "n/a";
        _0 = &_1;
        return;
    }
}

promoted[1] in <impl at ui/let-else/let-else-drop-order.rs:28:1: 28:20>::assert_equality_last_two_lists: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "n/a";
        _0 = &_1;
        return;
    }
}

fn get_comma_list(_1: &[String]) -> Vec<String> {
    debug sl => _1;
    let mut _0: std::vec::Vec<std::string::String>;
    let mut _2: std::iter::Chain<std::iter::Once<std::string::String>, std::iter::Map<std::slice::Chunks<'_, std::string::String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>>;
    let mut _3: std::iter::Once<std::string::String>;
    let mut _4: std::string::String;
    let mut _5: &std::string::String;
    let _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: std::iter::Map<std::slice::Chunks<'_, std::string::String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>;
    let mut _10: std::slice::Chunks<'_, std::string::String>;
    let mut _11: &[std::string::String];
    let _12: &[std::string::String];
    let mut _13: std::ops::RangeFrom<usize>;
    let mut _14: bool;

    bb0: {
        _14 = const false;
        _6 = const 0_usize;
        _7 = Len((*_1));
        _8 = Lt(_6, _7);
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _6) -> [success: bb1, unwind continue];
    }

    bb1: {
        _5 = &(*_1)[_6];
        _4 = <String as Clone>::clone(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = once::<String>(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _14 = const true;
        _13 = RangeFrom::<usize> { start: const 1_usize };
        _12 = <[String] as Index<RangeFrom<usize>>>::index(_1, move _13) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _11 = _12;
        _10 = core::slice::<impl [String]>::chunks(move _11, const 2_usize) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _9 = <Chunks<'_, String> as Iterator>::map::<String, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>(move _10, const ZeroSized: [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _14 = const false;
        _2 = <std::iter::Once<String> as Iterator>::chain::<Map<Chunks<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>>(move _3, move _9) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _14 = const false;
        _0 = <std::iter::Chain<std::iter::Once<String>, Map<Chunks<'_, String>, [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41]>> as Iterator>::collect::<Vec<String>>(move _2) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate];
    }

    bb11 (cleanup): {
        switchInt(_14) -> [0: bb9, otherwise: bb10];
    }
}

fn get_comma_list::{closure#0}(_1: &mut [closure@ui/let-else/let-else-drop-order.rs:108:38: 108:41], _2: &[String]) -> String {
    debug c => _2;
    let mut _0: std::string::String;
    let _3: &str;

    bb0: {
        _3 = const ",";
        _0 = slice::<impl [String]>::join::<&str>(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:114:1: 114:27>::drop(_1: &mut Droppy<T>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &DropAccountant;

    bb0: {
        _3 = &((*_1).0: DropAccountant);
        _2 = DropAccountant::push::<&str>(move _3, const "drop") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/let-else/let-else-drop-order.rs:126:1: 126:31>::drop(_1: &mut DroppyEnum<T>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &DropAccountant;
    let _4: &mut DropAccountant;
    let mut _5: isize;
    let _6: &mut DropAccountant;
    let _7: &mut T;
    let _8: &mut DropAccountant;
    scope 1 {
        debug acc => _6;
        debug _inner => _7;
    }
    scope 2 {
        debug acc => _8;
    }

    bb0: {
        _5 = discriminant((*_1));
        switchInt(move _5) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = &mut (((*_1) as None).0: DropAccountant);
        _4 = _8;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _6 = &mut (((*_1) as Some).0: DropAccountant);
        _7 = &mut (((*_1) as Some).1: T);
        _4 = move _6;
        goto -> bb4;
    }

    bb4: {
        _3 = &(*_4);
        _2 = DropAccountant::push::<&str>(move _3, const "drop") -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: DropAccountant;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: ();
    let mut _6: &DropAccountant;
    let mut _9: Droppy<u32>;
    let _10: ();
    let _11: Droppy<u32>;
    let _12: ();
    let mut _13: Droppy<u32>;
    let _14: ();
    let mut _16: Droppy<u32>;
    let _18: ();
    let mut _19: Droppy<u32>;
    let mut _20: Droppy<u32>;
    let _21: ();
    let _22: ();
    let _23: ();
    let _24: ();
    let _25: ();
    let _26: Droppy<u32>;
    let _27: ();
    let mut _28: Droppy<u32>;
    let _29: ();
    let _30: ();
    let mut _31: &DropAccountant;
    let mut _34: Droppy<u32>;
    let _35: ();
    let _36: Droppy<u32>;
    let _37: ();
    let mut _38: Droppy<u32>;
    let _39: ();
    let mut _41: Droppy<u32>;
    let _43: ();
    let mut _44: Droppy<u32>;
    let mut _45: Droppy<u32>;
    let _46: ();
    let _47: ();
    let mut _48: (u32, i32);
    let mut _49: u32;
    let mut _50: Droppy<u32>;
    let _51: ();
    let mut _52: Droppy<u32>;
    let _53: ();
    let _54: Droppy<u32>;
    let _55: ();
    let mut _56: Droppy<u32>;
    let _57: ();
    let _58: ();
    let mut _59: &DropAccountant;
    let _60: ();
    let mut _61: &DropAccountant;
    let _62: ();
    let mut _63: &DropAccountant;
    let mut _67: Droppy<u32>;
    let _68: ();
    let mut _70: &u32;
    let _71: Droppy<u32>;
    let _72: ();
    let mut _74: &mut u32;
    let mut _75: Droppy<u32>;
    let _76: ();
    let mut _79: Droppy<u32>;
    let _81: ();
    let mut _83: Droppy<u32>;
    let mut _84: Droppy<u32>;
    let _85: ();
    let _86: ();
    let _87: ();
    let _88: ();
    let _89: ();
    let _91: Droppy<u32>;
    let _92: ();
    let mut _94: Droppy<u32>;
    let _95: ();
    let _96: ();
    let mut _97: &DropAccountant;
    let mut _101: Droppy<u32>;
    let _102: ();
    let mut _104: &u32;
    let _105: Droppy<u32>;
    let _106: ();
    let mut _108: &mut u32;
    let mut _109: Droppy<u32>;
    let _110: ();
    let mut _113: Droppy<u32>;
    let _115: ();
    let mut _117: Droppy<u32>;
    let mut _118: Droppy<u32>;
    let _119: ();
    let _120: ();
    let mut _122: (u32, i32);
    let mut _123: u32;
    let mut _124: Droppy<u32>;
    let _125: ();
    let mut _127: [u32; 1];
    let mut _128: u32;
    let mut _129: Droppy<u32>;
    let _130: ();
    let mut _131: &u32;
    let _132: Droppy<u32>;
    let _133: ();
    let mut _134: &mut u32;
    let mut _135: Droppy<u32>;
    let _136: ();
    let _137: ();
    let mut _138: &DropAccountant;
    let _139: ();
    let mut _140: &DropAccountant;
    let _141: ();
    let mut _142: std::fmt::Arguments<'_>;
    let mut _143: &[&str];
    let _144: ();
    let mut _145: std::fmt::Arguments<'_>;
    let mut _146: &[&str];
    let _147: ();
    let mut _148: &DropAccountant;
    let _151: ();
    let mut _152: ((), DroppyEnum<u32>);
    let mut _153: isize;
    let _154: ();
    let _155: ();
    let mut _156: &DroppyEnum<u32>;
    let _157: ((), DroppyEnum<u32>);
    let mut _158: isize;
    let _159: ();
    let _160: ();
    let mut _161: &mut DroppyEnum<u32>;
    let mut _162: ((), DroppyEnum<u32>);
    let mut _163: isize;
    let _164: ();
    let _166: ();
    let mut _167: ((), DroppyEnum<u32>);
    let mut _169: isize;
    let _170: ();
    let _171: ();
    let mut _172: ((), DroppyEnum<u32>);
    let mut _173: ((), DroppyEnum<u32>);
    let mut _174: isize;
    let _175: ();
    let _176: ();
    let mut _177: (DroppyEnum<u32>, i32);
    let mut _178: DroppyEnum<u32>;
    let mut _179: ((), DroppyEnum<u32>);
    let mut _180: isize;
    let _181: ();
    let _182: ();
    let mut _183: [DroppyEnum<u32>; 1];
    let mut _184: DroppyEnum<u32>;
    let mut _185: ((), DroppyEnum<u32>);
    let mut _186: isize;
    let _187: ();
    let _188: ();
    let mut _189: &DroppyEnum<u32>;
    let _190: ((), DroppyEnum<u32>);
    let mut _191: isize;
    let _192: ();
    let _193: ();
    let mut _194: &mut DroppyEnum<u32>;
    let mut _195: ((), DroppyEnum<u32>);
    let mut _196: isize;
    let _197: ();
    let _198: ();
    let mut _199: &DropAccountant;
    let _202: ();
    let mut _204: ((), DroppyEnum<u32>);
    let mut _205: isize;
    let _206: ();
    let _207: ();
    let mut _209: &DroppyEnum<u32>;
    let _210: ((), DroppyEnum<u32>);
    let mut _211: isize;
    let _212: ();
    let _213: ();
    let mut _215: &mut DroppyEnum<u32>;
    let mut _216: ((), DroppyEnum<u32>);
    let mut _217: isize;
    let _218: ();
    let _220: ();
    let mut _222: ((), DroppyEnum<u32>);
    let mut _224: isize;
    let _225: ();
    let _226: ();
    let mut _228: ((), DroppyEnum<u32>);
    let mut _229: ((), DroppyEnum<u32>);
    let mut _230: isize;
    let _231: ();
    let _232: ();
    let mut _234: (DroppyEnum<u32>, i32);
    let mut _235: DroppyEnum<u32>;
    let mut _236: ((), DroppyEnum<u32>);
    let mut _237: isize;
    let _238: ();
    let _239: ();
    let mut _241: [DroppyEnum<u32>; 1];
    let mut _242: DroppyEnum<u32>;
    let mut _243: ((), DroppyEnum<u32>);
    let mut _244: isize;
    let _245: ();
    let _246: ();
    let mut _248: &DroppyEnum<u32>;
    let _249: ((), DroppyEnum<u32>);
    let mut _250: isize;
    let _251: ();
    let _252: ();
    let mut _254: &mut DroppyEnum<u32>;
    let mut _255: ((), DroppyEnum<u32>);
    let mut _256: isize;
    let _257: ();
    let _258: ();
    let mut _259: &DropAccountant;
    let _260: ();
    let mut _261: &DropAccountant;
    let _262: &str;
    let _263: ();
    let mut _264: &DropAccountant;
    let _267: ();
    let mut _268: Droppy<u32>;
    let _269: ();
    let _270: ();
    let mut _271: &u32;
    let _272: Droppy<u32>;
    let _273: ();
    let _274: ();
    let mut _275: &mut u32;
    let mut _276: Droppy<u32>;
    let _277: ();
    let _279: ();
    let mut _280: Droppy<u32>;
    let _282: ();
    let _283: ();
    let mut _284: Droppy<u32>;
    let mut _285: Droppy<u32>;
    let _286: ();
    let _287: ();
    let mut _288: (u32, i32);
    let mut _289: u32;
    let mut _290: Droppy<u32>;
    let _291: ();
    let _292: ();
    let mut _293: [u32; 1];
    let mut _294: u32;
    let mut _295: Droppy<u32>;
    let _296: ();
    let _297: ();
    let mut _298: &u32;
    let _299: Droppy<u32>;
    let _300: ();
    let _301: ();
    let mut _302: &mut u32;
    let mut _303: Droppy<u32>;
    let _304: ();
    let _305: ();
    let mut _306: &DropAccountant;
    let _309: ();
    let mut _310: Droppy<u32>;
    let _311: ();
    let _312: ();
    let mut _313: &u32;
    let _314: Droppy<u32>;
    let _315: ();
    let _316: ();
    let mut _317: &mut u32;
    let mut _318: Droppy<u32>;
    let _319: ();
    let _321: ();
    let mut _322: Droppy<u32>;
    let _324: ();
    let _325: ();
    let mut _326: Droppy<u32>;
    let mut _327: Droppy<u32>;
    let _328: ();
    let _329: ();
    let mut _330: (u32, i32);
    let mut _331: u32;
    let mut _332: Droppy<u32>;
    let _333: ();
    let _334: ();
    let mut _335: [u32; 1];
    let mut _336: u32;
    let mut _337: Droppy<u32>;
    let _338: ();
    let _339: ();
    let mut _340: &u32;
    let _341: Droppy<u32>;
    let _342: ();
    let _343: ();
    let mut _344: &mut u32;
    let mut _345: Droppy<u32>;
    let _346: ();
    let _347: ();
    let mut _348: &DropAccountant;
    let _349: ();
    let mut _350: &DropAccountant;
    let _351: &str;
    scope 1 {
        debug acc => _1;
        let _7: &DropAccountant;
        let mut _354: &[&str; 1];
        scope 2 {
            debug acc => _7;
            let _8: u32;
            scope 3 {
                debug v => const 0_u32;
                let _15: Droppy<u32>;
                let _32: &DropAccountant;
                scope 4 {
                }
                scope 5 {
                }
                scope 6 {
                }
                scope 7 {
                    debug w => _15;
                    let _17: Droppy<u32>;
                    scope 8 {
                    }
                    scope 9 {
                        debug w => _17;
                    }
                }
                scope 10 {
                }
                scope 11 {
                }
                scope 12 {
                }
                scope 13 {
                    debug acc => _32;
                    let _33: u32;
                    scope 14 {
                        debug v => const 0_u32;
                        let _40: Droppy<u32>;
                        let _64: &DropAccountant;
                        scope 15 {
                        }
                        scope 16 {
                        }
                        scope 17 {
                        }
                        scope 18 {
                            debug w => _40;
                            let _42: Droppy<u32>;
                            scope 19 {
                            }
                            scope 20 {
                                debug w => _42;
                            }
                        }
                        scope 21 {
                        }
                        scope 22 {
                        }
                        scope 23 {
                        }
                        scope 24 {
                        }
                        scope 25 {
                        }
                        scope 26 {
                            debug acc => _64;
                            let _65: u32;
                            scope 27 {
                                debug v => const 0_u32;
                                let _66: u32;
                                let _69: u32;
                                let _73: u32;
                                let _77: Droppy<u32>;
                                let _82: u32;
                                let _90: &u32;
                                let _93: &mut u32;
                                let _98: &DropAccountant;
                                scope 28 {
                                    debug _v => _66;
                                }
                                scope 29 {
                                    debug _v => _69;
                                }
                                scope 30 {
                                    debug _v => _73;
                                }
                                scope 31 {
                                    debug w => _77;
                                    let _78: u32;
                                    let _80: Droppy<u32>;
                                    scope 32 {
                                        debug _v => _78;
                                    }
                                    scope 33 {
                                        debug w => _80;
                                    }
                                }
                                scope 34 {
                                    debug _v => _82;
                                }
                                scope 35 {
                                    debug _v => _90;
                                }
                                scope 36 {
                                    debug _v => _93;
                                }
                                scope 37 {
                                    debug acc => _98;
                                    let _99: u32;
                                    scope 38 {
                                        debug v => const 0_u32;
                                        let _100: u32;
                                        let _103: u32;
                                        let _107: u32;
                                        let _111: Droppy<u32>;
                                        let _116: u32;
                                        let _121: u32;
                                        let _126: u32;
                                        let _149: &DropAccountant;
                                        let mut _352: &[&str; 1];
                                        let mut _353: &[&str; 1];
                                        scope 39 {
                                            debug _v => _100;
                                        }
                                        scope 40 {
                                            debug _v => _103;
                                        }
                                        scope 41 {
                                            debug _v => _107;
                                        }
                                        scope 42 {
                                            debug w => _111;
                                            let _112: u32;
                                            let _114: Droppy<u32>;
                                            scope 43 {
                                                debug _v => _112;
                                            }
                                            scope 44 {
                                                debug w => _114;
                                            }
                                        }
                                        scope 45 {
                                            debug _v => _116;
                                        }
                                        scope 46 {
                                            debug _v => _121;
                                        }
                                        scope 47 {
                                            debug _v => _126;
                                        }
                                        scope 48 {
                                            debug _v => _131;
                                        }
                                        scope 49 {
                                            debug _v => _134;
                                        }
                                        scope 50 {
                                            debug acc => _149;
                                            let _150: u32;
                                            scope 51 {
                                                debug v => const 1_u32;
                                                let _165: ((), DroppyEnum<u32>);
                                                let _200: &DropAccountant;
                                                scope 52 {
                                                }
                                                scope 53 {
                                                }
                                                scope 54 {
                                                }
                                                scope 55 {
                                                    debug w => _165;
                                                    let _168: ((), DroppyEnum<u32>);
                                                    scope 56 {
                                                    }
                                                    scope 57 {
                                                        debug w => _168;
                                                    }
                                                }
                                                scope 58 {
                                                }
                                                scope 59 {
                                                }
                                                scope 60 {
                                                }
                                                scope 61 {
                                                }
                                                scope 62 {
                                                }
                                                scope 63 {
                                                    debug acc => _200;
                                                    let _201: u32;
                                                    scope 64 {
                                                        debug v => const 1_u32;
                                                        let _203: u32;
                                                        let _208: u32;
                                                        let _214: u32;
                                                        let _219: ((), DroppyEnum<u32>);
                                                        let _227: u32;
                                                        let _233: u32;
                                                        let _240: u32;
                                                        let _247: &u32;
                                                        let _253: &mut u32;
                                                        let _265: &DropAccountant;
                                                        scope 65 {
                                                            debug _v => _203;
                                                        }
                                                        scope 66 {
                                                            debug _v => _208;
                                                        }
                                                        scope 67 {
                                                            debug _v => _214;
                                                        }
                                                        scope 68 {
                                                            debug w => _219;
                                                            let _221: u32;
                                                            let _223: ((), DroppyEnum<u32>);
                                                            scope 69 {
                                                                debug _v => _221;
                                                            }
                                                            scope 70 {
                                                                debug w => _223;
                                                            }
                                                        }
                                                        scope 71 {
                                                            debug _v => _227;
                                                        }
                                                        scope 72 {
                                                            debug _v => _233;
                                                        }
                                                        scope 73 {
                                                            debug _v => _240;
                                                        }
                                                        scope 74 {
                                                            debug _v => _247;
                                                        }
                                                        scope 75 {
                                                            debug _v => _253;
                                                        }
                                                        scope 76 {
                                                            debug acc => _265;
                                                            let _266: u32;
                                                            scope 77 {
                                                                debug v => const 1_u32;
                                                                let _278: Droppy<u32>;
                                                                let _307: &DropAccountant;
                                                                scope 78 {
                                                                }
                                                                scope 79 {
                                                                }
                                                                scope 80 {
                                                                }
                                                                scope 81 {
                                                                    debug w => _278;
                                                                    let _281: Droppy<u32>;
                                                                    scope 82 {
                                                                    }
                                                                    scope 83 {
                                                                        debug w => _281;
                                                                    }
                                                                }
                                                                scope 84 {
                                                                }
                                                                scope 85 {
                                                                }
                                                                scope 86 {
                                                                }
                                                                scope 87 {
                                                                }
                                                                scope 88 {
                                                                }
                                                                scope 89 {
                                                                    debug acc => _307;
                                                                    let _308: u32;
                                                                    scope 90 {
                                                                        debug v => const 1_u32;
                                                                        let _320: Droppy<u32>;
                                                                        scope 91 {
                                                                        }
                                                                        scope 92 {
                                                                        }
                                                                        scope 93 {
                                                                        }
                                                                        scope 94 {
                                                                            debug w => _320;
                                                                            let _323: Droppy<u32>;
                                                                            scope 95 {
                                                                            }
                                                                            scope 96 {
                                                                                debug w => _323;
                                                                            }
                                                                        }
                                                                        scope 97 {
                                                                        }
                                                                        scope 98 {
                                                                        }
                                                                        scope 99 {
                                                                        }
                                                                        scope 100 {
                                                                        }
                                                                        scope 101 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = DropAccountant::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _354 = const _;
        _4 = _354 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb2, unwind: bb395];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb395];
    }

    bb3: {
        _6 = &_1;
        _5 = DropAccountant::new_list::<&str>(move _6, const "let _") -> [return: bb4, unwind: bb395];
    }

    bb4: {
        _7 = &_1;
        _8 = const 0_u32;
        _9 = DropAccountant::build_droppy(_7, _8) -> [return: bb5, unwind: bb395];
    }

    bb5: {
        drop(_9) -> [return: bb6, unwind: bb395];
    }

    bb6: {
        _10 = DropAccountant::push::<&str>(_7, const "body") -> [return: bb7, unwind: bb395];
    }

    bb7: {
        _11 = DropAccountant::build_droppy(_7, _8) -> [return: bb8, unwind: bb395];
    }

    bb8: {
        _12 = DropAccountant::push::<&str>(_7, const "body") -> [return: bb9, unwind: bb394];
    }

    bb9: {
        drop(_11) -> [return: bb10, unwind: bb395];
    }

    bb10: {
        _13 = DropAccountant::build_droppy(_7, _8) -> [return: bb11, unwind: bb395];
    }

    bb11: {
        _14 = DropAccountant::push::<&str>(_7, const "body") -> [return: bb12, unwind: bb393];
    }

    bb12: {
        drop(_13) -> [return: bb13, unwind: bb395];
    }

    bb13: {
        _15 = DropAccountant::build_droppy(_7, _8) -> [return: bb14, unwind: bb395];
    }

    bb14: {
        _17 = move _15;
        _16 = move _17;
        drop(_16) -> [return: bb15, unwind: bb395];
    }

    bb15: {
        _18 = DropAccountant::push::<&str>(_7, const "body") -> [return: bb16, unwind: bb395];
    }

    bb16: {
        _20 = DropAccountant::build_droppy(_7, _8) -> [return: bb17, unwind: bb395];
    }

    bb17: {
        _19 = identity::<Droppy<u32>>(move _20) -> [return: bb18, unwind: bb395];
    }

    bb18: {
        drop(_19) -> [return: bb19, unwind: bb395];
    }

    bb19: {
        _21 = DropAccountant::push::<&str>(_7, const "body") -> [return: bb20, unwind: bb395];
    }

    bb20: {
        _22 = DropAccountant::push::<&str>(_7, const "n/a") -> [return: bb21, unwind: bb395];
    }

    bb21: {
        _23 = DropAccountant::push::<&str>(_7, const "n/a") -> [return: bb22, unwind: bb395];
    }

    bb22: {
        _24 = DropAccountant::push::<&str>(_7, const "n/a") -> [return: bb23, unwind: bb395];
    }

    bb23: {
        _25 = DropAccountant::push::<&str>(_7, const "n/a") -> [return: bb24, unwind: bb395];
    }

    bb24: {
        _26 = DropAccountant::build_droppy(_7, _8) -> [return: bb25, unwind: bb395];
    }

    bb25: {
        _27 = DropAccountant::push::<&str>(_7, const "body") -> [return: bb26, unwind: bb392];
    }

    bb26: {
        drop(_26) -> [return: bb27, unwind: bb395];
    }

    bb27: {
        _28 = DropAccountant::build_droppy(_7, _8) -> [return: bb28, unwind: bb395];
    }

    bb28: {
        _29 = DropAccountant::push::<&str>(_7, const "body") -> [return: bb29, unwind: bb391];
    }

    bb29: {
        drop(_28) -> [return: bb30, unwind: bb395];
    }

    bb30: {
        _31 = &_1;
        _30 = DropAccountant::new_list::<&str>(move _31, const "let else _") -> [return: bb31, unwind: bb395];
    }

    bb31: {
        _32 = &_1;
        _33 = const 0_u32;
        _34 = DropAccountant::build_droppy(_32, _33) -> [return: bb32, unwind: bb395];
    }

    bb32: {
        drop(_34) -> [return: bb33, unwind: bb395];
    }

    bb33: {
        _35 = DropAccountant::push::<&str>(_32, const "body") -> [return: bb34, unwind: bb395];
    }

    bb34: {
        _36 = DropAccountant::build_droppy(_32, _33) -> [return: bb35, unwind: bb395];
    }

    bb35: {
        _37 = DropAccountant::push::<&str>(_32, const "body") -> [return: bb36, unwind: bb390];
    }

    bb36: {
        drop(_36) -> [return: bb37, unwind: bb395];
    }

    bb37: {
        _38 = DropAccountant::build_droppy(_32, _33) -> [return: bb38, unwind: bb395];
    }

    bb38: {
        _39 = DropAccountant::push::<&str>(_32, const "body") -> [return: bb39, unwind: bb389];
    }

    bb39: {
        drop(_38) -> [return: bb40, unwind: bb395];
    }

    bb40: {
        _40 = DropAccountant::build_droppy(_32, _33) -> [return: bb41, unwind: bb395];
    }

    bb41: {
        _42 = move _40;
        _41 = move _42;
        drop(_41) -> [return: bb42, unwind: bb395];
    }

    bb42: {
        _43 = DropAccountant::push::<&str>(_32, const "body") -> [return: bb43, unwind: bb395];
    }

    bb43: {
        _45 = DropAccountant::build_droppy(_32, _33) -> [return: bb44, unwind: bb395];
    }

    bb44: {
        _44 = identity::<Droppy<u32>>(move _45) -> [return: bb45, unwind: bb395];
    }

    bb45: {
        drop(_44) -> [return: bb46, unwind: bb395];
    }

    bb46: {
        _46 = DropAccountant::push::<&str>(_32, const "body") -> [return: bb47, unwind: bb395];
    }

    bb47: {
        _50 = DropAccountant::build_droppy(_32, _33) -> [return: bb48, unwind: bb395];
    }

    bb48: {
        _49 = (_50.1: u32);
        _48 = (move _49, const 77_i32);
        switchInt((_48.1: i32)) -> [77: bb49, otherwise: bb50];
    }

    bb49: {
        drop(_50) -> [return: bb52, unwind: bb395];
    }

    bb50: {
        drop(_50) -> [return: bb51, unwind: bb395];
    }

    bb51: {
        _47 = DropAccountant::push::<&str>(_32, const "else") -> [return: bb397, unwind: bb395];
    }

    bb52: {
        _51 = DropAccountant::push::<&str>(_32, const "body") -> [return: bb398, unwind: bb395];
    }

    bb53: {
        _52 = DropAccountant::build_droppy(_32, _33) -> [return: bb54, unwind: bb395];
    }

    bb54: {
        drop(_52) -> [return: bb55, unwind: bb395];
    }

    bb55: {
        _53 = DropAccountant::push::<&str>(_32, const "body") -> [return: bb56, unwind: bb395];
    }

    bb56: {
        _54 = DropAccountant::build_droppy(_32, _33) -> [return: bb57, unwind: bb395];
    }

    bb57: {
        _55 = DropAccountant::push::<&str>(_32, const "body") -> [return: bb58, unwind: bb388];
    }

    bb58: {
        drop(_54) -> [return: bb59, unwind: bb395];
    }

    bb59: {
        _56 = DropAccountant::build_droppy(_32, _33) -> [return: bb60, unwind: bb395];
    }

    bb60: {
        _57 = DropAccountant::push::<&str>(_32, const "body") -> [return: bb61, unwind: bb387];
    }

    bb61: {
        drop(_56) -> [return: bb62, unwind: bb395];
    }

    bb62: {
        _59 = &_1;
        _58 = DropAccountant::assert_equality_last_two_lists(move _59) -> [return: bb63, unwind: bb395];
    }

    bb63: {
        _61 = &_1;
        _60 = DropAccountant::print_table(move _61) -> [return: bb64, unwind: bb395];
    }

    bb64: {
        _63 = &_1;
        _62 = DropAccountant::new_list::<&str>(move _63, const "let _v") -> [return: bb65, unwind: bb395];
    }

    bb65: {
        _64 = &_1;
        _65 = const 0_u32;
        _67 = DropAccountant::build_droppy(_64, _65) -> [return: bb66, unwind: bb395];
    }

    bb66: {
        _66 = (_67.1: u32);
        drop(_67) -> [return: bb67, unwind: bb395];
    }

    bb67: {
        _68 = DropAccountant::push::<&str>(_64, const "body") -> [return: bb68, unwind: bb395];
    }

    bb68: {
        _71 = DropAccountant::build_droppy(_64, _65) -> [return: bb69, unwind: bb395];
    }

    bb69: {
        _70 = &(_71.1: u32);
        _69 = (*_70);
        _72 = DropAccountant::push::<&str>(_64, const "body") -> [return: bb70, unwind: bb386];
    }

    bb70: {
        drop(_71) -> [return: bb71, unwind: bb395];
    }

    bb71: {
        _75 = DropAccountant::build_droppy(_64, _65) -> [return: bb72, unwind: bb395];
    }

    bb72: {
        _74 = &mut (_75.1: u32);
        _73 = (*_74);
        _76 = DropAccountant::push::<&str>(_64, const "body") -> [return: bb73, unwind: bb385];
    }

    bb73: {
        drop(_75) -> [return: bb74, unwind: bb395];
    }

    bb74: {
        _77 = DropAccountant::build_droppy(_64, _65) -> [return: bb75, unwind: bb395];
    }

    bb75: {
        _80 = move _77;
        _79 = move _80;
        _78 = (_79.1: u32);
        drop(_79) -> [return: bb76, unwind: bb395];
    }

    bb76: {
        _81 = DropAccountant::push::<&str>(_64, const "body") -> [return: bb77, unwind: bb395];
    }

    bb77: {
        _84 = DropAccountant::build_droppy(_64, _65) -> [return: bb78, unwind: bb395];
    }

    bb78: {
        _83 = identity::<Droppy<u32>>(move _84) -> [return: bb79, unwind: bb395];
    }

    bb79: {
        _82 = (_83.1: u32);
        drop(_83) -> [return: bb80, unwind: bb395];
    }

    bb80: {
        _85 = DropAccountant::push::<&str>(_64, const "body") -> [return: bb81, unwind: bb395];
    }

    bb81: {
        _86 = DropAccountant::push::<&str>(_64, const "n/a") -> [return: bb82, unwind: bb395];
    }

    bb82: {
        _87 = DropAccountant::push::<&str>(_64, const "n/a") -> [return: bb83, unwind: bb395];
    }

    bb83: {
        _88 = DropAccountant::push::<&str>(_64, const "n/a") -> [return: bb84, unwind: bb395];
    }

    bb84: {
        _89 = DropAccountant::push::<&str>(_64, const "n/a") -> [return: bb85, unwind: bb395];
    }

    bb85: {
        _91 = DropAccountant::build_droppy(_64, _65) -> [return: bb86, unwind: bb395];
    }

    bb86: {
        _90 = &(_91.1: u32);
        _92 = DropAccountant::push::<&str>(_64, const "body") -> [return: bb87, unwind: bb384];
    }

    bb87: {
        drop(_91) -> [return: bb88, unwind: bb395];
    }

    bb88: {
        _94 = DropAccountant::build_droppy(_64, _65) -> [return: bb89, unwind: bb395];
    }

    bb89: {
        _93 = &mut (_94.1: u32);
        _95 = DropAccountant::push::<&str>(_64, const "body") -> [return: bb90, unwind: bb383];
    }

    bb90: {
        drop(_94) -> [return: bb91, unwind: bb395];
    }

    bb91: {
        _97 = &_1;
        _96 = DropAccountant::new_list::<&str>(move _97, const "let else _v") -> [return: bb92, unwind: bb395];
    }

    bb92: {
        _98 = &_1;
        _99 = const 0_u32;
        _101 = DropAccountant::build_droppy(_98, _99) -> [return: bb93, unwind: bb395];
    }

    bb93: {
        _100 = (_101.1: u32);
        drop(_101) -> [return: bb94, unwind: bb395];
    }

    bb94: {
        _102 = DropAccountant::push::<&str>(_98, const "body") -> [return: bb95, unwind: bb395];
    }

    bb95: {
        _105 = DropAccountant::build_droppy(_98, _99) -> [return: bb96, unwind: bb395];
    }

    bb96: {
        _104 = &(_105.1: u32);
        _103 = (*_104);
        _106 = DropAccountant::push::<&str>(_98, const "body") -> [return: bb97, unwind: bb382];
    }

    bb97: {
        drop(_105) -> [return: bb98, unwind: bb395];
    }

    bb98: {
        _109 = DropAccountant::build_droppy(_98, _99) -> [return: bb99, unwind: bb395];
    }

    bb99: {
        _108 = &mut (_109.1: u32);
        _107 = (*_108);
        _110 = DropAccountant::push::<&str>(_98, const "body") -> [return: bb100, unwind: bb381];
    }

    bb100: {
        drop(_109) -> [return: bb101, unwind: bb395];
    }

    bb101: {
        _111 = DropAccountant::build_droppy(_98, _99) -> [return: bb102, unwind: bb395];
    }

    bb102: {
        _114 = move _111;
        _113 = move _114;
        _112 = (_113.1: u32);
        drop(_113) -> [return: bb103, unwind: bb395];
    }

    bb103: {
        _115 = DropAccountant::push::<&str>(_98, const "body") -> [return: bb104, unwind: bb395];
    }

    bb104: {
        _118 = DropAccountant::build_droppy(_98, _99) -> [return: bb105, unwind: bb395];
    }

    bb105: {
        _117 = identity::<Droppy<u32>>(move _118) -> [return: bb106, unwind: bb395];
    }

    bb106: {
        _116 = (_117.1: u32);
        drop(_117) -> [return: bb107, unwind: bb395];
    }

    bb107: {
        _119 = DropAccountant::push::<&str>(_98, const "body") -> [return: bb108, unwind: bb395];
    }

    bb108: {
        _124 = DropAccountant::build_droppy(_98, _99) -> [return: bb109, unwind: bb395];
    }

    bb109: {
        _123 = (_124.1: u32);
        _122 = (move _123, const 77_i32);
        switchInt((_122.1: i32)) -> [77: bb110, otherwise: bb111];
    }

    bb110: {
        _121 = (_122.0: u32);
        drop(_124) -> [return: bb113, unwind: bb395];
    }

    bb111: {
        drop(_124) -> [return: bb112, unwind: bb395];
    }

    bb112: {
        _120 = DropAccountant::push::<&str>(_98, const "else") -> [return: bb399, unwind: bb395];
    }

    bb113: {
        _125 = DropAccountant::push::<&str>(_98, const "body") -> [return: bb400, unwind: bb395];
    }

    bb114: {
        _129 = DropAccountant::build_droppy(_98, _99) -> [return: bb115, unwind: bb395];
    }

    bb115: {
        _128 = (_129.1: u32);
        _127 = [move _128];
        _126 = _127[0 of 1];
        drop(_129) -> [return: bb116, unwind: bb395];
    }

    bb116: {
        _130 = DropAccountant::push::<&str>(_98, const "body") -> [return: bb117, unwind: bb395];
    }

    bb117: {
        _132 = DropAccountant::build_droppy(_98, _99) -> [return: bb118, unwind: bb395];
    }

    bb118: {
        _131 = &(_132.1: u32);
        _133 = DropAccountant::push::<&str>(_98, const "body") -> [return: bb119, unwind: bb380];
    }

    bb119: {
        drop(_132) -> [return: bb120, unwind: bb395];
    }

    bb120: {
        _135 = DropAccountant::build_droppy(_98, _99) -> [return: bb121, unwind: bb395];
    }

    bb121: {
        _134 = &mut (_135.1: u32);
        _136 = DropAccountant::push::<&str>(_98, const "body") -> [return: bb122, unwind: bb379];
    }

    bb122: {
        drop(_135) -> [return: bb123, unwind: bb395];
    }

    bb123: {
        _138 = &_1;
        _137 = DropAccountant::assert_equality_last_two_lists(move _138) -> [return: bb124, unwind: bb395];
    }

    bb124: {
        _140 = &_1;
        _139 = DropAccountant::print_table(move _140) -> [return: bb125, unwind: bb395];
    }

    bb125: {
        _353 = const _;
        _143 = _353 as &[&str] (Pointer(Unsize));
        _142 = Arguments::<'_>::new_const(move _143) -> [return: bb126, unwind: bb395];
    }

    bb126: {
        _141 = _print(move _142) -> [return: bb127, unwind: bb395];
    }

    bb127: {
        _352 = const _;
        _146 = _352 as &[&str] (Pointer(Unsize));
        _145 = Arguments::<'_>::new_const(move _146) -> [return: bb128, unwind: bb395];
    }

    bb128: {
        _144 = _print(move _145) -> [return: bb129, unwind: bb395];
    }

    bb129: {
        _148 = &_1;
        _147 = DropAccountant::new_list::<&str>(move _148, const "let else _ mismatch") -> [return: bb130, unwind: bb395];
    }

    bb130: {
        _149 = &_1;
        _150 = const 1_u32;
        _152 = DropAccountant::build_droppy_enum_none(_149, _150) -> [return: bb131, unwind: bb395];
    }

    bb131: {
        _153 = discriminant((_152.1: DroppyEnum<u32>));
        switchInt(move _153) -> [0: bb132, otherwise: bb133];
    }

    bb132: {
        drop(_152) -> [return: bb135, unwind: bb395];
    }

    bb133: {
        drop(_152) -> [return: bb134, unwind: bb395];
    }

    bb134: {
        _151 = DropAccountant::push::<&str>(_149, const "else") -> [return: bb401, unwind: bb395];
    }

    bb135: {
        _154 = DropAccountant::push::<&str>(_149, const "body") -> [return: bb402, unwind: bb395];
    }

    bb136: {
        _157 = DropAccountant::build_droppy_enum_none(_149, _150) -> [return: bb137, unwind: bb395];
    }

    bb137: {
        _156 = &(_157.1: DroppyEnum<u32>);
        _158 = discriminant((*_156));
        switchInt(move _158) -> [0: bb138, otherwise: bb139];
    }

    bb138: {
        _159 = DropAccountant::push::<&str>(_149, const "body") -> [return: bb141, unwind: bb378];
    }

    bb139: {
        drop(_157) -> [return: bb140, unwind: bb395];
    }

    bb140: {
        _155 = DropAccountant::push::<&str>(_149, const "else") -> [return: bb403, unwind: bb395];
    }

    bb141: {
        drop(_157) -> [return: bb142, unwind: bb395];
    }

    bb142: {
        _162 = DropAccountant::build_droppy_enum_none(_149, _150) -> [return: bb143, unwind: bb395];
    }

    bb143: {
        _161 = &mut (_162.1: DroppyEnum<u32>);
        _163 = discriminant((*_161));
        switchInt(move _163) -> [0: bb144, otherwise: bb145];
    }

    bb144: {
        _164 = DropAccountant::push::<&str>(_149, const "body") -> [return: bb147, unwind: bb377];
    }

    bb145: {
        drop(_162) -> [return: bb146, unwind: bb395];
    }

    bb146: {
        _160 = DropAccountant::push::<&str>(_149, const "else") -> [return: bb404, unwind: bb395];
    }

    bb147: {
        drop(_162) -> [return: bb148, unwind: bb395];
    }

    bb148: {
        _165 = DropAccountant::build_droppy_enum_none(_149, _150) -> [return: bb149, unwind: bb395];
    }

    bb149: {
        _168 = move _165;
        _167 = move _168;
        _169 = discriminant((_167.1: DroppyEnum<u32>));
        switchInt(move _169) -> [0: bb150, otherwise: bb151];
    }

    bb150: {
        drop(_167) -> [return: bb153, unwind: bb395];
    }

    bb151: {
        drop(_167) -> [return: bb152, unwind: bb395];
    }

    bb152: {
        _166 = DropAccountant::push::<&str>(_149, const "else") -> [return: bb405, unwind: bb395];
    }

    bb153: {
        _170 = DropAccountant::push::<&str>(_149, const "body") -> [return: bb406, unwind: bb395];
    }

    bb154: {
        _173 = DropAccountant::build_droppy_enum_none(_149, _150) -> [return: bb155, unwind: bb395];
    }

    bb155: {
        _172 = identity::<((), DroppyEnum<u32>)>(move _173) -> [return: bb156, unwind: bb395];
    }

    bb156: {
        _174 = discriminant((_172.1: DroppyEnum<u32>));
        switchInt(move _174) -> [0: bb157, otherwise: bb158];
    }

    bb157: {
        drop(_172) -> [return: bb160, unwind: bb395];
    }

    bb158: {
        drop(_172) -> [return: bb159, unwind: bb395];
    }

    bb159: {
        _171 = DropAccountant::push::<&str>(_149, const "else") -> [return: bb407, unwind: bb395];
    }

    bb160: {
        _175 = DropAccountant::push::<&str>(_149, const "body") -> [return: bb408, unwind: bb395];
    }

    bb161: {
        _179 = DropAccountant::build_droppy_enum_none(_149, _150) -> [return: bb162, unwind: bb395];
    }

    bb162: {
        _178 = move (_179.1: DroppyEnum<u32>);
        _177 = (move _178, const 77_i32);
        _180 = discriminant((_177.0: DroppyEnum<u32>));
        switchInt(move _180) -> [0: bb163, otherwise: bb165];
    }

    bb163: {
        switchInt((_177.1: i32)) -> [77: bb164, otherwise: bb165];
    }

    bb164: {
        drop(_177) -> [return: bb167, unwind: bb395];
    }

    bb165: {
        drop(_177) -> [return: bb166, unwind: bb395];
    }

    bb166: {
        _176 = DropAccountant::push::<&str>(_149, const "else") -> [return: bb409, unwind: bb395];
    }

    bb167: {
        _181 = DropAccountant::push::<&str>(_149, const "body") -> [return: bb410, unwind: bb395];
    }

    bb168: {
        _185 = DropAccountant::build_droppy_enum_none(_149, _150) -> [return: bb169, unwind: bb395];
    }

    bb169: {
        _184 = move (_185.1: DroppyEnum<u32>);
        _183 = [move _184];
        _186 = discriminant(_183[0 of 1]);
        switchInt(move _186) -> [0: bb170, otherwise: bb171];
    }

    bb170: {
        drop(_183) -> [return: bb173, unwind: bb395];
    }

    bb171: {
        drop(_183) -> [return: bb172, unwind: bb395];
    }

    bb172: {
        _182 = DropAccountant::push::<&str>(_149, const "else") -> [return: bb411, unwind: bb395];
    }

    bb173: {
        _187 = DropAccountant::push::<&str>(_149, const "body") -> [return: bb412, unwind: bb395];
    }

    bb174: {
        _190 = DropAccountant::build_droppy_enum_none(_149, _150) -> [return: bb175, unwind: bb395];
    }

    bb175: {
        _189 = &(_190.1: DroppyEnum<u32>);
        _191 = discriminant((*_189));
        switchInt(move _191) -> [0: bb176, otherwise: bb177];
    }

    bb176: {
        _192 = DropAccountant::push::<&str>(_149, const "body") -> [return: bb179, unwind: bb376];
    }

    bb177: {
        drop(_190) -> [return: bb178, unwind: bb395];
    }

    bb178: {
        _188 = DropAccountant::push::<&str>(_149, const "else") -> [return: bb413, unwind: bb395];
    }

    bb179: {
        drop(_190) -> [return: bb180, unwind: bb395];
    }

    bb180: {
        _195 = DropAccountant::build_droppy_enum_none(_149, _150) -> [return: bb181, unwind: bb395];
    }

    bb181: {
        _194 = &mut (_195.1: DroppyEnum<u32>);
        _196 = discriminant((*_194));
        switchInt(move _196) -> [0: bb182, otherwise: bb183];
    }

    bb182: {
        _197 = DropAccountant::push::<&str>(_149, const "body") -> [return: bb185, unwind: bb375];
    }

    bb183: {
        drop(_195) -> [return: bb184, unwind: bb395];
    }

    bb184: {
        _193 = DropAccountant::push::<&str>(_149, const "else") -> [return: bb414, unwind: bb395];
    }

    bb185: {
        drop(_195) -> [return: bb186, unwind: bb395];
    }

    bb186: {
        _199 = &_1;
        _198 = DropAccountant::new_list::<&str>(move _199, const "let else _v mismatch") -> [return: bb187, unwind: bb395];
    }

    bb187: {
        _200 = &_1;
        _201 = const 1_u32;
        _204 = DropAccountant::build_droppy_enum_none(_200, _201) -> [return: bb188, unwind: bb395];
    }

    bb188: {
        _205 = discriminant((_204.1: DroppyEnum<u32>));
        switchInt(move _205) -> [0: bb189, otherwise: bb190];
    }

    bb189: {
        _203 = (((_204.1: DroppyEnum<u32>) as Some).1: u32);
        drop(_204) -> [return: bb192, unwind: bb395];
    }

    bb190: {
        drop(_204) -> [return: bb191, unwind: bb395];
    }

    bb191: {
        _202 = DropAccountant::push::<&str>(_200, const "else") -> [return: bb415, unwind: bb395];
    }

    bb192: {
        _206 = DropAccountant::push::<&str>(_200, const "body") -> [return: bb416, unwind: bb395];
    }

    bb193: {
        _210 = DropAccountant::build_droppy_enum_none(_200, _201) -> [return: bb194, unwind: bb395];
    }

    bb194: {
        _209 = &(_210.1: DroppyEnum<u32>);
        _211 = discriminant((*_209));
        switchInt(move _211) -> [0: bb195, otherwise: bb196];
    }

    bb195: {
        _208 = (((*_209) as Some).1: u32);
        _212 = DropAccountant::push::<&str>(_200, const "body") -> [return: bb198, unwind: bb374];
    }

    bb196: {
        drop(_210) -> [return: bb197, unwind: bb395];
    }

    bb197: {
        _207 = DropAccountant::push::<&str>(_200, const "else") -> [return: bb417, unwind: bb395];
    }

    bb198: {
        drop(_210) -> [return: bb199, unwind: bb395];
    }

    bb199: {
        _216 = DropAccountant::build_droppy_enum_none(_200, _201) -> [return: bb200, unwind: bb395];
    }

    bb200: {
        _215 = &mut (_216.1: DroppyEnum<u32>);
        _217 = discriminant((*_215));
        switchInt(move _217) -> [0: bb201, otherwise: bb202];
    }

    bb201: {
        _214 = (((*_215) as Some).1: u32);
        _218 = DropAccountant::push::<&str>(_200, const "body") -> [return: bb204, unwind: bb373];
    }

    bb202: {
        drop(_216) -> [return: bb203, unwind: bb395];
    }

    bb203: {
        _213 = DropAccountant::push::<&str>(_200, const "else") -> [return: bb418, unwind: bb395];
    }

    bb204: {
        drop(_216) -> [return: bb205, unwind: bb395];
    }

    bb205: {
        _219 = DropAccountant::build_droppy_enum_none(_200, _201) -> [return: bb206, unwind: bb395];
    }

    bb206: {
        _223 = move _219;
        _222 = move _223;
        _224 = discriminant((_222.1: DroppyEnum<u32>));
        switchInt(move _224) -> [0: bb207, otherwise: bb208];
    }

    bb207: {
        _221 = (((_222.1: DroppyEnum<u32>) as Some).1: u32);
        drop(_222) -> [return: bb210, unwind: bb395];
    }

    bb208: {
        drop(_222) -> [return: bb209, unwind: bb395];
    }

    bb209: {
        _220 = DropAccountant::push::<&str>(_200, const "else") -> [return: bb419, unwind: bb395];
    }

    bb210: {
        _225 = DropAccountant::push::<&str>(_200, const "body") -> [return: bb420, unwind: bb395];
    }

    bb211: {
        _229 = DropAccountant::build_droppy_enum_none(_200, _201) -> [return: bb212, unwind: bb395];
    }

    bb212: {
        _228 = identity::<((), DroppyEnum<u32>)>(move _229) -> [return: bb213, unwind: bb395];
    }

    bb213: {
        _230 = discriminant((_228.1: DroppyEnum<u32>));
        switchInt(move _230) -> [0: bb214, otherwise: bb215];
    }

    bb214: {
        _227 = (((_228.1: DroppyEnum<u32>) as Some).1: u32);
        drop(_228) -> [return: bb217, unwind: bb395];
    }

    bb215: {
        drop(_228) -> [return: bb216, unwind: bb395];
    }

    bb216: {
        _226 = DropAccountant::push::<&str>(_200, const "else") -> [return: bb421, unwind: bb395];
    }

    bb217: {
        _231 = DropAccountant::push::<&str>(_200, const "body") -> [return: bb422, unwind: bb395];
    }

    bb218: {
        _236 = DropAccountant::build_droppy_enum_none(_200, _201) -> [return: bb219, unwind: bb395];
    }

    bb219: {
        _235 = move (_236.1: DroppyEnum<u32>);
        _234 = (move _235, const 77_i32);
        _237 = discriminant((_234.0: DroppyEnum<u32>));
        switchInt(move _237) -> [0: bb220, otherwise: bb222];
    }

    bb220: {
        switchInt((_234.1: i32)) -> [77: bb221, otherwise: bb222];
    }

    bb221: {
        _233 = (((_234.0: DroppyEnum<u32>) as Some).1: u32);
        drop(_234) -> [return: bb224, unwind: bb395];
    }

    bb222: {
        drop(_234) -> [return: bb223, unwind: bb395];
    }

    bb223: {
        _232 = DropAccountant::push::<&str>(_200, const "else") -> [return: bb423, unwind: bb395];
    }

    bb224: {
        _238 = DropAccountant::push::<&str>(_200, const "body") -> [return: bb424, unwind: bb395];
    }

    bb225: {
        _243 = DropAccountant::build_droppy_enum_none(_200, _201) -> [return: bb226, unwind: bb395];
    }

    bb226: {
        _242 = move (_243.1: DroppyEnum<u32>);
        _241 = [move _242];
        _244 = discriminant(_241[0 of 1]);
        switchInt(move _244) -> [0: bb227, otherwise: bb228];
    }

    bb227: {
        _240 = ((_241[0 of 1] as Some).1: u32);
        drop(_241) -> [return: bb230, unwind: bb395];
    }

    bb228: {
        drop(_241) -> [return: bb229, unwind: bb395];
    }

    bb229: {
        _239 = DropAccountant::push::<&str>(_200, const "else") -> [return: bb425, unwind: bb395];
    }

    bb230: {
        _245 = DropAccountant::push::<&str>(_200, const "body") -> [return: bb426, unwind: bb395];
    }

    bb231: {
        _249 = DropAccountant::build_droppy_enum_none(_200, _201) -> [return: bb232, unwind: bb395];
    }

    bb232: {
        _248 = &(_249.1: DroppyEnum<u32>);
        _250 = discriminant((*_248));
        switchInt(move _250) -> [0: bb233, otherwise: bb234];
    }

    bb233: {
        _247 = &(((*_248) as Some).1: u32);
        _251 = DropAccountant::push::<&str>(_200, const "body") -> [return: bb236, unwind: bb372];
    }

    bb234: {
        drop(_249) -> [return: bb235, unwind: bb395];
    }

    bb235: {
        _246 = DropAccountant::push::<&str>(_200, const "else") -> [return: bb427, unwind: bb395];
    }

    bb236: {
        drop(_249) -> [return: bb237, unwind: bb395];
    }

    bb237: {
        _255 = DropAccountant::build_droppy_enum_none(_200, _201) -> [return: bb238, unwind: bb395];
    }

    bb238: {
        _254 = &mut (_255.1: DroppyEnum<u32>);
        _256 = discriminant((*_254));
        switchInt(move _256) -> [0: bb239, otherwise: bb240];
    }

    bb239: {
        _253 = &mut (((*_254) as Some).1: u32);
        _257 = DropAccountant::push::<&str>(_200, const "body") -> [return: bb242, unwind: bb371];
    }

    bb240: {
        drop(_255) -> [return: bb241, unwind: bb395];
    }

    bb241: {
        _252 = DropAccountant::push::<&str>(_200, const "else") -> [return: bb428, unwind: bb395];
    }

    bb242: {
        drop(_255) -> [return: bb243, unwind: bb395];
    }

    bb243: {
        _259 = &_1;
        _258 = DropAccountant::print_table(move _259) -> [return: bb244, unwind: bb395];
    }

    bb244: {
        _261 = &_1;
        _262 = const "drop,else";
        _260 = DropAccountant::assert_all_equal_to(move _261, _262) -> [return: bb245, unwind: bb395];
    }

    bb245: {
        _264 = &_1;
        _263 = DropAccountant::new_list::<&str>(move _264, const "let else 0 mismatch") -> [return: bb246, unwind: bb395];
    }

    bb246: {
        _265 = &_1;
        _266 = const 1_u32;
        _268 = DropAccountant::build_droppy(_265, _266) -> [return: bb247, unwind: bb395];
    }

    bb247: {
        switchInt((_268.1: u32)) -> [0: bb248, otherwise: bb249];
    }

    bb248: {
        drop(_268) -> [return: bb251, unwind: bb395];
    }

    bb249: {
        drop(_268) -> [return: bb250, unwind: bb395];
    }

    bb250: {
        _267 = DropAccountant::push::<&str>(_265, const "else") -> [return: bb429, unwind: bb395];
    }

    bb251: {
        _269 = DropAccountant::push::<&str>(_265, const "body") -> [return: bb430, unwind: bb395];
    }

    bb252: {
        _272 = DropAccountant::build_droppy(_265, _266) -> [return: bb253, unwind: bb395];
    }

    bb253: {
        _271 = &(_272.1: u32);
        switchInt((*_271)) -> [0: bb254, otherwise: bb255];
    }

    bb254: {
        _273 = DropAccountant::push::<&str>(_265, const "body") -> [return: bb257, unwind: bb370];
    }

    bb255: {
        drop(_272) -> [return: bb256, unwind: bb395];
    }

    bb256: {
        _270 = DropAccountant::push::<&str>(_265, const "else") -> [return: bb431, unwind: bb395];
    }

    bb257: {
        drop(_272) -> [return: bb258, unwind: bb395];
    }

    bb258: {
        _276 = DropAccountant::build_droppy(_265, _266) -> [return: bb259, unwind: bb395];
    }

    bb259: {
        _275 = &mut (_276.1: u32);
        switchInt((*_275)) -> [0: bb260, otherwise: bb261];
    }

    bb260: {
        _277 = DropAccountant::push::<&str>(_265, const "body") -> [return: bb263, unwind: bb369];
    }

    bb261: {
        drop(_276) -> [return: bb262, unwind: bb395];
    }

    bb262: {
        _274 = DropAccountant::push::<&str>(_265, const "else") -> [return: bb432, unwind: bb395];
    }

    bb263: {
        drop(_276) -> [return: bb264, unwind: bb395];
    }

    bb264: {
        _278 = DropAccountant::build_droppy(_265, _266) -> [return: bb265, unwind: bb395];
    }

    bb265: {
        _281 = move _278;
        _280 = move _281;
        switchInt((_280.1: u32)) -> [0: bb266, otherwise: bb267];
    }

    bb266: {
        drop(_280) -> [return: bb269, unwind: bb395];
    }

    bb267: {
        drop(_280) -> [return: bb268, unwind: bb395];
    }

    bb268: {
        _279 = DropAccountant::push::<&str>(_265, const "else") -> [return: bb433, unwind: bb395];
    }

    bb269: {
        _282 = DropAccountant::push::<&str>(_265, const "body") -> [return: bb434, unwind: bb395];
    }

    bb270: {
        _285 = DropAccountant::build_droppy(_265, _266) -> [return: bb271, unwind: bb395];
    }

    bb271: {
        _284 = identity::<Droppy<u32>>(move _285) -> [return: bb272, unwind: bb395];
    }

    bb272: {
        switchInt((_284.1: u32)) -> [0: bb273, otherwise: bb274];
    }

    bb273: {
        drop(_284) -> [return: bb276, unwind: bb395];
    }

    bb274: {
        drop(_284) -> [return: bb275, unwind: bb395];
    }

    bb275: {
        _283 = DropAccountant::push::<&str>(_265, const "else") -> [return: bb435, unwind: bb395];
    }

    bb276: {
        _286 = DropAccountant::push::<&str>(_265, const "body") -> [return: bb436, unwind: bb395];
    }

    bb277: {
        _290 = DropAccountant::build_droppy(_265, _266) -> [return: bb278, unwind: bb395];
    }

    bb278: {
        _289 = (_290.1: u32);
        _288 = (move _289, const 77_i32);
        switchInt((_288.0: u32)) -> [0: bb279, otherwise: bb281];
    }

    bb279: {
        switchInt((_288.1: i32)) -> [77: bb280, otherwise: bb281];
    }

    bb280: {
        drop(_290) -> [return: bb283, unwind: bb395];
    }

    bb281: {
        drop(_290) -> [return: bb282, unwind: bb395];
    }

    bb282: {
        _287 = DropAccountant::push::<&str>(_265, const "else") -> [return: bb437, unwind: bb395];
    }

    bb283: {
        _291 = DropAccountant::push::<&str>(_265, const "body") -> [return: bb438, unwind: bb395];
    }

    bb284: {
        _295 = DropAccountant::build_droppy(_265, _266) -> [return: bb285, unwind: bb395];
    }

    bb285: {
        _294 = (_295.1: u32);
        _293 = [move _294];
        switchInt(_293[0 of 1]) -> [0: bb286, otherwise: bb287];
    }

    bb286: {
        drop(_295) -> [return: bb289, unwind: bb395];
    }

    bb287: {
        drop(_295) -> [return: bb288, unwind: bb395];
    }

    bb288: {
        _292 = DropAccountant::push::<&str>(_265, const "else") -> [return: bb439, unwind: bb395];
    }

    bb289: {
        _296 = DropAccountant::push::<&str>(_265, const "body") -> [return: bb440, unwind: bb395];
    }

    bb290: {
        _299 = DropAccountant::build_droppy(_265, _266) -> [return: bb291, unwind: bb395];
    }

    bb291: {
        _298 = &(_299.1: u32);
        switchInt((*_298)) -> [0: bb292, otherwise: bb293];
    }

    bb292: {
        _300 = DropAccountant::push::<&str>(_265, const "body") -> [return: bb295, unwind: bb368];
    }

    bb293: {
        drop(_299) -> [return: bb294, unwind: bb395];
    }

    bb294: {
        _297 = DropAccountant::push::<&str>(_265, const "else") -> [return: bb441, unwind: bb395];
    }

    bb295: {
        drop(_299) -> [return: bb296, unwind: bb395];
    }

    bb296: {
        _303 = DropAccountant::build_droppy(_265, _266) -> [return: bb297, unwind: bb395];
    }

    bb297: {
        _302 = &mut (_303.1: u32);
        switchInt((*_302)) -> [0: bb298, otherwise: bb299];
    }

    bb298: {
        _304 = DropAccountant::push::<&str>(_265, const "body") -> [return: bb301, unwind: bb367];
    }

    bb299: {
        drop(_303) -> [return: bb300, unwind: bb395];
    }

    bb300: {
        _301 = DropAccountant::push::<&str>(_265, const "else") -> [return: bb442, unwind: bb395];
    }

    bb301: {
        drop(_303) -> [return: bb302, unwind: bb395];
    }

    bb302: {
        _306 = &_1;
        _305 = DropAccountant::new_list::<&str>(move _306, const "let else 0 mismatch") -> [return: bb303, unwind: bb395];
    }

    bb303: {
        _307 = &_1;
        _308 = const 1_u32;
        _310 = DropAccountant::build_droppy(_307, _308) -> [return: bb304, unwind: bb395];
    }

    bb304: {
        switchInt((_310.1: u32)) -> [0: bb305, otherwise: bb306];
    }

    bb305: {
        drop(_310) -> [return: bb308, unwind: bb395];
    }

    bb306: {
        drop(_310) -> [return: bb307, unwind: bb395];
    }

    bb307: {
        _309 = DropAccountant::push::<&str>(_307, const "else") -> [return: bb443, unwind: bb395];
    }

    bb308: {
        _311 = DropAccountant::push::<&str>(_307, const "body") -> [return: bb444, unwind: bb395];
    }

    bb309: {
        _314 = DropAccountant::build_droppy(_307, _308) -> [return: bb310, unwind: bb395];
    }

    bb310: {
        _313 = &(_314.1: u32);
        switchInt((*_313)) -> [0: bb311, otherwise: bb312];
    }

    bb311: {
        _315 = DropAccountant::push::<&str>(_307, const "body") -> [return: bb314, unwind: bb366];
    }

    bb312: {
        drop(_314) -> [return: bb313, unwind: bb395];
    }

    bb313: {
        _312 = DropAccountant::push::<&str>(_307, const "else") -> [return: bb445, unwind: bb395];
    }

    bb314: {
        drop(_314) -> [return: bb315, unwind: bb395];
    }

    bb315: {
        _318 = DropAccountant::build_droppy(_307, _308) -> [return: bb316, unwind: bb395];
    }

    bb316: {
        _317 = &mut (_318.1: u32);
        switchInt((*_317)) -> [0: bb317, otherwise: bb318];
    }

    bb317: {
        _319 = DropAccountant::push::<&str>(_307, const "body") -> [return: bb320, unwind: bb365];
    }

    bb318: {
        drop(_318) -> [return: bb319, unwind: bb395];
    }

    bb319: {
        _316 = DropAccountant::push::<&str>(_307, const "else") -> [return: bb446, unwind: bb395];
    }

    bb320: {
        drop(_318) -> [return: bb321, unwind: bb395];
    }

    bb321: {
        _320 = DropAccountant::build_droppy(_307, _308) -> [return: bb322, unwind: bb395];
    }

    bb322: {
        _323 = move _320;
        _322 = move _323;
        switchInt((_322.1: u32)) -> [0: bb323, otherwise: bb324];
    }

    bb323: {
        drop(_322) -> [return: bb326, unwind: bb395];
    }

    bb324: {
        drop(_322) -> [return: bb325, unwind: bb395];
    }

    bb325: {
        _321 = DropAccountant::push::<&str>(_307, const "else") -> [return: bb447, unwind: bb395];
    }

    bb326: {
        _324 = DropAccountant::push::<&str>(_307, const "body") -> [return: bb448, unwind: bb395];
    }

    bb327: {
        _327 = DropAccountant::build_droppy(_307, _308) -> [return: bb328, unwind: bb395];
    }

    bb328: {
        _326 = identity::<Droppy<u32>>(move _327) -> [return: bb329, unwind: bb395];
    }

    bb329: {
        switchInt((_326.1: u32)) -> [0: bb330, otherwise: bb331];
    }

    bb330: {
        drop(_326) -> [return: bb333, unwind: bb395];
    }

    bb331: {
        drop(_326) -> [return: bb332, unwind: bb395];
    }

    bb332: {
        _325 = DropAccountant::push::<&str>(_307, const "else") -> [return: bb449, unwind: bb395];
    }

    bb333: {
        _328 = DropAccountant::push::<&str>(_307, const "body") -> [return: bb450, unwind: bb395];
    }

    bb334: {
        _332 = DropAccountant::build_droppy(_307, _308) -> [return: bb335, unwind: bb395];
    }

    bb335: {
        _331 = (_332.1: u32);
        _330 = (move _331, const 77_i32);
        switchInt((_330.0: u32)) -> [0: bb336, otherwise: bb338];
    }

    bb336: {
        switchInt((_330.1: i32)) -> [77: bb337, otherwise: bb338];
    }

    bb337: {
        drop(_332) -> [return: bb340, unwind: bb395];
    }

    bb338: {
        drop(_332) -> [return: bb339, unwind: bb395];
    }

    bb339: {
        _329 = DropAccountant::push::<&str>(_307, const "else") -> [return: bb451, unwind: bb395];
    }

    bb340: {
        _333 = DropAccountant::push::<&str>(_307, const "body") -> [return: bb452, unwind: bb395];
    }

    bb341: {
        _337 = DropAccountant::build_droppy(_307, _308) -> [return: bb342, unwind: bb395];
    }

    bb342: {
        _336 = (_337.1: u32);
        _335 = [move _336];
        switchInt(_335[0 of 1]) -> [0: bb343, otherwise: bb344];
    }

    bb343: {
        drop(_337) -> [return: bb346, unwind: bb395];
    }

    bb344: {
        drop(_337) -> [return: bb345, unwind: bb395];
    }

    bb345: {
        _334 = DropAccountant::push::<&str>(_307, const "else") -> [return: bb453, unwind: bb395];
    }

    bb346: {
        _338 = DropAccountant::push::<&str>(_307, const "body") -> [return: bb454, unwind: bb395];
    }

    bb347: {
        _341 = DropAccountant::build_droppy(_307, _308) -> [return: bb348, unwind: bb395];
    }

    bb348: {
        _340 = &(_341.1: u32);
        switchInt((*_340)) -> [0: bb349, otherwise: bb350];
    }

    bb349: {
        _342 = DropAccountant::push::<&str>(_307, const "body") -> [return: bb352, unwind: bb364];
    }

    bb350: {
        drop(_341) -> [return: bb351, unwind: bb395];
    }

    bb351: {
        _339 = DropAccountant::push::<&str>(_307, const "else") -> [return: bb455, unwind: bb395];
    }

    bb352: {
        drop(_341) -> [return: bb353, unwind: bb395];
    }

    bb353: {
        _345 = DropAccountant::build_droppy(_307, _308) -> [return: bb354, unwind: bb395];
    }

    bb354: {
        _344 = &mut (_345.1: u32);
        switchInt((*_344)) -> [0: bb355, otherwise: bb356];
    }

    bb355: {
        _346 = DropAccountant::push::<&str>(_307, const "body") -> [return: bb358, unwind: bb363];
    }

    bb356: {
        drop(_345) -> [return: bb357, unwind: bb395];
    }

    bb357: {
        _343 = DropAccountant::push::<&str>(_307, const "else") -> [return: bb456, unwind: bb395];
    }

    bb358: {
        drop(_345) -> [return: bb359, unwind: bb395];
    }

    bb359: {
        _348 = &_1;
        _347 = DropAccountant::print_table(move _348) -> [return: bb360, unwind: bb395];
    }

    bb360: {
        _350 = &_1;
        _351 = const "drop,else";
        _349 = DropAccountant::assert_all_equal_to(move _350, _351) -> [return: bb361, unwind: bb395];
    }

    bb361: {
        drop(_1) -> [return: bb362, unwind continue];
    }

    bb362: {
        return;
    }

    bb363 (cleanup): {
        drop(_345) -> [return: bb395, unwind terminate];
    }

    bb364 (cleanup): {
        drop(_341) -> [return: bb395, unwind terminate];
    }

    bb365 (cleanup): {
        drop(_318) -> [return: bb395, unwind terminate];
    }

    bb366 (cleanup): {
        drop(_314) -> [return: bb395, unwind terminate];
    }

    bb367 (cleanup): {
        drop(_303) -> [return: bb395, unwind terminate];
    }

    bb368 (cleanup): {
        drop(_299) -> [return: bb395, unwind terminate];
    }

    bb369 (cleanup): {
        drop(_276) -> [return: bb395, unwind terminate];
    }

    bb370 (cleanup): {
        drop(_272) -> [return: bb395, unwind terminate];
    }

    bb371 (cleanup): {
        drop(_255) -> [return: bb395, unwind terminate];
    }

    bb372 (cleanup): {
        drop(_249) -> [return: bb395, unwind terminate];
    }

    bb373 (cleanup): {
        drop(_216) -> [return: bb395, unwind terminate];
    }

    bb374 (cleanup): {
        drop(_210) -> [return: bb395, unwind terminate];
    }

    bb375 (cleanup): {
        drop(_195) -> [return: bb395, unwind terminate];
    }

    bb376 (cleanup): {
        drop(_190) -> [return: bb395, unwind terminate];
    }

    bb377 (cleanup): {
        drop(_162) -> [return: bb395, unwind terminate];
    }

    bb378 (cleanup): {
        drop(_157) -> [return: bb395, unwind terminate];
    }

    bb379 (cleanup): {
        drop(_135) -> [return: bb395, unwind terminate];
    }

    bb380 (cleanup): {
        drop(_132) -> [return: bb395, unwind terminate];
    }

    bb381 (cleanup): {
        drop(_109) -> [return: bb395, unwind terminate];
    }

    bb382 (cleanup): {
        drop(_105) -> [return: bb395, unwind terminate];
    }

    bb383 (cleanup): {
        drop(_94) -> [return: bb395, unwind terminate];
    }

    bb384 (cleanup): {
        drop(_91) -> [return: bb395, unwind terminate];
    }

    bb385 (cleanup): {
        drop(_75) -> [return: bb395, unwind terminate];
    }

    bb386 (cleanup): {
        drop(_71) -> [return: bb395, unwind terminate];
    }

    bb387 (cleanup): {
        drop(_56) -> [return: bb395, unwind terminate];
    }

    bb388 (cleanup): {
        drop(_54) -> [return: bb395, unwind terminate];
    }

    bb389 (cleanup): {
        drop(_38) -> [return: bb395, unwind terminate];
    }

    bb390 (cleanup): {
        drop(_36) -> [return: bb395, unwind terminate];
    }

    bb391 (cleanup): {
        drop(_28) -> [return: bb395, unwind terminate];
    }

    bb392 (cleanup): {
        drop(_26) -> [return: bb395, unwind terminate];
    }

    bb393 (cleanup): {
        drop(_13) -> [return: bb395, unwind terminate];
    }

    bb394 (cleanup): {
        drop(_11) -> [return: bb395, unwind terminate];
    }

    bb395 (cleanup): {
        drop(_1) -> [return: bb396, unwind terminate];
    }

    bb396 (cleanup): {
        resume;
    }

    bb397: {
        goto -> bb53;
    }

    bb398: {
        goto -> bb53;
    }

    bb399: {
        goto -> bb114;
    }

    bb400: {
        goto -> bb114;
    }

    bb401: {
        goto -> bb136;
    }

    bb402: {
        goto -> bb136;
    }

    bb403: {
        goto -> bb142;
    }

    bb404: {
        goto -> bb148;
    }

    bb405: {
        goto -> bb154;
    }

    bb406: {
        goto -> bb154;
    }

    bb407: {
        goto -> bb161;
    }

    bb408: {
        goto -> bb161;
    }

    bb409: {
        goto -> bb168;
    }

    bb410: {
        goto -> bb168;
    }

    bb411: {
        goto -> bb174;
    }

    bb412: {
        goto -> bb174;
    }

    bb413: {
        goto -> bb180;
    }

    bb414: {
        goto -> bb186;
    }

    bb415: {
        goto -> bb193;
    }

    bb416: {
        goto -> bb193;
    }

    bb417: {
        goto -> bb199;
    }

    bb418: {
        goto -> bb205;
    }

    bb419: {
        goto -> bb211;
    }

    bb420: {
        goto -> bb211;
    }

    bb421: {
        goto -> bb218;
    }

    bb422: {
        goto -> bb218;
    }

    bb423: {
        goto -> bb225;
    }

    bb424: {
        goto -> bb225;
    }

    bb425: {
        goto -> bb231;
    }

    bb426: {
        goto -> bb231;
    }

    bb427: {
        goto -> bb237;
    }

    bb428: {
        goto -> bb243;
    }

    bb429: {
        goto -> bb252;
    }

    bb430: {
        goto -> bb252;
    }

    bb431: {
        goto -> bb258;
    }

    bb432: {
        goto -> bb264;
    }

    bb433: {
        goto -> bb270;
    }

    bb434: {
        goto -> bb270;
    }

    bb435: {
        goto -> bb277;
    }

    bb436: {
        goto -> bb277;
    }

    bb437: {
        goto -> bb284;
    }

    bb438: {
        goto -> bb284;
    }

    bb439: {
        goto -> bb290;
    }

    bb440: {
        goto -> bb290;
    }

    bb441: {
        goto -> bb296;
    }

    bb442: {
        goto -> bb302;
    }

    bb443: {
        goto -> bb309;
    }

    bb444: {
        goto -> bb309;
    }

    bb445: {
        goto -> bb315;
    }

    bb446: {
        goto -> bb321;
    }

    bb447: {
        goto -> bb327;
    }

    bb448: {
        goto -> bb327;
    }

    bb449: {
        goto -> bb334;
    }

    bb450: {
        goto -> bb334;
    }

    bb451: {
        goto -> bb341;
    }

    bb452: {
        goto -> bb341;
    }

    bb453: {
        goto -> bb347;
    }

    bb454: {
        goto -> bb347;
    }

    bb455: {
        goto -> bb353;
    }

    bb456: {
        goto -> bb359;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const " --- mismatching cases ---\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const " --- matching cases ---\n"];
        _0 = &_1;
        return;
    }
}

fn DropAccountant(_1: Rc<RefCell<Vec<Vec<String>>>>) -> DropAccountant {
    let mut _0: DropAccountant;

    bb0: {
        _0 = DropAccountant(move _1);
        return;
    }
}

// MIR FOR CTFE
fn DropAccountant(_1: Rc<RefCell<Vec<Vec<String>>>>) -> DropAccountant {
    let mut _0: DropAccountant;

    bb0: {
        _0 = DropAccountant(move _1);
        return;
    }
}

fn Droppy(_1: DropAccountant, _2: T) -> Droppy<T> {
    let mut _0: Droppy<T>;

    bb0: {
        _0 = Droppy::<T>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Droppy(_1: DropAccountant, _2: T) -> Droppy<T> {
    let mut _0: Droppy<T>;

    bb0: {
        _0 = Droppy::<T>(move _1, move _2);
        return;
    }
}

fn DroppyEnum::Some(_1: DropAccountant, _2: T) -> DroppyEnum<T> {
    let mut _0: DroppyEnum<T>;

    bb0: {
        _0 = DroppyEnum::<T>::Some(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn DroppyEnum::Some(_1: DropAccountant, _2: T) -> DroppyEnum<T> {
    let mut _0: DroppyEnum<T>;

    bb0: {
        _0 = DroppyEnum::<T>::Some(move _1, move _2);
        return;
    }
}

fn DroppyEnum::None(_1: DropAccountant) -> DroppyEnum<T> {
    let mut _0: DroppyEnum<T>;

    bb0: {
        _0 = DroppyEnum::<T>::None(move _1);
        return;
    }
}

// MIR FOR CTFE
fn DroppyEnum::None(_1: DropAccountant) -> DroppyEnum<T> {
    let mut _0: DroppyEnum<T>;

    bb0: {
        _0 = DroppyEnum::<T>::None(move _1);
        return;
    }
}
