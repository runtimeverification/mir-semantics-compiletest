// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn example_let_else(_1: Option<String>) -> () {
    debug value => _1;                   // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:6:21: 6:26
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:6:44: 6:44
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:18: 8:31
    let mut _5: &[&str; 2];              // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:18: 8:31
    let _6: &[&str; 2];                  // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:18: 8:31
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:33: 8:38
    let mut _12: &std::option::Option<std::string::String>; // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:33: 8:38
    let _13: &std::option::Option<std::string::String>; // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:33: 8:38
    let _14: std::string::String;        // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:7:14: 7:19
    let mut _15: isize;                  // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:7:9: 7:20
    let _16: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _17: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _18: &[&str];                // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:14: 11:25
    let mut _19: &[&str; 2];             // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:14: 11:25
    let _20: &[&str; 2];                 // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:14: 11:25
    let mut _21: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _22: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _23: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _24: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _25: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:27: 11:32
    let mut _26: &std::string::String;   // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:27: 11:32
    let _27: &std::string::String;       // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:27: 11:32
    let mut _29: &[&str; 2];             // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:18: 8:31
    let mut _30: bool;                   // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:12:1: 12:2
    let mut _31: isize;                  // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:12:1: 12:2
    scope 1 {
        debug inner => _14;              // in scope 1 at ui/let-else/let-else-source-expr-nomove-pass.rs:7:14: 7:19
        let mut _28: &[&str; 2];         // in scope 1 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:14: 11:25
    }

    bb0: {
        _30 = const false;               // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:7:14: 7:19
        _30 = const true;                // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:7:14: 7:19
        _15 = discriminant(_1);          // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:7:23: 7:28
        switchInt(move _15) -> [1: bb4, otherwise: bb5]; // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:7:9: 7:20
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb2, unwind: bb14]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb14]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_1) -> bb9;                 // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:12:1: 12:2
    }

    bb4: {
        _30 = const false;               // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:7:14: 7:19
        _14 = move ((_1 as Some).0: std::string::String); // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:7:14: 7:19
        _28 = const _;                   // scope 1 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:14: 11:25
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-source-expr-nomove-pass.rs:11:14: 11:25
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(example_let_else, [], Some(promoted[0])) }
        _20 = _28;                       // scope 1 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:14: 11:25
        _19 = _20;                       // scope 1 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:14: 11:25
        _18 = move _19 as &[&str] (Pointer(Unsize)); // scope 1 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:14: 11:25
        _27 = &_14;                      // scope 1 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:27: 11:32
        _26 = _27;                       // scope 1 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:27: 11:32
        _25 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _26) -> [return: bb6, unwind: bb10]; // scope 1 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:27: 11:32
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-source-expr-nomove-pass.rs:11:27: 11:32
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb5: {
        _29 = const _;                   // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:18: 8:31
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-source-expr-nomove-pass.rs:8:18: 8:31
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(example_let_else, [], Some(promoted[1])) }
        _6 = _29;                        // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:18: 8:31
        _5 = _6;                         // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:18: 8:31
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:18: 8:31
        _13 = &_1;                       // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:33: 8:38
        _12 = _13;                       // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:33: 8:38
        _11 = core::fmt::ArgumentV1::<'_>::new_debug::<Option<String>>(move _12) -> [return: bb1, unwind: bb14]; // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:33: 8:38
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-source-expr-nomove-pass.rs:8:33: 8:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Option<String>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Option<String>>}, val: Value(<ZST>) }
    }

    bb6: {
        _24 = [move _25];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _23 = &_24;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _22 = _23;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = move _22 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _17 = Arguments::<'_>::new_v1(move _18, move _21) -> [return: bb7, unwind: bb10]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = _print(move _17) -> [return: bb8, unwind: bb10]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_14) -> [return: bb9, unwind: bb14]; // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:12:1: 12:2
    }

    bb9: {
        return;                          // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:12:2: 12:2
    }

    bb10 (cleanup): {
        drop(_14) -> bb14;               // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:12:1: 12:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:6:1: 12:2
    }

    bb12 (cleanup): {
        switchInt(_30) -> [0: bb11, otherwise: bb13]; // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:12:1: 12:2
    }

    bb13 (cleanup): {
        drop(((_1 as Some).0: std::string::String)) -> bb11; // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:12:1: 12:2
    }

    bb14 (cleanup): {
        _31 = discriminant(_1);          // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:12:1: 12:2
        switchInt(move _31) -> [1: bb12, otherwise: bb11]; // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:12:1: 12:2
    }
}

promoted[0] in example_let_else: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:14: 11:25
    let mut _1: [&str; 2];               // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:14: 11:25

    bb0: {
        _1 = [const "inner: ", const "\n"]; // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:14: 11:25
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-source-expr-nomove-pass.rs:11:14: 11:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-source-expr-nomove-pass.rs:11:14: 11:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:14: 11:25
        return;                          // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:11:14: 11:25
    }
}

promoted[1] in example_let_else: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:18: 8:31
    let mut _1: [&str; 2];               // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:18: 8:31

    bb0: {
        _1 = [const "other: ", const "\n"]; // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:18: 8:31
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-source-expr-nomove-pass.rs:8:18: 8:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-source-expr-nomove-pass.rs:8:18: 8:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:18: 8:31
        return;                          // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:8:18: 8:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:14:11: 14:11
    let _1: ();                          // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:15:5: 15:41
    let mut _2: std::option::Option<std::string::String>; // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:15:22: 15:40
    let mut _3: std::string::String;     // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:15:27: 15:39
    let mut _4: &str;                    // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:15:27: 15:39
    let _5: &str;                        // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:15:27: 15:32
    let _6: ();                          // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:16:5: 16:27
    let mut _7: std::option::Option<std::string::String>; // in scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:16:22: 16:26

    bb0: {
        _5 = const "foo";                // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:15:27: 15:32
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-source-expr-nomove-pass.rs:15:27: 15:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:15:27: 15:39
        _3 = <&str as Into<String>>::into(move _4) -> bb1; // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:15:27: 15:39
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-source-expr-nomove-pass.rs:15:33: 15:37
                                         // + literal: Const { ty: fn(&str) -> String {<&str as Into<String>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Option::<String>::Some(move _3); // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:15:22: 15:40
        _1 = example_let_else(move _2) -> bb2; // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:15:5: 15:41
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-source-expr-nomove-pass.rs:15:5: 15:21
                                         // + literal: Const { ty: fn(Option<String>) {example_let_else}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Option::<String>::None;     // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:16:22: 16:26
        _6 = example_let_else(move _7) -> bb3; // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:16:5: 16:27
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-source-expr-nomove-pass.rs:16:5: 16:21
                                         // + literal: Const { ty: fn(Option<String>) {example_let_else}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/let-else/let-else-source-expr-nomove-pass.rs:17:2: 17:2
    }
}
