// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn example_let_else(_1: Option<String>) -> () {
    debug value => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::option::Option<std::string::String>;
    let _10: std::string::String;
    let mut _11: isize;
    let _12: ();
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &std::string::String;
    let mut _20: &[&str; 2];
    let mut _22: bool;
    let mut _23: isize;
    scope 1 {
        debug inner => _10;
        let mut _21: &[&str; 2];
    }

    bb0: {
        _22 = const false;
        _22 = const true;
        _11 = discriminant(_1);
        switchInt(move _11) -> [1: bb4, otherwise: bb5];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        drop(_1) -> [return: bb9, unwind continue];
    }

    bb4: {
        _22 = const false;
        _10 = move ((_1 as Some).0: std::string::String);
        _21 = const _;
        _14 = _21 as &[&str] (Pointer(Unsize));
        _19 = &_10;
        _18 = core::fmt::rt::Argument::<'_>::new_display::<String>(_19) -> [return: bb6, unwind: bb10];
    }

    bb5: {
        _20 = const _;
        _4 = _20 as &[&str] (Pointer(Unsize));
        _9 = &_1;
        _8 = core::fmt::rt::Argument::<'_>::new_debug::<Option<String>>(_9) -> [return: bb1, unwind: bb14];
    }

    bb6: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _12 = _print(move _13) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        drop(_10) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_10) -> [return: bb14, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        switchInt(_22) -> [0: bb11, otherwise: bb13];
    }

    bb13 (cleanup): {
        drop(((_1 as Some).0: std::string::String)) -> [return: bb11, unwind terminate];
    }

    bb14 (cleanup): {
        _23 = discriminant(_1);
        switchInt(move _23) -> [1: bb12, otherwise: bb11];
    }
}

promoted[0] in example_let_else: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "other: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in example_let_else: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "inner: ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::option::Option<std::string::String>;
    let mut _3: std::string::String;
    let _4: &str;
    let _5: ();
    let mut _6: std::option::Option<std::string::String>;

    bb0: {
        _4 = const "foo";
        _3 = <&str as Into<String>>::into(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<String>::Some(move _3);
        _1 = example_let_else(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Option::<String>::None;
        _5 = example_let_else(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}
