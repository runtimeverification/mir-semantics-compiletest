// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static TRACKER: AtomicU8 = {
    let mut _0: std::sync::atomic::AtomicU8;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicU8::new(const 0_u8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/let-else/let-else-temporary-lifetime.rs:10:10: 10:17>::default() -> Droppy {
    let mut _0: Droppy;
    let mut _1: u32;

    bb0: {
        _1 = <u32 as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Droppy { inner: move _1 };
        return;
    }
}

fn <impl at ui/let-else/let-else-temporary-lifetime.rs:15:1: 15:21>::drop(_1: &mut Droppy) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let _3: &std::sync::atomic::AtomicU8;
    let mut _4: std::sync::atomic::Ordering;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[&str; 1];

    bb0: {
        _3 = const {alloc1: &AtomicU8};
        _4 = Release;
        _2 = AtomicU8::store(_3, const 1_u8, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = const _;
        _7 = _8 as &[&str] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_const(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = _print(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

alloc1 (static: TRACKER, size: 1, align: 1) {
    00                                              â”‚ .
}

promoted[0] in <impl at ui/let-else/let-else-temporary-lifetime.rs:15:1: 15:21>::drop: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "I've been dropped\n"];
        _0 = &_1;
        return;
    }
}

fn foo(_1: &str) -> Result<impl std::fmt::Display + '_, ()> {
    debug x => _1;
    let mut _0: std::result::Result<impl std::fmt::Display + '_, ()>;

    bb0: {
        _0 = Result::<&str, ()>::Ok(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let mut _2: &u8;
    let _3: u8;
    let _4: &std::sync::atomic::AtomicU8;
    let mut _5: std::sync::atomic::Ordering;
    let _6: &u8;
    let _7: &u8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u8;
    let mut _11: u8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: Droppy;
    let mut _16: (&u8, &u8);
    let mut _17: &u8;
    let _18: u8;
    let _19: &std::sync::atomic::AtomicU8;
    let mut _20: std::sync::atomic::Ordering;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: u8;
    let mut _26: u8;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let _30: ();
    let mut _31: std::fmt::Arguments<'_>;
    let mut _32: &[&str];
    let mut _34: !;
    let mut _35: &mut u32;
    let mut _36: main::Foo<'_>;
    let mut _37: &mut u32;
    let mut _39: !;
    let mut _41: std::result::Result<impl std::fmt::Display + '_, ()>;
    let mut _42: &str;
    let _43: &str;
    let _44: &std::string::String;
    let mut _45: isize;
    let mut _46: (&std::string::String, &std::string::String);
    let mut _47: &std::string::String;
    let _48: std::string::String;
    let mut _49: &impl std::fmt::Display + '_;
    let mut _50: &std::string::String;
    let mut _53: bool;
    let mut _54: bool;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: !;
    let mut _60: &i32;
    let mut _61: &std::rc::Rc<i32>;
    let _62: std::rc::Rc<i32>;
    let mut _63: &std::rc::Rc<i32>;
    let _64: i32;
    let mut _65: std::result::Result<i32, std::rc::Rc<i32>>;
    let mut _66: std::rc::Rc<i32>;
    let mut _69: bool;
    let mut _70: i32;
    let mut _71: std::result::Result<i32, std::rc::Rc<i32>>;
    let mut _72: std::rc::Rc<i32>;
    let mut _73: isize;
    let mut _75: std::rc::Rc<i32>;
    let mut _76: !;
    let mut _77: &i32;
    let mut _78: &std::rc::Rc<i32>;
    let _79: std::rc::Rc<i32>;
    let mut _80: &std::rc::Rc<i32>;
    let _81: ();
    let _83: i32;
    let mut _84: std::result::Result<i32, std::rc::Rc<i32>>;
    let mut _85: std::rc::Rc<i32>;
    let mut _86: &i32;
    let mut _87: &std::rc::Rc<i32>;
    let _88: std::rc::Rc<i32>;
    let mut _89: &std::rc::Rc<i32>;
    let _90: !;
    let mut _93: &u8;
    let mut _94: &mut u32;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        let _21: &u8;
        let _22: &u8;
        let mut _33: u32;
        let _38: std::string::String;
        let _58: std::rc::Rc<i32>;
        let mut _67: std::rc::Rc<i32>;
        let _82: std::rc::Rc<i32>;
        let mut _91: &[&str; 1];
        let mut _92: &u8;
        scope 4 {
            debug left_val => _21;
            debug right_val => _22;
            let _27: core::panicking::AssertKind;
            scope 5 {
                debug kind => _27;
            }
        }
        scope 6 {
            debug foo => _33;
            scope 7 {
            }
        }
        scope 8 {
            debug x => _38;
            let _40: impl std::fmt::Display + '_;
            scope 9 {
                debug s => _40;
                let _51: &std::string::String;
                let _52: &std::string::String;
                scope 10 {
                    debug left_val => _51;
                    debug right_val => _52;
                    let _55: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _55;
                    }
                }
            }
        }
        scope 12 {
            debug rc => _58;
            scope 13 {
            }
        }
        scope 14 {
            debug rc => _67;
            let mut _68: i32;
            scope 15 {
                debug i => _68;
                scope 16 {
                    debug v => _74;
                    let _74: i32;
                }
                scope 17 {
                }
            }
        }
        scope 18 {
            debug rc => _82;
            scope 19 {
            }
        }
    }

    bb0: {
        _97 = const false;
        _96 = const false;
        _95 = const false;
        _4 = const {alloc1: &AtomicU8};
        _5 = Acquire;
        _3 = AtomicU8::load(_4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _93 = const _;
        _1 = (move _2, _93);
        _6 = (_1.0: &u8);
        _7 = (_1.1: &u8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u8, u8>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _15 = <Droppy as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt((_15.0: u32)) -> [0: bb5, otherwise: bb6];
    }

    bb5: {
        drop(_15) -> [return: bb7, unwind continue];
    }

    bb6: {
        drop(_15) -> [return: bb62, unwind continue];
    }

    bb7: {
        _19 = const {alloc1: &AtomicU8};
        _20 = Acquire;
        _18 = AtomicU8::load(_19, move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        _17 = &_18;
        _92 = const _;
        _16 = (move _17, _92);
        _21 = (_16.0: &u8);
        _22 = (_16.1: &u8);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<u8, u8>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb10: {
        _91 = const _;
        _32 = _91 as &[&str] (Pointer(Unsize));
        _31 = Arguments::<'_>::new_const(move _32) -> [return: bb11, unwind continue];
    }

    bb11: {
        _30 = _print(move _31) -> [return: bb12, unwind continue];
    }

    bb12: {
        _33 = const 0_u32;
        _37 = &mut _33;
        _36 = Foo::<'_>(_37);
        _94 = deref_copy (_36.0: &mut u32);
        switchInt((*_94)) -> [0: bb13, otherwise: bb14];
    }

    bb13: {
        drop(_36) -> [return: bb16, unwind continue];
    }

    bb14: {
        drop(_36) -> [return: bb15, unwind continue];
    }

    bb15: {
        _35 = &mut _33;
        (*_35) = const 1_u32;
        _34 = core::panicking::panic(const "not yet implemented") -> unwind continue;
    }

    bb16: {
        _38 = <String as From<&str>>::from(const "Hey") -> [return: bb17, unwind continue];
    }

    bb17: {
        _44 = &_38;
        _43 = <String as Deref>::deref(_44) -> [return: bb18, unwind: bb68];
    }

    bb18: {
        _42 = _43;
        _41 = foo(move _42) -> [return: bb19, unwind: bb68];
    }

    bb19: {
        _45 = discriminant(_41);
        switchInt(move _45) -> [0: bb20, otherwise: bb21];
    }

    bb20: {
        _40 = move ((_41 as Ok).0: impl std::fmt::Display + '_);
        _49 = &_40;
        _48 = <impl std::fmt::Display + '_ as ToString>::to_string(move _49) -> [return: bb22, unwind: bb68];
    }

    bb21: {
        _39 = begin_panic::<&str>(const "explicit panic") -> bb68;
    }

    bb22: {
        _47 = &_48;
        _50 = &_38;
        _46 = (move _47, move _50);
        _51 = (_46.0: &std::string::String);
        _52 = (_46.1: &std::string::String);
        _54 = <String as PartialEq>::eq(_51, _52) -> [return: bb23, unwind: bb67];
    }

    bb23: {
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<String, String>(move _55, _51, _52, move _57) -> bb67;
    }

    bb25: {
        drop(_48) -> [return: bb26, unwind: bb68];
    }

    bb26: {
        drop(_38) -> [return: bb27, unwind continue];
    }

    bb27: {
        _97 = const true;
        _58 = Rc::<i32>::new(const 0_i32) -> [return: bb28, unwind continue];
    }

    bb28: {
        _63 = &_58;
        _62 = <Rc<i32> as Clone>::clone(move _63) -> [return: bb29, unwind: bb75];
    }

    bb29: {
        _61 = &_62;
        _60 = <Rc<i32> as Deref>::deref(move _61) -> [return: bb30, unwind: bb66];
    }

    bb30: {
        switchInt((*_60)) -> [0: bb31, otherwise: bb32];
    }

    bb31: {
        drop(_62) -> [return: bb34, unwind: bb75];
    }

    bb32: {
        drop(_62) -> [return: bb33, unwind: bb75];
    }

    bb33: {
        _59 = core::panicking::panic(const "internal error: entered unreachable code") -> bb75;
    }

    bb34: {
        _97 = const false;
        _66 = move _58;
        _65 = Rc::<i32>::try_unwrap(move _66) -> [return: bb35, unwind: bb75];
    }

    bb35: {
        _64 = Result::<i32, Rc<i32>>::unwrap(move _65) -> [return: bb36, unwind: bb75];
    }

    bb36: {
        _97 = const false;
        _96 = const true;
        _67 = Rc::<i32>::new(const 0_i32) -> [return: bb37, unwind continue];
    }

    bb37: {
        _68 = const 0_i32;
        goto -> bb38;
    }

    bb38: {
        _70 = _68;
        _69 = Gt(move _70, const 3_i32);
        switchInt(move _69) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        drop(_67) -> [return: bb51, unwind continue];
    }

    bb40: {
        _80 = &_67;
        _79 = <Rc<i32> as Clone>::clone(move _80) -> [return: bb46, unwind: bb73];
    }

    bb41: {
        _73 = discriminant(_71);
        switchInt(move _73) -> [0: bb42, otherwise: bb44];
    }

    bb42: {
        _74 = ((_71 as Ok).0: i32);
        _75 = Rc::<i32>::new(_74) -> [return: bb43, unwind: bb65];
    }

    bb43: {
        _96 = const true;
        _67 = move _75;
        drop(_71) -> [return: bb45, unwind: bb73];
    }

    bb44: {
        _76 = begin_panic::<&str>(const "explicit panic") -> bb65;
    }

    bb45: {
        _68 = Add(_68, const 1_i32);
        goto -> bb38;
    }

    bb46: {
        _78 = &_79;
        _77 = <Rc<i32> as Deref>::deref(move _78) -> [return: bb47, unwind: bb64];
    }

    bb47: {
        switchInt((*_77)) -> [1: bb48, otherwise: bb49];
    }

    bb48: {
        drop(_79) -> [return: bb38, unwind: bb73];
    }

    bb49: {
        drop(_79) -> [return: bb50, unwind: bb73];
    }

    bb50: {
        _96 = const false;
        _72 = move _67;
        _71 = Rc::<i32>::try_unwrap(move _72) -> [return: bb41, unwind: bb73];
    }

    bb51: {
        _96 = const false;
        _81 = must_pass() -> [return: bb52, unwind continue];
    }

    bb52: {
        _95 = const true;
        _82 = Rc::<i32>::new(const 0_i32) -> [return: bb53, unwind continue];
    }

    bb53: {
        _89 = &_82;
        _88 = <Rc<i32> as Clone>::clone(move _89) -> [return: bb56, unwind: bb71];
    }

    bb54: {
        _83 = Result::<i32, Rc<i32>>::unwrap(move _84) -> [return: bb55, unwind: bb71];
    }

    bb55: {
        _95 = const false;
        goto -> bb62;
    }

    bb56: {
        _87 = &_88;
        _86 = <Rc<i32> as Deref>::deref(move _87) -> [return: bb57, unwind: bb63];
    }

    bb57: {
        switchInt((*_86)) -> [1: bb58, otherwise: bb59];
    }

    bb58: {
        drop(_88) -> [return: bb61, unwind: bb71];
    }

    bb59: {
        drop(_88) -> [return: bb60, unwind: bb71];
    }

    bb60: {
        _95 = const false;
        _85 = move _82;
        _84 = Rc::<i32>::try_unwrap(move _85) -> [return: bb54, unwind: bb71];
    }

    bb61: {
        _90 = core::panicking::panic(const "internal error: entered unreachable code") -> bb71;
    }

    bb62: {
        return;
    }

    bb63 (cleanup): {
        drop(_88) -> [return: bb71, unwind terminate];
    }

    bb64 (cleanup): {
        drop(_79) -> [return: bb73, unwind terminate];
    }

    bb65 (cleanup): {
        drop(_71) -> [return: bb73, unwind terminate];
    }

    bb66 (cleanup): {
        drop(_62) -> [return: bb75, unwind terminate];
    }

    bb67 (cleanup): {
        drop(_48) -> [return: bb68, unwind terminate];
    }

    bb68 (cleanup): {
        drop(_38) -> [return: bb69, unwind terminate];
    }

    bb69 (cleanup): {
        resume;
    }

    bb70 (cleanup): {
        drop(_82) -> [return: bb69, unwind terminate];
    }

    bb71 (cleanup): {
        switchInt(_95) -> [0: bb69, otherwise: bb70];
    }

    bb72 (cleanup): {
        drop(_67) -> [return: bb69, unwind terminate];
    }

    bb73 (cleanup): {
        switchInt(_96) -> [0: bb69, otherwise: bb72];
    }

    bb74 (cleanup): {
        drop(_58) -> [return: bb69, unwind terminate];
    }

    bb75 (cleanup): {
        switchInt(_97) -> [0: bb69, otherwise: bb74];
    }
}

alloc1 (static: TRACKER, size: 1, align: 1) {
    00                                              â”‚ .
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Should have dropped ðŸ‘†\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

fn main::<impl at ui/let-else/let-else-temporary-lifetime.rs:36:9: 36:34>::drop(_1: &mut Foo<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: &mut u32;

    bb0: {
        _2 = deref_copy ((*_1).0: &mut u32);
        (*_2) = const 0_u32;
        return;
    }
}

fn must_pass() -> () {
    let mut _0: ();
    let _1: std::rc::Rc<()>;
    let _2: ();
    let mut _3: std::result::Result<(), std::rc::Rc<()>>;
    let mut _4: std::rc::Rc<()>;
    let mut _5: &std::option::Option<std::rc::Rc<()>>;
    let _6: std::option::Option<std::rc::Rc<()>>;
    let mut _7: std::rc::Rc<()>;
    let _8: &std::rc::Rc<()>;
    let mut _9: isize;
    let _10: !;
    let mut _11: bool;
    scope 1 {
        debug rc => _1;
        scope 2 {
        }
    }

    bb0: {
        _11 = const false;
        _11 = const true;
        _1 = Rc::<()>::new(const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &_1;
        _7 = <Rc<()> as Clone>::clone(_8) -> [return: bb4, unwind: bb11];
    }

    bb2: {
        _2 = Result::<(), Rc<()>>::unwrap(move _3) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _11 = const false;
        return;
    }

    bb4: {
        _6 = Option::<Rc<()>>::Some(move _7);
        _5 = &_6;
        _9 = discriminant((*_5));
        switchInt(move _9) -> [0: bb5, otherwise: bb6];
    }

    bb5: {
        _10 = core::panicking::panic(const "internal error: entered unreachable code") -> bb8;
    }

    bb6: {
        drop(_6) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _11 = const false;
        _4 = move _1;
        _3 = Rc::<()>::try_unwrap(move _4) -> [return: bb2, unwind: bb11];
    }

    bb8 (cleanup): {
        drop(_6) -> [return: bb11, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb11 (cleanup): {
        switchInt(_11) -> [0: bb9, otherwise: bb10];
    }
}

fn Foo(_1: &mut u32) -> Foo<'_> {
    let mut _0: main::Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: &mut u32) -> Foo<'_> {
    let mut _0: main::Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}
