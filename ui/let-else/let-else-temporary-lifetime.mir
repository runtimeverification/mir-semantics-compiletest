// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static TRACKER: AtomicU8 = {
    let mut _0: std::sync::atomic::AtomicU8; // return place in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:8:17: 8:25

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:8:28: 8:44
        _0 = AtomicU8::new(const 0_u8) -> bb1; // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:8:28: 8:44
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:8:28: 8:41
                                         // + literal: Const { ty: fn(u8) -> AtomicU8 {AtomicU8::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:8:1: 8:45
    }
}

fn <impl at ui/let-else/let-else-temporary-lifetime.rs:10:10: 10:17>::default() -> Droppy {
    let mut _0: Droppy;                  // return place in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:10:10: 10:17
    let mut _1: u32;                     // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:12:5: 12:15

    bb0: {
        _1 = <u32 as Default>::default() -> bb1; // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:12:5: 12:15
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:12:5: 12:15
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Droppy { inner: move _1 };  // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:10:10: 10:17
        return;                          // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:10:17: 10:17
    }
}

fn <impl at ui/let-else/let-else-temporary-lifetime.rs:15:1: 15:21>::drop(_1: &mut Droppy) -> () {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:16:13: 16:22
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:16:24: 16:24
    let _2: ();                          // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:17:9: 17:44
    let mut _3: &std::sync::atomic::AtomicU8; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:17:9: 17:44
    let _4: &std::sync::atomic::AtomicU8; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:17:9: 17:16
    let mut _5: std::sync::atomic::Ordering; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:17:26: 17:43
    let _6: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _7: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[&str];                 // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:18:18: 18:37
    let mut _9: &[&str; 1];              // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:18:18: 18:37
    let _10: &[&str; 1];                 // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:18:18: 18:37
    let mut _11: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _13: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: &[&str; 1];             // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:18:18: 18:37

    bb0: {
        _4 = const {alloc1: &AtomicU8};  // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:17:9: 17:16
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:17:9: 17:16
                                         // + literal: Const { ty: &AtomicU8, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:17:9: 17:44
        _5 = const Release;              // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:17:26: 17:43
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:17:26: 17:43
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x01)) }
        _2 = AtomicU8::store(move _3, const 1_u8, move _5) -> bb1; // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:17:9: 17:44
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:17:17: 17:22
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicU8, u8, std::sync::atomic::Ordering) {AtomicU8::store}, val: Value(<ZST>) }
    }

    bb1: {
        _15 = const _;                   // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:18:18: 18:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:18:18: 18:37
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<Droppy as Drop>::drop, [], Some(promoted[1])) }
        _10 = _15;                       // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:18:18: 18:37
        _9 = _10;                        // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:18:18: 18:37
        _8 = move _9 as &[&str] (Pointer(Unsize)); // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:18:18: 18:37
        _14 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(<Droppy as Drop>::drop, [], Some(promoted[0])) }
        _13 = _14;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = _13;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = move _12 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = Arguments::<'_>::new_v1(move _8, move _11) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = _print(move _7) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:19:6: 19:6
    }
}

alloc1 (static: TRACKER, size: 1, align: 1) {
    00                                              â”‚ .
}

promoted[0] in <impl at ui/let-else/let-else-temporary-lifetime.rs:15:1: 15:21>::drop: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in <impl at ui/let-else/let-else-temporary-lifetime.rs:15:1: 15:21>::drop: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:18:18: 18:37
    let mut _1: [&str; 1];               // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:18:18: 18:37

    bb0: {
        _1 = [const "I've been dropped\n"]; // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:18:18: 18:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:18:18: 18:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:18:18: 18:37
        return;                          // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:18:18: 18:37
    }
}

fn foo(_1: &str) -> Result<impl std::fmt::Display + '_, ()> {
    debug x => _1;                       // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:22:12: 22:13
    let mut _0: std::result::Result<impl std::fmt::Display + '_, ()>; // return place in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:22:27: 22:56
    let mut _2: &str;                    // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:23:8: 23:9

    bb0: {
        _2 = _1;                         // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:23:8: 23:9
        _0 = Result::<&str, ()>::Ok(move _2); // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:23:5: 23:10
        return;                          // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:24:2: 24:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:26:11: 26:11
    let mut _1: (&u8, &u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: u8;                          // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:27:16: 27:47
    let mut _4: &std::sync::atomic::AtomicU8; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:27:16: 27:47
    let _5: &std::sync::atomic::AtomicU8; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:27:16: 27:23
    let mut _6: std::sync::atomic::Ordering; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:27:29: 27:46
    let mut _7: &u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _8: &u8;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &u8;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: Droppy;                 // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:28:13: 28:30
    let mut _23: (&u8, &u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _24: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _25: u8;                         // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:29:16: 29:47
    let mut _26: &std::sync::atomic::AtomicU8; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:29:16: 29:47
    let _27: &std::sync::atomic::AtomicU8; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:29:16: 29:23
    let mut _28: std::sync::atomic::Ordering; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:29:29: 29:46
    let mut _29: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _33: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _34: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _35: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _37: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _38: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _39: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _40: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _41: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _42: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _44: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _45: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _46: &[&str];                // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:30:14: 30:37
    let mut _47: &[&str; 1];             // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:30:14: 30:37
    let _48: &[&str; 1];                 // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:30:14: 30:37
    let mut _49: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _50: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _51: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _53: &mut u32;               // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:43:14: 43:22
    let mut _54: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
    let mut _55: main::Foo<'_>;          // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:42:22: 42:35
    let mut _56: &mut u32;               // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:42:26: 42:34
    let mut _57: &mut u32;               // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:42:26: 42:34
    let mut _59: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _61: std::result::Result<impl std::fmt::Display + '_, ()>; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:50:21: 50:28
    let mut _62: &str;                   // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:50:25: 50:27
    let _63: &str;                       // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:50:25: 50:27
    let mut _64: &std::string::String;   // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:50:25: 50:27
    let _65: &std::string::String;       // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:50:25: 50:27
    let mut _66: isize;                  // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:50:13: 50:18
    let mut _67: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _68: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _69: std::string::String;        // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:51:20: 51:33
    let mut _70: &impl std::fmt::Display + '_; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:51:20: 51:33
    let mut _71: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _74: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _75: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _76: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _77: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _79: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _80: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _81: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _82: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _83: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _84: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _85: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _87: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
    let mut _88: &i32;                   // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:56:17: 56:28
    let mut _89: &std::rc::Rc<i32>;      // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:56:18: 56:28
    let _90: std::rc::Rc<i32>;           // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:56:18: 56:28
    let mut _91: &std::rc::Rc<i32>;      // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:56:18: 56:28
    let _92: i32;                        // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:57:9: 57:36
    let mut _93: std::result::Result<i32, std::rc::Rc<i32>>; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:57:9: 57:27
    let mut _94: std::rc::Rc<i32>;       // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:57:24: 57:26
    let mut _97: bool;                   // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:63:16: 63:21
    let mut _98: i32;                    // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:63:16: 63:17
    let mut _99: std::result::Result<i32, std::rc::Rc<i32>>; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:67:32: 67:50
    let mut _100: std::rc::Rc<i32>;      // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:67:47: 67:49
    let mut _101: isize;                 // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:67:24: 67:29
    let mut _103: std::rc::Rc<i32>;      // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:68:26: 68:36
    let mut _104: i32;                   // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:68:34: 68:35
    let mut _105: !;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _106: (i32, bool);           // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:72:17: 72:23
    let mut _107: &i32;                  // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:66:21: 66:32
    let mut _108: &std::rc::Rc<i32>;     // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:66:22: 66:32
    let _109: std::rc::Rc<i32>;          // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:66:22: 66:32
    let mut _110: &std::rc::Rc<i32>;     // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:66:22: 66:32
    let _111: ();                        // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:86:9: 86:20
    let _113: i32;                       // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:94:13: 94:40
    let mut _114: std::result::Result<i32, std::rc::Rc<i32>>; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:94:13: 94:31
    let mut _115: std::rc::Rc<i32>;      // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:94:28: 94:30
    let mut _116: &i32;                  // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:93:17: 93:28
    let mut _117: &std::rc::Rc<i32>;     // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:93:18: 93:28
    let _118: std::rc::Rc<i32>;          // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:93:18: 93:28
    let mut _119: &std::rc::Rc<i32>;     // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:93:18: 93:28
    let _120: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
    let mut _124: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _125: &mut u32;              // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:42:22: 42:35
    let mut _126: bool;                  // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:98:5: 98:6
    let mut _127: bool;                  // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:76:5: 76:6
    let mut _128: bool;                  // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:58:5: 58:6
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        let _30: &u8;                    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _31: &u8;                    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _52: u32;                // in scope 3 at ui/let-else/let-else-temporary-lifetime.rs:41:13: 41:20
        let _58: std::string::String;    // in scope 3 at ui/let-else/let-else-temporary-lifetime.rs:48:13: 48:14
        let _86: std::rc::Rc<i32>;       // in scope 3 at ui/let-else/let-else-temporary-lifetime.rs:55:13: 55:15
        let mut _95: std::rc::Rc<i32>;   // in scope 3 at ui/let-else/let-else-temporary-lifetime.rs:60:13: 60:19
        let _112: std::rc::Rc<i32>;      // in scope 3 at ui/let-else/let-else-temporary-lifetime.rs:92:13: 92:15
        let mut _121: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        let mut _122: &[&str; 1];        // in scope 3 at ui/let-else/let-else-temporary-lifetime.rs:30:14: 30:37
        let mut _123: &u8;               // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 4 {
            debug left_val => _30;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _31;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _36: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _36;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug foo => _52;            // in scope 6 at ui/let-else/let-else-temporary-lifetime.rs:41:13: 41:20
            scope 7 {
            }
        }
        scope 8 {
            debug x => _58;              // in scope 8 at ui/let-else/let-else-temporary-lifetime.rs:48:13: 48:14
            let _60: impl std::fmt::Display + '_; // in scope 8 at ui/let-else/let-else-temporary-lifetime.rs:50:16: 50:17
            scope 9 {
                debug s => _60;          // in scope 9 at ui/let-else/let-else-temporary-lifetime.rs:50:16: 50:17
                let _72: &std::string::String; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _73: &std::string::String; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                scope 10 {
                    debug left_val => _72; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _73; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _78: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 11 {
                        debug kind => _78; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
        scope 12 {
            debug rc => _86;             // in scope 12 at ui/let-else/let-else-temporary-lifetime.rs:55:13: 55:15
            scope 13 {
            }
        }
        scope 14 {
            debug rc => _95;             // in scope 14 at ui/let-else/let-else-temporary-lifetime.rs:60:13: 60:19
            let mut _96: i32;            // in scope 14 at ui/let-else/let-else-temporary-lifetime.rs:61:13: 61:18
            scope 15 {
                debug i => _96;          // in scope 15 at ui/let-else/let-else-temporary-lifetime.rs:61:13: 61:18
                scope 16 {
                    debug v => _102;     // in scope 16 at ui/let-else/let-else-temporary-lifetime.rs:67:27: 67:28
                    let _102: i32;       // in scope 16 at ui/let-else/let-else-temporary-lifetime.rs:67:27: 67:28
                }
                scope 17 {
                }
            }
        }
        scope 18 {
            debug rc => _112;            // in scope 18 at ui/let-else/let-else-temporary-lifetime.rs:92:13: 92:15
            scope 19 {
            }
        }
    }

    bb0: {
        _126 = const false;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:9: 48:10
        _128 = const false;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:9: 48:10
        _127 = const false;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:9: 48:10
        _5 = const {alloc1: &AtomicU8};  // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:27:16: 27:23
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:27:16: 27:23
                                         // + literal: Const { ty: &AtomicU8, val: Value(Scalar(alloc1)) }
        _4 = _5;                         // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:27:16: 27:47
        _6 = const Acquire;              // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:27:29: 27:46
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:27:29: 27:46
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x02)) }
        _3 = AtomicU8::load(move _4, move _6) -> bb1; // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:27:16: 27:47
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:27:24: 27:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicU8, std::sync::atomic::Ordering) -> u8 {AtomicU8::load}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _124 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[3])) }
        _7 = _124;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _7);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_1.0: &u8);                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_1.1: &u8);                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 0_u8;                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<u8, u8>(move _16, move _17, move _19, move _21); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb3: {
        _22 = <Droppy as Default>::default() -> bb4; // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:28:13: 28:30
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:28:13: 28:28
                                         // + literal: Const { ty: fn() -> Droppy {<Droppy as Default>::default}, val: Value(<ZST>) }
    }

    bb4: {
        switchInt((_22.0: u32)) -> [0: bb5, otherwise: bb6]; // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:28:9: 28:10
    }

    bb5: {
        drop(_22) -> bb7;                // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:28:52: 28:53
    }

    bb6: {
        drop(_22) -> bb63;               // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:28:52: 28:53
    }

    bb7: {
        _27 = const {alloc1: &AtomicU8}; // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:29:16: 29:23
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:29:16: 29:23
                                         // + literal: Const { ty: &AtomicU8, val: Value(Scalar(alloc1)) }
        _26 = _27;                       // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:29:16: 29:47
        _28 = const Acquire;             // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:29:29: 29:46
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:29:29: 29:46
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x02)) }
        _25 = AtomicU8::load(move _26, move _28) -> bb8; // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:29:16: 29:47
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:29:24: 29:28
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicU8, std::sync::atomic::Ordering) -> u8 {AtomicU8::load}, val: Value(<ZST>) }
    }

    bb8: {
        _24 = &_25;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _123 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[2])) }
        _29 = _123;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _23 = (move _24, move _29);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _30 = (_23.0: &u8);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _31 = (_23.1: &u8);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _34 = (*_30);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _35 = const 1_u8;                // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _33 = Eq(move _34, move _35);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _32 = Not(move _33);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _32) -> [0: bb10, otherwise: bb9]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _36 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _40 = _30;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _40;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _31;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = _42;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _43 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _37 = core::panicking::assert_failed::<u8, u8>(move _38, move _39, move _41, move _43); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb10: {
        _122 = const _;                  // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:30:14: 30:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:30:14: 30:37
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _48 = _122;                      // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:30:14: 30:37
        _47 = _48;                       // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:30:14: 30:37
        _46 = move _47 as &[&str] (Pointer(Unsize)); // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:30:14: 30:37
        _121 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[0])) }
        _51 = _121;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _50 = _51;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _49 = move _50 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _45 = Arguments::<'_>::new_v1(move _46, move _49) -> bb11; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb11: {
        _44 = _print(move _45) -> bb12;  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb12: {
        _52 = const 0_u32;               // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:41:23: 41:24
        _57 = &mut _52;                  // scope 6 at ui/let-else/let-else-temporary-lifetime.rs:42:26: 42:34
        _56 = &mut (*_57);               // scope 6 at ui/let-else/let-else-temporary-lifetime.rs:42:26: 42:34
        _55 = Foo::<'_>(move _56);       // scope 6 at ui/let-else/let-else-temporary-lifetime.rs:42:22: 42:35
        _125 = deref_copy (_55.0: &mut u32); // scope 6 at ui/let-else/let-else-temporary-lifetime.rs:42:13: 42:19
        switchInt((*_125)) -> [0: bb13, otherwise: bb14]; // scope 6 at ui/let-else/let-else-temporary-lifetime.rs:42:13: 42:19
    }

    bb13: {
        drop(_55) -> bb16;               // scope 6 at ui/let-else/let-else-temporary-lifetime.rs:45:10: 45:11
    }

    bb14: {
        drop(_55) -> bb15;               // scope 6 at ui/let-else/let-else-temporary-lifetime.rs:45:10: 45:11
    }

    bb15: {
        _53 = &mut _52;                  // scope 6 at ui/let-else/let-else-temporary-lifetime.rs:43:14: 43:22
        (*_53) = const 1_u32;            // scope 6 at ui/let-else/let-else-temporary-lifetime.rs:43:13: 43:26
        _54 = core::panicking::panic(const "not yet implemented"); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb16: {
        _58 = <String as From<&str>>::from(const "Hey") -> bb17; // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:48:17: 48:36
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:48:17: 48:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:48:30: 48:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _65 = &_58;                      // scope 8 at ui/let-else/let-else-temporary-lifetime.rs:50:25: 50:27
        _64 = _65;                       // scope 8 at ui/let-else/let-else-temporary-lifetime.rs:50:25: 50:27
        _63 = <String as Deref>::deref(move _64) -> [return: bb18, unwind: bb69]; // scope 8 at ui/let-else/let-else-temporary-lifetime.rs:50:25: 50:27
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:50:25: 50:27
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb18: {
        _62 = _63;                       // scope 8 at ui/let-else/let-else-temporary-lifetime.rs:50:25: 50:27
        _61 = foo(move _62) -> [return: bb19, unwind: bb69]; // scope 8 at ui/let-else/let-else-temporary-lifetime.rs:50:21: 50:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:50:21: 50:24
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<impl std::fmt::Display + 'a, ()> {foo}, val: Value(<ZST>) }
    }

    bb19: {
        _66 = discriminant(_61);         // scope 8 at ui/let-else/let-else-temporary-lifetime.rs:50:21: 50:28
        switchInt(move _66) -> [0: bb20, otherwise: bb21]; // scope 8 at ui/let-else/let-else-temporary-lifetime.rs:50:13: 50:18
    }

    bb20: {
        _60 = move ((_61 as Ok).0: impl std::fmt::Display + '_); // scope 8 at ui/let-else/let-else-temporary-lifetime.rs:50:16: 50:17
        _70 = &_60;                      // scope 9 at ui/let-else/let-else-temporary-lifetime.rs:51:20: 51:33
        _69 = <impl std::fmt::Display + '_ as ToString>::to_string(move _70) -> [return: bb22, unwind: bb69]; // scope 9 at ui/let-else/let-else-temporary-lifetime.rs:51:20: 51:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:51:22: 51:31
                                         // + literal: Const { ty: for<'a> fn(&'a impl std::fmt::Display + '_) -> String {<impl std::fmt::Display + '_ as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb21: {
        _59 = begin_panic::<&str>(const "explicit panic") -> bb69; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb22: {
        _68 = &_69;                      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _71 = &_58;                      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _67 = (move _68, move _71);      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _72 = (_67.0: &std::string::String); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _73 = (_67.1: &std::string::String); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _76 = _72;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _77 = _73;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _75 = <String as PartialEq>::eq(move _76, move _77) -> [return: bb23, unwind: bb68]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb23: {
        _74 = Not(move _75);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _74) -> [0: bb25, otherwise: bb24]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb24: {
        _78 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _80 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _82 = _72;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _81 = _82;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _84 = _73;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _83 = _84;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _85 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _79 = core::panicking::assert_failed::<String, String>(move _80, move _81, move _83, move _85) -> bb68; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb25: {
        drop(_69) -> [return: bb26, unwind: bb69]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb26: {
        drop(_58) -> bb27;               // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:52:5: 52:6
    }

    bb27: {
        _128 = const true;               // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:55:18: 55:28
        _86 = Rc::<i32>::new(const 0_i32) -> bb28; // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:55:18: 55:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:55:18: 55:25
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(i32) -> Rc<i32> {Rc::<i32>::new}, val: Value(<ZST>) }
    }

    bb28: {
        _91 = &_86;                      // scope 12 at ui/let-else/let-else-temporary-lifetime.rs:56:18: 56:28
        _90 = <Rc<i32> as Clone>::clone(move _91) -> [return: bb29, unwind: bb76]; // scope 12 at ui/let-else/let-else-temporary-lifetime.rs:56:18: 56:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:56:21: 56:26
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<i32>) -> Rc<i32> {<Rc<i32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb29: {
        _89 = &_90;                      // scope 12 at ui/let-else/let-else-temporary-lifetime.rs:56:18: 56:28
        _88 = <Rc<i32> as Deref>::deref(move _89) -> [return: bb30, unwind: bb67]; // scope 12 at ui/let-else/let-else-temporary-lifetime.rs:56:17: 56:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:56:17: 56:28
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<i32>) -> &'a <Rc<i32> as Deref>::Target {<Rc<i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb30: {
        switchInt((*_88)) -> [0: bb31, otherwise: bb32]; // scope 12 at ui/let-else/let-else-temporary-lifetime.rs:56:13: 56:14
    }

    bb31: {
        drop(_90) -> [return: bb34, unwind: bb76]; // scope 12 at ui/let-else/let-else-temporary-lifetime.rs:56:52: 56:53
    }

    bb32: {
        drop(_90) -> [return: bb33, unwind: bb76]; // scope 12 at ui/let-else/let-else-temporary-lifetime.rs:56:52: 56:53
    }

    bb33: {
        _87 = core::panicking::panic(const "internal error: entered unreachable code") -> bb76; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb34: {
        _128 = const false;              // scope 13 at ui/let-else/let-else-temporary-lifetime.rs:57:24: 57:26
        _94 = move _86;                  // scope 13 at ui/let-else/let-else-temporary-lifetime.rs:57:24: 57:26
        _93 = Rc::<i32>::try_unwrap(move _94) -> [return: bb35, unwind: bb76]; // scope 13 at ui/let-else/let-else-temporary-lifetime.rs:57:9: 57:27
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:57:9: 57:23
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Rc<i32>) -> Result<i32, Rc<i32>> {Rc::<i32>::try_unwrap}, val: Value(<ZST>) }
    }

    bb35: {
        _92 = Result::<i32, Rc<i32>>::unwrap(move _93) -> [return: bb36, unwind: bb76]; // scope 13 at ui/let-else/let-else-temporary-lifetime.rs:57:9: 57:36
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:57:28: 57:34
                                         // + literal: Const { ty: fn(Result<i32, Rc<i32>>) -> i32 {Result::<i32, Rc<i32>>::unwrap}, val: Value(<ZST>) }
    }

    bb36: {
        _128 = const false;              // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:58:5: 58:6
        _127 = const true;               // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:60:22: 60:32
        _95 = Rc::<i32>::new(const 0_i32) -> bb37; // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:60:22: 60:32
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:60:22: 60:29
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(i32) -> Rc<i32> {Rc::<i32>::new}, val: Value(<ZST>) }
    }

    bb37: {
        _96 = const 0_i32;               // scope 14 at ui/let-else/let-else-temporary-lifetime.rs:61:21: 61:22
        goto -> bb38;                    // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:62:9: 75:10
    }

    bb38: {
        _98 = _96;                       // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:63:16: 63:17
        _97 = Gt(move _98, const 3_i32); // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:63:16: 63:21
        switchInt(move _97) -> [0: bb40, otherwise: bb39]; // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:63:16: 63:21
    }

    bb39: {
        drop(_95) -> bb52;               // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:76:5: 76:6
    }

    bb40: {
        _110 = &_95;                     // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:66:22: 66:32
        _109 = <Rc<i32> as Clone>::clone(move _110) -> [return: bb47, unwind: bb74]; // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:66:22: 66:32
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:66:25: 66:30
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<i32>) -> Rc<i32> {<Rc<i32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb41: {
        _101 = discriminant(_99);        // scope 16 at ui/let-else/let-else-temporary-lifetime.rs:67:24: 67:29
        switchInt(move _101) -> [0: bb42, otherwise: bb44]; // scope 16 at ui/let-else/let-else-temporary-lifetime.rs:67:24: 67:29
    }

    bb42: {
        _102 = ((_99 as Ok).0: i32);     // scope 16 at ui/let-else/let-else-temporary-lifetime.rs:67:27: 67:28
        _104 = _102;                     // scope 16 at ui/let-else/let-else-temporary-lifetime.rs:68:34: 68:35
        _103 = Rc::<i32>::new(move _104) -> [return: bb43, unwind: bb66]; // scope 16 at ui/let-else/let-else-temporary-lifetime.rs:68:26: 68:36
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:68:26: 68:33
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(i32) -> Rc<i32> {Rc::<i32>::new}, val: Value(<ZST>) }
    }

    bb43: {
        _127 = const true;               // scope 16 at ui/let-else/let-else-temporary-lifetime.rs:68:21: 68:23
        _95 = move _103;                 // scope 16 at ui/let-else/let-else-temporary-lifetime.rs:68:21: 68:23
        drop(_99) -> [return: bb45, unwind: bb74]; // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:71:17: 71:18
    }

    bb44: {
        _105 = begin_panic::<&str>(const "explicit panic") -> bb66; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb45: {
        _106 = CheckedAdd(_96, const 1_i32); // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:72:17: 72:23
        assert(!move (_106.1: bool), "attempt to compute `{} + {}`, which would overflow", _96, const 1_i32) -> [success: bb46, unwind: bb74]; // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:72:17: 72:23
    }

    bb46: {
        _96 = move (_106.0: i32);        // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:72:17: 72:23
        goto -> bb38;                    // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:73:17: 73:25
    }

    bb47: {
        _108 = &_109;                    // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:66:22: 66:32
        _107 = <Rc<i32> as Deref>::deref(move _108) -> [return: bb48, unwind: bb65]; // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:66:21: 66:32
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:66:21: 66:32
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<i32>) -> &'a <Rc<i32> as Deref>::Target {<Rc<i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb48: {
        switchInt((*_107)) -> [1: bb49, otherwise: bb50]; // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:66:17: 66:18
    }

    bb49: {
        drop(_109) -> [return: bb38, unwind: bb74]; // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:74:14: 74:15
    }

    bb50: {
        drop(_109) -> [return: bb51, unwind: bb74]; // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:74:14: 74:15
    }

    bb51: {
        _127 = const false;              // scope 16 at ui/let-else/let-else-temporary-lifetime.rs:67:47: 67:49
        _100 = move _95;                 // scope 16 at ui/let-else/let-else-temporary-lifetime.rs:67:47: 67:49
        _99 = Rc::<i32>::try_unwrap(move _100) -> [return: bb41, unwind: bb74]; // scope 16 at ui/let-else/let-else-temporary-lifetime.rs:67:32: 67:50
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:67:32: 67:46
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(Rc<i32>) -> Result<i32, Rc<i32>> {Rc::<i32>::try_unwrap}, val: Value(<ZST>) }
    }

    bb52: {
        _127 = const false;              // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:76:5: 76:6
        _111 = must_pass() -> bb53;      // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:86:9: 86:20
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:86:9: 86:18
                                         // + literal: Const { ty: fn() {must_pass}, val: Value(<ZST>) }
    }

    bb53: {
        _126 = const true;               // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:92:18: 92:28
        _112 = Rc::<i32>::new(const 0_i32) -> bb54; // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:92:18: 92:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:92:18: 92:25
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(i32) -> Rc<i32> {Rc::<i32>::new}, val: Value(<ZST>) }
    }

    bb54: {
        _119 = &_112;                    // scope 18 at ui/let-else/let-else-temporary-lifetime.rs:93:18: 93:28
        _118 = <Rc<i32> as Clone>::clone(move _119) -> [return: bb57, unwind: bb72]; // scope 18 at ui/let-else/let-else-temporary-lifetime.rs:93:18: 93:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:93:21: 93:26
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<i32>) -> Rc<i32> {<Rc<i32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb55: {
        _113 = Result::<i32, Rc<i32>>::unwrap(move _114) -> [return: bb56, unwind: bb72]; // scope 18 at ui/let-else/let-else-temporary-lifetime.rs:94:13: 94:40
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:94:32: 94:38
                                         // + literal: Const { ty: fn(Result<i32, Rc<i32>>) -> i32 {Result::<i32, Rc<i32>>::unwrap}, val: Value(<ZST>) }
    }

    bb56: {
        _126 = const false;              // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:98:5: 98:6
        goto -> bb63;                    // scope 3 at no-location
    }

    bb57: {
        _117 = &_118;                    // scope 18 at ui/let-else/let-else-temporary-lifetime.rs:93:18: 93:28
        _116 = <Rc<i32> as Deref>::deref(move _117) -> [return: bb58, unwind: bb64]; // scope 18 at ui/let-else/let-else-temporary-lifetime.rs:93:17: 93:28
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:93:17: 93:28
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<i32>) -> &'a <Rc<i32> as Deref>::Target {<Rc<i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb58: {
        switchInt((*_116)) -> [1: bb59, otherwise: bb60]; // scope 18 at ui/let-else/let-else-temporary-lifetime.rs:93:13: 93:14
    }

    bb59: {
        drop(_118) -> [return: bb62, unwind: bb72]; // scope 18 at ui/let-else/let-else-temporary-lifetime.rs:96:10: 96:11
    }

    bb60: {
        drop(_118) -> [return: bb61, unwind: bb72]; // scope 18 at ui/let-else/let-else-temporary-lifetime.rs:96:10: 96:11
    }

    bb61: {
        _126 = const false;              // scope 18 at ui/let-else/let-else-temporary-lifetime.rs:94:28: 94:30
        _115 = move _112;                // scope 18 at ui/let-else/let-else-temporary-lifetime.rs:94:28: 94:30
        _114 = Rc::<i32>::try_unwrap(move _115) -> [return: bb55, unwind: bb72]; // scope 18 at ui/let-else/let-else-temporary-lifetime.rs:94:13: 94:31
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:94:13: 94:27
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(Rc<i32>) -> Result<i32, Rc<i32>> {Rc::<i32>::try_unwrap}, val: Value(<ZST>) }
    }

    bb62: {
        _120 = core::panicking::panic(const "internal error: entered unreachable code") -> bb72; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb63: {
        return;                          // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:99:2: 99:2
    }

    bb64 (cleanup): {
        drop(_118) -> bb72;              // scope 18 at ui/let-else/let-else-temporary-lifetime.rs:96:10: 96:11
    }

    bb65 (cleanup): {
        drop(_109) -> bb74;              // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:74:14: 74:15
    }

    bb66 (cleanup): {
        drop(_99) -> bb74;               // scope 15 at ui/let-else/let-else-temporary-lifetime.rs:71:17: 71:18
    }

    bb67 (cleanup): {
        drop(_90) -> bb76;               // scope 12 at ui/let-else/let-else-temporary-lifetime.rs:56:52: 56:53
    }

    bb68 (cleanup): {
        drop(_69) -> bb69;               // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb69 (cleanup): {
        drop(_58) -> bb70;               // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:52:5: 52:6
    }

    bb70 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:26:1: 99:2
    }

    bb71 (cleanup): {
        drop(_112) -> bb70;              // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:98:5: 98:6
    }

    bb72 (cleanup): {
        switchInt(_126) -> [0: bb70, otherwise: bb71]; // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:98:5: 98:6
    }

    bb73 (cleanup): {
        drop(_95) -> bb70;               // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:76:5: 76:6
    }

    bb74 (cleanup): {
        switchInt(_127) -> [0: bb70, otherwise: bb73]; // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:76:5: 76:6
    }

    bb75 (cleanup): {
        drop(_86) -> bb70;               // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:58:5: 58:6
    }

    bb76 (cleanup): {
        switchInt(_128) -> [0: bb70, otherwise: bb75]; // scope 3 at ui/let-else/let-else-temporary-lifetime.rs:58:5: 58:6
    }
}

alloc1 (static: TRACKER, size: 1, align: 1) {
    00                                              â”‚ .
}

promoted[0] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:30:14: 30:37
    let mut _1: [&str; 1];               // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:30:14: 30:37

    bb0: {
        _1 = [const "Should have dropped ðŸ‘†\n"]; // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:30:14: 30:37
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:30:14: 30:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:30:14: 30:37
        return;                          // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:30:14: 30:37
    }
}

promoted[2] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u8;                      // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:29:49: 29:50

    bb0: {
        _1 = const 1_u8;                 // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:29:49: 29:50
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u8;                      // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:27:49: 27:50

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:27:49: 27:50
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::<impl at ui/let-else/let-else-temporary-lifetime.rs:36:9: 36:34>::drop(_1: &mut Foo<'_>) -> () {
    debug self => _1;                    // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:37:21: 37:30
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:37:32: 37:32
    let mut _2: &mut u32;                // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:37:21: 37:30

    bb0: {
        _2 = deref_copy ((*_1).0: &mut u32); // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:38:17: 38:28
        (*_2) = const 0_u32;             // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:38:17: 38:28
        return;                          // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:39:14: 39:14
    }
}

fn must_pass() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:78:24: 78:24
    let _1: std::rc::Rc<()>;             // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:79:17: 79:19
    let mut _2: ();                      // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:79:30: 79:32
    let _3: ();                          // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:81:17: 81:44
    let mut _4: std::result::Result<(), std::rc::Rc<()>>; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:81:17: 81:35
    let mut _5: std::rc::Rc<()>;         // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:81:32: 81:34
    let mut _6: &std::option::Option<std::rc::Rc<()>>; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:80:25: 80:46
    let _7: std::option::Option<std::rc::Rc<()>>; // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:80:26: 80:46
    let mut _8: std::rc::Rc<()>;         // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:80:31: 80:45
    let mut _9: &std::rc::Rc<()>;        // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:80:41: 80:44
    let _10: &std::rc::Rc<()>;           // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:80:41: 80:44
    let mut _11: isize;                  // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:80:18: 80:22
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
    let mut _13: bool;                   // in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:85:9: 85:10
    scope 1 {
        debug rc => _1;                  // in scope 1 at ui/let-else/let-else-temporary-lifetime.rs:79:17: 79:19
        scope 2 {
        }
    }

    bb0: {
        _13 = const false;               // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:79:17: 79:19
        _13 = const true;                // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:79:22: 79:33
        _1 = Rc::<()>::new(move _2) -> bb1; // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:79:22: 79:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:79:22: 79:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(()) -> Rc<()> {Rc::<()>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = &_1;                       // scope 1 at ui/let-else/let-else-temporary-lifetime.rs:80:41: 80:44
        _9 = _10;                        // scope 1 at ui/let-else/let-else-temporary-lifetime.rs:80:41: 80:44
        _8 = <Rc<()> as Clone>::clone(move _9) -> [return: bb4, unwind: bb11]; // scope 1 at ui/let-else/let-else-temporary-lifetime.rs:80:31: 80:45
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:80:31: 80:40
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<()>) -> Rc<()> {<Rc<()> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Result::<(), Rc<()>>::unwrap(move _4) -> [return: bb3, unwind: bb11]; // scope 1 at ui/let-else/let-else-temporary-lifetime.rs:81:17: 81:44
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:81:36: 81:42
                                         // + literal: Const { ty: fn(Result<(), Rc<()>>) {Result::<(), Rc<()>>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = const false;               // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:85:9: 85:10
        return;                          // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:85:10: 85:10
    }

    bb4: {
        _7 = Option::<Rc<()>>::Some(move _8); // scope 1 at ui/let-else/let-else-temporary-lifetime.rs:80:26: 80:46
        _6 = &_7;                        // scope 1 at ui/let-else/let-else-temporary-lifetime.rs:80:25: 80:46
        _11 = discriminant((*_6));       // scope 1 at ui/let-else/let-else-temporary-lifetime.rs:80:25: 80:46
        switchInt(move _11) -> [0: bb5, otherwise: bb6]; // scope 1 at ui/let-else/let-else-temporary-lifetime.rs:80:17: 80:22
    }

    bb5: {
        _12 = core::panicking::panic(const "internal error: entered unreachable code") -> bb8; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        drop(_7) -> [return: bb7, unwind: bb11]; // scope 1 at ui/let-else/let-else-temporary-lifetime.rs:85:9: 85:10
    }

    bb7: {
        _13 = const false;               // scope 1 at ui/let-else/let-else-temporary-lifetime.rs:81:32: 81:34
        _5 = move _1;                    // scope 1 at ui/let-else/let-else-temporary-lifetime.rs:81:32: 81:34
        _4 = Rc::<()>::try_unwrap(move _5) -> [return: bb2, unwind: bb11]; // scope 1 at ui/let-else/let-else-temporary-lifetime.rs:81:17: 81:35
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-temporary-lifetime.rs:81:17: 81:31
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Rc<()>) -> Result<(), Rc<()>> {Rc::<()>::try_unwrap}, val: Value(<ZST>) }
    }

    bb8 (cleanup): {
        drop(_7) -> bb11;                // scope 1 at ui/let-else/let-else-temporary-lifetime.rs:85:9: 85:10
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:78:9: 85:10
    }

    bb10 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:85:9: 85:10
    }

    bb11 (cleanup): {
        switchInt(_13) -> [0: bb9, otherwise: bb10]; // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:85:9: 85:10
    }
}

fn Foo(_1: &mut u32) -> Foo<'_> {
    let mut _0: main::Foo<'_>;           // return place in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:34:9: 34:23

    bb0: {
        _0 = Foo::<'_>(move _1);         // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:34:9: 34:23
        return;                          // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:34:9: 34:23
    }
}

// MIR FOR CTFE
fn Foo(_1: &mut u32) -> Foo<'_> {
    let mut _0: main::Foo<'_>;           // return place in scope 0 at ui/let-else/let-else-temporary-lifetime.rs:34:9: 34:23

    bb0: {
        _0 = Foo::<'_>(move _1);         // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:34:9: 34:23
        return;                          // scope 0 at ui/let-else/let-else-temporary-lifetime.rs:34:9: 34:23
    }
}
