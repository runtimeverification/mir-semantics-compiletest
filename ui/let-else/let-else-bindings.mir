// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn none() -> bool {
    let mut _0: bool;
    let mut _1: std::option::Option<&str>;
    let mut _2: isize;
    scope 1 {
    }

    bb0: {
        _1 = Option::<&str>::Some(const "test");
        _2 = discriminant(_1);
        _0 = Ne(_2, const 0_isize);
        return;
    }
}

fn ok() -> bool {
    let mut _0: bool;
    let mut _1: std::result::Result<(), &str>;
    let mut _2: isize;
    scope 1 {
    }

    bb0: {
        _1 = Result::<(), &str>::Err(const "test");
        _2 = discriminant(_1);
        _0 = Ne(_2, const 0_isize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::option::Option<i32>;
    let _2: !;
    let mut _4: isize;
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let _16: !;
    let mut _17: isize;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: !;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: !;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: !;
    let mut _28: std::string::String;
    let _29: &str;
    let mut _31: &main::Foo;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: &[closure@ui/let-else/let-else-bindings.rs:46:15: 46:17];
    let mut _35: !;
    let mut _37: &main::Foo;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: &[closure@ui/let-else/let-else-bindings.rs:53:15: 53:17];
    let mut _41: !;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: !;
    let _46: !;
    let mut _48: main::Foo;
    let mut _49: isize;
    let _50: !;
    let mut _52: isize;
    let mut _53: (&usize, &usize);
    let mut _54: &usize;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: usize;
    let mut _60: usize;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: bool;
    let mut _68: bool;
    scope 1 {
        debug x => _1;
        let _3: i32;
        scope 2 {
            debug y => _3;
            let _7: &i32;
            let _8: &i32;
            let mut _66: &i32;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                let _27: main::Foo;
                let mut _65: &[closure@ui/let-else/let-else-bindings.rs:32:14: 32:16];
                scope 6 {
                    debug foo => _27;
                    let _30: [closure@ui/let-else/let-else-bindings.rs:46:15: 46:17];
                    scope 7 {
                        debug one => _30;
                        let _36: [closure@ui/let-else/let-else-bindings.rs:53:15: 53:17];
                        scope 8 {
                            debug two => _36;
                            let _42: [closure@ui/let-else/let-else-bindings.rs:60:17: 60:19];
                            scope 9 {
                                debug three => _42;
                                let _47: main::Foo;
                                scope 10 {
                                    debug a => _47;
                                    let _51: usize;
                                    scope 11 {
                                        debug b => _51;
                                        let _55: &usize;
                                        let _56: &usize;
                                        let mut _64: &usize;
                                        scope 12 {
                                            debug left_val => _55;
                                            debug right_val => _56;
                                            let _61: core::panicking::AssertKind;
                                            scope 13 {
                                                debug kind => _61;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _68 = const false;
        _67 = const false;
        _1 = Option::<i32>::Some(const 3_i32);
        _4 = discriminant(_1);
        switchInt(move _4) -> [1: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = ((_1 as Some).0: i32);
        _6 = &_3;
        _66 = const _;
        _5 = (move _6, _66);
        _7 = (_5.0: &i32);
        _8 = (_5.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb2: {
        _2 = begin_panic::<&str>(const "let-else panicked") -> unwind continue;
    }

    bb3: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb4: {
        _17 = discriminant(_1);
        switchInt(move _17) -> [1: bb6, otherwise: bb5];
    }

    bb5: {
        _16 = begin_panic::<&str>(const "bad match") -> unwind continue;
    }

    bb6: {
        _19 = none() -> [return: bb7, unwind continue];
    }

    bb7: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _20 = core::panicking::panic(const "assertion failed: none()") -> unwind continue;
    }

    bb9: {
        _22 = ok() -> [return: bb10, unwind continue];
    }

    bb10: {
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _23 = core::panicking::panic(const "assertion failed: ok()") -> unwind continue;
    }

    bb12: {
        _65 = const _;
        _25 = <[closure@ui/let-else/let-else-bindings.rs:32:14: 32:16] as Fn<()>>::call(_65, const ()) -> [return: bb13, unwind continue];
    }

    bb13: {
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _26 = core::panicking::panic(const "assertion failed: (|| { let 1 = 2 else { return true; }; false })()") -> unwind continue;
    }

    bb15: {
        _29 = const "three";
        _28 = <str as ToString>::to_string(_29) -> [return: bb16, unwind continue];
    }

    bb16: {
        _68 = const true;
        _27 = Foo::Three(move _28, const 42_isize);
        _31 = &_27;
        _30 = [closure@ui/let-else/let-else-bindings.rs:46:15: 46:17] { foo: move _31 };
        _34 = &_30;
        _33 = <[closure@ui/let-else/let-else-bindings.rs:46:15: 46:17] as Fn<()>>::call(move _34, const ()) -> [return: bb17, unwind: bb38];
    }

    bb17: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _35 = core::panicking::panic(const "assertion failed: one()") -> bb38;
    }

    bb19: {
        _37 = &_27;
        _36 = [closure@ui/let-else/let-else-bindings.rs:53:15: 53:17] { foo: move _37 };
        _40 = &_36;
        _39 = <[closure@ui/let-else/let-else-bindings.rs:53:15: 53:17] as Fn<()>>::call(move _40, const ()) -> [return: bb20, unwind: bb38];
    }

    bb20: {
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _41 = core::panicking::panic(const "assertion failed: two()") -> bb38;
    }

    bb22: {
        _68 = const false;
        _42 = [closure@ui/let-else/let-else-bindings.rs:60:17: 60:19] { foo: move _27 };
        _44 = <[closure@ui/let-else/let-else-bindings.rs:60:17: 60:19] as FnOnce<()>>::call_once(move _42, const ()) -> [return: bb23, unwind: bb38];
    }

    bb23: {
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _45 = core::panicking::panic(const "assertion failed: three()") -> bb38;
    }

    bb25: {
        _48 = Foo::Two(const 42_usize);
        _49 = discriminant(_48);
        switchInt(move _49) -> [1: bb27, otherwise: bb26];
    }

    bb26: {
        drop(_48) -> [return: bb28, unwind: bb36];
    }

    bb27: {
        _67 = const true;
        _47 = move _48;
        _52 = discriminant(_47);
        switchInt(move _52) -> [1: bb29, otherwise: bb30];
    }

    bb28: {
        _67 = const false;
        _46 = begin_panic::<&str>(const "bad match") -> bb38;
    }

    bb29: {
        _51 = ((_47 as Two).0: usize);
        _54 = &_51;
        _64 = const _;
        _53 = (move _54, _64);
        _55 = (_53.0: &usize);
        _56 = (_53.1: &usize);
        _59 = (*_55);
        _60 = (*_56);
        _58 = Eq(move _59, move _60);
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb32, otherwise: bb31];
    }

    bb30: {
        _50 = begin_panic::<&str>(const "panic in nested `if let`") -> bb36;
    }

    bb31: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<usize, usize>(move _61, _55, _56, move _63) -> bb36;
    }

    bb32: {
        drop(_47) -> [return: bb33, unwind: bb38];
    }

    bb33: {
        _67 = const false;
        _68 = const false;
        return;
    }

    bb34 (cleanup): {
        resume;
    }

    bb35 (cleanup): {
        drop(_47) -> [return: bb38, unwind terminate];
    }

    bb36 (cleanup): {
        switchInt(_67) -> [0: bb38, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_27) -> [return: bb34, unwind terminate];
    }

    bb38 (cleanup): {
        switchInt(_68) -> [0: bb34, otherwise: bb37];
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 42_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[closure@ui/let-else/let-else-bindings.rs:32:14: 32:16] = {
    let mut _0: &[closure@ui/let-else/let-else-bindings.rs:32:14: 32:16];
    let mut _1: [closure@ui/let-else/let-else-bindings.rs:32:14: 32:16];

    bb0: {
        _1 = [closure@ui/let-else/let-else-bindings.rs:32:14: 32:16];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

fn main::{closure#3}(_1: &[closure@ui/let-else/let-else-bindings.rs:32:14: 32:16]) -> bool {
    let mut _0: bool;
    let mut _2: i32;
    scope 1 {
    }

    bb0: {
        _2 = const 2_i32;
        _0 = Ne(_2, const 1_i32);
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/let-else/let-else-bindings.rs:46:15: 46:17]) -> bool {
    debug foo => (*((*_1).0: &main::Foo));
    let mut _0: bool;
    let mut _2: isize;
    let mut _3: &main::Foo;
    scope 1 {
    }

    bb0: {
        _3 = deref_copy ((*_1).0: &main::Foo);
        _2 = discriminant((*_3));
        _0 = Ne(_2, const 0_isize);
        return;
    }
}

fn main::{closure#1}(_1: &[closure@ui/let-else/let-else-bindings.rs:53:15: 53:17]) -> bool {
    debug foo => (*((*_1).0: &main::Foo));
    let mut _0: bool;
    let _2: usize;
    let mut _3: isize;
    let mut _4: &main::Foo;
    let mut _5: &main::Foo;
    scope 1 {
        debug _x => _2;
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &main::Foo);
        _3 = discriminant((*_4));
        switchInt(move _3) -> [1: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = deref_copy ((*_1).0: &main::Foo);
        _2 = (((*_5) as Two).0: usize);
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _0 = const true;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn main::{closure#2}(_1: [closure@ui/let-else/let-else-bindings.rs:60:17: 60:19]) -> bool {
    debug foo => (_1.0: main::Foo);
    let mut _0: bool;
    let _2: std::string::String;
    let _3: isize;
    let mut _4: isize;
    let mut _5: &std::string::String;
    scope 1 {
        debug s => _2;
        debug _x => _3;
        let mut _6: &&str;
    }

    bb0: {
        _4 = discriminant((_1.0: main::Foo));
        switchInt(move _4) -> [2: bb1, otherwise: bb2];
    }

    bb1: {
        _2 = move (((_1.0: main::Foo) as Three).0: std::string::String);
        _3 = (((_1.0: main::Foo) as Three).1: isize);
        _5 = &_2;
        _6 = const _;
        _0 = <String as PartialEq<&str>>::eq(move _5, _6) -> [return: bb3, unwind: bb5];
    }

    bb2: {
        _0 = const false;
        drop(_1) -> [return: bb4, unwind continue];
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

promoted[0] in main::{closure#2}: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "three";
        _0 = &_1;
        return;
    }
}

fn Foo::Two(_1: usize) -> Foo {
    let mut _0: main::Foo;

    bb0: {
        _0 = Foo::Two(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Two(_1: usize) -> Foo {
    let mut _0: main::Foo;

    bb0: {
        _0 = Foo::Two(move _1);
        return;
    }
}

fn Foo::Three(_1: String, _2: isize) -> Foo {
    let mut _0: main::Foo;

    bb0: {
        _0 = Foo::Three(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Three(_1: String, _2: isize) -> Foo {
    let mut _0: main::Foo;

    bb0: {
        _0 = Foo::Three(move _1, move _2);
        return;
    }
}
