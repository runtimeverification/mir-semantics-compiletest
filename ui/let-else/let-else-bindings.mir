// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn none() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/let-else/let-else-bindings.rs:6:14: 6:18
    scope 1 {
    }

    bb0: {
        _0 = const true;                 // scope 0 at ui/let-else/let-else-bindings.rs:8:16: 8:20
        return;                          // scope 0 at ui/let-else/let-else-bindings.rs:11:2: 11:2
    }
}

fn ok() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/let-else/let-else-bindings.rs:13:12: 13:16
    scope 1 {
    }

    bb0: {
        _0 = const true;                 // scope 0 at ui/let-else/let-else-bindings.rs:15:16: 15:20
        return;                          // scope 0 at ui/let-else/let-else-bindings.rs:18:2: 18:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-bindings.rs:20:15: 20:15
    let _1: std::option::Option<i32>;    // in scope 0 at ui/let-else/let-else-bindings.rs:21:9: 21:10
    let mut _3: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _21: isize;                  // in scope 0 at ui/let-else/let-else-bindings.rs:26:9: 26:16
    let mut _22: bool;                   // in scope 0 at ui/let-else/let-else-bindings.rs:29:5: 29:20
    let mut _23: bool;                   // in scope 0 at ui/let-else/let-else-bindings.rs:29:13: 29:19
    let mut _24: !;                      // in scope 0 at ui/let-else/let-else-bindings.rs:29:5: 29:20
    let mut _25: bool;                   // in scope 0 at ui/let-else/let-else-bindings.rs:30:5: 30:18
    let mut _26: bool;                   // in scope 0 at ui/let-else/let-else-bindings.rs:30:13: 30:17
    let mut _27: !;                      // in scope 0 at ui/let-else/let-else-bindings.rs:30:5: 30:18
    let mut _28: bool;                   // in scope 0 at ui/let-else/let-else-bindings.rs:32:5: 37:10
    let mut _29: bool;                   // in scope 0 at ui/let-else/let-else-bindings.rs:32:13: 37:9
    let mut _30: &[closure@ui/let-else/let-else-bindings.rs:32:14: 32:16]; // in scope 0 at ui/let-else/let-else-bindings.rs:32:13: 37:7
    let mut _31: ();                     // in scope 0 at ui/let-else/let-else-bindings.rs:32:13: 37:9
    let mut _32: !;                      // in scope 0 at ui/let-else/let-else-bindings.rs:32:5: 37:10
    let mut _34: std::string::String;    // in scope 0 at ui/let-else/let-else-bindings.rs:45:26: 45:45
    let mut _35: &str;                   // in scope 0 at ui/let-else/let-else-bindings.rs:45:26: 45:45
    let _36: &str;                       // in scope 0 at ui/let-else/let-else-bindings.rs:45:26: 45:33
    let mut _38: &main::Foo;             // in scope 0 at ui/let-else/let-else-bindings.rs:46:15: 51:6
    let mut _39: bool;                   // in scope 0 at ui/let-else/let-else-bindings.rs:52:5: 52:19
    let mut _40: bool;                   // in scope 0 at ui/let-else/let-else-bindings.rs:52:13: 52:18
    let mut _41: &[closure@ui/let-else/let-else-bindings.rs:46:15: 46:17]; // in scope 0 at ui/let-else/let-else-bindings.rs:52:13: 52:16
    let mut _42: ();                     // in scope 0 at ui/let-else/let-else-bindings.rs:52:13: 52:18
    let mut _43: !;                      // in scope 0 at ui/let-else/let-else-bindings.rs:52:5: 52:19
    let mut _45: &main::Foo;             // in scope 0 at ui/let-else/let-else-bindings.rs:53:15: 58:6
    let mut _46: bool;                   // in scope 0 at ui/let-else/let-else-bindings.rs:59:5: 59:19
    let mut _47: bool;                   // in scope 0 at ui/let-else/let-else-bindings.rs:59:13: 59:18
    let mut _48: &[closure@ui/let-else/let-else-bindings.rs:53:15: 53:17]; // in scope 0 at ui/let-else/let-else-bindings.rs:59:13: 59:16
    let mut _49: ();                     // in scope 0 at ui/let-else/let-else-bindings.rs:59:13: 59:18
    let mut _50: !;                      // in scope 0 at ui/let-else/let-else-bindings.rs:59:5: 59:19
    let mut _52: bool;                   // in scope 0 at ui/let-else/let-else-bindings.rs:66:5: 66:21
    let mut _53: bool;                   // in scope 0 at ui/let-else/let-else-bindings.rs:66:13: 66:20
    let mut _54: [closure@ui/let-else/let-else-bindings.rs:60:17: 60:19]; // in scope 0 at ui/let-else/let-else-bindings.rs:66:13: 66:18
    let mut _55: ();                     // in scope 0 at ui/let-else/let-else-bindings.rs:66:13: 66:20
    let mut _56: !;                      // in scope 0 at ui/let-else/let-else-bindings.rs:66:5: 66:21
    let mut _57: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _59: main::Foo;              // in scope 0 at ui/let-else/let-else-bindings.rs:68:25: 68:43
    let mut _60: isize;                  // in scope 0 at ui/let-else/let-else-bindings.rs:68:11: 68:22
    let mut _61: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _63: isize;                  // in scope 0 at ui/let-else/let-else-bindings.rs:71:9: 71:20
    let mut _64: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _65: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _66: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _69: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _70: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _71: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _72: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _74: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _75: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _76: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _77: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _78: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _79: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _84: bool;                   // in scope 0 at ui/let-else/let-else-bindings.rs:75:1: 75:2
    let mut _85: bool;                   // in scope 0 at ui/let-else/let-else-bindings.rs:75:1: 75:2
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/let-else/let-else-bindings.rs:21:9: 21:10
        let _2: i32;                     // in scope 1 at ui/let-else/let-else-bindings.rs:22:14: 22:15
        scope 2 {
            debug y => _2;               // in scope 2 at ui/let-else/let-else-bindings.rs:22:14: 22:15
            let _6: &i32;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _7: &i32;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _83: &i32;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _6;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _7;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _12: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _12;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                let _33: main::Foo;      // in scope 5 at ui/let-else/let-else-bindings.rs:45:9: 45:12
                let mut _82: &[closure@ui/let-else/let-else-bindings.rs:32:14: 32:16]; // in scope 5 at ui/let-else/let-else-bindings.rs:32:13: 37:7
                scope 6 {
                    debug foo => _33;    // in scope 6 at ui/let-else/let-else-bindings.rs:45:9: 45:12
                    let _37: [closure@ui/let-else/let-else-bindings.rs:46:15: 46:17]; // in scope 6 at ui/let-else/let-else-bindings.rs:46:9: 46:12
                    scope 7 {
                        debug one => _37; // in scope 7 at ui/let-else/let-else-bindings.rs:46:9: 46:12
                        let _44: [closure@ui/let-else/let-else-bindings.rs:53:15: 53:17]; // in scope 7 at ui/let-else/let-else-bindings.rs:53:9: 53:12
                        scope 8 {
                            debug two => _44; // in scope 8 at ui/let-else/let-else-bindings.rs:53:9: 53:12
                            let _51: [closure@ui/let-else/let-else-bindings.rs:60:17: 60:19]; // in scope 8 at ui/let-else/let-else-bindings.rs:60:9: 60:14
                            scope 9 {
                                debug three => _51; // in scope 9 at ui/let-else/let-else-bindings.rs:60:9: 60:14
                                let _58: main::Foo; // in scope 9 at ui/let-else/let-else-bindings.rs:68:9: 68:10
                                scope 10 {
                                    debug a => _58; // in scope 10 at ui/let-else/let-else-bindings.rs:68:9: 68:10
                                    let _62: usize; // in scope 10 at ui/let-else/let-else-bindings.rs:71:18: 71:19
                                    scope 11 {
                                        debug b => _62; // in scope 11 at ui/let-else/let-else-bindings.rs:71:18: 71:19
                                        let _67: &usize; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                        let _68: &usize; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                        let mut _81: &usize; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                        scope 12 {
                                            debug left_val => _67; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                            debug right_val => _68; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                            let _73: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                            scope 13 {
                                                debug kind => _73; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _85 = const false;               // scope 0 at ui/let-else/let-else-bindings.rs:21:9: 21:10
        _84 = const false;               // scope 0 at ui/let-else/let-else-bindings.rs:21:9: 21:10
        _1 = Option::<i32>::Some(const 3_i32); // scope 0 at ui/let-else/let-else-bindings.rs:21:13: 21:20
        _2 = ((_1 as Some).0: i32);      // scope 1 at ui/let-else/let-else-bindings.rs:22:14: 22:15
        _4 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _83 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[2])) }
        _5 = _83;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &i32);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &i32);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = (*_6);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = const 3_i32;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = Eq(move _10, move _11);     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _8 = Not(move _9);               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _12 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<i32, i32>(move _14, move _15, move _17, move _19); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _21 = discriminant(_1);          // scope 2 at ui/let-else/let-else-bindings.rs:26:19: 26:20
        switchInt(move _21) -> [1: bb4, otherwise: bb3]; // scope 2 at ui/let-else/let-else-bindings.rs:26:9: 26:16
    }

    bb3: {
        _20 = begin_panic::<&str>(const "bad match"); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:27:16: 27:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _23 = none() -> bb5;             // scope 5 at ui/let-else/let-else-bindings.rs:29:13: 29:19
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:29:13: 29:17
                                         // + literal: Const { ty: fn() -> bool {none}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = Not(move _23);             // scope 5 at ui/let-else/let-else-bindings.rs:29:5: 29:20
        switchInt(move _22) -> [0: bb7, otherwise: bb6]; // scope 5 at ui/let-else/let-else-bindings.rs:29:5: 29:20
    }

    bb6: {
        _24 = core::panicking::panic(const "assertion failed: none()"); // scope 5 at ui/let-else/let-else-bindings.rs:29:5: 29:20
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:29:5: 29:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _26 = ok() -> bb8;               // scope 5 at ui/let-else/let-else-bindings.rs:30:13: 30:17
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:30:13: 30:15
                                         // + literal: Const { ty: fn() -> bool {ok}, val: Value(<ZST>) }
    }

    bb8: {
        _25 = Not(move _26);             // scope 5 at ui/let-else/let-else-bindings.rs:30:5: 30:18
        switchInt(move _25) -> [0: bb10, otherwise: bb9]; // scope 5 at ui/let-else/let-else-bindings.rs:30:5: 30:18
    }

    bb9: {
        _27 = core::panicking::panic(const "assertion failed: ok()"); // scope 5 at ui/let-else/let-else-bindings.rs:30:5: 30:18
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:30:5: 30:18
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _82 = const _;                   // scope 5 at ui/let-else/let-else-bindings.rs:32:13: 37:7
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:32:13: 37:7
                                         // + literal: Const { ty: &[closure@ui/let-else/let-else-bindings.rs:32:14: 32:16], val: Unevaluated(main, [], Some(promoted[1])) }
        _30 = _82;                       // scope 5 at ui/let-else/let-else-bindings.rs:32:13: 37:7
        _29 = <[closure@ui/let-else/let-else-bindings.rs:32:14: 32:16] as Fn<()>>::call(move _30, move _31) -> bb11; // scope 5 at ui/let-else/let-else-bindings.rs:32:13: 37:9
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:32:13: 37:7
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/let-else/let-else-bindings.rs:32:14: 32:16], ()) -> <[closure@ui/let-else/let-else-bindings.rs:32:14: 32:16] as FnOnce<()>>::Output {<[closure@ui/let-else/let-else-bindings.rs:32:14: 32:16] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb11: {
        _28 = Not(move _29);             // scope 5 at ui/let-else/let-else-bindings.rs:32:5: 37:10
        switchInt(move _28) -> [0: bb13, otherwise: bb12]; // scope 5 at ui/let-else/let-else-bindings.rs:32:5: 37:10
    }

    bb12: {
        _32 = core::panicking::panic(const "assertion failed: (|| { let 1 = 2 else { return true; }; false })()"); // scope 5 at ui/let-else/let-else-bindings.rs:32:5: 37:10
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:32:5: 37:10
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _36 = const "three";             // scope 5 at ui/let-else/let-else-bindings.rs:45:26: 45:33
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:45:26: 45:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _35 = _36;                       // scope 5 at ui/let-else/let-else-bindings.rs:45:26: 45:45
        _34 = <str as ToString>::to_string(move _35) -> bb14; // scope 5 at ui/let-else/let-else-bindings.rs:45:26: 45:45
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:45:34: 45:43
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb14: {
        _85 = const true;                // scope 5 at ui/let-else/let-else-bindings.rs:45:15: 45:50
        _33 = Foo::Three(move _34, const 42_isize); // scope 5 at ui/let-else/let-else-bindings.rs:45:15: 45:50
        _38 = &_33;                      // scope 6 at ui/let-else/let-else-bindings.rs:46:15: 51:6
        _37 = [closure@ui/let-else/let-else-bindings.rs:46:15: 46:17] { foo: move _38 }; // scope 6 at ui/let-else/let-else-bindings.rs:46:15: 51:6
                                         // closure
                                         // + def_id: DefId(0:16 ~ let_else_bindings[2898]::main::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> bool,
                                         //     (&main::Foo,),
                                         // ]
        _41 = &_37;                      // scope 7 at ui/let-else/let-else-bindings.rs:52:13: 52:16
        _40 = <[closure@ui/let-else/let-else-bindings.rs:46:15: 46:17] as Fn<()>>::call(move _41, move _42) -> [return: bb15, unwind: bb36]; // scope 7 at ui/let-else/let-else-bindings.rs:52:13: 52:18
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:52:13: 52:16
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/let-else/let-else-bindings.rs:46:15: 46:17], ()) -> <[closure@ui/let-else/let-else-bindings.rs:46:15: 46:17] as FnOnce<()>>::Output {<[closure@ui/let-else/let-else-bindings.rs:46:15: 46:17] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb15: {
        _39 = Not(move _40);             // scope 7 at ui/let-else/let-else-bindings.rs:52:5: 52:19
        switchInt(move _39) -> [0: bb17, otherwise: bb16]; // scope 7 at ui/let-else/let-else-bindings.rs:52:5: 52:19
    }

    bb16: {
        _43 = core::panicking::panic(const "assertion failed: one()") -> bb36; // scope 7 at ui/let-else/let-else-bindings.rs:52:5: 52:19
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:52:5: 52:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _45 = &_33;                      // scope 7 at ui/let-else/let-else-bindings.rs:53:15: 58:6
        _44 = [closure@ui/let-else/let-else-bindings.rs:53:15: 53:17] { foo: move _45 }; // scope 7 at ui/let-else/let-else-bindings.rs:53:15: 58:6
                                         // closure
                                         // + def_id: DefId(0:17 ~ let_else_bindings[2898]::main::{closure#1})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> bool,
                                         //     (&main::Foo,),
                                         // ]
        _48 = &_44;                      // scope 8 at ui/let-else/let-else-bindings.rs:59:13: 59:16
        _47 = <[closure@ui/let-else/let-else-bindings.rs:53:15: 53:17] as Fn<()>>::call(move _48, move _49) -> [return: bb18, unwind: bb36]; // scope 8 at ui/let-else/let-else-bindings.rs:59:13: 59:18
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:59:13: 59:16
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/let-else/let-else-bindings.rs:53:15: 53:17], ()) -> <[closure@ui/let-else/let-else-bindings.rs:53:15: 53:17] as FnOnce<()>>::Output {<[closure@ui/let-else/let-else-bindings.rs:53:15: 53:17] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb18: {
        _46 = Not(move _47);             // scope 8 at ui/let-else/let-else-bindings.rs:59:5: 59:19
        switchInt(move _46) -> [0: bb20, otherwise: bb19]; // scope 8 at ui/let-else/let-else-bindings.rs:59:5: 59:19
    }

    bb19: {
        _50 = core::panicking::panic(const "assertion failed: two()") -> bb36; // scope 8 at ui/let-else/let-else-bindings.rs:59:5: 59:19
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:59:5: 59:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb20: {
        _85 = const false;               // scope 8 at ui/let-else/let-else-bindings.rs:60:17: 65:6
        _51 = [closure@ui/let-else/let-else-bindings.rs:60:17: 60:19] { foo: move _33 }; // scope 8 at ui/let-else/let-else-bindings.rs:60:17: 65:6
                                         // closure
                                         // + def_id: DefId(0:18 ~ let_else_bindings[2898]::main::{closure#2})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()) -> bool,
                                         //     (main::Foo,),
                                         // ]
        _54 = move _51;                  // scope 9 at ui/let-else/let-else-bindings.rs:66:13: 66:18
        _53 = <[closure@ui/let-else/let-else-bindings.rs:60:17: 60:19] as FnOnce<()>>::call_once(move _54, move _55) -> [return: bb21, unwind: bb36]; // scope 9 at ui/let-else/let-else-bindings.rs:66:13: 66:20
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:66:13: 66:18
                                         // + literal: Const { ty: extern "rust-call" fn([closure@ui/let-else/let-else-bindings.rs:60:17: 60:19], ()) -> <[closure@ui/let-else/let-else-bindings.rs:60:17: 60:19] as FnOnce<()>>::Output {<[closure@ui/let-else/let-else-bindings.rs:60:17: 60:19] as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb21: {
        _52 = Not(move _53);             // scope 9 at ui/let-else/let-else-bindings.rs:66:5: 66:21
        switchInt(move _52) -> [0: bb23, otherwise: bb22]; // scope 9 at ui/let-else/let-else-bindings.rs:66:5: 66:21
    }

    bb22: {
        _56 = core::panicking::panic(const "assertion failed: three()") -> bb36; // scope 9 at ui/let-else/let-else-bindings.rs:66:5: 66:21
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:66:5: 66:21
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb23: {
        _59 = Foo::Two(const 42_usize);  // scope 9 at ui/let-else/let-else-bindings.rs:68:25: 68:43
        _60 = discriminant(_59);         // scope 9 at ui/let-else/let-else-bindings.rs:68:25: 68:43
        switchInt(move _60) -> [1: bb25, otherwise: bb24]; // scope 9 at ui/let-else/let-else-bindings.rs:68:9: 68:10
    }

    bb24: {
        drop(_59) -> [return: bb26, unwind: bb34]; // scope 9 at ui/let-else/let-else-bindings.rs:70:6: 70:7
    }

    bb25: {
        _84 = const true;                // scope 9 at ui/let-else/let-else-bindings.rs:68:9: 68:10
        _58 = move _59;                  // scope 9 at ui/let-else/let-else-bindings.rs:68:9: 68:10
        _63 = discriminant(_58);         // scope 10 at ui/let-else/let-else-bindings.rs:71:23: 71:24
        switchInt(move _63) -> [1: bb27, otherwise: bb28]; // scope 10 at ui/let-else/let-else-bindings.rs:71:9: 71:20
    }

    bb26: {
        _84 = const false;               // scope 9 at ui/let-else/let-else-bindings.rs:75:1: 75:2
        _57 = begin_panic::<&str>(const "bad match") -> bb36; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:69:16: 69:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        _62 = ((_58 as Two).0: usize);   // scope 10 at ui/let-else/let-else-bindings.rs:71:18: 71:19
        _65 = &_62;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _81 = const _;                   // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _66 = _81;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _64 = (move _65, move _66);      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _67 = (_64.0: &usize);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _68 = (_64.1: &usize);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _71 = (*_67);                    // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _72 = const 42_usize;            // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _70 = Eq(move _71, move _72);    // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _69 = Not(move _70);             // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _69) -> [0: bb30, otherwise: bb29]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb28: {
        _61 = begin_panic::<&str>(const "panic in nested `if let`") -> bb34; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:72:16: 72:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb29: {
        _73 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _75 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _77 = _67;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _76 = _77;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _79 = _68;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _78 = _79;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _80 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _74 = core::panicking::assert_failed::<usize, usize>(move _75, move _76, move _78, move _80) -> bb34; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb30: {
        drop(_58) -> [return: bb31, unwind: bb36]; // scope 9 at ui/let-else/let-else-bindings.rs:75:1: 75:2
    }

    bb31: {
        _84 = const false;               // scope 9 at ui/let-else/let-else-bindings.rs:75:1: 75:2
        _85 = const false;               // scope 5 at ui/let-else/let-else-bindings.rs:75:1: 75:2
        return;                          // scope 0 at ui/let-else/let-else-bindings.rs:75:2: 75:2
    }

    bb32 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-bindings.rs:20:1: 75:2
    }

    bb33 (cleanup): {
        drop(_58) -> bb36;               // scope 9 at ui/let-else/let-else-bindings.rs:75:1: 75:2
    }

    bb34 (cleanup): {
        switchInt(_84) -> [0: bb36, otherwise: bb33]; // scope 9 at ui/let-else/let-else-bindings.rs:75:1: 75:2
    }

    bb35 (cleanup): {
        drop(_33) -> bb32;               // scope 5 at ui/let-else/let-else-bindings.rs:75:1: 75:2
    }

    bb36 (cleanup): {
        switchInt(_85) -> [0: bb32, otherwise: bb35]; // scope 5 at ui/let-else/let-else-bindings.rs:75:1: 75:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/let-else/let-else-bindings.rs:74:19: 74:27

    bb0: {
        _1 = const 42_usize;             // scope 0 at ui/let-else/let-else-bindings.rs:74:19: 74:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[closure@ui/let-else/let-else-bindings.rs:32:14: 32:16] = {
    let mut _0: &[closure@ui/let-else/let-else-bindings.rs:32:14: 32:16]; // return place in scope 0 at ui/let-else/let-else-bindings.rs:32:13: 37:7
    let mut _1: [closure@ui/let-else/let-else-bindings.rs:32:14: 32:16]; // in scope 0 at ui/let-else/let-else-bindings.rs:32:13: 37:7

    bb0: {
        _1 = [closure@ui/let-else/let-else-bindings.rs:32:14: 32:16]; // scope 0 at ui/let-else/let-else-bindings.rs:32:13: 37:7
                                         // closure
                                         // + def_id: DefId(0:19 ~ let_else_bindings[2898]::main::{closure#3})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> bool,
                                         //     (),
                                         // ]
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-bindings.rs:32:13: 37:7
        return;                          // scope 0 at ui/let-else/let-else-bindings.rs:32:13: 37:7
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/let-else/let-else-bindings.rs:25:19: 25:20

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/let-else/let-else-bindings.rs:25:19: 25:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#3}(_1: &[closure@ui/let-else/let-else-bindings.rs:32:14: 32:16]) -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/let-else/let-else-bindings.rs:32:17: 32:17
    scope 1 {
    }

    bb0: {
        _0 = const true;                 // scope 0 at ui/let-else/let-else-bindings.rs:34:20: 34:24
        return;                          // scope 0 at ui/let-else/let-else-bindings.rs:37:7: 37:7
    }
}

fn main::{closure#0}(_1: &[closure@ui/let-else/let-else-bindings.rs:46:15: 46:17]) -> bool {
    debug foo => (*((*_1).0: &main::Foo)); // in scope 0 at ui/let-else/let-else-bindings.rs:45:9: 45:12
    let mut _0: bool;                    // return place in scope 0 at ui/let-else/let-else-bindings.rs:46:18: 46:18
    let mut _2: isize;                   // in scope 0 at ui/let-else/let-else-bindings.rs:47:13: 47:21
    let mut _3: &main::Foo;              // in scope 0 at ui/let-else/let-else-bindings.rs:46:15: 51:6
    scope 1 {
    }

    bb0: {
        _3 = deref_copy ((*_1).0: &main::Foo); // scope 0 at ui/let-else/let-else-bindings.rs:47:24: 47:27
        _2 = discriminant((*_3));        // scope 0 at ui/let-else/let-else-bindings.rs:47:24: 47:27
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/let-else/let-else-bindings.rs:47:13: 47:21
    }

    bb1: {
        _0 = const true;                 // scope 0 at ui/let-else/let-else-bindings.rs:48:20: 48:24
        goto -> bb3;                     // scope 0 at ui/let-else/let-else-bindings.rs:48:13: 48:24
    }

    bb2: {
        _0 = const false;                // scope 1 at ui/let-else/let-else-bindings.rs:50:9: 50:14
        goto -> bb3;                     // scope 0 at ui/let-else/let-else-bindings.rs:51:6: 51:6
    }

    bb3: {
        return;                          // scope 0 at ui/let-else/let-else-bindings.rs:51:6: 51:6
    }
}

fn main::{closure#1}(_1: &[closure@ui/let-else/let-else-bindings.rs:53:15: 53:17]) -> bool {
    debug foo => (*((*_1).0: &main::Foo)); // in scope 0 at ui/let-else/let-else-bindings.rs:45:9: 45:12
    let mut _0: bool;                    // return place in scope 0 at ui/let-else/let-else-bindings.rs:53:18: 53:18
    let _2: usize;                       // in scope 0 at ui/let-else/let-else-bindings.rs:54:22: 54:24
    let mut _3: isize;                   // in scope 0 at ui/let-else/let-else-bindings.rs:54:13: 54:25
    let mut _4: &main::Foo;              // in scope 0 at ui/let-else/let-else-bindings.rs:53:15: 58:6
    let mut _5: &main::Foo;              // in scope 0 at ui/let-else/let-else-bindings.rs:53:15: 58:6
    scope 1 {
        debug _x => _2;                  // in scope 1 at ui/let-else/let-else-bindings.rs:54:22: 54:24
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &main::Foo); // scope 0 at ui/let-else/let-else-bindings.rs:54:28: 54:31
        _3 = discriminant((*_4));        // scope 0 at ui/let-else/let-else-bindings.rs:54:28: 54:31
        switchInt(move _3) -> [1: bb1, otherwise: bb2]; // scope 0 at ui/let-else/let-else-bindings.rs:54:13: 54:25
    }

    bb1: {
        _5 = deref_copy ((*_1).0: &main::Foo); // scope 0 at ui/let-else/let-else-bindings.rs:54:22: 54:24
        _2 = (((*_5) as Two).0: usize);  // scope 0 at ui/let-else/let-else-bindings.rs:54:22: 54:24
        _0 = const false;                // scope 1 at ui/let-else/let-else-bindings.rs:57:9: 57:14
        goto -> bb3;                     // scope 0 at ui/let-else/let-else-bindings.rs:58:6: 58:6
    }

    bb2: {
        _0 = const true;                 // scope 0 at ui/let-else/let-else-bindings.rs:55:20: 55:24
        goto -> bb3;                     // scope 0 at ui/let-else/let-else-bindings.rs:55:13: 55:24
    }

    bb3: {
        return;                          // scope 0 at ui/let-else/let-else-bindings.rs:58:6: 58:6
    }
}

fn main::{closure#2}(_1: [closure@ui/let-else/let-else-bindings.rs:60:17: 60:19]) -> bool {
    debug foo => (_1.0: main::Foo);      // in scope 0 at ui/let-else/let-else-bindings.rs:45:9: 45:12
    let mut _0: bool;                    // return place in scope 0 at ui/let-else/let-else-bindings.rs:60:20: 60:20
    let _2: std::string::String;         // in scope 0 at ui/let-else/let-else-bindings.rs:61:24: 61:25
    let _3: isize;                       // in scope 0 at ui/let-else/let-else-bindings.rs:61:27: 61:29
    let mut _4: isize;                   // in scope 0 at ui/let-else/let-else-bindings.rs:61:13: 61:30
    let mut _5: &std::string::String;    // in scope 0 at ui/let-else/let-else-bindings.rs:64:9: 64:10
    let mut _6: &&str;                   // in scope 0 at ui/let-else/let-else-bindings.rs:64:14: 64:21
    scope 1 {
        debug s => _2;                   // in scope 1 at ui/let-else/let-else-bindings.rs:61:24: 61:25
        debug _x => _3;                  // in scope 1 at ui/let-else/let-else-bindings.rs:61:27: 61:29
        let mut _7: &&str;               // in scope 1 at ui/let-else/let-else-bindings.rs:64:14: 64:21
    }

    bb0: {
        _4 = discriminant((_1.0: main::Foo)); // scope 0 at ui/let-else/let-else-bindings.rs:61:33: 61:36
        switchInt(move _4) -> [2: bb1, otherwise: bb2]; // scope 0 at ui/let-else/let-else-bindings.rs:61:13: 61:30
    }

    bb1: {
        _2 = move (((_1.0: main::Foo) as Three).0: std::string::String); // scope 0 at ui/let-else/let-else-bindings.rs:61:24: 61:25
        _3 = (((_1.0: main::Foo) as Three).1: isize); // scope 0 at ui/let-else/let-else-bindings.rs:61:27: 61:29
        _5 = &_2;                        // scope 1 at ui/let-else/let-else-bindings.rs:64:9: 64:10
        _7 = const _;                    // scope 1 at ui/let-else/let-else-bindings.rs:64:14: 64:21
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:64:14: 64:21
                                         // + literal: Const { ty: &&str, val: Unevaluated(main::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _6 = _7;                         // scope 1 at ui/let-else/let-else-bindings.rs:64:14: 64:21
        _0 = <String as PartialEq<&str>>::eq(move _5, move _6) -> [return: bb3, unwind: bb5]; // scope 1 at ui/let-else/let-else-bindings.rs:64:9: 64:21
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:64:9: 64:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = const false;                // scope 0 at ui/let-else/let-else-bindings.rs:62:20: 62:25
        drop(_1) -> bb4;                 // scope 0 at ui/let-else/let-else-bindings.rs:65:5: 65:6
    }

    bb3: {
        drop(_2) -> bb4;                 // scope 0 at ui/let-else/let-else-bindings.rs:65:5: 65:6
    }

    bb4: {
        return;                          // scope 0 at ui/let-else/let-else-bindings.rs:65:6: 65:6
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at ui/let-else/let-else-bindings.rs:65:5: 65:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/let-else/let-else-bindings.rs:60:17: 65:6
    }
}

promoted[0] in main::{closure#2}: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/let-else/let-else-bindings.rs:64:14: 64:21
    let mut _1: &str;                    // in scope 0 at ui/let-else/let-else-bindings.rs:64:14: 64:21

    bb0: {
        _1 = const "three";              // scope 0 at ui/let-else/let-else-bindings.rs:64:14: 64:21
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-bindings.rs:64:14: 64:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-bindings.rs:64:14: 64:21
        return;                          // scope 0 at ui/let-else/let-else-bindings.rs:64:14: 64:21
    }
}

fn Foo::Two(_1: usize) -> Foo {
    let mut _0: main::Foo;               // return place in scope 0 at ui/let-else/let-else-bindings.rs:41:9: 41:12

    bb0: {
        _0 = Foo::Two(move _1);          // scope 0 at ui/let-else/let-else-bindings.rs:41:9: 41:12
        return;                          // scope 0 at ui/let-else/let-else-bindings.rs:41:9: 41:12
    }
}

// MIR FOR CTFE
fn Foo::Two(_1: usize) -> Foo {
    let mut _0: main::Foo;               // return place in scope 0 at ui/let-else/let-else-bindings.rs:41:9: 41:12

    bb0: {
        _0 = Foo::Two(move _1);          // scope 0 at ui/let-else/let-else-bindings.rs:41:9: 41:12
        return;                          // scope 0 at ui/let-else/let-else-bindings.rs:41:9: 41:12
    }
}

fn Foo::Three(_1: String, _2: isize) -> Foo {
    let mut _0: main::Foo;               // return place in scope 0 at ui/let-else/let-else-bindings.rs:42:9: 42:14

    bb0: {
        _0 = Foo::Three(move _1, move _2); // scope 0 at ui/let-else/let-else-bindings.rs:42:9: 42:14
        return;                          // scope 0 at ui/let-else/let-else-bindings.rs:42:9: 42:14
    }
}

// MIR FOR CTFE
fn Foo::Three(_1: String, _2: isize) -> Foo {
    let mut _0: main::Foo;               // return place in scope 0 at ui/let-else/let-else-bindings.rs:42:9: 42:14

    bb0: {
        _0 = Foo::Three(move _1, move _2); // scope 0 at ui/let-else/let-else-bindings.rs:42:9: 42:14
        return;                          // scope 0 at ui/let-else/let-else-bindings.rs:42:9: 42:14
    }
}
