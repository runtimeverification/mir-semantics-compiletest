// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn return_result() -> Option<String> {
    let mut _0: std::option::Option<std::string::String>; // return place in scope 0 at ui/let-else/issue-99975.rs:6:23: 6:37
    let mut _1: std::string::String;     // in scope 0 at ui/let-else/issue-99975.rs:7:10: 7:26
    let mut _2: &str;                    // in scope 0 at ui/let-else/issue-99975.rs:7:10: 7:26
    let _3: &str;                        // in scope 0 at ui/let-else/issue-99975.rs:7:10: 7:14

    bb0: {
        _3 = const "ok";                 // scope 0 at ui/let-else/issue-99975.rs:7:10: 7:14
                                         // mir::Constant
                                         // + span: ui/let-else/issue-99975.rs:7:10: 7:14
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/let-else/issue-99975.rs:7:10: 7:26
        _1 = <str as ToString>::to_string(move _2) -> bb1; // scope 0 at ui/let-else/issue-99975.rs:7:10: 7:26
                                         // mir::Constant
                                         // + span: ui/let-else/issue-99975.rs:7:15: 7:24
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Option::<String>::Some(move _1); // scope 0 at ui/let-else/issue-99975.rs:7:5: 7:27
        return;                          // scope 0 at ui/let-else/issue-99975.rs:8:2: 8:2
    }
}

fn start() -> String {
    let mut _0: std::string::String;     // return place in scope 0 at ui/let-else/issue-99975.rs:10:15: 10:21
    let mut _1: &str;                    // in scope 0 at ui/let-else/issue-99975.rs:12:16: 12:34
    let _2: &str;                        // in scope 0 at ui/let-else/issue-99975.rs:12:16: 12:22
    let _3: std::string::String;         // in scope 0 at ui/let-else/issue-99975.rs:11:14: 11:21
    let mut _4: std::option::Option<std::string::String>; // in scope 0 at ui/let-else/issue-99975.rs:11:25: 11:40
    let mut _5: isize;                   // in scope 0 at ui/let-else/issue-99975.rs:11:9: 11:22
    let mut _6: bool;                    // in scope 0 at ui/let-else/issue-99975.rs:16:1: 16:2
    scope 1 {
        debug content => _3;             // in scope 1 at ui/let-else/issue-99975.rs:11:14: 11:21
    }

    bb0: {
        _6 = const false;                // scope 0 at ui/let-else/issue-99975.rs:11:14: 11:21
        _4 = return_result() -> bb1;     // scope 0 at ui/let-else/issue-99975.rs:11:25: 11:40
                                         // mir::Constant
                                         // + span: ui/let-else/issue-99975.rs:11:25: 11:38
                                         // + literal: Const { ty: fn() -> Option<String> {return_result}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_4);           // scope 0 at ui/let-else/issue-99975.rs:11:25: 11:40
        switchInt(move _5) -> [1: bb2, otherwise: bb3]; // scope 0 at ui/let-else/issue-99975.rs:11:9: 11:22
    }

    bb2: {
        _6 = const true;                 // scope 0 at ui/let-else/issue-99975.rs:11:14: 11:21
        _3 = move ((_4 as Some).0: std::string::String); // scope 0 at ui/let-else/issue-99975.rs:11:14: 11:21
        _6 = const false;                // scope 1 at ui/let-else/issue-99975.rs:15:5: 15:12
        _0 = move _3;                    // scope 1 at ui/let-else/issue-99975.rs:15:5: 15:12
        _6 = const false;                // scope 0 at ui/let-else/issue-99975.rs:16:1: 16:2
        goto -> bb5;                     // scope 0 at ui/let-else/issue-99975.rs:16:2: 16:2
    }

    bb3: {
        drop(_4) -> [return: bb4, unwind: bb8]; // scope 0 at ui/let-else/issue-99975.rs:13:6: 13:7
    }

    bb4: {
        _6 = const false;                // scope 0 at ui/let-else/issue-99975.rs:16:1: 16:2
        _2 = const "none";               // scope 0 at ui/let-else/issue-99975.rs:12:16: 12:22
                                         // mir::Constant
                                         // + span: ui/let-else/issue-99975.rs:12:16: 12:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1 = _2;                         // scope 0 at ui/let-else/issue-99975.rs:12:16: 12:34
        _0 = <str as ToString>::to_string(move _1) -> bb5; // scope 0 at ui/let-else/issue-99975.rs:12:16: 12:34
                                         // mir::Constant
                                         // + span: ui/let-else/issue-99975.rs:12:23: 12:32
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/let-else/issue-99975.rs:16:2: 16:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/let-else/issue-99975.rs:10:1: 16:2
    }

    bb7 (cleanup): {
        drop(_3) -> bb6;                 // scope 0 at ui/let-else/issue-99975.rs:16:1: 16:2
    }

    bb8 (cleanup): {
        switchInt(_6) -> [0: bb6, otherwise: bb7]; // scope 0 at ui/let-else/issue-99975.rs:16:1: 16:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/issue-99975.rs:18:11: 18:11
    let _1: std::string::String;         // in scope 0 at ui/let-else/issue-99975.rs:19:5: 19:12

    bb0: {
        _1 = start() -> bb1;             // scope 0 at ui/let-else/issue-99975.rs:19:5: 19:12
                                         // mir::Constant
                                         // + span: ui/let-else/issue-99975.rs:19:5: 19:10
                                         // + literal: Const { ty: fn() -> String {start}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/let-else/issue-99975.rs:19:12: 19:13
    }

    bb2: {
        return;                          // scope 0 at ui/let-else/issue-99975.rs:20:2: 20:2
    }
}
