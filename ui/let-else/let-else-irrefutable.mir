// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/let-else-irrefutable.rs:3:11: 3:11
    let _1: i32;                         // in scope 0 at ui/let-else/let-else-irrefutable.rs:4:9: 4:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/let-else/let-else-irrefutable.rs:4:9: 4:10
        let _2: i32;                     // in scope 1 at ui/let-else/let-else-irrefutable.rs:7:9: 7:10
        scope 2 {
            debug x => _2;               // in scope 2 at ui/let-else/let-else-irrefutable.rs:7:9: 7:10
        }
    }

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/let-else/let-else-irrefutable.rs:4:9: 4:10
        _2 = const 1_i32;                // scope 1 at ui/let-else/let-else-irrefutable.rs:7:9: 7:10
        return;                          // scope 0 at ui/let-else/let-else-irrefutable.rs:11:2: 11:2
    }
}

promoted[0] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/let-else/let-else-irrefutable.rs:8:19: 8:45
    let mut _1: [&str; 1];               // in scope 0 at ui/let-else/let-else-irrefutable.rs:8:19: 8:45

    bb0: {
        _1 = [const "problem case encountered\n"]; // scope 0 at ui/let-else/let-else-irrefutable.rs:8:19: 8:45
                                         // mir::Constant
                                         // + span: ui/let-else/let-else-irrefutable.rs:8:19: 8:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/let-else-irrefutable.rs:8:19: 8:45
        return;                          // scope 0 at ui/let-else/let-else-irrefutable.rs:8:19: 8:45
    }
}
