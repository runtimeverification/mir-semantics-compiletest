// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: Option<i32>) -> i32 {
    debug a => _1;                       // in scope 0 at ui/let-else/const-fn.rs:5:14: 5:15
    let mut _0: i32;                     // return place in scope 0 at ui/let-else/const-fn.rs:5:33: 5:36
    let _2: i32;                         // in scope 0 at ui/let-else/const-fn.rs:6:14: 6:15
    let mut _3: isize;                   // in scope 0 at ui/let-else/const-fn.rs:6:9: 6:16
    let mut _4: i32;                     // in scope 0 at ui/let-else/const-fn.rs:10:5: 10:6
    let mut _5: (i32, bool);             // in scope 0 at ui/let-else/const-fn.rs:10:5: 10:10
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/let-else/const-fn.rs:6:14: 6:15
    }

    bb0: {
        _3 = discriminant(_1);           // scope 0 at ui/let-else/const-fn.rs:6:19: 6:20
        switchInt(move _3) -> [1: bb1, otherwise: bb2]; // scope 0 at ui/let-else/const-fn.rs:6:9: 6:16
    }

    bb1: {
        _2 = ((_1 as Some).0: i32);      // scope 0 at ui/let-else/const-fn.rs:6:14: 6:15
        _4 = _2;                         // scope 1 at ui/let-else/const-fn.rs:10:5: 10:6
        _5 = CheckedAdd(_4, const 1_i32); // scope 1 at ui/let-else/const-fn.rs:10:5: 10:10
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, const 1_i32) -> bb3; // scope 1 at ui/let-else/const-fn.rs:10:5: 10:10
    }

    bb2: {
        _0 = const 42_i32;               // scope 0 at ui/let-else/const-fn.rs:7:16: 7:18
        goto -> bb4;                     // scope 0 at ui/let-else/const-fn.rs:7:9: 7:18
    }

    bb3: {
        _0 = move (_5.0: i32);           // scope 1 at ui/let-else/const-fn.rs:10:5: 10:10
        goto -> bb4;                     // scope 0 at ui/let-else/const-fn.rs:11:2: 11:2
    }

    bb4: {
        return;                          // scope 0 at ui/let-else/const-fn.rs:11:2: 11:2
    }
}

// MIR FOR CTFE
fn foo(_1: Option<i32>) -> i32 {
    debug a => _1;                       // in scope 0 at ui/let-else/const-fn.rs:5:14: 5:15
    let mut _0: i32;                     // return place in scope 0 at ui/let-else/const-fn.rs:5:33: 5:36
    let mut _2: !;                       // in scope 0 at ui/let-else/const-fn.rs:6:26: 8:6
    let mut _3: !;                       // in scope 0 at ui/let-else/const-fn.rs:7:9: 7:18
    let _4: i32;                         // in scope 0 at ui/let-else/const-fn.rs:6:14: 6:15
    let mut _5: isize;                   // in scope 0 at ui/let-else/const-fn.rs:6:9: 6:16
    let mut _6: i32;                     // in scope 0 at ui/let-else/const-fn.rs:10:5: 10:6
    let mut _7: (i32, bool);             // in scope 0 at ui/let-else/const-fn.rs:10:5: 10:10
    scope 1 {
        debug a => _4;                   // in scope 1 at ui/let-else/const-fn.rs:6:14: 6:15
    }

    bb0: {
        StorageLive(_4);                 // scope 0 at ui/let-else/const-fn.rs:6:14: 6:15
        _5 = discriminant(_1);           // scope 0 at ui/let-else/const-fn.rs:6:19: 6:20
        switchInt(move _5) -> [1: bb1, otherwise: bb2]; // scope 0 at ui/let-else/const-fn.rs:6:9: 6:16
    }

    bb1: {
        _4 = ((_1 as Some).0: i32);      // scope 0 at ui/let-else/const-fn.rs:6:14: 6:15
        StorageLive(_6);                 // scope 1 at ui/let-else/const-fn.rs:10:5: 10:6
        _6 = _4;                         // scope 1 at ui/let-else/const-fn.rs:10:5: 10:6
        _7 = CheckedAdd(_6, const 1_i32); // scope 1 at ui/let-else/const-fn.rs:10:5: 10:10
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, const 1_i32) -> bb3; // scope 1 at ui/let-else/const-fn.rs:10:5: 10:10
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at ui/let-else/const-fn.rs:11:1: 11:2
        _0 = const 42_i32;               // scope 0 at ui/let-else/const-fn.rs:7:16: 7:18
        goto -> bb4;                     // scope 0 at ui/let-else/const-fn.rs:7:9: 7:18
    }

    bb3: {
        _0 = move (_7.0: i32);           // scope 1 at ui/let-else/const-fn.rs:10:5: 10:10
        StorageDead(_6);                 // scope 1 at ui/let-else/const-fn.rs:10:9: 10:10
        StorageDead(_4);                 // scope 0 at ui/let-else/const-fn.rs:11:1: 11:2
        goto -> bb4;                     // scope 0 at ui/let-else/const-fn.rs:11:2: 11:2
    }

    bb4: {
        return;                          // scope 0 at ui/let-else/const-fn.rs:11:2: 11:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/let-else/const-fn.rs:13:11: 13:11
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/let-else/const-fn.rs:17:14: 17:21
    let mut _4: &[&str; 3];              // in scope 0 at ui/let-else/const-fn.rs:17:14: 17:21
    let _5: &[&str; 3];                  // in scope 0 at ui/let-else/const-fn.rs:17:14: 17:21
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/const-fn.rs:17:23: 17:24
    let mut _11: &i32;                   // in scope 0 at ui/let-else/const-fn.rs:17:23: 17:24
    let _12: &i32;                       // in scope 0 at ui/let-else/const-fn.rs:17:23: 17:24
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/let-else/const-fn.rs:17:26: 17:27
    let mut _14: &i32;                   // in scope 0 at ui/let-else/const-fn.rs:17:26: 17:27
    let _15: &i32;                       // in scope 0 at ui/let-else/const-fn.rs:17:26: 17:27
    let mut _16: &i32;                   // in scope 0 at ui/let-else/const-fn.rs:17:26: 17:27
    let mut _17: &i32;                   // in scope 0 at ui/let-else/const-fn.rs:17:23: 17:24
    let mut _18: &[&str; 3];             // in scope 0 at ui/let-else/const-fn.rs:17:14: 17:21

    bb0: {
        _18 = const _;                   // scope 0 at ui/let-else/const-fn.rs:17:14: 17:21
                                         // mir::Constant
                                         // + span: ui/let-else/const-fn.rs:17:14: 17:21
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(main, [], Some(promoted[2])) }
        _5 = _18;                        // scope 0 at ui/let-else/const-fn.rs:17:14: 17:21
        _4 = _5;                         // scope 0 at ui/let-else/const-fn.rs:17:14: 17:21
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/let-else/const-fn.rs:17:14: 17:21
        _17 = const _;                   // scope 0 at ui/let-else/const-fn.rs:17:23: 17:24
                                         // mir::Constant
                                         // + span: ui/let-else/const-fn.rs:17:23: 17:24
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _12 = _17;                       // scope 0 at ui/let-else/const-fn.rs:17:23: 17:24
        _11 = _12;                       // scope 0 at ui/let-else/const-fn.rs:17:23: 17:24
        _10 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _11) -> bb1; // scope 0 at ui/let-else/const-fn.rs:17:23: 17:24
                                         // mir::Constant
                                         // + span: ui/let-else/const-fn.rs:17:23: 17:24
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _16 = const _;                   // scope 0 at ui/let-else/const-fn.rs:17:26: 17:27
                                         // mir::Constant
                                         // + span: ui/let-else/const-fn.rs:17:26: 17:27
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _15 = _16;                       // scope 0 at ui/let-else/const-fn.rs:17:26: 17:27
        _14 = _15;                       // scope 0 at ui/let-else/const-fn.rs:17:26: 17:27
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _14) -> bb2; // scope 0 at ui/let-else/const-fn.rs:17:26: 17:27
                                         // mir::Constant
                                         // + span: ui/let-else/const-fn.rs:17:26: 17:27
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = [move _10, move _13];       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = _print(move _2) -> bb4;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/let-else/const-fn.rs:18:2: 18:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/let-else/const-fn.rs:17:26: 17:27
    let mut _1: i32;                     // in scope 0 at ui/let-else/const-fn.rs:17:26: 17:27

    bb0: {
        _1 = const _;                    // scope 0 at ui/let-else/const-fn.rs:17:26: 17:27
        _0 = &_1;                        // scope 0 at ui/let-else/const-fn.rs:17:26: 17:27
        return;                          // scope 0 at ui/let-else/const-fn.rs:17:26: 17:27
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/let-else/const-fn.rs:17:23: 17:24
    let mut _1: i32;                     // in scope 0 at ui/let-else/const-fn.rs:17:23: 17:24

    bb0: {
        _1 = const _;                    // scope 0 at ui/let-else/const-fn.rs:17:23: 17:24
        _0 = &_1;                        // scope 0 at ui/let-else/const-fn.rs:17:23: 17:24
        return;                          // scope 0 at ui/let-else/const-fn.rs:17:23: 17:24
    }
}

promoted[2] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/let-else/const-fn.rs:17:14: 17:21
    let mut _1: [&str; 3];               // in scope 0 at ui/let-else/const-fn.rs:17:14: 17:21

    bb0: {
        _1 = [const "", const " ", const "\n"]; // scope 0 at ui/let-else/const-fn.rs:17:14: 17:21
                                         // mir::Constant
                                         // + span: ui/let-else/const-fn.rs:17:14: 17:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/const-fn.rs:17:14: 17:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/let-else/const-fn.rs:17:14: 17:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/let-else/const-fn.rs:17:14: 17:21
        return;                          // scope 0 at ui/let-else/const-fn.rs:17:14: 17:21
    }
}

const A: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/let-else/const-fn.rs:14:14: 14:17
    let mut _1: std::option::Option<i32>; // in scope 0 at ui/let-else/const-fn.rs:14:24: 14:28

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/let-else/const-fn.rs:14:24: 14:28
        _1 = Option::<i32>::None;        // scope 0 at ui/let-else/const-fn.rs:14:24: 14:28
        ConstEvalCounter;                // scope 0 at ui/let-else/const-fn.rs:14:20: 14:29
        _0 = foo(move _1) -> bb1;        // scope 0 at ui/let-else/const-fn.rs:14:20: 14:29
                                         // mir::Constant
                                         // + span: ui/let-else/const-fn.rs:14:20: 14:23
                                         // + literal: Const { ty: fn(Option<i32>) -> i32 {foo}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/let-else/const-fn.rs:14:28: 14:29
        return;                          // scope 0 at ui/let-else/const-fn.rs:14:5: 14:30
    }
}

const B: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/let-else/const-fn.rs:15:14: 15:17
    let mut _1: std::option::Option<i32>; // in scope 0 at ui/let-else/const-fn.rs:15:24: 15:31

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/let-else/const-fn.rs:15:24: 15:31
        _1 = Option::<i32>::Some(const 1_i32); // scope 0 at ui/let-else/const-fn.rs:15:24: 15:31
        ConstEvalCounter;                // scope 0 at ui/let-else/const-fn.rs:15:20: 15:32
        _0 = foo(move _1) -> bb1;        // scope 0 at ui/let-else/const-fn.rs:15:20: 15:32
                                         // mir::Constant
                                         // + span: ui/let-else/const-fn.rs:15:20: 15:23
                                         // + literal: Const { ty: fn(Option<i32>) -> i32 {foo}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 0 at ui/let-else/const-fn.rs:15:31: 15:32
        return;                          // scope 0 at ui/let-else/const-fn.rs:15:5: 15:33
    }
}
