// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: Option<i32>) -> i32 {
    debug a => _1;
    let mut _0: i32;
    let _2: i32;
    let mut _3: isize;
    scope 1 {
        debug a => _2;
    }

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [1: bb1, otherwise: bb2];
    }

    bb1: {
        _2 = ((_1 as Some).0: i32);
        _0 = Add(_2, const 1_i32);
        goto -> bb3;
    }

    bb2: {
        _0 = const 42_i32;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

// MIR FOR CTFE
fn foo(_1: Option<i32>) -> i32 {
    debug a => _1;
    let mut _0: i32;
    let mut _2: !;
    let _3: i32;
    let mut _4: isize;
    let mut _5: i32;
    scope 1 {
        debug a => _3;
    }

    bb0: {
        StorageLive(_3);
        _4 = discriminant(_1);
        switchInt(move _4) -> [1: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = ((_1 as Some).0: i32);
        StorageLive(_5);
        _5 = _3;
        _0 = Add(move _5, const 1_i32);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb3;
    }

    bb2: {
        StorageDead(_3);
        _0 = const 42_i32;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 2];
    let _6: [core::fmt::rt::Argument<'_>; 2];
    let mut _7: core::fmt::rt::Argument<'_>;
    let mut _8: core::fmt::rt::Argument<'_>;
    let mut _9: &i32;
    let mut _10: &i32;
    let mut _11: &[&str; 3];

    bb0: {
        _11 = const _;
        _3 = _11 as &[&str] (Pointer(Unsize));
        _10 = const _;
        _7 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = const _;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = [move _7, move _8];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = _print(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

const A: i32 = {
    let mut _0: i32;
    let mut _1: std::option::Option<i32>;

    bb0: {
        StorageLive(_1);
        _1 = Option::<i32>::None;
        ConstEvalCounter;
        _0 = foo(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

const B: i32 = {
    let mut _0: i32;
    let mut _1: std::option::Option<i32>;

    bb0: {
        StorageLive(_1);
        _1 = Option::<i32>::Some(const 1_i32);
        ConstEvalCounter;
        _0 = foo(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}
