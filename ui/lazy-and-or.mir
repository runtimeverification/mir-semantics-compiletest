// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn incr(_1: &mut isize) -> bool {
    debug x => _1;                       // in scope 0 at ui/lazy-and-or.rs:3:9: 3:10
    let mut _0: bool;                    // return place in scope 0 at ui/lazy-and-or.rs:3:27: 3:31
    let mut _2: (isize, bool);           // in scope 0 at ui/lazy-and-or.rs:3:34: 3:41
    let mut _3: !;                       // in scope 0 at ui/lazy-and-or.rs:3:43: 3:59

    bb0: {
        _2 = CheckedAdd((*_1), const 1_isize); // scope 0 at ui/lazy-and-or.rs:3:34: 3:41
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_1), const 1_isize) -> bb1; // scope 0 at ui/lazy-and-or.rs:3:34: 3:41
    }

    bb1: {
        (*_1) = move (_2.0: isize);      // scope 0 at ui/lazy-and-or.rs:3:34: 3:41
        _3 = core::panicking::panic(const "assertion failed: (false)"); // scope 0 at ui/lazy-and-or.rs:3:43: 3:59
                                         // mir::Constant
                                         // + span: ui/lazy-and-or.rs:3:43: 3:59
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lazy-and-or.rs:5:15: 5:15
    let _1: bool;                        // in scope 0 at ui/lazy-and-or.rs:6:9: 6:10
    let mut _2: bool;                    // in scope 0 at ui/lazy-and-or.rs:7:5: 7:17
    let mut _3: bool;                    // in scope 0 at ui/lazy-and-or.rs:7:13: 7:16
    let mut _4: !;                       // in scope 0 at ui/lazy-and-or.rs:7:5: 7:17
    let _6: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _7: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[&str];                 // in scope 0 at ui/lazy-and-or.rs:9:14: 9:18
    let mut _9: &[&str; 2];              // in scope 0 at ui/lazy-and-or.rs:9:14: 9:18
    let _10: &[&str; 2];                 // in scope 0 at ui/lazy-and-or.rs:9:14: 9:18
    let mut _11: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _13: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _14: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/lazy-and-or.rs:9:20: 9:37
    let mut _16: &bool;                  // in scope 0 at ui/lazy-and-or.rs:9:20: 9:37
    let _17: &bool;                      // in scope 0 at ui/lazy-and-or.rs:9:20: 9:37
    let _18: bool;                       // in scope 0 at ui/lazy-and-or.rs:9:20: 9:37
    let mut _19: bool;                   // in scope 0 at ui/lazy-and-or.rs:9:20: 9:21
    let mut _20: bool;                   // in scope 0 at ui/lazy-and-or.rs:9:25: 9:37
    let mut _21: &mut isize;             // in scope 0 at ui/lazy-and-or.rs:9:30: 9:36
    let mut _22: &mut isize;             // in scope 0 at ui/lazy-and-or.rs:9:30: 9:36
    let mut _23: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _24: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _25: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _30: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _31: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _33: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _34: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _35: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _36: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _37: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _38: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _40: bool;                   // in scope 0 at ui/lazy-and-or.rs:11:8: 11:17
    let mut _41: bool;                   // in scope 0 at ui/lazy-and-or.rs:11:16: 11:17
    let mut _42: !;                      // in scope 0 at ui/lazy-and-or.rs:11:46: 11:62
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/lazy-and-or.rs:6:9: 6:10
        let mut _5: isize;               // in scope 1 at ui/lazy-and-or.rs:8:9: 8:14
        scope 2 {
            debug y => _5;               // in scope 2 at ui/lazy-and-or.rs:8:9: 8:14
            let _26: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _27: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _43: &isize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _44: &[&str; 2];     // in scope 2 at ui/lazy-and-or.rs:9:14: 9:18
            scope 3 {
                debug left_val => _26;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _27;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _32: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _32;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = const true;                 // scope 0 at ui/lazy-and-or.rs:6:13: 6:29
        _3 = _1;                         // scope 1 at ui/lazy-and-or.rs:7:13: 7:16
        _2 = Not(move _3);               // scope 1 at ui/lazy-and-or.rs:7:5: 7:17
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/lazy-and-or.rs:7:5: 7:17
    }

    bb1: {
        _4 = core::panicking::panic(const "assertion failed: (x)"); // scope 1 at ui/lazy-and-or.rs:7:5: 7:17
                                         // mir::Constant
                                         // + span: ui/lazy-and-or.rs:7:5: 7:17
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _5 = const 10_isize;             // scope 1 at ui/lazy-and-or.rs:8:24: 8:26
        _44 = const _;                   // scope 2 at ui/lazy-and-or.rs:9:14: 9:18
                                         // mir::Constant
                                         // + span: ui/lazy-and-or.rs:9:14: 9:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _10 = _44;                       // scope 2 at ui/lazy-and-or.rs:9:14: 9:18
        _9 = _10;                        // scope 2 at ui/lazy-and-or.rs:9:14: 9:18
        _8 = move _9 as &[&str] (Pointer(Unsize)); // scope 2 at ui/lazy-and-or.rs:9:14: 9:18
        _19 = _1;                        // scope 2 at ui/lazy-and-or.rs:9:20: 9:21
        switchInt(move _19) -> [0: bb4, otherwise: bb3]; // scope 2 at ui/lazy-and-or.rs:9:20: 9:37
    }

    bb3: {
        _18 = const true;                // scope 2 at ui/lazy-and-or.rs:9:20: 9:37
        goto -> bb5;                     // scope 2 at ui/lazy-and-or.rs:9:20: 9:37
    }

    bb4: {
        _22 = &mut _5;                   // scope 2 at ui/lazy-and-or.rs:9:30: 9:36
        _21 = &mut (*_22);               // scope 2 at ui/lazy-and-or.rs:9:30: 9:36
        _20 = incr(move _21) -> bb6;     // scope 2 at ui/lazy-and-or.rs:9:25: 9:37
                                         // mir::Constant
                                         // + span: ui/lazy-and-or.rs:9:25: 9:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut isize) -> bool {incr}, val: Value(<ZST>) }
    }

    bb5: {
        _17 = &_18;                      // scope 2 at ui/lazy-and-or.rs:9:20: 9:37
        _16 = _17;                       // scope 2 at ui/lazy-and-or.rs:9:20: 9:37
        _15 = core::fmt::ArgumentV1::<'_>::new_display::<bool>(move _16) -> bb7; // scope 2 at ui/lazy-and-or.rs:9:20: 9:37
                                         // mir::Constant
                                         // + span: ui/lazy-and-or.rs:9:20: 9:37
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b bool) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<bool>}, val: Value(<ZST>) }
    }

    bb6: {
        _18 = move _20;                  // scope 2 at ui/lazy-and-or.rs:9:20: 9:37
        goto -> bb5;                     // scope 2 at ui/lazy-and-or.rs:9:20: 9:37
    }

    bb7: {
        _14 = [move _15];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _13 = &_14;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = _13;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = move _12 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = Arguments::<'_>::new_v1(move _8, move _11) -> bb8; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb8: {
        _6 = _print(move _7) -> bb9;     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb9: {
        _24 = &_5;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _43 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _25 = _43;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _23 = (move _24, move _25);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _26 = (_23.0: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _27 = (_23.1: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _30 = (*_26);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _31 = const 10_isize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _29 = Eq(move _30, move _31);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _28 = Not(move _29);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _28) -> [0: bb11, otherwise: bb10]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _32 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _34 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _36;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _27;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _37 = _38;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _33 = core::panicking::assert_failed::<isize, isize>(move _34, move _35, move _37, move _39); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb11: {
        _41 = _1;                        // scope 2 at ui/lazy-and-or.rs:11:16: 11:17
        _40 = move _41;                  // scope 2 at ui/lazy-and-or.rs:11:8: 11:17
        switchInt(move _40) -> [0: bb13, otherwise: bb12]; // scope 2 at ui/lazy-and-or.rs:11:8: 11:17
    }

    bb12: {
        return;                          // scope 0 at ui/lazy-and-or.rs:12:2: 12:2
    }

    bb13: {
        _42 = core::panicking::panic(const "assertion failed: (false)"); // scope 2 at ui/lazy-and-or.rs:11:46: 11:62
                                         // mir::Constant
                                         // + span: ui/lazy-and-or.rs:11:46: 11:62
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/lazy-and-or.rs:10:19: 10:21

    bb0: {
        _1 = const 10_isize;             // scope 0 at ui/lazy-and-or.rs:10:19: 10:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/lazy-and-or.rs:9:14: 9:18
    let mut _1: [&str; 2];               // in scope 0 at ui/lazy-and-or.rs:9:14: 9:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/lazy-and-or.rs:9:14: 9:18
                                         // mir::Constant
                                         // + span: ui/lazy-and-or.rs:9:14: 9:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/lazy-and-or.rs:9:14: 9:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/lazy-and-or.rs:9:14: 9:18
        return;                          // scope 0 at ui/lazy-and-or.rs:9:14: 9:18
    }
}
