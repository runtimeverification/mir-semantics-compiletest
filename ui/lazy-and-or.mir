// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn incr(_1: &mut isize) -> bool {
    debug x => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: !;

    bb0: {
        (*_1) = Add((*_1), const 1_isize);
        _2 = Not(const false);
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = core::panicking::panic(const "assertion failed: (false)") -> unwind continue;
    }

    bb2: {
        _0 = const false;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: !;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &bool;
    let _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: &mut isize;
    let mut _20: (&isize, &isize);
    let mut _21: &isize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: !;
    let mut _35: bool;
    let mut _36: !;
    scope 1 {
        debug x => _1;
        let mut _7: isize;
        scope 2 {
            debug y => _7;
            let _22: &isize;
            let _23: &isize;
            let mut _37: &isize;
            let mut _38: &[&str; 2];
            scope 3 {
                debug left_val => _22;
                debug right_val => _23;
                let _28: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _28;
                }
            }
        }
    }

    bb0: {
        _2 = Eq(const 1_i32, const 2_i32);
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _1 = const true;
        goto -> bb3;
    }

    bb2: {
        _3 = Eq(const 3_i32, const 3_i32);
        _1 = move _3;
        goto -> bb3;
    }

    bb3: {
        _5 = _1;
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _6 = core::panicking::panic(const "assertion failed: (x)") -> unwind continue;
    }

    bb5: {
        _7 = const 10_isize;
        _38 = const _;
        _10 = _38 as &[&str] (Pointer(Unsize));
        _17 = _1;
        switchInt(move _17) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _16 = const true;
        goto -> bb8;
    }

    bb7: {
        _19 = &mut _7;
        _18 = incr(_19) -> [return: bb9, unwind continue];
    }

    bb8: {
        _15 = &_16;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_15) -> [return: bb10, unwind continue];
    }

    bb9: {
        _16 = move _18;
        goto -> bb8;
    }

    bb10: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb11, unwind continue];
    }

    bb11: {
        _8 = _print(move _9) -> [return: bb12, unwind continue];
    }

    bb12: {
        _21 = &_7;
        _37 = const _;
        _20 = (move _21, _37);
        _22 = (_20.0: &isize);
        _23 = (_20.1: &isize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<isize, isize>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb14: {
        _32 = _1;
        _31 = move _32;
        switchInt(move _31) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        _33 = Not(const true);
        switchInt(move _33) -> [0: bb19, otherwise: bb16];
    }

    bb16: {
        _34 = core::panicking::panic(const "assertion failed: (true)") -> unwind continue;
    }

    bb17: {
        _35 = Not(const false);
        switchInt(move _35) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _36 = core::panicking::panic(const "assertion failed: (false)") -> unwind continue;
    }

    bb19: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
