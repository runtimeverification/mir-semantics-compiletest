// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn worker() -> ! {
    let mut _0: !;                       // return place in scope 0 at ui/catch-unwind-bang.rs:4:16: 4:17
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/catch-unwind-bang.rs:8:11: 8:11
    let _1: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/catch-unwind-bang.rs:9:5: 9:50
    let mut _2: std::result::Result<!, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/catch-unwind-bang.rs:9:5: 9:37

    bb0: {
        _2 = catch_unwind::<fn() -> ! {worker}, !>(worker) -> bb1; // scope 0 at ui/catch-unwind-bang.rs:9:5: 9:37
                                         // mir::Constant
                                         // + span: ui/catch-unwind-bang.rs:9:5: 9:29
                                         // + literal: Const { ty: fn(fn() -> ! {worker}) -> Result<!, Box<(dyn Any + Send + 'static)>> {catch_unwind::<fn() -> ! {worker}, !>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/catch-unwind-bang.rs:9:30: 9:36
                                         // + literal: Const { ty: fn() -> ! {worker}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Result::<!, Box<dyn Any + Send>>::unwrap_err(move _2) -> bb2; // scope 0 at ui/catch-unwind-bang.rs:9:5: 9:50
                                         // mir::Constant
                                         // + span: ui/catch-unwind-bang.rs:9:38: 9:48
                                         // + literal: Const { ty: fn(Result<!, Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Result::<!, Box<dyn Any + Send>>::unwrap_err}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/catch-unwind-bang.rs:9:50: 9:51
    }

    bb3: {
        return;                          // scope 0 at ui/catch-unwind-bang.rs:10:2: 10:2
    }
}
