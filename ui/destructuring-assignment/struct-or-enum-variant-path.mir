// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:11:11: 11:11
    let mut _1: ();                      // in scope 0 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:12:9: 12:14
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:12:9: 12:14
        let _2: ();                      // in scope 1 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:14:9: 14:10
        let _3: ();                      // in scope 1 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:16:12: 16:13
        let _4: ();                      // in scope 1 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:18:14: 18:15
        let _5: ();                      // in scope 1 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:19:12: 19:13
        scope 2 {
            debug lhs => _2;             // in scope 2 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:14:9: 14:10
        }
        scope 3 {
            debug lhs => _3;             // in scope 3 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:16:12: 16:13
        }
        scope 4 {
            debug lhs => _4;             // in scope 4 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:18:14: 18:15
        }
        scope 5 {
            debug lhs => _5;             // in scope 5 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:19:12: 19:13
        }
    }

    bb0: {
        return;                          // scope 0 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:20:2: 20:2
    }
}

fn <impl at ui/destructuring-assignment/struct-or-enum-variant-path.rs:22:1: 22:7>::check() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:23:16: 23:16
    let _1: ();                          // in scope 0 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:24:13: 24:14
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:24:13: 24:14
        let _2: ();                      // in scope 1 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:25:16: 25:17
        scope 2 {
            debug lhs => _2;             // in scope 2 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:25:16: 25:17
        }
    }

    bb0: {
        return;                          // scope 0 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:26:6: 26:6
    }
}

fn <impl at ui/destructuring-assignment/struct-or-enum-variant-path.rs:29:1: 29:7>::check() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:30:16: 30:16
    let _1: ();                          // in scope 0 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:31:13: 31:14
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:31:13: 31:14
        let _2: ();                      // in scope 1 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:32:19: 32:20
        scope 2 {
            debug lhs => _2;             // in scope 2 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:32:19: 32:20
        }
    }

    bb0: {
        return;                          // scope 0 at ui/destructuring-assignment/struct-or-enum-variant-path.rs:33:6: 33:6
    }
}
