// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/destructuring-assignment/tuple_struct_destructure.rs:5:1: 5:29>::assign(_1: TupleStruct<S, T>, _2: &mut S, _3: &mut T) -> () {
    debug self => _1;
    debug first => _2;
    debug second => _3;
    let mut _0: ();
    let _4: S;
    let _5: T;
    let mut _6: T;
    let mut _7: bool;
    scope 1 {
        debug lhs => _4;
        debug lhs => _5;
    }

    bb0: {
        _7 = const false;
        _4 = move (_1.0: S);
        _7 = const true;
        _5 = move (_1.1: T);
        drop((*_2)) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        (*_2) = move _4;
        _7 = const false;
        _6 = move _5;
        drop((*_3)) -> [return: bb3, unwind: bb4];
    }

    bb2 (cleanup): {
        (*_2) = move _4;
        goto -> bb7;
    }

    bb3: {
        (*_3) = move _6;
        _7 = const false;
        return;
    }

    bb4 (cleanup): {
        (*_3) = move _6;
        goto -> bb7;
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_5) -> [return: bb5, unwind terminate];
    }

    bb7 (cleanup): {
        switchInt(_7) -> [0: bb5, otherwise: bb6];
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _2: isize;
    let mut _5: TupleStruct<i32, isize>;
    let mut _6: (&(i32, isize), &(i32, isize));
    let mut _7: &(i32, isize);
    let _8: (i32, isize);
    let mut _9: i32;
    let mut _10: isize;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: TupleStruct<i32, isize>;
    let mut _21: (&(i32, isize), &(i32, isize));
    let mut _22: &(i32, isize);
    let _23: (i32, isize);
    let mut _24: i32;
    let mut _25: isize;
    let mut _28: bool;
    let mut _29: bool;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: TupleStruct<i32, i32>;
    let mut _35: (&(i32, isize), &(i32, isize));
    let mut _36: &(i32, isize);
    let _37: (i32, isize);
    let mut _38: i32;
    let mut _39: isize;
    let mut _42: bool;
    let mut _43: bool;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: (&(i32, isize), &(i32, isize));
    let mut _48: &(i32, isize);
    let _49: (i32, isize);
    let mut _50: i32;
    let mut _51: isize;
    let mut _54: bool;
    let mut _55: bool;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let _59: ();
    let mut _60: TupleStruct<i32, isize>;
    let mut _61: &mut i32;
    let mut _62: &mut isize;
    let mut _63: (&(i32, isize), &(i32, isize));
    let mut _64: &(i32, isize);
    let _65: (i32, isize);
    let mut _66: i32;
    let mut _67: isize;
    let mut _70: bool;
    let mut _71: bool;
    let _73: !;
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: Enum<i32, isize>;
    let mut _78: (&(i32, isize), &(i32, isize));
    let mut _79: &(i32, isize);
    let _80: (i32, isize);
    let mut _81: i32;
    let mut _82: isize;
    let mut _85: bool;
    let mut _86: bool;
    let _88: !;
    let mut _89: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: Enum<i32, isize>;
    let mut _93: (&(i32, isize), &(i32, isize));
    let mut _94: &(i32, isize);
    let _95: (i32, isize);
    let mut _96: i32;
    let mut _97: isize;
    let mut _100: bool;
    let mut _101: bool;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        debug b => _2;
        let _3: i32;
        let _4: isize;
        let _11: &(i32, isize);
        let _12: &(i32, isize);
        let _18: i32;
        let _19: isize;
        let _26: &(i32, isize);
        let _27: &(i32, isize);
        let _33: i32;
        let _40: &(i32, isize);
        let _41: &(i32, isize);
        let _52: &(i32, isize);
        let _53: &(i32, isize);
        let _68: &(i32, isize);
        let _69: &(i32, isize);
        let _75: i32;
        let _76: isize;
        let _83: &(i32, isize);
        let _84: &(i32, isize);
        let _90: i32;
        let _91: isize;
        let _98: &(i32, isize);
        let _99: &(i32, isize);
        let mut _105: &(i32, isize);
        let mut _106: &(i32, isize);
        let mut _107: &(i32, isize);
        let mut _108: &(i32, isize);
        let mut _109: &(i32, isize);
        let mut _110: &(i32, isize);
        let mut _111: &(i32, isize);
        scope 2 {
            debug lhs => _3;
            debug lhs => _4;
        }
        scope 3 {
            debug left_val => _11;
            debug right_val => _12;
            let _15: core::panicking::AssertKind;
            scope 4 {
                debug kind => _15;
            }
        }
        scope 5 {
            debug lhs => _18;
            debug lhs => _19;
        }
        scope 6 {
            debug left_val => _26;
            debug right_val => _27;
            let _30: core::panicking::AssertKind;
            scope 7 {
                debug kind => _30;
            }
        }
        scope 8 {
            debug lhs => _33;
        }
        scope 9 {
            debug left_val => _40;
            debug right_val => _41;
            let _44: core::panicking::AssertKind;
            scope 10 {
                debug kind => _44;
            }
        }
        scope 11 {
        }
        scope 12 {
            debug left_val => _52;
            debug right_val => _53;
            let _56: core::panicking::AssertKind;
            scope 13 {
                debug kind => _56;
            }
        }
        scope 14 {
            debug left_val => _68;
            debug right_val => _69;
            let _72: core::panicking::AssertKind;
            scope 15 {
                debug kind => _72;
            }
        }
        scope 16 {
            debug lhs => _75;
            debug lhs => _76;
        }
        scope 17 {
            debug left_val => _83;
            debug right_val => _84;
            let _87: core::panicking::AssertKind;
            scope 18 {
                debug kind => _87;
            }
        }
        scope 19 {
            debug lhs => _90;
            debug lhs => _91;
        }
        scope 20 {
            debug left_val => _98;
            debug right_val => _99;
            let _102: core::panicking::AssertKind;
            scope 21 {
                debug kind => _102;
            }
        }
    }

    bb0: {
        _5 = TupleStruct::<i32, isize>(const 0_i32, const 1_isize);
        _3 = (_5.0: i32);
        _4 = (_5.1: isize);
        _1 = _3;
        _2 = _4;
        _9 = _1;
        _10 = _2;
        _8 = (move _9, move _10);
        _7 = &_8;
        _111 = const _;
        _6 = (move _7, _111);
        _11 = (_6.0: &(i32, isize));
        _12 = (_6.1: &(i32, isize));
        _14 = <(i32, isize) as PartialEq>::eq(_11, _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<(i32, isize), (i32, isize)>(move _15, _11, _12, move _17) -> unwind continue;
    }

    bb3: {
        _20 = TupleStruct::<i32, isize>(const 1_i32, const 2_isize);
        _18 = (_20.0: i32);
        _19 = (_20.1: isize);
        _1 = _18;
        _2 = _19;
        _24 = _1;
        _25 = _2;
        _23 = (move _24, move _25);
        _22 = &_23;
        _110 = const _;
        _21 = (move _22, _110);
        _26 = (_21.0: &(i32, isize));
        _27 = (_21.1: &(i32, isize));
        _29 = <(i32, isize) as PartialEq>::eq(_26, _27) -> [return: bb4, unwind continue];
    }

    bb4: {
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<(i32, isize), (i32, isize)>(move _30, _26, _27, move _32) -> unwind continue;
    }

    bb6: {
        _34 = TupleStruct::<i32, i32>(const 2_i32, const 2_i32);
        _33 = (_34.1: i32);
        _1 = _33;
        _38 = _1;
        _39 = _2;
        _37 = (move _38, move _39);
        _36 = &_37;
        _109 = const _;
        _35 = (move _36, _109);
        _40 = (_35.0: &(i32, isize));
        _41 = (_35.1: &(i32, isize));
        _43 = <(i32, isize) as PartialEq>::eq(_40, _41) -> [return: bb7, unwind continue];
    }

    bb7: {
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<(i32, isize), (i32, isize)>(move _44, _40, _41, move _46) -> unwind continue;
    }

    bb9: {
        _50 = _1;
        _51 = _2;
        _49 = (move _50, move _51);
        _48 = &_49;
        _108 = const _;
        _47 = (move _48, _108);
        _52 = (_47.0: &(i32, isize));
        _53 = (_47.1: &(i32, isize));
        _55 = <(i32, isize) as PartialEq>::eq(_52, _53) -> [return: bb10, unwind continue];
    }

    bb10: {
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<(i32, isize), (i32, isize)>(move _56, _52, _53, move _58) -> unwind continue;
    }

    bb12: {
        _60 = TupleStruct::<i32, isize>(const 5_i32, const 6_isize);
        _61 = &mut _1;
        _62 = &mut _2;
        _59 = TupleStruct::<i32, isize>::assign(move _60, _61, _62) -> [return: bb13, unwind continue];
    }

    bb13: {
        _66 = _1;
        _67 = _2;
        _65 = (move _66, move _67);
        _64 = &_65;
        _107 = const _;
        _63 = (move _64, _107);
        _68 = (_63.0: &(i32, isize));
        _69 = (_63.1: &(i32, isize));
        _71 = <(i32, isize) as PartialEq>::eq(_68, _69) -> [return: bb14, unwind continue];
    }

    bb14: {
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _72 = core::panicking::AssertKind::Eq;
        _74 = Option::<Arguments<'_>>::None;
        _73 = core::panicking::assert_failed::<(i32, isize), (i32, isize)>(move _72, _68, _69, move _74) -> unwind continue;
    }

    bb16: {
        _77 = Enum::<i32, isize>::SingleVariant(const 7_i32, const 8_isize);
        _75 = ((_77 as SingleVariant).0: i32);
        _76 = ((_77 as SingleVariant).1: isize);
        _1 = _75;
        _2 = _76;
        _81 = _1;
        _82 = _2;
        _80 = (move _81, move _82);
        _79 = &_80;
        _106 = const _;
        _78 = (move _79, _106);
        _83 = (_78.0: &(i32, isize));
        _84 = (_78.1: &(i32, isize));
        _86 = <(i32, isize) as PartialEq>::eq(_83, _84) -> [return: bb17, unwind continue];
    }

    bb17: {
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _87 = core::panicking::AssertKind::Eq;
        _89 = Option::<Arguments<'_>>::None;
        _88 = core::panicking::assert_failed::<(i32, isize), (i32, isize)>(move _87, _83, _84, move _89) -> unwind continue;
    }

    bb19: {
        _92 = Enum::<i32, isize>::SingleVariant(const 9_i32, const 10_isize) -> [return: bb20, unwind continue];
    }

    bb20: {
        _90 = ((_92 as SingleVariant).0: i32);
        _91 = ((_92 as SingleVariant).1: isize);
        _1 = _90;
        _2 = _91;
        _96 = _1;
        _97 = _2;
        _95 = (move _96, move _97);
        _94 = &_95;
        _105 = const _;
        _93 = (move _94, _105);
        _98 = (_93.0: &(i32, isize));
        _99 = (_93.1: &(i32, isize));
        _101 = <(i32, isize) as PartialEq>::eq(_98, _99) -> [return: bb21, unwind continue];
    }

    bb21: {
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<(i32, isize), (i32, isize)>(move _102, _98, _99, move _104) -> unwind continue;
    }

    bb23: {
        return;
    }
}

promoted[0] in main: &(i32, isize) = {
    let mut _0: &(i32, isize);
    let mut _1: (i32, isize);

    bb0: {
        _1 = (const 9_i32, const 10_isize);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &(i32, isize) = {
    let mut _0: &(i32, isize);
    let mut _1: (i32, isize);

    bb0: {
        _1 = (const 7_i32, const 8_isize);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &(i32, isize) = {
    let mut _0: &(i32, isize);
    let mut _1: (i32, isize);

    bb0: {
        _1 = (const 5_i32, const 6_isize);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &(i32, isize) = {
    let mut _0: &(i32, isize);
    let mut _1: (i32, isize);

    bb0: {
        _1 = (const 2_i32, const 2_isize);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &(i32, isize) = {
    let mut _0: &(i32, isize);
    let mut _1: (i32, isize);

    bb0: {
        _1 = (const 2_i32, const 2_isize);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &(i32, isize) = {
    let mut _0: &(i32, isize);
    let mut _1: (i32, isize);

    bb0: {
        _1 = (const 1_i32, const 2_isize);
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &(i32, isize) = {
    let mut _0: &(i32, isize);
    let mut _1: (i32, isize);

    bb0: {
        _1 = (const 0_i32, const 1_isize);
        _0 = &_1;
        return;
    }
}

fn TupleStruct(_1: S, _2: T) -> TupleStruct<S, T> {
    let mut _0: TupleStruct<S, T>;

    bb0: {
        _0 = TupleStruct::<S, T>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn TupleStruct(_1: S, _2: T) -> TupleStruct<S, T> {
    let mut _0: TupleStruct<S, T>;

    bb0: {
        _0 = TupleStruct::<S, T>(move _1, move _2);
        return;
    }
}

fn Enum::SingleVariant(_1: S, _2: T) -> Enum<S, T> {
    let mut _0: Enum<S, T>;

    bb0: {
        _0 = Enum::<S, T>::SingleVariant(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Enum::SingleVariant(_1: S, _2: T) -> Enum<S, T> {
    let mut _0: Enum<S, T>;

    bb0: {
        _0 = Enum::<S, T>::SingleVariant(move _1, move _2);
        return;
    }
}
