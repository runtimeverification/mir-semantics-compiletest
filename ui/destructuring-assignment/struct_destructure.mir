// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _2: i32;
    let mut _5: Struct<i32, i32>;
    let mut _6: (&(i32, i32), &(i32, i32));
    let mut _7: &(i32, i32);
    let _8: (i32, i32);
    let mut _9: i32;
    let mut _10: i32;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: Struct<i32, i32>;
    let mut _21: (&(i32, i32), &(i32, i32));
    let mut _22: &(i32, i32);
    let _23: (i32, i32);
    let mut _24: i32;
    let mut _25: i32;
    let mut _28: bool;
    let mut _29: bool;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: Struct<i32, i32>;
    let mut _35: (&(i32, i32), &(i32, i32));
    let mut _36: &(i32, i32);
    let _37: (i32, i32);
    let mut _38: i32;
    let mut _39: i32;
    let mut _42: bool;
    let mut _43: bool;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _48: Struct<i32, i32>;
    let mut _49: (&(i32, i32), &(i32, i32));
    let mut _50: &(i32, i32);
    let _51: (i32, i32);
    let mut _52: i32;
    let mut _53: i32;
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&(i32, i32), &(i32, i32));
    let mut _62: &(i32, i32);
    let _63: (i32, i32);
    let mut _64: i32;
    let mut _65: i32;
    let mut _68: bool;
    let mut _69: bool;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        debug b => _2;
        let _3: i32;
        let _4: i32;
        let _11: &(i32, i32);
        let _12: &(i32, i32);
        let _18: i32;
        let _19: i32;
        let _26: &(i32, i32);
        let _27: &(i32, i32);
        let _33: i32;
        let _40: &(i32, i32);
        let _41: &(i32, i32);
        let _47: i32;
        let _54: &(i32, i32);
        let _55: &(i32, i32);
        let _66: &(i32, i32);
        let _67: &(i32, i32);
        let mut _73: &(i32, i32);
        let mut _74: &(i32, i32);
        let mut _75: &(i32, i32);
        let mut _76: &(i32, i32);
        let mut _77: &(i32, i32);
        scope 2 {
            debug lhs => _3;
            debug lhs => _4;
        }
        scope 3 {
            debug left_val => _11;
            debug right_val => _12;
            let _15: core::panicking::AssertKind;
            scope 4 {
                debug kind => _15;
            }
        }
        scope 5 {
            debug lhs => _18;
            debug lhs => _19;
        }
        scope 6 {
            debug left_val => _26;
            debug right_val => _27;
            let _30: core::panicking::AssertKind;
            scope 7 {
                debug kind => _30;
            }
        }
        scope 8 {
            debug lhs => _33;
        }
        scope 9 {
            debug left_val => _40;
            debug right_val => _41;
            let _44: core::panicking::AssertKind;
            scope 10 {
                debug kind => _44;
            }
        }
        scope 11 {
            debug lhs => _47;
        }
        scope 12 {
            debug left_val => _54;
            debug right_val => _55;
            let _58: core::panicking::AssertKind;
            scope 13 {
                debug kind => _58;
            }
        }
        scope 14 {
        }
        scope 15 {
            debug left_val => _66;
            debug right_val => _67;
            let _70: core::panicking::AssertKind;
            scope 16 {
                debug kind => _70;
            }
        }
    }

    bb0: {
        _5 = Struct::<i32, i32> { a: const 0_i32, b: const 1_i32 };
        _3 = (_5.0: i32);
        _4 = (_5.1: i32);
        _1 = _3;
        _2 = _4;
        _9 = _1;
        _10 = _2;
        _8 = (move _9, move _10);
        _7 = &_8;
        _77 = const _;
        _6 = (move _7, _77);
        _11 = (_6.0: &(i32, i32));
        _12 = (_6.1: &(i32, i32));
        _14 = <(i32, i32) as PartialEq>::eq(_11, _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _15, _11, _12, move _17) -> unwind continue;
    }

    bb3: {
        _20 = Struct::<i32, i32> { a: const 1_i32, b: const 2_i32 };
        _18 = (_20.0: i32);
        _19 = (_20.1: i32);
        _2 = _18;
        _1 = _19;
        _24 = _1;
        _25 = _2;
        _23 = (move _24, move _25);
        _22 = &_23;
        _76 = const _;
        _21 = (move _22, _76);
        _26 = (_21.0: &(i32, i32));
        _27 = (_21.1: &(i32, i32));
        _29 = <(i32, i32) as PartialEq>::eq(_26, _27) -> [return: bb4, unwind continue];
    }

    bb4: {
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _30, _26, _27, move _32) -> unwind continue;
    }

    bb6: {
        _34 = Struct::<i32, i32> { a: const 1_i32, b: const 2_i32 };
        _33 = (_34.1: i32);
        _2 = _33;
        _38 = _1;
        _39 = _2;
        _37 = (move _38, move _39);
        _36 = &_37;
        _75 = const _;
        _35 = (move _36, _75);
        _40 = (_35.0: &(i32, i32));
        _41 = (_35.1: &(i32, i32));
        _43 = <(i32, i32) as PartialEq>::eq(_40, _41) -> [return: bb7, unwind continue];
    }

    bb7: {
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _44, _40, _41, move _46) -> unwind continue;
    }

    bb9: {
        _48 = Struct::<i32, i32> { a: const 1_i32, b: const 3_i32 };
        _47 = (_48.0: i32);
        _1 = _47;
        _52 = _1;
        _53 = _2;
        _51 = (move _52, move _53);
        _50 = &_51;
        _74 = const _;
        _49 = (move _50, _74);
        _54 = (_49.0: &(i32, i32));
        _55 = (_49.1: &(i32, i32));
        _57 = <(i32, i32) as PartialEq>::eq(_54, _55) -> [return: bb10, unwind continue];
    }

    bb10: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _58, _54, _55, move _60) -> unwind continue;
    }

    bb12: {
        _64 = _1;
        _65 = _2;
        _63 = (move _64, move _65);
        _62 = &_63;
        _73 = const _;
        _61 = (move _62, _73);
        _66 = (_61.0: &(i32, i32));
        _67 = (_61.1: &(i32, i32));
        _69 = <(i32, i32) as PartialEq>::eq(_66, _67) -> [return: bb13, unwind continue];
    }

    bb13: {
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _70, _66, _67, move _72) -> unwind continue;
    }

    bb15: {
        return;
    }
}

promoted[0] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 1_i32, const 2_i32);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 1_i32, const 2_i32);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 2_i32, const 2_i32);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 2_i32, const 1_i32);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 0_i32, const 1_i32);
        _0 = &_1;
        return;
    }
}
