// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const DROP_ORDER: LocalKey<RefCell<Vec<usize>>> = {
    let mut _0: std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:365:40: 365:68
    let mut _1: for<'a> unsafe fn(std::option::Option<&'a mut std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>>) -> std::option::Option<&std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:360:47: 360:54
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:360:47: 360:54
        _1 = __getit as for<'a> unsafe fn(std::option::Option<&'a mut std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>>) -> std::option::Option<&std::cell::RefCell<std::vec::Vec<usize>>> (Pointer(ReifyFnPointer)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:360:47: 360:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:360:47: 360:54
                                         // + literal: Const { ty: for<'a> unsafe fn(Option<&'a mut Option<RefCell<Vec<usize>>>>) -> Option<&'static RefCell<Vec<usize>>> {__getit}, val: Value(<ZST>) }
        ConstEvalCounter;                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:360:17: 360:55
        _0 = LocalKey::<RefCell<Vec<usize>>>::new(move _1) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:360:17: 360:55
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:360:17: 360:46
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: unsafe fn(for<'a> unsafe fn(Option<&'a mut Option<RefCell<Vec<usize>>>>) -> Option<&'static RefCell<Vec<usize>>>) -> LocalKey<RefCell<Vec<usize>>> {LocalKey::<RefCell<Vec<usize>>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_1);                 // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:360:54: 360:55
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:365:22: 366:63
    }
}

fn __init() -> RefCell<Vec<usize>> {
    let mut _0: std::cell::RefCell<std::vec::Vec<usize>>; // return place in scope 0 at ui/destructuring-assignment/drop-order.rs:10:24: 10:43
    let mut _1: std::vec::Vec<usize>;    // in scope 0 at ui/destructuring-assignment/drop-order.rs:10:59: 10:69

    bb0: {
        _1 = Vec::<usize>::new() -> bb1; // scope 0 at ui/destructuring-assignment/drop-order.rs:10:59: 10:69
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:10:59: 10:67
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<usize> {Vec::<usize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = RefCell::<Vec<usize>>::new(move _1) -> bb2; // scope 0 at ui/destructuring-assignment/drop-order.rs:10:46: 10:70
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:10:46: 10:58
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Vec<usize>) -> RefCell<Vec<usize>> {RefCell::<Vec<usize>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:294:40: 294:40
    }
}

fn __getit(_1: Option<&mut Option<RefCell<Vec<usize>>>>) -> Option<&RefCell<Vec<usize>>> {
    debug init => _1;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:320:17: 320:21
    let mut _0: std::option::Option<&std::cell::RefCell<std::vec::Vec<usize>>>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:321:18: 321:53
    let mut _2: &std::thread::__FastLocalKeyInner<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:346:21: 355:23
    let _3: &std::thread::__FastLocalKeyInner<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:346:21: 346:26
    let mut _4: [closure@/rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:346:31: 346:38]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:346:31: 355:22
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _3 = &/*tls*/ __KEY;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:346:21: 346:26
        _2 = _3;                         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:346:21: 355:23
        _4 = [closure@/home/burak/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/thread/local.rs:346:31: 346:38] { init: move _1 }; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:346:31: 355:22
                                         // closure
                                         // + def_id: DefId(0:17 ~ drop_order[2563]::DROP_ORDER::__getit::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()) -> std::cell::RefCell<std::vec::Vec<usize>>,
                                         //     (std::option::Option<&mut std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>>,),
                                         // ]
        _0 = __FastLocalKeyInner::<RefCell<Vec<usize>>>::get::<[closure@/rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:346:31: 346:38]>(move _2, move _4) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:346:21: 355:23
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:346:27: 346:30
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a __FastLocalKeyInner<RefCell<Vec<usize>>>, [closure@/rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:346:31: 346:38]) -> Option<&'static RefCell<Vec<usize>>> {__FastLocalKeyInner::<RefCell<Vec<usize>>>::get::<[closure@/rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:346:31: 346:38]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:357:14: 357:14
    }
}

static __KEY: __FastLocalKeyInner<RefCell<Vec<usize>>> = {
    let mut _0: std::thread::__FastLocalKeyInner<std::cell::RefCell<std::vec::Vec<usize>>>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:331:31: 331:70

    bb0: {
        ConstEvalCounter;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:332:21: 332:63
        _0 = __FastLocalKeyInner::<RefCell<Vec<usize>>>::new() -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:332:21: 332:63
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:332:21: 332:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> __FastLocalKeyInner<RefCell<Vec<usize>>> {__FastLocalKeyInner::<RefCell<Vec<usize>>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:331:17: 332:64
    }
}

fn __getit::{closure#0}(_1: [closure@/rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:346:31: 346:38]) -> RefCell<Vec<usize>> {
    debug init => (_1.0: std::option::Option<&mut std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:320:17: 320:21
    let mut _0: std::cell::RefCell<std::vec::Vec<usize>>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:346:39: 346:39
    let mut _2: isize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:347:32: 347:66
    let mut _4: std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:348:74: 348:85
    let mut _5: &mut std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:348:74: 348:85
    let mut _6: isize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:348:36: 348:71
    let _8: !;                           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:9: 57:73
    let mut _9: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
    let mut _10: &[&str];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:24: 89:70
    let mut _11: &[&str; 1];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:24: 89:70
    let _12: &[&str; 1];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:24: 89:70
    let mut _13: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
    let mut _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
    let mut _18: &std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
    let _19: &std::fmt::Arguments<'_>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
    let _20: std::fmt::Arguments<'_>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
    let mut _21: &[&str];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:351:54: 351:77
    let mut _22: &[&str; 1];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:351:54: 351:77
    let _23: &[&str; 1];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:351:54: 351:77
    let mut _24: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
    let mut _25: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
    let _26: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
    scope 1 {
        debug init => _3;                // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:347:61: 347:65
        let _3: &mut std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:347:61: 347:65
        let mut _27: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
        let mut _28: &[&str; 1];         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:351:54: 351:77
        let mut _29: &[&str; 1];         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:24: 89:70
        scope 2 {
            debug value => _7;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:348:65: 348:70
            let _7: std::cell::RefCell<std::vec::Vec<usize>>; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:348:65: 348:70
        }
    }

    bb0: {
        _2 = discriminant((_1.0: std::option::Option<&mut std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>>)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:347:32: 347:66
        switchInt(move _2) -> [1: bb1, otherwise: bb8]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:347:32: 347:66
    }

    bb1: {
        _3 = move (((_1.0: std::option::Option<&mut std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>>) as Some).0: &mut std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:347:61: 347:65
        _5 = &mut (*_3);                 // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:348:74: 348:85
        _4 = Option::<RefCell<Vec<usize>>>::take(move _5) -> bb2; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:348:74: 348:85
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:348:79: 348:83
                                         // + literal: Const { ty: for<'a> fn(&'a mut Option<RefCell<Vec<usize>>>) -> Option<RefCell<Vec<usize>>> {Option::<RefCell<Vec<usize>>>::take}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_4);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:348:36: 348:71
        switchInt(move _6) -> [1: bb3, otherwise: bb4]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:348:36: 348:71
    }

    bb3: {
        _7 = move ((_4 as Some).0: std::cell::RefCell<std::vec::Vec<usize>>); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:348:65: 348:70
        _0 = move _7;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:349:40: 349:45
        goto -> bb9;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:355:22: 355:22
    }

    bb4: {
        _29 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:24: 89:70
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:24: 89:70
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(__getit::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _12 = _29;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:24: 89:70
        _11 = _12;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:24: 89:70
        _10 = move _11 as &[&str] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:24: 89:70
        _28 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:351:54: 351:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:351:54: 351:77
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(__getit::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _23 = _28;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:351:54: 351:77
        _22 = _23;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:351:54: 351:77
        _21 = move _22 as &[&str] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:351:54: 351:77
        _27 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(__getit::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _26 = _27;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
        _25 = _26;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
        _24 = move _25 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
        _20 = Arguments::<'_>::new_v1(move _21, move _24) -> [return: bb5, unwind: bb10]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _19 = &_20;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
        _18 = _19;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
        _17 = core::fmt::ArgumentV1::<'_>::new_display::<Arguments<'_>>(move _18) -> [return: bb6, unwind: bb10]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Arguments<'_>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<Arguments<'_>>}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = [move _17];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
        _15 = &_16;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
        _14 = _15;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
        _13 = move _14 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> [return: bb7, unwind: bb10]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = panic_fmt(move _9) -> bb10; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:9: 57:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:9: 57:37
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = __init() -> bb9;            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:354:25: 354:33
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:354:25: 354:31
                                         // + literal: Const { ty: fn() -> RefCell<Vec<usize>> {__init}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:355:22: 355:22
    }

    bb10 (cleanup): {
        drop(_4) -> bb11;                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:353:25: 353:26
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:346:31: 355:22
    }
}

promoted[0] in __getit::{closure#0}: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:72: 89:100
    }
}

promoted[1] in __getit::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:351:54: 351:77
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:351:54: 351:77

    bb0: {
        _1 = [const "missing default value"]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:351:54: 351:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:351:54: 351:77
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:351:54: 351:77
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/thread/local.rs:351:54: 351:77
    }
}

promoted[2] in __getit::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:24: 89:70
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:24: 89:70

    bb0: {
        _1 = [const "internal error: entered unreachable code: "]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:24: 89:70
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:24: 89:70
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:24: 89:70
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:89:24: 89:70
    }
}

fn <impl at ui/destructuring-assignment/drop-order.rs:14:1: 14:27>::drop(_1: &mut DropRecorder) -> () {
    debug self => _1;                    // in scope 0 at ui/destructuring-assignment/drop-order.rs:15:13: 15:22
    let mut _0: ();                      // return place in scope 0 at ui/destructuring-assignment/drop-order.rs:15:24: 15:24
    let _2: ();                          // in scope 0 at ui/destructuring-assignment/drop-order.rs:16:9: 16:57
    let mut _3: &std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:16:9: 16:57
    let mut _4: [closure@ui/destructuring-assignment/drop-order.rs:16:25: 16:28]; // in scope 0 at ui/destructuring-assignment/drop-order.rs:16:25: 16:56
    let mut _5: &&mut DropRecorder;      // in scope 0 at ui/destructuring-assignment/drop-order.rs:16:25: 16:56
    let mut _6: &std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:16:9: 16:57

    bb0: {
        _6 = const _;                    // scope 0 at ui/destructuring-assignment/drop-order.rs:16:9: 16:57
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:16:9: 16:57
                                         // + literal: Const { ty: &LocalKey<RefCell<Vec<usize>>>, val: Unevaluated(<DropRecorder as Drop>::drop, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/destructuring-assignment/drop-order.rs:16:9: 16:57
        _5 = &_1;                        // scope 0 at ui/destructuring-assignment/drop-order.rs:16:25: 16:56
        _4 = [closure@ui/destructuring-assignment/drop-order.rs:16:25: 16:28] { self: move _5 }; // scope 0 at ui/destructuring-assignment/drop-order.rs:16:25: 16:56
                                         // closure
                                         // + def_id: DefId(0:9 ~ drop_order[2563]::{impl#0}::drop::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     for<'a> extern "rust-call" fn((&'a std::cell::RefCell<std::vec::Vec<usize>>,)),
                                         //     (&&mut DropRecorder,),
                                         // ]
        _2 = LocalKey::<RefCell<Vec<usize>>>::with::<[closure@ui/destructuring-assignment/drop-order.rs:16:25: 16:28], ()>(move _3, move _4) -> bb1; // scope 0 at ui/destructuring-assignment/drop-order.rs:16:9: 16:57
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:16:20: 16:24
                                         // + literal: Const { ty: fn(&'static LocalKey<RefCell<Vec<usize>>>, [closure@ui/destructuring-assignment/drop-order.rs:16:25: 16:28]) {LocalKey::<RefCell<Vec<usize>>>::with::<[closure@ui/destructuring-assignment/drop-order.rs:16:25: 16:28], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/destructuring-assignment/drop-order.rs:17:6: 17:6
    }
}

promoted[0] in <impl at ui/destructuring-assignment/drop-order.rs:14:1: 14:27>::drop: &LocalKey<RefCell<Vec<usize>>> = {
    let mut _0: &std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>; // return place in scope 0 at ui/destructuring-assignment/drop-order.rs:16:9: 16:57
    let mut _1: std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:16:9: 16:19

    bb0: {
        _1 = const _;                    // scope 0 at ui/destructuring-assignment/drop-order.rs:16:9: 16:19
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:16:9: 16:19
                                         // + literal: Const { ty: LocalKey<RefCell<Vec<usize>>>, val: Unevaluated(DROP_ORDER, [], None) }
        _0 = &_1;                        // scope 0 at ui/destructuring-assignment/drop-order.rs:16:9: 16:57
        return;                          // scope 0 at ui/destructuring-assignment/drop-order.rs:16:9: 16:57
    }
}

fn <impl at ui/destructuring-assignment/drop-order.rs:14:1: 14:27>::drop::{closure#0}(_1: [closure@ui/destructuring-assignment/drop-order.rs:16:25: 16:28], _2: &RefCell<Vec<usize>>) -> () {
    debug d => _2;                       // in scope 0 at ui/destructuring-assignment/drop-order.rs:16:26: 16:27
    debug self => (*(_1.0: &&mut DropRecorder)); // in scope 0 at ui/destructuring-assignment/drop-order.rs:15:13: 15:22
    let mut _0: ();                      // return place in scope 0 at ui/destructuring-assignment/drop-order.rs:16:29: 16:29
    let mut _3: &mut std::vec::Vec<usize>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:16:29: 16:56
    let mut _4: &mut std::vec::Vec<usize>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:16:29: 16:56
    let mut _5: &mut std::cell::RefMut<'_, std::vec::Vec<usize>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:16:29: 16:56
    let mut _6: std::cell::RefMut<'_, std::vec::Vec<usize>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:16:29: 16:43
    let mut _7: &std::cell::RefCell<std::vec::Vec<usize>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:16:29: 16:43
    let mut _8: usize;                   // in scope 0 at ui/destructuring-assignment/drop-order.rs:16:49: 16:55
    let mut _9: &&mut DropRecorder;      // in scope 0 at ui/destructuring-assignment/drop-order.rs:16:25: 16:56
    let mut _10: &mut DropRecorder;      // in scope 0 at ui/destructuring-assignment/drop-order.rs:16:25: 16:56

    bb0: {
        _7 = _2;                         // scope 0 at ui/destructuring-assignment/drop-order.rs:16:29: 16:43
        _6 = RefCell::<Vec<usize>>::borrow_mut(move _7) -> bb1; // scope 0 at ui/destructuring-assignment/drop-order.rs:16:29: 16:43
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:16:31: 16:41
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<usize>>) -> RefMut<'a, Vec<usize>> {RefCell::<Vec<usize>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _6;                    // scope 0 at ui/destructuring-assignment/drop-order.rs:16:29: 16:56
        _4 = <RefMut<'_, Vec<usize>> as DerefMut>::deref_mut(move _5) -> [return: bb2, unwind: bb5]; // scope 0 at ui/destructuring-assignment/drop-order.rs:16:29: 16:56
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:16:29: 16:56
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Vec<usize>>) -> &'a mut <RefMut<'_, Vec<usize>> as Deref>::Target {<RefMut<'_, Vec<usize>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &mut (*_4);                 // scope 0 at ui/destructuring-assignment/drop-order.rs:16:29: 16:56
        _9 = deref_copy (_1.0: &&mut DropRecorder); // scope 0 at ui/destructuring-assignment/drop-order.rs:16:49: 16:55
        _10 = deref_copy (*_9);          // scope 0 at ui/destructuring-assignment/drop-order.rs:16:49: 16:55
        _8 = ((*_10).0: usize);          // scope 0 at ui/destructuring-assignment/drop-order.rs:16:49: 16:55
        _0 = Vec::<usize>::push(move _3, move _8) -> [return: bb3, unwind: bb5]; // scope 0 at ui/destructuring-assignment/drop-order.rs:16:29: 16:56
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:16:44: 16:48
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<usize>, usize) {Vec::<usize>::push}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_6) -> bb4;                 // scope 0 at ui/destructuring-assignment/drop-order.rs:16:55: 16:56
    }

    bb4: {
        return;                          // scope 0 at ui/destructuring-assignment/drop-order.rs:16:56: 16:56
    }

    bb5 (cleanup): {
        drop(_6) -> bb6;                 // scope 0 at ui/destructuring-assignment/drop-order.rs:16:55: 16:56
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/destructuring-assignment/drop-order.rs:16:25: 16:56
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/destructuring-assignment/drop-order.rs:20:11: 20:11
    let _1: std::vec::Vec<usize>;        // in scope 0 at ui/destructuring-assignment/drop-order.rs:21:9: 21:28
    let mut _2: std::boxed::Box<[usize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[usize; 5]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[usize; 5]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: DropRecorder;            // in scope 0 at ui/destructuring-assignment/drop-order.rs:24:17: 24:32
    let mut _11: (DropRecorder, DropRecorder); // in scope 0 at ui/destructuring-assignment/drop-order.rs:26:22: 26:56
    let _12: ();                         // in scope 0 at ui/destructuring-assignment/drop-order.rs:27:9: 27:30
    let mut _13: DropRecorder;           // in scope 0 at ui/destructuring-assignment/drop-order.rs:27:14: 27:29
    let _14: ();                         // in scope 0 at ui/destructuring-assignment/drop-order.rs:29:5: 32:7
    let mut _15: &std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:29:5: 32:7
    let mut _16: [closure@ui/destructuring-assignment/drop-order.rs:29:21: 29:24]; // in scope 0 at ui/destructuring-assignment/drop-order.rs:29:21: 32:6
    let mut _17: &std::vec::Vec<usize>;  // in scope 0 at ui/destructuring-assignment/drop-order.rs:29:21: 32:6
    let mut _20: DropRecorder;           // in scope 0 at ui/destructuring-assignment/drop-order.rs:37:13: 37:28
    let mut _21: DropRecorder;           // in scope 0 at ui/destructuring-assignment/drop-order.rs:38:16: 38:31
    let mut _23: (DropRecorder, DropRecorder); // in scope 0 at ui/destructuring-assignment/drop-order.rs:39:18: 39:52
    let mut _24: DropRecorder;           // in scope 0 at ui/destructuring-assignment/drop-order.rs:39:10: 39:11
    let _25: ();                         // in scope 0 at ui/destructuring-assignment/drop-order.rs:40:9: 40:30
    let mut _26: DropRecorder;           // in scope 0 at ui/destructuring-assignment/drop-order.rs:40:14: 40:29
    let _27: ();                         // in scope 0 at ui/destructuring-assignment/drop-order.rs:42:5: 42:72
    let mut _28: &std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:42:5: 42:72
    let mut _29: [closure@ui/destructuring-assignment/drop-order.rs:42:21: 42:24]; // in scope 0 at ui/destructuring-assignment/drop-order.rs:42:21: 42:71
    let mut _30: &std::vec::Vec<usize>;  // in scope 0 at ui/destructuring-assignment/drop-order.rs:42:21: 42:71
    let mut _33: bool;                   // in scope 0 at ui/destructuring-assignment/drop-order.rs:41:5: 41:6
    let mut _34: bool;                   // in scope 0 at ui/destructuring-assignment/drop-order.rs:41:5: 41:6
    let mut _35: *const [usize; 5];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug expected_drop_order => _1; // in scope 1 at ui/destructuring-assignment/drop-order.rs:21:9: 21:28
        let _18: DropRecorder;           // in scope 1 at ui/destructuring-assignment/drop-order.rs:35:13: 35:17
        let mut _31: &std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 1 at ui/destructuring-assignment/drop-order.rs:42:5: 42:72
        let mut _32: &std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 1 at ui/destructuring-assignment/drop-order.rs:29:5: 32:7
        scope 3 {
            let _9: DropRecorder;        // in scope 3 at ui/destructuring-assignment/drop-order.rs:25:13: 25:17
            scope 4 {
                debug _val => _9;        // in scope 4 at ui/destructuring-assignment/drop-order.rs:25:13: 25:17
                let _10: DropRecorder;   // in scope 4 at ui/destructuring-assignment/drop-order.rs:26:14: 26:15
                scope 5 {
                    debug x => _10;      // in scope 5 at ui/destructuring-assignment/drop-order.rs:26:14: 26:15
                }
            }
        }
        scope 6 {
            debug _val => _18;           // in scope 6 at ui/destructuring-assignment/drop-order.rs:35:13: 35:17
            let _19: DropRecorder;       // in scope 6 at ui/destructuring-assignment/drop-order.rs:36:13: 36:14
            scope 7 {
                debug x => _19;          // in scope 7 at ui/destructuring-assignment/drop-order.rs:36:13: 36:14
                let _22: DropRecorder;   // in scope 7 at ui/destructuring-assignment/drop-order.rs:39:10: 39:11
                scope 8 {
                }
                scope 9 {
                    debug lhs => _22;    // in scope 9 at ui/destructuring-assignment/drop-order.rs:39:10: 39:11
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _33 = const false;               // scope 0 at ui/destructuring-assignment/drop-order.rs:21:9: 21:28
        _34 = const false;               // scope 0 at ui/destructuring-assignment/drop-order.rs:21:9: 21:28
        _4 = const 40_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [usize; 5]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _35 = (((_7.0: std::ptr::Unique<[usize; 5]>).0: std::ptr::NonNull<[usize; 5]>).0: *const [usize; 5]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_35) = [const 1_usize, const 4_usize, const 5_usize, const 3_usize, const 2_usize]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[usize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[usize]>) -> Vec<usize> {slice::<impl [usize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = DropRecorder(const 1_usize); // scope 1 at ui/destructuring-assignment/drop-order.rs:24:17: 24:32
        drop(_8) -> [return: bb3, unwind: bb17]; // scope 1 at ui/destructuring-assignment/drop-order.rs:24:32: 24:33
    }

    bb3: {
        _9 = DropRecorder(const 2_usize); // scope 3 at ui/destructuring-assignment/drop-order.rs:25:20: 25:35
        _11 = const (DropRecorder(3_usize), DropRecorder(4_usize)); // scope 4 at ui/destructuring-assignment/drop-order.rs:26:22: 26:56
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:26:22: 26:56
                                         // + literal: Const { ty: (DropRecorder, DropRecorder), val: Value(ByRef(..)) }
        _10 = move (_11.0: DropRecorder); // scope 4 at ui/destructuring-assignment/drop-order.rs:26:14: 26:15
        drop((_11.1: DropRecorder)) -> [return: bb19, unwind: bb15]; // scope 4 at ui/destructuring-assignment/drop-order.rs:26:56: 26:57
    }

    bb4: {
        drop(_10) -> [return: bb5, unwind: bb16]; // scope 4 at ui/destructuring-assignment/drop-order.rs:28:5: 28:6
    }

    bb5: {
        drop(_9) -> [return: bb6, unwind: bb17]; // scope 3 at ui/destructuring-assignment/drop-order.rs:28:5: 28:6
    }

    bb6: {
        _32 = const _;                   // scope 1 at ui/destructuring-assignment/drop-order.rs:29:5: 32:7
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:29:5: 32:7
                                         // + literal: Const { ty: &LocalKey<RefCell<Vec<usize>>>, val: Unevaluated(main, [], Some(promoted[1])) }
        _15 = _32;                       // scope 1 at ui/destructuring-assignment/drop-order.rs:29:5: 32:7
        _17 = &_1;                       // scope 1 at ui/destructuring-assignment/drop-order.rs:29:21: 32:6
        _16 = [closure@ui/destructuring-assignment/drop-order.rs:29:21: 29:24] { expected_drop_order: move _17 }; // scope 1 at ui/destructuring-assignment/drop-order.rs:29:21: 32:6
                                         // closure
                                         // + def_id: DefId(0:11 ~ drop_order[2563]::main::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     for<'a> extern "rust-call" fn((&'a std::cell::RefCell<std::vec::Vec<usize>>,)),
                                         //     (&std::vec::Vec<usize>,),
                                         // ]
        _14 = LocalKey::<RefCell<Vec<usize>>>::with::<[closure@ui/destructuring-assignment/drop-order.rs:29:21: 29:24], ()>(move _15, move _16) -> [return: bb7, unwind: bb17]; // scope 1 at ui/destructuring-assignment/drop-order.rs:29:5: 32:7
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:29:16: 29:20
                                         // + literal: Const { ty: fn(&'static LocalKey<RefCell<Vec<usize>>>, [closure@ui/destructuring-assignment/drop-order.rs:29:21: 29:24]) {LocalKey::<RefCell<Vec<usize>>>::with::<[closure@ui/destructuring-assignment/drop-order.rs:29:21: 29:24], ()>}, val: Value(<ZST>) }
    }

    bb7: {
        _20 = DropRecorder(const 1_usize); // scope 7 at ui/destructuring-assignment/drop-order.rs:37:13: 37:28
        drop(_20) -> [return: bb8, unwind: bb22]; // scope 7 at ui/destructuring-assignment/drop-order.rs:37:27: 37:28
    }

    bb8: {
        _21 = const DropRecorder(2_usize); // scope 7 at ui/destructuring-assignment/drop-order.rs:38:16: 38:31
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:38:16: 38:31
                                         // + literal: Const { ty: DropRecorder, val: Value(Scalar(0x0000000000000002)) }
        _34 = const true;                // scope 7 at ui/destructuring-assignment/drop-order.rs:38:9: 38:13
        _18 = move _21;                  // scope 7 at ui/destructuring-assignment/drop-order.rs:38:9: 38:13
        _23 = const (DropRecorder(3_usize), DropRecorder(4_usize)); // scope 7 at ui/destructuring-assignment/drop-order.rs:39:18: 39:52
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:39:18: 39:52
                                         // + literal: Const { ty: (DropRecorder, DropRecorder), val: Value(ByRef(..)) }
        _22 = move (_23.0: DropRecorder); // scope 7 at ui/destructuring-assignment/drop-order.rs:39:10: 39:11
        drop((_23.1: DropRecorder)) -> [return: bb20, unwind: bb14]; // scope 7 at ui/destructuring-assignment/drop-order.rs:39:51: 39:52
    }

    bb9: {
        drop(_19) -> [return: bb10, unwind: bb24]; // scope 6 at ui/destructuring-assignment/drop-order.rs:41:5: 41:6
    }

    bb10: {
        _33 = const false;               // scope 6 at ui/destructuring-assignment/drop-order.rs:41:5: 41:6
        drop(_18) -> [return: bb11, unwind: bb17]; // scope 1 at ui/destructuring-assignment/drop-order.rs:41:5: 41:6
    }

    bb11: {
        _34 = const false;               // scope 1 at ui/destructuring-assignment/drop-order.rs:41:5: 41:6
        _31 = const _;                   // scope 1 at ui/destructuring-assignment/drop-order.rs:42:5: 42:72
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:42:5: 42:72
                                         // + literal: Const { ty: &LocalKey<RefCell<Vec<usize>>>, val: Unevaluated(main, [], Some(promoted[0])) }
        _28 = _31;                       // scope 1 at ui/destructuring-assignment/drop-order.rs:42:5: 42:72
        _30 = &_1;                       // scope 1 at ui/destructuring-assignment/drop-order.rs:42:21: 42:71
        _29 = [closure@ui/destructuring-assignment/drop-order.rs:42:21: 42:24] { expected_drop_order: move _30 }; // scope 1 at ui/destructuring-assignment/drop-order.rs:42:21: 42:71
                                         // closure
                                         // + def_id: DefId(0:12 ~ drop_order[2563]::main::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     for<'a> extern "rust-call" fn((&'a std::cell::RefCell<std::vec::Vec<usize>>,)),
                                         //     (&std::vec::Vec<usize>,),
                                         // ]
        _27 = LocalKey::<RefCell<Vec<usize>>>::with::<[closure@ui/destructuring-assignment/drop-order.rs:42:21: 42:24], ()>(move _28, move _29) -> [return: bb12, unwind: bb17]; // scope 1 at ui/destructuring-assignment/drop-order.rs:42:5: 42:72
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:42:16: 42:20
                                         // + literal: Const { ty: fn(&'static LocalKey<RefCell<Vec<usize>>>, [closure@ui/destructuring-assignment/drop-order.rs:42:21: 42:24]) {LocalKey::<RefCell<Vec<usize>>>::with::<[closure@ui/destructuring-assignment/drop-order.rs:42:21: 42:24], ()>}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_1) -> bb13;                // scope 0 at ui/destructuring-assignment/drop-order.rs:43:1: 43:2
    }

    bb13: {
        return;                          // scope 0 at ui/destructuring-assignment/drop-order.rs:43:2: 43:2
    }

    bb14 (cleanup): {
        drop(_22) -> bb22;               // scope 7 at ui/destructuring-assignment/drop-order.rs:39:51: 39:52
    }

    bb15 (cleanup): {
        drop(_10) -> bb16;               // scope 4 at ui/destructuring-assignment/drop-order.rs:28:5: 28:6
    }

    bb16 (cleanup): {
        drop(_9) -> bb17;                // scope 3 at ui/destructuring-assignment/drop-order.rs:28:5: 28:6
    }

    bb17 (cleanup): {
        drop(_1) -> bb18;                // scope 0 at ui/destructuring-assignment/drop-order.rs:43:1: 43:2
    }

    bb18 (cleanup): {
        resume;                          // scope 0 at ui/destructuring-assignment/drop-order.rs:20:1: 43:2
    }

    bb19: {
        _13 = const DropRecorder(5_usize); // scope 5 at ui/destructuring-assignment/drop-order.rs:27:14: 27:29
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:27:14: 27:29
                                         // + literal: Const { ty: DropRecorder, val: Value(Scalar(0x0000000000000005)) }
        _12 = std::mem::drop::<DropRecorder>(move _13) -> [return: bb4, unwind: bb15]; // scope 5 at ui/destructuring-assignment/drop-order.rs:27:9: 27:30
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:27:9: 27:13
                                         // + literal: Const { ty: fn(DropRecorder) {std::mem::drop::<DropRecorder>}, val: Value(<ZST>) }
    }

    bb20: {
        _24 = move _22;                  // scope 9 at ui/destructuring-assignment/drop-order.rs:39:10: 39:11
        _33 = const true;                // scope 9 at ui/destructuring-assignment/drop-order.rs:39:10: 39:11
        _19 = move _24;                  // scope 9 at ui/destructuring-assignment/drop-order.rs:39:10: 39:11
        _26 = const DropRecorder(5_usize); // scope 7 at ui/destructuring-assignment/drop-order.rs:40:14: 40:29
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:40:14: 40:29
                                         // + literal: Const { ty: DropRecorder, val: Value(Scalar(0x0000000000000005)) }
        _25 = std::mem::drop::<DropRecorder>(move _26) -> [return: bb9, unwind: bb22]; // scope 7 at ui/destructuring-assignment/drop-order.rs:40:9: 40:30
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:40:9: 40:13
                                         // + literal: Const { ty: fn(DropRecorder) {std::mem::drop::<DropRecorder>}, val: Value(<ZST>) }
    }

    bb21 (cleanup): {
        drop(_19) -> bb24;               // scope 6 at ui/destructuring-assignment/drop-order.rs:41:5: 41:6
    }

    bb22 (cleanup): {
        switchInt(_33) -> [0: bb24, otherwise: bb21]; // scope 6 at ui/destructuring-assignment/drop-order.rs:41:5: 41:6
    }

    bb23 (cleanup): {
        drop(_18) -> bb17;               // scope 1 at ui/destructuring-assignment/drop-order.rs:41:5: 41:6
    }

    bb24 (cleanup): {
        switchInt(_34) -> [0: bb17, otherwise: bb23]; // scope 1 at ui/destructuring-assignment/drop-order.rs:41:5: 41:6
    }
}

promoted[0] in main: &LocalKey<RefCell<Vec<usize>>> = {
    let mut _0: &std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>; // return place in scope 0 at ui/destructuring-assignment/drop-order.rs:42:5: 42:72
    let mut _1: std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:42:5: 42:15

    bb0: {
        _1 = const _;                    // scope 0 at ui/destructuring-assignment/drop-order.rs:42:5: 42:15
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:42:5: 42:15
                                         // + literal: Const { ty: LocalKey<RefCell<Vec<usize>>>, val: Unevaluated(DROP_ORDER, [], None) }
        _0 = &_1;                        // scope 0 at ui/destructuring-assignment/drop-order.rs:42:5: 42:72
        return;                          // scope 0 at ui/destructuring-assignment/drop-order.rs:42:5: 42:72
    }
}

promoted[1] in main: &LocalKey<RefCell<Vec<usize>>> = {
    let mut _0: &std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>; // return place in scope 0 at ui/destructuring-assignment/drop-order.rs:29:5: 32:7
    let mut _1: std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:29:5: 29:15

    bb0: {
        _1 = const _;                    // scope 0 at ui/destructuring-assignment/drop-order.rs:29:5: 29:15
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:29:5: 29:15
                                         // + literal: Const { ty: LocalKey<RefCell<Vec<usize>>>, val: Unevaluated(DROP_ORDER, [], None) }
        _0 = &_1;                        // scope 0 at ui/destructuring-assignment/drop-order.rs:29:5: 32:7
        return;                          // scope 0 at ui/destructuring-assignment/drop-order.rs:29:5: 32:7
    }
}

fn main::{closure#0}(_1: [closure@ui/destructuring-assignment/drop-order.rs:29:21: 29:24], _2: &RefCell<Vec<usize>>) -> () {
    debug d => _2;                       // in scope 0 at ui/destructuring-assignment/drop-order.rs:29:22: 29:23
    debug expected_drop_order => (*(_1.0: &std::vec::Vec<usize>)); // in scope 0 at ui/destructuring-assignment/drop-order.rs:21:9: 21:28
    let mut _0: ();                      // return place in scope 0 at ui/destructuring-assignment/drop-order.rs:29:25: 29:25
    let mut _3: (&&std::vec::Vec<usize>, &&std::vec::Vec<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &&std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: &std::vec::Vec<usize>;       // in scope 0 at ui/destructuring-assignment/drop-order.rs:30:20: 30:32
    let _6: &std::vec::Vec<usize>;       // in scope 0 at ui/destructuring-assignment/drop-order.rs:30:21: 30:32
    let mut _7: &std::cell::Ref<'_, std::vec::Vec<usize>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:30:22: 30:32
    let _8: std::cell::Ref<'_, std::vec::Vec<usize>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:30:22: 30:32
    let mut _9: &std::cell::RefCell<std::vec::Vec<usize>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:30:22: 30:32
    let mut _10: &&std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _11: &std::vec::Vec<usize>;      // in scope 0 at ui/destructuring-assignment/drop-order.rs:30:34: 30:54
    let _12: &&std::vec::Vec<usize>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _13: &&std::vec::Vec<usize>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: &&std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: &&std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &&std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &&std::vec::Vec<usize>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &&std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &&std::vec::Vec<usize>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _26: ();                         // in scope 0 at ui/destructuring-assignment/drop-order.rs:31:9: 31:31
    let mut _27: &mut std::vec::Vec<usize>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:31:9: 31:31
    let mut _28: &mut std::vec::Vec<usize>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:31:9: 31:31
    let mut _29: &mut std::cell::RefMut<'_, std::vec::Vec<usize>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:31:9: 31:31
    let mut _30: std::cell::RefMut<'_, std::vec::Vec<usize>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:31:9: 31:23
    let mut _31: &std::cell::RefCell<std::vec::Vec<usize>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:31:9: 31:23
    let mut _32: &std::vec::Vec<usize>;  // in scope 0 at ui/destructuring-assignment/drop-order.rs:29:21: 32:6
    scope 1 {
        debug left_val => _12;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _13;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _18: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _18;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _9 = _2;                         // scope 0 at ui/destructuring-assignment/drop-order.rs:30:22: 30:32
        _8 = RefCell::<Vec<usize>>::borrow(move _9) -> bb1; // scope 0 at ui/destructuring-assignment/drop-order.rs:30:22: 30:32
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:30:24: 30:30
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<usize>>) -> Ref<'a, Vec<usize>> {RefCell::<Vec<usize>>::borrow}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_8;                        // scope 0 at ui/destructuring-assignment/drop-order.rs:30:22: 30:32
        _6 = <Ref<'_, Vec<usize>> as Deref>::deref(move _7) -> [return: bb2, unwind: bb12]; // scope 0 at ui/destructuring-assignment/drop-order.rs:30:21: 30:32
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:30:21: 30:32
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<usize>>) -> &'a <Ref<'_, Vec<usize>> as Deref>::Target {<Ref<'_, Vec<usize>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = _6;                         // scope 0 at ui/destructuring-assignment/drop-order.rs:30:20: 30:32
        _4 = &_5;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _32 = deref_copy (_1.0: &std::vec::Vec<usize>); // scope 0 at ui/destructuring-assignment/drop-order.rs:30:34: 30:54
        _11 = _32;                       // scope 0 at ui/destructuring-assignment/drop-order.rs:30:34: 30:54
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _10);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_3.0: &&std::vec::Vec<usize>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_3.1: &&std::vec::Vec<usize>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = _12;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = _13;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = <&Vec<usize> as PartialEq>::eq(move _16, move _17) -> [return: bb3, unwind: bb12]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &Vec<usize>, &'b &Vec<usize>) -> bool {<&Vec<usize> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = Not(move _15);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _18 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<&Vec<usize>, &Vec<usize>>(move _20, move _21, move _23, move _25) -> bb12; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &Vec<usize>, &'b &Vec<usize>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&Vec<usize>, &Vec<usize>>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_8) -> bb6;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb6: {
        _31 = _2;                        // scope 0 at ui/destructuring-assignment/drop-order.rs:31:9: 31:23
        _30 = RefCell::<Vec<usize>>::borrow_mut(move _31) -> bb7; // scope 0 at ui/destructuring-assignment/drop-order.rs:31:9: 31:23
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:31:11: 31:21
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<usize>>) -> RefMut<'a, Vec<usize>> {RefCell::<Vec<usize>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb7: {
        _29 = &mut _30;                  // scope 0 at ui/destructuring-assignment/drop-order.rs:31:9: 31:31
        _28 = <RefMut<'_, Vec<usize>> as DerefMut>::deref_mut(move _29) -> [return: bb8, unwind: bb11]; // scope 0 at ui/destructuring-assignment/drop-order.rs:31:9: 31:31
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:31:9: 31:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Vec<usize>>) -> &'a mut <RefMut<'_, Vec<usize>> as Deref>::Target {<RefMut<'_, Vec<usize>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb8: {
        _27 = &mut (*_28);               // scope 0 at ui/destructuring-assignment/drop-order.rs:31:9: 31:31
        _26 = Vec::<usize>::clear(move _27) -> [return: bb9, unwind: bb11]; // scope 0 at ui/destructuring-assignment/drop-order.rs:31:9: 31:31
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:31:24: 31:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<usize>) {Vec::<usize>::clear}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_30) -> bb10;               // scope 0 at ui/destructuring-assignment/drop-order.rs:31:31: 31:32
    }

    bb10: {
        return;                          // scope 0 at ui/destructuring-assignment/drop-order.rs:32:6: 32:6
    }

    bb11 (cleanup): {
        drop(_30) -> bb13;               // scope 0 at ui/destructuring-assignment/drop-order.rs:31:31: 31:32
    }

    bb12 (cleanup): {
        drop(_8) -> bb13;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/destructuring-assignment/drop-order.rs:29:21: 32:6
    }
}

fn main::{closure#1}(_1: [closure@ui/destructuring-assignment/drop-order.rs:42:21: 42:24], _2: &RefCell<Vec<usize>>) -> () {
    debug d => _2;                       // in scope 0 at ui/destructuring-assignment/drop-order.rs:42:22: 42:23
    debug expected_drop_order => (*(_1.0: &std::vec::Vec<usize>)); // in scope 0 at ui/destructuring-assignment/drop-order.rs:21:9: 21:28
    let mut _0: ();                      // return place in scope 0 at ui/destructuring-assignment/drop-order.rs:42:25: 42:25
    let mut _3: (&&std::vec::Vec<usize>, &&std::vec::Vec<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &&std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: &std::vec::Vec<usize>;       // in scope 0 at ui/destructuring-assignment/drop-order.rs:42:36: 42:48
    let _6: &std::vec::Vec<usize>;       // in scope 0 at ui/destructuring-assignment/drop-order.rs:42:37: 42:48
    let mut _7: &std::cell::Ref<'_, std::vec::Vec<usize>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:42:38: 42:48
    let _8: std::cell::Ref<'_, std::vec::Vec<usize>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:42:38: 42:48
    let mut _9: &std::cell::RefCell<std::vec::Vec<usize>>; // in scope 0 at ui/destructuring-assignment/drop-order.rs:42:38: 42:48
    let mut _10: &&std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _11: &std::vec::Vec<usize>;      // in scope 0 at ui/destructuring-assignment/drop-order.rs:42:50: 42:70
    let _12: &&std::vec::Vec<usize>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _13: &&std::vec::Vec<usize>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: &&std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: &&std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &&std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &&std::vec::Vec<usize>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &&std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &&std::vec::Vec<usize>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: &std::vec::Vec<usize>;  // in scope 0 at ui/destructuring-assignment/drop-order.rs:42:21: 42:71
    scope 1 {
        debug left_val => _12;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _13;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _18: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _18;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _9 = _2;                         // scope 0 at ui/destructuring-assignment/drop-order.rs:42:38: 42:48
        _8 = RefCell::<Vec<usize>>::borrow(move _9) -> bb1; // scope 0 at ui/destructuring-assignment/drop-order.rs:42:38: 42:48
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:42:40: 42:46
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<usize>>) -> Ref<'a, Vec<usize>> {RefCell::<Vec<usize>>::borrow}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_8;                        // scope 0 at ui/destructuring-assignment/drop-order.rs:42:38: 42:48
        _6 = <Ref<'_, Vec<usize>> as Deref>::deref(move _7) -> [return: bb2, unwind: bb7]; // scope 0 at ui/destructuring-assignment/drop-order.rs:42:37: 42:48
                                         // mir::Constant
                                         // + span: ui/destructuring-assignment/drop-order.rs:42:37: 42:48
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<usize>>) -> &'a <Ref<'_, Vec<usize>> as Deref>::Target {<Ref<'_, Vec<usize>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = _6;                         // scope 0 at ui/destructuring-assignment/drop-order.rs:42:36: 42:48
        _4 = &_5;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _26 = deref_copy (_1.0: &std::vec::Vec<usize>); // scope 0 at ui/destructuring-assignment/drop-order.rs:42:50: 42:70
        _11 = _26;                       // scope 0 at ui/destructuring-assignment/drop-order.rs:42:50: 42:70
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _10);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_3.0: &&std::vec::Vec<usize>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_3.1: &&std::vec::Vec<usize>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = _12;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = _13;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = <&Vec<usize> as PartialEq>::eq(move _16, move _17) -> [return: bb3, unwind: bb7]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &Vec<usize>, &'b &Vec<usize>) -> bool {<&Vec<usize> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = Not(move _15);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _18 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<&Vec<usize>, &Vec<usize>>(move _20, move _21, move _23, move _25) -> bb7; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &Vec<usize>, &'b &Vec<usize>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&Vec<usize>, &Vec<usize>>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_8) -> bb6;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb6: {
        return;                          // scope 0 at ui/destructuring-assignment/drop-order.rs:42:71: 42:71
    }

    bb7 (cleanup): {
        drop(_8) -> bb8;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/destructuring-assignment/drop-order.rs:42:21: 42:71
    }
}

fn DropRecorder(_1: usize) -> DropRecorder {
    let mut _0: DropRecorder;            // return place in scope 0 at ui/destructuring-assignment/drop-order.rs:13:1: 13:20

    bb0: {
        _0 = DropRecorder(move _1);      // scope 0 at ui/destructuring-assignment/drop-order.rs:13:1: 13:20
        return;                          // scope 0 at ui/destructuring-assignment/drop-order.rs:13:1: 13:20
    }
}

// MIR FOR CTFE
fn DropRecorder(_1: usize) -> DropRecorder {
    let mut _0: DropRecorder;            // return place in scope 0 at ui/destructuring-assignment/drop-order.rs:13:1: 13:20

    bb0: {
        _0 = DropRecorder(move _1);      // scope 0 at ui/destructuring-assignment/drop-order.rs:13:1: 13:20
        return;                          // scope 0 at ui/destructuring-assignment/drop-order.rs:13:1: 13:20
    }
}
