// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const DROP_ORDER: LocalKey<RefCell<Vec<usize>>> = {
    let mut _0: std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>;
    let mut _1: for<'a> unsafe fn(std::option::Option<&'a mut std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>>) -> std::option::Option<&std::cell::RefCell<std::vec::Vec<usize>>>;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        _1 = __getit as for<'a> unsafe fn(std::option::Option<&'a mut std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>>) -> std::option::Option<&std::cell::RefCell<std::vec::Vec<usize>>> (Pointer(ReifyFnPointer));
        ConstEvalCounter;
        _0 = LocalKey::<RefCell<Vec<usize>>>::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

fn __init() -> RefCell<Vec<usize>> {
    let mut _0: std::cell::RefCell<std::vec::Vec<usize>>;
    let mut _1: std::vec::Vec<usize>;

    bb0: {
        _1 = Vec::<usize>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = RefCell::<Vec<usize>>::new(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn __getit(_1: Option<&mut Option<RefCell<Vec<usize>>>>) -> Option<&RefCell<Vec<usize>>> {
    debug init => _1;
    let mut _0: std::option::Option<&std::cell::RefCell<std::vec::Vec<usize>>>;
    let _2: &std::thread::local_impl::Key<std::cell::RefCell<std::vec::Vec<usize>>>;
    let mut _3: [closure@/rustc/839e9a6e1210934fd24b15548b811a97c77138fc/library/std/src/sys/common/thread_local/fast_local.rs:95:31: 95:38];
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _2 = &/*tls*/ __KEY;
        _3 = [closure@/home/daniel/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/sys/common/thread_local/fast_local.rs:95:31: 95:38] { init: move _1 };
        _0 = Key::<RefCell<Vec<usize>>>::get::<[closure@/rustc/839e9a6e1210934fd24b15548b811a97c77138fc/library/std/src/sys/common/thread_local/fast_local.rs:95:31: 95:38]>(_2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

static __KEY: Key<RefCell<Vec<usize>>> = {
    let mut _0: std::thread::local_impl::Key<std::cell::RefCell<std::vec::Vec<usize>>>;

    bb0: {
        ConstEvalCounter;
        _0 = Key::<RefCell<Vec<usize>>>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn __getit::{closure#0}(_1: [closure@/rustc/839e9a6e1210934fd24b15548b811a97c77138fc/library/std/src/sys/common/thread_local/fast_local.rs:95:31: 95:38]) -> RefCell<Vec<usize>> {
    debug init => (_1.0: std::option::Option<&mut std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>>);
    let mut _0: std::cell::RefCell<std::vec::Vec<usize>>;
    let mut _2: isize;
    let mut _4: std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>;
    let mut _5: isize;
    let mut _7: bool;
    let _8: !;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 0];
    let _13: [core::fmt::rt::Argument<'_>; 0];
    scope 1 {
        debug init => _3;
        let _3: &mut std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>;
        let mut _14: &[&str; 1];
        scope 2 {
            debug value => _6;
            let _6: std::cell::RefCell<std::vec::Vec<usize>>;
        }
    }

    bb0: {
        _2 = discriminant((_1.0: std::option::Option<&mut std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>>));
        switchInt(move _2) -> [1: bb1, otherwise: bb9];
    }

    bb1: {
        _3 = move (((_1.0: std::option::Option<&mut std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>>) as Some).0: &mut std::option::Option<std::cell::RefCell<std::vec::Vec<usize>>>);
        _4 = Option::<RefCell<Vec<usize>>>::take(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_4);
        switchInt(move _5) -> [1: bb3, otherwise: bb4];
    }

    bb3: {
        _6 = move ((_4 as Some).0: std::cell::RefCell<std::vec::Vec<usize>>);
        _0 = move _6;
        goto -> bb10;
    }

    bb4: {
        _7 = const true;
        switchInt(move _7) -> [0: bb8, otherwise: bb5];
    }

    bb5: {
        _14 = const _;
        _10 = _14 as &[&str] (Pointer(Unsize));
        _13 = core::fmt::rt::Argument::<'_>::none() -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _8 = panic_fmt(move _9) -> bb11;
    }

    bb8: {
        drop(_4) -> [return: bb9, unwind continue];
    }

    bb9: {
        _0 = __init() -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_4) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }
}

promoted[0] in __getit::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "internal error: entered unreachable code: missing default value"];
        _0 = &_1;
        return;
    }
}

fn <impl at ui/destructuring-assignment/drop-order.rs:14:1: 14:27>::drop(_1: &mut DropRecorder) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: [closure@ui/destructuring-assignment/drop-order.rs:16:25: 16:28];
    let mut _4: &&mut DropRecorder;
    let mut _5: &std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>;

    bb0: {
        _5 = const _;
        _4 = &_1;
        _3 = [closure@ui/destructuring-assignment/drop-order.rs:16:25: 16:28] { self: move _4 };
        _2 = LocalKey::<RefCell<Vec<usize>>>::with::<[closure@ui/destructuring-assignment/drop-order.rs:16:25: 16:28], ()>(_5, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in <impl at ui/destructuring-assignment/drop-order.rs:14:1: 14:27>::drop: &LocalKey<RefCell<Vec<usize>>> = {
    let mut _0: &std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>;
    let mut _1: std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn <impl at ui/destructuring-assignment/drop-order.rs:14:1: 14:27>::drop::{closure#0}(_1: [closure@ui/destructuring-assignment/drop-order.rs:16:25: 16:28], _2: &RefCell<Vec<usize>>) -> () {
    debug d => _2;
    debug self => (*(_1.0: &&mut DropRecorder));
    let mut _0: ();
    let mut _3: &mut std::vec::Vec<usize>;
    let mut _4: &mut std::vec::Vec<usize>;
    let mut _5: &mut std::cell::RefMut<'_, std::vec::Vec<usize>>;
    let mut _6: std::cell::RefMut<'_, std::vec::Vec<usize>>;
    let mut _7: usize;
    let mut _8: &&mut DropRecorder;
    let mut _9: &mut DropRecorder;

    bb0: {
        _6 = RefCell::<Vec<usize>>::borrow_mut(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &mut _6;
        _4 = <RefMut<'_, Vec<usize>> as DerefMut>::deref_mut(move _5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _3 = _4;
        _8 = deref_copy (_1.0: &&mut DropRecorder);
        _9 = deref_copy (*_8);
        _7 = ((*_9).0: usize);
        _0 = Vec::<usize>::push(move _3, move _7) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_6) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<usize>;
    let mut _2: std::boxed::Box<[usize]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[usize; 5]>;
    let mut _7: DropRecorder;
    let mut _10: (DropRecorder, DropRecorder);
    let mut _11: DropRecorder;
    let mut _12: DropRecorder;
    let _13: ();
    let mut _14: DropRecorder;
    let _15: ();
    let mut _16: [closure@ui/destructuring-assignment/drop-order.rs:29:21: 29:24];
    let mut _17: &std::vec::Vec<usize>;
    let mut _20: DropRecorder;
    let mut _21: DropRecorder;
    let mut _23: (DropRecorder, DropRecorder);
    let mut _24: DropRecorder;
    let mut _25: DropRecorder;
    let mut _26: DropRecorder;
    let _27: ();
    let mut _28: DropRecorder;
    let _29: ();
    let mut _30: [closure@ui/destructuring-assignment/drop-order.rs:42:21: 42:24];
    let mut _31: &std::vec::Vec<usize>;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: *const [usize; 5];
    let mut _37: *const ();
    let mut _38: usize;
    let mut _39: usize;
    let mut _40: usize;
    let mut _41: usize;
    let mut _42: bool;
    scope 1 {
        debug expected_drop_order => _1;
        let _18: DropRecorder;
        let mut _32: &std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>;
        let mut _33: &std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>;
        scope 3 {
            let _8: DropRecorder;
            scope 4 {
                debug _val => _8;
                let _9: DropRecorder;
                scope 5 {
                    debug x => _9;
                }
            }
        }
        scope 6 {
            debug _val => _18;
            let _19: DropRecorder;
            scope 7 {
                debug x => _19;
                let _22: DropRecorder;
                scope 8 {
                }
                scope 9 {
                    debug lhs => _22;
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _35 = const false;
        _34 = const false;
        _3 = SizeOf([usize; 5]);
        _4 = AlignOf([usize; 5]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [usize; 5]);
        _36 = (((_6.0: std::ptr::Unique<[usize; 5]>).0: std::ptr::NonNull<[usize; 5]>).0: *const [usize; 5]);
        _37 = _36 as *const () (PtrToPtr);
        _38 = _37 as usize (Transmute);
        _39 = AlignOf(usize);
        _40 = Sub(_39, const 1_usize);
        _41 = BitAnd(_38, _40);
        _42 = Eq(_41, const 0_usize);
        assert(_42, "misaligned pointer dereference: address must be a multiple of {} but is {}", _39, _38) -> [success: bb25, unwind unreachable];
    }

    bb2: {
        _7 = DropRecorder(const 1_usize);
        drop(_7) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _8 = DropRecorder(const 2_usize);
        _11 = DropRecorder(const 3_usize);
        _12 = DropRecorder(const 4_usize);
        _10 = (move _11, move _12);
        _9 = move (_10.0: DropRecorder);
        drop((_10.1: DropRecorder)) -> [return: bb19, unwind: bb15];
    }

    bb4: {
        drop(_9) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        drop(_8) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        _33 = const _;
        _17 = &_1;
        _16 = [closure@ui/destructuring-assignment/drop-order.rs:29:21: 29:24] { expected_drop_order: move _17 };
        _15 = LocalKey::<RefCell<Vec<usize>>>::with::<[closure@ui/destructuring-assignment/drop-order.rs:29:21: 29:24], ()>(_33, move _16) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _20 = DropRecorder(const 1_usize);
        drop(_20) -> [return: bb8, unwind: bb22];
    }

    bb8: {
        _21 = DropRecorder(const 2_usize);
        _35 = const true;
        _18 = move _21;
        _24 = DropRecorder(const 3_usize);
        _25 = DropRecorder(const 4_usize);
        _23 = (move _24, move _25);
        _22 = move (_23.0: DropRecorder);
        drop((_23.1: DropRecorder)) -> [return: bb20, unwind: bb14];
    }

    bb9: {
        drop(_19) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        _34 = const false;
        drop(_18) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _35 = const false;
        _32 = const _;
        _31 = &_1;
        _30 = [closure@ui/destructuring-assignment/drop-order.rs:42:21: 42:24] { expected_drop_order: move _31 };
        _29 = LocalKey::<RefCell<Vec<usize>>>::with::<[closure@ui/destructuring-assignment/drop-order.rs:42:21: 42:24], ()>(_32, move _30) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        drop(_1) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_22) -> [return: bb22, unwind terminate];
    }

    bb15 (cleanup): {
        drop(_9) -> [return: bb16, unwind terminate];
    }

    bb16 (cleanup): {
        drop(_8) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_1) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19: {
        _14 = DropRecorder(const 5_usize);
        _13 = std::mem::drop::<DropRecorder>(move _14) -> [return: bb4, unwind: bb15];
    }

    bb20: {
        _26 = move _22;
        _34 = const true;
        _19 = move _26;
        _28 = DropRecorder(const 5_usize);
        _27 = std::mem::drop::<DropRecorder>(move _28) -> [return: bb9, unwind: bb22];
    }

    bb21 (cleanup): {
        drop(_19) -> [return: bb24, unwind terminate];
    }

    bb22 (cleanup): {
        switchInt(_34) -> [0: bb24, otherwise: bb21];
    }

    bb23 (cleanup): {
        drop(_18) -> [return: bb17, unwind terminate];
    }

    bb24 (cleanup): {
        switchInt(_35) -> [0: bb17, otherwise: bb23];
    }

    bb25: {
        (*_36) = [const 1_usize, const 4_usize, const 5_usize, const 3_usize, const 2_usize];
        _2 = move _6 as std::boxed::Box<[usize]> (Pointer(Unsize));
        _1 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &LocalKey<RefCell<Vec<usize>>> = {
    let mut _0: &std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>;
    let mut _1: std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &LocalKey<RefCell<Vec<usize>>> = {
    let mut _0: &std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>;
    let mut _1: std::thread::LocalKey<std::cell::RefCell<std::vec::Vec<usize>>>;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/destructuring-assignment/drop-order.rs:29:21: 29:24], _2: &RefCell<Vec<usize>>) -> () {
    debug d => _2;
    debug expected_drop_order => (*(_1.0: &std::vec::Vec<usize>));
    let mut _0: ();
    let mut _3: (&&std::vec::Vec<usize>, &&std::vec::Vec<usize>);
    let mut _4: &&std::vec::Vec<usize>;
    let _5: &std::vec::Vec<usize>;
    let _6: &std::vec::Vec<usize>;
    let mut _7: &std::cell::Ref<'_, std::vec::Vec<usize>>;
    let _8: std::cell::Ref<'_, std::vec::Vec<usize>>;
    let mut _9: &&std::vec::Vec<usize>;
    let _10: &std::vec::Vec<usize>;
    let _11: &&std::vec::Vec<usize>;
    let _12: &&std::vec::Vec<usize>;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let _18: ();
    let mut _19: &mut std::vec::Vec<usize>;
    let mut _20: &mut std::vec::Vec<usize>;
    let mut _21: &mut std::cell::RefMut<'_, std::vec::Vec<usize>>;
    let mut _22: std::cell::RefMut<'_, std::vec::Vec<usize>>;
    let mut _23: &std::vec::Vec<usize>;
    scope 1 {
        debug left_val => _11;
        debug right_val => _12;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }

    bb0: {
        _8 = RefCell::<Vec<usize>>::borrow(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_8;
        _6 = <Ref<'_, Vec<usize>> as Deref>::deref(move _7) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _5 = _6;
        _4 = &_5;
        _23 = deref_copy (_1.0: &std::vec::Vec<usize>);
        _10 = _23;
        _9 = &_10;
        _3 = (move _4, move _9);
        _11 = (_3.0: &&std::vec::Vec<usize>);
        _12 = (_3.1: &&std::vec::Vec<usize>);
        _14 = <&Vec<usize> as PartialEq>::eq(_11, _12) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<&Vec<usize>, &Vec<usize>>(move _15, _11, _12, move _17) -> bb12;
    }

    bb5: {
        drop(_8) -> [return: bb6, unwind continue];
    }

    bb6: {
        _22 = RefCell::<Vec<usize>>::borrow_mut(_2) -> [return: bb7, unwind continue];
    }

    bb7: {
        _21 = &mut _22;
        _20 = <RefMut<'_, Vec<usize>> as DerefMut>::deref_mut(move _21) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        _19 = _20;
        _18 = Vec::<usize>::clear(move _19) -> [return: bb9, unwind: bb11];
    }

    bb9: {
        drop(_22) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_22) -> [return: bb13, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_8) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }
}

fn main::{closure#1}(_1: [closure@ui/destructuring-assignment/drop-order.rs:42:21: 42:24], _2: &RefCell<Vec<usize>>) -> () {
    debug d => _2;
    debug expected_drop_order => (*(_1.0: &std::vec::Vec<usize>));
    let mut _0: ();
    let mut _3: (&&std::vec::Vec<usize>, &&std::vec::Vec<usize>);
    let mut _4: &&std::vec::Vec<usize>;
    let _5: &std::vec::Vec<usize>;
    let _6: &std::vec::Vec<usize>;
    let mut _7: &std::cell::Ref<'_, std::vec::Vec<usize>>;
    let _8: std::cell::Ref<'_, std::vec::Vec<usize>>;
    let mut _9: &&std::vec::Vec<usize>;
    let _10: &std::vec::Vec<usize>;
    let _11: &&std::vec::Vec<usize>;
    let _12: &&std::vec::Vec<usize>;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: &std::vec::Vec<usize>;
    scope 1 {
        debug left_val => _11;
        debug right_val => _12;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }

    bb0: {
        _8 = RefCell::<Vec<usize>>::borrow(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_8;
        _6 = <Ref<'_, Vec<usize>> as Deref>::deref(move _7) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _5 = _6;
        _4 = &_5;
        _18 = deref_copy (_1.0: &std::vec::Vec<usize>);
        _10 = _18;
        _9 = &_10;
        _3 = (move _4, move _9);
        _11 = (_3.0: &&std::vec::Vec<usize>);
        _12 = (_3.1: &&std::vec::Vec<usize>);
        _14 = <&Vec<usize> as PartialEq>::eq(_11, _12) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<&Vec<usize>, &Vec<usize>>(move _15, _11, _12, move _17) -> bb7;
    }

    bb5: {
        drop(_8) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_8) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn DropRecorder(_1: usize) -> DropRecorder {
    let mut _0: DropRecorder;

    bb0: {
        _0 = DropRecorder(move _1);
        return;
    }
}

// MIR FOR CTFE
fn DropRecorder(_1: usize) -> DropRecorder {
    let mut _0: DropRecorder;

    bb0: {
        _0 = DropRecorder(move _1);
        return;
    }
}
