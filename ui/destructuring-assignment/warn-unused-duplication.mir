// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _4: (i32, i32);
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (u32, u32);
    let mut _20: &mut u32;
    let mut _21: &mut u32;
    let mut _22: &mut u32;
    let mut _23: &mut u32;
    let mut _24: (&u32, &u32);
    let mut _25: &u32;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: u32;
    let mut _31: u32;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _2: i32;
        let _3: i32;
        let _7: &i32;
        let _8: &i32;
        let mut _16: u32;
        let mut _36: &i32;
        scope 2 {
            debug lhs => _2;
            debug lhs => _3;
        }
        scope 3 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 4 {
                debug kind => _13;
            }
        }
        scope 5 {
            debug x => _16;
            let _17: u32;
            let _18: u32;
            let _26: &u32;
            let _27: &u32;
            let mut _35: &u32;
            scope 6 {
                debug lhs => _17;
                debug lhs => _18;
            }
            scope 7 {
                debug left_val => _26;
                debug right_val => _27;
                let _32: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _32;
                }
            }
        }
    }

    bb0: {
        _4 = (const 0_i32, const 1_i32);
        _2 = (_4.0: i32);
        _3 = (_4.1: i32);
        _1 = _2;
        _1 = _3;
        _6 = &_1;
        _36 = const _;
        _5 = (move _6, _36);
        _7 = (_5.0: &i32);
        _8 = (_5.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb2: {
        _16 = const 1_u32;
        _19 = (const 5_u32, const 6_u32);
        _17 = (_19.0: u32);
        _18 = (_19.1: u32);
        _21 = &mut _16;
        _20 = foo(_21) -> [return: bb3, unwind continue];
    }

    bb3: {
        (*_20) = _17;
        _23 = &mut _16;
        _22 = foo(_23) -> [return: bb4, unwind continue];
    }

    bb4: {
        (*_22) = _18;
        _25 = &_16;
        _35 = const _;
        _24 = (move _25, _35);
        _26 = (_24.0: &u32);
        _27 = (_24.1: &u32);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<u32, u32>(move _32, _26, _27, move _34) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 6_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

fn foo(_1: &mut u32) -> &mut u32 {
    debug x => _1;
    let mut _0: &mut u32;

    bb0: {
        _0 = _1;
        return;
    }
}
