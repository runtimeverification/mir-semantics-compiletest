// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _2: i32;
    let mut _5: [i32; 2];
    let mut _6: (&(i32, i32), &(i32, i32));
    let mut _7: &(i32, i32);
    let _8: (i32, i32);
    let mut _9: i32;
    let mut _10: i32;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: [i32; 5];
    let mut _23: (&(i32, i32, i32), &(i32, i32, i32));
    let mut _24: &(i32, i32, i32);
    let _25: (i32, i32, i32);
    let mut _26: i32;
    let mut _27: i32;
    let mut _28: i32;
    let mut _31: bool;
    let mut _32: bool;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: [i32; 3];
    let mut _38: (&(i32, i32), &(i32, i32));
    let mut _39: &(i32, i32);
    let _40: (i32, i32);
    let mut _41: i32;
    let mut _42: i32;
    let mut _45: bool;
    let mut _46: bool;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: [i32; 3];
    let mut _52: (&i32, &i32);
    let mut _53: &i32;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: i32;
    let mut _59: i32;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        debug b => _2;
        let _3: i32;
        let _4: i32;
        let _11: &(i32, i32);
        let _12: &(i32, i32);
        let mut _18: i32;
        let mut _66: &(i32, i32);
        scope 2 {
            debug lhs => _3;
            debug lhs => _4;
        }
        scope 3 {
            debug left_val => _11;
            debug right_val => _12;
            let _15: core::panicking::AssertKind;
            scope 4 {
                debug kind => _15;
            }
        }
        scope 5 {
            debug c => _18;
            let _19: i32;
            let _20: i32;
            let _21: i32;
            let _29: &(i32, i32, i32);
            let _30: &(i32, i32, i32);
            let _36: i32;
            let _43: &(i32, i32);
            let _44: &(i32, i32);
            let _50: i32;
            let _54: &i32;
            let _55: &i32;
            let mut _63: &i32;
            let mut _64: &(i32, i32);
            let mut _65: &(i32, i32, i32);
            scope 6 {
                debug lhs => _19;
                debug lhs => _20;
                debug lhs => _21;
            }
            scope 7 {
                debug left_val => _29;
                debug right_val => _30;
                let _33: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _33;
                }
            }
            scope 9 {
                debug lhs => _36;
            }
            scope 10 {
                debug left_val => _43;
                debug right_val => _44;
                let _47: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _47;
                }
            }
            scope 12 {
            }
            scope 13 {
                debug lhs => _50;
            }
            scope 14 {
                debug left_val => _54;
                debug right_val => _55;
                let _60: core::panicking::AssertKind;
                scope 15 {
                    debug kind => _60;
                }
            }
        }
    }

    bb0: {
        _5 = [const 0_i32, const 1_i32];
        _3 = _5[0 of 2];
        _4 = _5[1 of 2];
        _1 = _3;
        _2 = _4;
        _9 = _1;
        _10 = _2;
        _8 = (move _9, move _10);
        _7 = &_8;
        _66 = const _;
        _6 = (move _7, _66);
        _11 = (_6.0: &(i32, i32));
        _12 = (_6.1: &(i32, i32));
        _14 = <(i32, i32) as PartialEq>::eq(_11, _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _15, _11, _12, move _17) -> unwind continue;
    }

    bb3: {
        _22 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
        _19 = _22[0 of 5];
        _21 = _22[4 of 5];
        _20 = _22[3 of 5];
        _1 = _19;
        _2 = _20;
        _18 = _21;
        _26 = _1;
        _27 = _2;
        _28 = _18;
        _25 = (move _26, move _27, move _28);
        _24 = &_25;
        _65 = const _;
        _23 = (move _24, _65);
        _29 = (_23.0: &(i32, i32, i32));
        _30 = (_23.1: &(i32, i32, i32));
        _32 = <(i32, i32, i32) as PartialEq>::eq(_29, _30) -> [return: bb4, unwind continue];
    }

    bb4: {
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<(i32, i32, i32), (i32, i32, i32)>(move _33, _29, _30, move _35) -> unwind continue;
    }

    bb6: {
        _37 = [const 1_i32, const 2_i32, const 3_i32];
        _36 = _37[1 of 3];
        _1 = _36;
        _41 = _1;
        _42 = _2;
        _40 = (move _41, move _42);
        _39 = &_40;
        _64 = const _;
        _38 = (move _39, _64);
        _43 = (_38.0: &(i32, i32));
        _44 = (_38.1: &(i32, i32));
        _46 = <(i32, i32) as PartialEq>::eq(_43, _44) -> [return: bb7, unwind continue];
    }

    bb7: {
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _47, _43, _44, move _49) -> unwind continue;
    }

    bb9: {
        _51 = [const 5_i32, const 6_i32, const 6_i32];
        _50 = _51[0 of 3];
        _18 = _50;
        _53 = &_18;
        _63 = const _;
        _52 = (move _53, _63);
        _54 = (_52.0: &i32);
        _55 = (_52.1: &i32);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<i32, i32>(move _60, _54, _55, move _62) -> unwind continue;
    }

    bb11: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 2_i32, const 4_i32);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &(i32, i32, i32) = {
    let mut _0: &(i32, i32, i32);
    let mut _1: (i32, i32, i32);

    bb0: {
        _1 = (const 1_i32, const 4_i32, const 5_i32);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 0_i32, const 1_i32);
        _0 = &_1;
        return;
    }
}
