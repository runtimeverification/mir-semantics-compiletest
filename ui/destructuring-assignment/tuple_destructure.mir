// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _2: i32;
    let mut _5: (i32, i32);
    let mut _6: (&(i32, i32), &(i32, i32));
    let mut _7: &(i32, i32);
    let _8: (i32, i32);
    let mut _9: i32;
    let mut _10: i32;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (i32, i32);
    let mut _21: i32;
    let mut _22: i32;
    let mut _23: (&(i32, i32), &(i32, i32));
    let mut _24: &(i32, i32);
    let _25: (i32, i32);
    let mut _26: i32;
    let mut _27: i32;
    let mut _30: bool;
    let mut _31: bool;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (i32, i32);
    let mut _38: (&(i32, i32), &(i32, i32));
    let mut _39: &(i32, i32);
    let _40: (i32, i32);
    let mut _41: i32;
    let mut _42: i32;
    let mut _45: bool;
    let mut _46: bool;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (i32, i32);
    let mut _52: (&(i32, i32), &(i32, i32));
    let mut _53: &(i32, i32);
    let _54: (i32, i32);
    let mut _55: i32;
    let mut _56: i32;
    let mut _59: bool;
    let mut _60: bool;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _64: (&(i32, i32), &(i32, i32));
    let mut _65: &(i32, i32);
    let _66: (i32, i32);
    let mut _67: i32;
    let mut _68: i32;
    let mut _71: bool;
    let mut _72: bool;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: (i32, i32, i32);
    let mut _78: (&i32, &i32);
    let mut _79: &i32;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: i32;
    let mut _85: i32;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _90: (i32, i32);
    let mut _91: (&i32, &i32);
    let mut _92: &i32;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: i32;
    let mut _98: i32;
    let _100: !;
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _106: (std::string::String, std::string::String);
    let mut _107: std::string::String;
    let _108: &str;
    let mut _109: std::string::String;
    let _110: &str;
    let mut _111: (&std::string::String, &&str);
    let mut _112: &std::string::String;
    let mut _115: bool;
    let mut _116: bool;
    let _118: !;
    let mut _119: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _120: (&std::string::String, &&str);
    let mut _121: &std::string::String;
    let mut _124: bool;
    let mut _125: bool;
    let _127: !;
    let mut _128: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: (std::string::String, std::string::String);
    let mut _132: std::string::String;
    let mut _133: std::string::String;
    let mut _134: (&std::string::String, &&str);
    let mut _135: &std::string::String;
    let mut _138: bool;
    let mut _139: bool;
    let _141: !;
    let mut _142: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _143: (&std::string::String, &&str);
    let mut _144: &std::string::String;
    let mut _147: bool;
    let mut _148: bool;
    let _150: !;
    let mut _151: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _154: (i32, i32);
    let mut _155: (&(i32, i32), &(i32, i32));
    let mut _156: &(i32, i32);
    let _157: (i32, i32);
    let mut _158: i32;
    let mut _159: i32;
    let mut _162: bool;
    let mut _163: bool;
    let _165: !;
    let mut _166: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _170: ((i32, i32), std::string::String);
    let mut _171: (i32, i32);
    let mut _172: std::string::String;
    let mut _173: std::string::String;
    let mut _174: (&(i32, i32), &(i32, i32));
    let mut _175: &(i32, i32);
    let _176: (i32, i32);
    let mut _177: i32;
    let mut _178: i32;
    let mut _181: bool;
    let mut _182: bool;
    let _184: !;
    let mut _185: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _186: (&std::string::String, &&str);
    let mut _187: &std::string::String;
    let mut _190: bool;
    let mut _191: bool;
    let _193: !;
    let mut _194: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _197: ((i32, i32), ());
    let mut _198: (i32, i32);
    let mut _199: (&(i32, i32), &(i32, i32));
    let mut _200: &(i32, i32);
    let _201: (i32, i32);
    let mut _202: i32;
    let mut _203: i32;
    let mut _206: bool;
    let mut _207: bool;
    let _209: !;
    let mut _210: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _226: bool;
    let mut _227: bool;
    let mut _228: bool;
    scope 1 {
        debug a => _1;
        debug b => _2;
        let _3: i32;
        let _4: i32;
        let _11: &(i32, i32);
        let _12: &(i32, i32);
        let _18: i32;
        let _19: i32;
        let _28: &(i32, i32);
        let _29: &(i32, i32);
        let _35: i32;
        let _36: i32;
        let _43: &(i32, i32);
        let _44: &(i32, i32);
        let _50: i32;
        let _57: &(i32, i32);
        let _58: &(i32, i32);
        let _69: &(i32, i32);
        let _70: &(i32, i32);
        let _76: i32;
        let _80: &i32;
        let _81: &i32;
        let _89: i32;
        let _93: &i32;
        let _94: &i32;
        let mut _102: std::string::String;
        let mut _103: std::string::String;
        let mut _219: &i32;
        let mut _220: &i32;
        let mut _221: &(i32, i32);
        let mut _222: &(i32, i32);
        let mut _223: &(i32, i32);
        let mut _224: &(i32, i32);
        let mut _225: &(i32, i32);
        scope 2 {
            debug lhs => _3;
            debug lhs => _4;
        }
        scope 3 {
            debug left_val => _11;
            debug right_val => _12;
            let _15: core::panicking::AssertKind;
            scope 4 {
                debug kind => _15;
            }
        }
        scope 5 {
            debug lhs => _18;
            debug lhs => _19;
        }
        scope 6 {
            debug left_val => _28;
            debug right_val => _29;
            let _32: core::panicking::AssertKind;
            scope 7 {
                debug kind => _32;
            }
        }
        scope 8 {
            debug lhs => _35;
            debug lhs => _36;
        }
        scope 9 {
            debug left_val => _43;
            debug right_val => _44;
            let _47: core::panicking::AssertKind;
            scope 10 {
                debug kind => _47;
            }
        }
        scope 11 {
            debug lhs => _50;
        }
        scope 12 {
            debug left_val => _57;
            debug right_val => _58;
            let _61: core::panicking::AssertKind;
            scope 13 {
                debug kind => _61;
            }
        }
        scope 14 {
        }
        scope 15 {
            debug left_val => _69;
            debug right_val => _70;
            let _73: core::panicking::AssertKind;
            scope 16 {
                debug kind => _73;
            }
        }
        scope 17 {
            debug lhs => _76;
        }
        scope 18 {
            debug left_val => _80;
            debug right_val => _81;
            let _86: core::panicking::AssertKind;
            scope 19 {
                debug kind => _86;
            }
        }
        scope 20 {
            debug lhs => _89;
        }
        scope 21 {
            debug left_val => _93;
            debug right_val => _94;
            let _99: core::panicking::AssertKind;
            scope 22 {
                debug kind => _99;
            }
        }
        scope 23 {
            debug c => _102;
            debug d => _103;
            let _104: std::string::String;
            let _105: std::string::String;
            let _113: &std::string::String;
            let _114: &&str;
            let _122: &std::string::String;
            let _123: &&str;
            let _129: std::string::String;
            let _130: std::string::String;
            let _136: &std::string::String;
            let _137: &&str;
            let _145: &std::string::String;
            let _146: &&str;
            let _152: i32;
            let _153: i32;
            let _160: &(i32, i32);
            let _161: &(i32, i32);
            let _167: i32;
            let _168: i32;
            let _169: std::string::String;
            let _179: &(i32, i32);
            let _180: &(i32, i32);
            let _188: &std::string::String;
            let _189: &&str;
            let _195: i32;
            let _196: i32;
            let _204: &(i32, i32);
            let _205: &(i32, i32);
            let mut _211: &(i32, i32);
            let mut _212: &&str;
            let mut _213: &(i32, i32);
            let mut _214: &(i32, i32);
            let mut _215: &&str;
            let mut _216: &&str;
            let mut _217: &&str;
            let mut _218: &&str;
            scope 24 {
                debug lhs => _104;
                debug lhs => _105;
            }
            scope 25 {
                debug left_val => _113;
                debug right_val => _114;
                let _117: core::panicking::AssertKind;
                scope 26 {
                    debug kind => _117;
                }
            }
            scope 27 {
                debug left_val => _122;
                debug right_val => _123;
                let _126: core::panicking::AssertKind;
                scope 28 {
                    debug kind => _126;
                }
            }
            scope 29 {
                debug lhs => _129;
                debug lhs => _130;
            }
            scope 30 {
                debug left_val => _136;
                debug right_val => _137;
                let _140: core::panicking::AssertKind;
                scope 31 {
                    debug kind => _140;
                }
            }
            scope 32 {
                debug left_val => _145;
                debug right_val => _146;
                let _149: core::panicking::AssertKind;
                scope 33 {
                    debug kind => _149;
                }
            }
            scope 34 {
                debug lhs => _152;
                debug lhs => _153;
            }
            scope 35 {
                debug left_val => _160;
                debug right_val => _161;
                let _164: core::panicking::AssertKind;
                scope 36 {
                    debug kind => _164;
                }
            }
            scope 37 {
                debug lhs => _167;
                debug lhs => _168;
                debug lhs => _169;
            }
            scope 38 {
                debug left_val => _179;
                debug right_val => _180;
                let _183: core::panicking::AssertKind;
                scope 39 {
                    debug kind => _183;
                }
            }
            scope 40 {
                debug left_val => _188;
                debug right_val => _189;
                let _192: core::panicking::AssertKind;
                scope 41 {
                    debug kind => _192;
                }
            }
            scope 42 {
                debug lhs => _195;
                debug lhs => _196;
            }
            scope 43 {
                debug left_val => _204;
                debug right_val => _205;
                let _208: core::panicking::AssertKind;
                scope 44 {
                    debug kind => _208;
                }
            }
        }
    }

    bb0: {
        _228 = const false;
        _227 = const false;
        _226 = const false;
        _5 = (const 0_i32, const 1_i32);
        _3 = (_5.0: i32);
        _4 = (_5.1: i32);
        _1 = _3;
        _2 = _4;
        _9 = _1;
        _10 = _2;
        _8 = (move _9, move _10);
        _7 = &_8;
        _225 = const _;
        _6 = (move _7, _225);
        _11 = (_6.0: &(i32, i32));
        _12 = (_6.1: &(i32, i32));
        _14 = <(i32, i32) as PartialEq>::eq(_11, _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _15, _11, _12, move _17) -> unwind continue;
    }

    bb3: {
        _21 = _1;
        _22 = _2;
        _20 = (move _21, move _22);
        _18 = (_20.0: i32);
        _19 = (_20.1: i32);
        _2 = _18;
        _1 = _19;
        _26 = _1;
        _27 = _2;
        _25 = (move _26, move _27);
        _24 = &_25;
        _224 = const _;
        _23 = (move _24, _224);
        _28 = (_23.0: &(i32, i32));
        _29 = (_23.1: &(i32, i32));
        _31 = <(i32, i32) as PartialEq>::eq(_28, _29) -> [return: bb4, unwind continue];
    }

    bb4: {
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _32, _28, _29, move _34) -> unwind continue;
    }

    bb6: {
        _37 = (const 1_i32, const 2_i32);
        _35 = (_37.0: i32);
        _36 = (_37.1: i32);
        _1 = _35;
        _2 = _36;
        _41 = _1;
        _42 = _2;
        _40 = (move _41, move _42);
        _39 = &_40;
        _223 = const _;
        _38 = (move _39, _223);
        _43 = (_38.0: &(i32, i32));
        _44 = (_38.1: &(i32, i32));
        _46 = <(i32, i32) as PartialEq>::eq(_43, _44) -> [return: bb7, unwind continue];
    }

    bb7: {
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _47, _43, _44, move _49) -> unwind continue;
    }

    bb9: {
        _51 = (const 1_i32, const 2_i32);
        _50 = (_51.1: i32);
        _1 = _50;
        _55 = _1;
        _56 = _2;
        _54 = (move _55, move _56);
        _53 = &_54;
        _222 = const _;
        _52 = (move _53, _222);
        _57 = (_52.0: &(i32, i32));
        _58 = (_52.1: &(i32, i32));
        _60 = <(i32, i32) as PartialEq>::eq(_57, _58) -> [return: bb10, unwind continue];
    }

    bb10: {
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _61, _57, _58, move _63) -> unwind continue;
    }

    bb12: {
        _67 = _1;
        _68 = _2;
        _66 = (move _67, move _68);
        _65 = &_66;
        _221 = const _;
        _64 = (move _65, _221);
        _69 = (_64.0: &(i32, i32));
        _70 = (_64.1: &(i32, i32));
        _72 = <(i32, i32) as PartialEq>::eq(_69, _70) -> [return: bb13, unwind continue];
    }

    bb13: {
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _73, _69, _70, move _75) -> unwind continue;
    }

    bb15: {
        _77 = (const 5_i32, const 6_i32, const 7_i32);
        _76 = (_77.0: i32);
        _2 = _76;
        _79 = &_2;
        _220 = const _;
        _78 = (move _79, _220);
        _80 = (_78.0: &i32);
        _81 = (_78.1: &i32);
        _84 = (*_80);
        _85 = (*_81);
        _83 = Eq(move _84, move _85);
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<i32, i32>(move _86, _80, _81, move _88) -> unwind continue;
    }

    bb17: {
        _90 = (const 8_i32, const 9_i32);
        _89 = (_90.0: i32);
        _1 = _89;
        _92 = &_1;
        _219 = const _;
        _91 = (move _92, _219);
        _93 = (_91.0: &i32);
        _94 = (_91.1: &i32);
        _97 = (*_93);
        _98 = (*_94);
        _96 = Eq(move _97, move _98);
        _95 = Not(move _96);
        switchInt(move _95) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _99 = core::panicking::AssertKind::Eq;
        _101 = Option::<Arguments<'_>>::None;
        _100 = core::panicking::assert_failed::<i32, i32>(move _99, _93, _94, move _101) -> unwind continue;
    }

    bb19: {
        _108 = const "c";
        _107 = <str as ToOwned>::to_owned(_108) -> [return: bb20, unwind: bb54];
    }

    bb20: {
        _110 = const "d";
        _109 = <str as ToOwned>::to_owned(_110) -> [return: bb21, unwind: bb49];
    }

    bb21: {
        _106 = (move _107, move _109);
        _104 = move (_106.0: std::string::String);
        _105 = move (_106.1: std::string::String);
        _228 = const true;
        _102 = move _104;
        _227 = const true;
        _103 = move _105;
        _112 = &_102;
        _218 = const _;
        _111 = (move _112, _218);
        _113 = (_111.0: &std::string::String);
        _114 = (_111.1: &&str);
        _116 = <String as PartialEq<&str>>::eq(_113, _114) -> [return: bb22, unwind: bb54];
    }

    bb22: {
        _115 = Not(move _116);
        switchInt(move _115) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _117 = core::panicking::AssertKind::Eq;
        _119 = Option::<Arguments<'_>>::None;
        _118 = core::panicking::assert_failed::<String, &str>(move _117, _113, _114, move _119) -> bb54;
    }

    bb24: {
        _121 = &_103;
        _217 = const _;
        _120 = (move _121, _217);
        _122 = (_120.0: &std::string::String);
        _123 = (_120.1: &&str);
        _125 = <String as PartialEq<&str>>::eq(_122, _123) -> [return: bb25, unwind: bb54];
    }

    bb25: {
        _124 = Not(move _125);
        switchInt(move _124) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _126 = core::panicking::AssertKind::Eq;
        _128 = Option::<Arguments<'_>>::None;
        _127 = core::panicking::assert_failed::<String, &str>(move _126, _122, _123, move _128) -> bb54;
    }

    bb27: {
        _228 = const false;
        _132 = move _102;
        _227 = const false;
        _133 = move _103;
        _131 = (move _132, move _133);
        _129 = move (_131.0: std::string::String);
        _130 = move (_131.1: std::string::String);
        _227 = const true;
        _103 = move _129;
        _228 = const true;
        _102 = move _130;
        _135 = &_102;
        _216 = const _;
        _134 = (move _135, _216);
        _136 = (_134.0: &std::string::String);
        _137 = (_134.1: &&str);
        _139 = <String as PartialEq<&str>>::eq(_136, _137) -> [return: bb28, unwind: bb54];
    }

    bb28: {
        _138 = Not(move _139);
        switchInt(move _138) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _140 = core::panicking::AssertKind::Eq;
        _142 = Option::<Arguments<'_>>::None;
        _141 = core::panicking::assert_failed::<String, &str>(move _140, _136, _137, move _142) -> bb54;
    }

    bb30: {
        _144 = &_103;
        _215 = const _;
        _143 = (move _144, _215);
        _145 = (_143.0: &std::string::String);
        _146 = (_143.1: &&str);
        _148 = <String as PartialEq<&str>>::eq(_145, _146) -> [return: bb31, unwind: bb54];
    }

    bb31: {
        _147 = Not(move _148);
        switchInt(move _147) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _149 = core::panicking::AssertKind::Eq;
        _151 = Option::<Arguments<'_>>::None;
        _150 = core::panicking::assert_failed::<String, &str>(move _149, _145, _146, move _151) -> bb54;
    }

    bb33: {
        _154 = (const 0_i32, const 1_i32);
        _152 = (_154.0: i32);
        _153 = (_154.1: i32);
        _1 = _152;
        _2 = _153;
        _158 = _1;
        _159 = _2;
        _157 = (move _158, move _159);
        _156 = &_157;
        _214 = const _;
        _155 = (move _156, _214);
        _160 = (_155.0: &(i32, i32));
        _161 = (_155.1: &(i32, i32));
        _163 = <(i32, i32) as PartialEq>::eq(_160, _161) -> [return: bb34, unwind: bb54];
    }

    bb34: {
        _162 = Not(move _163);
        switchInt(move _162) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _164 = core::panicking::AssertKind::Eq;
        _166 = Option::<Arguments<'_>>::None;
        _165 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _164, _160, _161, move _166) -> bb54;
    }

    bb36: {
        _171 = (const 2_i32, const 3_i32);
        _227 = const false;
        _172 = move _103;
        _170 = (move _171, move _172);
        _167 = ((_170.0: (i32, i32)).0: i32);
        _168 = ((_170.0: (i32, i32)).1: i32);
        _226 = const true;
        _169 = move (_170.1: std::string::String);
        _1 = _167;
        _2 = _168;
        _226 = const false;
        _173 = move _169;
        drop(_102) -> [return: bb37, unwind: bb38];
    }

    bb37: {
        _228 = const true;
        _102 = move _173;
        _226 = const false;
        _177 = _1;
        _178 = _2;
        _176 = (move _177, move _178);
        _175 = &_176;
        _213 = const _;
        _174 = (move _175, _213);
        _179 = (_174.0: &(i32, i32));
        _180 = (_174.1: &(i32, i32));
        _182 = <(i32, i32) as PartialEq>::eq(_179, _180) -> [return: bb39, unwind: bb54];
    }

    bb38 (cleanup): {
        _228 = const true;
        _102 = move _173;
        switchInt(_226) -> [0: bb54, otherwise: bb52];
    }

    bb39: {
        _181 = Not(move _182);
        switchInt(move _181) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _183 = core::panicking::AssertKind::Eq;
        _185 = Option::<Arguments<'_>>::None;
        _184 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _183, _179, _180, move _185) -> bb54;
    }

    bb41: {
        _187 = &_102;
        _212 = const _;
        _186 = (move _187, _212);
        _188 = (_186.0: &std::string::String);
        _189 = (_186.1: &&str);
        _191 = <String as PartialEq<&str>>::eq(_188, _189) -> [return: bb42, unwind: bb54];
    }

    bb42: {
        _190 = Not(move _191);
        switchInt(move _190) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _192 = core::panicking::AssertKind::Eq;
        _194 = Option::<Arguments<'_>>::None;
        _193 = core::panicking::assert_failed::<String, &str>(move _192, _188, _189, move _194) -> bb54;
    }

    bb44: {
        _198 = (const 4_i32, const 5_i32);
        _197 = (move _198, const ());
        _195 = ((_197.0: (i32, i32)).0: i32);
        _196 = ((_197.0: (i32, i32)).1: i32);
        _1 = _195;
        _2 = _196;
        _202 = _1;
        _203 = _2;
        _201 = (move _202, move _203);
        _200 = &_201;
        _211 = const _;
        _199 = (move _200, _211);
        _204 = (_199.0: &(i32, i32));
        _205 = (_199.1: &(i32, i32));
        _207 = <(i32, i32) as PartialEq>::eq(_204, _205) -> [return: bb45, unwind: bb54];
    }

    bb45: {
        _206 = Not(move _207);
        switchInt(move _206) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _208 = core::panicking::AssertKind::Eq;
        _210 = Option::<Arguments<'_>>::None;
        _209 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _208, _204, _205, move _210) -> bb54;
    }

    bb47: {
        _227 = const false;
        drop(_102) -> [return: bb48, unwind continue];
    }

    bb48: {
        _228 = const false;
        return;
    }

    bb49 (cleanup): {
        drop(_107) -> [return: bb54, unwind terminate];
    }

    bb50 (cleanup): {
        switchInt(_228) -> [0: bb51, otherwise: bb55];
    }

    bb51 (cleanup): {
        resume;
    }

    bb52 (cleanup): {
        drop(_169) -> [return: bb54, unwind terminate];
    }

    bb53 (cleanup): {
        drop(_103) -> [return: bb50, unwind terminate];
    }

    bb54 (cleanup): {
        switchInt(_227) -> [0: bb50, otherwise: bb53];
    }

    bb55 (cleanup): {
        drop(_102) -> [return: bb51, unwind terminate];
    }
}

promoted[0] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 4_i32, const 5_i32);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "c";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 2_i32, const 3_i32);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 0_i32, const 1_i32);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "c";
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "d";
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "d";
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "c";
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 8_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 2_i32, const 2_i32);
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 2_i32, const 2_i32);
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 1_i32, const 2_i32);
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 1_i32, const 0_i32);
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 0_i32, const 1_i32);
        _0 = &_1;
        return;
    }
}
