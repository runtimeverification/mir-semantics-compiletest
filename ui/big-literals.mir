// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let _2: &u32;
    let _3: &u32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: u32;
    let mut _7: u32;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&u32, &u32);
    let _12: &u32;
    let _13: &u32;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: u32;
    let mut _17: u32;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&u64, &u64);
    let _22: &u64;
    let _23: &u64;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: u64;
    let mut _27: u64;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&u64, &u64);
    let _32: &u64;
    let _33: &u64;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: u64;
    let mut _37: u64;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&i32, &i32);
    let mut _42: &i32;
    let _43: i32;
    let _44: &i32;
    let _45: &i32;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: i32;
    let mut _49: i32;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&f32, &f32);
    let _54: &f32;
    let _55: &f32;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: f32;
    let mut _59: f32;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&f32, &f32);
    let _64: &f32;
    let _65: &f32;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: f32;
    let mut _69: f32;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&f64, &f64);
    let _74: &f64;
    let _75: &f64;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: f64;
    let mut _79: f64;
    let _81: !;
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _83: (&f64, &f64);
    let _84: &f64;
    let _85: &f64;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: f64;
    let mut _89: f64;
    let _91: !;
    let mut _92: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _93: &f64;
    let mut _94: &f64;
    let mut _95: &f64;
    let mut _96: &f64;
    let mut _97: &f32;
    let mut _98: &f32;
    let mut _99: &f32;
    let mut _100: &f32;
    let mut _101: &i32;
    let mut _102: &u64;
    let mut _103: &u64;
    let mut _104: &u64;
    let mut _105: &u64;
    let mut _106: &u32;
    let mut _107: &u32;
    let mut _108: &u32;
    let mut _109: &u32;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 8 {
            debug kind => _38;
        }
    }
    scope 9 {
        debug left_val => _44;
        debug right_val => _45;
        let _50: core::panicking::AssertKind;
        scope 10 {
            debug kind => _50;
        }
    }
    scope 11 {
        debug left_val => _54;
        debug right_val => _55;
        let _60: core::panicking::AssertKind;
        scope 12 {
            debug kind => _60;
        }
    }
    scope 13 {
        debug left_val => _64;
        debug right_val => _65;
        let _70: core::panicking::AssertKind;
        scope 14 {
            debug kind => _70;
        }
    }
    scope 15 {
        debug left_val => _74;
        debug right_val => _75;
        let _80: core::panicking::AssertKind;
        scope 16 {
            debug kind => _80;
        }
    }
    scope 17 {
        debug left_val => _84;
        debug right_val => _85;
        let _90: core::panicking::AssertKind;
        scope 18 {
            debug kind => _90;
        }
    }

    bb0: {
        _109 = const _;
        _108 = const _;
        _1 = (_109, _108);
        _2 = (_1.0: &u32);
        _3 = (_1.1: &u32);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<u32, u32>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _107 = const _;
        _106 = const _;
        _11 = (_107, _106);
        _12 = (_11.0: &u32);
        _13 = (_11.1: &u32);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<u32, u32>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _105 = const _;
        _104 = const _;
        _21 = (_105, _104);
        _22 = (_21.0: &u64);
        _23 = (_21.1: &u64);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<u64, u64>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _103 = const _;
        _102 = const _;
        _31 = (_103, _102);
        _32 = (_31.0: &u64);
        _33 = (_31.1: &u64);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<u64, u64>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb8: {
        _43 = core::num::<impl i32>::wrapping_sub(const i32::MIN, const 1_i32) -> [return: bb9, unwind continue];
    }

    bb9: {
        _42 = &_43;
        _101 = const _;
        _41 = (move _42, _101);
        _44 = (_41.0: &i32);
        _45 = (_41.1: &i32);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<i32, i32>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb11: {
        _100 = const _;
        _99 = const _;
        _53 = (_100, _99);
        _54 = (_53.0: &f32);
        _55 = (_53.1: &f32);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<f32, f32>(move _60, _54, _55, move _62) -> unwind continue;
    }

    bb13: {
        _98 = const _;
        _97 = const _;
        _63 = (_98, _97);
        _64 = (_63.0: &f32);
        _65 = (_63.1: &f32);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<f32, f32>(move _70, _64, _65, move _72) -> unwind continue;
    }

    bb15: {
        _96 = const _;
        _95 = const _;
        _73 = (_96, _95);
        _74 = (_73.0: &f64);
        _75 = (_73.1: &f64);
        _78 = (*_74);
        _79 = (*_75);
        _77 = Eq(move _78, move _79);
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _80 = core::panicking::AssertKind::Eq;
        _82 = Option::<Arguments<'_>>::None;
        _81 = core::panicking::assert_failed::<f64, f64>(move _80, _74, _75, move _82) -> unwind continue;
    }

    bb17: {
        _94 = const _;
        _93 = const _;
        _83 = (_94, _93);
        _84 = (_83.0: &f64);
        _85 = (_83.1: &f64);
        _88 = (*_84);
        _89 = (*_85);
        _87 = Eq(move _88, move _89);
        _86 = Not(move _87);
        switchInt(move _86) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _90 = core::panicking::AssertKind::Eq;
        _92 = Option::<Arguments<'_>>::None;
        _91 = core::panicking::assert_failed::<f64, f64>(move _90, _84, _85, move _92) -> unwind continue;
    }

    bb19: {
        return;
    }
}

promoted[0] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 1.7976931348623157E+308f64;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const -1.7976931348623157E+308f64;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 3.40282347E+38f32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const -3.40282347E+38f32;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const i32::MAX;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = Not(const 0_u64);
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const u64::MAX;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = Not(const 0_u64);
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const u64::MAX;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = Not(const 0_u32);
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const u32::MAX;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = Not(const 0_u32);
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const u32::MAX;
        _0 = &_1;
        return;
    }
}
