// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn checktrue(_1: bool) -> bool {
    debug rs => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: !;

    bb0: {
        _2 = Not(_1);
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = core::panicking::panic(const "assertion failed: (rs)") -> unwind continue;
    }

    bb2: {
        _0 = const true;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: bool;
    let mut _2: fn(bool) -> bool;
    let _3: bool;
    let mut _4: fn(bool) -> bool;
    scope 1 {
        debug k => checktrue;
    }

    bb0: {
        _2 = checktrue as fn(bool) -> bool (Pointer(ReifyFnPointer));
        _1 = evenk(const 42_isize, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = checktrue as fn(bool) -> bool (Pointer(ReifyFnPointer));
        _3 = oddk(const 45_isize, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn evenk(_1: isize, _2: fn(bool) -> bool) -> bool {
    debug n => _1;
    debug k => _2;
    let mut _0: bool;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &isize;
    let mut _14: isize;
    let mut _15: isize;
    let mut _16: isize;
    let mut _17: &[&str; 2];
    let mut _18: &[&str; 1];

    bb0: {
        _18 = const _;
        _5 = _18 as &[&str] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = _print(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _17 = const _;
        _8 = _17 as &[&str] (Pointer(Unsize));
        _13 = &_1;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_13) -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = _print(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _14 = _1;
        switchInt(move _14) -> [0: bb6, otherwise: bb7];
    }

    bb6: {
        _0 = _2(const true) -> [return: bb8, unwind continue];
    }

    bb7: {
        _16 = _1;
        _15 = Sub(move _16, const 1_isize);
        _0 = oddk(move _15, _2) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

promoted[0] in evenk: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in evenk: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "evenk\n"];
        _0 = &_1;
        return;
    }
}

fn oddk(_1: isize, _2: fn(bool) -> bool) -> bool {
    debug n => _1;
    debug k => _2;
    let mut _0: bool;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &isize;
    let mut _14: isize;
    let mut _15: isize;
    let mut _16: isize;
    let mut _17: &[&str; 2];
    let mut _18: &[&str; 1];

    bb0: {
        _18 = const _;
        _5 = _18 as &[&str] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = _print(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _17 = const _;
        _8 = _17 as &[&str] (Pointer(Unsize));
        _13 = &_1;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_13) -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = _print(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _14 = _1;
        switchInt(move _14) -> [0: bb6, otherwise: bb7];
    }

    bb6: {
        _0 = _2(const false) -> [return: bb8, unwind continue];
    }

    bb7: {
        _16 = _1;
        _15 = Sub(move _16, const 1_isize);
        _0 = evenk(move _15, _2) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

promoted[0] in oddk: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in oddk: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "oddk\n"];
        _0 = &_1;
        return;
    }
}
