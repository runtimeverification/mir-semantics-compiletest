// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn p_foo(_1: T) -> () {
    debug _pinned => _1;                 // in scope 0 at ui/type-param-constraints.rs:7:13: 7:20
    let mut _0: ();                      // return place in scope 0 at ui/type-param-constraints.rs:7:25: 7:25

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/type-param-constraints.rs:7:27: 7:28
    }

    bb1: {
        return;                          // scope 0 at ui/type-param-constraints.rs:7:28: 7:28
    }
}

fn s_foo(_1: T) -> () {
    debug _shared => _1;                 // in scope 0 at ui/type-param-constraints.rs:8:13: 8:20
    let mut _0: ();                      // return place in scope 0 at ui/type-param-constraints.rs:8:25: 8:25

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/type-param-constraints.rs:8:27: 8:28
    }

    bb1: {
        return;                          // scope 0 at ui/type-param-constraints.rs:8:28: 8:28
    }
}

fn u_foo(_1: T) -> () {
    debug _unique => _1;                 // in scope 0 at ui/type-param-constraints.rs:9:18: 9:25
    let mut _0: ();                      // return place in scope 0 at ui/type-param-constraints.rs:9:30: 9:30

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/type-param-constraints.rs:9:32: 9:33
    }

    bb1: {
        return;                          // scope 0 at ui/type-param-constraints.rs:9:33: 9:33
    }
}

fn <impl at ui/type-param-constraints.rs:15:1: 15:16>::drop(_1: &mut r) -> () {
    debug self => _1;                    // in scope 0 at ui/type-param-constraints.rs:16:13: 16:22
    let mut _0: ();                      // return place in scope 0 at ui/type-param-constraints.rs:16:24: 16:24

    bb0: {
        return;                          // scope 0 at ui/type-param-constraints.rs:16:26: 16:26
    }
}

fn r(_1: isize) -> r {
    debug i => _1;                       // in scope 0 at ui/type-param-constraints.rs:19:6: 19:7
    let mut _0: r;                       // return place in scope 0 at ui/type-param-constraints.rs:19:18: 19:19
    let mut _2: isize;                   // in scope 0 at ui/type-param-constraints.rs:21:12: 21:13

    bb0: {
        _2 = _1;                         // scope 0 at ui/type-param-constraints.rs:21:12: 21:13
        _0 = r { i: move _2 };           // scope 0 at ui/type-param-constraints.rs:20:5: 22:6
        return;                          // scope 0 at ui/type-param-constraints.rs:23:2: 23:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/type-param-constraints.rs:25:15: 25:15
    let _1: ();                          // in scope 0 at ui/type-param-constraints.rs:26:5: 26:17
    let mut _2: r;                       // in scope 0 at ui/type-param-constraints.rs:26:11: 26:16
    let _3: ();                          // in scope 0 at ui/type-param-constraints.rs:28:5: 28:37
    let mut _4: std::boxed::Box<r>;      // in scope 0 at ui/type-param-constraints.rs:28:21: 28:36
    let mut _5: r;                       // in scope 0 at ui/type-param-constraints.rs:28:30: 28:35
    let _6: ();                          // in scope 0 at ui/type-param-constraints.rs:29:5: 29:34
    let mut _7: std::boxed::Box<i32>;    // in scope 0 at ui/type-param-constraints.rs:29:21: 29:33
    let _8: ();                          // in scope 0 at ui/type-param-constraints.rs:30:5: 30:14
    let _9: ();                          // in scope 0 at ui/type-param-constraints.rs:32:5: 32:34
    let mut _10: std::boxed::Box<i32>;   // in scope 0 at ui/type-param-constraints.rs:32:21: 32:33
    let _11: ();                         // in scope 0 at ui/type-param-constraints.rs:33:5: 33:14
    let _12: ();                         // in scope 0 at ui/type-param-constraints.rs:35:5: 35:34
    let mut _13: std::boxed::Box<i32>;   // in scope 0 at ui/type-param-constraints.rs:35:21: 35:33
    let _14: ();                         // in scope 0 at ui/type-param-constraints.rs:36:5: 36:14

    bb0: {
        _2 = r(const 10_isize) -> bb1;   // scope 0 at ui/type-param-constraints.rs:26:11: 26:16
                                         // mir::Constant
                                         // + span: ui/type-param-constraints.rs:26:11: 26:12
                                         // + literal: Const { ty: fn(isize) -> r {r}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = p_foo::<r>(move _2) -> bb2; // scope 0 at ui/type-param-constraints.rs:26:5: 26:17
                                         // mir::Constant
                                         // + span: ui/type-param-constraints.rs:26:5: 26:10
                                         // + literal: Const { ty: fn(r) {p_foo::<r>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = r(const 10_isize) -> bb3;   // scope 0 at ui/type-param-constraints.rs:28:30: 28:35
                                         // mir::Constant
                                         // + span: ui/type-param-constraints.rs:28:30: 28:31
                                         // + literal: Const { ty: fn(isize) -> r {r}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = Box::<r>::new(move _5) -> bb4; // scope 0 at ui/type-param-constraints.rs:28:21: 28:36
                                         // mir::Constant
                                         // + span: ui/type-param-constraints.rs:28:21: 28:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(r) -> Box<r> {Box::<r>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _3 = p_foo::<Box<r>>(move _4) -> bb5; // scope 0 at ui/type-param-constraints.rs:28:5: 28:37
                                         // mir::Constant
                                         // + span: ui/type-param-constraints.rs:28:5: 28:20
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<r>) {p_foo::<Box<r>>}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = Box::<i32>::new(const 10_i32) -> bb6; // scope 0 at ui/type-param-constraints.rs:29:21: 29:33
                                         // mir::Constant
                                         // + span: ui/type-param-constraints.rs:29:21: 29:29
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb6: {
        _6 = p_foo::<Box<i32>>(move _7) -> bb7; // scope 0 at ui/type-param-constraints.rs:29:5: 29:34
                                         // mir::Constant
                                         // + span: ui/type-param-constraints.rs:29:5: 29:20
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Box<i32>) {p_foo::<Box<i32>>}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = p_foo::<i32>(const 10_i32) -> bb8; // scope 0 at ui/type-param-constraints.rs:30:5: 30:14
                                         // mir::Constant
                                         // + span: ui/type-param-constraints.rs:30:5: 30:10
                                         // + literal: Const { ty: fn(i32) {p_foo::<i32>}, val: Value(<ZST>) }
    }

    bb8: {
        _10 = Box::<i32>::new(const 10_i32) -> bb9; // scope 0 at ui/type-param-constraints.rs:32:21: 32:33
                                         // mir::Constant
                                         // + span: ui/type-param-constraints.rs:32:21: 32:29
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb9: {
        _9 = s_foo::<Box<i32>>(move _10) -> bb10; // scope 0 at ui/type-param-constraints.rs:32:5: 32:34
                                         // mir::Constant
                                         // + span: ui/type-param-constraints.rs:32:5: 32:20
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(Box<i32>) {s_foo::<Box<i32>>}, val: Value(<ZST>) }
    }

    bb10: {
        _11 = s_foo::<i32>(const 10_i32) -> bb11; // scope 0 at ui/type-param-constraints.rs:33:5: 33:14
                                         // mir::Constant
                                         // + span: ui/type-param-constraints.rs:33:5: 33:10
                                         // + literal: Const { ty: fn(i32) {s_foo::<i32>}, val: Value(<ZST>) }
    }

    bb11: {
        _13 = Box::<i32>::new(const 10_i32) -> bb12; // scope 0 at ui/type-param-constraints.rs:35:21: 35:33
                                         // mir::Constant
                                         // + span: ui/type-param-constraints.rs:35:21: 35:29
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb12: {
        _12 = u_foo::<Box<i32>>(move _13) -> bb13; // scope 0 at ui/type-param-constraints.rs:35:5: 35:34
                                         // mir::Constant
                                         // + span: ui/type-param-constraints.rs:35:5: 35:20
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(Box<i32>) {u_foo::<Box<i32>>}, val: Value(<ZST>) }
    }

    bb13: {
        _14 = u_foo::<i32>(const 10_i32) -> bb14; // scope 0 at ui/type-param-constraints.rs:36:5: 36:14
                                         // mir::Constant
                                         // + span: ui/type-param-constraints.rs:36:5: 36:10
                                         // + literal: Const { ty: fn(i32) {u_foo::<i32>}, val: Value(<ZST>) }
    }

    bb14: {
        return;                          // scope 0 at ui/type-param-constraints.rs:37:2: 37:2
    }
}
