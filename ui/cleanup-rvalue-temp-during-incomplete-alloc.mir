// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn do_it(_1: &[usize]) -> Foo {
    debug x => _1;                       // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:33:10: 33:11
    let mut _0: Foo;                     // return place in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:33:26: 33:29
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _2 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn get_bar(_1: usize) -> Vec<usize> {
    debug x => _1;                       // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:37:12: 37:13
    let mut _0: std::vec::Vec<usize>;    // return place in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:37:25: 37:35
    let mut _2: std::boxed::Box<[usize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[usize; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[usize; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: usize;                   // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:37:43: 37:48
    let mut _9: usize;                   // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:37:43: 37:44
    let mut _10: (usize, bool);          // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:37:43: 37:48
    let mut _11: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _12: *const [usize; 1];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }

    bb0: {
        _4 = const 8_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 8_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [usize; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = _1;                         // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:37:43: 37:44
        _10 = CheckedMul(_9, const 2_usize); // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:37:43: 37:48
        assert(!move (_10.1: bool), "attempt to compute `{} * {}`, which would overflow", move _9, const 2_usize) -> [success: bb2, unwind: bb5]; // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:37:43: 37:48
    }

    bb2: {
        _8 = move (_10.0: usize);        // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:37:43: 37:48
        _12 = (((_7.0: std::ptr::Unique<[usize; 1]>).0: std::ptr::NonNull<[usize; 1]>).0: *const [usize; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_12) = [move _8];              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[usize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _0 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _2) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[usize]>) -> Vec<usize> {slice::<impl [usize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:37:51: 37:51
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:37:1: 37:51
    }

    bb5 (cleanup): {
        _11 = alloc::alloc::box_free::<[usize; 1], std::alloc::Global>(move (_7.0: std::ptr::Unique<[usize; 1]>), move (_7.1: std::alloc::Global)) -> bb4; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[usize; 1]>, std::alloc::Global) {alloc::alloc::box_free::<[usize; 1], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

fn fails() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:39:16: 39:16
    let _1: usize;                       // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:40:9: 40:10
    let _3: ();                          // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:5: 42:62
    let mut _4: &mut std::vec::Vec<std::boxed::Box<Conzabble>>; // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:5: 42:62
    let mut _5: std::boxed::Box<Conzabble>; // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:12: 42:61
    let mut _6: Conzabble;               // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:21: 42:60
    let mut _7: Foo;                     // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:41: 42:59
    let mut _8: &[usize];                // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:47: 42:58
    let _9: &[usize];                    // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:47: 42:58
    let mut _10: &std::vec::Vec<usize>;  // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:47: 42:58
    let _11: &std::vec::Vec<usize>;      // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:47: 42:58
    let _12: std::vec::Vec<usize>;       // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:48: 42:58
    let mut _13: usize;                  // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:56: 42:57
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:40:9: 40:10
        let mut _2: std::vec::Vec<std::boxed::Box<Conzabble>>; // in scope 1 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:41:9: 41:14
        scope 2 {
            debug y => _2;               // in scope 2 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:41:9: 41:14
        }
    }

    bb0: {
        _1 = const 2_usize;              // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:40:13: 40:14
        _2 = Vec::<Box<Conzabble>>::new() -> bb1; // scope 1 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:41:30: 41:40
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:41:30: 41:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<Box<Conzabble>> {Vec::<Box<Conzabble>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _2;                    // scope 2 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:5: 42:62
        _13 = _1;                        // scope 2 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:56: 42:57
        _12 = get_bar(move _13) -> [return: bb2, unwind: bb10]; // scope 2 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:48: 42:58
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:48: 42:55
                                         // + literal: Const { ty: fn(usize) -> Vec<usize> {get_bar}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &_12;                      // scope 2 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:47: 42:58
        _10 = _11;                       // scope 2 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:47: 42:58
        _9 = <Vec<usize> as Deref>::deref(move _10) -> [return: bb3, unwind: bb9]; // scope 2 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:47: 42:58
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:47: 42:58
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<usize>) -> &'a <Vec<usize> as Deref>::Target {<Vec<usize> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = _9;                         // scope 2 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:47: 42:58
        _7 = do_it(move _8) -> [return: bb4, unwind: bb9]; // scope 2 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:41: 42:59
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:41: 42:46
                                         // + literal: Const { ty: for<'a> fn(&'a [usize]) -> Foo {do_it}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = Conzabble::Bickwick(move _7); // scope 2 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:21: 42:60
        _5 = Box::<Conzabble>::new(move _6) -> [return: bb5, unwind: bb9]; // scope 2 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:12: 42:61
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:12: 42:20
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Conzabble) -> Box<Conzabble> {Box::<Conzabble>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _3 = Vec::<Box<Conzabble>>::push(move _4, move _5) -> [return: bb6, unwind: bb9]; // scope 2 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:5: 42:62
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:7: 42:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Box<Conzabble>>, Box<Conzabble>) {Vec::<Box<Conzabble>>::push}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_12) -> [return: bb7, unwind: bb10]; // scope 2 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:62: 42:63
    }

    bb7: {
        drop(_2) -> bb8;                 // scope 1 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:43:1: 43:2
    }

    bb8: {
        return;                          // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:43:2: 43:2
    }

    bb9 (cleanup): {
        drop(_12) -> bb10;               // scope 2 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:42:62: 42:63
    }

    bb10 (cleanup): {
        drop(_2) -> bb11;                // scope 1 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:43:1: 43:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:39:1: 43:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:45:15: 45:15
    let _1: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:46:5: 46:32
    let mut _2: std::thread::JoinHandle<()>; // in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:46:5: 46:25

    bb0: {
        _2 = spawn::<fn() {fails}, ()>(fails) -> bb1; // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:46:5: 46:25
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:46:5: 46:18
                                         // + literal: Const { ty: fn(fn() {fails}) -> JoinHandle<()> {spawn::<fn() {fails}, ()>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:46:19: 46:24
                                         // + literal: Const { ty: fn() {fails}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = JoinHandle::<()>::join(move _2) -> bb2; // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:46:5: 46:32
                                         // mir::Constant
                                         // + span: ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:46:26: 46:30
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:46:32: 46:33
    }

    bb3: {
        return;                          // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:47:2: 47:2
    }
}

fn Conzabble::Bickwick(_1: Foo) -> Conzabble {
    let mut _0: Conzabble;               // return place in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:28:5: 28:13

    bb0: {
        _0 = Conzabble::Bickwick(move _1); // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:28:5: 28:13
        return;                          // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:28:5: 28:13
    }
}

// MIR FOR CTFE
fn Conzabble::Bickwick(_1: Foo) -> Conzabble {
    let mut _0: Conzabble;               // return place in scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:28:5: 28:13

    bb0: {
        _0 = Conzabble::Bickwick(move _1); // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:28:5: 28:13
        return;                          // scope 0 at ui/cleanup-rvalue-temp-during-incomplete-alloc.rs:28:5: 28:13
    }
}
