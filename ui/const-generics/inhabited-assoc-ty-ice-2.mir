// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const Foo::ASSOC: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:9:18: 9:23

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:9:26: 9:27
        return;                          // scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:9:5: 9:28
    }
}

Iced::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:15:10: 15:18

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:15:10: 15:18
        return;                          // scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:15:10: 15:18
    }
}

Iced::1::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:13:29: 13:37

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:13:29: 13:37
        return;                          // scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:13:29: 13:37
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:19:11: 19:11
    let _1: Iced<u32>;                   // in scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:20:9: 20:14
    scope 1 {
        debug _iced => _1;               // in scope 1 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:20:9: 20:14
    }

    bb0: {
        return;                          // scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:21:2: 21:2
    }
}

fn Iced(_1: T, _2: [(); T::ASSOC]) -> Iced<T> {
    let mut _0: Iced<T>;                 // return place in scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:13:1: 13:20

    bb0: {
        _0 = Iced::<T>(move _1, move _2); // scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:13:1: 13:20
        return;                          // scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:13:1: 13:20
    }
}

// MIR FOR CTFE
fn Iced(_1: T, _2: [(); T::ASSOC]) -> Iced<T> {
    let mut _0: Iced<T>;                 // return place in scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:13:1: 13:20

    bb0: {
        _0 = Iced::<T>(move _1, move _2); // scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:13:1: 13:20
        return;                          // scope 0 at ui/const-generics/inhabited-assoc-ty-ice-2.rs:13:1: 13:20
    }
}
