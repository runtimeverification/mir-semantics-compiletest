// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
ConstDefault::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

<impl at ui/const-generics/defaults/const-default.rs:4:1: 4:37>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/defaults/const-default.rs:4:1: 4:37>::foo(_1: ConstDefault<N>) -> usize {
    debug self => const ZeroSized: ConstDefault<N>;
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/defaults/const-default.rs:10:1: 10:18>::new() -> ConstDefault {
    let mut _0: ConstDefault;

    bb0: {
        return;
    }
}

fn <impl at ui/const-generics/defaults/const-default.rs:10:1: 10:18>::bar(_1: ConstDefault) -> () {
    debug self => const ConstDefault;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ConstDefault;
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let _14: ();
    scope 1 {
        debug s => const ConstDefault;
        let _5: &usize;
        let _6: &usize;
        let mut _15: &usize;
        scope 2 {
            debug left_val => _5;
            debug right_val => _6;
            let _11: core::panicking::AssertKind;
            scope 3 {
                debug kind => _11;
            }
        }
        scope 4 {
            debug w => const ConstDefault;
        }
    }

    bb0: {
        _1 = ConstDefault::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = ConstDefault::foo(const ConstDefault) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &_4;
        _15 = const _;
        _2 = (move _3, _15);
        _5 = (_2.0: &usize);
        _6 = (_2.1: &usize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<usize, usize>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb4: {
        _14 = ConstDefault::bar(const ConstDefault) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
