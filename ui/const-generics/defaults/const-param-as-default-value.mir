// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:2:45: 2:46

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:2:45: 2:46
        return;                          // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:2:45: 2:46
    }
}

Foo::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:2:53: 2:54

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:2:53: 2:54
        return;                          // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:2:53: 2:54
    }
}

Foo::1::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:2:62: 2:63

    bb0: {
        _0 = const M;                    // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:2:62: 2:63
        return;                          // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:2:62: 2:63
    }
}

fn foo() -> Foo<N> {
    let mut _0: Foo<N>;                  // return place in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:4:29: 4:35
    let _1: [u8; N];                     // in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:5:9: 5:10
    let mut _2: [u8; N];                 // in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:6:9: 6:10
    let mut _3: [u8; N];                 // in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:6:12: 6:13
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/const-generics/defaults/const-param-as-default-value.rs:5:9: 5:10
    }

    bb0: {
        _1 = [const 0_u8; N];            // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:5:13: 5:19
        _2 = _1;                         // scope 1 at ui/const-generics/defaults/const-param-as-default-value.rs:6:9: 6:10
        _3 = _1;                         // scope 1 at ui/const-generics/defaults/const-param-as-default-value.rs:6:12: 6:13
        _0 = Foo::<N>(move _2, move _3); // scope 1 at ui/const-generics/defaults/const-param-as-default-value.rs:6:5: 6:14
        return;                          // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:7:2: 7:2
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:4:33: 4:34

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:4:33: 4:34
        return;                          // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:4:33: 4:34
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:5:17: 5:18

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:5:17: 5:18
        return;                          // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:5:17: 5:18
    }
}

fn concrete_foo() -> Foo<13> {
    let mut _0: Foo<13>;                 // return place in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:10:22: 10:29
    let mut _1: [u8; 13];                // in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:11:9: 11:27
    let mut _2: [u8; 13];                // in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:11:29: 11:47

    bb0: {
        _1 = <[u8; 13] as Default>::default() -> bb1; // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:11:9: 11:27
                                         // mir::Constant
                                         // + span: ui/const-generics/defaults/const-param-as-default-value.rs:11:9: 11:25
                                         // + literal: Const { ty: fn() -> [u8; 13] {<[u8; 13] as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <[u8; 13] as Default>::default() -> bb2; // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:11:29: 11:47
                                         // mir::Constant
                                         // + span: ui/const-generics/defaults/const-param-as-default-value.rs:11:29: 11:45
                                         // + literal: Const { ty: fn() -> [u8; 13] {<[u8; 13] as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Foo::<13>(move _1, move _2); // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:11:5: 11:48
        return;                          // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:12:2: 12:2
    }
}

concrete_foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:10:26: 10:28

    bb0: {
        _0 = const 13_usize;             // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:10:26: 10:28
        return;                          // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:10:26: 10:28
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:15:11: 15:11
    let _1: Foo<13>;                     // in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:16:9: 16:12
    let mut _2: (&[u8; 13], &[u8; 13]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &[u8; 13];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &[u8; 13];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &[u8; 13];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &[u8; 13];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &[u8; 13];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &[u8; 13];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &[u8; 13];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &[u8; 13];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: (&[u8; 13], &[u8; 13]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _21: &[u8; 13];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _22: &[u8; 13];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _27: &[u8; 13];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _28: &[u8; 13];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _30: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _31: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _32: &[u8; 13];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _33: &[u8; 13];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _34: &[u8; 13];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _35: &[u8; 13];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug val => _1;                 // in scope 1 at ui/const-generics/defaults/const-param-as-default-value.rs:16:9: 16:12
        let _5: &[u8; 13];               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _6: &[u8; 13];               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _19: Foo<13>;                // in scope 1 at ui/const-generics/defaults/const-param-as-default-value.rs:19:9: 19:12
        scope 2 {
            debug left_val => _5;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _6;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _11: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _11;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug val => _19;            // in scope 4 at ui/const-generics/defaults/const-param-as-default-value.rs:19:9: 19:12
            let _23: &[u8; 13];          // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _24: &[u8; 13];          // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 5 {
                debug left_val => _23;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _24;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _29: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _29;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = foo::<13>() -> bb1;         // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:16:15: 16:26
                                         // mir::Constant
                                         // + span: ui/const-generics/defaults/const-param-as-default-value.rs:16:15: 16:24
                                         // + literal: Const { ty: fn() -> Foo<13> {foo::<13>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &(_1.0: [u8; 13]);          // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _4 = &(_1.1: [u8; 13]);          // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_2.0: &[u8; 13]);          // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_2.1: &[u8; 13]);          // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <[u8; 13] as PartialEq>::eq(move _9, move _10) -> bb2; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u8; 13], &'b [u8; 13]) -> bool {<[u8; 13] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Not(move _8);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _11 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<[u8; 13], [u8; 13]>(move _13, move _14, move _16, move _18); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [u8; 13], &'b [u8; 13], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[u8; 13], [u8; 13]>}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = concrete_foo() -> bb5;     // scope 1 at ui/const-generics/defaults/const-param-as-default-value.rs:19:15: 19:29
                                         // mir::Constant
                                         // + span: ui/const-generics/defaults/const-param-as-default-value.rs:19:15: 19:27
                                         // + literal: Const { ty: fn() -> Foo<13> {concrete_foo}, val: Value(<ZST>) }
    }

    bb5: {
        _21 = &(_19.0: [u8; 13]);        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = &(_19.1: [u8; 13]);        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _20 = (move _21, move _22);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _23 = (_20.0: &[u8; 13]);        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _24 = (_20.1: &[u8; 13]);        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _27 = _23;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _28 = _24;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _26 = <[u8; 13] as PartialEq>::eq(move _27, move _28) -> bb6; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u8; 13], &'b [u8; 13]) -> bool {<[u8; 13] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _25 = Not(move _26);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _25) -> [0: bb8, otherwise: bb7]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _29 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = _23;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _33;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _24;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = _35;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _30 = core::panicking::assert_failed::<[u8; 13], [u8; 13]>(move _31, move _32, move _34, move _36); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [u8; 13], &'b [u8; 13], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[u8; 13], [u8; 13]>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:21:2: 21:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:16:21: 16:23

    bb0: {
        _0 = const 13_usize;             // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:16:21: 16:23
        return;                          // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:16:21: 16:23
    }
}

fn Foo(_1: [u8; N], _2: [u8; M]) -> Foo<N, M> {
    let mut _0: Foo<N, M>;               // return place in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:2:1: 2:47

    bb0: {
        _0 = Foo::<N, M>(move _1, move _2); // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:2:1: 2:47
        return;                          // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:2:1: 2:47
    }
}

// MIR FOR CTFE
fn Foo(_1: [u8; N], _2: [u8; M]) -> Foo<N, M> {
    let mut _0: Foo<N, M>;               // return place in scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:2:1: 2:47

    bb0: {
        _0 = Foo::<N, M>(move _1, move _2); // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:2:1: 2:47
        return;                          // scope 0 at ui/const-generics/defaults/const-param-as-default-value.rs:2:1: 2:47
    }
}
