// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:4:29: 4:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:4:29: 4:30
        return;                          // scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:4:29: 4:30
    }
}

fn <impl at ui/const-generics/defaults/type-default-const-param-name.rs:6:1: 6:9>::new() -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:7:17: 7:21

    bb0: {
        return;                          // scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:9:6: 9:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:12:11: 12:11
    let mut _1: Foo;                     // in scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:13:26: 13:36
    scope 1 {
    }

    bb0: {
        _1 = Foo::new() -> bb1;          // scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:13:26: 13:36
                                         // mir::Constant
                                         // + span: ui/const-generics/defaults/type-default-const-param-name.rs:13:26: 13:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Foo {Foo::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:14:2: 14:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:13:15: 13:16

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:13:15: 13:16
        return;                          // scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:13:15: 13:16
    }
}

fn Foo(_1: T) -> Foo<N, T> {
    let mut _0: Foo<N, T>;               // return place in scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:4:1: 4:38

    bb0: {
        _0 = Foo::<N, T>(move _1);       // scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:4:1: 4:38
        return;                          // scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:4:1: 4:38
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<N, T> {
    let mut _0: Foo<N, T>;               // return place in scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:4:1: 4:38

    bb0: {
        _0 = Foo::<N, T>(move _1);       // scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:4:1: 4:38
        return;                          // scope 0 at ui/const-generics/defaults/type-default-const-param-name.rs:4:1: 4:38
    }
}
