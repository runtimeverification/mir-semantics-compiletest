// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/cannot-infer-type-for-const-param.rs:6:45: 6:54

    bb0: {
        _0 = const NUM_BYTES;            // scope 0 at ui/const-generics/cannot-infer-type-for-const-param.rs:6:45: 6:54
        return;                          // scope 0 at ui/const-generics/cannot-infer-type-for-const-param.rs:6:45: 6:54
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/cannot-infer-type-for-const-param.rs:8:11: 8:11
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/const-generics/cannot-infer-type-for-const-param.rs:10:2: 10:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/cannot-infer-type-for-const-param.rs:9:19: 9:20

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/cannot-infer-type-for-const-param.rs:9:19: 9:20
        return;                          // scope 0 at ui/const-generics/cannot-infer-type-for-const-param.rs:9:19: 9:20
    }
}

fn Foo(_1: [u8; NUM_BYTES]) -> Foo<NUM_BYTES> {
    let mut _0: Foo<NUM_BYTES>;          // return place in scope 0 at ui/const-generics/cannot-infer-type-for-const-param.rs:6:1: 6:35

    bb0: {
        _0 = Foo::<NUM_BYTES>(move _1);  // scope 0 at ui/const-generics/cannot-infer-type-for-const-param.rs:6:1: 6:35
        return;                          // scope 0 at ui/const-generics/cannot-infer-type-for-const-param.rs:6:1: 6:35
    }
}

// MIR FOR CTFE
fn Foo(_1: [u8; NUM_BYTES]) -> Foo<NUM_BYTES> {
    let mut _0: Foo<NUM_BYTES>;          // return place in scope 0 at ui/const-generics/cannot-infer-type-for-const-param.rs:6:1: 6:35

    bb0: {
        _0 = Foo::<NUM_BYTES>(move _1);  // scope 0 at ui/const-generics/cannot-infer-type-for-const-param.rs:6:1: 6:35
        return;                          // scope 0 at ui/const-generics/cannot-infer-type-for-const-param.rs:6:1: 6:35
    }
}
