// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn as_chunks() -> [u8; N] {
    let mut _0: [u8; N];                 // return place in scope 0 at ui/const-generics/infer_arr_len_from_pat.rs:5:35: 5:42

    bb0: {
        goto -> bb1;                     // scope 0 at ui/const-generics/infer_arr_len_from_pat.rs:6:5: 6:12
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/const-generics/infer_arr_len_from_pat.rs:6:5: 6:12
    }
}

as_chunks::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/infer_arr_len_from_pat.rs:5:40: 5:41

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/infer_arr_len_from_pat.rs:5:40: 5:41
        return;                          // scope 0 at ui/const-generics/infer_arr_len_from_pat.rs:5:40: 5:41
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/infer_arr_len_from_pat.rs:9:11: 9:11
    let mut _1: [u8; 2];                 // in scope 0 at ui/const-generics/infer_arr_len_from_pat.rs:10:18: 10:29
    scope 1 {
    }

    bb0: {
        _1 = as_chunks::<2>() -> bb1;    // scope 0 at ui/const-generics/infer_arr_len_from_pat.rs:10:18: 10:29
                                         // mir::Constant
                                         // + span: ui/const-generics/infer_arr_len_from_pat.rs:10:18: 10:27
                                         // + literal: Const { ty: fn() -> [u8; 2] {as_chunks::<2>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/infer_arr_len_from_pat.rs:11:2: 11:2
    }
}
