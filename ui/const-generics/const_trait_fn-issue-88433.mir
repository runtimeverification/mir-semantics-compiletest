// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/const-generics/const_trait_fn-issue-88433.rs:15:1: 15:36>::call_once(_1: Closure, _2: &usize) -> usize {
    debug self => const Closure;
    debug arg => _2;
    let mut _0: usize;

    bb0: {
        _0 = (*_2);
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/const-generics/const_trait_fn-issue-88433.rs:15:1: 15:36>::call_once(_1: Closure, _2: &usize) -> usize {
    debug self => _1;
    debug arg => _2;
    let mut _0: usize;

    bb0: {
        _0 = (*_2);
        return;
    }
}

Bug::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: Closure;
    let mut _2: &usize;
    let _3: &usize;
    let _4: usize;
    let mut _5: &usize;

    bb0: {
        StorageLive(_1);
        _1 = Closure;
        StorageLive(_2);
        StorageLive(_3);
        _5 = const _;
        _3 = &(*_5);
        _2 = &(*_3);
        ConstEvalCounter;
        _0 = <Closure as Func<&usize>>::call_once(move _1, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in Bug::{constant#0}: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Bug::V(_1: T) -> Bug<T> {
    let mut _0: Bug<T>;

    bb0: {
        _0 = Bug::<T>::V(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Bug::V(_1: T) -> Bug<T> {
    let mut _0: Bug<T>;

    bb0: {
        _0 = Bug::<T>::V(move _1);
        return;
    }
}
