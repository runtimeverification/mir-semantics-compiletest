// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn both(_1: usize, _2: usize) -> usize {
    debug b => _2;                       // in scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:5:25: 5:26
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:5:38: 5:43

    bb0: {
        _0 = _2;                         // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:6:5: 6:6
        return;                          // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:7:2: 7:2
    }
}

// MIR FOR CTFE
fn both(_1: usize, _2: usize) -> usize {
    debug b => _2;                       // in scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:5:25: 5:26
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:5:38: 5:43

    bb0: {
        _0 = _2;                         // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:6:5: 6:6
        return;                          // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:7:2: 7:2
    }
}

fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:10:1: 10:1
    let _1: ();                          // in scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:13:5: 13:15

    bb0: {
        _1 = bar::<N>() -> bb1;          // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:13:5: 13:15
                                         // mir::Constant
                                         // + span: ui/const-generics/fn_with_two_same_const_inputs.rs:13:5: 13:13
                                         // + literal: Const { ty: fn() {bar::<N>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:14:2: 14:2
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:10: 11:28
    let mut _1: usize;                   // in scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:15: 11:20
    let mut _2: (usize, bool);           // in scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:15: 11:20
    let mut _3: usize;                   // in scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:22: 11:27
    let mut _4: (usize, bool);           // in scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:22: 11:27

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:15: 11:20
        _2 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:15: 11:20
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:15: 11:20
    }

    bb1: {
        _1 = move (_2.0: usize);         // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:15: 11:20
        StorageLive(_3);                 // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:22: 11:27
        _4 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:22: 11:27
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb2; // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:22: 11:27
    }

    bb2: {
        _3 = move (_4.0: usize);         // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:22: 11:27
        ConstEvalCounter;                // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:10: 11:28
        _0 = both(move _1, move _3) -> bb3; // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:10: 11:28
                                         // mir::Constant
                                         // + span: ui/const-generics/fn_with_two_same_const_inputs.rs:11:10: 11:14
                                         // + literal: Const { ty: fn(usize, usize) -> usize {both}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:27: 11:28
        StorageDead(_1);                 // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:27: 11:28
        return;                          // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:11:10: 11:28
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:13:11: 13:12

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:13:11: 13:12
        return;                          // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:13:11: 13:12
    }
}

fn bar() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:17:1: 17:1

    bb0: {
        return;                          // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:20:2: 20:2
    }
}

bar::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:18:10: 18:15
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:18:10: 18:15

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:18:10: 18:15
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:18:10: 18:15
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:18:10: 18:15
        return;                          // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:18:10: 18:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:22:11: 22:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/fn_with_two_same_const_inputs.rs:22:13: 22:13
    }
}
