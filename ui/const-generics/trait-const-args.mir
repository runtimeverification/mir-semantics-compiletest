// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/trait-const-args.rs:6:1: 6:41>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/trait-const-args.rs:6:26: 6:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/trait-const-args.rs:6:26: 6:27
        return;                          // scope 0 at ui/const-generics/trait-const-args.rs:6:26: 6:27
    }
}

<impl at ui/const-generics/trait-const-args.rs:6:1: 6:41>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/trait-const-args.rs:6:39: 6:40

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/trait-const-args.rs:6:39: 6:40
        return;                          // scope 0 at ui/const-generics/trait-const-args.rs:6:39: 6:40
    }
}

fn foo_impl(_1: impl Foo<3>) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/trait-const-args.rs:8:29: 8:29

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/const-generics/trait-const-args.rs:8:30: 8:31
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/trait-const-args.rs:8:31: 8:31
    }
}

foo_impl::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/trait-const-args.rs:8:25: 8:26

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/trait-const-args.rs:8:25: 8:26
        return;                          // scope 0 at ui/const-generics/trait-const-args.rs:8:25: 8:26
    }
}

fn foo_explicit(_1: T) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/trait-const-args.rs:10:34: 10:34

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/const-generics/trait-const-args.rs:10:35: 10:36
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/trait-const-args.rs:10:36: 10:36
    }
}

foo_explicit::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/trait-const-args.rs:10:24: 10:25

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/trait-const-args.rs:10:24: 10:25
        return;                          // scope 0 at ui/const-generics/trait-const-args.rs:10:24: 10:25
    }
}

fn foo_where(_1: T) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/trait-const-args.rs:13:1: 13:1

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/const-generics/trait-const-args.rs:16:1: 16:2
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/trait-const-args.rs:16:2: 16:2
    }
}

foo_where::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/trait-const-args.rs:14:12: 14:13

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/trait-const-args.rs:14:12: 14:13
        return;                          // scope 0 at ui/const-generics/trait-const-args.rs:14:12: 14:13
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/trait-const-args.rs:18:11: 18:11
    let _1: ();                          // in scope 0 at ui/const-generics/trait-const-args.rs:19:5: 19:20
    let mut _2: Const<3>;                // in scope 0 at ui/const-generics/trait-const-args.rs:19:14: 19:19
    let _3: ();                          // in scope 0 at ui/const-generics/trait-const-args.rs:20:5: 20:25
    let mut _4: Const<3>;                // in scope 0 at ui/const-generics/trait-const-args.rs:20:14: 20:24
    let _5: ();                          // in scope 0 at ui/const-generics/trait-const-args.rs:22:5: 22:24
    let mut _6: Const<3>;                // in scope 0 at ui/const-generics/trait-const-args.rs:22:18: 22:23
    let _7: ();                          // in scope 0 at ui/const-generics/trait-const-args.rs:23:5: 23:29
    let mut _8: Const<3>;                // in scope 0 at ui/const-generics/trait-const-args.rs:23:18: 23:28
    let _9: ();                          // in scope 0 at ui/const-generics/trait-const-args.rs:25:5: 25:21
    let mut _10: Const<3>;               // in scope 0 at ui/const-generics/trait-const-args.rs:25:15: 25:20
    let _11: ();                         // in scope 0 at ui/const-generics/trait-const-args.rs:26:5: 26:26
    let mut _12: Const<3>;               // in scope 0 at ui/const-generics/trait-const-args.rs:26:15: 26:25

    bb0: {
        _1 = foo_impl::<Const<3>>(move _2) -> bb1; // scope 0 at ui/const-generics/trait-const-args.rs:19:5: 19:20
                                         // mir::Constant
                                         // + span: ui/const-generics/trait-const-args.rs:19:5: 19:13
                                         // + literal: Const { ty: fn(Const<3>) {foo_impl::<Const<3>>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = foo_impl::<Const<3>>(move _4) -> bb2; // scope 0 at ui/const-generics/trait-const-args.rs:20:5: 20:25
                                         // mir::Constant
                                         // + span: ui/const-generics/trait-const-args.rs:20:5: 20:13
                                         // + literal: Const { ty: fn(Const<3>) {foo_impl::<Const<3>>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = foo_explicit::<Const<3>>(move _6) -> bb3; // scope 0 at ui/const-generics/trait-const-args.rs:22:5: 22:24
                                         // mir::Constant
                                         // + span: ui/const-generics/trait-const-args.rs:22:5: 22:17
                                         // + literal: Const { ty: fn(Const<3>) {foo_explicit::<Const<3>>}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = foo_explicit::<Const<3>>(move _8) -> bb4; // scope 0 at ui/const-generics/trait-const-args.rs:23:5: 23:29
                                         // mir::Constant
                                         // + span: ui/const-generics/trait-const-args.rs:23:5: 23:17
                                         // + literal: Const { ty: fn(Const<3>) {foo_explicit::<Const<3>>}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = foo_where::<Const<3>>(move _10) -> bb5; // scope 0 at ui/const-generics/trait-const-args.rs:25:5: 25:21
                                         // mir::Constant
                                         // + span: ui/const-generics/trait-const-args.rs:25:5: 25:14
                                         // + literal: Const { ty: fn(Const<3>) {foo_where::<Const<3>>}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = foo_where::<Const<3>>(move _12) -> bb6; // scope 0 at ui/const-generics/trait-const-args.rs:26:5: 26:26
                                         // mir::Constant
                                         // + span: ui/const-generics/trait-const-args.rs:26:5: 26:14
                                         // + literal: Const { ty: fn(Const<3>) {foo_where::<Const<3>>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/const-generics/trait-const-args.rs:27:2: 27:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/trait-const-args.rs:20:22: 20:23

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/trait-const-args.rs:20:22: 20:23
        return;                          // scope 0 at ui/const-generics/trait-const-args.rs:20:22: 20:23
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/trait-const-args.rs:23:26: 23:27

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/trait-const-args.rs:23:26: 23:27
        return;                          // scope 0 at ui/const-generics/trait-const-args.rs:23:26: 23:27
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/trait-const-args.rs:26:23: 26:24

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/trait-const-args.rs:26:23: 26:24
        return;                          // scope 0 at ui/const-generics/trait-const-args.rs:26:23: 26:24
    }
}
