// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn T::test(_1: &Self) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = const A;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: S;
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: i32;
    let mut _5: &S;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&i32, &i32);
    let mut _16: &i32;
    let _17: i32;
    let mut _18: &S;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: i32;
    let mut _24: i32;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo => const S();
        let _6: &i32;
        let _7: &i32;
        let _19: &i32;
        let _20: &i32;
        let mut _28: &i32;
        let mut _29: &i32;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug left_val => _19;
            debug right_val => _20;
            let _25: core::panicking::AssertKind;
            scope 5 {
                debug kind => _25;
            }
        }
    }

    bb0: {
        _5 = &_1;
        _4 = <S as T>::test::<8>(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _29 = const _;
        _2 = (move _3, _29);
        _6 = (_2.0: &i32);
        _7 = (_2.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _18 = &_1;
        _17 = <S as T>::test::<16>(move _18) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = &_17;
        _28 = const _;
        _15 = (move _16, _28);
        _19 = (_15.0: &i32);
        _20 = (_15.1: &i32);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<i32, i32>(move _25, _19, _20, move _27) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 16_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 8_i32;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 8_i32;
        return;
    }
}

main::{constant#1}: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 16_i32;
        return;
    }
}

fn S() -> S {
    let mut _0: S;

    bb0: {
        _0 = S;
        return;
    }
}

// MIR FOR CTFE
fn S() -> S {
    let mut _0: S;

    bb0: {
        _0 = S;
        return;
    }
}
