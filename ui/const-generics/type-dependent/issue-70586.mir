// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/const-generics/type-dependent/issue-70586.rs:7:1: 7:15>::const_chunks_exact() -> ConstChunksExact<'_, T, N> {
    let mut _0: ConstChunksExact<'_, T, N>; // return place in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:8:55: 8:86

    bb0: {
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:10:6: 10:6
    }
}

<impl at ui/const-generics/type-dependent/issue-70586.rs:7:1: 7:15>::const_chunks_exact::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:8:84: 8:85

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:8:84: 8:85
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:8:84: 8:85
    }
}

<impl at ui/const-generics/type-dependent/issue-70586.rs:14:10: 14:15>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:15:42: 15:43

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:15:42: 15:43
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:15:42: 15:43
    }
}

fn <impl at ui/const-generics/type-dependent/issue-70586.rs:14:10: 14:15>::fmt(_1: &ConstChunksExact<'_, T, N>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:14:10: 14:15
    debug f => _2;                       // in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:14:10: 14:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:14:10: 14:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:14:10: 14:15
    let mut _4: &str;                    // in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:14:10: 14:15
    let _5: &str;                        // in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:14:10: 14:15
    let mut _6: &str;                    // in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:16:5: 16:31
    let _7: &str;                        // in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:16:5: 16:31
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:16:5: 16:31
    let mut _9: &&std::marker::PhantomData<&T>; // in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:16:5: 16:31
    let _10: &&std::marker::PhantomData<&T>; // in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:16:5: 16:31
    let _11: &std::marker::PhantomData<&T>; // in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:16:5: 16:31

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:14:10: 14:15
        _5 = const "ConstChunksExact";   // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:14:10: 14:15
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70586.rs:14:10: 14:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:14:10: 14:15
        _7 = const "inner";              // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:16:5: 16:31
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70586.rs:16:5: 16:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:16:5: 16:31
        _11 = &((*_1).0: std::marker::PhantomData<&T>); // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:16:5: 16:31
        _10 = &_11;                      // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:16:5: 16:31
        _9 = _10;                        // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:16:5: 16:31
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:16:5: 16:31
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:14:10: 14:15
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70586.rs:14:10: 14:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:14:15: 14:15
    }
}

<impl at ui/const-generics/type-dependent/issue-70586.rs:19:1: 19:73>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:19:67: 19:72

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:19:69: 19:70
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:19:67: 19:72
    }
}

<impl at ui/const-generics/type-dependent/issue-70586.rs:19:1: 19:73>::Item::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:20:25: 20:26

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:20:25: 20:26
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:20:25: 20:26
    }
}

fn <impl at ui/const-generics/type-dependent/issue-70586.rs:19:1: 19:73>::next(_1: &mut ConstChunksExact<'_, T, N>) -> Option<&[T; N]> {
    debug self => _1;                    // in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:22:13: 22:22
    let mut _0: std::option::Option<&[T; N]>; // return place in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:22:27: 22:45
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77

    bb0: {
        _2 = core::panicking::panic(const "internal error: entered unreachable code"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:27:11: 27:11
    let mut _1: ConstChunksExact<'_, i32, 3>; // in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:28:9: 28:19
    let _3: &[i32; 3];                   // in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:29:28: 29:50
    let mut _4: std::option::Option<&[i32; 3]>; // in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:29:28: 29:41
    let mut _5: &mut ConstChunksExact<'_, i32, 3>; // in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:29:28: 29:41
    scope 1 {
        debug chunks => _1;              // in scope 1 at ui/const-generics/type-dependent/issue-70586.rs:28:9: 28:19
        let _2: &[i32; 3];               // in scope 1 at ui/const-generics/type-dependent/issue-70586.rs:29:9: 29:14
        scope 2 {
            debug _next => _2;           // in scope 2 at ui/const-generics/type-dependent/issue-70586.rs:29:9: 29:14
        }
    }

    bb0: {
        _1 = Namespace::const_chunks_exact::<i32, 3>() -> bb1; // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:28:22: 28:68
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70586.rs:28:22: 28:66
                                         // + literal: Const { ty: fn() -> ConstChunksExact<'static, i32, 3> {Namespace::const_chunks_exact::<i32, 3>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _1;                    // scope 1 at ui/const-generics/type-dependent/issue-70586.rs:29:28: 29:41
        _4 = <ConstChunksExact<'_, i32, 3> as Iterator>::next(move _5) -> bb2; // scope 1 at ui/const-generics/type-dependent/issue-70586.rs:29:28: 29:41
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70586.rs:29:35: 29:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut ConstChunksExact<'_, i32, 3>) -> Option<<ConstChunksExact<'_, i32, 3> as Iterator>::Item> {<ConstChunksExact<'_, i32, 3> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Option::<&[i32; 3]>::unwrap(move _4) -> bb3; // scope 1 at ui/const-generics/type-dependent/issue-70586.rs:29:28: 29:50
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70586.rs:29:42: 29:48
                                         // + literal: Const { ty: fn(Option<&[i32; 3]>) -> &[i32; 3] {Option::<&[i32; 3]>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = _3;                         // scope 1 at ui/const-generics/type-dependent/issue-70586.rs:29:28: 29:50
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:30:2: 30:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:28:59: 28:65

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:28:59: 28:65
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:28:59: 28:65
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-70586.rs:29:23: 29:24

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:29:23: 29:24
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70586.rs:29:23: 29:24
    }
}
