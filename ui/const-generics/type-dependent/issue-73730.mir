// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::bar::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-73730.rs:3:53: 3:54

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-73730.rs:3:53: 3:54
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-73730.rs:3:53: 3:54
    }
}

fn <impl at ui/const-generics/type-dependent/issue-73730.rs:6:1: 6:40>::bar(_1: &mut I) -> *const [A; N] {
    debug self => _1;                    // in scope 0 at ui/const-generics/type-dependent/issue-73730.rs:7:28: 7:37
    let mut _0: *const [A; N];           // return place in scope 0 at ui/const-generics/type-dependent/issue-73730.rs:7:42: 7:55

    bb0: {
        _0 = null::<[A; N]>() -> bb1;    // scope 0 at ui/const-generics/type-dependent/issue-73730.rs:8:9: 8:25
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-73730.rs:8:9: 8:23
                                         // + literal: Const { ty: fn() -> *const [A; N] {null::<[A; N]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-73730.rs:9:6: 9:6
    }
}

<impl at ui/const-generics/type-dependent/issue-73730.rs:6:1: 6:40>::bar::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-73730.rs:7:53: 7:54

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-73730.rs:7:53: 7:54
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-73730.rs:7:53: 7:54
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/type-dependent/issue-73730.rs:12:11: 12:11
    let _1: *const [u8; 10];             // in scope 0 at ui/const-generics/type-dependent/issue-73730.rs:13:5: 13:35
    let mut _2: &mut std::ops::Range<u8>; // in scope 0 at ui/const-generics/type-dependent/issue-73730.rs:13:5: 13:35
    let mut _3: std::ops::Range<u8>;     // in scope 0 at ui/const-generics/type-dependent/issue-73730.rs:13:5: 13:17

    bb0: {
        _3 = std::ops::Range::<u8> { start: const 0_u8, end: const 10_u8 }; // scope 0 at ui/const-generics/type-dependent/issue-73730.rs:13:5: 13:17
        _2 = &mut _3;                    // scope 0 at ui/const-generics/type-dependent/issue-73730.rs:13:5: 13:35
        _1 = <std::ops::Range<u8> as Foo<'_, u8>>::bar::<10>(move _2) -> bb1; // scope 0 at ui/const-generics/type-dependent/issue-73730.rs:13:5: 13:35
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-73730.rs:13:18: 13:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<u8>) -> *const [u8; 10] {<std::ops::Range<u8> as Foo<'_, u8>>::bar::<10>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-73730.rs:14:2: 14:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-73730.rs:13:24: 13:32

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/const-generics/type-dependent/issue-73730.rs:13:24: 13:32
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-73730.rs:13:24: 13:32
    }
}
