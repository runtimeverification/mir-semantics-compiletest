// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/const-generics/type-dependent/issue-67144-1.rs:4:1: 4:7>::getn(_1: &X) -> [u8; N] {
    debug self => _1;                    // in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:5:33: 5:38
    let mut _0: [u8; N];                 // return place in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:5:43: 5:50

    bb0: {
        _0 = getn::<N>() -> bb1;         // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:6:9: 6:20
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-67144-1.rs:6:9: 6:18
                                         // + literal: Const { ty: fn() -> [u8; N] {getn::<N>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:7:6: 7:6
    }
}

<impl at ui/const-generics/type-dependent/issue-67144-1.rs:4:1: 4:7>::getn::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:5:48: 5:49

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:5:48: 5:49
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:5:48: 5:49
    }
}

<impl at ui/const-generics/type-dependent/issue-67144-1.rs:4:1: 4:7>::getn::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:6:16: 6:17

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:6:16: 6:17
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:6:16: 6:17
    }
}

fn getn() -> [u8; N] {
    let mut _0: [u8; N];                 // return place in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:10:30: 10:37
    scope 1 {
    }

    bb0: {
        _0 = zeroed::<[u8; N]>() -> bb1; // scope 1 at ui/const-generics/type-dependent/issue-67144-1.rs:12:9: 12:27
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-67144-1.rs:12:9: 12:25
                                         // + literal: Const { ty: unsafe fn() -> [u8; N] {zeroed::<[u8; N]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:14:2: 14:2
    }
}

getn::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:10:35: 10:36

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:10:35: 10:36
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:10:35: 10:36
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:16:11: 16:11
    let _1: u8;                          // in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:18:10: 18:11
    let _2: u8;                          // in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:18:12: 18:13
    let _3: u8;                          // in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:18:14: 18:15
    let mut _4: [u8; 3];                 // in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:18:19: 18:30
    let mut _8: [u8; 3];                 // in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:21:19: 21:32
    let mut _9: &X;                      // in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:21:19: 21:32
    let mut _11: &X;                     // in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:24:24: 24:37
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/const-generics/type-dependent/issue-67144-1.rs:18:10: 18:11
        debug b => _2;                   // in scope 1 at ui/const-generics/type-dependent/issue-67144-1.rs:18:12: 18:13
        debug c => _3;                   // in scope 1 at ui/const-generics/type-dependent/issue-67144-1.rs:18:14: 18:15
        let _5: u8;                      // in scope 1 at ui/const-generics/type-dependent/issue-67144-1.rs:21:10: 21:11
        let _6: u8;                      // in scope 1 at ui/const-generics/type-dependent/issue-67144-1.rs:21:12: 21:13
        let _7: u8;                      // in scope 1 at ui/const-generics/type-dependent/issue-67144-1.rs:21:14: 21:15
        let mut _13: &X;                 // in scope 1 at ui/const-generics/type-dependent/issue-67144-1.rs:21:19: 21:32
        scope 2 {
            debug a => _5;               // in scope 2 at ui/const-generics/type-dependent/issue-67144-1.rs:21:10: 21:11
            debug b => _6;               // in scope 2 at ui/const-generics/type-dependent/issue-67144-1.rs:21:12: 21:13
            debug c => _7;               // in scope 2 at ui/const-generics/type-dependent/issue-67144-1.rs:21:14: 21:15
            let _10: [u8; 3];            // in scope 2 at ui/const-generics/type-dependent/issue-67144-1.rs:24:9: 24:12
            let mut _12: &X;             // in scope 2 at ui/const-generics/type-dependent/issue-67144-1.rs:24:24: 24:37
            scope 3 {
                debug arr => _10;        // in scope 3 at ui/const-generics/type-dependent/issue-67144-1.rs:24:9: 24:12
            }
        }
    }

    bb0: {
        _4 = getn::<3>() -> bb1;         // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:18:19: 18:30
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-67144-1.rs:18:19: 18:28
                                         // + literal: Const { ty: fn() -> [u8; 3] {getn::<3>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = _4[0 of 3];                 // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:18:10: 18:11
        _2 = _4[1 of 3];                 // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:18:12: 18:13
        _3 = _4[2 of 3];                 // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:18:14: 18:15
        _13 = const _;                   // scope 1 at ui/const-generics/type-dependent/issue-67144-1.rs:21:19: 21:32
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-67144-1.rs:21:19: 21:32
                                         // + literal: Const { ty: &X, val: Unevaluated(main, [], Some(promoted[1])) }
        _9 = _13;                        // scope 1 at ui/const-generics/type-dependent/issue-67144-1.rs:21:19: 21:32
        _8 = X::getn::<3>(move _9) -> bb2; // scope 1 at ui/const-generics/type-dependent/issue-67144-1.rs:21:19: 21:32
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-67144-1.rs:21:21: 21:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a X) -> [u8; 3] {X::getn::<3>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = _8[0 of 3];                 // scope 1 at ui/const-generics/type-dependent/issue-67144-1.rs:21:10: 21:11
        _6 = _8[1 of 3];                 // scope 1 at ui/const-generics/type-dependent/issue-67144-1.rs:21:12: 21:13
        _7 = _8[2 of 3];                 // scope 1 at ui/const-generics/type-dependent/issue-67144-1.rs:21:14: 21:15
        _12 = const _;                   // scope 2 at ui/const-generics/type-dependent/issue-67144-1.rs:24:24: 24:37
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-67144-1.rs:24:24: 24:37
                                         // + literal: Const { ty: &X, val: Unevaluated(main, [], Some(promoted[0])) }
        _11 = _12;                       // scope 2 at ui/const-generics/type-dependent/issue-67144-1.rs:24:24: 24:37
        _10 = X::getn::<3>(move _11) -> bb3; // scope 2 at ui/const-generics/type-dependent/issue-67144-1.rs:24:24: 24:37
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-67144-1.rs:24:26: 24:30
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a X) -> [u8; 3] {X::getn::<3>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:25:2: 25:2
    }
}

promoted[0] in main: &X = {
    let mut _0: &X;                      // return place in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:24:24: 24:37
    let mut _1: X;                       // in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:24:24: 24:25

    bb0: {
        _1 = X;                          // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:24:24: 24:25
        _0 = &_1;                        // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:24:24: 24:37
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:24:24: 24:37
    }
}

promoted[1] in main: &X = {
    let mut _0: &X;                      // return place in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:21:19: 21:32
    let mut _1: X;                       // in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:21:19: 21:20

    bb0: {
        _1 = X;                          // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:21:19: 21:20
        _0 = &_1;                        // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:21:19: 21:32
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:21:19: 21:32
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:18:26: 18:27

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:18:26: 18:27
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:18:26: 18:27
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:21:28: 21:29

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:21:28: 21:29
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:21:28: 21:29
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:24:33: 24:34

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:24:33: 24:34
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:24:33: 24:34
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:24:19: 24:20

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:24:19: 24:20
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-67144-1.rs:24:19: 24:20
    }
}
