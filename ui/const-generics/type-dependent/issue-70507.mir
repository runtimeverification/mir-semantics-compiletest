// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
ConstChunksExactTrait::const_chunks_exact::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:4:77: 4:80

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:4:78: 4:79
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:4:77: 4:80
    }
}

fn <impl at ui/const-generics/type-dependent/issue-70507.rs:7:1: 7:42>::const_chunks_exact(_1: &[T]) -> ConstChunksExact<'_, T, N> {
    debug self => _1;                    // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:8:43: 8:48
    let mut _0: ConstChunksExact<'_, T, N>; // return place in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:8:53: 8:81
    let mut _2: bool;                    // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:9:9: 9:24
    let mut _3: bool;                    // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:9:17: 9:23
    let mut _4: !;                       // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:9:9: 9:24
    let _5: usize;                       // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:10:13: 10:16
    let mut _6: usize;                   // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:10:19: 10:29
    let mut _7: &[T];                    // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:10:19: 10:29
    let mut _8: bool;                    // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:10:19: 10:33
    let mut _10: usize;                  // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:11:19: 11:29
    let mut _11: &[T];                   // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:11:19: 11:29
    let mut _12: usize;                  // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:11:32: 11:35
    let mut _13: (usize, bool);          // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:11:19: 11:35
    let mut _15: (&[T], &[T]);           // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:12:24: 12:42
    let mut _16: &[T];                   // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:12:24: 12:42
    let mut _17: usize;                  // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:12:38: 12:41
    let mut _18: &[T];                   // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:13:31: 13:34
    scope 1 {
        debug rem => _5;                 // in scope 1 at ui/const-generics/type-dependent/issue-70507.rs:10:13: 10:16
        let _9: usize;                   // in scope 1 at ui/const-generics/type-dependent/issue-70507.rs:11:13: 11:16
        scope 2 {
            debug len => _9;             // in scope 2 at ui/const-generics/type-dependent/issue-70507.rs:11:13: 11:16
            let _14: &[T];               // in scope 2 at ui/const-generics/type-dependent/issue-70507.rs:12:14: 12:17
            scope 3 {
                debug fst => _14;        // in scope 3 at ui/const-generics/type-dependent/issue-70507.rs:12:14: 12:17
            }
        }
    }

    bb0: {
        _3 = Ne(const N, const 0_usize); // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:9:17: 9:23
        _2 = Not(move _3);               // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:9:9: 9:24
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:9:9: 9:24
    }

    bb1: {
        _4 = core::panicking::panic(const "assertion failed: N != 0"); // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:9:9: 9:24
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70507.rs:9:9: 9:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _7 = _1;                         // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:10:19: 10:29
        _6 = Len((*_7));                 // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:10:19: 10:29
        _8 = Eq(const N, const 0_usize); // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:10:19: 10:33
        assert(!move _8, "attempt to calculate the remainder of `{}` with a divisor of zero", _6) -> bb3; // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:10:19: 10:33
    }

    bb3: {
        _5 = Rem(move _6, const N);      // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:10:19: 10:33
        _11 = _1;                        // scope 1 at ui/const-generics/type-dependent/issue-70507.rs:11:19: 11:29
        _10 = Len((*_11));               // scope 1 at ui/const-generics/type-dependent/issue-70507.rs:11:19: 11:29
        _12 = _5;                        // scope 1 at ui/const-generics/type-dependent/issue-70507.rs:11:32: 11:35
        _13 = CheckedSub(_10, _12);      // scope 1 at ui/const-generics/type-dependent/issue-70507.rs:11:19: 11:35
        assert(!move (_13.1: bool), "attempt to compute `{} - {}`, which would overflow", move _10, move _12) -> bb4; // scope 1 at ui/const-generics/type-dependent/issue-70507.rs:11:19: 11:35
    }

    bb4: {
        _9 = move (_13.0: usize);        // scope 1 at ui/const-generics/type-dependent/issue-70507.rs:11:19: 11:35
        _16 = _1;                        // scope 2 at ui/const-generics/type-dependent/issue-70507.rs:12:24: 12:42
        _17 = _9;                        // scope 2 at ui/const-generics/type-dependent/issue-70507.rs:12:38: 12:41
        _15 = core::slice::<impl [T]>::split_at(move _16, move _17) -> bb5; // scope 2 at ui/const-generics/type-dependent/issue-70507.rs:12:24: 12:42
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70507.rs:12:29: 12:37
                                         // + literal: Const { ty: for<'a> fn(&'a [T], usize) -> (&'a [T], &'a [T]) {core::slice::<impl [T]>::split_at}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = (_15.0: &[T]);             // scope 2 at ui/const-generics/type-dependent/issue-70507.rs:12:14: 12:17
        _18 = _14;                       // scope 3 at ui/const-generics/type-dependent/issue-70507.rs:13:31: 13:34
        _0 = ConstChunksExact::<'_, T, N> { v: move _18 }; // scope 3 at ui/const-generics/type-dependent/issue-70507.rs:13:9: 13:37
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:14:6: 14:6
    }
}

<impl at ui/const-generics/type-dependent/issue-70507.rs:7:1: 7:42>::const_chunks_exact::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:8:77: 8:80

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:8:78: 8:79
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:8:77: 8:80
    }
}

<impl at ui/const-generics/type-dependent/issue-70507.rs:21:1: 21:88>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:21:84: 21:87

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:21:85: 21:86
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:21:84: 21:87
    }
}

<impl at ui/const-generics/type-dependent/issue-70507.rs:21:1: 21:88>::Item::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:22:25: 22:26

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:22:25: 22:26
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:22:25: 22:26
    }
}

fn <impl at ui/const-generics/type-dependent/issue-70507.rs:21:1: 21:88>::next(_1: &mut ConstChunksExact<'_, T, N>) -> Option<&[T; N]> {
    debug self => _1;                    // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:24:13: 24:22
    let mut _0: std::option::Option<&[T; N]>; // return place in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:24:27: 24:45
    let mut _2: bool;                    // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:25:12: 25:28
    let mut _3: usize;                   // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:25:12: 25:24
    let mut _4: &[T];                    // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:25:12: 25:24
    let _5: &[T];                        // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:28:18: 28:21
    let _6: &[T];                        // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:28:23: 28:26
    let mut _7: (&[T], &[T]);            // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:28:30: 28:48
    let mut _8: &[T];                    // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:28:30: 28:48
    let mut _9: &[T];                    // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:30:22: 30:25
    let mut _11: *const [T; N];          // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:31:23: 31:47
    let mut _12: *const T;               // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:31:23: 31:35
    let mut _13: &[T];                   // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:31:23: 31:35
    let mut _14: &[T; N];                // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:32:18: 32:33
    let _15: &[T; N];                    // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:32:27: 32:32
    let mut _16: &[T];                   // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:24:13: 24:22
    let mut _17: &[T];                   // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:24:13: 24:22
    scope 1 {
        debug fst => _5;                 // in scope 1 at ui/const-generics/type-dependent/issue-70507.rs:28:18: 28:21
        debug snd => _6;                 // in scope 1 at ui/const-generics/type-dependent/issue-70507.rs:28:23: 28:26
        let _10: *const [T; N];          // in scope 1 at ui/const-generics/type-dependent/issue-70507.rs:31:17: 31:20
        scope 2 {
            debug ptr => _10;            // in scope 2 at ui/const-generics/type-dependent/issue-70507.rs:31:17: 31:20
            scope 3 {
            }
        }
    }

    bb0: {
        _16 = deref_copy ((*_1).0: &[T]); // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:25:12: 25:24
        _4 = _16;                        // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:25:12: 25:24
        _3 = Len((*_4));                 // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:25:12: 25:24
        _2 = Lt(move _3, const N);       // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:25:12: 25:28
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:25:12: 25:28
    }

    bb1: {
        _0 = Option::<&[T; N]>::None;    // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:26:13: 26:17
        goto -> bb5;                     // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:25:9: 33:10
    }

    bb2: {
        _17 = deref_copy ((*_1).0: &[T]); // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:28:30: 28:48
        _8 = _17;                        // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:28:30: 28:48
        _7 = core::slice::<impl [T]>::split_at(move _8, const N) -> bb3; // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:28:30: 28:48
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70507.rs:28:37: 28:45
                                         // + literal: Const { ty: for<'a> fn(&'a [T], usize) -> (&'a [T], &'a [T]) {core::slice::<impl [T]>::split_at}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = (_7.0: &[T]);               // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:28:18: 28:21
        _6 = (_7.1: &[T]);               // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:28:23: 28:26
        _9 = _6;                         // scope 1 at ui/const-generics/type-dependent/issue-70507.rs:30:22: 30:25
        ((*_1).0: &[T]) = move _9;       // scope 1 at ui/const-generics/type-dependent/issue-70507.rs:30:13: 30:25
        _13 = _5;                        // scope 1 at ui/const-generics/type-dependent/issue-70507.rs:31:23: 31:35
        _12 = core::slice::<impl [T]>::as_ptr(move _13) -> bb4; // scope 1 at ui/const-generics/type-dependent/issue-70507.rs:31:23: 31:35
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70507.rs:31:27: 31:33
                                         // + literal: Const { ty: for<'a> fn(&'a [T]) -> *const T {core::slice::<impl [T]>::as_ptr}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = move _12 as *const [T; N] (PtrToPtr); // scope 1 at ui/const-generics/type-dependent/issue-70507.rs:31:23: 31:47
        _10 = _11;                       // scope 1 at ui/const-generics/type-dependent/issue-70507.rs:31:23: 31:47
        _15 = &(*_10);                   // scope 3 at ui/const-generics/type-dependent/issue-70507.rs:32:27: 32:32
        _14 = _15;                       // scope 3 at ui/const-generics/type-dependent/issue-70507.rs:32:27: 32:32
        _0 = Option::<&[T; N]>::Some(move _14); // scope 2 at ui/const-generics/type-dependent/issue-70507.rs:32:13: 32:34
        goto -> bb5;                     // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:25:9: 33:10
    }

    bb5: {
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:34:6: 34:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:37:11: 37:11
    let _1: &[i32; 10];                  // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:38:9: 38:14
    let mut _3: &[[i32; 3]];             // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:40:20: 40:60
    let mut _4: &[[i32; 3]; 3];          // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:40:20: 40:60
    let mut _5: ConstChunksExact<'_, i32, 3>; // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
    let mut _6: ConstChunksExact<'_, i32, 3>; // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
    let mut _7: &[i32];                  // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
    let mut _8: &[i32; 10];              // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
    let mut _10: std::option::Option<&[i32; 3]>; // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
    let mut _11: &mut ConstChunksExact<'_, i32, 3>; // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
    let mut _12: &mut ConstChunksExact<'_, i32, 3>; // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
    let mut _13: isize;                  // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:42:5: 44:6
    let mut _15: (&&[i32; 3], &&[i32; 3]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _16: &&[i32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _17: &&[i32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _18: &[i32; 3];                  // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:43:23: 43:43
    let mut _19: std::option::Option<&[i32; 3]>; // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:43:23: 43:34
    let mut _20: &mut std::slice::Iter<'_, [i32; 3]>; // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:43:23: 43:34
    let mut _23: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _25: &&[i32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _26: &&[i32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _28: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _29: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _30: &&[i32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _31: &&[i32; 3];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _32: &&[i32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _33: &&[i32; 3];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _36: &[i32; 10];             // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:38:17: 38:52
    scope 1 {
        debug slice => _1;               // in scope 1 at ui/const-generics/type-dependent/issue-70507.rs:38:9: 38:14
        let mut _2: std::slice::Iter<'_, [i32; 3]>; // in scope 1 at ui/const-generics/type-dependent/issue-70507.rs:40:9: 40:17
        let mut _35: &[[i32; 3]; 3];     // in scope 1 at ui/const-generics/type-dependent/issue-70507.rs:40:20: 40:60
        scope 2 {
            debug iter => _2;            // in scope 2 at ui/const-generics/type-dependent/issue-70507.rs:40:9: 40:17
            let mut _9: ConstChunksExact<'_, i32, 3>; // in scope 2 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
            scope 3 {
                debug iter => _9;        // in scope 3 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
                let _14: &[i32; 3];      // in scope 3 at ui/const-generics/type-dependent/issue-70507.rs:42:9: 42:10
                scope 4 {
                    debug a => _14;      // in scope 4 at ui/const-generics/type-dependent/issue-70507.rs:42:9: 42:10
                    let _21: &&[i32; 3]; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _22: &&[i32; 3]; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    scope 5 {
                        debug left_val => _21; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _22; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _27: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 6 {
                            debug kind => _27; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _36 = const _;                   // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:38:17: 38:52
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70507.rs:38:17: 38:52
                                         // + literal: Const { ty: &[i32; 10], val: Unevaluated(main, [], Some(promoted[1])) }
        _1 = _36;                        // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:38:17: 38:52
        _35 = const _;                   // scope 1 at ui/const-generics/type-dependent/issue-70507.rs:40:20: 40:60
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70507.rs:40:20: 40:60
                                         // + literal: Const { ty: &[[i32; 3]; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _35;                        // scope 1 at ui/const-generics/type-dependent/issue-70507.rs:40:20: 40:60
        _3 = move _4 as &[[i32; 3]] (Pointer(Unsize)); // scope 1 at ui/const-generics/type-dependent/issue-70507.rs:40:20: 40:60
        _2 = core::slice::<impl [[i32; 3]]>::iter(move _3) -> bb1; // scope 1 at ui/const-generics/type-dependent/issue-70507.rs:40:20: 40:60
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70507.rs:40:54: 40:58
                                         // + literal: Const { ty: for<'a> fn(&'a [[i32; 3]]) -> std::slice::Iter<'a, [i32; 3]> {core::slice::<impl [[i32; 3]]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _1;                         // scope 2 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
        _7 = move _8 as &[i32] (Pointer(Unsize)); // scope 2 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
        _6 = <[i32] as ConstChunksExactTrait<i32>>::const_chunks_exact::<3>(move _7) -> bb2; // scope 2 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70507.rs:42:20: 42:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> ConstChunksExact<'a, i32, 3> {<[i32] as ConstChunksExactTrait<i32>>::const_chunks_exact::<3>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = <ConstChunksExact<'_, i32, 3> as IntoIterator>::into_iter(move _6) -> bb3; // scope 2 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
                                         // + literal: Const { ty: fn(ConstChunksExact<'_, i32, 3>) -> <ConstChunksExact<'_, i32, 3> as IntoIterator>::IntoIter {<ConstChunksExact<'_, i32, 3> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = move _5;                    // scope 2 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
        goto -> bb4;                     // scope 3 at ui/const-generics/type-dependent/issue-70507.rs:42:5: 44:6
    }

    bb4: {
        _12 = &mut _9;                   // scope 3 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
        _11 = &mut (*_12);               // scope 3 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
        _10 = <ConstChunksExact<'_, i32, 3> as Iterator>::next(move _11) -> bb5; // scope 3 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
                                         // + literal: Const { ty: for<'a> fn(&'a mut ConstChunksExact<'_, i32, 3>) -> Option<<ConstChunksExact<'_, i32, 3> as Iterator>::Item> {<ConstChunksExact<'_, i32, 3> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = discriminant(_10);         // scope 3 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
        switchInt(move _13) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 3 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
    }

    bb6: {
        _14 = ((_10 as Some).0: &[i32; 3]); // scope 3 at ui/const-generics/type-dependent/issue-70507.rs:42:9: 42:10
        _16 = &_14;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _20 = &mut _2;                   // scope 4 at ui/const-generics/type-dependent/issue-70507.rs:43:23: 43:34
        _19 = <std::slice::Iter<'_, [i32; 3]> as Iterator>::next(move _20) -> bb9; // scope 4 at ui/const-generics/type-dependent/issue-70507.rs:43:23: 43:34
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70507.rs:43:28: 43:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, [i32; 3]>) -> Option<<std::slice::Iter<'_, [i32; 3]> as Iterator>::Item> {<std::slice::Iter<'_, [i32; 3]> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb7: {
        unreachable;                     // scope 3 at ui/const-generics/type-dependent/issue-70507.rs:42:14: 42:45
    }

    bb8: {
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:45:2: 45:2
    }

    bb9: {
        _18 = Option::<&[i32; 3]>::unwrap(move _19) -> bb10; // scope 4 at ui/const-generics/type-dependent/issue-70507.rs:43:23: 43:43
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-70507.rs:43:35: 43:41
                                         // + literal: Const { ty: fn(Option<&[i32; 3]>) -> &[i32; 3] {Option::<&[i32; 3]>::unwrap}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = &_18;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _15 = (move _16, move _17);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _21 = (_15.0: &&[i32; 3]);       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _22 = (_15.1: &&[i32; 3]);       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _25 = _21;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _26 = _22;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _24 = <&[i32; 3] as PartialEq>::eq(move _25, move _26) -> bb11; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[i32; 3], &'b &[i32; 3]) -> bool {<&[i32; 3] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb11: {
        _23 = Not(move _24);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _23) -> [0: bb4, otherwise: bb12]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _27 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _29 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = _21;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _30 = _31;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _33 = _22;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _32 = _33;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _28 = core::panicking::assert_failed::<&[i32; 3], &[i32; 3]>(move _29, move _30, move _32, move _34); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[i32; 3], &'b &[i32; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[i32; 3], &[i32; 3]>}, val: Value(<ZST>) }
    }
}

promoted[0] in main: &[[i32; 3]; 3] = {
    let mut _0: &[[i32; 3]; 3];          // return place in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:40:20: 40:60
    let mut _1: [[i32; 3]; 3];           // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:40:20: 40:53
    let mut _2: [i32; 3];                // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:40:21: 40:30
    let mut _3: [i32; 3];                // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:40:32: 40:41
    let mut _4: [i32; 3];                // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:40:43: 40:52

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:40:21: 40:30
        _3 = [const 4_i32, const 5_i32, const 6_i32]; // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:40:32: 40:41
        _4 = [const 7_i32, const 8_i32, const 9_i32]; // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:40:43: 40:52
        _1 = [move _2, move _3, move _4]; // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:40:20: 40:53
        _0 = &_1;                        // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:40:20: 40:60
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:40:20: 40:60
    }
}

promoted[1] in main: &[i32; 10] = {
    let mut _0: &[i32; 10];              // return place in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:38:17: 38:52
    let mut _1: [i32; 10];               // in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:38:18: 38:52

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32, const 7_i32, const 8_i32, const 9_i32, const 10_i32]; // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:38:18: 38:52
        _0 = &_1;                        // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:38:17: 38:52
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:38:17: 38:52
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-70507.rs:42:41: 42:42

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:42:41: 42:42
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-70507.rs:42:41: 42:42
    }
}
