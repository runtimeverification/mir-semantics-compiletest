// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn IterExt::default_for_size(_1: Self) -> [<Self as Iterator>::Item; N] {
    debug self => _1;                    // in scope 0 at ui/const-generics/type-dependent/issue-69816.rs:3:41: 3:45
    let mut _0: [<Self as std::iter::Iterator>::Item; N]; // return place in scope 0 at ui/const-generics/type-dependent/issue-69816.rs:3:50: 3:65

    bb0: {
        _0 = <[<Self as Iterator>::Item; N] as Default>::default() -> [return: bb1, unwind: bb3]; // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:7:9: 7:27
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-69816.rs:7:9: 7:25
                                         // + literal: Const { ty: fn() -> [<Self as Iterator>::Item; N] {<[<Self as Iterator>::Item; N] as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:8:5: 8:6
    }

    bb2: {
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:8:6: 8:6
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:8:5: 8:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:3:5: 8:6
    }
}

IterExt::default_for_size::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-69816.rs:5:22: 5:23

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:5:22: 5:23
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:5:22: 5:23
    }
}

IterExt::default_for_size::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-69816.rs:3:63: 3:64

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:3:63: 3:64
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:3:63: 3:64
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/type-dependent/issue-69816.rs:13:10: 13:10
    let _1: [u32; 10];                   // in scope 0 at ui/const-generics/type-dependent/issue-69816.rs:15:9: 15:12
    let mut _2: std::ops::Range<u32>;    // in scope 0 at ui/const-generics/type-dependent/issue-69816.rs:15:15: 15:25
    let mut _3: (&[u32; 10], &[u32; 10]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &[u32; 10];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &[u32; 10];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &[u32; 10];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &[u32; 10];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &[u32; 10];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &[u32; 10];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &[u32; 10];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &[u32; 10];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug arr => _1;                 // in scope 1 at ui/const-generics/type-dependent/issue-69816.rs:15:9: 15:12
        let _6: &[u32; 10];              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _7: &[u32; 10];              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _20: &[u32; 10];         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _6;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _7;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _12: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _12;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = std::ops::Range::<u32> { start: const 0_u32, end: const 10_u32 }; // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:15:15: 15:25
        _1 = <std::ops::Range<u32> as IterExt>::default_for_size::<10>(move _2) -> bb1; // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:15:15: 15:49
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-69816.rs:15:26: 15:42
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::ops::Range<u32>) -> [<std::ops::Range<u32> as Iterator>::Item; 10] {<std::ops::Range<u32> as IterExt>::default_for_size::<10>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _20 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[u32; 10], val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _20;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &[u32; 10]);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &[u32; 10]);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <[u32; 10] as PartialEq>::eq(move _10, move _11) -> bb2; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u32; 10], &'b [u32; 10]) -> bool {<[u32; 10] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = Not(move _9);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _12 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<[u32; 10], [u32; 10]>(move _14, move _15, move _17, move _19); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [u32; 10], &'b [u32; 10], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[u32; 10], [u32; 10]>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:17:2: 17:2
    }
}

promoted[0] in main: &[u32; 10] = {
    let mut _0: &[u32; 10];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [u32; 10];               // in scope 0 at ui/const-generics/type-dependent/issue-69816.rs:16:21: 16:28

    bb0: {
        _1 = [const 0_u32; 10];          // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:16:21: 16:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

const N: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-69816.rs:14:14: 14:19

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:14:22: 14:24
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:14:5: 14:25
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-69816.rs:15:45: 15:46

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:15:45: 15:46
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:15:45: 15:46
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-69816.rs:16:25: 16:27

    bb0: {
        _0 = const 10_usize;             // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:16:25: 16:27
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-69816.rs:16:25: 16:27
    }
}
