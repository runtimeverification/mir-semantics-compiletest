// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
CollectSlice::inner_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn CollectSlice::collect_array(_1: &mut Self) -> [<Self as Iterator>::Item; N] {
    debug self => _1;
    let mut _0: [<Self as std::iter::Iterator>::Item; N];
    let _2: [<Self as std::iter::Iterator>::Item; N];
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: &std::option::Option<<Self as std::iter::Iterator>::Item>;
    let _6: std::option::Option<<Self as std::iter::Iterator>::Item>;
    let mut _7: !;
    scope 1 {
        debug result => _2;
    }

    bb0: {
        _2 = <Self as CollectSlice<'_>>::inner_array::<N>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = <Self as Iterator>::next(_1) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _5 = &_6;
        _4 = Option::<<Self as Iterator>::Item>::is_none(move _5) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _3 = Not(move _4);
        drop(_6) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _7 = core::panicking::panic(const "assertion failed: self.next().is_none()") -> bb8;
    }

    bb6: {
        _0 = move _2;
        return;
    }

    bb7 (cleanup): {
        drop(_6) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

CollectSlice::collect_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/type-dependent/issue-71805.rs:14:1: 14:43>::inner_array(_1: &mut I) -> [<I as Iterator>::Item; N] {
    debug self => _1;
    let mut _0: [<I as std::iter::Iterator>::Item; N];
    let mut _2: [std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>; N];
    let mut _3: std::mem::MaybeUninit<[std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>; N]>;
    let mut _5: std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>>, &mut I>;
    let mut _6: std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>>, &mut I>;
    let mut _7: std::slice::IterMut<'_, std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>>;
    let mut _8: &mut [std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>];
    let mut _9: &mut [std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>; N];
    let mut _11: std::option::Option<(&mut std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>, <I as std::iter::Iterator>::Item)>;
    let mut _12: &mut std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>>, &mut I>;
    let mut _13: isize;
    let mut _16: std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>;
    let mut _17: (&usize, &usize);
    let mut _18: &usize;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: usize;
    let mut _24: usize;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let _29: &[std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>; N];
    let mut _30: *const [<I as std::iter::Iterator>::Item; N];
    scope 1 {
        debug result => _2;
        let mut _4: usize;
        scope 3 {
            debug count => _4;
            let mut _10: std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>>, &mut I>;
            let _19: &usize;
            let _20: &usize;
            let _28: *const [std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>; N];
            let mut _31: &usize;
            scope 4 {
                debug iter => _10;
                let _14: &mut std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>;
                let _15: <I as std::iter::Iterator>::Item;
                scope 5 {
                    debug dest => _14;
                    debug item => _15;
                }
            }
            scope 6 {
                debug left_val => _19;
                debug right_val => _20;
                let _25: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _25;
                }
            }
            scope 8 {
                debug temp_ptr => _28;
                scope 9 {
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = MaybeUninit::<[MaybeUninit<<I as Iterator>::Item>; N]>::uninit() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = MaybeUninit::<[MaybeUninit<<I as Iterator>::Item>; N]>::assume_init(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = const 0_usize;
        _9 = &mut _2;
        _8 = move _9 as &mut [std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>] (Pointer(Unsize));
        _7 = core::slice::<impl [MaybeUninit<<I as Iterator>::Item>]>::iter_mut(move _8) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        _6 = <std::slice::IterMut<'_, MaybeUninit<<I as Iterator>::Item>> as Iterator>::zip::<&mut I>(move _7, move _1) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        _5 = <Zip<std::slice::IterMut<'_, MaybeUninit<<I as Iterator>::Item>>, &mut I> as IntoIterator>::into_iter(move _6) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        _10 = move _5;
        goto -> bb6;
    }

    bb6: {
        _12 = &mut _10;
        _11 = <Zip<std::slice::IterMut<'_, MaybeUninit<<I as Iterator>::Item>>, &mut I> as Iterator>::next(_12) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _14 = move (((_11 as Some).0: (&mut std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>, <I as std::iter::Iterator>::Item)).0: &mut std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>);
        _15 = move (((_11 as Some).0: (&mut std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>, <I as std::iter::Iterator>::Item)).1: <I as std::iter::Iterator>::Item);
        _16 = MaybeUninit::<<I as Iterator>::Item>::new(move _15) -> [return: bb11, unwind: bb16];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _31 = const _;
        _18 = &_4;
        _17 = (_31, move _18);
        _19 = (_17.0: &usize);
        _20 = (_17.1: &usize);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb13, otherwise: bb12];
    }

    bb11: {
        (*_14) = move _16;
        _4 = Add(_4, const 1_usize);
        goto -> bb6;
    }

    bb12: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<usize, usize>(move _25, _19, _20, move _27) -> bb16;
    }

    bb13: {
        _29 = &_2;
        _28 = &raw const (*_29);
        _30 = _28 as *const [<I as std::iter::Iterator>::Item; N] (PtrToPtr);
        _0 = std::ptr::read::<[<I as Iterator>::Item; N]>(_30) -> [return: bb14, unwind: bb16];
    }

    bb14: {
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at ui/const-generics/type-dependent/issue-71805.rs:14:1: 14:43>::inner_array: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const N;
        _0 = &_1;
        return;
    }
}

<impl at ui/const-generics/type-dependent/issue-71805.rs:14:1: 14:43>::inner_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/type-dependent/issue-71805.rs:14:1: 14:43>::inner_array::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/type-dependent/issue-71805.rs:14:1: 14:43>::inner_array::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/type-dependent/issue-71805.rs:14:1: 14:43>::inner_array::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::iter::Cloned<std::slice::Iter<'_, u64>>;
    let mut _2: std::slice::Iter<'_, u64>;
    let mut _3: &[u64];
    let mut _5: &mut std::iter::Cloned<std::slice::Iter<'_, u64>>;
    let mut _6: &[u64; 9];
    scope 1 {
        debug foos => _1;
        let _4: [u64; 9];
        scope 2 {
            debug _bar => _4;
        }
    }

    bb0: {
        _6 = const _;
        _3 = _6 as &[u64] (Pointer(Unsize));
        _2 = core::slice::<impl [u64]>::iter(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <std::slice::Iter<'_, u64> as Iterator>::cloned::<'_, u64>(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = &mut _1;
        _4 = <Cloned<std::slice::Iter<'_, u64>> as CollectSlice<'_>>::collect_array::<9>(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &[u64; 9] = {
    let mut _0: &[u64; 9];
    let mut _1: [u64; 9];

    bb0: {
        _1 = [const 0_u64; 9];
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 9_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 9_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 9_usize;
        return;
    }
}
