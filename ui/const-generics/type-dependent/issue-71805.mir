// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
CollectSlice::inner_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:5:63: 5:64

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:5:63: 5:64
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:5:63: 5:64
    }
}

fn CollectSlice::collect_array(_1: &mut Self) -> [<Self as Iterator>::Item; N] {
    debug self => _1;                    // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:7:38: 7:47
    let mut _0: [<Self as std::iter::Iterator>::Item; N]; // return place in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:8:13: 8:19
    let mut _2: &mut Self;               // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:8:22: 8:40
    let mut _3: bool;                    // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:9:9: 9:39
    let mut _4: bool;                    // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:9:17: 9:38
    let mut _5: &std::option::Option<<Self as std::iter::Iterator>::Item>; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:9:17: 9:38
    let _6: std::option::Option<<Self as std::iter::Iterator>::Item>; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:9:17: 9:28
    let mut _7: &mut Self;               // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:9:17: 9:28
    let mut _8: !;                       // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:9:9: 9:39
    scope 1 {
        debug result => _0;              // in scope 1 at ui/const-generics/type-dependent/issue-71805.rs:8:13: 8:19
    }

    bb0: {
        _2 = &mut (*_1);                 // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:8:22: 8:40
        _0 = <Self as CollectSlice<'_>>::inner_array::<N>(move _2) -> bb1; // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:8:22: 8:40
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-71805.rs:8:27: 8:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut Self) -> [<Self as Iterator>::Item; N] {<Self as CollectSlice<'_>>::inner_array::<N>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &mut (*_1);                 // scope 1 at ui/const-generics/type-dependent/issue-71805.rs:9:17: 9:28
        _6 = <Self as Iterator>::next(move _7) -> [return: bb2, unwind: bb8]; // scope 1 at ui/const-generics/type-dependent/issue-71805.rs:9:17: 9:28
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-71805.rs:9:22: 9:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut Self) -> Option<<Self as Iterator>::Item> {<Self as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 1 at ui/const-generics/type-dependent/issue-71805.rs:9:17: 9:38
        _4 = Option::<<Self as Iterator>::Item>::is_none(move _5) -> [return: bb3, unwind: bb7]; // scope 1 at ui/const-generics/type-dependent/issue-71805.rs:9:17: 9:38
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-71805.rs:9:29: 9:36
                                         // + literal: Const { ty: for<'a> fn(&'a Option<<Self as Iterator>::Item>) -> bool {Option::<<Self as Iterator>::Item>::is_none}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = Not(move _4);               // scope 1 at ui/const-generics/type-dependent/issue-71805.rs:9:9: 9:39
        drop(_6) -> [return: bb4, unwind: bb8]; // scope 1 at ui/const-generics/type-dependent/issue-71805.rs:9:38: 9:39
    }

    bb4: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5]; // scope 1 at ui/const-generics/type-dependent/issue-71805.rs:9:9: 9:39
    }

    bb5: {
        _8 = core::panicking::panic(const "assertion failed: self.next().is_none()") -> bb8; // scope 1 at ui/const-generics/type-dependent/issue-71805.rs:9:9: 9:39
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-71805.rs:9:9: 9:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:11:6: 11:6
    }

    bb7 (cleanup): {
        drop(_6) -> bb8;                 // scope 1 at ui/const-generics/type-dependent/issue-71805.rs:9:38: 9:39
    }

    bb8 (cleanup): {
        drop(_0) -> bb9;                 // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:11:5: 11:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:7:5: 11:6
    }
}

CollectSlice::collect_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:7:65: 7:66

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:7:65: 7:66
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:7:65: 7:66
    }
}

fn <impl at ui/const-generics/type-dependent/issue-71805.rs:14:1: 14:43>::inner_array(_1: &mut I) -> [<I as Iterator>::Item; N] {
    debug self => _1;                    // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:18:36: 18:45
    let mut _0: [<I as std::iter::Iterator>::Item; N]; // return place in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:18:50: 18:65
    let mut _2: [std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>; N]; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:19:13: 19:23
    let mut _3: std::mem::MaybeUninit<[std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>; N]>; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:20:22: 20:43
    let mut _5: std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>>, &mut I>; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
    let mut _6: std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>>, &mut I>; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
    let mut _7: std::slice::IterMut<'_, std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>>; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:46
    let mut _8: &mut [std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>]; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:46
    let mut _9: &mut [std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>; N]; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:46
    let mut _10: &mut I;                 // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:23:51: 23:55
    let mut _12: std::option::Option<(&mut std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>, <I as std::iter::Iterator>::Item)>; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
    let mut _13: &mut std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>>, &mut I>; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
    let mut _14: &mut std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>>, &mut I>; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
    let mut _15: isize;                  // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:23:9: 26:10
    let mut _18: std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:24:21: 24:43
    let mut _19: <I as std::iter::Iterator>::Item; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:24:38: 24:42
    let mut _20: (usize, bool);          // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:25:13: 25:23
    let mut _21: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _22: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _23: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _28: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _29: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _31: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _32: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _33: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _34: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _35: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _36: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _39: &[std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>; N]; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:30:61: 30:68
    let mut _40: *const [<I as std::iter::Iterator>::Item; N]; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:31:33: 31:67
    let mut _41: *const [<I as std::iter::Iterator>::Item; N]; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:31:33: 31:67
    let mut _42: *const [std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>; N]; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:31:33: 31:41
    scope 1 {
        debug result => _2;              // in scope 1 at ui/const-generics/type-dependent/issue-71805.rs:19:13: 19:23
        let mut _4: usize;               // in scope 1 at ui/const-generics/type-dependent/issue-71805.rs:22:13: 22:22
        scope 3 {
            debug count => _4;           // in scope 3 at ui/const-generics/type-dependent/issue-71805.rs:22:13: 22:22
            let mut _11: std::iter::Zip<std::slice::IterMut<'_, std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>>, &mut I>; // in scope 3 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
            let _24: &usize;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _25: &usize;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _38: *const [std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>; N]; // in scope 3 at ui/const-generics/type-dependent/issue-71805.rs:30:13: 30:21
            let mut _43: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
            scope 4 {
                debug iter => _11;       // in scope 4 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
                let _16: &mut std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>; // in scope 4 at ui/const-generics/type-dependent/issue-71805.rs:23:14: 23:18
                let _17: <I as std::iter::Iterator>::Item; // in scope 4 at ui/const-generics/type-dependent/issue-71805.rs:23:20: 23:24
                scope 5 {
                    debug dest => _16;   // in scope 5 at ui/const-generics/type-dependent/issue-71805.rs:23:14: 23:18
                    debug item => _17;   // in scope 5 at ui/const-generics/type-dependent/issue-71805.rs:23:20: 23:24
                }
            }
            scope 6 {
                debug left_val => _24;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _25;  // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _30: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 7 {
                    debug kind => _30;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 8 {
                debug temp_ptr => _38;   // in scope 8 at ui/const-generics/type-dependent/issue-71805.rs:30:13: 30:21
                scope 9 {
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = MaybeUninit::<[MaybeUninit<<I as Iterator>::Item>; N]>::uninit() -> bb1; // scope 2 at ui/const-generics/type-dependent/issue-71805.rs:20:22: 20:43
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-71805.rs:20:22: 20:41
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> MaybeUninit<[MaybeUninit<<I as Iterator>::Item>; N]> {MaybeUninit::<[MaybeUninit<<I as Iterator>::Item>; N]>::uninit}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = MaybeUninit::<[MaybeUninit<<I as Iterator>::Item>; N]>::assume_init(move _3) -> bb2; // scope 2 at ui/const-generics/type-dependent/issue-71805.rs:20:22: 20:57
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-71805.rs:20:44: 20:55
                                         // + literal: Const { ty: unsafe fn(MaybeUninit<[MaybeUninit<<I as Iterator>::Item>; N]>) -> [MaybeUninit<<I as Iterator>::Item>; N] {MaybeUninit::<[MaybeUninit<<I as Iterator>::Item>; N]>::assume_init}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = const 0_usize;              // scope 1 at ui/const-generics/type-dependent/issue-71805.rs:22:25: 22:26
        _9 = &mut _2;                    // scope 3 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:46
        _8 = move _9 as &mut [std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>] (Pointer(Unsize)); // scope 3 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:46
        _7 = core::slice::<impl [MaybeUninit<<I as Iterator>::Item>]>::iter_mut(move _8) -> [return: bb3, unwind: bb17]; // scope 3 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:46
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-71805.rs:23:36: 23:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut [MaybeUninit<<I as Iterator>::Item>]) -> std::slice::IterMut<'a, MaybeUninit<<I as Iterator>::Item>> {core::slice::<impl [MaybeUninit<<I as Iterator>::Item>]>::iter_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = move _1;                   // scope 3 at ui/const-generics/type-dependent/issue-71805.rs:23:51: 23:55
        _6 = <std::slice::IterMut<'_, MaybeUninit<<I as Iterator>::Item>> as Iterator>::zip::<&mut I>(move _7, move _10) -> [return: bb4, unwind: bb17]; // scope 3 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-71805.rs:23:47: 23:50
                                         // + literal: Const { ty: fn(std::slice::IterMut<'_, MaybeUninit<<I as Iterator>::Item>>, &mut I) -> Zip<std::slice::IterMut<'_, MaybeUninit<<I as Iterator>::Item>>, <&mut I as IntoIterator>::IntoIter> {<std::slice::IterMut<'_, MaybeUninit<<I as Iterator>::Item>> as Iterator>::zip::<&mut I>}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = <Zip<std::slice::IterMut<'_, MaybeUninit<<I as Iterator>::Item>>, &mut I> as IntoIterator>::into_iter(move _6) -> [return: bb5, unwind: bb17]; // scope 3 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
                                         // + literal: Const { ty: fn(Zip<std::slice::IterMut<'_, MaybeUninit<<I as Iterator>::Item>>, &mut I>) -> <Zip<std::slice::IterMut<'_, MaybeUninit<<I as Iterator>::Item>>, &mut I> as IntoIterator>::IntoIter {<Zip<std::slice::IterMut<'_, MaybeUninit<<I as Iterator>::Item>>, &mut I> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = move _5;                   // scope 3 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
        goto -> bb6;                     // scope 4 at ui/const-generics/type-dependent/issue-71805.rs:23:9: 26:10
    }

    bb6: {
        _14 = &mut _11;                  // scope 4 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
        _13 = &mut (*_14);               // scope 4 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
        _12 = <Zip<std::slice::IterMut<'_, MaybeUninit<<I as Iterator>::Item>>, &mut I> as Iterator>::next(move _13) -> [return: bb7, unwind: bb17]; // scope 4 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
                                         // + literal: Const { ty: for<'a> fn(&'a mut Zip<std::slice::IterMut<'_, MaybeUninit<<I as Iterator>::Item>>, &mut I>) -> Option<<Zip<std::slice::IterMut<'_, MaybeUninit<<I as Iterator>::Item>>, &mut I> as Iterator>::Item> {<Zip<std::slice::IterMut<'_, MaybeUninit<<I as Iterator>::Item>>, &mut I> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = discriminant(_12);         // scope 4 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
        switchInt(move _15) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 4 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
    }

    bb8: {
        _16 = move (((_12 as Some).0: (&mut std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>, <I as std::iter::Iterator>::Item)).0: &mut std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>); // scope 4 at ui/const-generics/type-dependent/issue-71805.rs:23:14: 23:18
        _17 = move (((_12 as Some).0: (&mut std::mem::MaybeUninit<<I as std::iter::Iterator>::Item>, <I as std::iter::Iterator>::Item)).1: <I as std::iter::Iterator>::Item); // scope 4 at ui/const-generics/type-dependent/issue-71805.rs:23:20: 23:24
        _19 = move _17;                  // scope 5 at ui/const-generics/type-dependent/issue-71805.rs:24:38: 24:42
        _18 = MaybeUninit::<<I as Iterator>::Item>::new(move _19) -> [return: bb11, unwind: bb17]; // scope 5 at ui/const-generics/type-dependent/issue-71805.rs:24:21: 24:43
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-71805.rs:24:21: 24:37
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(<I as Iterator>::Item) -> MaybeUninit<<I as Iterator>::Item> {MaybeUninit::<<I as Iterator>::Item>::new}, val: Value(<ZST>) }
    }

    bb9: {
        unreachable;                     // scope 4 at ui/const-generics/type-dependent/issue-71805.rs:23:29: 23:56
    }

    bb10: {
        _43 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(<I as CollectSlice<'a>>::inner_array, [ReErased, I, Const { ty: usize, kind: Param(N/#2) }], Some(promoted[0])) }
        _22 = _43;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _23 = &_4;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _21 = (move _22, move _23);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _24 = (_21.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _25 = (_21.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _28 = (*_24);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _29 = (*_25);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _27 = Eq(move _28, move _29);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _26 = Not(move _27);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _26) -> [0: bb14, otherwise: bb13]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        (*_16) = move _18;               // scope 5 at ui/const-generics/type-dependent/issue-71805.rs:24:13: 24:43
        _20 = CheckedAdd(_4, const 1_usize); // scope 5 at ui/const-generics/type-dependent/issue-71805.rs:25:13: 25:23
        assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", _4, const 1_usize) -> [success: bb12, unwind: bb17]; // scope 5 at ui/const-generics/type-dependent/issue-71805.rs:25:13: 25:23
    }

    bb12: {
        _4 = move (_20.0: usize);        // scope 5 at ui/const-generics/type-dependent/issue-71805.rs:25:13: 25:23
        goto -> bb6;                     // scope 4 at ui/const-generics/type-dependent/issue-71805.rs:23:9: 26:10
    }

    bb13: {
        _30 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _34 = _24;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _33 = _34;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _25;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = _36;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _37 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _31 = core::panicking::assert_failed::<usize, usize>(move _32, move _33, move _35, move _37) -> bb17; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb14: {
        _39 = &_2;                       // scope 3 at ui/const-generics/type-dependent/issue-71805.rs:30:61: 30:68
        _38 = &raw const (*_39);         // scope 3 at ui/const-generics/type-dependent/issue-71805.rs:30:61: 30:68
        _42 = _38;                       // scope 9 at ui/const-generics/type-dependent/issue-71805.rs:31:33: 31:41
        _41 = move _42 as *const [<I as std::iter::Iterator>::Item; N] (PtrToPtr); // scope 9 at ui/const-generics/type-dependent/issue-71805.rs:31:33: 31:67
        _40 = _41;                       // scope 9 at ui/const-generics/type-dependent/issue-71805.rs:31:33: 31:67
        _0 = std::ptr::read::<[<I as Iterator>::Item; N]>(move _40) -> [return: bb15, unwind: bb17]; // scope 9 at ui/const-generics/type-dependent/issue-71805.rs:31:18: 31:68
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-71805.rs:31:18: 31:32
                                         // + literal: Const { ty: unsafe fn(*const [<I as Iterator>::Item; N]) -> [<I as Iterator>::Item; N] {std::ptr::read::<[<I as Iterator>::Item; N]>}, val: Value(<ZST>) }
    }

    bb15: {
        drop(_2) -> bb16;                // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:32:5: 32:6
    }

    bb16: {
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:32:6: 32:6
    }

    bb17 (cleanup): {
        drop(_2) -> bb18;                // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:32:5: 32:6
    }

    bb18 (cleanup): {
        resume;                          // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:18:5: 32:6
    }
}

promoted[0] in <impl at ui/const-generics/type-dependent/issue-71805.rs:14:1: 14:43>::inner_array: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:28:20: 28:21

    bb0: {
        _1 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:28:20: 28:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

<impl at ui/const-generics/type-dependent/issue-71805.rs:14:1: 14:43>::inner_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:18:63: 18:64

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:18:63: 18:64
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:18:63: 18:64
    }
}

<impl at ui/const-generics/type-dependent/issue-71805.rs:14:1: 14:43>::inner_array::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:19:51: 19:52

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:19:51: 19:52
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:19:51: 19:52
    }
}

<impl at ui/const-generics/type-dependent/issue-71805.rs:14:1: 14:43>::inner_array::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:30:56: 30:57

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:30:56: 30:57
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:30:56: 30:57
    }
}

<impl at ui/const-generics/type-dependent/issue-71805.rs:14:1: 14:43>::inner_array::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:31:65: 31:66

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:31:65: 31:66
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:31:65: 31:66
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:35:11: 35:11
    let mut _1: std::iter::Cloned<std::slice::Iter<'_, u64>>; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:9: 36:17
    let mut _2: std::slice::Iter<'_, u64>; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:20: 36:36
    let mut _3: &[u64];                  // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:20: 36:36
    let mut _4: &[u64; 9];               // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:20: 36:36
    let mut _6: &mut std::iter::Cloned<std::slice::Iter<'_, u64>>; // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:37:26: 37:57
    let mut _7: &[u64; 9];               // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:20: 36:36
    scope 1 {
        debug foos => _1;                // in scope 1 at ui/const-generics/type-dependent/issue-71805.rs:36:9: 36:17
        let _5: [u64; 9];                // in scope 1 at ui/const-generics/type-dependent/issue-71805.rs:37:9: 37:13
        scope 2 {
            debug _bar => _5;            // in scope 2 at ui/const-generics/type-dependent/issue-71805.rs:37:9: 37:13
        }
    }

    bb0: {
        _7 = const _;                    // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:20: 36:36
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-71805.rs:36:20: 36:36
                                         // + literal: Const { ty: &[u64; 9], val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _7;                         // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:20: 36:36
        _3 = move _4 as &[u64] (Pointer(Unsize)); // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:20: 36:36
        _2 = core::slice::<impl [u64]>::iter(move _3) -> bb1; // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:20: 36:36
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-71805.rs:36:30: 36:34
                                         // + literal: Const { ty: for<'a> fn(&'a [u64]) -> std::slice::Iter<'a, u64> {core::slice::<impl [u64]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <std::slice::Iter<'_, u64> as Iterator>::cloned::<'_, u64>(move _2) -> bb2; // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:20: 36:45
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-71805.rs:36:37: 36:43
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, u64>) -> Cloned<std::slice::Iter<'_, u64>> {<std::slice::Iter<'_, u64> as Iterator>::cloned::<'_, u64>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &mut _1;                    // scope 1 at ui/const-generics/type-dependent/issue-71805.rs:37:26: 37:57
        _5 = <Cloned<std::slice::Iter<'_, u64>> as CollectSlice<'_>>::collect_array::<9>(move _6) -> bb3; // scope 1 at ui/const-generics/type-dependent/issue-71805.rs:37:26: 37:57
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-71805.rs:37:31: 37:44
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a mut Cloned<std::slice::Iter<'_, u64>>) -> [<Cloned<std::slice::Iter<'_, u64>> as Iterator>::Item; 9] {<Cloned<std::slice::Iter<'_, u64>> as CollectSlice<'_>>::collect_array::<9>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:38:2: 38:2
    }
}

promoted[0] in main: &[u64; 9] = {
    let mut _0: &[u64; 9];               // return place in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:20: 36:36
    let mut _1: [u64; 9];                // in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:20: 36:29

    bb0: {
        _1 = [const 0_u64; 9];           // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:20: 36:29
        _0 = &_1;                        // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:20: 36:36
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:20: 36:36
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:27: 36:28

    bb0: {
        _0 = const 9_usize;              // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:27: 36:28
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:36:27: 36:28
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:37:47: 37:54

    bb0: {
        _0 = const 9_usize;              // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:37:47: 37:54
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:37:47: 37:54
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-71805.rs:37:21: 37:22

    bb0: {
        _0 = const 9_usize;              // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:37:21: 37:22
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-71805.rs:37:21: 37:22
    }
}
