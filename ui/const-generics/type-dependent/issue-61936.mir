// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
SliceExt::array_windows_example::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:4:90: 4:91

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:4:90: 4:91
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:4:90: 4:91
    }
}

fn <impl at ui/const-generics/type-dependent/issue-61936.rs:7:1: 7:36>::array_windows_example(_1: &[T]) -> ArrayWindowsExample<'_, T, N> {
    debug self => _1;                    // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:8:49: 8:57
    let mut _0: ArrayWindowsExample<'_, T, N>; // return place in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:8:62: 8:91
    let mut _2: &[T];                    // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:9:44: 9:49
    let _3: &&[T];                       // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:9:44: 9:49
    let mut _4: &[T];                    // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:9:44: 9:49

    bb0: {
        _3 = &_1;                        // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:9:44: 9:49
        _4 = deref_copy (*_3);           // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:9:44: 9:49
        _2 = _4;                         // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:9:44: 9:49
        _0 = ArrayWindowsExample::<'_, T, N> { slice: move _2, idx: const 0_usize }; // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:9:8: 9:51
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:10:5: 10:5
    }
}

<impl at ui/const-generics/type-dependent/issue-61936.rs:7:1: 7:36>::array_windows_example::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:8:89: 8:90

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:8:89: 8:90
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:8:89: 8:90
    }
}

<impl at ui/const-generics/type-dependent/issue-61936.rs:18:1: 18:79>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:18:77: 18:78

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:18:77: 18:78
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:18:77: 18:78
    }
}

<impl at ui/const-generics/type-dependent/issue-61936.rs:18:1: 18:79>::Item::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:19:21: 19:22

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:19:21: 19:22
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:19:21: 19:22
    }
}

fn <impl at ui/const-generics/type-dependent/issue-61936.rs:18:1: 18:79>::next(_1: &mut ArrayWindowsExample<'_, T, N>) -> Option<[T; N]> {
    debug self => _1;                    // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:20:13: 20:22
    let mut _0: std::option::Option<[T; N]>; // return place in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:20:27: 20:45
    let mut _2: [T; N];                  // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:23:13: 23:20
    let mut _4: *mut [T; N];             // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:24:23: 24:46
    let mut _5: &mut [T; N];             // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:24:23: 24:31
    let mut _6: std::ops::Range<usize>;  // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
    let mut _7: std::ops::Range<usize>;  // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
    let mut _9: std::option::Option<usize>; // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
    let mut _10: &mut std::ops::Range<usize>; // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
    let mut _11: &mut std::ops::Range<usize>; // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
    let mut _12: isize;                  // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:26:9: 33:10
    let _14: ();                         // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:27:13: 30:14
    let mut _15: std::option::Option<&T>; // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:27:19: 27:48
    let mut _16: &[T];                   // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:27:19: 27:48
    let _17: &[T];                       // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:27:19: 27:41
    let mut _18: &[T];                   // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:27:19: 27:29
    let mut _19: std::ops::RangeFrom<usize>; // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:27:30: 27:40
    let mut _20: usize;                  // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:27:30: 27:38
    let mut _21: usize;                  // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:27:46: 27:47
    let mut _22: isize;                  // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:28:17: 28:21
    let mut _24: *mut T;                 // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:29:65: 29:68
    let mut _25: T;                      // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:29:70: 29:82
    let mut _26: &T;                     // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:29:70: 29:82
    let mut _27: *mut T;                 // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:31:19: 31:38
    let mut _28: *mut T;                 // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:31:19: 31:22
    let mut _29: (usize, bool);          // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:32:13: 32:26
    let mut _30: [T; N];                 // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:35:14: 35:17
    let mut _31: &[T];                   // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:20:13: 20:22
    scope 1 {
        debug res => _2;                 // in scope 1 at ui/const-generics/type-dependent/issue-61936.rs:23:13: 23:20
        let mut _3: *mut T;              // in scope 1 at ui/const-generics/type-dependent/issue-61936.rs:24:13: 24:20
        scope 3 {
            debug ptr => _3;             // in scope 3 at ui/const-generics/type-dependent/issue-61936.rs:24:13: 24:20
            let mut _8: std::ops::Range<usize>; // in scope 3 at ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
            scope 4 {
                debug iter => _8;        // in scope 4 at ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
                let _13: usize;          // in scope 4 at ui/const-generics/type-dependent/issue-61936.rs:26:13: 26:14
                scope 5 {
                    debug i => _13;      // in scope 5 at ui/const-generics/type-dependent/issue-61936.rs:26:13: 26:14
                    let _23: &T;         // in scope 5 at ui/const-generics/type-dependent/issue-61936.rs:29:22: 29:26
                    scope 6 {
                        debug elem => _23; // in scope 6 at ui/const-generics/type-dependent/issue-61936.rs:29:22: 29:26
                        scope 7 {
                        }
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _2 = zeroed::<[T; N]>() -> bb1;  // scope 2 at ui/const-generics/type-dependent/issue-61936.rs:23:31: 23:49
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-61936.rs:23:31: 23:47
                                         // + literal: Const { ty: unsafe fn() -> [T; N] {zeroed::<[T; N]>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _2;                    // scope 1 at ui/const-generics/type-dependent/issue-61936.rs:24:23: 24:31
        _4 = &raw mut (*_5);             // scope 1 at ui/const-generics/type-dependent/issue-61936.rs:24:23: 24:31
        _3 = move _4 as *mut T (PtrToPtr); // scope 1 at ui/const-generics/type-dependent/issue-61936.rs:24:23: 24:56
        _7 = std::ops::Range::<usize> { start: const 0_usize, end: const N }; // scope 3 at ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
        _6 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _7) -> [return: bb2, unwind: bb18]; // scope 3 at ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = move _6;                    // scope 3 at ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
        goto -> bb3;                     // scope 4 at ui/const-generics/type-dependent/issue-61936.rs:26:9: 33:10
    }

    bb3: {
        _11 = &mut _8;                   // scope 4 at ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
        _10 = &mut (*_11);               // scope 4 at ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
        _9 = <std::ops::Range<usize> as Iterator>::next(move _10) -> [return: bb4, unwind: bb18]; // scope 4 at ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = discriminant(_9);          // scope 4 at ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
        switchInt(move _12) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 4 at ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
    }

    bb5: {
        _13 = ((_9 as Some).0: usize);   // scope 4 at ui/const-generics/type-dependent/issue-61936.rs:26:13: 26:14
        _31 = deref_copy ((*_1).0: &[T]); // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:27:19: 27:29
        _18 = _31;                       // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:27:19: 27:29
        _20 = ((*_1).1: usize);          // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:27:30: 27:38
        _19 = RangeFrom::<usize> { start: move _20 }; // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:27:30: 27:40
        _17 = <[T] as Index<RangeFrom<usize>>>::index(move _18, move _19) -> [return: bb8, unwind: bb18]; // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:27:19: 27:41
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-61936.rs:27:19: 27:41
                                         // + literal: Const { ty: for<'a> fn(&'a [T], RangeFrom<usize>) -> &'a <[T] as Index<RangeFrom<usize>>>::Output {<[T] as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 4 at ui/const-generics/type-dependent/issue-61936.rs:26:18: 26:22
    }

    bb7: {
        _30 = move _2;                   // scope 3 at ui/const-generics/type-dependent/issue-61936.rs:35:14: 35:17
        _0 = Option::<[T; N]>::Some(move _30); // scope 3 at ui/const-generics/type-dependent/issue-61936.rs:35:9: 35:18
        goto -> bb17;                    // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:36:6: 36:6
    }

    bb8: {
        _16 = _17;                       // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:27:19: 27:48
        _21 = _13;                       // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:27:46: 27:47
        _15 = core::slice::<impl [T]>::get::<usize>(move _16, move _21) -> [return: bb9, unwind: bb18]; // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:27:19: 27:48
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-61936.rs:27:42: 27:45
                                         // + literal: Const { ty: for<'a> fn(&'a [T], usize) -> Option<&'a <usize as SliceIndex<[T]>>::Output> {core::slice::<impl [T]>::get::<usize>}, val: Value(<ZST>) }
    }

    bb9: {
        _22 = discriminant(_15);         // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:27:19: 27:48
        switchInt(move _22) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:27:13: 27:48
    }

    bb10: {
        _23 = ((_15 as Some).0: &T);     // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:29:22: 29:26
        _24 = _3;                        // scope 7 at ui/const-generics/type-dependent/issue-61936.rs:29:65: 29:68
        _26 = _23;                       // scope 7 at ui/const-generics/type-dependent/issue-61936.rs:29:70: 29:82
        _25 = <T as Clone>::clone(move _26) -> [return: bb13, unwind: bb18]; // scope 7 at ui/const-generics/type-dependent/issue-61936.rs:29:70: 29:82
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-61936.rs:29:75: 29:80
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb11: {
        unreachable;                     // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:27:19: 27:48
    }

    bb12: {
        _0 = Option::<[T; N]>::None;     // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:28:32: 28:36
        drop(_2) -> bb17;                // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:36:5: 36:6
    }

    bb13: {
        _14 = write_volatile::<T>(move _24, move _25) -> [return: bb14, unwind: bb18]; // scope 7 at ui/const-generics/type-dependent/issue-61936.rs:29:40: 29:83
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-61936.rs:29:40: 29:64
                                         // + literal: Const { ty: unsafe fn(*mut T, T) {write_volatile::<T>}, val: Value(<ZST>) }
    }

    bb14: {
        _28 = _3;                        // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:31:19: 31:22
        _27 = ptr::mut_ptr::<impl *mut T>::wrapping_add(move _28, const 1_usize) -> [return: bb15, unwind: bb18]; // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:31:19: 31:38
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-61936.rs:31:23: 31:35
                                         // + literal: Const { ty: fn(*mut T, usize) -> *mut T {ptr::mut_ptr::<impl *mut T>::wrapping_add}, val: Value(<ZST>) }
    }

    bb15: {
        _3 = move _27;                   // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:31:13: 31:38
        _29 = CheckedAdd(((*_1).1: usize), const 1_usize); // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:32:13: 32:26
        assert(!move (_29.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb16, unwind: bb18]; // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:32:13: 32:26
    }

    bb16: {
        ((*_1).1: usize) = move (_29.0: usize); // scope 5 at ui/const-generics/type-dependent/issue-61936.rs:32:13: 32:26
        goto -> bb3;                     // scope 4 at ui/const-generics/type-dependent/issue-61936.rs:26:9: 33:10
    }

    bb17: {
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:36:6: 36:6
    }

    bb18 (cleanup): {
        drop(_2) -> bb19;                // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:36:5: 36:6
    }

    bb19 (cleanup): {
        resume;                          // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:20:5: 36:6
    }
}

<impl at ui/const-generics/type-dependent/issue-61936.rs:18:1: 18:79>::next::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:24:44: 24:45

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:24:44: 24:45
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:24:44: 24:45
    }
}

const FOUR: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:39:13: 39:18

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:39:21: 39:22
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:39:1: 39:23
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:41:11: 41:11
    let _1: std::vec::Vec<usize>;        // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:42:9: 42:10
    let mut _2: ArrayWindowsExample<'_, usize, 4>; // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
    let mut _3: ArrayWindowsExample<'_, usize, 4>; // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
    let mut _4: &[usize];                // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
    let _5: &[usize];                    // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:30
    let mut _6: &std::vec::Vec<usize>;   // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:30
    let mut _8: std::option::Option<[usize; 4]>; // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
    let mut _9: &mut ArrayWindowsExample<'_, usize, 4>; // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
    let mut _10: &mut ArrayWindowsExample<'_, usize, 4>; // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
    let mut _11: isize;                  // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:44:5: 46:6
    let mut _13: (&[usize; 4], &[usize; 4]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _14: &[usize; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _15: &[usize; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: &[usize; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: &[usize; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &[usize; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &[usize; 4];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &[usize; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &[usize; 4];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/const-generics/type-dependent/issue-61936.rs:42:9: 42:10
        let mut _7: ArrayWindowsExample<'_, usize, 4>; // in scope 1 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
        scope 2 {
            debug iter => _7;            // in scope 2 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
            let _12: [usize; 4];         // in scope 2 at ui/const-generics/type-dependent/issue-61936.rs:44:9: 44:14
            scope 3 {
                debug array => _12;      // in scope 3 at ui/const-generics/type-dependent/issue-61936.rs:44:9: 44:14
                let _16: &[usize; 4];    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _17: &[usize; 4];    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _30: &[usize; 4]; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 4 {
                    debug left_val => _16; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _17; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _22: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _22; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _1 = from_elem::<usize>(const 0_usize, const 100_usize) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:47:36: 47:69
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:47:36: 47:58
                                         // + literal: Const { ty: fn(usize, usize) -> Vec<usize> {from_elem::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_1;                        // scope 1 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:30
        _5 = Vec::<usize>::as_slice(move _6) -> [return: bb2, unwind: bb13]; // scope 1 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:30
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-61936.rs:44:20: 44:28
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<usize>) -> &'a [usize] {Vec::<usize>::as_slice}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = _5;                         // scope 1 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
        _3 = <[usize] as SliceExt<usize>>::array_windows_example::<4>(move _4) -> [return: bb3, unwind: bb13]; // scope 1 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-61936.rs:44:31: 44:52
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a [usize]) -> ArrayWindowsExample<'a, usize, 4> {<[usize] as SliceExt<usize>>::array_windows_example::<4>}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = <ArrayWindowsExample<'_, usize, 4> as IntoIterator>::into_iter(move _3) -> [return: bb4, unwind: bb13]; // scope 1 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
                                         // + literal: Const { ty: fn(ArrayWindowsExample<'_, usize, 4>) -> <ArrayWindowsExample<'_, usize, 4> as IntoIterator>::IntoIter {<ArrayWindowsExample<'_, usize, 4> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = move _2;                    // scope 1 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
        goto -> bb5;                     // scope 2 at ui/const-generics/type-dependent/issue-61936.rs:44:5: 46:6
    }

    bb5: {
        _10 = &mut _7;                   // scope 2 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
        _9 = &mut (*_10);                // scope 2 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
        _8 = <ArrayWindowsExample<'_, usize, 4> as Iterator>::next(move _9) -> [return: bb6, unwind: bb13]; // scope 2 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
                                         // mir::Constant
                                         // + span: ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
                                         // + literal: Const { ty: for<'a> fn(&'a mut ArrayWindowsExample<'_, usize, 4>) -> Option<<ArrayWindowsExample<'_, usize, 4> as Iterator>::Item> {<ArrayWindowsExample<'_, usize, 4> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = discriminant(_8);          // scope 2 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
        switchInt(move _11) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
    }

    bb7: {
        _12 = ((_8 as Some).0: [usize; 4]); // scope 2 at ui/const-generics/type-dependent/issue-61936.rs:44:9: 44:14
        _14 = &_12;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _30 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[usize; 4], val: Unevaluated(main, [], Some(promoted[0])) }
        _15 = _30;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _13 = (move _14, move _15);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_13.0: &[usize; 4]);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_13.1: &[usize; 4]);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = <[usize; 4] as PartialEq>::eq(move _20, move _21) -> [return: bb10, unwind: bb13]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [usize; 4], &'b [usize; 4]) -> bool {<[usize; 4] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        unreachable;                     // scope 2 at ui/const-generics/type-dependent/issue-61936.rs:44:18: 44:62
    }

    bb9: {
        drop(_1) -> bb12;                // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:47:1: 47:2
    }

    bb10: {
        _18 = Not(move _19);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb5, otherwise: bb11]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _22 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<[usize; 4], [usize; 4]>(move _24, move _25, move _27, move _29) -> bb13; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [usize; 4], &'b [usize; 4], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[usize; 4], [usize; 4]>}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:47:2: 47:2
    }

    bb13 (cleanup): {
        drop(_1) -> bb14;                // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:47:1: 47:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:41:1: 47:2
    }
}

promoted[0] in main: &[usize; 4] = {
    let mut _0: &[usize; 4];             // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [usize; 4];              // in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:45:27: 45:39

    bb0: {
        _1 = [const 0_usize, const 0_usize, const 0_usize, const 0_usize]; // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:45:27: 45:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type-dependent/issue-61936.rs:44:55: 44:59

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:44:55: 44:59
        return;                          // scope 0 at ui/const-generics/type-dependent/issue-61936.rs:44:55: 44:59
    }
}
