// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/enum-variants.rs:12:11: 12:11
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                            scope 7 {
                                scope 8 {
                                    scope 9 {
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        return;                          // scope 0 at ui/const-generics/enum-variants.rs:24:2: 24:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/enum-variants.rs:13:28: 13:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/const-generics/enum-variants.rs:13:28: 13:29
        return;                          // scope 0 at ui/const-generics/enum-variants.rs:13:28: 13:29
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/enum-variants.rs:14:29: 14:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/const-generics/enum-variants.rs:14:29: 14:30
        return;                          // scope 0 at ui/const-generics/enum-variants.rs:14:29: 14:30
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/enum-variants.rs:15:29: 15:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/const-generics/enum-variants.rs:15:29: 15:30
        return;                          // scope 0 at ui/const-generics/enum-variants.rs:15:29: 15:30
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/enum-variants.rs:17:19: 17:20

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/const-generics/enum-variants.rs:17:19: 17:20
        return;                          // scope 0 at ui/const-generics/enum-variants.rs:17:19: 17:20
    }
}

main::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/enum-variants.rs:18:19: 18:20

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/const-generics/enum-variants.rs:18:19: 18:20
        return;                          // scope 0 at ui/const-generics/enum-variants.rs:18:19: 18:20
    }
}

main::{constant#5}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/enum-variants.rs:19:19: 19:20

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/const-generics/enum-variants.rs:19:19: 19:20
        return;                          // scope 0 at ui/const-generics/enum-variants.rs:19:19: 19:20
    }
}

main::{constant#6}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/enum-variants.rs:21:19: 21:20

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/const-generics/enum-variants.rs:21:19: 21:20
        return;                          // scope 0 at ui/const-generics/enum-variants.rs:21:19: 21:20
    }
}

main::{constant#7}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/enum-variants.rs:22:20: 22:21

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/const-generics/enum-variants.rs:22:20: 22:21
        return;                          // scope 0 at ui/const-generics/enum-variants.rs:22:20: 22:21
    }
}

main::{constant#8}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/enum-variants.rs:23:20: 23:21

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/const-generics/enum-variants.rs:23:20: 23:21
        return;                          // scope 0 at ui/const-generics/enum-variants.rs:23:20: 23:21
    }
}

fn Foo::Variant2() -> Foo<N> {
    let mut _0: Foo<N>;                  // return place in scope 0 at ui/const-generics/enum-variants.rs:4:5: 4:13

    bb0: {
        _0 = Foo::<N>::Variant2;         // scope 0 at ui/const-generics/enum-variants.rs:4:5: 4:13
        return;                          // scope 0 at ui/const-generics/enum-variants.rs:4:5: 4:13
    }
}

// MIR FOR CTFE
fn Foo::Variant2() -> Foo<N> {
    let mut _0: Foo<N>;                  // return place in scope 0 at ui/const-generics/enum-variants.rs:4:5: 4:13

    bb0: {
        _0 = Foo::<N>::Variant2;         // scope 0 at ui/const-generics/enum-variants.rs:4:5: 4:13
        return;                          // scope 0 at ui/const-generics/enum-variants.rs:4:5: 4:13
    }
}

fn Bar2() -> Bar2<N> {
    let mut _0: Bar2<N>;                 // return place in scope 0 at ui/const-generics/enum-variants.rs:9:1: 9:28

    bb0: {
        _0 = Bar2::<N>;                  // scope 0 at ui/const-generics/enum-variants.rs:9:1: 9:28
        return;                          // scope 0 at ui/const-generics/enum-variants.rs:9:1: 9:28
    }
}

// MIR FOR CTFE
fn Bar2() -> Bar2<N> {
    let mut _0: Bar2<N>;                 // return place in scope 0 at ui/const-generics/enum-variants.rs:9:1: 9:28

    bb0: {
        _0 = Bar2::<N>;                  // scope 0 at ui/const-generics/enum-variants.rs:9:1: 9:28
        return;                          // scope 0 at ui/const-generics/enum-variants.rs:9:1: 9:28
    }
}
