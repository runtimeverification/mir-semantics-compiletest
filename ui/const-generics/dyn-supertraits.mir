// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Bar::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:6:33: 6:34

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:6:33: 6:34
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:6:33: 6:34
    }
}

Baz::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:7:16: 7:17

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/dyn-supertraits.rs:7:16: 7:17
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:7:16: 7:17
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:13:1: 13:43>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:13:26: 13:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:13:26: 13:27
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:13:26: 13:27
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:13:1: 13:43>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:13:41: 13:42

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:13:41: 13:42
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:13:41: 13:42
    }
}

fn <impl at ui/const-generics/dyn-supertraits.rs:13:1: 13:43>::myfun(_1: &FooType<N>) -> usize {
    debug self => _1;                    // in scope 0 at ui/const-generics/dyn-supertraits.rs:14:14: 14:19
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:14:24: 14:29

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:14:32: 14:33
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:14:35: 14:35
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:16:1: 16:43>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:16:26: 16:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:16:26: 16:27
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:16:26: 16:27
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:16:1: 16:43>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:16:41: 16:42

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:16:41: 16:42
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:16:41: 16:42
    }
}

fn <impl at ui/const-generics/dyn-supertraits.rs:16:1: 16:43>::myfun(_1: &BarType<N>) -> usize {
    debug self => _1;                    // in scope 0 at ui/const-generics/dyn-supertraits.rs:17:14: 17:19
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:17:24: 17:29
    let mut _2: (usize, bool);           // in scope 0 at ui/const-generics/dyn-supertraits.rs:17:32: 17:37

    bb0: {
        _2 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/dyn-supertraits.rs:17:32: 17:37
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/dyn-supertraits.rs:17:32: 17:37
    }

    bb1: {
        _0 = move (_2.0: usize);         // scope 0 at ui/const-generics/dyn-supertraits.rs:17:32: 17:37
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:17:39: 17:39
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:19:1: 19:43>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:19:26: 19:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:19:26: 19:27
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:19:26: 19:27
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:19:1: 19:43>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:19:41: 19:42

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:19:41: 19:42
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:19:41: 19:42
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:20:1: 20:24>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:20:10: 20:11

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/dyn-supertraits.rs:20:10: 20:11
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:20:10: 20:11
    }
}

fn <impl at ui/const-generics/dyn-supertraits.rs:20:1: 20:24>::myfun(_1: &BazType) -> usize {
    debug self => _1;                    // in scope 0 at ui/const-generics/dyn-supertraits.rs:21:14: 21:19
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:21:24: 21:29

    bb0: {
        _0 = const 999_usize;            // scope 0 at ui/const-generics/dyn-supertraits.rs:21:32: 21:35
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:21:37: 21:37
    }
}

Boz::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:26:16: 26:17

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/dyn-supertraits.rs:26:16: 26:17
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:26:16: 26:17
    }
}

Bok::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:27:32: 27:33

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:27:32: 27:33
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:27:32: 27:33
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:36:1: 36:24>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:36:10: 36:11

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/dyn-supertraits.rs:36:10: 36:11
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:36:10: 36:11
    }
}

fn <impl at ui/const-generics/dyn-supertraits.rs:36:1: 36:24>::myfun(_1: &BozType) -> usize {
    debug self => _1;                    // in scope 0 at ui/const-generics/dyn-supertraits.rs:37:14: 37:19
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:37:24: 37:29

    bb0: {
        _0 = const 9999_usize;           // scope 0 at ui/const-generics/dyn-supertraits.rs:37:32: 37:36
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:37:38: 37:38
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:41:1: 41:40>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:41:38: 41:39

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:41:38: 41:39
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:41:38: 41:39
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:42:1: 42:43>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:42:26: 42:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:42:26: 42:27
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:42:26: 42:27
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:42:1: 42:43>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:42:41: 42:42

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:42:41: 42:42
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:42:41: 42:42
    }
}

fn <impl at ui/const-generics/dyn-supertraits.rs:42:1: 42:43>::myfun(_1: &BokType<N>) -> usize {
    debug self => _1;                    // in scope 0 at ui/const-generics/dyn-supertraits.rs:43:14: 43:19
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:43:24: 43:29
    let mut _2: (usize, bool);           // in scope 0 at ui/const-generics/dyn-supertraits.rs:43:32: 43:37

    bb0: {
        _2 = CheckedAdd(const N, const 2_usize); // scope 0 at ui/const-generics/dyn-supertraits.rs:43:32: 43:37
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 2_usize) -> bb1; // scope 0 at ui/const-generics/dyn-supertraits.rs:43:32: 43:37
    }

    bb1: {
        _0 = move (_2.0: usize);         // scope 0 at ui/const-generics/dyn-supertraits.rs:43:32: 43:37
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:43:39: 43:39
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:45:1: 45:43>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:45:26: 45:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:45:26: 45:27
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:45:26: 45:27
    }
}

<impl at ui/const-generics/dyn-supertraits.rs:45:1: 45:43>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:45:41: 45:42

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:45:41: 45:42
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:45:41: 45:42
    }
}

fn a(_1: &dyn Foo<N>) -> usize {
    debug x => _1;                       // in scope 0 at ui/const-generics/dyn-supertraits.rs:47:22: 47:23
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:47:41: 47:46
    let mut _2: &dyn Foo<N>;             // in scope 0 at ui/const-generics/dyn-supertraits.rs:47:49: 47:58

    bb0: {
        _2 = _1;                         // scope 0 at ui/const-generics/dyn-supertraits.rs:47:49: 47:58
        _0 = <dyn Foo<N> as Foo<N>>::myfun(move _2) -> bb1; // scope 0 at ui/const-generics/dyn-supertraits.rs:47:49: 47:58
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:47:51: 47:56
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Foo<N>) -> usize {<dyn Foo<N> as Foo<N>>::myfun}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:47:60: 47:60
    }
}

a::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:47:34: 47:35

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:47:34: 47:35
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:47:34: 47:35
    }
}

fn b(_1: &dyn Foo<3>) -> usize {
    debug x => _1;                       // in scope 0 at ui/const-generics/dyn-supertraits.rs:48:6: 48:7
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:48:25: 48:30
    let mut _2: &dyn Foo<3>;             // in scope 0 at ui/const-generics/dyn-supertraits.rs:48:33: 48:42

    bb0: {
        _2 = _1;                         // scope 0 at ui/const-generics/dyn-supertraits.rs:48:33: 48:42
        _0 = <dyn Foo<3> as Foo<3>>::myfun(move _2) -> bb1; // scope 0 at ui/const-generics/dyn-supertraits.rs:48:33: 48:42
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:48:35: 48:40
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Foo<3>) -> usize {<dyn Foo<3> as Foo<3>>::myfun}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:48:44: 48:44
    }
}

b::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:48:18: 48:19

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/dyn-supertraits.rs:48:18: 48:19
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:48:18: 48:19
    }
}

fn c(_1: T) -> usize {
    debug x => _1;                       // in scope 0 at ui/const-generics/dyn-supertraits.rs:49:33: 49:34
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:49:42: 49:47
    let mut _2: &dyn Foo<N>;             // in scope 0 at ui/const-generics/dyn-supertraits.rs:49:57: 49:59
    let mut _3: &T;                      // in scope 0 at ui/const-generics/dyn-supertraits.rs:49:57: 49:59
    let _4: &T;                          // in scope 0 at ui/const-generics/dyn-supertraits.rs:49:57: 49:59

    bb0: {
        _4 = &_1;                        // scope 0 at ui/const-generics/dyn-supertraits.rs:49:57: 49:59
        _3 = _4;                         // scope 0 at ui/const-generics/dyn-supertraits.rs:49:57: 49:59
        _2 = move _3 as &dyn Foo<N> (Pointer(Unsize)); // scope 0 at ui/const-generics/dyn-supertraits.rs:49:57: 49:59
        _0 = a::<N>(move _2) -> [return: bb1, unwind: bb3]; // scope 0 at ui/const-generics/dyn-supertraits.rs:49:50: 49:60
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:49:50: 49:56
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Foo<N> + 'a)) -> usize {a::<N>}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/const-generics/dyn-supertraits.rs:49:61: 49:62
    }

    bb2: {
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:49:62: 49:62
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/const-generics/dyn-supertraits.rs:49:61: 49:62
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:49:1: 49:62
    }
}

c::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:49:13: 49:14

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:49:13: 49:14
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:49:13: 49:14
    }
}

c::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:49:54: 49:55

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/dyn-supertraits.rs:49:54: 49:55
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:49:54: 49:55
    }
}

fn d(_1: &T) -> usize {
    debug x => _1;                       // in scope 0 at ui/const-generics/dyn-supertraits.rs:50:26: 50:27
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:50:36: 50:41
    let mut _2: &T;                      // in scope 0 at ui/const-generics/dyn-supertraits.rs:50:44: 50:53

    bb0: {
        _2 = _1;                         // scope 0 at ui/const-generics/dyn-supertraits.rs:50:44: 50:53
        _0 = <T as Foo<3>>::myfun(move _2) -> bb1; // scope 0 at ui/const-generics/dyn-supertraits.rs:50:44: 50:53
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:50:46: 50:51
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> usize {<T as Foo<3>>::myfun}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:50:55: 50:55
    }
}

d::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:50:22: 50:23

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/dyn-supertraits.rs:50:22: 50:23
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:50:22: 50:23
    }
}

fn e(_1: &dyn Bar<3>) -> usize {
    debug x => _1;                       // in scope 0 at ui/const-generics/dyn-supertraits.rs:51:6: 51:7
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:51:25: 51:30
    let mut _2: &dyn Bar<3>;             // in scope 0 at ui/const-generics/dyn-supertraits.rs:51:35: 51:36

    bb0: {
        _2 = _1;                         // scope 0 at ui/const-generics/dyn-supertraits.rs:51:35: 51:36
        _0 = d::<dyn Bar<3>>(move _2) -> bb1; // scope 0 at ui/const-generics/dyn-supertraits.rs:51:33: 51:37
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:51:33: 51:34
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Bar<3>) -> usize {d::<dyn Bar<3>>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:51:39: 51:39
    }
}

e::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:51:18: 51:19

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/dyn-supertraits.rs:51:18: 51:19
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:51:18: 51:19
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:53:11: 53:11
    let _1: FooType<3>;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:54:9: 54:12
    let mut _2: bool;                    // in scope 0 at ui/const-generics/dyn-supertraits.rs:55:5: 55:26
    let mut _3: bool;                    // in scope 0 at ui/const-generics/dyn-supertraits.rs:55:13: 55:25
    let mut _4: usize;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:55:13: 55:20
    let mut _5: &dyn Foo<3>;             // in scope 0 at ui/const-generics/dyn-supertraits.rs:55:15: 55:19
    let mut _6: &FooType<3>;             // in scope 0 at ui/const-generics/dyn-supertraits.rs:55:15: 55:19
    let _7: &FooType<3>;                 // in scope 0 at ui/const-generics/dyn-supertraits.rs:55:15: 55:19
    let mut _8: !;                       // in scope 0 at ui/const-generics/dyn-supertraits.rs:55:5: 55:26
    let mut _9: bool;                    // in scope 0 at ui/const-generics/dyn-supertraits.rs:56:5: 56:26
    let mut _10: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:56:13: 56:25
    let mut _11: usize;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:56:13: 56:20
    let mut _12: &dyn Foo<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:56:15: 56:19
    let mut _13: &FooType<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:56:15: 56:19
    let _14: &FooType<3>;                // in scope 0 at ui/const-generics/dyn-supertraits.rs:56:15: 56:19
    let mut _15: !;                      // in scope 0 at ui/const-generics/dyn-supertraits.rs:56:5: 56:26
    let mut _16: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:57:5: 57:26
    let mut _17: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:57:13: 57:25
    let mut _18: usize;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:57:13: 57:20
    let mut _19: &FooType<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:57:15: 57:19
    let _20: &FooType<3>;                // in scope 0 at ui/const-generics/dyn-supertraits.rs:57:15: 57:19
    let mut _21: !;                      // in scope 0 at ui/const-generics/dyn-supertraits.rs:57:5: 57:26
    let mut _23: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:60:5: 60:26
    let mut _24: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:60:13: 60:25
    let mut _25: usize;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:60:13: 60:20
    let mut _26: &dyn Foo<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:60:15: 60:19
    let mut _27: &BarType<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:60:15: 60:19
    let _28: &BarType<3>;                // in scope 0 at ui/const-generics/dyn-supertraits.rs:60:15: 60:19
    let mut _29: !;                      // in scope 0 at ui/const-generics/dyn-supertraits.rs:60:5: 60:26
    let mut _30: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:61:5: 61:26
    let mut _31: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:61:13: 61:25
    let mut _32: usize;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:61:13: 61:20
    let mut _33: &dyn Foo<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:61:15: 61:19
    let mut _34: &BarType<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:61:15: 61:19
    let _35: &BarType<3>;                // in scope 0 at ui/const-generics/dyn-supertraits.rs:61:15: 61:19
    let mut _36: !;                      // in scope 0 at ui/const-generics/dyn-supertraits.rs:61:5: 61:26
    let mut _37: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:62:5: 62:26
    let mut _38: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:62:13: 62:25
    let mut _39: usize;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:62:13: 62:20
    let mut _40: &BarType<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:62:15: 62:19
    let _41: &BarType<3>;                // in scope 0 at ui/const-generics/dyn-supertraits.rs:62:15: 62:19
    let mut _42: !;                      // in scope 0 at ui/const-generics/dyn-supertraits.rs:62:5: 62:26
    let mut _43: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:63:5: 63:26
    let mut _44: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:63:13: 63:25
    let mut _45: usize;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:63:13: 63:20
    let mut _46: &dyn Bar<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:63:15: 63:19
    let mut _47: &BarType<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:63:15: 63:19
    let _48: &BarType<3>;                // in scope 0 at ui/const-generics/dyn-supertraits.rs:63:15: 63:19
    let mut _49: !;                      // in scope 0 at ui/const-generics/dyn-supertraits.rs:63:5: 63:26
    let mut _51: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:66:5: 66:28
    let mut _52: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:66:13: 66:27
    let mut _53: usize;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:66:13: 66:20
    let mut _54: &dyn Foo<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:66:15: 66:19
    let mut _55: &BazType;               // in scope 0 at ui/const-generics/dyn-supertraits.rs:66:15: 66:19
    let _56: &BazType;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:66:15: 66:19
    let mut _57: !;                      // in scope 0 at ui/const-generics/dyn-supertraits.rs:66:5: 66:28
    let mut _58: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:67:5: 67:28
    let mut _59: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:67:13: 67:27
    let mut _60: usize;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:67:13: 67:20
    let mut _61: &dyn Foo<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:67:15: 67:19
    let mut _62: &BazType;               // in scope 0 at ui/const-generics/dyn-supertraits.rs:67:15: 67:19
    let _63: &BazType;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:67:15: 67:19
    let mut _64: !;                      // in scope 0 at ui/const-generics/dyn-supertraits.rs:67:5: 67:28
    let mut _65: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:68:5: 68:28
    let mut _66: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:68:13: 68:27
    let mut _67: usize;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:68:13: 68:20
    let mut _68: &BazType;               // in scope 0 at ui/const-generics/dyn-supertraits.rs:68:15: 68:19
    let _69: &BazType;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:68:15: 68:19
    let mut _70: !;                      // in scope 0 at ui/const-generics/dyn-supertraits.rs:68:5: 68:28
    let mut _72: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:71:5: 71:29
    let mut _73: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:71:13: 71:28
    let mut _74: usize;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:71:13: 71:20
    let mut _75: &dyn Foo<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:71:15: 71:19
    let mut _76: &BozType;               // in scope 0 at ui/const-generics/dyn-supertraits.rs:71:15: 71:19
    let _77: &BozType;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:71:15: 71:19
    let mut _78: !;                      // in scope 0 at ui/const-generics/dyn-supertraits.rs:71:5: 71:29
    let mut _79: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:72:5: 72:29
    let mut _80: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:72:13: 72:28
    let mut _81: usize;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:72:13: 72:20
    let mut _82: &dyn Foo<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:72:15: 72:19
    let mut _83: &BozType;               // in scope 0 at ui/const-generics/dyn-supertraits.rs:72:15: 72:19
    let _84: &BozType;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:72:15: 72:19
    let mut _85: !;                      // in scope 0 at ui/const-generics/dyn-supertraits.rs:72:5: 72:29
    let mut _86: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:73:5: 73:29
    let mut _87: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:73:13: 73:28
    let mut _88: usize;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:73:13: 73:20
    let mut _89: &BozType;               // in scope 0 at ui/const-generics/dyn-supertraits.rs:73:15: 73:19
    let _90: &BozType;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:73:15: 73:19
    let mut _91: !;                      // in scope 0 at ui/const-generics/dyn-supertraits.rs:73:5: 73:29
    let mut _93: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:76:5: 76:26
    let mut _94: bool;                   // in scope 0 at ui/const-generics/dyn-supertraits.rs:76:13: 76:25
    let mut _95: usize;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:76:13: 76:20
    let mut _96: &dyn Foo<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:76:15: 76:19
    let mut _97: &BokType<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:76:15: 76:19
    let _98: &BokType<3>;                // in scope 0 at ui/const-generics/dyn-supertraits.rs:76:15: 76:19
    let mut _99: !;                      // in scope 0 at ui/const-generics/dyn-supertraits.rs:76:5: 76:26
    let mut _100: bool;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:77:5: 77:26
    let mut _101: bool;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:77:13: 77:25
    let mut _102: usize;                 // in scope 0 at ui/const-generics/dyn-supertraits.rs:77:13: 77:20
    let mut _103: &dyn Foo<3>;           // in scope 0 at ui/const-generics/dyn-supertraits.rs:77:15: 77:19
    let mut _104: &BokType<3>;           // in scope 0 at ui/const-generics/dyn-supertraits.rs:77:15: 77:19
    let _105: &BokType<3>;               // in scope 0 at ui/const-generics/dyn-supertraits.rs:77:15: 77:19
    let mut _106: !;                     // in scope 0 at ui/const-generics/dyn-supertraits.rs:77:5: 77:26
    let mut _107: bool;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:78:5: 78:26
    let mut _108: bool;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:78:13: 78:25
    let mut _109: usize;                 // in scope 0 at ui/const-generics/dyn-supertraits.rs:78:13: 78:20
    let mut _110: &BokType<3>;           // in scope 0 at ui/const-generics/dyn-supertraits.rs:78:15: 78:19
    let _111: &BokType<3>;               // in scope 0 at ui/const-generics/dyn-supertraits.rs:78:15: 78:19
    let mut _112: !;                     // in scope 0 at ui/const-generics/dyn-supertraits.rs:78:5: 78:26
    let mut _113: bool;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:79:5: 79:37
    let mut _114: bool;                  // in scope 0 at ui/const-generics/dyn-supertraits.rs:79:13: 79:36
    let mut _115: usize;                 // in scope 0 at ui/const-generics/dyn-supertraits.rs:79:13: 79:31
    let mut _116: BokType<3>;            // in scope 0 at ui/const-generics/dyn-supertraits.rs:79:15: 79:30
    let mut _117: !;                     // in scope 0 at ui/const-generics/dyn-supertraits.rs:79:5: 79:37
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/const-generics/dyn-supertraits.rs:54:9: 54:12
        let _22: BarType<3>;             // in scope 1 at ui/const-generics/dyn-supertraits.rs:59:9: 59:12
        scope 2 {
            debug bar => _22;            // in scope 2 at ui/const-generics/dyn-supertraits.rs:59:9: 59:12
            let _50: BazType;            // in scope 2 at ui/const-generics/dyn-supertraits.rs:65:9: 65:12
            scope 3 {
                debug baz => _50;        // in scope 3 at ui/const-generics/dyn-supertraits.rs:65:9: 65:12
                let _71: BozType;        // in scope 3 at ui/const-generics/dyn-supertraits.rs:70:9: 70:12
                scope 4 {
                    debug boz => _71;    // in scope 4 at ui/const-generics/dyn-supertraits.rs:70:9: 70:12
                    let _92: BokType<3>; // in scope 4 at ui/const-generics/dyn-supertraits.rs:75:9: 75:12
                    scope 5 {
                        debug bok => _92; // in scope 5 at ui/const-generics/dyn-supertraits.rs:75:9: 75:12
                    }
                }
            }
        }
    }

    bb0: {
        _7 = &_1;                        // scope 1 at ui/const-generics/dyn-supertraits.rs:55:15: 55:19
        _6 = _7;                         // scope 1 at ui/const-generics/dyn-supertraits.rs:55:15: 55:19
        _5 = move _6 as &dyn Foo<3> (Pointer(Unsize)); // scope 1 at ui/const-generics/dyn-supertraits.rs:55:15: 55:19
        _4 = a::<3>(move _5) -> bb1;     // scope 1 at ui/const-generics/dyn-supertraits.rs:55:13: 55:20
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:55:13: 55:14
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Foo<3> + 'a)) -> usize {a::<3>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Eq(move _4, const 3_usize); // scope 1 at ui/const-generics/dyn-supertraits.rs:55:13: 55:25
        _2 = Not(move _3);               // scope 1 at ui/const-generics/dyn-supertraits.rs:55:5: 55:26
        switchInt(move _2) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/const-generics/dyn-supertraits.rs:55:5: 55:26
    }

    bb2: {
        _8 = core::panicking::panic(const "assertion failed: a(&foo) == 3"); // scope 1 at ui/const-generics/dyn-supertraits.rs:55:5: 55:26
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:55:5: 55:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _14 = &_1;                       // scope 1 at ui/const-generics/dyn-supertraits.rs:56:15: 56:19
        _13 = _14;                       // scope 1 at ui/const-generics/dyn-supertraits.rs:56:15: 56:19
        _12 = move _13 as &dyn Foo<3> (Pointer(Unsize)); // scope 1 at ui/const-generics/dyn-supertraits.rs:56:15: 56:19
        _11 = b(move _12) -> bb4;        // scope 1 at ui/const-generics/dyn-supertraits.rs:56:13: 56:20
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:56:13: 56:14
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Foo<3> + 'a)) -> usize {b}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = Eq(move _11, const 3_usize); // scope 1 at ui/const-generics/dyn-supertraits.rs:56:13: 56:25
        _9 = Not(move _10);              // scope 1 at ui/const-generics/dyn-supertraits.rs:56:5: 56:26
        switchInt(move _9) -> [0: bb6, otherwise: bb5]; // scope 1 at ui/const-generics/dyn-supertraits.rs:56:5: 56:26
    }

    bb5: {
        _15 = core::panicking::panic(const "assertion failed: b(&foo) == 3"); // scope 1 at ui/const-generics/dyn-supertraits.rs:56:5: 56:26
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:56:5: 56:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _20 = &_1;                       // scope 1 at ui/const-generics/dyn-supertraits.rs:57:15: 57:19
        _19 = _20;                       // scope 1 at ui/const-generics/dyn-supertraits.rs:57:15: 57:19
        _18 = d::<FooType<3>>(move _19) -> bb7; // scope 1 at ui/const-generics/dyn-supertraits.rs:57:13: 57:20
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:57:13: 57:14
                                         // + literal: Const { ty: for<'a> fn(&'a FooType<3>) -> usize {d::<FooType<3>>}, val: Value(<ZST>) }
    }

    bb7: {
        _17 = Eq(move _18, const 3_usize); // scope 1 at ui/const-generics/dyn-supertraits.rs:57:13: 57:25
        _16 = Not(move _17);             // scope 1 at ui/const-generics/dyn-supertraits.rs:57:5: 57:26
        switchInt(move _16) -> [0: bb9, otherwise: bb8]; // scope 1 at ui/const-generics/dyn-supertraits.rs:57:5: 57:26
    }

    bb8: {
        _21 = core::panicking::panic(const "assertion failed: d(&foo) == 3"); // scope 1 at ui/const-generics/dyn-supertraits.rs:57:5: 57:26
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:57:5: 57:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _28 = &_22;                      // scope 2 at ui/const-generics/dyn-supertraits.rs:60:15: 60:19
        _27 = _28;                       // scope 2 at ui/const-generics/dyn-supertraits.rs:60:15: 60:19
        _26 = move _27 as &dyn Foo<3> (Pointer(Unsize)); // scope 2 at ui/const-generics/dyn-supertraits.rs:60:15: 60:19
        _25 = a::<3>(move _26) -> bb10;  // scope 2 at ui/const-generics/dyn-supertraits.rs:60:13: 60:20
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:60:13: 60:14
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Foo<3> + 'a)) -> usize {a::<3>}, val: Value(<ZST>) }
    }

    bb10: {
        _24 = Eq(move _25, const 4_usize); // scope 2 at ui/const-generics/dyn-supertraits.rs:60:13: 60:25
        _23 = Not(move _24);             // scope 2 at ui/const-generics/dyn-supertraits.rs:60:5: 60:26
        switchInt(move _23) -> [0: bb12, otherwise: bb11]; // scope 2 at ui/const-generics/dyn-supertraits.rs:60:5: 60:26
    }

    bb11: {
        _29 = core::panicking::panic(const "assertion failed: a(&bar) == 4"); // scope 2 at ui/const-generics/dyn-supertraits.rs:60:5: 60:26
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:60:5: 60:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _35 = &_22;                      // scope 2 at ui/const-generics/dyn-supertraits.rs:61:15: 61:19
        _34 = _35;                       // scope 2 at ui/const-generics/dyn-supertraits.rs:61:15: 61:19
        _33 = move _34 as &dyn Foo<3> (Pointer(Unsize)); // scope 2 at ui/const-generics/dyn-supertraits.rs:61:15: 61:19
        _32 = b(move _33) -> bb13;       // scope 2 at ui/const-generics/dyn-supertraits.rs:61:13: 61:20
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:61:13: 61:14
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Foo<3> + 'a)) -> usize {b}, val: Value(<ZST>) }
    }

    bb13: {
        _31 = Eq(move _32, const 4_usize); // scope 2 at ui/const-generics/dyn-supertraits.rs:61:13: 61:25
        _30 = Not(move _31);             // scope 2 at ui/const-generics/dyn-supertraits.rs:61:5: 61:26
        switchInt(move _30) -> [0: bb15, otherwise: bb14]; // scope 2 at ui/const-generics/dyn-supertraits.rs:61:5: 61:26
    }

    bb14: {
        _36 = core::panicking::panic(const "assertion failed: b(&bar) == 4"); // scope 2 at ui/const-generics/dyn-supertraits.rs:61:5: 61:26
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:61:5: 61:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _41 = &_22;                      // scope 2 at ui/const-generics/dyn-supertraits.rs:62:15: 62:19
        _40 = _41;                       // scope 2 at ui/const-generics/dyn-supertraits.rs:62:15: 62:19
        _39 = d::<BarType<3>>(move _40) -> bb16; // scope 2 at ui/const-generics/dyn-supertraits.rs:62:13: 62:20
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:62:13: 62:14
                                         // + literal: Const { ty: for<'a> fn(&'a BarType<3>) -> usize {d::<BarType<3>>}, val: Value(<ZST>) }
    }

    bb16: {
        _38 = Eq(move _39, const 4_usize); // scope 2 at ui/const-generics/dyn-supertraits.rs:62:13: 62:25
        _37 = Not(move _38);             // scope 2 at ui/const-generics/dyn-supertraits.rs:62:5: 62:26
        switchInt(move _37) -> [0: bb18, otherwise: bb17]; // scope 2 at ui/const-generics/dyn-supertraits.rs:62:5: 62:26
    }

    bb17: {
        _42 = core::panicking::panic(const "assertion failed: d(&bar) == 4"); // scope 2 at ui/const-generics/dyn-supertraits.rs:62:5: 62:26
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:62:5: 62:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _48 = &_22;                      // scope 2 at ui/const-generics/dyn-supertraits.rs:63:15: 63:19
        _47 = _48;                       // scope 2 at ui/const-generics/dyn-supertraits.rs:63:15: 63:19
        _46 = move _47 as &dyn Bar<3> (Pointer(Unsize)); // scope 2 at ui/const-generics/dyn-supertraits.rs:63:15: 63:19
        _45 = e(move _46) -> bb19;       // scope 2 at ui/const-generics/dyn-supertraits.rs:63:13: 63:20
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:63:13: 63:14
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Bar<3> + 'a)) -> usize {e}, val: Value(<ZST>) }
    }

    bb19: {
        _44 = Eq(move _45, const 4_usize); // scope 2 at ui/const-generics/dyn-supertraits.rs:63:13: 63:25
        _43 = Not(move _44);             // scope 2 at ui/const-generics/dyn-supertraits.rs:63:5: 63:26
        switchInt(move _43) -> [0: bb21, otherwise: bb20]; // scope 2 at ui/const-generics/dyn-supertraits.rs:63:5: 63:26
    }

    bb20: {
        _49 = core::panicking::panic(const "assertion failed: e(&bar) == 4"); // scope 2 at ui/const-generics/dyn-supertraits.rs:63:5: 63:26
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:63:5: 63:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _56 = &_50;                      // scope 3 at ui/const-generics/dyn-supertraits.rs:66:15: 66:19
        _55 = _56;                       // scope 3 at ui/const-generics/dyn-supertraits.rs:66:15: 66:19
        _54 = move _55 as &dyn Foo<3> (Pointer(Unsize)); // scope 3 at ui/const-generics/dyn-supertraits.rs:66:15: 66:19
        _53 = a::<3>(move _54) -> bb22;  // scope 3 at ui/const-generics/dyn-supertraits.rs:66:13: 66:20
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:66:13: 66:14
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Foo<3> + 'a)) -> usize {a::<3>}, val: Value(<ZST>) }
    }

    bb22: {
        _52 = Eq(move _53, const 999_usize); // scope 3 at ui/const-generics/dyn-supertraits.rs:66:13: 66:27
        _51 = Not(move _52);             // scope 3 at ui/const-generics/dyn-supertraits.rs:66:5: 66:28
        switchInt(move _51) -> [0: bb24, otherwise: bb23]; // scope 3 at ui/const-generics/dyn-supertraits.rs:66:5: 66:28
    }

    bb23: {
        _57 = core::panicking::panic(const "assertion failed: a(&baz) == 999"); // scope 3 at ui/const-generics/dyn-supertraits.rs:66:5: 66:28
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:66:5: 66:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb24: {
        _63 = &_50;                      // scope 3 at ui/const-generics/dyn-supertraits.rs:67:15: 67:19
        _62 = _63;                       // scope 3 at ui/const-generics/dyn-supertraits.rs:67:15: 67:19
        _61 = move _62 as &dyn Foo<3> (Pointer(Unsize)); // scope 3 at ui/const-generics/dyn-supertraits.rs:67:15: 67:19
        _60 = b(move _61) -> bb25;       // scope 3 at ui/const-generics/dyn-supertraits.rs:67:13: 67:20
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:67:13: 67:14
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Foo<3> + 'a)) -> usize {b}, val: Value(<ZST>) }
    }

    bb25: {
        _59 = Eq(move _60, const 999_usize); // scope 3 at ui/const-generics/dyn-supertraits.rs:67:13: 67:27
        _58 = Not(move _59);             // scope 3 at ui/const-generics/dyn-supertraits.rs:67:5: 67:28
        switchInt(move _58) -> [0: bb27, otherwise: bb26]; // scope 3 at ui/const-generics/dyn-supertraits.rs:67:5: 67:28
    }

    bb26: {
        _64 = core::panicking::panic(const "assertion failed: b(&baz) == 999"); // scope 3 at ui/const-generics/dyn-supertraits.rs:67:5: 67:28
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:67:5: 67:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        _69 = &_50;                      // scope 3 at ui/const-generics/dyn-supertraits.rs:68:15: 68:19
        _68 = _69;                       // scope 3 at ui/const-generics/dyn-supertraits.rs:68:15: 68:19
        _67 = d::<BazType>(move _68) -> bb28; // scope 3 at ui/const-generics/dyn-supertraits.rs:68:13: 68:20
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:68:13: 68:14
                                         // + literal: Const { ty: for<'a> fn(&'a BazType) -> usize {d::<BazType>}, val: Value(<ZST>) }
    }

    bb28: {
        _66 = Eq(move _67, const 999_usize); // scope 3 at ui/const-generics/dyn-supertraits.rs:68:13: 68:27
        _65 = Not(move _66);             // scope 3 at ui/const-generics/dyn-supertraits.rs:68:5: 68:28
        switchInt(move _65) -> [0: bb30, otherwise: bb29]; // scope 3 at ui/const-generics/dyn-supertraits.rs:68:5: 68:28
    }

    bb29: {
        _70 = core::panicking::panic(const "assertion failed: d(&baz) == 999"); // scope 3 at ui/const-generics/dyn-supertraits.rs:68:5: 68:28
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:68:5: 68:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        _77 = &_71;                      // scope 4 at ui/const-generics/dyn-supertraits.rs:71:15: 71:19
        _76 = _77;                       // scope 4 at ui/const-generics/dyn-supertraits.rs:71:15: 71:19
        _75 = move _76 as &dyn Foo<3> (Pointer(Unsize)); // scope 4 at ui/const-generics/dyn-supertraits.rs:71:15: 71:19
        _74 = a::<3>(move _75) -> bb31;  // scope 4 at ui/const-generics/dyn-supertraits.rs:71:13: 71:20
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:71:13: 71:14
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Foo<3> + 'a)) -> usize {a::<3>}, val: Value(<ZST>) }
    }

    bb31: {
        _73 = Eq(move _74, const 9999_usize); // scope 4 at ui/const-generics/dyn-supertraits.rs:71:13: 71:28
        _72 = Not(move _73);             // scope 4 at ui/const-generics/dyn-supertraits.rs:71:5: 71:29
        switchInt(move _72) -> [0: bb33, otherwise: bb32]; // scope 4 at ui/const-generics/dyn-supertraits.rs:71:5: 71:29
    }

    bb32: {
        _78 = core::panicking::panic(const "assertion failed: a(&boz) == 9999"); // scope 4 at ui/const-generics/dyn-supertraits.rs:71:5: 71:29
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:71:5: 71:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb33: {
        _84 = &_71;                      // scope 4 at ui/const-generics/dyn-supertraits.rs:72:15: 72:19
        _83 = _84;                       // scope 4 at ui/const-generics/dyn-supertraits.rs:72:15: 72:19
        _82 = move _83 as &dyn Foo<3> (Pointer(Unsize)); // scope 4 at ui/const-generics/dyn-supertraits.rs:72:15: 72:19
        _81 = b(move _82) -> bb34;       // scope 4 at ui/const-generics/dyn-supertraits.rs:72:13: 72:20
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:72:13: 72:14
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Foo<3> + 'a)) -> usize {b}, val: Value(<ZST>) }
    }

    bb34: {
        _80 = Eq(move _81, const 9999_usize); // scope 4 at ui/const-generics/dyn-supertraits.rs:72:13: 72:28
        _79 = Not(move _80);             // scope 4 at ui/const-generics/dyn-supertraits.rs:72:5: 72:29
        switchInt(move _79) -> [0: bb36, otherwise: bb35]; // scope 4 at ui/const-generics/dyn-supertraits.rs:72:5: 72:29
    }

    bb35: {
        _85 = core::panicking::panic(const "assertion failed: b(&boz) == 9999"); // scope 4 at ui/const-generics/dyn-supertraits.rs:72:5: 72:29
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:72:5: 72:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb36: {
        _90 = &_71;                      // scope 4 at ui/const-generics/dyn-supertraits.rs:73:15: 73:19
        _89 = _90;                       // scope 4 at ui/const-generics/dyn-supertraits.rs:73:15: 73:19
        _88 = d::<BozType>(move _89) -> bb37; // scope 4 at ui/const-generics/dyn-supertraits.rs:73:13: 73:20
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:73:13: 73:14
                                         // + literal: Const { ty: for<'a> fn(&'a BozType) -> usize {d::<BozType>}, val: Value(<ZST>) }
    }

    bb37: {
        _87 = Eq(move _88, const 9999_usize); // scope 4 at ui/const-generics/dyn-supertraits.rs:73:13: 73:28
        _86 = Not(move _87);             // scope 4 at ui/const-generics/dyn-supertraits.rs:73:5: 73:29
        switchInt(move _86) -> [0: bb39, otherwise: bb38]; // scope 4 at ui/const-generics/dyn-supertraits.rs:73:5: 73:29
    }

    bb38: {
        _91 = core::panicking::panic(const "assertion failed: d(&boz) == 9999"); // scope 4 at ui/const-generics/dyn-supertraits.rs:73:5: 73:29
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:73:5: 73:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb39: {
        _98 = &_92;                      // scope 5 at ui/const-generics/dyn-supertraits.rs:76:15: 76:19
        _97 = _98;                       // scope 5 at ui/const-generics/dyn-supertraits.rs:76:15: 76:19
        _96 = move _97 as &dyn Foo<3> (Pointer(Unsize)); // scope 5 at ui/const-generics/dyn-supertraits.rs:76:15: 76:19
        _95 = a::<3>(move _96) -> bb40;  // scope 5 at ui/const-generics/dyn-supertraits.rs:76:13: 76:20
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:76:13: 76:14
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Foo<3> + 'a)) -> usize {a::<3>}, val: Value(<ZST>) }
    }

    bb40: {
        _94 = Eq(move _95, const 5_usize); // scope 5 at ui/const-generics/dyn-supertraits.rs:76:13: 76:25
        _93 = Not(move _94);             // scope 5 at ui/const-generics/dyn-supertraits.rs:76:5: 76:26
        switchInt(move _93) -> [0: bb42, otherwise: bb41]; // scope 5 at ui/const-generics/dyn-supertraits.rs:76:5: 76:26
    }

    bb41: {
        _99 = core::panicking::panic(const "assertion failed: a(&bok) == 5"); // scope 5 at ui/const-generics/dyn-supertraits.rs:76:5: 76:26
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:76:5: 76:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb42: {
        _105 = &_92;                     // scope 5 at ui/const-generics/dyn-supertraits.rs:77:15: 77:19
        _104 = _105;                     // scope 5 at ui/const-generics/dyn-supertraits.rs:77:15: 77:19
        _103 = move _104 as &dyn Foo<3> (Pointer(Unsize)); // scope 5 at ui/const-generics/dyn-supertraits.rs:77:15: 77:19
        _102 = b(move _103) -> bb43;     // scope 5 at ui/const-generics/dyn-supertraits.rs:77:13: 77:20
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:77:13: 77:14
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Foo<3> + 'a)) -> usize {b}, val: Value(<ZST>) }
    }

    bb43: {
        _101 = Eq(move _102, const 5_usize); // scope 5 at ui/const-generics/dyn-supertraits.rs:77:13: 77:25
        _100 = Not(move _101);           // scope 5 at ui/const-generics/dyn-supertraits.rs:77:5: 77:26
        switchInt(move _100) -> [0: bb45, otherwise: bb44]; // scope 5 at ui/const-generics/dyn-supertraits.rs:77:5: 77:26
    }

    bb44: {
        _106 = core::panicking::panic(const "assertion failed: b(&bok) == 5"); // scope 5 at ui/const-generics/dyn-supertraits.rs:77:5: 77:26
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:77:5: 77:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb45: {
        _111 = &_92;                     // scope 5 at ui/const-generics/dyn-supertraits.rs:78:15: 78:19
        _110 = _111;                     // scope 5 at ui/const-generics/dyn-supertraits.rs:78:15: 78:19
        _109 = d::<BokType<3>>(move _110) -> bb46; // scope 5 at ui/const-generics/dyn-supertraits.rs:78:13: 78:20
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:78:13: 78:14
                                         // + literal: Const { ty: for<'a> fn(&'a BokType<3>) -> usize {d::<BokType<3>>}, val: Value(<ZST>) }
    }

    bb46: {
        _108 = Eq(move _109, const 5_usize); // scope 5 at ui/const-generics/dyn-supertraits.rs:78:13: 78:25
        _107 = Not(move _108);           // scope 5 at ui/const-generics/dyn-supertraits.rs:78:5: 78:26
        switchInt(move _107) -> [0: bb48, otherwise: bb47]; // scope 5 at ui/const-generics/dyn-supertraits.rs:78:5: 78:26
    }

    bb47: {
        _112 = core::panicking::panic(const "assertion failed: d(&bok) == 5"); // scope 5 at ui/const-generics/dyn-supertraits.rs:78:5: 78:26
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:78:5: 78:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb48: {
        _115 = c::<BokType<3>, 3>(move _116) -> bb49; // scope 5 at ui/const-generics/dyn-supertraits.rs:79:13: 79:31
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:79:13: 79:14
                                         // + literal: Const { ty: fn(BokType<3>) -> usize {c::<BokType<3>, 3>}, val: Value(<ZST>) }
    }

    bb49: {
        _114 = Eq(move _115, const 5_usize); // scope 5 at ui/const-generics/dyn-supertraits.rs:79:13: 79:36
        _113 = Not(move _114);           // scope 5 at ui/const-generics/dyn-supertraits.rs:79:5: 79:37
        switchInt(move _113) -> [0: bb51, otherwise: bb50]; // scope 5 at ui/const-generics/dyn-supertraits.rs:79:5: 79:37
    }

    bb50: {
        _117 = core::panicking::panic(const "assertion failed: c(BokType::<3> {}) == 5"); // scope 5 at ui/const-generics/dyn-supertraits.rs:79:5: 79:37
                                         // mir::Constant
                                         // + span: ui/const-generics/dyn-supertraits.rs:79:5: 79:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb51: {
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:80:2: 80:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:54:25: 54:26

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/dyn-supertraits.rs:54:25: 54:26
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:54:25: 54:26
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:59:25: 59:26

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/dyn-supertraits.rs:59:25: 59:26
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:59:25: 59:26
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:75:25: 75:26

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/dyn-supertraits.rs:75:25: 75:26
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:75:25: 75:26
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/dyn-supertraits.rs:79:25: 79:26

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/dyn-supertraits.rs:79:25: 79:26
        return;                          // scope 0 at ui/const-generics/dyn-supertraits.rs:79:25: 79:26
    }
}
