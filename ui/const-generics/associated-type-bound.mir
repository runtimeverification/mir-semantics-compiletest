// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::Assoc::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/associated-type-bound.rs:5:21: 5:22

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/associated-type-bound.rs:5:21: 5:22
        return;                          // scope 0 at ui/const-generics/associated-type-bound.rs:5:21: 5:22
    }
}

<impl at ui/const-generics/associated-type-bound.rs:8:1: 8:35>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/associated-type-bound.rs:8:26: 8:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/associated-type-bound.rs:8:26: 8:27
        return;                          // scope 0 at ui/const-generics/associated-type-bound.rs:8:26: 8:27
    }
}

<impl at ui/const-generics/associated-type-bound.rs:9:1: 9:20>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/associated-type-bound.rs:9:10: 9:11

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/associated-type-bound.rs:9:10: 9:11
        return;                          // scope 0 at ui/const-generics/associated-type-bound.rs:9:10: 9:11
    }
}

<impl at ui/const-generics/associated-type-bound.rs:11:1: 11:35>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/associated-type-bound.rs:11:26: 11:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/associated-type-bound.rs:11:26: 11:27
        return;                          // scope 0 at ui/const-generics/associated-type-bound.rs:11:26: 11:27
    }
}

<impl at ui/const-generics/associated-type-bound.rs:15:1: 15:20>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/associated-type-bound.rs:15:10: 15:11

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/associated-type-bound.rs:15:10: 15:11
        return;                          // scope 0 at ui/const-generics/associated-type-bound.rs:15:10: 15:11
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/associated-type-bound.rs:19:11: 19:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/associated-type-bound.rs:19:13: 19:13
    }
}
