// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bind(_1: [u8; N + 2]) -> [u8; N * 2] {
    debug value => _1;                   // in scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:5:25: 5:30
    let mut _0: [u8; N * 2];             // return place in scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:5:48: 5:59
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

bind::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:5:37: 5:42
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:5:37: 5:42

    bb0: {
        _1 = CheckedAdd(const N, const 2_usize); // scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:5:37: 5:42
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 2_usize) -> bb1; // scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:5:37: 5:42
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:5:37: 5:42
        return;                          // scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:5:37: 5:42
    }
}

bind::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:5:53: 5:58
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:5:53: 5:58

    bb0: {
        _1 = CheckedMul(const N, const 2_usize); // scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:5:53: 5:58
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const N, const 2_usize) -> bb1; // scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:5:53: 5:58
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:5:53: 5:58
        return;                          // scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:5:53: 5:58
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:9:11: 9:11
    let mut _1: [u8; N + 2];             // in scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:10:9: 10:16
    let mut _2: [u8; N * 2];             // in scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:11:11: 11:25
    let mut _3: [u8; N + 2];             // in scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:11:21: 11:24
    scope 1 {
        debug arr => _1;                 // in scope 1 at ui/const-generics/occurs-check/unify-fixpoint.rs:10:9: 10:16
    }

    bb0: {
        _1 = <[u8; N + 2] as Default>::default() -> bb1; // scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:10:19: 10:37
                                         // mir::Constant
                                         // + span: ui/const-generics/occurs-check/unify-fixpoint.rs:10:19: 10:35
                                         // + literal: Const { ty: fn() -> [u8; N + 2] {<[u8; N + 2] as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _1;                         // scope 1 at ui/const-generics/occurs-check/unify-fixpoint.rs:11:21: 11:24
        _2 = bind::<2>(move _3) -> bb2;  // scope 1 at ui/const-generics/occurs-check/unify-fixpoint.rs:11:11: 11:25
                                         // mir::Constant
                                         // + span: ui/const-generics/occurs-check/unify-fixpoint.rs:11:11: 11:20
                                         // + literal: Const { ty: fn([u8; N + 2]) -> [u8; N * 2] {bind::<2>}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = move _2;                    // scope 1 at ui/const-generics/occurs-check/unify-fixpoint.rs:11:5: 11:25
        return;                          // scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:12:2: 12:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:11:18: 11:19

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:11:18: 11:19
        return;                          // scope 0 at ui/const-generics/occurs-check/unify-fixpoint.rs:11:18: 11:19
    }
}
