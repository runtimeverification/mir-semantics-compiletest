// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bind(_1: [u8; N]) -> [u8; N] {
    debug value => _1;
    let mut _0: [u8; N];
    let mut _2: !;

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented") -> unwind continue;
    }
}

bind::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

bind::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn sink(_1: [u8; 5]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

sink::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [u8; 5];
    let mut _2: [u8; 5];
    let mut _3: [u8; 5];
    let _4: ();
    let mut _5: [u8; 5];
    scope 1 {
        debug arr => _1;
    }

    bb0: {
        _1 = <[u8; 5] as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = _1;
        _2 = bind::<5>(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = move _2;
        _5 = _1;
        _4 = sink(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}
