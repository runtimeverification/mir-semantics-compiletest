// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:4:45: 4:54
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:4:47: 4:52

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:4:47: 4:52
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:4:47: 4:52
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:4:47: 4:52
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:4:45: 4:54
    }
}

Bar::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:5:32: 5:33

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:5:32: 5:33
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:5:32: 5:33
    }
}

Bar::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:5:35: 5:36

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:5:35: 5:36
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:5:35: 5:36
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:6:11: 6:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:6:13: 6:13
    }
}

fn Bar(_1: Foo<N, 3>) -> Bar<N> {
    let mut _0: Bar<N>;                  // return place in scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:5:1: 5:27

    bb0: {
        _0 = Bar::<N>(move _1);          // scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:5:1: 5:27
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:5:1: 5:27
    }
}

// MIR FOR CTFE
fn Bar(_1: Foo<N, 3>) -> Bar<N> {
    let mut _0: Bar<N>;                  // return place in scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:5:1: 5:27

    bb0: {
        _0 = Bar::<N>(move _1);          // scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:5:1: 5:27
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/unused-complex-default-expr.rs:5:1: 5:27
    }
}
