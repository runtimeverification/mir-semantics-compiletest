// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/const-generics/generic_const_exprs/associated-const.rs:3:1: 3:15>::VALUE: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:4:18: 4:23

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:4:26: 4:50
        _0 = std::mem::size_of::<T>() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:4:26: 4:50
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/associated-const.rs:4:26: 4:48
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:4:5: 4:51
    }
}

fn test() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:7:14: 7:14
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:9:2: 9:2
    }
}

test::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:8:17: 8:33

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:8:17: 8:33
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:8:17: 8:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:11:11: 11:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:11:13: 11:13
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:2:1: 2:14

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:2:1: 2:14
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:2:1: 2:14
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:2:1: 2:14

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:2:1: 2:14
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/associated-const.rs:2:1: 2:14
    }
}
