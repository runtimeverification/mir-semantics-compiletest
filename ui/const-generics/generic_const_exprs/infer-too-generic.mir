// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn split_first(_1: [T; N]) -> (T, [T; N - 1]) {
    debug arr => _1;                     // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:7:35: 7:38
    let mut _0: (T, [T; N - 1]);         // return place in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:7:51: 7:66
    let _2: std::mem::ManuallyDrop<[T; N]>; // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:11:9: 11:12
    let mut _3: [T; N];                  // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:11:38: 11:41
    let mut _5: *const T;                // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:30: 13:37
    let _6: &T;                          // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:30: 13:37
    let _7: &[T; N];                     // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:31: 13:34
    let mut _8: &std::mem::ManuallyDrop<[T; N]>; // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:31: 13:34
    let _9: usize;                       // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:35: 13:36
    let mut _10: usize;                  // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:31: 13:37
    let mut _11: bool;                   // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:31: 13:37
    let mut _13: *const [T; N - 1];      // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:30: 14:74
    let mut _14: *const [T; N - 1];      // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:30: 14:74
    let mut _15: *const [T];             // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:30: 14:53
    let _16: &[T];                       // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:30: 14:39
    let _17: &[T];                       // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:31: 14:39
    let mut _18: &[T; N];                // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:31: 14:34
    let _19: &[T; N];                    // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:31: 14:34
    let mut _20: &std::mem::ManuallyDrop<[T; N]>; // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:31: 14:34
    let mut _21: std::ops::RangeFrom<usize>; // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:35: 14:38
    let mut _22: T;                      // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:15:10: 15:14
    let mut _23: [T; N - 1];             // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:15:16: 15:20
    scope 1 {
        debug arr => _2;                 // in scope 1 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:11:9: 11:12
        scope 2 {
            let _4: T;                   // in scope 2 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:13: 13:17
            scope 3 {
                debug head => _4;        // in scope 3 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:13: 13:17
                let _12: [T; N - 1];     // in scope 3 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:13: 14:17
                scope 4 {
                    debug tail => _12;   // in scope 4 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:13: 14:17
                }
            }
        }
    }

    bb0: {
        _3 = move _1;                    // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:11:38: 11:41
        _2 = ManuallyDrop::<[T; N]>::new(move _3) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:11:15: 11:42
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/infer-too-generic.rs:11:15: 11:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([T; N]) -> ManuallyDrop<[T; N]> {ManuallyDrop::<[T; N]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_2;                        // scope 2 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:31: 13:34
        _7 = <ManuallyDrop<[T; N]> as Deref>::deref(move _8) -> bb2; // scope 2 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:31: 13:34
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:31: 13:34
                                         // + literal: Const { ty: for<'a> fn(&'a ManuallyDrop<[T; N]>) -> &'a <ManuallyDrop<[T; N]> as Deref>::Target {<ManuallyDrop<[T; N]> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = const 0_usize;              // scope 2 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:35: 13:36
        _10 = const N;                   // scope 2 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:31: 13:37
        _11 = Lt(_9, _10);               // scope 2 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:31: 13:37
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> bb3; // scope 2 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:31: 13:37
    }

    bb3: {
        _6 = &(*_7)[_9];                 // scope 2 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:30: 13:37
        _5 = &raw const (*_6);           // scope 2 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:30: 13:37
        _4 = std::ptr::read::<T>(move _5) -> bb4; // scope 2 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:20: 13:38
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/infer-too-generic.rs:13:20: 13:29
                                         // + literal: Const { ty: unsafe fn(*const T) -> T {std::ptr::read::<T>}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = &_2;                       // scope 3 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:31: 14:34
        _19 = <ManuallyDrop<[T; N]> as Deref>::deref(move _20) -> [return: bb5, unwind: bb8]; // scope 3 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:31: 14:34
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:31: 14:34
                                         // + literal: Const { ty: for<'a> fn(&'a ManuallyDrop<[T; N]>) -> &'a <ManuallyDrop<[T; N]> as Deref>::Target {<ManuallyDrop<[T; N]> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = _19;                       // scope 3 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:31: 14:34
        _21 = const RangeFrom::<usize> {{ start: 1_usize }}; // scope 3 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:35: 14:38
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:35: 14:38
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000001)) }
        _17 = <[T; N] as Index<RangeFrom<usize>>>::index(move _18, move _21) -> [return: bb6, unwind: bb8]; // scope 3 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:31: 14:39
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:31: 14:39
                                         // + literal: Const { ty: for<'a> fn(&'a [T; N], RangeFrom<usize>) -> &'a <[T; N] as Index<RangeFrom<usize>>>::Output {<[T; N] as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = _17;                       // scope 3 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:30: 14:39
        _15 = &raw const (*_16);         // scope 3 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:30: 14:39
        _14 = move _15 as *const [T; N - 1] (PtrToPtr); // scope 3 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:30: 14:74
        _13 = _14;                       // scope 3 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:30: 14:74
        _12 = std::ptr::read::<[T; N - 1]>(move _13) -> [return: bb7, unwind: bb8]; // scope 3 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:20: 14:75
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:20: 14:29
                                         // + literal: Const { ty: unsafe fn(*const [T; N - 1]) -> [T; N - 1] {std::ptr::read::<[T; N - 1]>}, val: Value(<ZST>) }
    }

    bb7: {
        _22 = move _4;                   // scope 4 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:15:10: 15:14
        _23 = move _12;                  // scope 4 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:15:16: 15:20
        _0 = (move _22, move _23);       // scope 4 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:15:9: 15:21
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:17:2: 17:2
    }

    bb8 (cleanup): {
        drop(_4) -> bb9;                 // scope 2 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:16:5: 16:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:7:1: 17:2
    }
}

split_first::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:7:44: 7:45

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:7:44: 7:45
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:7:44: 7:45
    }
}

split_first::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:7:59: 7:64
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:7:59: 7:64

    bb0: {
        _1 = CheckedSub(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:7:59: 7:64
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:7:59: 7:64
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:7:59: 7:64
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:7:59: 7:64
    }
}

split_first::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:9:9: 9:14
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:9:9: 9:14

    bb0: {
        _1 = CheckedSub(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:9:9: 9:14
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:9:9: 9:14
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:9:9: 9:14
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:9:9: 9:14
    }
}

split_first::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:68: 14:73
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:68: 14:73

    bb0: {
        _1 = CheckedSub(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:68: 14:73
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:68: 14:73
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:68: 14:73
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:14:68: 14:73
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:19:11: 19:11
    let _1: [i32; 5];                    // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:20:9: 20:12
    let mut _4: (i32, [i32; N - 1]);     // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:21:24: 21:40
    let mut _5: [i32; 5];                // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:21:36: 21:39
    let mut _6: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _8: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _23: (&[i32; N - 1], &[i32; 4]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _24: &[i32; N - 1];          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _25: &[i32; 4];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _30: &[i32; N - 1];          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _31: &[i32; 4];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _33: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _34: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _35: &[i32; N - 1];          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _36: &[i32; N - 1];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _37: &[i32; 4];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _38: &[i32; 4];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug arr => _1;                 // in scope 1 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:20:9: 20:12
        let _2: i32;                     // in scope 1 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:21:10: 21:14
        let _3: [i32; N - 1];            // in scope 1 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:21:16: 21:20
        scope 2 {
            debug head => _2;            // in scope 2 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:21:10: 21:14
            debug tail => _3;            // in scope 2 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:21:16: 21:20
            let _9: &i32;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _10: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _26: &[i32; N - 1];      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _27: &[i32; 4];          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _40: &[i32; 4];      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _41: &i32;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _9;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _10;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _15: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _15;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug left_val => _26;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _27;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _32: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _32;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32]; // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:20:15: 20:30
        _5 = _1;                         // scope 1 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:21:36: 21:39
        _4 = split_first::<i32, 5>(move _5) -> bb1; // scope 1 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:21:24: 21:40
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/infer-too-generic.rs:21:24: 21:35
                                         // + literal: Const { ty: fn([i32; 5]) -> (i32, [i32; N - 1]) {split_first::<i32, 5>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = (_4.0: i32);                // scope 1 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:21:10: 21:14
        _3 = (_4.1: [i32; N - 1]);       // scope 1 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:21:16: 21:20
        _7 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _41 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _8 = _41;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _8);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_6.0: &i32);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_6.1: &i32);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = const 0_i32;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<i32, i32>(move _17, move _18, move _20, move _22); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb3: {
        _24 = &_3;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _40 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[i32; 4], val: Unevaluated(main, [], Some(promoted[0])) }
        _25 = _40;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _23 = (move _24, move _25);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _26 = (_23.0: &[i32; N - 1]);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _27 = (_23.1: &[i32; 4]);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _30 = _26;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _31 = _27;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _29 = <[i32; N - 1] as PartialEq<[i32; 4]>>::eq(move _30, move _31) -> bb4; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [i32; N - 1], &'b [i32; 4]) -> bool {<[i32; N - 1] as PartialEq<[i32; 4]>>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _28 = Not(move _29);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _28) -> [0: bb6, otherwise: bb5]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _32 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _34 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = _26;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _36;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _27;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _37 = _38;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _33 = core::panicking::assert_failed::<[i32; N - 1], [i32; 4]>(move _34, move _35, move _37, move _39); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [i32; N - 1], &'b [i32; 4], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[i32; N - 1], [i32; 4]>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:24:2: 24:2
    }
}

promoted[0] in main: &[i32; 4] = {
    let mut _0: &[i32; 4];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [i32; 4];                // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:23:22: 23:34

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]; // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:23:22: 23:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:22:22: 22:23

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/const-generics/generic_const_exprs/infer-too-generic.rs:22:22: 22:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
