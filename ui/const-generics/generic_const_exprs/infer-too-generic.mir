// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn split_first(_1: [T; N]) -> (T, [T; N - 1]) {
    debug arr => _1;
    let mut _0: (T, [T; N - 1]);
    let _2: std::mem::ManuallyDrop<[T; N]>;
    let mut _4: *const T;
    let _5: &T;
    let _6: &[T; N];
    let mut _7: &std::mem::ManuallyDrop<[T; N]>;
    let _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let mut _12: *const [T; N - 1];
    let mut _13: *const [T];
    let _14: &[T];
    let _15: &[T];
    let mut _16: &[T; N];
    let _17: &[T; N];
    let mut _18: &std::mem::ManuallyDrop<[T; N]>;
    let mut _19: std::ops::RangeFrom<usize>;
    let mut _20: T;
    let mut _21: [T; N - 1];
    scope 1 {
        debug arr => _2;
        scope 2 {
            let _3: T;
            scope 3 {
                debug head => _3;
                let _11: [T; N - 1];
                scope 4 {
                    debug tail => _11;
                }
            }
        }
    }

    bb0: {
        _2 = ManuallyDrop::<[T; N]>::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_2;
        _6 = <ManuallyDrop<[T; N]> as Deref>::deref(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = const 0_usize;
        _9 = const N;
        _10 = Lt(_8, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> [success: bb3, unwind continue];
    }

    bb3: {
        _5 = &(*_6)[_8];
        _4 = &raw const (*_5);
        _3 = std::ptr::read::<T>(move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        _18 = &_2;
        _17 = <ManuallyDrop<[T; N]> as Deref>::deref(move _18) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _16 = _17;
        _19 = RangeFrom::<usize> { start: const 1_usize };
        _15 = <[T; N] as Index<RangeFrom<usize>>>::index(move _16, move _19) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        _14 = _15;
        _13 = &raw const (*_14);
        _12 = move _13 as *const [T; N - 1] (PtrToPtr);
        _11 = std::ptr::read::<[T; N - 1]>(_12) -> [return: bb7, unwind: bb8];
    }

    bb7: {
        _20 = move _3;
        _21 = move _11;
        _0 = (move _20, move _21);
        return;
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

split_first::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

split_first::{constant#2}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedSub(const N, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const N, const 1_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

split_first::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedSub(const N, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const N, const 1_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

split_first::{constant#3}: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedSub(const N, const 1_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const N, const 1_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: [i32; 5];
    let mut _4: (i32, [i32; N - 1]);
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&[i32; N - 1], &[i32; 4]);
    let mut _17: &[i32; N - 1];
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug arr => _1;
        let _2: i32;
        let _3: [i32; N - 1];
        scope 2 {
            debug head => _2;
            debug tail => _3;
            let _7: &i32;
            let _8: &i32;
            let _18: &[i32; N - 1];
            let _19: &[i32; 4];
            let mut _25: &[i32; 4];
            let mut _26: &i32;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                debug left_val => _18;
                debug right_val => _19;
                let _22: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _22;
                }
            }
        }
    }

    bb0: {
        _1 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _4 = split_first::<i32, 5>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = (_4.0: i32);
        _3 = (_4.1: [i32; N - 1]);
        _6 = &_2;
        _26 = const _;
        _5 = (move _6, _26);
        _7 = (_5.0: &i32);
        _8 = (_5.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb3: {
        _17 = &_3;
        _25 = const _;
        _16 = (move _17, _25);
        _18 = (_16.0: &[i32; N - 1]);
        _19 = (_16.1: &[i32; 4]);
        _21 = <[i32; N - 1] as PartialEq<[i32; 4]>>::eq(_18, _19) -> [return: bb4, unwind continue];
    }

    bb4: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<[i32; N - 1], [i32; 4]>(move _22, _18, _19, move _24) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &[i32; 4] = {
    let mut _0: &[i32; 4];
    let mut _1: [i32; 4];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}
