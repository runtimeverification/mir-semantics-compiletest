// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn zero_init() -> Substs1<{{ N }}> {
    let mut _0: Substs1<{{ N }}>;
    let mut _1: [u8; {{ N }}];

    bb0: {
        _1 = [const 0_u8; {{ N }}];
        _0 = Substs1::<N>(move _1);
        return;
    }
}

zero_init::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

zero_init::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

zero_init::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

Substs1::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

Substs1::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn substs2() -> Substs1<{{ M }}> {
    let mut _0: Substs1<{{ M }}>;

    bb0: {
        _0 = zero_init::<{{ M }}>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

substs2::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const M;
        return;
    }
}

substs2::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const M;
        return;
    }
}

fn substs3() -> Substs1<{{ L }}> {
    let mut _0: Substs1<{{ L }}>;

    bb0: {
        _0 = substs2::<{{ L }}>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

substs3::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const L;
        return;
    }
}

substs3::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const L;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&[u8; {{ N }}], &[u8; 2]);
    let mut _2: &[u8; {{ N }}];
    let _3: Substs1<{{ L }}>;
    let _4: &[u8; {{ N }}];
    let _5: &[u8; 2];
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: &[u8; 2];
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }

    bb0: {
        _3 = substs3::<2>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &(_3.0: [u8; {{ N }}]);
        _11 = const _;
        _1 = (move _2, _11);
        _4 = (_1.0: &[u8; {{ N }}]);
        _5 = (_1.1: &[u8; 2]);
        _7 = <[u8; {{ N }}] as PartialEq<[u8; 2]>>::eq(_4, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<[u8; {{ N }}], [u8; 2]>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &[u8; 2] = {
    let mut _0: &[u8; 2];
    let mut _1: [u8; 2];

    bb0: {
        _1 = [const 0_u8; 2];
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn Substs1(_1: [u8; {{ N }}]) -> Substs1<N> {
    let mut _0: Substs1<N>;

    bb0: {
        _0 = Substs1::<N>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Substs1(_1: [u8; {{ N }}]) -> Substs1<N> {
    let mut _0: Substs1<N>;

    bb0: {
        _0 = Substs1::<N>(move _1);
        return;
    }
}
