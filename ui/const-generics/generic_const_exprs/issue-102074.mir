// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Aes128CipherKey::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:33: 8:54

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:33: 8:54
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:33: 8:54
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-102074.rs:7:10: 7:15>::fmt(_1: &Aes128CipherKey, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:7:10: 7:15
    debug f => _2;                       // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:7:10: 7:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:7:10: 7:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:7:10: 7:15
    let mut _4: &str;                    // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:7:10: 7:15
    let _5: &str;                        // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:7:10: 7:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:28: 8:55
    let mut _7: &&[u8; Aes128Cipher::KEY_LEN]; // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:28: 8:55
    let _8: &&[u8; Aes128Cipher::KEY_LEN]; // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:28: 8:55
    let _9: &[u8; Aes128Cipher::KEY_LEN]; // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:28: 8:55

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:7:10: 7:15
        _5 = const "Aes128CipherKey";    // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-102074.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:7:10: 7:15
        _9 = &((*_1).0: [u8; Aes128Cipher::KEY_LEN]); // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:28: 8:55
        _8 = &_9;                        // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:28: 8:55
        _7 = _8;                         // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:28: 8:55
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:28: 8:55
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-102074.rs:7:10: 7:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:7:15: 7:15
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-102074.rs:7:17: 7:22>::clone(_1: &Aes128CipherKey) -> Aes128CipherKey {
    debug self => _1;                    // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:7:17: 7:22
    let mut _0: Aes128CipherKey;         // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:7:17: 7:22
    let mut _2: [u8; Aes128Cipher::KEY_LEN]; // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:28: 8:55
    let mut _3: &[u8; Aes128Cipher::KEY_LEN]; // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:28: 8:55
    let _4: &[u8; Aes128Cipher::KEY_LEN]; // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:28: 8:55

    bb0: {
        _4 = &((*_1).0: [u8; Aes128Cipher::KEY_LEN]); // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:28: 8:55
        _3 = _4;                         // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:28: 8:55
        _2 = (*_3);                      // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:28: 8:55
        _0 = Aes128CipherKey(move _2);   // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:7:17: 7:22
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:7:22: 7:22
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-102074.rs:10:1: 10:21>::new(_1: &[u8; Aes128Cipher::KEY_LEN]) -> Aes128CipherKey {
    debug key => _1;                     // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:11:16: 11:19
    let mut _0: Aes128CipherKey;         // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:11:54: 11:58
    let mut _2: [u8; Aes128Cipher::KEY_LEN]; // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:12:14: 12:25
    let mut _3: &[u8; Aes128Cipher::KEY_LEN]; // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:12:14: 12:25

    bb0: {
        _3 = _1;                         // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:12:14: 12:25
        _2 = (*_3);                      // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:12:14: 12:25
        _0 = Aes128CipherKey(move _2);   // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:12:9: 12:26
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:13:6: 13:6
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-102074.rs:10:1: 10:21>::new::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:11:27: 11:48

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:11:27: 11:48
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:11:27: 11:48
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-102074.rs:16:10: 16:15>::fmt(_1: &Aes128Cipher, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:16:10: 16:15
    debug f => _2;                       // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:16:10: 16:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:16:10: 16:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:16:10: 16:15
    let mut _4: &str;                    // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:16:10: 16:15
    let _5: &str;                        // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:16:10: 16:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:16:10: 16:15
        _5 = const "Aes128Cipher";       // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:16:10: 16:15
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-102074.rs:16:10: 16:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:16:10: 16:15
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:16:10: 16:15
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-102074.rs:16:10: 16:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:16:15: 16:15
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-102074.rs:16:17: 16:22>::clone(_1: &Aes128Cipher) -> Aes128Cipher {
    debug self => _1;                    // in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:16:17: 16:22
    let mut _0: Aes128Cipher;            // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:16:17: 16:22

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:16:22: 16:22
    }
}

const <impl at ui/const-generics/generic_const_exprs/issue-102074.rs:19:1: 19:18>::KEY_LEN: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:20:20: 20:25

    bb0: {
        _0 = const 16_usize;             // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:20:28: 20:30
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:20:5: 20:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:23:11: 23:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:23:13: 23:13
    }
}

fn Aes128CipherKey(_1: [u8; 16]) -> Aes128CipherKey {
    let mut _0: Aes128CipherKey;         // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:1: 8:27

    bb0: {
        _0 = Aes128CipherKey(move _1);   // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:1: 8:27
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:1: 8:27
    }
}

// MIR FOR CTFE
fn Aes128CipherKey(_1: [u8; 16]) -> Aes128CipherKey {
    let mut _0: Aes128CipherKey;         // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:1: 8:27

    bb0: {
        _0 = Aes128CipherKey(move _1);   // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:1: 8:27
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-102074.rs:8:1: 8:27
    }
}
