// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:7:10: 7:15
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:7:10: 7:15

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:7:10: 7:15
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:7:10: 7:15
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:7:10: 7:15
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:7:10: 7:15
    }
}

<impl at ui/const-generics/generic_const_exprs/drop_impl.rs:9:1: 9:37>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:11:10: 11:15
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:11:10: 11:15

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:11:10: 11:15
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:11:10: 11:15
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:11:10: 11:15
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:11:10: 11:15
    }
}

<impl at ui/const-generics/generic_const_exprs/drop_impl.rs:9:1: 9:37>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:9:35: 9:36

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:9:35: 9:36
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:9:35: 9:36
    }
}

fn <impl at ui/const-generics/generic_const_exprs/drop_impl.rs:9:1: 9:37>::drop(_1: &mut Foo<N>) -> () {
    debug self => _1;                    // in scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:13:13: 13:22
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:13:24: 13:24

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:13:26: 13:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:16:11: 16:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/drop_impl.rs:16:13: 16:13
    }
}
