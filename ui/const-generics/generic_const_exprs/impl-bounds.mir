// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/generic_const_exprs/impl-bounds.rs:9:1: 9:35>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:9:16: 9:34

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:9:18: 9:32
        _0 = std::mem::size_of::<T>() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:9:18: 9:32
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/impl-bounds.rs:9:18: 9:30
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:9:16: 9:34
    }
}

fn <impl at ui/const-generics/generic_const_exprs/impl-bounds.rs:9:1: 9:35>::test() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:10:15: 10:15
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:12:6: 12:6
    }
}

<impl at ui/const-generics/generic_const_exprs/impl-bounds.rs:9:1: 9:35>::test::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:11:21: 11:45

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:11:21: 11:45
        _0 = std::mem::size_of::<T>() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:11:21: 11:45
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/impl-bounds.rs:11:21: 11:43
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:11:21: 11:45
    }
}

<impl at ui/const-generics/generic_const_exprs/impl-bounds.rs:19:1: 19:46>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:19:13: 19:31

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:19:15: 19:29
        _0 = std::mem::size_of::<T>() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:19:15: 19:29
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/impl-bounds.rs:19:15: 19:27
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:19:13: 19:31
    }
}

<impl at ui/const-generics/generic_const_exprs/impl-bounds.rs:19:1: 19:46>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:19:44: 19:45

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:19:44: 19:45
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:19:44: 19:45
    }
}

fn <impl at ui/const-generics/generic_const_exprs/impl-bounds.rs:19:1: 19:46>::test_me() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:20:18: 20:18
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:22:6: 22:6
    }
}

<impl at ui/const-generics/generic_const_exprs/impl-bounds.rs:19:1: 19:46>::test_me::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:21:21: 21:45

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:21:21: 21:45
        _0 = std::mem::size_of::<T>() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:21:21: 21:45
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/impl-bounds.rs:21:21: 21:43
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:21:21: 21:45
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:25:11: 25:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:25:13: 25:13
    }
}

fn Foo(_1: T) -> Foo<T, N> {
    let mut _0: Foo<T, N>;               // return place in scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:7:1: 7:30

    bb0: {
        _0 = Foo::<T, N>(move _1);       // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:7:1: 7:30
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:7:1: 7:30
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T, N> {
    let mut _0: Foo<T, N>;               // return place in scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:7:1: 7:30

    bb0: {
        _0 = Foo::<T, N>(move _1);       // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:7:1: 7:30
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/impl-bounds.rs:7:1: 7:30
    }
}
