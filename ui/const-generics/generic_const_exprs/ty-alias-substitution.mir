// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Alias::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:6:37: 6:42
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:6:37: 6:42

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:6:37: 6:42
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:6:37: 6:42
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:6:37: 6:42
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:6:37: 6:42
    }
}

fn foo() -> [u32; N + 1] {
    let mut _0: [u32; N + 1];            // return place in scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:8:29: 8:42

    bb0: {
        _0 = [const 0_u32; M + 1];       // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:9:5: 9:15
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:10:2: 10:2
    }
}

foo::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:8:40: 8:41

    bb0: {
        _0 = const M;                    // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:8:40: 8:41
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:8:40: 8:41
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:8:55: 8:60
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:8:55: 8:60

    bb0: {
        _1 = CheckedAdd(const M, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:8:55: 8:60
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const M, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:8:55: 8:60
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:8:55: 8:60
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:8:55: 8:60
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:9:9: 9:14
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:9:9: 9:14

    bb0: {
        _1 = CheckedAdd(const M, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:9:9: 9:14
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const M, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:9:9: 9:14
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:9:9: 9:14
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:9:9: 9:14
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:12:11: 12:11
    let _1: [u32; N + 1];                // in scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:13:5: 13:15

    bb0: {
        _1 = foo::<0>() -> bb1;          // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:13:5: 13:15
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:13:5: 13:13
                                         // + literal: Const { ty: fn() -> [u32; N + 1] {foo::<0>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:14:2: 14:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:13:11: 13:12

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:13:11: 13:12
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/ty-alias-substitution.rs:13:11: 13:12
    }
}
