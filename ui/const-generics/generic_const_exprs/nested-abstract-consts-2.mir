// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:9:1: 9:30>::{constant#0}: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:11:14: 11:23
    let mut _1: (u64, bool);             // in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:11:16: 11:21

    bb0: {
        _1 = CheckedSub(const K, const 1_u64); // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:11:16: 11:21
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const K, const 1_u64) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:11:16: 11:21
    }

    bb1: {
        _0 = move (_1.0: u64);           // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:11:16: 11:21
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:11:14: 11:23
    }
}

<impl at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:9:1: 9:30>::{constant#1}: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:9:28: 9:29

    bb0: {
        _0 = const K;                    // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:9:28: 9:29
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:9:28: 9:29
    }
}

fn <impl at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:9:1: 9:30>::foo(_1: Generic<K>) -> u64 {
    debug self => _1;                    // in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:13:12: 13:16
    let mut _0: u64;                     // return place in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:13:21: 13:24

    bb0: {
        _0 = const K;                    // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:14:9: 14:10
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:15:6: 15:6
    }
}

<impl at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:18:1: 18:30>::{constant#0}: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:20:14: 20:23
    let mut _1: (u64, bool);             // in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:20:16: 20:21

    bb0: {
        _1 = CheckedSub(const K, const 1_u64); // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:20:16: 20:21
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const K, const 1_u64) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:20:16: 20:21
    }

    bb1: {
        _0 = move (_1.0: u64);           // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:20:16: 20:21
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:20:14: 20:23
    }
}

<impl at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:18:1: 18:30>::{constant#1}: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:21:14: 21:23
    let mut _1: (u64, bool);             // in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:21:16: 21:21

    bb0: {
        _1 = CheckedAdd(const K, const 1_u64); // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:21:16: 21:21
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const K, const 1_u64) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:21:16: 21:21
    }

    bb1: {
        _0 = move (_1.0: u64);           // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:21:16: 21:21
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:21:14: 21:23
    }
}

<impl at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:18:1: 18:30>::{constant#2}: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:22:14: 22:27
    let mut _1: u64;                     // in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:22:16: 22:21
    let mut _2: (u64, bool);             // in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:22:16: 22:21
    let mut _3: (u64, bool);             // in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:22:16: 22:25

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:22:16: 22:21
        _2 = CheckedAdd(const K, const 1_u64); // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:22:16: 22:21
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const K, const 1_u64) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:22:16: 22:21
    }

    bb1: {
        _1 = move (_2.0: u64);           // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:22:16: 22:21
        _3 = CheckedSub(_1, const 1_u64); // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:22:16: 22:25
        assert(!move (_3.1: bool), "attempt to compute `{} - {}`, which would overflow", move _1, const 1_u64) -> bb2; // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:22:16: 22:25
    }

    bb2: {
        _0 = move (_3.0: u64);           // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:22:16: 22:25
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:22:24: 22:25
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:22:14: 22:27
    }
}

<impl at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:18:1: 18:30>::{constant#3}: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:18:28: 18:29

    bb0: {
        _0 = const K;                    // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:18:28: 18:29
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:18:28: 18:29
    }
}

fn <impl at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:18:1: 18:30>::bar(_1: Generic<K>) -> u64 {
    debug self => _1;                    // in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:24:12: 24:16
    let mut _0: u64;                     // return place in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:24:21: 24:24
    let _2: Generic<{ K + 1 }>;          // in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:25:13: 25:14
    let mut _3: Generic<{ K + 1 }>;      // in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:26:9: 26:10
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:25:13: 25:14
    }

    bb0: {
        _0 = Generic::<{ K + 1 }>::foo(move _3) -> bb1; // scope 1 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:26:9: 26:16
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:26:11: 26:14
                                         // + literal: Const { ty: fn(Generic<{ K + 1 }>) -> u64 {Generic::<{ K + 1 }>::foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:27:6: 27:6
    }
}

<impl at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:18:1: 18:30>::bar::{constant#0}: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:25:24: 25:33
    let mut _1: (u64, bool);             // in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:25:26: 25:31

    bb0: {
        _1 = CheckedAdd(const K, const 1_u64); // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:25:26: 25:31
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const K, const 1_u64) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:25:26: 25:31
    }

    bb1: {
        _0 = move (_1.0: u64);           // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:25:26: 25:31
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:25:24: 25:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:30:11: 30:11
    let mut _1: (&u64, &u64);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: u64;                         // in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:31:16: 31:37
    let mut _4: Generic<10>;             // in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:31:16: 31:31
    let mut _5: &u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: &u64;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &u64;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = Generic::<10>::bar(move _4) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:31:16: 31:37
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:31:32: 31:35
                                         // + literal: Const { ty: fn(Generic<10>) -> u64 {Generic::<10>::bar}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _20 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u64, val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _20;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_1.0: &u64);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_1.1: &u64);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = (*_6);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = const 11_u64;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = Eq(move _10, move _11);     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<u64, u64>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u64, &'b u64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u64, u64>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:32:2: 32:2
    }
}

promoted[0] in main: &u64 = {
    let mut _0: &u64;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u64;                     // in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:31:39: 31:41

    bb0: {
        _1 = const 11_u64;               // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:31:39: 31:41
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

main::{constant#0}: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:31:27: 31:29

    bb0: {
        _0 = const 10_u64;               // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:31:27: 31:29
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested-abstract-consts-2.rs:31:27: 31:29
    }
}
