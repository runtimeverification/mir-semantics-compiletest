// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/generic_const_exprs/issue-73899.rs:7:1: 7:37>::{constant#0}: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Eq(const N, const 0_usize);
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-73899.rs:7:1: 7:37>::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-73899.rs:11:1: 11:41>::{constant#0}: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Eq(const 0_u8, const 0_u8);
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-73899.rs:11:1: 11:41>::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-73899.rs:13:1: 13:57>::{constant#0}: bool = {
    let mut _0: bool;

    bb0: {
        _0 = Ne(const 0_u8, const 0_u8);
        return;
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-73899.rs:13:1: 13:57>::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn foo(_1: T) -> () {
    debug _v => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = foo::<[(); 0]>(const []) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = foo::<[(); 1]>(const [()]) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}
