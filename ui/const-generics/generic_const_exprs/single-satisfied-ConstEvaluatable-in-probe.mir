// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Conster::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:16:10: 16:19

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:16:10: 16:19
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:16:10: 16:19
    }
}

<impl at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:10: 12:15>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:16:10: 16:19

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:16:10: 16:19
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:16:10: 16:19
    }
}

fn <impl at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:10: 12:15>::clone(_1: &Conster<OT>) -> Conster<OT> {
    debug self => _1;                    // in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:10: 12:15
    let mut _0: Conster<OT>;             // return place in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:10: 12:15
    let mut _2: std::marker::PhantomData<fn(OT) -> OT>; // in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
    let mut _3: &std::marker::PhantomData<fn(OT) -> OT>; // in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
    let _4: &std::marker::PhantomData<fn(OT) -> OT>; // in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44

    bb0: {
        _4 = &((*_1).0: std::marker::PhantomData<fn(OT) -> OT>); // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
        _3 = _4;                         // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
        _2 = <PhantomData<fn(OT) -> OT> as Clone>::clone(move _3) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
                                         // + literal: Const { ty: for<'a> fn(&'a PhantomData<fn(OT) -> OT>) -> PhantomData<fn(OT) -> OT> {<PhantomData<fn(OT) -> OT> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:15: 12:15
    }
}

<impl at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:17: 12:22>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:16:10: 16:19

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:16:10: 16:19
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:16:10: 16:19
    }
}

fn <impl at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:17: 12:22>::fmt(_1: &Conster<OT>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:17: 12:22
    debug f => _2;                       // in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:17: 12:22
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:17: 12:22
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:17: 12:22
    let mut _4: &str;                    // in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:17: 12:22
    let _5: &str;                        // in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:17: 12:22
    let mut _6: &str;                    // in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
    let _7: &str;                        // in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
    let mut _9: &&std::marker::PhantomData<fn(OT) -> OT>; // in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
    let _10: &&std::marker::PhantomData<fn(OT) -> OT>; // in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
    let _11: &std::marker::PhantomData<fn(OT) -> OT>; // in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:17: 12:22
        _5 = const "Conster";            // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:17: 12:22
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:17: 12:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:17: 12:22
        _7 = const "_offset_type";       // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
        _11 = &((*_1).0: std::marker::PhantomData<fn(OT) -> OT>); // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
        _10 = &_11;                      // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
        _9 = _10;                        // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:18:5: 18:44
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:17: 12:22
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:17: 12:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:12:22: 12:22
    }
}

<impl at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:21:1: 21:21>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:24:10: 24:19

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:24:10: 24:19
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:24:10: 24:19
    }
}

fn <impl at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:21:1: 21:21>::new() -> Conster<OT> {
    let mut _0: Conster<OT>;             // return place in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:26:21: 26:25

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:28:6: 28:6
    }
}

fn make_conster() -> Conster<COT> {
    let mut _0: Conster<COT>;            // return place in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:31:31: 31:43

    bb0: {
        _0 = Conster::<COT>::new() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:36:5: 36:19
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:36:5: 36:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Conster<COT> {Conster::<COT>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:37:2: 37:2
    }
}

make_conster::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:34:10: 34:20

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:34:10: 34:20
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:34:10: 34:20
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:39:11: 39:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/single-satisfied-ConstEvaluatable-in-probe.rs:39:13: 39:13
    }
}
