// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_me(_1: usize, _2: usize) -> usize {
    debug a => _1;
    debug b => _2;
    let mut _0: usize;
    let mut _3: bool;

    bb0: {
        _3 = Lt(_1, _2);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = std::mem::size_of::<T>() -> [return: bb3, unwind continue];
    }

    bb2: {
        _0 = const _;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

// MIR FOR CTFE
fn test_me(_1: usize, _2: usize) -> usize {
    debug a => _1;
    debug b => _2;
    let mut _0: usize;
    let mut _3: bool;
    let mut _4: usize;
    let mut _5: usize;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = _1;
        StorageLive(_5);
        _5 = _2;
        _3 = Lt(move _4, move _5);
        StorageDead(_5);
        StorageDead(_4);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        ConstEvalCounter;
        _0 = std::mem::size_of::<T>() -> [return: bb3, unwind continue];
    }

    bb2: {
        _0 = const _;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_3);
        return;
    }
}

fn test_simple() -> [u8; std::mem::size_of::<T>()] {
    let mut _0: [u8; std::mem::size_of::<T>()];

    bb0: {
        _0 = [const 0_u8; std::mem::size_of::<T>()];
        return;
    }
}

test_simple::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::size_of::<T>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

test_simple::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::size_of::<T>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

test_simple::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::size_of::<T>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test_with_args() -> [u8; test_me::<T>(N, N + 1) + N] {
    let mut _0: [u8; test_me::<T>(N, N + 1) + N];

    bb0: {
        _0 = [const 0_u8; test_me::<T>(N, N + 1) + N];
        return;
    }
}

test_with_args::{constant#1}: usize = {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: usize;
    let mut _3: (usize, bool);
    let mut _4: (usize, bool);

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _3 = CheckedAdd(const N, const 1_usize);
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _2 = move (_3.0: usize);
        ConstEvalCounter;
        _1 = test_me::<T>(const N, move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_2);
        _4 = CheckedAdd(_1, const N);
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1, const N) -> [success: bb3, unwind continue];
    }

    bb3: {
        _0 = move (_4.0: usize);
        StorageDead(_1);
        return;
    }
}

test_with_args::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: usize;
    let mut _3: (usize, bool);
    let mut _4: (usize, bool);

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _3 = CheckedAdd(const N, const 1_usize);
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _2 = move (_3.0: usize);
        ConstEvalCounter;
        _1 = test_me::<T>(const N, move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_2);
        _4 = CheckedAdd(_1, const N);
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1, const N) -> [success: bb3, unwind continue];
    }

    bb3: {
        _0 = move (_4.0: usize);
        StorageDead(_1);
        return;
    }
}

test_with_args::{constant#2}: usize = {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: usize;
    let mut _3: (usize, bool);
    let mut _4: (usize, bool);

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _3 = CheckedAdd(const N, const 1_usize);
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _2 = move (_3.0: usize);
        ConstEvalCounter;
        _1 = test_me::<T>(const N, move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_2);
        _4 = CheckedAdd(_1, const N);
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1, const N) -> [success: bb3, unwind continue];
    }

    bb3: {
        _0 = move (_4.0: usize);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&[u8; 8], &[u8; std::mem::size_of::<T>()]);
    let mut _2: &[u8; std::mem::size_of::<T>()];
    let _3: [u8; std::mem::size_of::<T>()];
    let _4: &[u8; 8];
    let _5: &[u8; std::mem::size_of::<T>()];
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&[u8; 12], &[u8; test_me::<T>(N, N + 1) + N]);
    let mut _12: &[u8; test_me::<T>(N, N + 1) + N];
    let _13: [u8; test_me::<T>(N, N + 1) + N];
    let _14: &[u8; 12];
    let _15: &[u8; test_me::<T>(N, N + 1) + N];
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: &[u8; 12];
    let mut _22: &[u8; 8];
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _14;
        debug right_val => _15;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }

    bb0: {
        _22 = const _;
        _3 = test_simple::<u64>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _1 = (_22, move _2);
        _4 = (_1.0: &[u8; 8]);
        _5 = (_1.1: &[u8; std::mem::size_of::<T>()]);
        _7 = <[u8; 8] as PartialEq<[u8; std::mem::size_of::<T>()]>>::eq(_4, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<[u8; 8], [u8; std::mem::size_of::<T>()]>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb4: {
        _21 = const _;
        _13 = test_with_args::<u64, 4>() -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = &_13;
        _11 = (_21, move _12);
        _14 = (_11.0: &[u8; 12]);
        _15 = (_11.1: &[u8; test_me::<T>(N, N + 1) + N]);
        _17 = <[u8; 12] as PartialEq<[u8; test_me::<T>(N, N + 1) + N]>>::eq(_14, _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<[u8; 12], [u8; test_me::<T>(N, N + 1) + N]>(move _18, _14, _15, move _20) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &[u8; 12] = {
    let mut _0: &[u8; 12];
    let mut _1: [u8; 12];

    bb0: {
        _1 = [const 0_u8; 12];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[u8; 8] = {
    let mut _0: &[u8; 8];
    let mut _1: [u8; 8];

    bb0: {
        _1 = [const 0_u8; 8];
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 12_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}
