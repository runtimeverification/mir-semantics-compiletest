// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::test::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:6:28: 6:33
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:6:28: 6:33

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:6:28: 6:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:6:28: 6:33
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:6:28: 6:33
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:6:28: 6:33
    }
}

<impl at ui/const-generics/generic_const_exprs/object-safety-ok.rs:9:1: 9:35>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:9:26: 9:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:9:26: 9:27
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:9:26: 9:27
    }
}

fn <impl at ui/const-generics/generic_const_exprs/object-safety-ok.rs:9:1: 9:35>::test(_1: &()) -> [u8; N + 1] {
    debug self => _1;                    // in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:10:13: 10:18
    let mut _0: [u8; N + 1];             // return place in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:10:23: 10:34

    bb0: {
        _0 = [const 0_u8; N + 1];        // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:11:9: 11:19
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:12:6: 12:6
    }
}

<impl at ui/const-generics/generic_const_exprs/object-safety-ok.rs:9:1: 9:35>::test::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:10:28: 10:33
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:10:28: 10:33

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:10:28: 10:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:10:28: 10:33
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:10:28: 10:33
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:10:28: 10:33
    }
}

<impl at ui/const-generics/generic_const_exprs/object-safety-ok.rs:9:1: 9:35>::test::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:11:13: 11:18
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:11:13: 11:18

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:11:13: 11:18
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:11:13: 11:18
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:11:13: 11:18
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:11:13: 11:18
    }
}

fn use_dyn(_1: &dyn Foo<N>) -> () {
    debug v => _1;                       // in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:15:28: 15:29
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:15:44: 15:44
    let mut _2: (&[u8; N + 1], &[u8; N + 1]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &[u8; N + 1];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: [u8; N + 1];                 // in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:16:16: 16:24
    let mut _5: &dyn Foo<N>;             // in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:16:16: 16:24
    let mut _6: &[u8; N + 1];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: &[u8; N + 1];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _8: &[u8; N + 1];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: &[u8; N + 1];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: &[u8; N + 1];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &[u8; N + 1];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &[u8; N + 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &[u8; N + 1];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &[u8; N + 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: &[u8; N + 1];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:16:16: 16:24
        _4 = <dyn Foo<N> as Foo<N>>::test(move _5) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:16:16: 16:24
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/object-safety-ok.rs:16:18: 16:22
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Foo<N>) -> [u8; N + 1] {<dyn Foo<N> as Foo<N>>::test}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[u8; N + 1], val: Unevaluated(use_dyn, [Const { ty: usize, kind: Param(N/#0) }], Some(promoted[0])) }
        _6 = _21;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_2.0: &[u8; N + 1]);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_2.1: &[u8; N + 1]);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = _8;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = <[u8; N + 1] as PartialEq<[u8; N + 1]>>::eq(move _11, move _12) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u8; N + 1], &'b [u8; N + 1]) -> bool {<[u8; N + 1] as PartialEq<[u8; N + 1]>>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = Not(move _10);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _13 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<[u8; N + 1], [u8; N + 1]>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [u8; N + 1], &'b [u8; N + 1], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[u8; N + 1], [u8; N + 1]>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:17:2: 17:2
    }
}

promoted[0] in use_dyn: &[u8; N + 1] = {
    let mut _0: &[u8; N + 1];            // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [u8; N + 1];             // in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:16:26: 16:36

    bb0: {
        _1 = [const 0_u8; N + 1];        // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:16:26: 16:36
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

use_dyn::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:15:40: 15:41

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:15:40: 15:41
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:15:40: 15:41
    }
}

use_dyn::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:15:55: 15:60
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:15:55: 15:60

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:15:55: 15:60
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:15:55: 15:60
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:15:55: 15:60
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:15:55: 15:60
    }
}

use_dyn::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:16:30: 16:35
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:16:30: 16:35

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:16:30: 16:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:16:30: 16:35
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:16:30: 16:35
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:16:30: 16:35
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:19:11: 19:11
    let _1: ();                          // in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:5: 20:22
    let mut _2: &dyn Foo<3>;             // in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:18: 20:21
    let mut _3: &();                     // in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:18: 20:21
    let _4: &();                         // in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:18: 20:21
    let mut _5: &();                     // in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:18: 20:21

    bb0: {
        _5 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:18: 20:21
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:18: 20:21
                                         // + literal: Const { ty: &(), val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _5;                         // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:18: 20:21
        _3 = _4;                         // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:18: 20:21
        _2 = move _3 as &dyn Foo<3> (Pointer(Unsize)); // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:18: 20:21
        _1 = use_dyn::<3>(move _2) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:5: 20:22
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:5: 20:17
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Foo<3> + 'a)) {use_dyn::<3>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:21:2: 21:2
    }
}

promoted[0] in main: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:18: 20:21
    let mut _1: ();                      // in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:19: 20:21

    bb0: {
        _1 = ();                         // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:19: 20:21
        _0 = &_1;                        // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:18: 20:21
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:18: 20:21
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:15: 20:16

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:15: 20:16
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/object-safety-ok.rs:20:15: 20:16
    }
}
