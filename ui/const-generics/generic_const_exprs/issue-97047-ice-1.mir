// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Changes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:9:10: 9:23
    let mut _1: &[&str];                 // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:9:10: 9:23
    let _2: &[&str];                     // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:9:10: 9:17

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:9:10: 9:23
        StorageLive(_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:9:10: 9:17
        _2 = const CHANGES;              // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:9:10: 9:17
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:9:10: 9:17
                                         // + literal: Const { ty: &[&str], val: Param(CHANGES) }
        _1 = &(*_2);                     // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:9:10: 9:23
        ConstEvalCounter;                // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:9:10: 9:23
        _0 = core::slice::<impl [&str]>::len(move _1) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:9:10: 9:23
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:9:18: 9:21
                                         // + literal: Const { ty: for<'a> fn(&'a [&str]) -> usize {core::slice::<impl [&str]>::len}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:9:22: 9:23
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:9:22: 9:23
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:9:10: 9:23
    }
}

Changes::changes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:11:22: 11:35
    let mut _1: &[&str];                 // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:11:22: 11:35
    let _2: &[&str];                     // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:11:22: 11:29

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:11:22: 11:35
        StorageLive(_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:11:22: 11:29
        _2 = const CHANGES;              // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:11:22: 11:29
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:11:22: 11:29
                                         // + literal: Const { ty: &[&str], val: Param(CHANGES) }
        _1 = &(*_2);                     // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:11:22: 11:35
        ConstEvalCounter;                // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:11:22: 11:35
        _0 = core::slice::<impl [&str]>::len(move _1) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:11:22: 11:35
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:11:30: 11:33
                                         // + literal: Const { ty: for<'a> fn(&'a [&str]) -> usize {core::slice::<impl [&str]>::len}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:11:34: 11:35
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:11:34: 11:35
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:11:22: 11:35
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:14:1: 14:62>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:16:10: 16:23
    let mut _1: &[&str];                 // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:16:10: 16:23
    let _2: &[&str];                     // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:16:10: 16:17

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:16:10: 16:23
        StorageLive(_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:16:10: 16:17
        _2 = const CHANGES;              // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:16:10: 16:17
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:16:10: 16:17
                                         // + literal: Const { ty: &[&str], val: Param(CHANGES) }
        _1 = &(*_2);                     // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:16:10: 16:23
        ConstEvalCounter;                // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:16:10: 16:23
        _0 = core::slice::<impl [&str]>::len(move _1) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:16:10: 16:23
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:16:18: 16:21
                                         // + literal: Const { ty: for<'a> fn(&'a [&str]) -> usize {core::slice::<impl [&str]>::len}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:16:22: 16:23
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:16:22: 16:23
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:16:10: 16:23
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:14:1: 14:62>::{constant#1}: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:14:54: 14:61

    bb0: {
        _0 = const CHANGES;              // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:14:54: 14:61
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:14:54: 14:61
                                         // + literal: Const { ty: &[&str], val: Param(CHANGES) }
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:14:54: 14:61
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:14:1: 14:62>::new() -> Changes<CHANGES> {
    let mut _0: Changes<CHANGES>;        // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:18:27: 18:31
    let mut _1: [usize; CHANGES.len()];  // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:22: 20:40

    bb0: {
        _1 = [const 0_usize; CHANGES.len()]; // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:22: 20:40
        _0 = Changes::<CHANGES> { changes: move _1 }; // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:19:9: 21:10
                                         // adt
                                         // + user_ty: UserType(0)
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:22:6: 22:6
    }
}

// MIR FOR CTFE
fn <impl at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:14:1: 14:62>::new() -> Changes<CHANGES> {
    let mut _0: Changes<CHANGES>;        // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:18:27: 18:31
    let mut _1: [usize; CHANGES.len()];  // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:22: 20:40

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:22: 20:40
        _1 = [const 0_usize; CHANGES.len()]; // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:22: 20:40
        _0 = Changes::<CHANGES> { changes: move _1 }; // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:19:9: 21:10
                                         // adt
                                         // + user_ty: UserType(0)
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:21:9: 21:10
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:22:6: 22:6
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:14:1: 14:62>::new::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:26: 20:39
    let mut _1: &[&str];                 // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:26: 20:39
    let _2: &[&str];                     // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:26: 20:33

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:26: 20:39
        StorageLive(_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:26: 20:33
        _2 = const CHANGES;              // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:26: 20:33
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:26: 20:33
                                         // + literal: Const { ty: &[&str], val: Param(CHANGES) }
        _1 = &(*_2);                     // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:26: 20:39
        ConstEvalCounter;                // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:26: 20:39
        _0 = core::slice::<impl [&str]>::len(move _1) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:26: 20:39
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:34: 20:37
                                         // + literal: Const { ty: for<'a> fn(&'a [&str]) -> usize {core::slice::<impl [&str]>::len}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:38: 20:39
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:38: 20:39
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:20:26: 20:39
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:25:15: 25:15

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-1.rs:25:17: 25:17
    }
}
