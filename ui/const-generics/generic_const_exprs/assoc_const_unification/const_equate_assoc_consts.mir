// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:8:1: 8:20>::ASSOC: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:9:18: 9:23

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:9:26: 9:50
        _0 = std::mem::size_of::<T>() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:9:26: 9:50
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:9:26: 9:48
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:9:5: 9:51
    }
}

Foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:14:10: 14:18

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:14:10: 14:18
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:14:10: 14:18
    }
}

Foo::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:12:27: 12:35

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:12:27: 12:35
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:12:27: 12:35
    }
}

fn bar() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:17:1: 17:1
    let mut _1: !;                       // in scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:20:30: 20:36
    scope 1 {
    }

    bb0: {
        _1 = make();                     // scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:20:30: 20:36
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:20:30: 20:34
                                         // + literal: Const { ty: fn() -> ! {make}, val: Value(<ZST>) }
    }
}

bar::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:18:10: 18:18

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:18:10: 18:18
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:18:10: 18:18
    }
}

fn make() -> ! {
    let mut _0: !;                       // return place in scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:23:14: 23:15
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _1 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:27:11: 27:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:27:13: 27:13
    }
}

fn Foo(_1: [u8; T::ASSOC]) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:12:1: 12:21

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:12:1: 12:21
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:12:1: 12:21
    }
}

// MIR FOR CTFE
fn Foo(_1: [u8; T::ASSOC]) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:12:1: 12:21

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:12:1: 12:21
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/assoc_const_unification/const_equate_assoc_consts.rs:12:1: 12:21
    }
}
