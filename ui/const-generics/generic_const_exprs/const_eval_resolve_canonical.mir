// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:10:1: 10:19>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:10:10: 10:11

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:10:10: 10:11
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:10:10: 10:11
    }
}

<impl at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:14:1: 14:19>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:14:10: 14:11

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:14:10: 14:11
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:14:10: 14:11
    }
}

fn foo(_1: T) -> <() as Foo<{ N + 1 }>>::Assoc {
    let mut _0: <() as Foo<{ N + 1 }>>::Assoc; // return place in scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:18:36: 18:65

    bb0: {
        _0 = <<() as Foo<{ N + 1 }>>::Assoc as Default>::default() -> [return: bb1, unwind: bb3]; // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:22:5: 22:23
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:22:5: 22:21
                                         // + literal: Const { ty: fn() -> <() as Foo<{ N + 1 }>>::Assoc {<<() as Foo<{ N + 1 }>>::Assoc as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:23:1: 23:2
    }

    bb2: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:23:2: 23:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:23:1: 23:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:18:1: 23:2
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:18:47: 18:56
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:18:49: 18:54

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:18:49: 18:54
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:18:49: 18:54
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:18:49: 18:54
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:18:47: 18:56
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:20:13: 20:22
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:20:15: 20:20

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:20:15: 20:20
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:20:15: 20:20
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:20:15: 20:20
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:20:13: 20:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:25:11: 25:11
    let mut _1: i64;                     // in scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:26:9: 26:15
    let mut _2: i64;                     // in scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:27:10: 27:25
    let mut _3: i64;                     // in scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:27:22: 27:24
    scope 1 {
        debug _q => _1;                  // in scope 1 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:26:9: 26:15
    }

    bb0: {
        _1 = <i64 as Default>::default() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:26:18: 26:36
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:26:18: 26:34
                                         // + literal: Const { ty: fn() -> i64 {<i64 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _1;                         // scope 1 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:27:22: 27:24
        _2 = foo::<i64, 2>(move _3) -> bb2; // scope 1 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:27:10: 27:25
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:27:10: 27:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i64) -> <() as Foo<{ N + 1 }>>::Assoc {foo::<i64, 2>}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = move _2;                    // scope 1 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:27:5: 27:25
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:28:2: 28:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:27:19: 27:20

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:27:19: 27:20
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs:27:19: 27:20
    }
}
