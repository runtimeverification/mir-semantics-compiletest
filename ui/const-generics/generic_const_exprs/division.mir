// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn with_bound() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/division.rs:5:33: 5:33
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/division.rs:7:2: 7:2
    }
}

with_bound::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/division.rs:5:44: 5:49
    let mut _1: bool;                    // in scope 0 at ui/const-generics/generic_const_exprs/division.rs:5:44: 5:49

    bb0: {
        _1 = Eq(const 2_usize, const 0_usize); // scope 0 at ui/const-generics/generic_const_exprs/division.rs:5:44: 5:49
        assert(!move _1, "attempt to divide `{}` by zero", const N) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/division.rs:5:44: 5:49
    }

    bb1: {
        _0 = Div(const N, const 2_usize); // scope 0 at ui/const-generics/generic_const_exprs/division.rs:5:44: 5:49
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/division.rs:5:44: 5:49
    }
}

with_bound::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/division.rs:6:30: 6:35
    let mut _1: bool;                    // in scope 0 at ui/const-generics/generic_const_exprs/division.rs:6:30: 6:35

    bb0: {
        _1 = Eq(const 2_usize, const 0_usize); // scope 0 at ui/const-generics/generic_const_exprs/division.rs:6:30: 6:35
        assert(!move _1, "attempt to divide `{}` by zero", const N) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/division.rs:6:30: 6:35
    }

    bb1: {
        _0 = Div(const N, const 2_usize); // scope 0 at ui/const-generics/generic_const_exprs/division.rs:6:30: 6:35
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/division.rs:6:30: 6:35
    }
}

with_bound::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/division.rs:6:17: 6:22
    let mut _1: bool;                    // in scope 0 at ui/const-generics/generic_const_exprs/division.rs:6:17: 6:22

    bb0: {
        _1 = Eq(const 2_usize, const 0_usize); // scope 0 at ui/const-generics/generic_const_exprs/division.rs:6:17: 6:22
        assert(!move _1, "attempt to divide `{}` by zero", const N) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/division.rs:6:17: 6:22
    }

    bb1: {
        _0 = Div(const N, const 2_usize); // scope 0 at ui/const-generics/generic_const_exprs/division.rs:6:17: 6:22
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/division.rs:6:17: 6:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/division.rs:9:11: 9:11
    let _1: ();                          // in scope 0 at ui/const-generics/generic_const_exprs/division.rs:10:5: 10:22

    bb0: {
        _1 = with_bound::<4>() -> bb1;   // scope 0 at ui/const-generics/generic_const_exprs/division.rs:10:5: 10:22
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/division.rs:10:5: 10:20
                                         // + literal: Const { ty: fn() {with_bound::<4>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/division.rs:11:2: 11:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/division.rs:10:18: 10:19

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/const-generics/generic_const_exprs/division.rs:10:18: 10:19
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/division.rs:10:18: 10:19
    }
}
