// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test() -> Foo<{ N > 10 }> {
    let mut _0: Foo<{ N > 10 }>;         // return place in scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:7:30: 7:45

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:9:2: 9:2
    }
}

test::{constant#0}: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:7:34: 7:44

    bb0: {
        _0 = Gt(const N, const 10_usize); // scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:7:36: 7:42
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:7:34: 7:44
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:11:11: 11:11
    let mut _1: Foo<{ N > 10 }>;         // in scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:12:24: 12:36
    let mut _2: Foo<{ N > 10 }>;         // in scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:13:25: 13:36
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _1 = test::<12>() -> bb1;        // scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:12:24: 12:36
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/from-sig.rs:12:24: 12:34
                                         // + literal: Const { ty: fn() -> Foo<{ N > 10 }> {test::<12>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = test::<9>() -> bb2;         // scope 1 at ui/const-generics/generic_const_exprs/from-sig.rs:13:25: 13:36
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/from-sig.rs:13:25: 13:34
                                         // + literal: Const { ty: fn() -> Foo<{ N > 10 }> {test::<9>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:14:2: 14:2
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:12:31: 12:33

    bb0: {
        _0 = const 12_usize;             // scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:12:31: 12:33
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:12:31: 12:33
    }
}

main::{constant#0}: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:12:16: 12:20

    bb0: {
        _0 = const true;                 // scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:12:16: 12:20
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:12:16: 12:20
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:13:32: 13:33

    bb0: {
        _0 = const 9_usize;              // scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:13:32: 13:33
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:13:32: 13:33
    }
}

main::{constant#2}: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:13:16: 13:21

    bb0: {
        _0 = const false;                // scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:13:16: 13:21
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/from-sig.rs:13:16: 13:21
    }
}
