// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/normed_to_param_is_evaluatable.rs:6:26: 6:26
    let _1: ();                          // in scope 0 at ui/const-generics/generic_const_exprs/normed_to_param_is_evaluatable.rs:7:5: 7:29

    bb0: {
        _1 = bar::<{{{{{{ N }}}}}}>() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/normed_to_param_is_evaluatable.rs:7:5: 7:29
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/normed_to_param_is_evaluatable.rs:7:5: 7:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {bar::<{{{{{{ N }}}}}}>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/normed_to_param_is_evaluatable.rs:8:2: 8:2
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/normed_to_param_is_evaluatable.rs:7:11: 7:26

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/normed_to_param_is_evaluatable.rs:7:18: 7:19
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/normed_to_param_is_evaluatable.rs:7:11: 7:26
    }
}

fn bar() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/normed_to_param_is_evaluatable.rs:10:26: 10:26

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/normed_to_param_is_evaluatable.rs:10:28: 10:28
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/normed_to_param_is_evaluatable.rs:12:11: 12:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/normed_to_param_is_evaluatable.rs:12:13: 12:13
    }
}
