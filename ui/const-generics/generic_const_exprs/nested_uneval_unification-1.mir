// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn zero_init() -> Substs1<N> {
    let mut _0: Substs1<N>;              // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:5:35: 5:45
    let mut _1: [u8; N + 1];             // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:9:13: 9:23

    bb0: {
        _1 = [const 0_u8; N + 1];        // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:9:13: 9:23
        _0 = Substs1::<N>(move _1);      // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:9:5: 9:24
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:10:2: 10:2
    }
}

zero_init::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:5:43: 5:44

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:5:43: 5:44
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:5:43: 5:44
    }
}

zero_init::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:7:10: 7:15
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:7:10: 7:15

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:7:10: 7:15
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:7:10: 7:15
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:7:10: 7:15
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:7:10: 7:15
    }
}

zero_init::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:9:17: 9:22
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:9:17: 9:22

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:9:17: 9:22
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:9:17: 9:22
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:9:17: 9:22
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:9:17: 9:22
    }
}

Substs1::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:13:10: 13:15
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:13:10: 13:15

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:13:10: 13:15
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:13:10: 13:15
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:13:10: 13:15
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:13:10: 13:15
    }
}

Substs1::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:11:37: 11:42
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:11:37: 11:42

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:11:37: 11:42
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:11:37: 11:42
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:11:37: 11:42
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:11:37: 11:42
    }
}

fn substs2() -> Substs1<{ M * 2 }> {
    let mut _0: Substs1<{ M * 2 }>;      // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:15:33: 15:51

    bb0: {
        _0 = zero_init::<{ M * 2 }>() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:19:5: 19:29
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:19:5: 19:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Substs1<{ M * 2 }> {zero_init::<{ M * 2 }>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:20:2: 20:2
    }
}

substs2::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:15:41: 15:50
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:15:43: 15:48

    bb0: {
        _1 = CheckedMul(const M, const 2_usize); // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:15:43: 15:48
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const M, const 2_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:15:43: 15:48
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:15:43: 15:48
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:15:41: 15:50
    }
}

substs2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:17:10: 17:23
    let mut _1: usize;                   // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:17:10: 17:19
    let mut _2: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:17:12: 17:17
    let mut _3: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:17:10: 17:23

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:17:10: 17:19
        _2 = CheckedMul(const M, const 2_usize); // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:17:12: 17:17
        assert(!move (_2.1: bool), "attempt to compute `{} * {}`, which would overflow", const M, const 2_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:17:12: 17:17
    }

    bb1: {
        _1 = move (_2.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:17:12: 17:17
        _3 = CheckedAdd(_1, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:17:10: 17:23
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1, const 1_usize) -> bb2; // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:17:10: 17:23
    }

    bb2: {
        _0 = move (_3.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:17:10: 17:23
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:17:22: 17:23
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:17:10: 17:23
    }
}

substs2::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:19:17: 19:26
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:19:19: 19:24

    bb0: {
        _1 = CheckedMul(const M, const 2_usize); // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:19:19: 19:24
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const M, const 2_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:19:19: 19:24
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:19:19: 19:24
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:19:17: 19:26
    }
}

fn substs3() -> Substs1<{ (L - 1) * 2 }> {
    let mut _0: Substs1<{ (L - 1) * 2 }>; // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:22:33: 22:57

    bb0: {
        _0 = substs2::<{ L - 1 }>() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:26:5: 26:27
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:26:5: 26:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Substs1<{ M * 2 }> {substs2::<{ L - 1 }>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:27:2: 27:2
    }
}

substs3::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:22:41: 22:56
    let mut _1: usize;                   // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:22:43: 22:50
    let mut _2: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:22:43: 22:50
    let mut _3: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:22:43: 22:54

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:22:43: 22:50
        _2 = CheckedSub(const L, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:22:43: 22:50
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", const L, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:22:43: 22:50
    }

    bb1: {
        _1 = move (_2.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:22:43: 22:50
        _3 = CheckedMul(_1, const 2_usize); // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:22:43: 22:54
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 2_usize) -> bb2; // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:22:43: 22:54
    }

    bb2: {
        _0 = move (_3.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:22:43: 22:54
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:22:53: 22:54
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:22:41: 22:56
    }
}

substs3::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:25
    let mut _1: usize;                   // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:21
    let mut _2: usize;                   // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:17
    let mut _3: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:17
    let mut _4: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:21
    let mut _5: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:25

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:21
        StorageLive(_2);                 // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:17
        _3 = CheckedSub(const L, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:17
        assert(!move (_3.1: bool), "attempt to compute `{} - {}`, which would overflow", const L, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:17
    }

    bb1: {
        _2 = move (_3.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:17
        _4 = CheckedMul(_2, const 2_usize); // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:21
        assert(!move (_4.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const 2_usize) -> bb2; // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:21
    }

    bb2: {
        _1 = move (_4.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:21
        StorageDead(_2);                 // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:20: 24:21
        _5 = CheckedAdd(_1, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:25
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1, const 1_usize) -> bb3; // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:25
    }

    bb3: {
        _0 = move (_5.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:25
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:24: 24:25
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:24:10: 24:25
    }
}

substs3::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:26:15: 26:24
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:26:17: 26:22

    bb0: {
        _1 = CheckedSub(const L, const 1_usize); // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:26:17: 26:22
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const L, const 1_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:26:17: 26:22
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:26:17: 26:22
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:26:15: 26:24
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:29:11: 29:11
    let mut _1: (&[u8; N + 1], &[u8; 3]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &[u8; N + 1];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: Substs1<{ (L - 1) * 2 }>;    // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:30:16: 30:30
    let mut _4: &[u8; 3];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &[u8; N + 1];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &[u8; 3];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &[u8; N + 1];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &[u8; 3];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &[u8; N + 1];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &[u8; N + 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &[u8; 3];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &[u8; 3];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: &[u8; 3];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = substs3::<2>() -> bb1;      // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:30:16: 30:30
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:30:16: 30:28
                                         // + literal: Const { ty: fn() -> Substs1<{ (L - 1) * 2 }> {substs3::<2>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &(_3.0: [u8; N + 1]);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[u8; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _19;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &[u8; N + 1]);       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &[u8; 3]);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <[u8; N + 1] as PartialEq<[u8; 3]>>::eq(move _9, move _10) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u8; N + 1], &'b [u8; 3]) -> bool {<[u8; N + 1] as PartialEq<[u8; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<[u8; N + 1], [u8; 3]>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [u8; N + 1], &'b [u8; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[u8; N + 1], [u8; 3]>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:31:2: 31:2
    }
}

promoted[0] in main: &[u8; 3] = {
    let mut _0: &[u8; 3];                // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [u8; 3];                 // in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:30:34: 30:40

    bb0: {
        _1 = [const 0_u8; 3];            // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:30:34: 30:40
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:30:26: 30:27

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:30:26: 30:27
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:30:26: 30:27
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:30:38: 30:39

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:30:38: 30:39
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:30:38: 30:39
    }
}

fn Substs1(_1: [u8; N + 1]) -> Substs1<N> {
    let mut _0: Substs1<N>;              // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:11:1: 11:31

    bb0: {
        _0 = Substs1::<N>(move _1);      // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:11:1: 11:31
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:11:1: 11:31
    }
}

// MIR FOR CTFE
fn Substs1(_1: [u8; N + 1]) -> Substs1<N> {
    let mut _0: Substs1<N>;              // return place in scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:11:1: 11:31

    bb0: {
        _0 = Substs1::<N>(move _1);      // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:11:1: 11:31
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/nested_uneval_unification-1.rs:11:1: 11:31
    }
}
