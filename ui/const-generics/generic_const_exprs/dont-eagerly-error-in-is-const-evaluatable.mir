// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/dont-eagerly-error-in-is-const-evaluatable.rs:12:18: 12:18

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/dont-eagerly-error-in-is-const-evaluatable.rs:12:20: 12:20
    }
}

<impl at ui/const-generics/generic_const_exprs/dont-eagerly-error-in-is-const-evaluatable.rs:14:1: 14:18>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/dont-eagerly-error-in-is-const-evaluatable.rs:14:30: 14:54

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/const-generics/generic_const_exprs/dont-eagerly-error-in-is-const-evaluatable.rs:14:30: 14:54
        _0 = std::mem::size_of::<T>() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/dont-eagerly-error-in-is-const-evaluatable.rs:14:30: 14:54
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/dont-eagerly-error-in-is-const-evaluatable.rs:14:30: 14:52
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/dont-eagerly-error-in-is-const-evaluatable.rs:14:30: 14:54
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/dont-eagerly-error-in-is-const-evaluatable.rs:16:11: 16:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/dont-eagerly-error-in-is-const-evaluatable.rs:16:13: 16:13
    }
}
