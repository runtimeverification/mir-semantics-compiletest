// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/generic_const_exprs/issue-84669.rs:12:1: 12:21>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:12:19: 12:20

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:12:19: 12:20
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:12:19: 12:20
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-84669.rs:12:1: 12:21>::Output::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:13:24: 13:29
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:13:24: 13:29

    bb0: {
        _1 = CheckedAdd(const 1_usize, const 2_usize); // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:13:24: 13:29
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, const 2_usize) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:13:24: 13:29
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:13:24: 13:29
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:13:24: 13:29
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-84669.rs:12:1: 12:21>::foo() -> [u8; 3] {
    let mut _0: [u8; 3];                 // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:15:17: 15:24

    bb0: {
        _0 = [const 1_u8; 3];            // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:16:9: 16:17
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:17:6: 17:6
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-84669.rs:12:1: 12:21>::foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:15:22: 15:23

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:15:22: 15:23
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:15:22: 15:23
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-84669.rs:12:1: 12:21>::foo::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:16:15: 16:16

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:16:15: 16:16
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:16:15: 16:16
    }
}

fn bug() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:21:1: 21:1
    let _1: &[u8];                       // in scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:25:5: 25:30
    let mut _2: &<[u8; N] as Foo>::Output; // in scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:25:5: 25:30
    let _3: <[u8; N] as Foo>::Output;    // in scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:25:5: 25:21

    bb0: {
        _3 = <[u8; N] as Foo>::foo() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:25:5: 25:21
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-84669.rs:25:5: 25:19
                                         // + literal: Const { ty: fn() -> <[u8; N] as Foo>::Output {<[u8; N] as Foo>::foo}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:25:5: 25:30
        _1 = <<[u8; N] as Foo>::Output as AsRef<[u8]>>::as_ref(move _2) -> [return: bb2, unwind: bb4]; // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:25:5: 25:30
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-84669.rs:25:22: 25:28
                                         // + literal: Const { ty: for<'a> fn(&'a <[u8; N] as Foo>::Output) -> &'a [u8] {<<[u8; N] as Foo>::Output as AsRef<[u8]>>::as_ref}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_3) -> bb3;                 // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:25:30: 25:31
    }

    bb3: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:26:2: 26:2
    }

    bb4 (cleanup): {
        drop(_3) -> bb5;                 // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:25:30: 25:31
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:20:1: 26:2
    }
}

bug::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:22:10: 22:11

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:22:10: 22:11
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:22:10: 22:11
    }
}

bug::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:23:11: 23:12

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:23:11: 23:12
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:23:11: 23:12
    }
}

bug::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:25:11: 25:12

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:25:11: 25:12
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:25:11: 25:12
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:28:11: 28:11
    let _1: ();                          // in scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:29:5: 29:15

    bb0: {
        _1 = bug::<3>() -> bb1;          // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:29:5: 29:15
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-84669.rs:29:5: 29:13
                                         // + literal: Const { ty: fn() {bug::<3>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:30:2: 30:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:29:11: 29:12

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:29:11: 29:12
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-84669.rs:29:11: 29:12
    }
}
