// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Changes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:9:10: 9:23
    let mut _1: &[&str];                 // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:9:10: 9:23
    let _2: &[&str];                     // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:9:10: 9:17

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:9:10: 9:23
        StorageLive(_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:9:10: 9:17
        _2 = const CHANGES;              // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:9:10: 9:17
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:9:10: 9:17
                                         // + literal: Const { ty: &[&str], val: Param(CHANGES) }
        _1 = &(*_2);                     // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:9:10: 9:23
        ConstEvalCounter;                // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:9:10: 9:23
        _0 = core::slice::<impl [&str]>::len(move _1) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:9:10: 9:23
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:9:18: 9:21
                                         // + literal: Const { ty: for<'a> fn(&'a [&str]) -> usize {core::slice::<impl [&str]>::len}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:9:22: 9:23
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:9:22: 9:23
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:9:10: 9:23
    }
}

Changes::changes::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:11:22: 11:35
    let mut _1: &[&str];                 // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:11:22: 11:35
    let _2: &[&str];                     // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:11:22: 11:29

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:11:22: 11:35
        StorageLive(_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:11:22: 11:29
        _2 = const CHANGES;              // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:11:22: 11:29
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:11:22: 11:29
                                         // + literal: Const { ty: &[&str], val: Param(CHANGES) }
        _1 = &(*_2);                     // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:11:22: 11:35
        ConstEvalCounter;                // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:11:22: 11:35
        _0 = core::slice::<impl [&str]>::len(move _1) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:11:22: 11:35
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:11:30: 11:33
                                         // + literal: Const { ty: for<'a> fn(&'a [&str]) -> usize {core::slice::<impl [&str]>::len}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:11:34: 11:35
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:11:34: 11:35
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:11:22: 11:35
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:14:1: 14:62>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:16:10: 16:23
    let mut _1: &[&str];                 // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:16:10: 16:23
    let _2: &[&str];                     // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:16:10: 16:17

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:16:10: 16:23
        StorageLive(_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:16:10: 16:17
        _2 = const CHANGES;              // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:16:10: 16:17
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:16:10: 16:17
                                         // + literal: Const { ty: &[&str], val: Param(CHANGES) }
        _1 = &(*_2);                     // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:16:10: 16:23
        ConstEvalCounter;                // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:16:10: 16:23
        _0 = core::slice::<impl [&str]>::len(move _1) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:16:10: 16:23
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:16:18: 16:21
                                         // + literal: Const { ty: for<'a> fn(&'a [&str]) -> usize {core::slice::<impl [&str]>::len}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:16:22: 16:23
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:16:22: 16:23
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:16:10: 16:23
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:14:1: 14:62>::{constant#1}: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:14:54: 14:61

    bb0: {
        _0 = const CHANGES;              // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:14:54: 14:61
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:14:54: 14:61
                                         // + literal: Const { ty: &[&str], val: Param(CHANGES) }
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:14:54: 14:61
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:14:1: 14:62>::combine(_1: &mut Changes<CHANGES>, _2: &Changes<CHANGES>) -> () {
    debug self => _1;                    // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:18:20: 18:29
    debug other => _2;                   // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:18:31: 18:36
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:18:45: 18:45
    let mut _3: std::slice::Iter<'_, usize>; // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
    let mut _4: &[usize; CHANGES.len()]; // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
    let mut _5: std::slice::Iter<'_, usize>; // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
    let mut _6: std::option::Option<&usize>; // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
    let mut _7: &mut std::slice::Iter<'_, usize>; // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
    let mut _8: &mut std::slice::Iter<'_, usize>; // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
    let mut _9: isize;                   // in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:9: 19:40
    scope 1 {
        debug iter => _5;                // in scope 1 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
        let _10: &usize;                 // in scope 1 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:13: 19:20
        scope 2 {
            debug _change => _10;        // in scope 2 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:13: 19:20
        }
    }

    bb0: {
        _4 = &((*_1).0: [usize; CHANGES.len()]); // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
        _3 = <&[usize; CHANGES.len()] as IntoIterator>::into_iter(move _4) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
                                         // + literal: Const { ty: fn(&[usize; CHANGES.len()]) -> <&[usize; CHANGES.len()] as IntoIterator>::IntoIter {<&[usize; CHANGES.len()] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _3;                    // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
        goto -> bb2;                     // scope 1 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:9: 19:40
    }

    bb2: {
        _8 = &mut _5;                    // scope 1 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
        _7 = &mut (*_8);                 // scope 1 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
        _6 = <std::slice::Iter<'_, usize> as Iterator>::next(move _7) -> bb3; // scope 1 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, usize>) -> Option<<std::slice::Iter<'_, usize> as Iterator>::Item> {<std::slice::Iter<'_, usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = discriminant(_6);           // scope 1 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
        switchInt(move _9) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
    }

    bb4: {
        _10 = ((_6 as Some).0: &usize);  // scope 1 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:13: 19:20
        goto -> bb2;                     // scope 1 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:9: 19:40
    }

    bb5: {
        unreachable;                     // scope 1 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:19:24: 19:37
    }

    bb6: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:20:6: 20:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:23:15: 23:15

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-97047-ice-2.rs:23:17: 23:17
    }
}
