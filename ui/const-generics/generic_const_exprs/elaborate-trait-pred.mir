// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::size_of::<Self>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn foo() -> [u8; size_of::<T>()] {
    let mut _0: [u8; size_of::<T>()];

    bb0: {
        _0 = [const 0_u8; size_of::<T>()];
        return;
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::size_of::<T>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        ConstEvalCounter;
        _0 = std::mem::size_of::<T>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&[u8; size_of::<T>()], &[u8; 4]);
    let mut _2: &[u8; size_of::<T>()];
    let _3: [u8; size_of::<T>()];
    let _4: &[u8; size_of::<T>()];
    let _5: &[u8; 4];
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&[u8; size_of::<T>()], &[u8; 8]);
    let mut _12: &[u8; size_of::<T>()];
    let _13: [u8; size_of::<T>()];
    let _14: &[u8; size_of::<T>()];
    let _15: &[u8; 8];
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: &[u8; 8];
    let mut _22: &[u8; 4];
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _14;
        debug right_val => _15;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }

    bb0: {
        _3 = foo::<u32>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _22 = const _;
        _1 = (move _2, _22);
        _4 = (_1.0: &[u8; size_of::<T>()]);
        _5 = (_1.1: &[u8; 4]);
        _7 = <[u8; size_of::<T>()] as PartialEq<[u8; 4]>>::eq(_4, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<[u8; size_of::<T>()], [u8; 4]>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb4: {
        _13 = foo::<u64>() -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = &_13;
        _21 = const _;
        _11 = (move _12, _21);
        _14 = (_11.0: &[u8; size_of::<T>()]);
        _15 = (_11.1: &[u8; 8]);
        _17 = <[u8; size_of::<T>()] as PartialEq<[u8; 8]>>::eq(_14, _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<[u8; size_of::<T>()], [u8; 8]>(move _18, _14, _15, move _20) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &[u8; 8] = {
    let mut _0: &[u8; 8];
    let mut _1: [u8; 8];

    bb0: {
        _1 = [const 0_u8; 8];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[u8; 4] = {
    let mut _0: &[u8; 4];
    let mut _1: [u8; 4];

    bb0: {
        _1 = [const 0_u8; 4];
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_usize;
        return;
    }
}
