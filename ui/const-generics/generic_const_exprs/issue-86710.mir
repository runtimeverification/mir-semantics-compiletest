// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:8:11: 8:11
    let _1: FooImpl<BarImpl<1>>;         // in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:9:9: 9:10
    let mut _2: ();                      // in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:10:13: 10:34
    let mut _3: &FooImpl<BarImpl<1>>;    // in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:10:13: 10:34
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/const-generics/generic_const_exprs/issue-86710.rs:9:9: 9:10
        scope 2 {
        }
    }

    bb0: {
        _3 = &_1;                        // scope 1 at ui/const-generics/generic_const_exprs/issue-86710.rs:10:13: 10:34
        _2 = <FooImpl<BarImpl<1>> as Foo<BarImpl<1>>>::foo::<BarImpl<1>>(move _3) -> bb1; // scope 1 at ui/const-generics/generic_const_exprs/issue-86710.rs:10:13: 10:34
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-86710.rs:10:15: 10:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a FooImpl<BarImpl<1>>) {<FooImpl<BarImpl<1>> as Foo<BarImpl<1>>>::foo::<BarImpl<1>>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:11:2: 11:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:9:31: 9:32

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:9:31: 9:32
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:9:31: 9:32
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:10:29: 10:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:10:29: 10:30
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:10:29: 10:30
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-86710.rs:30:1: 30:30>::foo(_1: &FooImpl<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:34:15: 34:20
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:35:5: 35:5
    let _2: ();                          // in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:39:9: 39:66

    bb0: {
        _2 = <<T as Operation<U>>::Output as Bar>::error_occurs_here() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:39:9: 39:66
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-86710.rs:39:9: 39:64
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {<<T as Operation<U>>::Output as Bar>::error_occurs_here}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:40:6: 40:6
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-86710.rs:49:1: 49:40>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:49:38: 49:39

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:49:38: 49:39
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:49:38: 49:39
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-86710.rs:49:1: 49:40>::error_occurs_here() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:50:28: 50:28

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:50:30: 50:30
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-86710.rs:58:1: 58:74>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:60:13: 60:22
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:60:15: 60:20

    bb0: {
        _1 = CheckedAdd(const N, const M); // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:60:15: 60:20
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const M) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:60:15: 60:20
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:60:15: 60:20
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:60:13: 60:22
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-86710.rs:58:1: 58:74>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:58:56: 58:57

    bb0: {
        _0 = const M;                    // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:58:56: 58:57
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:58:56: 58:57
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-86710.rs:58:1: 58:74>::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:58:72: 58:73

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:58:72: 58:73
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:58:72: 58:73
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-86710.rs:58:1: 58:74>::Output::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:62:27: 62:36
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:62:29: 62:34

    bb0: {
        _1 = CheckedAdd(const N, const M); // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:62:29: 62:34
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const M) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:62:29: 62:34
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:62:29: 62:34
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-86710.rs:62:27: 62:36
    }
}
