// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/const-generics/generic_const_exprs/associated-consts.rs:10:1: 10:31>::BLOCK_SIZE: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:11:23: 11:28

    bb0: {
        _0 = const 64_usize;             // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:11:31: 11:33
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:11:5: 11:34
    }
}

const <impl at ui/const-generics/generic_const_exprs/associated-consts.rs:15:1: 15:31>::BLOCK_SIZE: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:16:23: 16:28

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:16:31: 16:33
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:16:5: 16:34
    }
}

fn test() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:22:1: 22:1
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:26:2: 26:2
    }
}

test::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:23:10: 23:27
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:23:10: 23:27

    bb0: {
        _1 = CheckedSub(const M, const _); // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:23:10: 23:27
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const M, const _) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:23:10: 23:27
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:23:10: 23:27
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:23:10: 23:27
    }
}

test::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:25:17: 25:34
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:25:17: 25:34

    bb0: {
        _1 = CheckedSub(const M, const _); // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:25:17: 25:34
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const M, const _) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:25:17: 25:34
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:25:17: 25:34
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:25:17: 25:34
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:28:11: 28:11
    let _1: ();                          // in scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:29:5: 29:29
    let _2: ();                          // in scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:30:5: 30:28

    bb0: {
        _1 = test::<FooCipher, 128>() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:29:5: 29:29
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/associated-consts.rs:29:5: 29:27
                                         // + literal: Const { ty: fn() {test::<FooCipher, 128>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = test::<BarCipher, 64>() -> bb2; // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:30:5: 30:28
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/associated-consts.rs:30:5: 30:26
                                         // + literal: Const { ty: fn() {test::<BarCipher, 64>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:31:2: 31:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:29:23: 29:26

    bb0: {
        _0 = const 128_usize;            // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:29:23: 29:26
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:29:23: 29:26
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:30:23: 30:25

    bb0: {
        _0 = const 64_usize;             // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:30:23: 30:25
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:30:23: 30:25
    }
}

fn Block(_1: C) -> Block<C> {
    let mut _0: Block<C>;                // return place in scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:19:1: 19:20

    bb0: {
        _0 = Block::<C>(move _1);        // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:19:1: 19:20
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:19:1: 19:20
    }
}

// MIR FOR CTFE
fn Block(_1: C) -> Block<C> {
    let mut _0: Block<C>;                // return place in scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:19:1: 19:20

    bb0: {
        _0 = Block::<C>(move _1);        // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:19:1: 19:20
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/associated-consts.rs:19:1: 19:20
    }
}
