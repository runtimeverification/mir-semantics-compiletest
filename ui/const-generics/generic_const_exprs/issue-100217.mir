// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
TraitOne::do_one_stuff::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:10:31: 10:43

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:10:31: 10:43
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:10:31: 10:43
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-100217.rs:17:1: 17:33>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:19:10: 19:22

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:19:10: 19:22
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:19:10: 19:22
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-100217.rs:17:1: 17:33>::do_two_stuff() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:21:23: 21:23
    let mut _1: std::result::Result<(), <O as TraitOne>::MyErr>; // in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:22:9: 22:43
    let mut _2: [u8; Self::MY_NUM];      // in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:22:25: 22:42

    bb0: {
        _2 = [const 5_u8; Self::MY_NUM]; // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:22:25: 22:42
        _1 = <O as TraitOne>::do_one_stuff(move _2) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:22:9: 22:43
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-100217.rs:22:9: 22:24
                                         // + literal: Const { ty: fn([u8; Self::MY_NUM]) -> Result<(), <O as TraitOne>::MyErr> {<O as TraitOne>::do_one_stuff}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Result::<(), <O as TraitOne>::MyErr>::unwrap(move _1) -> bb2; // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:22:9: 22:52
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-100217.rs:22:44: 22:50
                                         // + literal: Const { ty: fn(Result<(), <O as TraitOne>::MyErr>) {Result::<(), <O as TraitOne>::MyErr>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:23:6: 23:6
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-100217.rs:17:1: 17:33>::do_two_stuff::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:22:29: 22:41

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:22:29: 22:41
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:22:29: 22:41
    }
}

ErrTy::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:35: 29:36

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:35: 29:36
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:35: 29:36
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-100217.rs:28:10: 28:15>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:20: 29:21

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:20: 29:21
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:20: 29:21
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-100217.rs:28:10: 28:15>::fmt(_1: &ErrTy<N>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:28:10: 28:15
    debug f => _2;                       // in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:28:10: 28:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:28:10: 28:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:28:10: 28:15
    let mut _4: &str;                    // in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:28:10: 28:15
    let _5: &str;                        // in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:28:10: 28:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:30: 29:37
    let mut _7: &&[(); N];               // in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:30: 29:37
    let _8: &&[(); N];                   // in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:30: 29:37
    let _9: &[(); N];                    // in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:30: 29:37

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:28:10: 28:15
        _5 = const "ErrTy";              // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:28:10: 28:15
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-100217.rs:28:10: 28:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:28:10: 28:15
        _9 = &((*_1).0: [(); N]);        // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:30: 29:37
        _8 = &_9;                        // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:30: 29:37
        _7 = _8;                         // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:30: 29:37
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:30: 29:37
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:28:10: 28:15
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-100217.rs:28:10: 28:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:28:15: 28:15
    }
}

const <impl at ui/const-generics/generic_const_exprs/issue-100217.rs:31:1: 31:29>::MY_NUM: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:32:19: 32:24

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:32:27: 32:28
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:32:5: 32:29
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-100217.rs:31:1: 31:29>::MyErr::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:33:24: 33:40

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:33:26: 33:38
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:33:24: 33:40
    }
}

fn <impl at ui/const-generics/generic_const_exprs/issue-100217.rs:31:1: 31:29>::do_one_stuff(_1: [u8; Self::MY_NUM]) -> Result<(), ErrTy<{ Self::MY_NUM }>> {
    debug _arr => _1;                    // in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:35:21: 35:25
    let mut _0: std::result::Result<(), ErrTy<{ Self::MY_NUM }>>; // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:35:50: 35:73

    bb0: {
        _0 = const Result::<(), ErrTy<3>>::Ok(()); // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:36:9: 36:15
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-100217.rs:36:9: 36:15
                                         // + literal: Const { ty: Result<(), ErrTy<3>>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:37:6: 37:6
    }
}

<impl at ui/const-generics/generic_const_exprs/issue-100217.rs:31:1: 31:29>::do_one_stuff::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:35:32: 35:44

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:35:32: 35:44
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:35:32: 35:44
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:40:11: 40:11
    let _1: ();                          // in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:41:5: 41:31

    bb0: {
        _1 = <Blargotron as TraitTwo>::do_two_stuff() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:41:5: 41:31
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/issue-100217.rs:41:5: 41:29
                                         // + literal: Const { ty: fn() {<Blargotron as TraitTwo>::do_two_stuff}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:42:2: 42:2
    }
}

fn ErrTy(_1: [(); N]) -> ErrTy<N> {
    let mut _0: ErrTy<N>;                // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:1: 29:29

    bb0: {
        _0 = ErrTy::<N>(move _1);        // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:1: 29:29
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:1: 29:29
    }
}

// MIR FOR CTFE
fn ErrTy(_1: [(); N]) -> ErrTy<N> {
    let mut _0: ErrTy<N>;                // return place in scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:1: 29:29

    bb0: {
        _0 = ErrTy::<N>(move _1);        // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:1: 29:29
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/issue-100217.rs:29:1: 29:29
    }
}
