// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &bool) -> bool {
    debug arg => _1;
    let mut _0: bool;
    let mut _2: &&bool;
    let mut _3: &&bool;

    bb0: {
        _3 = const _;
        _2 = &_1;
        _0 = <&bool as PartialEq>::eq(_3, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in foo: &&bool = {
    let mut _0: &&bool;
    let mut _1: &bool;

    bb0: {
        _1 = const B;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: bool;
    let mut _2: &bool;

    bb0: {
        _2 = const _;
        _1 = foo::<&true>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: &bool = {
    let mut _0: &bool;
    let _1: &bool;
    let _2: bool;
    let mut _3: &bool;

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in main::{constant#0}: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}
