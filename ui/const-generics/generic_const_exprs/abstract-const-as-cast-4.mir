// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:9:1: 9:68>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:9:51: 9:52

    bb0: {
        _0 = const O;                    // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:9:51: 9:52
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:9:51: 9:52
    }
}

<impl at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:9:1: 9:68>::{constant#0}: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:9:54: 9:67

    bb0: {
        _0 = const O as u128 (IntToInt); // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:9:56: 9:65
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:9:54: 9:67
    }
}

fn use_trait_impl() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:11:41: 11:41
    let _1: ();                          // in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:14:5: 14:58
    let _2: ();                          // in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:15:5: 15:55
    let _3: ();                          // in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:16:5: 16:60
    let _4: ();                          // in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:17:5: 17:48

    bb0: {
        _1 = use_trait_impl::assert_impl::<HasCastInTraitImpl<N, { N as u128 }>>() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:14:5: 14:58
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:14:5: 14:56
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {use_trait_impl::assert_impl::<HasCastInTraitImpl<N, { N as u128 }>>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = use_trait_impl::assert_impl::<HasCastInTraitImpl<N, { N as _ }>>() -> bb2; // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:15:5: 15:55
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:15:5: 15:53
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() {use_trait_impl::assert_impl::<HasCastInTraitImpl<N, { N as _ }>>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = use_trait_impl::assert_impl::<HasCastInTraitImpl<12, { 12 as u128 }>>() -> bb3; // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:16:5: 16:60
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:16:5: 16:58
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() {use_trait_impl::assert_impl::<HasCastInTraitImpl<12, { 12 as u128 }>>}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = use_trait_impl::assert_impl::<HasCastInTraitImpl<13, 13>>() -> bb4; // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:17:5: 17:48
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:17:5: 17:46
                                         // + literal: Const { ty: fn() {use_trait_impl::assert_impl::<HasCastInTraitImpl<13, 13>>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:18:2: 18:2
    }
}

use_trait_impl::{constant#0}: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:11:63: 11:74

    bb0: {
        _0 = const N as u128 (IntToInt); // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:11:64: 11:73
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:11:63: 11:74
    }
}

fn use_trait_impl::assert_impl() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:12:32: 12:32

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:12:34: 12:34
    }
}

use_trait_impl::{constant#7}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:14:38: 14:39

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:14:38: 14:39
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:14:38: 14:39
    }
}

use_trait_impl::{constant#1}: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:14:41: 14:54

    bb0: {
        _0 = const N as u128 (IntToInt); // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:14:43: 14:52
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:14:41: 14:54
    }
}

use_trait_impl::{constant#8}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:15:38: 15:39

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:15:38: 15:39
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:15:38: 15:39
    }
}

use_trait_impl::{constant#2}: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:15:41: 15:51
    let mut _1: u128;                    // in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:15:43: 15:49

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:15:43: 15:49
        _1 = const N as u128 (IntToInt); // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:15:43: 15:49
        _0 = _1;                         // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:15:43: 15:49
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:15:50: 15:51
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:15:41: 15:51
    }
}

use_trait_impl::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:16:38: 16:40

    bb0: {
        _0 = const 12_usize;             // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:16:38: 16:40
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:16:38: 16:40
    }
}

use_trait_impl::{constant#4}: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:16:42: 16:56

    bb0: {
        _0 = const 12_u128;              // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:16:44: 16:46
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:16:42: 16:56
    }
}

use_trait_impl::{constant#5}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:17:38: 17:40

    bb0: {
        _0 = const 13_usize;             // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:17:38: 17:40
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:17:38: 17:40
    }
}

use_trait_impl::{constant#6}: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:17:42: 17:44

    bb0: {
        _0 = const 13_u128;              // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:17:42: 17:44
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:17:42: 17:44
    }
}

fn use_trait_impl_2() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:19:43: 19:43
    let _1: ();                          // in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:22:5: 22:58
    let _2: ();                          // in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:23:5: 23:55
    let _3: ();                          // in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:24:5: 24:60
    let _4: ();                          // in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:25:5: 25:48

    bb0: {
        _1 = use_trait_impl_2::assert_impl::<HasCastInTraitImpl<N, { N as u128 }>>() -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:22:5: 22:58
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:22:5: 22:56
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {use_trait_impl_2::assert_impl::<HasCastInTraitImpl<N, { N as u128 }>>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = use_trait_impl_2::assert_impl::<HasCastInTraitImpl<N, { N as _ }>>() -> bb2; // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:23:5: 23:55
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:23:5: 23:53
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() {use_trait_impl_2::assert_impl::<HasCastInTraitImpl<N, { N as _ }>>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = use_trait_impl_2::assert_impl::<HasCastInTraitImpl<12, { 12 as u128 }>>() -> bb3; // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:24:5: 24:60
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:24:5: 24:58
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() {use_trait_impl_2::assert_impl::<HasCastInTraitImpl<12, { 12 as u128 }>>}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = use_trait_impl_2::assert_impl::<HasCastInTraitImpl<13, 13>>() -> bb4; // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:25:5: 25:48
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:25:5: 25:46
                                         // + literal: Const { ty: fn() {use_trait_impl_2::assert_impl::<HasCastInTraitImpl<13, 13>>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:26:2: 26:2
    }
}

use_trait_impl_2::{constant#0}: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:19:65: 19:73
    let mut _1: u128;                    // in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:19:66: 19:72

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:19:66: 19:72
        _1 = const N as u128 (IntToInt); // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:19:66: 19:72
        _0 = _1;                         // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:19:66: 19:72
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:19:72: 19:73
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:19:65: 19:73
    }
}

fn use_trait_impl_2::assert_impl() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:20:32: 20:32

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:20:34: 20:34
    }
}

use_trait_impl_2::{constant#7}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:22:38: 22:39

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:22:38: 22:39
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:22:38: 22:39
    }
}

use_trait_impl_2::{constant#1}: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:22:41: 22:54

    bb0: {
        _0 = const N as u128 (IntToInt); // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:22:43: 22:52
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:22:41: 22:54
    }
}

use_trait_impl_2::{constant#8}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:23:38: 23:39

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:23:38: 23:39
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:23:38: 23:39
    }
}

use_trait_impl_2::{constant#2}: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:23:41: 23:51
    let mut _1: u128;                    // in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:23:43: 23:49

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:23:43: 23:49
        _1 = const N as u128 (IntToInt); // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:23:43: 23:49
        _0 = _1;                         // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:23:43: 23:49
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:23:50: 23:51
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:23:41: 23:51
    }
}

use_trait_impl_2::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:24:38: 24:40

    bb0: {
        _0 = const 12_usize;             // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:24:38: 24:40
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:24:38: 24:40
    }
}

use_trait_impl_2::{constant#4}: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:24:42: 24:56

    bb0: {
        _0 = const 12_u128;              // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:24:44: 24:46
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:24:42: 24:56
    }
}

use_trait_impl_2::{constant#5}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:25:38: 25:40

    bb0: {
        _0 = const 13_usize;             // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:25:38: 25:40
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:25:38: 25:40
    }
}

use_trait_impl_2::{constant#6}: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:25:42: 25:44

    bb0: {
        _0 = const 13_u128;              // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:25:42: 25:44
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:25:42: 25:44
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:29:11: 29:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-4.rs:29:13: 29:13
    }
}
