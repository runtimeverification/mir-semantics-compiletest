// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:7:10: 7:20

    bb0: {
        _0 = const N as usize (IntToInt); // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:7:10: 7:20
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:7:10: 7:20
    }
}

Foo::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:5:30: 5:40

    bb0: {
        _0 = const N as usize (IntToInt); // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:5:30: 5:40
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:5:30: 5:40
    }
}

Bar::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:60: 9:76
    let mut _1: u8;                      // in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:60: 9:67
    let mut _2: (u8, bool);              // in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:60: 9:67

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:60: 9:67
        _2 = CheckedAdd(const N, const 2_u8); // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:60: 9:67
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 2_u8) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:60: 9:67
    }

    bb1: {
        _1 = move (_2.0: u8);            // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:60: 9:67
        _0 = move _1 as usize (IntToInt); // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:60: 9:76
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:75: 9:76
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:60: 9:76
    }
}

Bar::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:30: 9:46
    let mut _1: u8;                      // in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:30: 9:37
    let mut _2: (u8, bool);              // in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:30: 9:37

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:30: 9:37
        _2 = CheckedAdd(const N, const 2_u8); // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:30: 9:37
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 2_u8) -> bb1; // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:30: 9:37
    }

    bb1: {
        _1 = move (_2.0: u8);            // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:30: 9:37
        _0 = move _1 as usize (IntToInt); // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:30: 9:46
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:45: 9:46
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:30: 9:46
    }
}

fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:13:23: 13:23
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:15:2: 15:2
    }
}

foo::{constant#0}: u16 = {
    let mut _0: u16;                     // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:13:41: 13:61
    let mut _1: usize;                   // in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:13:42: 13:52

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:13:42: 13:52
        _1 = const N as usize (IntToInt); // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:13:42: 13:52
        _0 = move _1 as u16 (IntToInt);  // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:13:42: 13:59
        StorageDead(_1);                 // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:13:58: 13:59
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:13:41: 13:61
    }
}

foo::{constant#2}: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:14:19: 14:20

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:14:19: 14:20
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:14:19: 14:20
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:14:26: 14:36

    bb0: {
        _0 = const N as usize (IntToInt); // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:14:26: 14:36
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:14:26: 14:36
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:18:11: 18:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:18:13: 18:13
    }
}

fn Foo(_1: [u8; N as usize]) -> Foo<N> {
    let mut _0: Foo<N>;                  // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:5:1: 5:24

    bb0: {
        _0 = Foo::<N>(move _1);          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:5:1: 5:24
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:5:1: 5:24
    }
}

// MIR FOR CTFE
fn Foo(_1: [u8; N as usize]) -> Foo<N> {
    let mut _0: Foo<N>;                  // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:5:1: 5:24

    bb0: {
        _0 = Foo::<N>(move _1);          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:5:1: 5:24
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:5:1: 5:24
    }
}

fn Bar(_1: [u8; (N + 2) as usize]) -> Bar<N> {
    let mut _0: Bar<N>;                  // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:1: 9:24

    bb0: {
        _0 = Bar::<N>(move _1);          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:1: 9:24
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:1: 9:24
    }
}

// MIR FOR CTFE
fn Bar(_1: [u8; (N + 2) as usize]) -> Bar<N> {
    let mut _0: Bar<N>;                  // return place in scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:1: 9:24

    bb0: {
        _0 = Bar::<N>(move _1);          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:1: 9:24
        return;                          // scope 0 at ui/const-generics/generic_const_exprs/abstract-const-as-cast-1.rs:9:1: 9:24
    }
}
