// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
S::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/broken-mir-2.rs:8:40: 8:41

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/broken-mir-2.rs:8:40: 8:41
        return;                          // scope 0 at ui/const-generics/broken-mir-2.rs:8:40: 8:41
    }
}

<impl at ui/const-generics/broken-mir-2.rs:7:10: 7:15>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/broken-mir-2.rs:8:26: 8:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/broken-mir-2.rs:8:26: 8:27
        return;                          // scope 0 at ui/const-generics/broken-mir-2.rs:8:26: 8:27
    }
}

fn <impl at ui/const-generics/broken-mir-2.rs:7:10: 7:15>::fmt(_1: &S<T, N>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/const-generics/broken-mir-2.rs:7:10: 7:15
    debug f => _2;                       // in scope 0 at ui/const-generics/broken-mir-2.rs:7:10: 7:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/const-generics/broken-mir-2.rs:7:10: 7:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/const-generics/broken-mir-2.rs:7:10: 7:15
    let mut _4: &str;                    // in scope 0 at ui/const-generics/broken-mir-2.rs:7:10: 7:15
    let _5: &str;                        // in scope 0 at ui/const-generics/broken-mir-2.rs:7:10: 7:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/const-generics/broken-mir-2.rs:8:36: 8:42
    let mut _7: &&[T; N];                // in scope 0 at ui/const-generics/broken-mir-2.rs:8:36: 8:42
    let _8: &&[T; N];                    // in scope 0 at ui/const-generics/broken-mir-2.rs:8:36: 8:42
    let _9: &[T; N];                     // in scope 0 at ui/const-generics/broken-mir-2.rs:8:36: 8:42

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/const-generics/broken-mir-2.rs:7:10: 7:15
        _5 = const "S";                  // scope 0 at ui/const-generics/broken-mir-2.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/const-generics/broken-mir-2.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/const-generics/broken-mir-2.rs:7:10: 7:15
        _9 = &((*_1).0: [T; N]);         // scope 0 at ui/const-generics/broken-mir-2.rs:8:36: 8:42
        _8 = &_9;                        // scope 0 at ui/const-generics/broken-mir-2.rs:8:36: 8:42
        _7 = _8;                         // scope 0 at ui/const-generics/broken-mir-2.rs:8:36: 8:42
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/const-generics/broken-mir-2.rs:8:36: 8:42
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/const-generics/broken-mir-2.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/const-generics/broken-mir-2.rs:7:10: 7:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/broken-mir-2.rs:7:15: 7:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/broken-mir-2.rs:10:11: 10:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/broken-mir-2.rs:10:13: 10:13
    }
}

fn S(_1: [T; N]) -> S<T, N> {
    let mut _0: S<T, N>;                 // return place in scope 0 at ui/const-generics/broken-mir-2.rs:8:1: 8:35

    bb0: {
        _0 = S::<T, N>(move _1);         // scope 0 at ui/const-generics/broken-mir-2.rs:8:1: 8:35
        return;                          // scope 0 at ui/const-generics/broken-mir-2.rs:8:1: 8:35
    }
}

// MIR FOR CTFE
fn S(_1: [T; N]) -> S<T, N> {
    let mut _0: S<T, N>;                 // return place in scope 0 at ui/const-generics/broken-mir-2.rs:8:1: 8:35

    bb0: {
        _0 = S::<T, N>(move _1);         // scope 0 at ui/const-generics/broken-mir-2.rs:8:1: 8:35
        return;                          // scope 0 at ui/const-generics/broken-mir-2.rs:8:1: 8:35
    }
}
