// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/issues/issue-70125-2.rs:2:11: 2:11
    let _1: usize;                       // in scope 0 at ui/const-generics/issues/issue-70125-2.rs:3:5: 3:16

    bb0: {
        _1 = <() as Foo<3>>::foo() -> bb1; // scope 0 at ui/const-generics/issues/issue-70125-2.rs:3:5: 3:16
                                         // mir::Constant
                                         // + span: ui/const-generics/issues/issue-70125-2.rs:3:5: 3:14
                                         // + literal: Const { ty: fn() -> usize {<() as Foo<3>>::foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/issues/issue-70125-2.rs:4:2: 4:2
    }
}

fn Foo::foo() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/issues/issue-70125-2.rs:7:17: 7:22

    bb0: {
        _0 = const X;                    // scope 0 at ui/const-generics/issues/issue-70125-2.rs:8:9: 8:10
        return;                          // scope 0 at ui/const-generics/issues/issue-70125-2.rs:9:6: 9:6
    }
}

<impl at ui/const-generics/issues/issue-70125-2.rs:12:1: 12:19>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/issues/issue-70125-2.rs:12:10: 12:11

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/issues/issue-70125-2.rs:12:10: 12:11
        return;                          // scope 0 at ui/const-generics/issues/issue-70125-2.rs:12:10: 12:11
    }
}
