// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/issues/issue-86033.rs:7:1: 7:25>::{constant#0}: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/const-generics/issues/issue-86033.rs:7:13: 7:17

    bb0: {
        _0 = const true;                 // scope 0 at ui/const-generics/issues/issue-86033.rs:7:13: 7:17
        return;                          // scope 0 at ui/const-generics/issues/issue-86033.rs:7:13: 7:17
    }
}

<impl at ui/const-generics/issues/issue-86033.rs:11:1: 11:20>::{constant#0}: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/const-generics/issues/issue-86033.rs:13:16: 13:49
    let mut _1: usize;                   // in scope 0 at ui/const-generics/issues/issue-86033.rs:13:18: 13:42

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/issues/issue-86033.rs:13:18: 13:42
        ConstEvalCounter;                // scope 0 at ui/const-generics/issues/issue-86033.rs:13:18: 13:42
        _1 = std::mem::size_of::<T>() -> bb1; // scope 0 at ui/const-generics/issues/issue-86033.rs:13:18: 13:42
                                         // mir::Constant
                                         // + span: ui/const-generics/issues/issue-86033.rs:13:18: 13:40
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Eq(move _1, const 0_usize); // scope 0 at ui/const-generics/issues/issue-86033.rs:13:18: 13:47
        StorageDead(_1);                 // scope 0 at ui/const-generics/issues/issue-86033.rs:13:46: 13:47
        return;                          // scope 0 at ui/const-generics/issues/issue-86033.rs:13:16: 13:49
    }
}

fn _func() -> impl IsZST {
    let mut _0: impl IsZST;              // return place in scope 0 at ui/const-generics/issues/issue-86033.rs:16:15: 16:25

    bb0: {
        return;                          // scope 0 at ui/const-generics/issues/issue-86033.rs:18:2: 18:2
    }
}

fn _func::{closure#0}(_1: &[closure@ui/const-generics/issues/issue-86033.rs:17:5: 17:7]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/issues/issue-86033.rs:17:8: 17:8

    bb0: {
        return;                          // scope 0 at ui/const-generics/issues/issue-86033.rs:17:10: 17:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/issues/issue-86033.rs:20:11: 20:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/issues/issue-86033.rs:20:13: 20:13
    }
}
