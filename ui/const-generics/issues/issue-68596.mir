// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/const-generics/issues/issue-68596.rs:4:1: 4:7>::get(_1: &S) -> &u8 {
    debug self => _1;                    // in scope 0 at ui/const-generics/issues/issue-68596.rs:5:29: 5:34
    let mut _0: &u8;                     // return place in scope 0 at ui/const-generics/issues/issue-68596.rs:6:9: 6:16

    bb0: {
        _0 = &((*_1).0: u8);             // scope 0 at ui/const-generics/issues/issue-68596.rs:6:9: 6:16
        return;                          // scope 0 at ui/const-generics/issues/issue-68596.rs:7:6: 7:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/issues/issue-68596.rs:10:11: 10:11
    let _1: S;                           // in scope 0 at ui/const-generics/issues/issue-68596.rs:12:9: 12:10
    let _2: &u8;                         // in scope 0 at ui/const-generics/issues/issue-68596.rs:14:5: 14:17
    let mut _3: &S;                      // in scope 0 at ui/const-generics/issues/issue-68596.rs:14:5: 14:17
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/const-generics/issues/issue-68596.rs:12:9: 12:10
    }

    bb0: {
        _1 = S(const 0_u8);              // scope 0 at ui/const-generics/issues/issue-68596.rs:12:13: 12:17
        _3 = &_1;                        // scope 1 at ui/const-generics/issues/issue-68596.rs:14:5: 14:17
        _2 = S::get::<5>(move _3) -> bb1; // scope 1 at ui/const-generics/issues/issue-68596.rs:14:5: 14:17
                                         // mir::Constant
                                         // + span: ui/const-generics/issues/issue-68596.rs:14:7: 14:10
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a S) -> &'a u8 {S::get::<5>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/issues/issue-68596.rs:15:2: 15:2
    }
}

const A: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/const-generics/issues/issue-68596.rs:11:14: 11:16

    bb0: {
        _0 = const 5_u8;                 // scope 0 at ui/const-generics/issues/issue-68596.rs:11:19: 11:20
        return;                          // scope 0 at ui/const-generics/issues/issue-68596.rs:11:5: 11:21
    }
}

main::{constant#0}: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/const-generics/issues/issue-68596.rs:14:13: 14:14

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/issues/issue-68596.rs:14:13: 14:14
        return;                          // scope 0 at ui/const-generics/issues/issue-68596.rs:14:13: 14:14
    }
}

fn S(_1: u8) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/const-generics/issues/issue-68596.rs:2:1: 2:13

    bb0: {
        _0 = S(move _1);                 // scope 0 at ui/const-generics/issues/issue-68596.rs:2:1: 2:13
        return;                          // scope 0 at ui/const-generics/issues/issue-68596.rs:2:1: 2:13
    }
}

// MIR FOR CTFE
fn S(_1: u8) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/const-generics/issues/issue-68596.rs:2:1: 2:13

    bb0: {
        _0 = S(move _1);                 // scope 0 at ui/const-generics/issues/issue-68596.rs:2:1: 2:13
        return;                          // scope 0 at ui/const-generics/issues/issue-68596.rs:2:1: 2:13
    }
}
