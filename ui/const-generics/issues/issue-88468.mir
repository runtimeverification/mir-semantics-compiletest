// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/issues/issue-88468.rs:8:1: 8:29>::{constant#0}: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/const-generics/issues/issue-88468.rs:8:24: 8:28

    bb0: {
        _0 = const true;                 // scope 0 at ui/const-generics/issues/issue-88468.rs:8:24: 8:28
        return;                          // scope 0 at ui/const-generics/issues/issue-88468.rs:8:24: 8:28
    }
}

<impl at ui/const-generics/issues/issue-88468.rs:11:1: 11:23>::{constant#0}: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/const-generics/issues/issue-88468.rs:11:37: 11:69
    let mut _1: usize;                   // in scope 0 at ui/const-generics/issues/issue-88468.rs:11:39: 11:63

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/const-generics/issues/issue-88468.rs:11:39: 11:63
        ConstEvalCounter;                // scope 0 at ui/const-generics/issues/issue-88468.rs:11:39: 11:63
        _1 = std::mem::size_of::<T>() -> bb1; // scope 0 at ui/const-generics/issues/issue-88468.rs:11:39: 11:63
                                         // mir::Constant
                                         // + span: ui/const-generics/issues/issue-88468.rs:11:39: 11:61
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Gt(move _1, const 0_usize); // scope 0 at ui/const-generics/issues/issue-88468.rs:11:39: 11:67
        StorageDead(_1);                 // scope 0 at ui/const-generics/issues/issue-88468.rs:11:66: 11:67
        return;                          // scope 0 at ui/const-generics/issues/issue-88468.rs:11:37: 11:69
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/issues/issue-88468.rs:13:11: 13:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/issues/issue-88468.rs:13:13: 13:13
    }
}

fn Assert() -> Assert<COND> {
    let mut _0: Assert<COND>;            // return place in scope 0 at ui/const-generics/issues/issue-88468.rs:6:1: 6:36

    bb0: {
        _0 = Assert::<COND>;             // scope 0 at ui/const-generics/issues/issue-88468.rs:6:1: 6:36
        return;                          // scope 0 at ui/const-generics/issues/issue-88468.rs:6:1: 6:36
    }
}

// MIR FOR CTFE
fn Assert() -> Assert<COND> {
    let mut _0: Assert<COND>;            // return place in scope 0 at ui/const-generics/issues/issue-88468.rs:6:1: 6:36

    bb0: {
        _0 = Assert::<COND>;             // scope 0 at ui/const-generics/issues/issue-88468.rs:6:1: 6:36
        return;                          // scope 0 at ui/const-generics/issues/issue-88468.rs:6:1: 6:36
    }
}
