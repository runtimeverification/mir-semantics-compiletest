// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
SymmetricGroup::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/issues/issue-89320.rs:14:10: 14:14

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/issues/issue-89320.rs:14:10: 14:14
        return;                          // scope 0 at ui/const-generics/issues/issue-89320.rs:14:10: 14:14
    }
}

<impl at ui/const-generics/issues/issue-89320.rs:10:10: 10:15>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/issues/issue-89320.rs:14:10: 14:14

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/issues/issue-89320.rs:14:10: 14:14
        return;                          // scope 0 at ui/const-generics/issues/issue-89320.rs:14:10: 14:14
    }
}

fn <impl at ui/const-generics/issues/issue-89320.rs:10:10: 10:15>::clone(_1: &SymmetricGroup<S>) -> SymmetricGroup<S> {
    debug self => _1;                    // in scope 0 at ui/const-generics/issues/issue-89320.rs:10:10: 10:15
    let mut _0: SymmetricGroup<S>;       // return place in scope 0 at ui/const-generics/issues/issue-89320.rs:10:10: 10:15
    let mut _2: std::marker::PhantomData<S>; // in scope 0 at ui/const-generics/issues/issue-89320.rs:16:5: 16:42
    let mut _3: &std::marker::PhantomData<S>; // in scope 0 at ui/const-generics/issues/issue-89320.rs:16:5: 16:42
    let _4: &std::marker::PhantomData<S>; // in scope 0 at ui/const-generics/issues/issue-89320.rs:16:5: 16:42

    bb0: {
        _4 = &((*_1).0: std::marker::PhantomData<S>); // scope 0 at ui/const-generics/issues/issue-89320.rs:16:5: 16:42
        _3 = _4;                         // scope 0 at ui/const-generics/issues/issue-89320.rs:16:5: 16:42
        _2 = <PhantomData<S> as Clone>::clone(move _3) -> bb1; // scope 0 at ui/const-generics/issues/issue-89320.rs:16:5: 16:42
                                         // mir::Constant
                                         // + span: ui/const-generics/issues/issue-89320.rs:16:5: 16:42
                                         // + literal: Const { ty: for<'a> fn(&'a PhantomData<S>) -> PhantomData<S> {<PhantomData<S> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/issues/issue-89320.rs:10:15: 10:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/issues/issue-89320.rs:19:11: 19:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/issues/issue-89320.rs:19:13: 19:13
    }
}
