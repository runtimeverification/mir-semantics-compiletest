// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::state::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/issues/issue-64519.rs:3:24: 3:25

    bb0: {
        _0 = const D;                    // scope 0 at ui/const-generics/issues/issue-64519.rs:3:24: 3:25
        return;                          // scope 0 at ui/const-generics/issues/issue-64519.rs:3:24: 3:25
    }
}

<impl at ui/const-generics/issues/issue-64519.rs:6:1: 6:43>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/issues/issue-64519.rs:6:39: 6:42

    bb0: {
        _0 = const D;                    // scope 0 at ui/const-generics/issues/issue-64519.rs:6:40: 6:41
        return;                          // scope 0 at ui/const-generics/issues/issue-64519.rs:6:39: 6:42
    }
}

<impl at ui/const-generics/issues/issue-64519.rs:6:1: 6:43>::Item::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/issues/issue-64519.rs:7:22: 7:23

    bb0: {
        _0 = const D;                    // scope 0 at ui/const-generics/issues/issue-64519.rs:7:22: 7:23
        return;                          // scope 0 at ui/const-generics/issues/issue-64519.rs:7:22: 7:23
    }
}

fn <impl at ui/const-generics/issues/issue-64519.rs:6:1: 6:43>::next(_1: &mut Foo<D>) -> Option<[u8; D]> {
    debug self => _1;                    // in scope 0 at ui/const-generics/issues/issue-64519.rs:8:13: 8:22
    let mut _0: std::option::Option<[u8; D]>; // return place in scope 0 at ui/const-generics/issues/issue-64519.rs:8:27: 8:45
    let mut _2: [u8; D];                 // in scope 0 at ui/const-generics/issues/issue-64519.rs:10:25: 10:52
    let mut _3: &[u8; D];                // in scope 0 at ui/const-generics/issues/issue-64519.rs:10:25: 10:52
    let _4: [u8; D];                     // in scope 0 at ui/const-generics/issues/issue-64519.rs:10:25: 10:44
    let mut _5: std::option::Option<[u8; D]>; // in scope 0 at ui/const-generics/issues/issue-64519.rs:10:25: 10:35

    bb0: {
        _5 = ((*_1).0: std::option::Option<[u8; D]>); // scope 0 at ui/const-generics/issues/issue-64519.rs:10:25: 10:35
        _4 = Option::<[u8; D]>::unwrap(move _5) -> bb1; // scope 0 at ui/const-generics/issues/issue-64519.rs:10:25: 10:44
                                         // mir::Constant
                                         // + span: ui/const-generics/issues/issue-64519.rs:10:36: 10:42
                                         // + literal: Const { ty: fn(Option<[u8; D]>) -> [u8; D] {Option::<[u8; D]>::unwrap}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at ui/const-generics/issues/issue-64519.rs:10:25: 10:52
        _2 = (*_3);                      // scope 0 at ui/const-generics/issues/issue-64519.rs:10:25: 10:52
        _0 = Option::<[u8; D]>::Some(move _2); // scope 0 at ui/const-generics/issues/issue-64519.rs:10:20: 10:53
        return;                          // scope 0 at ui/const-generics/issues/issue-64519.rs:14:6: 14:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/issues/issue-64519.rs:17:11: 17:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/issues/issue-64519.rs:17:13: 17:13
    }
}
