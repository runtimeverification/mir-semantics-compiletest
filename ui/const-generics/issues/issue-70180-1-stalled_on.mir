// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn works() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:3:16: 3:16
    let _1: [i32; 4];                    // in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:4:9: 4:14
    let _2: ();                          // in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:6:5: 6:21
    let mut _3: &[i32; 4];               // in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:6:14: 6:20
    let _4: &[i32; 4];                   // in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:6:14: 6:20
    scope 1 {
        debug array => _1;               // in scope 1 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:4:9: 4:14
        scope 2 {
        }
    }

    bb0: {
        _1 = default_array::<i32, 4>() -> bb1; // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:4:29: 4:44
                                         // mir::Constant
                                         // + span: ui/const-generics/issues/issue-70180-1-stalled_on.rs:4:29: 4:42
                                         // + literal: Const { ty: fn() -> [i32; 4] {default_array::<i32, 4>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_1;                        // scope 2 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:6:14: 6:20
        _3 = _4;                         // scope 2 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:6:14: 6:20
        _2 = <[i32; 4] as Foo>::foo(move _3) -> bb2; // scope 2 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:6:5: 6:21
                                         // mir::Constant
                                         // + span: ui/const-generics/issues/issue-70180-1-stalled_on.rs:6:5: 6:13
                                         // + literal: Const { ty: for<'a> fn(&'a [i32; 4]) {<[i32; 4] as Foo>::foo}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:7:2: 7:2
    }
}

works::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:5:16: 5:17

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:5:16: 5:17
        return;                          // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:5:16: 5:17
    }
}

fn didnt_work() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:9:21: 9:21
    let _1: [i32; 4];                    // in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:10:9: 10:14
    let _2: ();                          // in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:11:5: 11:21
    let mut _3: &[i32; 4];               // in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:11:14: 11:20
    let _4: &[i32; 4];                   // in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:11:14: 11:20
    scope 1 {
        debug array => _1;               // in scope 1 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:10:9: 10:14
        scope 2 {
        }
    }

    bb0: {
        _1 = default_array::<i32, 4>() -> bb1; // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:10:29: 10:44
                                         // mir::Constant
                                         // + span: ui/const-generics/issues/issue-70180-1-stalled_on.rs:10:29: 10:42
                                         // + literal: Const { ty: fn() -> [i32; 4] {default_array::<i32, 4>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_1;                        // scope 1 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:11:14: 11:20
        _3 = _4;                         // scope 1 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:11:14: 11:20
        _2 = <[i32; 4] as Foo>::foo(move _3) -> bb2; // scope 1 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:11:5: 11:21
                                         // mir::Constant
                                         // + span: ui/const-generics/issues/issue-70180-1-stalled_on.rs:11:5: 11:13
                                         // + literal: Const { ty: for<'a> fn(&'a [i32; 4]) {<[i32; 4] as Foo>::foo}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:13:2: 13:2
    }
}

didnt_work::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:12:16: 12:17

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:12:16: 12:17
        return;                          // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:12:16: 12:17
    }
}

fn Foo::foo(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:16:12: 16:17
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:16:19: 16:19

    bb0: {
        return;                          // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:16:21: 16:21
    }
}

<impl at ui/const-generics/issues/issue-70180-1-stalled_on.rs:19:1: 19:22>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:19:20: 19:21

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:19:20: 19:21
        return;                          // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:19:20: 19:21
    }
}

<impl at ui/const-generics/issues/issue-70180-1-stalled_on.rs:20:1: 20:22>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:20:20: 20:21

    bb0: {
        _0 = const 8_usize;              // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:20:20: 20:21
        return;                          // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:20:20: 20:21
    }
}

fn default_array() -> [T; N] {
    let mut _0: [T; N];                  // return place in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:23:42: 23:48

    bb0: {
        _0 = <[T; N] as Default>::default() -> bb1; // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:27:5: 27:23
                                         // mir::Constant
                                         // + span: ui/const-generics/issues/issue-70180-1-stalled_on.rs:27:5: 27:21
                                         // + literal: Const { ty: fn() -> [T; N] {<[T; N] as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:28:2: 28:2
    }
}

default_array::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:23:46: 23:47

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:23:46: 23:47
        return;                          // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:23:46: 23:47
    }
}

default_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:25:9: 25:10

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:25:9: 25:10
        return;                          // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:25:9: 25:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:30:11: 30:11
    let _1: ();                          // in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:31:5: 31:12
    let _2: ();                          // in scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:32:5: 32:17

    bb0: {
        _1 = works() -> bb1;             // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:31:5: 31:12
                                         // mir::Constant
                                         // + span: ui/const-generics/issues/issue-70180-1-stalled_on.rs:31:5: 31:10
                                         // + literal: Const { ty: fn() {works}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = didnt_work() -> bb2;        // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:32:5: 32:17
                                         // mir::Constant
                                         // + span: ui/const-generics/issues/issue-70180-1-stalled_on.rs:32:5: 32:15
                                         // + literal: Const { ty: fn() {didnt_work}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/const-generics/issues/issue-70180-1-stalled_on.rs:33:2: 33:2
    }
}
