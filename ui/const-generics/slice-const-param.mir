// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn function_with_str() -> &str {
    let mut _0: &str;

    bb0: {
        _0 = const STRING;
        return;
    }
}

fn function_with_bytes() -> &[u8] {
    let mut _0: &[u8];

    bb0: {
        _0 = const BYTES;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&&str, &&str);
    let mut _2: &&str;
    let _3: &str;
    let _4: &&str;
    let _5: &&str;
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&&str, &&str);
    let mut _12: &&str;
    let _13: &str;
    let _14: &&str;
    let _15: &&str;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&&[u8], &&[u8; 4]);
    let mut _22: &&[u8];
    let _23: &[u8];
    let _24: &&[u8];
    let _25: &&[u8; 4];
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&&[u8], &&[u8; 4]);
    let mut _32: &&[u8];
    let _33: &[u8];
    let _34: &&[u8];
    let _35: &&[u8; 4];
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: &&[u8; 4];
    let mut _42: &&[u8; 4];
    let mut _43: &&str;
    let mut _44: &&str;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _14;
        debug right_val => _15;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _24;
        debug right_val => _25;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _34;
        debug right_val => _35;
        let _38: core::panicking::AssertKind;
        scope 8 {
            debug kind => _38;
        }
    }

    bb0: {
        _3 = function_with_str::<"Rust">() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _44 = const _;
        _1 = (move _2, _44);
        _4 = (_1.0: &&str);
        _5 = (_1.1: &&str);
        _7 = <&str as PartialEq>::eq(_4, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<&str, &str>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb4: {
        _13 = function_with_str::<"ℇ㇈↦">() -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = &_13;
        _43 = const _;
        _11 = (move _12, _43);
        _14 = (_11.0: &&str);
        _15 = (_11.1: &&str);
        _17 = <&str as PartialEq>::eq(_14, _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<&str, &str>(move _18, _14, _15, move _20) -> unwind continue;
    }

    bb8: {
        _23 = function_with_bytes::<b"AAAA">() -> [return: bb9, unwind continue];
    }

    bb9: {
        _22 = &_23;
        _42 = const _;
        _21 = (move _22, _42);
        _24 = (_21.0: &&[u8]);
        _25 = (_21.1: &&[u8; 4]);
        _27 = <&[u8] as PartialEq<&[u8; 4]>>::eq(_24, _25) -> [return: bb10, unwind continue];
    }

    bb10: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<&[u8], &[u8; 4]>(move _28, _24, _25, move _30) -> unwind continue;
    }

    bb12: {
        _33 = function_with_bytes::<b"AAAA">() -> [return: bb13, unwind continue];
    }

    bb13: {
        _32 = &_33;
        _41 = const _;
        _31 = (move _32, _41);
        _34 = (_31.0: &&[u8]);
        _35 = (_31.1: &&[u8; 4]);
        _37 = <&[u8] as PartialEq<&[u8; 4]>>::eq(_34, _35) -> [return: bb14, unwind continue];
    }

    bb14: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<&[u8], &[u8; 4]>(move _38, _34, _35, move _40) -> unwind continue;
    }

    bb16: {
        return;
    }
}

promoted[0] in main: &&[u8; 4] = {
    let mut _0: &&[u8; 4];
    let mut _1: &[u8; 4];

    bb0: {
        _1 = const b"AAAA";
        _0 = &_1;
        return;
    }
}

alloc4 (size: 4, align: 1) {
    41 41 41 41                                     │ AAAA
}

promoted[1] in main: &&[u8; 4] = {
    let mut _0: &&[u8; 4];
    let mut _1: &[u8; 4];
    let mut _2: [u8; 4];

    bb0: {
        _2 = [const 65_u8, const 65_u8, const 65_u8, const 65_u8];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "ℇ㇈↦";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Rust";
        _0 = &_1;
        return;
    }
}

main::{constant#0}: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "Rust";
        return;
    }
}

main::{constant#1}: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "ℇ㇈↦";
        return;
    }
}

main::{constant#2}: &[u8] = {
    let mut _0: &[u8];
    let mut _1: &[u8; 4];
    let _2: &[u8; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const b"AAAA";
        _1 = &(*_2);
        _0 = move _1 as &[u8] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc5 (size: 4, align: 1) {
    41 41 41 41                                     │ AAAA
}

main::{constant#3}: &[u8] = {
    let mut _0: &[u8];
    let mut _1: &[u8; 4];
    let _2: &[u8; 4];
    let _3: [u8; 4];
    let mut _4: &[u8; 4];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[u8] (Pointer(Unsize));
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

promoted[0] in main::{constant#3}: &[u8; 4] = {
    let mut _0: &[u8; 4];
    let mut _1: [u8; 4];

    bb0: {
        _1 = [const 65_u8, const 65_u8, const 65_u8, const 65_u8];
        _0 = &_1;
        return;
    }
}
