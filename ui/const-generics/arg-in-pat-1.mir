// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
ConstGenericEnum::Foo::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/arg-in-pat-1.rs:3:15: 3:16

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/arg-in-pat-1.rs:3:15: 3:16
        return;                          // scope 0 at ui/const-generics/arg-in-pat-1.rs:3:15: 3:16
    }
}

fn foo(_1: &ConstGenericEnum<N>) -> () {
    debug val => _1;                     // in scope 0 at ui/const-generics/arg-in-pat-1.rs:7:24: 7:27
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/arg-in-pat-1.rs:7:51: 7:51
    let mut _2: isize;                   // in scope 0 at ui/const-generics/arg-in-pat-1.rs:8:12: 8:49
    scope 1 {
        debug field => _3;               // in scope 1 at ui/const-generics/arg-in-pat-1.rs:8:39: 8:44
        let _3: &[i32; N];               // in scope 1 at ui/const-generics/arg-in-pat-1.rs:8:39: 8:44
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 1 at ui/const-generics/arg-in-pat-1.rs:8:12: 8:49
        switchInt(move _2) -> [0: bb1, otherwise: bb2]; // scope 1 at ui/const-generics/arg-in-pat-1.rs:8:12: 8:49
    }

    bb1: {
        _3 = &(((*_1) as Foo).0: [i32; N]); // scope 1 at ui/const-generics/arg-in-pat-1.rs:8:39: 8:44
        goto -> bb2;                     // scope 0 at ui/const-generics/arg-in-pat-1.rs:8:5: 8:58
    }

    bb2: {
        return;                          // scope 0 at ui/const-generics/arg-in-pat-1.rs:9:2: 9:2
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/arg-in-pat-1.rs:7:47: 7:48

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/arg-in-pat-1.rs:7:47: 7:48
        return;                          // scope 0 at ui/const-generics/arg-in-pat-1.rs:7:47: 7:48
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/arg-in-pat-1.rs:8:31: 8:32

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/arg-in-pat-1.rs:8:31: 8:32
        return;                          // scope 0 at ui/const-generics/arg-in-pat-1.rs:8:31: 8:32
    }
}

fn bar(_1: &ConstGenericEnum<N>) -> () {
    debug val => _1;                     // in scope 0 at ui/const-generics/arg-in-pat-1.rs:11:24: 11:27
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/arg-in-pat-1.rs:11:51: 11:51
    let mut _2: isize;                   // in scope 0 at ui/const-generics/arg-in-pat-1.rs:13:9: 13:46
    let _3: &[i32; N];                   // in scope 0 at ui/const-generics/arg-in-pat-1.rs:13:36: 13:41
    scope 1 {
        debug field => _3;               // in scope 1 at ui/const-generics/arg-in-pat-1.rs:13:36: 13:41
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/const-generics/arg-in-pat-1.rs:12:11: 12:14
        switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1]; // scope 0 at ui/const-generics/arg-in-pat-1.rs:12:5: 12:14
    }

    bb1: {
        unreachable;                     // scope 0 at ui/const-generics/arg-in-pat-1.rs:12:11: 12:14
    }

    bb2: {
        _3 = &(((*_1) as Foo).0: [i32; N]); // scope 0 at ui/const-generics/arg-in-pat-1.rs:13:36: 13:41
        goto -> bb3;                     // scope 0 at ui/const-generics/arg-in-pat-1.rs:13:51: 13:52
    }

    bb3: {
        return;                          // scope 0 at ui/const-generics/arg-in-pat-1.rs:16:2: 16:2
    }
}

bar::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/arg-in-pat-1.rs:11:47: 11:48

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/arg-in-pat-1.rs:11:47: 11:48
        return;                          // scope 0 at ui/const-generics/arg-in-pat-1.rs:11:47: 11:48
    }
}

bar::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/arg-in-pat-1.rs:13:28: 13:29

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/arg-in-pat-1.rs:13:28: 13:29
        return;                          // scope 0 at ui/const-generics/arg-in-pat-1.rs:13:28: 13:29
    }
}

bar::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/arg-in-pat-1.rs:14:28: 14:29

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/arg-in-pat-1.rs:14:28: 14:29
        return;                          // scope 0 at ui/const-generics/arg-in-pat-1.rs:14:28: 14:29
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/arg-in-pat-1.rs:18:11: 18:11
    let _1: [i32; 3];                    // in scope 0 at ui/const-generics/arg-in-pat-1.rs:20:36: 20:41
    scope 1 {
        debug field => _1;               // in scope 1 at ui/const-generics/arg-in-pat-1.rs:20:36: 20:41
    }

    bb0: {
        return;                          // scope 0 at ui/const-generics/arg-in-pat-1.rs:23:2: 23:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/arg-in-pat-1.rs:20:28: 20:29

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/arg-in-pat-1.rs:20:28: 20:29
        return;                          // scope 0 at ui/const-generics/arg-in-pat-1.rs:20:28: 20:29
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/arg-in-pat-1.rs:21:28: 21:29

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/arg-in-pat-1.rs:21:28: 21:29
        return;                          // scope 0 at ui/const-generics/arg-in-pat-1.rs:21:28: 21:29
    }
}

fn ConstGenericEnum::Foo(_1: [i32; N]) -> ConstGenericEnum<N> {
    let mut _0: ConstGenericEnum<N>;     // return place in scope 0 at ui/const-generics/arg-in-pat-1.rs:3:5: 3:8

    bb0: {
        _0 = ConstGenericEnum::<N>::Foo(move _1); // scope 0 at ui/const-generics/arg-in-pat-1.rs:3:5: 3:8
        return;                          // scope 0 at ui/const-generics/arg-in-pat-1.rs:3:5: 3:8
    }
}

// MIR FOR CTFE
fn ConstGenericEnum::Foo(_1: [i32; N]) -> ConstGenericEnum<N> {
    let mut _0: ConstGenericEnum<N>;     // return place in scope 0 at ui/const-generics/arg-in-pat-1.rs:3:5: 3:8

    bb0: {
        _0 = ConstGenericEnum::<N>::Foo(move _1); // scope 0 at ui/const-generics/arg-in-pat-1.rs:3:5: 3:8
        return;                          // scope 0 at ui/const-generics/arg-in-pat-1.rs:3:5: 3:8
    }
}
