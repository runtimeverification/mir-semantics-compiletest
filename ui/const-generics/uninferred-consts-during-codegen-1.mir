// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Array::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

<impl at ui/const-generics/uninferred-consts-during-codegen-1.rs:7:1: 7:63>::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/const-generics/uninferred-consts-during-codegen-1.rs:7:1: 7:63>::fmt(_1: &Array<T, N>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &mut std::fmt::DebugList<'_, '_>;
    let mut _4: &mut std::fmt::DebugList<'_, '_>;
    let mut _5: &mut std::fmt::DebugList<'_, '_>;
    let mut _6: std::fmt::DebugList<'_, '_>;
    let mut _7: std::slice::Iter<'_, T>;
    let mut _8: &[T];
    let mut _9: &[T; N];

    bb0: {
        _6 = Formatter::<'_>::debug_list(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &mut _6;
        _9 = &((*_1).0: [T; N]);
        _8 = move _9 as &[T] (Pointer(Unsize));
        _7 = core::slice::<impl [T]>::iter(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = DebugList::<'_, '_>::entries::<&T, std::slice::Iter<'_, T>>(move _5, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = _4;
        _0 = DebugList::<'_, '_>::finish(move _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::string::String, &&str);
    let mut _2: &std::string::String;
    let _3: std::string::String;
    let _4: std::string::String;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &std::string::String;
    let _12: &&str;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: &&str;
    let mut _19: &Array<i32, 3>;
    let mut _20: &[&str; 1];
    scope 1 {
        debug res => _4;
    }
    scope 2 {
        debug left_val => _11;
        debug right_val => _12;
        let _15: core::panicking::AssertKind;
        scope 3 {
            debug kind => _15;
        }
    }

    bb0: {
        _20 = const _;
        _6 = _20 as &[&str] (Pointer(Unsize));
        _19 = const _;
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<Array<i32, 3>>(_19) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = format(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = move _4;
        _2 = &_3;
        _18 = const _;
        _1 = (move _2, _18);
        _11 = (_1.0: &std::string::String);
        _12 = (_1.1: &&str);
        _14 = <String as PartialEq<&str>>::eq(_11, _12) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<String, &str>(move _15, _11, _12, move _17) -> bb8;
    }

    bb6: {
        drop(_3) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "[1, 2, 3]";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Array<i32, 3> = {
    let mut _0: &Array<i32, 3>;
    let mut _1: Array<i32, 3>;
    let mut _2: [i32; 3];

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32];
        _1 = Array::<i32, 3>(move _2);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn Array(_1: [T; N]) -> Array<T, N> {
    let mut _0: Array<T, N>;

    bb0: {
        _0 = Array::<T, N>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Array(_1: [T; N]) -> Array<T, N> {
    let mut _0: Array<T, N>;

    bb0: {
        _0 = Array::<T, N>(move _1);
        return;
    }
}
