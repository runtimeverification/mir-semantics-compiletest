// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn yes_as_ref() -> impl AsRef<[u8]> {
    let mut _0: impl std::convert::AsRef<[u8]>; // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:3:24: 3:40

    bb0: {
        _0 = [const 0_u8; 32];           // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:4:5: 4:12
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:5:2: 5:2
    }
}

yes_as_ref::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:4:9: 4:11

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:4:9: 4:11
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:4:9: 4:11
    }
}

fn yes_as_mut() -> impl AsMut<[u8]> {
    let mut _0: impl std::convert::AsMut<[u8]>; // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:7:24: 7:40

    bb0: {
        _0 = [const 0_u8; 32];           // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:8:5: 8:12
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:9:2: 9:2
    }
}

yes_as_mut::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:8:9: 8:11

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:8:9: 8:11
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:8:9: 8:11
    }
}

fn yes_borrow() -> impl Borrow<[u8]> {
    let mut _0: impl std::borrow::Borrow<[u8]>; // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:11:24: 11:54

    bb0: {
        _0 = [const 0_u8; 32];           // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:12:5: 12:12
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:13:2: 13:2
    }
}

yes_borrow::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:12:9: 12:11

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:12:9: 12:11
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:12:9: 12:11
    }
}

fn yes_borrow_mut() -> impl BorrowMut<[u8]> {
    let mut _0: impl std::borrow::BorrowMut<[u8]>; // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:15:28: 15:61

    bb0: {
        _0 = [const 0_u8; 32];           // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:16:5: 16:12
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:17:2: 17:2
    }
}

yes_borrow_mut::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:16:9: 16:11

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:16:9: 16:11
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:16:9: 16:11
    }
}

fn yes_try_from_slice() -> impl TryFrom<&'static [u8]> {
    let mut _0: impl std::convert::TryFrom<&'static [u8]>; // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:19:32: 19:73

    bb0: {
        _0 = [const 0_u8; 32];           // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:20:5: 20:12
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:21:2: 21:2
    }
}

yes_try_from_slice::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:20:9: 20:11

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:20:9: 20:11
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:20:9: 20:11
    }
}

fn yes_ref_try_from_slice() -> &[u8; 32] {
    let mut _0: &[u8; 32];               // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:24:9: 24:10
    let _1: &[u8; 32];                   // in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:24:25: 24:33
    let mut _2: &[u8; 32];               // in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:24:25: 24:33
    scope 1 {
        debug a => _0;                   // in scope 1 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:24:9: 24:10
    }

    bb0: {
        _2 = const _;                    // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:24:25: 24:33
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/core-traits-impls-length-32.rs:24:25: 24:33
                                         // + literal: Const { ty: &[u8; 32], val: Unevaluated(yes_ref_try_from_slice, [], Some(promoted[0])) }
        _1 = _2;                         // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:24:25: 24:33
        _0 = _1;                         // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:24:25: 24:33
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:26:2: 26:2
    }
}

promoted[0] in yes_ref_try_from_slice: &[u8; 32] = {
    let mut _0: &[u8; 32];               // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:24:25: 24:33
    let mut _1: [u8; 32];                // in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:24:26: 24:33

    bb0: {
        _1 = [const 0_u8; 32];           // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:24:26: 24:33
        _0 = &_1;                        // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:24:25: 24:33
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:24:25: 24:33
    }
}

yes_ref_try_from_slice::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:24:30: 24:32

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:24:30: 24:32
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:24:30: 24:32
    }
}

fn yes_hash() -> impl Hash {
    let mut _0: impl std::hash::Hash;    // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:28:22: 28:42

    bb0: {
        _0 = [const 0_i32; 32];          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:29:5: 29:12
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:30:2: 30:2
    }
}

yes_hash::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:29:9: 29:11

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:29:9: 29:11
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:29:9: 29:11
    }
}

fn yes_debug() -> impl Debug {
    let mut _0: impl std::fmt::Debug;    // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:32:23: 32:43

    bb0: {
        _0 = [const 0_i32; 32];          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:33:5: 33:12
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:34:2: 34:2
    }
}

yes_debug::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:33:9: 33:11

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:33:9: 33:11
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:33:9: 33:11
    }
}

fn yes_ref_into_iterator() -> &[u8; 32] {
    let mut _0: &[u8; 32];               // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:37:9: 37:10
    let _1: &[u8; 32];                   // in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:37:25: 37:33
    let mut _2: &[u8; 32];               // in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:37:25: 37:33
    scope 1 {
        debug a => _0;                   // in scope 1 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:37:9: 37:10
    }

    bb0: {
        _2 = const _;                    // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:37:25: 37:33
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/core-traits-impls-length-32.rs:37:25: 37:33
                                         // + literal: Const { ty: &[u8; 32], val: Unevaluated(yes_ref_into_iterator, [], Some(promoted[0])) }
        _1 = _2;                         // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:37:25: 37:33
        _0 = _1;                         // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:37:25: 37:33
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:39:2: 39:2
    }
}

promoted[0] in yes_ref_into_iterator: &[u8; 32] = {
    let mut _0: &[u8; 32];               // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:37:25: 37:33
    let mut _1: [u8; 32];                // in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:37:26: 37:33

    bb0: {
        _1 = [const 0_u8; 32];           // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:37:26: 37:33
        _0 = &_1;                        // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:37:25: 37:33
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:37:25: 37:33
    }
}

yes_ref_into_iterator::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:37:30: 37:32

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:37:30: 37:32
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:37:30: 37:32
    }
}

fn yes_partial_eq() -> impl PartialEq<[u8; 32]> {
    let mut _0: impl std::cmp::PartialEq<[u8; 32]>; // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:41:28: 41:52

    bb0: {
        _0 = [const 0_u8; 32];           // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:42:5: 42:12
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:43:2: 43:2
    }
}

yes_partial_eq::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:41:48: 41:50

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:41:48: 41:50
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:41:48: 41:50
    }
}

yes_partial_eq::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:42:9: 42:11

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:42:9: 42:11
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:42:9: 42:11
    }
}

fn yes_partial_eq_slice() -> impl PartialEq<[u8]> {
    let mut _0: impl std::cmp::PartialEq<[u8]>; // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:45:34: 45:54

    bb0: {
        _0 = [const 0_u8; 32];           // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:46:5: 46:12
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:47:2: 47:2
    }
}

yes_partial_eq_slice::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:46:9: 46:11

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:46:9: 46:11
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:46:9: 46:11
    }
}

fn yes_slice_partial_eq() -> &[u8] {
    let mut _0: &[u8];                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:51:6: 51:11
    let _1: &[u8; 32];                   // in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:50:9: 50:10
    let _2: &[u8; 32];                   // in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:50:25: 50:33
    let mut _3: &[u8; 32];               // in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:51:6: 51:7
    let mut _4: std::ops::RangeFull;     // in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:51:8: 51:10
    let mut _5: &[u8; 32];               // in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:50:25: 50:33
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:50:9: 50:10
    }

    bb0: {
        _5 = const _;                    // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:50:25: 50:33
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/core-traits-impls-length-32.rs:50:25: 50:33
                                         // + literal: Const { ty: &[u8; 32], val: Unevaluated(yes_slice_partial_eq, [], Some(promoted[0])) }
        _2 = _5;                         // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:50:25: 50:33
        _1 = _2;                         // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:50:25: 50:33
        _3 = _1;                         // scope 1 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:51:6: 51:7
        _0 = <[u8; 32] as Index<RangeFull>>::index(move _3, move _4) -> bb1; // scope 1 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:51:6: 51:11
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/core-traits-impls-length-32.rs:51:6: 51:11
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 32], RangeFull) -> &'a <[u8; 32] as Index<RangeFull>>::Output {<[u8; 32] as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:52:2: 52:2
    }
}

promoted[0] in yes_slice_partial_eq: &[u8; 32] = {
    let mut _0: &[u8; 32];               // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:50:25: 50:33
    let mut _1: [u8; 32];                // in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:50:26: 50:33

    bb0: {
        _1 = [const 0_u8; 32];           // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:50:26: 50:33
        _0 = &_1;                        // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:50:25: 50:33
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:50:25: 50:33
    }
}

yes_slice_partial_eq::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:49:54: 49:56

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:49:54: 49:56
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:49:54: 49:56
    }
}

yes_slice_partial_eq::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:50:30: 50:32

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:50:30: 50:32
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:50:30: 50:32
    }
}

fn yes_eq() -> impl Eq {
    let mut _0: impl std::cmp::Eq;       // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:54:20: 54:27

    bb0: {
        _0 = [const 0_i32; 32];          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:55:5: 55:12
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:56:2: 56:2
    }
}

yes_eq::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:55:9: 55:11

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:55:9: 55:11
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:55:9: 55:11
    }
}

fn yes_partial_ord() -> impl PartialOrd<[u8; 32]> {
    let mut _0: impl std::cmp::PartialOrd<[u8; 32]>; // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:58:29: 58:54

    bb0: {
        _0 = [const 0_u8; 32];           // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:59:5: 59:12
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:60:2: 60:2
    }
}

yes_partial_ord::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:58:50: 58:52

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:58:50: 58:52
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:58:50: 58:52
    }
}

yes_partial_ord::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:59:9: 59:11

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:59:9: 59:11
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:59:9: 59:11
    }
}

fn yes_ord() -> impl Ord {
    let mut _0: impl std::cmp::Ord;      // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:62:21: 62:29

    bb0: {
        _0 = [const 0_i32; 32];          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:63:5: 63:12
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:64:2: 64:2
    }
}

yes_ord::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:63:9: 63:11

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:63:9: 63:11
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:63:9: 63:11
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:66:11: 66:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/array-impls/core-traits-impls-length-32.rs:66:13: 66:13
    }
}
