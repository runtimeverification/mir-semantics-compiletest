// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn yes_vec_partial_eq_array() -> impl PartialEq<[B; 32]> {
    let mut _0: impl std::cmp::PartialEq<[B; 32]>; // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:3:44: 3:67

    bb0: {
        _0 = Vec::<A>::new() -> bb1;     // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:7:5: 7:20
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:7:5: 7:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<A> {Vec::<A>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:8:2: 8:2
    }
}

yes_vec_partial_eq_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:3:63: 3:65

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:3:63: 3:65
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:3:63: 3:65
    }
}

fn yes_vec_partial_eq_ref_array() -> impl PartialEq<&[B; 32]> {
    let mut _0: impl std::cmp::PartialEq<&[B; 32]>; // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:10:52: 10:79

    bb0: {
        _0 = Vec::<A>::new() -> bb1;     // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:14:5: 14:20
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:14:5: 14:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<A> {Vec::<A>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:15:2: 15:2
    }
}

yes_vec_partial_eq_ref_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:10:75: 10:77

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:10:75: 10:77
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:10:75: 10:77
    }
}

fn yes_array_into_vec() -> Vec<T> {
    let mut _0: std::vec::Vec<T>;        // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:17:35: 17:41
    let mut _1: [T; 0];                  // in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:18:5: 18:7

    bb0: {
        _1 = [];                         // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:18:5: 18:7
        _0 = <[T; 0] as Into<Vec<T>>>::into(move _1) -> bb1; // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:18:5: 18:14
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:18:8: 18:12
                                         // + literal: Const { ty: fn([T; 0]) -> Vec<T> {<[T; 0] as Into<Vec<T>>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:19:2: 19:2
    }
}

fn yes_array_into_box() -> Box<[T]> {
    let mut _0: std::boxed::Box<[T]>;    // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:21:35: 21:43
    let mut _1: [T; 0];                  // in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:22:5: 22:7

    bb0: {
        _1 = [];                         // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:22:5: 22:7
        _0 = <[T; 0] as Into<Box<[T]>>>::into(move _1) -> bb1; // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:22:5: 22:14
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:22:8: 22:12
                                         // + literal: Const { ty: fn([T; 0]) -> Box<[T]> {<[T; 0] as Into<Box<[T]>>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:23:2: 23:2
    }
}

fn yes_vecdeque_partial_eq_array() -> impl PartialEq<[B; 32]> {
    let mut _0: impl std::cmp::PartialEq<[B; 32]>; // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:27:49: 27:72

    bb0: {
        _0 = VecDeque::<A>::new() -> bb1; // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:31:5: 31:25
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:31:5: 31:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> VecDeque<A> {VecDeque::<A>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:32:2: 32:2
    }
}

yes_vecdeque_partial_eq_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:27:68: 27:70

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:27:68: 27:70
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:27:68: 27:70
    }
}

fn yes_vecdeque_partial_eq_ref_array() -> impl PartialEq<&[B; 32]> {
    let mut _0: impl std::cmp::PartialEq<&[B; 32]>; // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:34:57: 34:84

    bb0: {
        _0 = VecDeque::<A>::new() -> bb1; // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:38:5: 38:25
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:38:5: 38:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> VecDeque<A> {VecDeque::<A>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:39:2: 39:2
    }
}

yes_vecdeque_partial_eq_ref_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:34:80: 34:82

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:34:80: 34:82
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:34:80: 34:82
    }
}

fn yes_vecdeque_partial_eq_ref_mut_array() -> impl PartialEq<&mut [B; 32]> {
    let mut _0: impl std::cmp::PartialEq<&mut [B; 32]>; // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:41:61: 41:92

    bb0: {
        _0 = VecDeque::<A>::new() -> bb1; // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:45:5: 45:25
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:45:5: 45:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> VecDeque<A> {VecDeque::<A>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:46:2: 46:2
    }
}

yes_vecdeque_partial_eq_ref_mut_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:41:88: 41:90

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:41:88: 41:90
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:41:88: 41:90
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:48:11: 48:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-32.rs:48:13: 48:13
    }
}
