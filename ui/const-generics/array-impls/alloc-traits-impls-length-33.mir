// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn yes_vec_partial_eq_array() -> impl PartialEq<[B; 33]> {
    let mut _0: impl std::cmp::PartialEq<[B; 33]>; // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:3:44: 3:67

    bb0: {
        _0 = Vec::<A>::new() -> bb1;     // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:7:5: 7:20
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:7:5: 7:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<A> {Vec::<A>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:8:2: 8:2
    }
}

yes_vec_partial_eq_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:3:63: 3:65

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:3:63: 3:65
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:3:63: 3:65
    }
}

fn yes_vec_partial_eq_ref_array() -> impl PartialEq<&[B; 33]> {
    let mut _0: impl std::cmp::PartialEq<&[B; 33]>; // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:10:52: 10:79

    bb0: {
        _0 = Vec::<A>::new() -> bb1;     // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:14:5: 14:20
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:14:5: 14:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<A> {Vec::<A>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:15:2: 15:2
    }
}

yes_vec_partial_eq_ref_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:10:75: 10:77

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:10:75: 10:77
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:10:75: 10:77
    }
}

fn yes_vecdeque_partial_eq_array() -> impl PartialEq<[B; 33]> {
    let mut _0: impl std::cmp::PartialEq<[B; 33]>; // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:19:49: 19:72

    bb0: {
        _0 = VecDeque::<A>::new() -> bb1; // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:23:5: 23:25
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:23:5: 23:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> VecDeque<A> {VecDeque::<A>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:24:2: 24:2
    }
}

yes_vecdeque_partial_eq_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:19:68: 19:70

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:19:68: 19:70
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:19:68: 19:70
    }
}

fn yes_vecdeque_partial_eq_ref_array() -> impl PartialEq<&[B; 33]> {
    let mut _0: impl std::cmp::PartialEq<&[B; 33]>; // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:26:57: 26:84

    bb0: {
        _0 = VecDeque::<A>::new() -> bb1; // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:30:5: 30:25
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:30:5: 30:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> VecDeque<A> {VecDeque::<A>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:31:2: 31:2
    }
}

yes_vecdeque_partial_eq_ref_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:26:80: 26:82

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:26:80: 26:82
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:26:80: 26:82
    }
}

fn yes_vecdeque_partial_eq_ref_mut_array() -> impl PartialEq<&mut [B; 33]> {
    let mut _0: impl std::cmp::PartialEq<&mut [B; 33]>; // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:33:61: 33:92

    bb0: {
        _0 = VecDeque::<A>::new() -> bb1; // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:37:5: 37:25
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:37:5: 37:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> VecDeque<A> {VecDeque::<A>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:38:2: 38:2
    }
}

yes_vecdeque_partial_eq_ref_mut_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:33:88: 33:90

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:33:88: 33:90
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:33:88: 33:90
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:40:11: 40:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-traits-impls-length-33.rs:40:13: 40:13
    }
}
