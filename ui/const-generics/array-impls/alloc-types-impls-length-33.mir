// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn yes_vec() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:5:18: 5:18
    let _1: std::vec::Vec<i32>;          // in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:6:9: 6:10
    let mut _2: [i32; 33];               // in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:6:21: 6:28
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:6:9: 6:10
    }

    bb0: {
        _2 = [const 0_i32; 33];          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:6:21: 6:28
        _1 = <[i32; 33] as Into<Vec<i32>>>::into(move _2) -> bb1; // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:6:21: 6:35
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-types-impls-length-33.rs:6:29: 6:33
                                         // + literal: Const { ty: fn([i32; 33]) -> Vec<i32> {<[i32; 33] as Into<Vec<i32>>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:7:1: 7:2
    }

    bb2: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:7:2: 7:2
    }
}

yes_vec::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:6:25: 6:27

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:6:25: 6:27
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:6:25: 6:27
    }
}

fn yes_box() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:9:18: 9:18
    let _1: std::boxed::Box<[i32]>;      // in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:10:9: 10:20
    let mut _2: std::boxed::Box<[i32; 33]>; // in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:10:23: 10:40
    let mut _3: [i32; 33];               // in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:10:32: 10:39
    let mut _5: std::boxed::Box<[i32]>;  // in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:11:50: 11:61
    let mut _7: [i32; 33];               // in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:12:42: 12:49
    scope 1 {
        debug boxed_slice => _1;         // in scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:10:9: 10:20
        let _4: std::result::Result<std::boxed::Box<[i32; 33]>, std::boxed::Box<[i32]>>; // in scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:11:9: 11:20
        scope 2 {
            debug boxed_array => _4;     // in scope 2 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:11:9: 11:20
            let _6: std::boxed::Box<[i32]>; // in scope 2 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:12:9: 12:20
            scope 3 {
                debug boxed_slice => _6; // in scope 3 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:12:9: 12:20
            }
        }
    }

    bb0: {
        _3 = [const 0_i32; 33];          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:10:32: 10:39
        _2 = Box::<[i32; 33]>::new(move _3) -> bb1; // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:10:23: 10:40
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-types-impls-length-33.rs:10:23: 10:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([i32; 33]) -> Box<[i32; 33]> {Box::<[i32; 33]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = move _2 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:10:23: 10:40
        _5 = move _1;                    // scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:11:50: 11:61
        _4 = <Box<[i32; 33]> as TryFrom<Box<[i32]>>>::try_from(move _5) -> bb2; // scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:11:23: 11:62
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-types-impls-length-33.rs:11:23: 11:49
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Result<Box<[i32; 33]>, <Box<[i32; 33]> as TryFrom<Box<[i32]>>>::Error> {<Box<[i32; 33]> as TryFrom<Box<[i32]>>>::try_from}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = [const 0_i32; 33];          // scope 2 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:12:42: 12:49
        _6 = <Box<[i32]> as From<[i32; 33]>>::from(move _7) -> [return: bb3, unwind: bb6]; // scope 2 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:12:23: 12:50
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-types-impls-length-33.rs:12:23: 12:41
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn([i32; 33]) -> Box<[i32]> {<Box<[i32]> as From<[i32; 33]>>::from}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_6) -> [return: bb4, unwind: bb6]; // scope 2 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:13:1: 13:2
    }

    bb4: {
        drop(_4) -> bb5;                 // scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:13:1: 13:2
    }

    bb5: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:13:2: 13:2
    }

    bb6 (cleanup): {
        drop(_4) -> bb7;                 // scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:13:1: 13:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:9:1: 13:2
    }
}

yes_box::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:10:36: 10:38

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:10:36: 10:38
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:10:36: 10:38
    }
}

yes_box::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:11:34: 11:36

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:11:34: 11:36
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:11:34: 11:36
    }
}

yes_box::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:12:46: 12:48

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:12:46: 12:48
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:12:46: 12:48
    }
}

fn yes_rc() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:15:17: 15:17
    let _1: std::rc::Rc<[i32]>;          // in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:16:9: 16:20
    let mut _2: std::rc::Rc<[i32; 33]>;  // in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:16:23: 16:39
    let mut _3: [i32; 33];               // in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:16:31: 16:38
    let mut _5: std::rc::Rc<[i32]>;      // in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:17:49: 17:60
    scope 1 {
        debug boxed_slice => _1;         // in scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:16:9: 16:20
        let _4: std::result::Result<std::rc::Rc<[i32; 33]>, std::rc::Rc<[i32]>>; // in scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:17:9: 17:20
        scope 2 {
            debug boxed_array => _4;     // in scope 2 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:17:9: 17:20
        }
    }

    bb0: {
        _3 = [const 0_i32; 33];          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:16:31: 16:38
        _2 = Rc::<[i32; 33]>::new(move _3) -> bb1; // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:16:23: 16:39
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-types-impls-length-33.rs:16:23: 16:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([i32; 33]) -> Rc<[i32; 33]> {Rc::<[i32; 33]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = move _2 as std::rc::Rc<[i32]> (Pointer(Unsize)); // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:16:23: 16:39
        _5 = move _1;                    // scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:17:49: 17:60
        _4 = <Rc<[i32; 33]> as TryFrom<Rc<[i32]>>>::try_from(move _5) -> bb2; // scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:17:23: 17:61
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-types-impls-length-33.rs:17:23: 17:48
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Rc<[i32]>) -> Result<Rc<[i32; 33]>, <Rc<[i32; 33]> as TryFrom<Rc<[i32]>>>::Error> {<Rc<[i32; 33]> as TryFrom<Rc<[i32]>>>::try_from}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_4) -> bb3;                 // scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:18:1: 18:2
    }

    bb3: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:18:2: 18:2
    }
}

yes_rc::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:16:35: 16:37

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:16:35: 16:37
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:16:35: 16:37
    }
}

yes_rc::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:17:33: 17:35

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:17:33: 17:35
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:17:33: 17:35
    }
}

fn yes_arc() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:20:18: 20:18
    let _1: std::sync::Arc<[i32]>;       // in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:21:9: 21:20
    let mut _2: std::sync::Arc<[i32; 33]>; // in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:21:23: 21:40
    let mut _3: [i32; 33];               // in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:21:32: 21:39
    let mut _5: std::sync::Arc<[i32]>;   // in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:22:50: 22:61
    scope 1 {
        debug boxed_slice => _1;         // in scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:21:9: 21:20
        let _4: std::result::Result<std::sync::Arc<[i32; 33]>, std::sync::Arc<[i32]>>; // in scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:22:9: 22:20
        scope 2 {
            debug boxed_array => _4;     // in scope 2 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:22:9: 22:20
        }
    }

    bb0: {
        _3 = [const 0_i32; 33];          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:21:32: 21:39
        _2 = Arc::<[i32; 33]>::new(move _3) -> bb1; // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:21:23: 21:40
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-types-impls-length-33.rs:21:23: 21:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([i32; 33]) -> Arc<[i32; 33]> {Arc::<[i32; 33]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = move _2 as std::sync::Arc<[i32]> (Pointer(Unsize)); // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:21:23: 21:40
        _5 = move _1;                    // scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:22:50: 22:61
        _4 = <Arc<[i32; 33]> as TryFrom<Arc<[i32]>>>::try_from(move _5) -> bb2; // scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:22:23: 22:62
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/alloc-types-impls-length-33.rs:22:23: 22:49
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Arc<[i32]>) -> Result<Arc<[i32; 33]>, <Arc<[i32; 33]> as TryFrom<Arc<[i32]>>>::Error> {<Arc<[i32; 33]> as TryFrom<Arc<[i32]>>>::try_from}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_4) -> bb3;                 // scope 1 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:23:1: 23:2
    }

    bb3: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:23:2: 23:2
    }
}

yes_arc::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:21:36: 21:38

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:21:36: 21:38
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:21:36: 21:38
    }
}

yes_arc::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:22:34: 22:36

    bb0: {
        _0 = const 33_usize;             // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:22:34: 22:36
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:22:34: 22:36
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:25:11: 25:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/array-impls/alloc-types-impls-length-33.rs:25:13: 25:13
    }
}
