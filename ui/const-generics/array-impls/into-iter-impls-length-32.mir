// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn yes_iterator() -> impl Iterator<Item = i32> {
    let mut _0: impl std::iter::Iterator<Item = i32>; // return place in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:11:26: 11:51
    let mut _1: [i32; 32];               // in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:12:29: 12:39

    bb0: {
        _1 = [const 0_i32; 32];          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:12:29: 12:39
        _0 = <[i32; 32] as IntoIterator>::into_iter(move _1) -> bb1; // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:12:5: 12:40
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/into-iter-impls-length-32.rs:12:5: 12:28
                                         // + literal: Const { ty: fn([i32; 32]) -> <[i32; 32] as IntoIterator>::IntoIter {<[i32; 32] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:13:2: 13:2
    }
}

yes_iterator::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:12:36: 12:38

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:12:36: 12:38
        return;                          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:12:36: 12:38
    }
}

fn yes_double_ended_iterator() -> impl DoubleEndedIterator {
    let mut _0: impl std::iter::DoubleEndedIterator; // return place in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:15:39: 15:63
    let mut _1: [i32; 32];               // in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:16:29: 16:39

    bb0: {
        _1 = [const 0_i32; 32];          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:16:29: 16:39
        _0 = <[i32; 32] as IntoIterator>::into_iter(move _1) -> bb1; // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:16:5: 16:40
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/into-iter-impls-length-32.rs:16:5: 16:28
                                         // + literal: Const { ty: fn([i32; 32]) -> <[i32; 32] as IntoIterator>::IntoIter {<[i32; 32] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:17:2: 17:2
    }
}

yes_double_ended_iterator::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:16:36: 16:38

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:16:36: 16:38
        return;                          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:16:36: 16:38
    }
}

fn yes_exact_size_iterator() -> impl ExactSizeIterator {
    let mut _0: impl std::iter::ExactSizeIterator; // return place in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:19:37: 19:59
    let mut _1: [i32; 32];               // in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:20:29: 20:39

    bb0: {
        _1 = [const 0_i32; 32];          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:20:29: 20:39
        _0 = <[i32; 32] as IntoIterator>::into_iter(move _1) -> bb1; // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:20:5: 20:40
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/into-iter-impls-length-32.rs:20:5: 20:28
                                         // + literal: Const { ty: fn([i32; 32]) -> <[i32; 32] as IntoIterator>::IntoIter {<[i32; 32] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:21:2: 21:2
    }
}

yes_exact_size_iterator::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:20:36: 20:38

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:20:36: 20:38
        return;                          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:20:36: 20:38
    }
}

fn yes_fused_iterator() -> impl FusedIterator {
    let mut _0: impl std::iter::FusedIterator; // return place in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:23:32: 23:50
    let mut _1: [i32; 32];               // in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:24:29: 24:39

    bb0: {
        _1 = [const 0_i32; 32];          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:24:29: 24:39
        _0 = <[i32; 32] as IntoIterator>::into_iter(move _1) -> bb1; // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:24:5: 24:40
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/into-iter-impls-length-32.rs:24:5: 24:28
                                         // + literal: Const { ty: fn([i32; 32]) -> <[i32; 32] as IntoIterator>::IntoIter {<[i32; 32] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:25:2: 25:2
    }
}

yes_fused_iterator::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:24:36: 24:38

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:24:36: 24:38
        return;                          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:24:36: 24:38
    }
}

fn yes_trusted_len() -> impl TrustedLen {
    let mut _0: impl std::iter::TrustedLen; // return place in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:27:29: 27:44
    let mut _1: [i32; 32];               // in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:28:29: 28:39

    bb0: {
        _1 = [const 0_i32; 32];          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:28:29: 28:39
        _0 = <[i32; 32] as IntoIterator>::into_iter(move _1) -> bb1; // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:28:5: 28:40
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/into-iter-impls-length-32.rs:28:5: 28:28
                                         // + literal: Const { ty: fn([i32; 32]) -> <[i32; 32] as IntoIterator>::IntoIter {<[i32; 32] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:29:2: 29:2
    }
}

yes_trusted_len::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:28:36: 28:38

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:28:36: 28:38
        return;                          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:28:36: 28:38
    }
}

fn yes_clone() -> impl Clone {
    let mut _0: impl std::clone::Clone;  // return place in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:31:23: 31:33
    let mut _1: [i32; 32];               // in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:32:29: 32:39

    bb0: {
        _1 = [const 0_i32; 32];          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:32:29: 32:39
        _0 = <[i32; 32] as IntoIterator>::into_iter(move _1) -> bb1; // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:32:5: 32:40
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/into-iter-impls-length-32.rs:32:5: 32:28
                                         // + literal: Const { ty: fn([i32; 32]) -> <[i32; 32] as IntoIterator>::IntoIter {<[i32; 32] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:33:2: 33:2
    }
}

yes_clone::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:32:36: 32:38

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:32:36: 32:38
        return;                          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:32:36: 32:38
    }
}

fn yes_debug() -> impl Debug {
    let mut _0: impl std::fmt::Debug;    // return place in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:35:23: 35:33
    let mut _1: [i32; 32];               // in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:36:29: 36:39

    bb0: {
        _1 = [const 0_i32; 32];          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:36:29: 36:39
        _0 = <[i32; 32] as IntoIterator>::into_iter(move _1) -> bb1; // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:36:5: 36:40
                                         // mir::Constant
                                         // + span: ui/const-generics/array-impls/into-iter-impls-length-32.rs:36:5: 36:28
                                         // + literal: Const { ty: fn([i32; 32]) -> <[i32; 32] as IntoIterator>::IntoIter {<[i32; 32] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:37:2: 37:2
    }
}

yes_debug::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:36:36: 36:38

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:36:36: 36:38
        return;                          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:36:36: 36:38
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:40:11: 40:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/array-impls/into-iter-impls-length-32.rs:40:13: 40:13
    }
}
