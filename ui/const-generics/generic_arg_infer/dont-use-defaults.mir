// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:6:29: 6:30

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:6:29: 6:30
        return;                          // scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:6:29: 6:30
    }
}

<impl at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:7:1: 7:28>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:7:26: 7:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:7:26: 7:27
        return;                          // scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:7:26: 7:27
    }
}

fn <impl at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:7:1: 7:28>::make_arr() -> [(); N] {
    let mut _0: [(); N];                 // return place in scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:8:22: 8:29
    let mut _1: ();                      // in scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:9:10: 9:12

    bb0: {
        _0 = [move _1; N];               // scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:9:9: 9:16
        return;                          // scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:10:6: 10:6
    }
}

<impl at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:7:1: 7:28>::make_arr::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:8:27: 8:28

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:8:27: 8:28
        return;                          // scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:8:27: 8:28
    }
}

<impl at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:7:1: 7:28>::make_arr::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:9:14: 9:15

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:9:14: 9:15
        return;                          // scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:9:14: 9:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:13:11: 13:11
    let mut _1: [(); 3];                 // in scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:14:24: 14:44
    scope 1 {
    }

    bb0: {
        _1 = Foo::<3>::make_arr() -> bb1; // scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:14:24: 14:44
                                         // mir::Constant
                                         // + span: ui/const-generics/generic_arg_infer/dont-use-defaults.rs:14:24: 14:42
                                         // + literal: Const { ty: fn() -> [(); 3] {Foo::<3>::make_arr}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/generic_arg_infer/dont-use-defaults.rs:15:2: 15:2
    }
}
