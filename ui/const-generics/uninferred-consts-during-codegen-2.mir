// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/uninferred-consts-during-codegen-2.rs:7:1: 7:65>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:7:62: 7:63

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:7:62: 7:63
        return;                          // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:7:62: 7:63
    }
}

fn <impl at ui/const-generics/uninferred-consts-during-codegen-2.rs:7:1: 7:65>::fmt(_1: &Array<[T; N]>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:8:12: 8:17
    debug f => _2;                       // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:8:19: 8:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:8:46: 8:57
    let mut _3: &mut std::fmt::DebugList<'_, '_>; // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:9: 9:66
    let mut _4: &mut std::fmt::DebugList<'_, '_>; // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:9: 9:57
    let mut _5: &mut std::fmt::DebugList<'_, '_>; // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:9: 9:57
    let mut _6: std::fmt::DebugList<'_, '_>; // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:9: 9:23
    let mut _7: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:9: 9:23
    let mut _8: std::slice::Iter<'_, T>; // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:32: 9:56
    let mut _9: &[T];                    // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:32: 9:56
    let _10: &[T];                       // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:32: 9:49
    let mut _11: &[T; N];                // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:33: 9:40
    let _12: &[T; N];                    // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:33: 9:40

    bb0: {
        _7 = &mut (*_2);                 // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:9: 9:23
        _6 = Formatter::<'_>::debug_list(move _7) -> bb1; // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:9: 9:23
                                         // mir::Constant
                                         // + span: ui/const-generics/uninferred-consts-during-codegen-2.rs:9:11: 9:21
                                         // + literal: Const { ty: for<'b> fn(&'b mut Formatter<'_>) -> DebugList<'b, '_> {Formatter::<'_>::debug_list}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _6;                    // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:9: 9:57
        _12 = &((*_1).0: [T; N]);        // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:33: 9:40
        _11 = _12;                       // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:33: 9:40
        _10 = move _11 as &[T] (Pointer(Unsize)); // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:33: 9:40
        _9 = _10;                        // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:32: 9:56
        _8 = core::slice::<impl [T]>::iter(move _9) -> bb2; // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:32: 9:56
                                         // mir::Constant
                                         // + span: ui/const-generics/uninferred-consts-during-codegen-2.rs:9:50: 9:54
                                         // + literal: Const { ty: for<'a> fn(&'a [T]) -> std::slice::Iter<'a, T> {core::slice::<impl [T]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = DebugList::<'_, '_>::entries::<&T, std::slice::Iter<'_, T>>(move _5, move _8) -> bb3; // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:9: 9:57
                                         // mir::Constant
                                         // + span: ui/const-generics/uninferred-consts-during-codegen-2.rs:9:24: 9:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut DebugList<'_, '_>, std::slice::Iter<'_, T>) -> &'a mut DebugList<'_, '_> {DebugList::<'_, '_>::entries::<&T, std::slice::Iter<'_, T>>}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = &mut (*_4);                 // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:9: 9:66
        _0 = DebugList::<'_, '_>::finish(move _3) -> bb4; // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:9:9: 9:66
                                         // mir::Constant
                                         // + span: ui/const-generics/uninferred-consts-during-codegen-2.rs:9:58: 9:64
                                         // + literal: Const { ty: for<'a> fn(&'a mut DebugList<'_, '_>) -> Result<(), std::fmt::Error> {DebugList::<'_, '_>::finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:10:6: 10:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:13:11: 13:11
    let mut _1: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let _4: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _6: &[&str];                 // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:24: 14:30
    let mut _7: &[&str; 1];              // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:24: 14:30
    let _8: &[&str; 1];                  // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:24: 14:30
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:32: 14:48
    let mut _14: &Array<[i32; 3]>;       // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:32: 14:48
    let _15: &Array<[i32; 3]>;           // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:32: 14:48
    let mut _16: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _17: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _18: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _20: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _21: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _22: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _24: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _25: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _26: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _27: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _28: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _29: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _31: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _32: &Array<[i32; 3]>;       // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:32: 14:48
    let mut _33: &[&str; 1];             // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:24: 14:30
    scope 1 {
        debug res => _4;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }
    scope 2 {
        debug left_val => _17;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _18;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _23: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 3 {
            debug kind => _23;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _33 = const _;                   // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:24: 14:30
                                         // mir::Constant
                                         // + span: ui/const-generics/uninferred-consts-during-codegen-2.rs:14:24: 14:30
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[2])) }
        _8 = _33;                        // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:24: 14:30
        _7 = _8;                         // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:24: 14:30
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:24: 14:30
        _32 = const _;                   // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:32: 14:48
                                         // mir::Constant
                                         // + span: ui/const-generics/uninferred-consts-during-codegen-2.rs:14:32: 14:48
                                         // + literal: Const { ty: &Array<[i32; 3]>, val: Unevaluated(main, [], Some(promoted[1])) }
        _15 = _32;                       // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:32: 14:48
        _14 = _15;                       // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:32: 14:48
        _13 = core::fmt::ArgumentV1::<'_>::new_debug::<Array<[i32; 3]>>(move _14) -> bb1; // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:32: 14:48
                                         // mir::Constant
                                         // + span: ui/const-generics/uninferred-consts-during-codegen-2.rs:14:32: 14:48
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Array<[i32; 3]>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Array<[i32; 3]>>}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = [move _13];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _11 = &_12;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _10 = _11;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = format(move _5) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = move _4;                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _31 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _16 = _31;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _16);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _17 = (_1.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _18 = (_1.1: &&str);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _21 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _22 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _20 = <String as PartialEq<&str>>::eq(move _21, move _22) -> [return: bb4, unwind: bb8]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = Not(move _20);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _19) -> [0: bb6, otherwise: bb5]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _23 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _25 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _27 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _27;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _29 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _28 = _29;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _30 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _24 = core::panicking::assert_failed::<String, &str>(move _25, move _26, move _28, move _30) -> bb8; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_3) -> bb7;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7: {
        return;                          // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:15:2: 15:2
    }

    bb8 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:13:1: 15:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:51: 14:62

    bb0: {
        _1 = const "[1, 2, 3]";          // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:51: 14:62
                                         // mir::Constant
                                         // + span: ui/const-generics/uninferred-consts-during-codegen-2.rs:14:51: 14:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &Array<[i32; 3]> = {
    let mut _0: &Array<[i32; 3]>;        // return place in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:32: 14:48
    let mut _1: Array<[i32; 3]>;         // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:32: 14:48
    let mut _2: [i32; 3];                // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:38: 14:47

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:38: 14:47
        _1 = Array::<[i32; 3]>(move _2); // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:32: 14:48
        _0 = &_1;                        // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:32: 14:48
        return;                          // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:32: 14:48
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:24: 14:30
    let mut _1: [&str; 1];               // in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:24: 14:30

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:24: 14:30
                                         // mir::Constant
                                         // + span: ui/const-generics/uninferred-consts-during-codegen-2.rs:14:24: 14:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:24: 14:30
        return;                          // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:14:24: 14:30
    }
}

fn Array(_1: T) -> Array<T> {
    let mut _0: Array<T>;                // return place in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:5:1: 5:16

    bb0: {
        _0 = Array::<T>(move _1);        // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:5:1: 5:16
        return;                          // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:5:1: 5:16
    }
}

// MIR FOR CTFE
fn Array(_1: T) -> Array<T> {
    let mut _0: Array<T>;                // return place in scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:5:1: 5:16

    bb0: {
        _0 = Array::<T>(move _1);        // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:5:1: 5:16
        return;                          // scope 0 at ui/const-generics/uninferred-consts-during-codegen-2.rs:5:1: 5:16
    }
}
