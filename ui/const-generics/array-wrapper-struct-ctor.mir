// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
ArrayStruct::data::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:6:15: 6:16

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:6:15: 6:16
        return;                          // scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:6:15: 6:16
    }
}

ArrayTuple::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:9:42: 9:43

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:9:42: 9:43
        return;                          // scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:9:42: 9:43
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:11:11: 11:11
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:14:2: 14:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:12:40: 12:41

    bb0: {
        _0 = const 8_usize;              // scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:12:40: 12:41
        return;                          // scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:12:40: 12:41
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:13:31: 13:32

    bb0: {
        _0 = const 8_usize;              // scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:13:31: 13:32
        return;                          // scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:13:31: 13:32
    }
}

fn ArrayTuple(_1: [T; N]) -> ArrayTuple<T, N> {
    let mut _0: ArrayTuple<T, N>;        // return place in scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:9:1: 9:37

    bb0: {
        _0 = ArrayTuple::<T, N>(move _1); // scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:9:1: 9:37
        return;                          // scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:9:1: 9:37
    }
}

// MIR FOR CTFE
fn ArrayTuple(_1: [T; N]) -> ArrayTuple<T, N> {
    let mut _0: ArrayTuple<T, N>;        // return place in scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:9:1: 9:37

    bb0: {
        _0 = ArrayTuple::<T, N>(move _1); // scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:9:1: 9:37
        return;                          // scope 0 at ui/const-generics/array-wrapper-struct-ctor.rs:9:1: 9:37
    }
}
