// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/type-after-const-ok.rs:6:11: 6:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/type-after-const-ok.rs:6:13: 6:13
    }
}

fn A(_1: T) -> A<N, T> {
    let mut _0: A<N, T>;                 // return place in scope 0 at ui/const-generics/type-after-const-ok.rs:4:1: 4:28

    bb0: {
        _0 = A::<N, T>(move _1);         // scope 0 at ui/const-generics/type-after-const-ok.rs:4:1: 4:28
        return;                          // scope 0 at ui/const-generics/type-after-const-ok.rs:4:1: 4:28
    }
}

// MIR FOR CTFE
fn A(_1: T) -> A<N, T> {
    let mut _0: A<N, T>;                 // return place in scope 0 at ui/const-generics/type-after-const-ok.rs:4:1: 4:28

    bb0: {
        _0 = A::<N, T>(move _1);         // scope 0 at ui/const-generics/type-after-const-ok.rs:4:1: 4:28
        return;                          // scope 0 at ui/const-generics/type-after-const-ok.rs:4:1: 4:28
    }
}
