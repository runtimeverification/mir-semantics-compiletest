// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/min_const_generics/assoc_const.rs:4:1: 4:28>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:4:26: 4:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:4:26: 4:27
        return;                          // scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:4:26: 4:27
    }
}

const <impl at ui/const-generics/min_const_generics/assoc_const.rs:4:1: 4:28>::VALUE: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:5:18: 5:23
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:5:26: 5:31

    bb0: {
        _1 = CheckedMul(const N, const 2_usize); // scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:5:26: 5:31
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const N, const 2_usize) -> bb1; // scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:5:26: 5:31
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:5:26: 5:31
        return;                          // scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:5:5: 5:32
    }
}

<impl at ui/const-generics/min_const_generics/assoc_const.rs:12:1: 12:36>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:12:34: 12:35

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:12:34: 12:35
        return;                          // scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:12:34: 12:35
    }
}

const <impl at ui/const-generics/min_const_generics/assoc_const.rs:12:1: 12:36>::ASSOC: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:13:18: 13:23
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:13:26: 13:31

    bb0: {
        _1 = CheckedMul(const N, const 3_usize); // scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:13:26: 13:31
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const N, const 3_usize) -> bb1; // scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:13:26: 13:31
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:13:26: 13:31
        return;                          // scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:13:5: 13:32
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:16:11: 16:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/min_const_generics/assoc_const.rs:16:13: 16:13
    }
}
