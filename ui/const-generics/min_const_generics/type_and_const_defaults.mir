// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Both::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:4:35: 4:36

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:4:35: 4:36
        return;                          // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:4:35: 4:36
    }
}

Both::arr::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:5:12: 5:13

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:5:12: 5:13
        return;                          // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:5:12: 5:13
    }
}

BothTrait::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:8:39: 8:40

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:8:39: 8:40
        return;                          // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:8:39: 8:40
    }
}

BothEnum::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:10:37: 10:38

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:10:37: 10:38
        return;                          // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:10:37: 10:38
    }
}

BothEnum::Dummy::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:11:13: 11:14

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:11:13: 11:14
        return;                          // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:11:13: 11:14
    }
}

OppOrder::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:14:32: 14:33

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:14:32: 14:33
        return;                          // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:14:32: 14:33
    }
}

OppOrder::arr::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:15:12: 15:13

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:15:12: 15:13
        return;                          // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:15:12: 15:13
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:18:11: 18:11
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:25:2: 25:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:19:22: 19:23

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:19:22: 19:23
        return;                          // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:19:22: 19:23
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:22:22: 22:23

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:22:22: 22:23
        return;                          // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:22:22: 22:23
    }
}

fn BothEnum::Dummy(_1: [T; N]) -> BothEnum<T, N> {
    let mut _0: BothEnum<T, N>;          // return place in scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:11:3: 11:8

    bb0: {
        _0 = BothEnum::<T, N>::Dummy(move _1); // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:11:3: 11:8
        return;                          // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:11:3: 11:8
    }
}

// MIR FOR CTFE
fn BothEnum::Dummy(_1: [T; N]) -> BothEnum<T, N> {
    let mut _0: BothEnum<T, N>;          // return place in scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:11:3: 11:8

    bb0: {
        _0 = BothEnum::<T, N>::Dummy(move _1); // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:11:3: 11:8
        return;                          // scope 0 at ui/const-generics/min_const_generics/type_and_const_defaults.rs:11:3: 11:8
    }
}
