// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: [u32; N]) -> [u32; K] {
    debug _data => _1;                   // in scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:4:40: 4:45
    let mut _0: [u32; K];                // return place in scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:4:60: 4:68

    bb0: {
        _0 = [const 0_u32; K];           // scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:5:5: 5:11
        return;                          // scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:6:2: 6:2
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:4:53: 4:54

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:4:53: 4:54
        return;                          // scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:4:53: 4:54
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:4:66: 4:67

    bb0: {
        _0 = const K;                    // scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:4:66: 4:67
        return;                          // scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:4:66: 4:67
    }
}

foo::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:5:9: 5:10

    bb0: {
        _0 = const K;                    // scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:5:9: 5:10
        return;                          // scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:5:9: 5:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:7:11: 7:11
    let _1: [u32; 2];                    // in scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:8:9: 8:11
    let mut _2: [u32; 3];                // in scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:8:26: 8:35
    scope 1 {
        debug _a => _1;                  // in scope 1 at ui/const-generics/min_const_generics/inferred_const.rs:8:9: 8:11
    }

    bb0: {
        _2 = [const 0_u32, const 1_u32, const 2_u32]; // scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:8:26: 8:35
        _1 = foo::<3, 2>(move _2) -> bb1; // scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:8:14: 8:36
                                         // mir::Constant
                                         // + span: ui/const-generics/min_const_generics/inferred_const.rs:8:14: 8:25
                                         // + literal: Const { ty: fn([u32; 3]) -> [u32; 2] {foo::<3, 2>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:9:2: 9:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:8:23: 8:24

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:8:23: 8:24
        return;                          // scope 0 at ui/const-generics/min_const_generics/inferred_const.rs:8:23: 8:24
    }
}
