// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn identity() -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:3:38: 3:41

    bb0: {
        _0 = const T;                    // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:3:44: 3:45
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:3:47: 3:47
    }
}

// MIR FOR CTFE
fn identity() -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:3:38: 3:41

    bb0: {
        _0 = const T;                    // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:3:44: 3:45
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:3:47: 3:47
    }
}

<impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:10: 5:12>::{constant#0}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:6:27: 6:28

    bb0: {
        _0 = const U;                    // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:6:27: 6:28
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:6:27: 6:28
    }
}

<impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:10: 5:12>::{constant#0}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:6:27: 6:28

    bb0: {
        _0 = const U;                    // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:6:27: 6:28
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:6:27: 6:28
    }
}

fn <impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:10: 5:12>::assert_receiver_is_total_eq(_1: &ConstU32<U>) -> () {
    debug self => _1;                    // in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:10: 5:12
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:10: 5:12

    bb0: {
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:12: 5:12
    }
}

<impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:14: 5:23>::{constant#0}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:6:27: 6:28

    bb0: {
        _0 = const U;                    // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:6:27: 6:28
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:6:27: 6:28
    }
}

<impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:14: 5:23>::{constant#0}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:6:27: 6:28

    bb0: {
        _0 = const U;                    // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:6:27: 6:28
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:6:27: 6:28
    }
}

fn <impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:14: 5:23>::eq(_1: &ConstU32<U>, _2: &ConstU32<U>) -> bool {
    debug self => _1;                    // in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:14: 5:23
    debug other => _2;                   // in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:14: 5:23
    let mut _0: bool;                    // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:14: 5:23

    bb0: {
        _0 = const true;                 // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:14: 5:23
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:23: 5:23
    }
}

<impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:14: 5:23>::eq::{constant#0}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:14: 5:23

    bb0: {
        _0 = const U;                    // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:14: 5:23
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:14: 5:23
    }
}

<impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:25: 5:30>::{constant#0}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:6:27: 6:28

    bb0: {
        _0 = const U;                    // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:6:27: 6:28
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:6:27: 6:28
    }
}

fn <impl at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:25: 5:30>::fmt(_1: &ConstU32<U>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:25: 5:30
    debug f => _2;                       // in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:25: 5:30
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:25: 5:30
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:25: 5:30
    let mut _4: &str;                    // in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:25: 5:30
    let _5: &str;                        // in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:25: 5:30

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:25: 5:30
        _5 = const "ConstU32";           // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:25: 5:30
                                         // mir::Constant
                                         // + span: ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:25: 5:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:25: 5:30
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:25: 5:30
                                         // mir::Constant
                                         // + span: ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:25: 5:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:5:30: 5:30
    }
}

fn new() -> ConstU32<3> {
    let mut _0: ConstU32<3>;             // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:8:17: 8:46

    bb0: {
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:10:2: 10:2
    }
}

new::{constant#0}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:8:26: 8:45

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:8:28: 8:43
        _0 = identity::<3>() -> bb1;     // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:8:28: 8:43
                                         // mir::Constant
                                         // + span: ui/const-generics/min_const_generics/const_fn_in_generics.rs:8:28: 8:41
                                         // + literal: Const { ty: fn() -> u32 {identity::<3>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:8:26: 8:45
    }
}

new::{constant#0}::{constant#0}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:8:39: 8:40

    bb0: {
        _0 = const 3_u32;                // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:8:39: 8:40
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:8:39: 8:40
    }
}

new::{constant#1}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:9:14: 9:33

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:9:16: 9:31
        _0 = identity::<3>() -> bb1;     // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:9:16: 9:31
                                         // mir::Constant
                                         // + span: ui/const-generics/min_const_generics/const_fn_in_generics.rs:9:16: 9:29
                                         // + literal: Const { ty: fn() -> u32 {identity::<3>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:9:14: 9:33
    }
}

new::{constant#1}::{constant#0}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:9:27: 9:28

    bb0: {
        _0 = const 3_u32;                // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:9:27: 9:28
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:9:27: 9:28
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:12:11: 12:11
    let _1: ConstU32<3>;                 // in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:13:7: 13:8
    let mut _2: (&ConstU32<3>, &ConstU32<3>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &ConstU32<3>;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &ConstU32<3>;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &ConstU32<3>;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &ConstU32<3>;           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &ConstU32<3>;           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &ConstU32<3>;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &ConstU32<3>;           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &ConstU32<3>;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:13:7: 13:8
        let _5: &ConstU32<3>;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _6: &ConstU32<3>;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _19: &ConstU32<3>;       // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _5;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _6;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _11: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _11;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = new() -> bb1;               // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:13:11: 13:16
                                         // mir::Constant
                                         // + span: ui/const-generics/min_const_generics/const_fn_in_generics.rs:13:11: 13:14
                                         // + literal: Const { ty: fn() -> ConstU32<{ identity::<3>() }> {new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &ConstU32<3>, val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _19;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_2.0: &ConstU32<3>);       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_2.1: &ConstU32<3>);       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <ConstU32<3> as PartialEq>::eq(move _9, move _10) -> bb2; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ConstU32<3>, &'b ConstU32<3>) -> bool {<ConstU32<3> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Not(move _8);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _11 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<ConstU32<3>, ConstU32<3>>(move _13, move _14, move _16, move _18); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a ConstU32<3>, &'b ConstU32<3>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<ConstU32<3>, ConstU32<3>>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:15:2: 15:2
    }
}

promoted[0] in main: &ConstU32<3> = {
    let mut _0: &ConstU32<3>;            // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: ConstU32<3>;             // in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:14:17: 14:30

    bb0: {
        _1 = ConstU32::<3>;              // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:14:17: 14:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

main::{constant#0}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:14:28: 14:29

    bb0: {
        _0 = const 3_u32;                // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:14:28: 14:29
        return;                          // scope 0 at ui/const-generics/min_const_generics/const_fn_in_generics.rs:14:28: 14:29
    }
}
