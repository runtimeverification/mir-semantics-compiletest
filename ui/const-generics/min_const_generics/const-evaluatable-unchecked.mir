// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:5:13: 5:13

    bb0: {
        return;                          // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:9:2: 9:2
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:6:9: 6:38

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:6:9: 6:38
        _0 = std::mem::size_of::<*mut T>() -> bb1; // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:6:9: 6:38
                                         // mir::Constant
                                         // + span: ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:6:9: 6:36
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<*mut T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:6:9: 6:38
    }
}

const <impl at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:13:1: 13:15>::ASSOC: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:14:18: 14:23

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:14:26: 14:27
        return;                          // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:14:5: 14:28
    }
}

fn <impl at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:13:1: 13:15>::test() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:16:15: 16:15
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:20:6: 20:6
    }
}

<impl at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:13:1: 13:15>::test::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:17:21: 17:32

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:17:21: 17:32
        return;                          // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:17:21: 17:32
    }
}

<impl at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:25:1: 25:28>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:25:26: 25:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:25:26: 25:27
        return;                          // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:25:26: 25:27
    }
}

const <impl at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:25:1: 25:28>::ASSOC: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:26:18: 26:23

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:26:26: 26:27
        return;                          // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:26:5: 26:28
    }
}

fn <impl at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:25:1: 25:28>::test() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:28:15: 28:15
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:32:6: 32:6
    }
}

<impl at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:25:1: 25:28>::test::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:29:21: 29:32

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:29:21: 29:32
        return;                          // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:29:21: 29:32
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:35:11: 35:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:35:13: 35:13
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:11:1: 11:14

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:11:1: 11:14
        return;                          // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:11:1: 11:14
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:11:1: 11:14

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:11:1: 11:14
        return;                          // scope 0 at ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs:11:1: 11:14
    }
}
