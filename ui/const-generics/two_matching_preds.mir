// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/two_matching_preds.rs:6:1: 6:1
    let _1: ();                          // in scope 0 at ui/const-generics/two_matching_preds.rs:10:5: 10:15

    bb0: {
        _1 = bar::<N>() -> bb1;          // scope 0 at ui/const-generics/two_matching_preds.rs:10:5: 10:15
                                         // mir::Constant
                                         // + span: ui/const-generics/two_matching_preds.rs:10:5: 10:13
                                         // + literal: Const { ty: fn() {bar::<N>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/two_matching_preds.rs:11:2: 11:2
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/two_matching_preds.rs:7:10: 7:15
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/two_matching_preds.rs:7:10: 7:15

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/two_matching_preds.rs:7:10: 7:15
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/two_matching_preds.rs:7:10: 7:15
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/two_matching_preds.rs:7:10: 7:15
        return;                          // scope 0 at ui/const-generics/two_matching_preds.rs:7:10: 7:15
    }
}

foo::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/two_matching_preds.rs:8:10: 8:15
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/two_matching_preds.rs:8:10: 8:15

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/two_matching_preds.rs:8:10: 8:15
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/two_matching_preds.rs:8:10: 8:15
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/two_matching_preds.rs:8:10: 8:15
        return;                          // scope 0 at ui/const-generics/two_matching_preds.rs:8:10: 8:15
    }
}

foo::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/two_matching_preds.rs:10:11: 10:12

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/two_matching_preds.rs:10:11: 10:12
        return;                          // scope 0 at ui/const-generics/two_matching_preds.rs:10:11: 10:12
    }
}

fn bar() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/two_matching_preds.rs:14:1: 14:1

    bb0: {
        return;                          // scope 0 at ui/const-generics/two_matching_preds.rs:17:2: 17:2
    }
}

bar::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/two_matching_preds.rs:15:10: 15:15
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/two_matching_preds.rs:15:10: 15:15

    bb0: {
        _1 = CheckedAdd(const N, const 1_usize); // scope 0 at ui/const-generics/two_matching_preds.rs:15:10: 15:15
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const N, const 1_usize) -> bb1; // scope 0 at ui/const-generics/two_matching_preds.rs:15:10: 15:15
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/two_matching_preds.rs:15:10: 15:15
        return;                          // scope 0 at ui/const-generics/two_matching_preds.rs:15:10: 15:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/two_matching_preds.rs:19:11: 19:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/two_matching_preds.rs:19:13: 19:13
    }
}
