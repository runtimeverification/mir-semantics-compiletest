// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Test::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/deref-into-array-generic.rs:3:36: 3:37

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/deref-into-array-generic.rs:3:36: 3:37
        return;                          // scope 0 at ui/const-generics/deref-into-array-generic.rs:3:36: 3:37
    }
}

<impl at ui/const-generics/deref-into-array-generic.rs:5:1: 5:63>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/deref-into-array-generic.rs:5:61: 5:62

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/deref-into-array-generic.rs:5:61: 5:62
        return;                          // scope 0 at ui/const-generics/deref-into-array-generic.rs:5:61: 5:62
    }
}

fn <impl at ui/const-generics/deref-into-array-generic.rs:5:1: 5:63>::default() -> Test<T, N> {
    let mut _0: Test<T, N>;              // return place in scope 0 at ui/const-generics/deref-into-array-generic.rs:6:21: 6:25
    let mut _1: [T; N];                  // in scope 0 at ui/const-generics/deref-into-array-generic.rs:7:14: 7:31
    let mut _2: T;                       // in scope 0 at ui/const-generics/deref-into-array-generic.rs:7:15: 7:27

    bb0: {
        _2 = <T as Default>::default() -> bb1; // scope 0 at ui/const-generics/deref-into-array-generic.rs:7:15: 7:27
                                         // mir::Constant
                                         // + span: ui/const-generics/deref-into-array-generic.rs:7:15: 7:25
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = [move _2; N];               // scope 0 at ui/const-generics/deref-into-array-generic.rs:7:14: 7:31
        _0 = Test::<T, N>(move _1);      // scope 0 at ui/const-generics/deref-into-array-generic.rs:7:9: 7:32
        return;                          // scope 0 at ui/const-generics/deref-into-array-generic.rs:8:6: 8:6
    }
}

<impl at ui/const-generics/deref-into-array-generic.rs:5:1: 5:63>::default::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/deref-into-array-generic.rs:7:29: 7:30

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/deref-into-array-generic.rs:7:29: 7:30
        return;                          // scope 0 at ui/const-generics/deref-into-array-generic.rs:7:29: 7:30
    }
}

<impl at ui/const-generics/deref-into-array-generic.rs:11:1: 11:55>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/deref-into-array-generic.rs:11:53: 11:54

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/deref-into-array-generic.rs:11:53: 11:54
        return;                          // scope 0 at ui/const-generics/deref-into-array-generic.rs:11:53: 11:54
    }
}

<impl at ui/const-generics/deref-into-array-generic.rs:11:1: 11:55>::Target::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/deref-into-array-generic.rs:12:23: 12:24

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/deref-into-array-generic.rs:12:23: 12:24
        return;                          // scope 0 at ui/const-generics/deref-into-array-generic.rs:12:23: 12:24
    }
}

fn <impl at ui/const-generics/deref-into-array-generic.rs:11:1: 11:55>::deref(_1: &Test<T, N>) -> &[T; N] {
    debug self => _1;                    // in scope 0 at ui/const-generics/deref-into-array-generic.rs:14:14: 14:19
    let mut _0: &[T; N];                 // return place in scope 0 at ui/const-generics/deref-into-array-generic.rs:15:9: 15:16

    bb0: {
        _0 = &((*_1).0: [T; N]);         // scope 0 at ui/const-generics/deref-into-array-generic.rs:15:9: 15:16
        return;                          // scope 0 at ui/const-generics/deref-into-array-generic.rs:16:6: 16:6
    }
}

<impl at ui/const-generics/deref-into-array-generic.rs:11:1: 11:55>::deref::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/deref-into-array-generic.rs:14:29: 14:30

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/deref-into-array-generic.rs:14:29: 14:30
        return;                          // scope 0 at ui/const-generics/deref-into-array-generic.rs:14:29: 14:30
    }
}

fn test() -> Test<u64, 16> {
    let mut _0: Test<u64, 16>;           // return place in scope 0 at ui/const-generics/deref-into-array-generic.rs:20:9: 20:13
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/const-generics/deref-into-array-generic.rs:21:14: 21:18
    let mut _4: &[&str; 2];              // in scope 0 at ui/const-generics/deref-into-array-generic.rs:21:14: 21:18
    let _5: &[&str; 2];                  // in scope 0 at ui/const-generics/deref-into-array-generic.rs:21:14: 21:18
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
    let mut _11: &usize;                 // in scope 0 at ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
    let _12: &usize;                     // in scope 0 at ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
    let _13: usize;                      // in scope 0 at ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
    let mut _14: &[u64];                 // in scope 0 at ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
    let mut _15: &[u64; 16];             // in scope 0 at ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
    let _16: &[u64; 16];                 // in scope 0 at ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
    let mut _17: &Test<u64, 16>;         // in scope 0 at ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
    scope 1 {
        debug test => _0;                // in scope 1 at ui/const-generics/deref-into-array-generic.rs:20:9: 20:13
        let mut _18: &[&str; 2];         // in scope 1 at ui/const-generics/deref-into-array-generic.rs:21:14: 21:18
    }

    bb0: {
        _0 = <Test<u64, 16> as Default>::default() -> bb1; // scope 0 at ui/const-generics/deref-into-array-generic.rs:20:16: 20:31
                                         // mir::Constant
                                         // + span: ui/const-generics/deref-into-array-generic.rs:20:16: 20:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Test<u64, 16> {<Test<u64, 16> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _18 = const _;                   // scope 1 at ui/const-generics/deref-into-array-generic.rs:21:14: 21:18
                                         // mir::Constant
                                         // + span: ui/const-generics/deref-into-array-generic.rs:21:14: 21:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(test, [], Some(promoted[0])) }
        _5 = _18;                        // scope 1 at ui/const-generics/deref-into-array-generic.rs:21:14: 21:18
        _4 = _5;                         // scope 1 at ui/const-generics/deref-into-array-generic.rs:21:14: 21:18
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 1 at ui/const-generics/deref-into-array-generic.rs:21:14: 21:18
        _17 = &_0;                       // scope 1 at ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
        _16 = <Test<u64, 16> as Deref>::deref(move _17) -> bb2; // scope 1 at ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
                                         // mir::Constant
                                         // + span: ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
                                         // + literal: Const { ty: for<'a> fn(&'a Test<u64, 16>) -> &'a <Test<u64, 16> as Deref>::Target {<Test<u64, 16> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _15 = _16;                       // scope 1 at ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
        _14 = move _15 as &[u64] (Pointer(Unsize)); // scope 1 at ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
        _13 = Len((*_14));               // scope 1 at ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
        _12 = &_13;                      // scope 1 at ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
        _11 = _12;                       // scope 1 at ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
        _10 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _11) -> bb3; // scope 1 at ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
                                         // mir::Constant
                                         // + span: ui/const-generics/deref-into-array-generic.rs:21:20: 21:30
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = [move _10];                 // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = &_9;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb4; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _1 = _print(move _2) -> bb5;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/const-generics/deref-into-array-generic.rs:23:2: 23:2
    }
}

promoted[0] in test: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/const-generics/deref-into-array-generic.rs:21:14: 21:18
    let mut _1: [&str; 2];               // in scope 0 at ui/const-generics/deref-into-array-generic.rs:21:14: 21:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/const-generics/deref-into-array-generic.rs:21:14: 21:18
                                         // mir::Constant
                                         // + span: ui/const-generics/deref-into-array-generic.rs:21:14: 21:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/const-generics/deref-into-array-generic.rs:21:14: 21:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/const-generics/deref-into-array-generic.rs:21:14: 21:18
        return;                          // scope 0 at ui/const-generics/deref-into-array-generic.rs:21:14: 21:18
    }
}

test::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/deref-into-array-generic.rs:19:24: 19:26

    bb0: {
        _0 = const 16_usize;             // scope 0 at ui/const-generics/deref-into-array-generic.rs:19:24: 19:26
        return;                          // scope 0 at ui/const-generics/deref-into-array-generic.rs:19:24: 19:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/deref-into-array-generic.rs:25:11: 25:11
    let _1: Test<u64, 16>;               // in scope 0 at ui/const-generics/deref-into-array-generic.rs:26:5: 26:11

    bb0: {
        _1 = test() -> bb1;              // scope 0 at ui/const-generics/deref-into-array-generic.rs:26:5: 26:11
                                         // mir::Constant
                                         // + span: ui/const-generics/deref-into-array-generic.rs:26:5: 26:9
                                         // + literal: Const { ty: fn() -> Test<u64, 16> {test}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/deref-into-array-generic.rs:27:2: 27:2
    }
}

fn Test(_1: [T; N]) -> Test<T, N> {
    let mut _0: Test<T, N>;              // return place in scope 0 at ui/const-generics/deref-into-array-generic.rs:3:1: 3:31

    bb0: {
        _0 = Test::<T, N>(move _1);      // scope 0 at ui/const-generics/deref-into-array-generic.rs:3:1: 3:31
        return;                          // scope 0 at ui/const-generics/deref-into-array-generic.rs:3:1: 3:31
    }
}

// MIR FOR CTFE
fn Test(_1: [T; N]) -> Test<T, N> {
    let mut _0: Test<T, N>;              // return place in scope 0 at ui/const-generics/deref-into-array-generic.rs:3:1: 3:31

    bb0: {
        _0 = Test::<T, N>(move _1);      // scope 0 at ui/const-generics/deref-into-array-generic.rs:3:1: 3:31
        return;                          // scope 0 at ui/const-generics/deref-into-array-generic.rs:3:1: 3:31
    }
}
