// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Bar::bar() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/where-clauses.rs:2:38: 2:38

    bb0: {
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:2:40: 2:40
    }
}

Foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/where-clauses.rs:3:32: 3:33

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/where-clauses.rs:3:32: 3:33
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:3:32: 3:33
    }
}

fn test() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/where-clauses.rs:5:30: 5:30
    let _1: ();                          // in scope 0 at ui/const-generics/where-clauses.rs:6:5: 6:25

    bb0: {
        _1 = <T as Bar<N>>::bar() -> bb1; // scope 0 at ui/const-generics/where-clauses.rs:6:5: 6:25
                                         // mir::Constant
                                         // + span: ui/const-generics/where-clauses.rs:6:5: 6:23
                                         // + literal: Const { ty: fn() {<T as Bar<N>>::bar}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:7:2: 7:2
    }
}

test::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/where-clauses.rs:5:43: 5:44

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/where-clauses.rs:5:43: 5:44
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:5:43: 5:44
    }
}

test::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/where-clauses.rs:6:15: 6:16

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/where-clauses.rs:6:15: 6:16
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:6:15: 6:16
    }
}

<impl at ui/const-generics/where-clauses.rs:11:1: 11:28>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/where-clauses.rs:11:26: 11:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/where-clauses.rs:11:26: 11:27
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:11:26: 11:27
    }
}

fn <impl at ui/const-generics/where-clauses.rs:11:1: 11:28>::test() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/where-clauses.rs:12:18: 12:18

    bb0: {
        _0 = <T as Bar<N>>::bar() -> bb1; // scope 0 at ui/const-generics/where-clauses.rs:13:9: 13:29
                                         // mir::Constant
                                         // + span: ui/const-generics/where-clauses.rs:13:9: 13:27
                                         // + literal: Const { ty: fn() {<T as Bar<N>>::bar}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:14:6: 14:6
    }
}

<impl at ui/const-generics/where-clauses.rs:11:1: 11:28>::test::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/where-clauses.rs:12:31: 12:32

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/where-clauses.rs:12:31: 12:32
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:12:31: 12:32
    }
}

<impl at ui/const-generics/where-clauses.rs:11:1: 11:28>::test::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/where-clauses.rs:13:19: 13:20

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/where-clauses.rs:13:19: 13:20
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:13:19: 13:20
    }
}

fn Fiz::fiz() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/where-clauses.rs:18:17: 18:17
    let _1: ();                          // in scope 0 at ui/const-generics/where-clauses.rs:19:9: 19:29

    bb0: {
        _1 = <T as Bar<N>>::bar() -> bb1; // scope 0 at ui/const-generics/where-clauses.rs:19:9: 19:29
                                         // mir::Constant
                                         // + span: ui/const-generics/where-clauses.rs:19:9: 19:27
                                         // + literal: Const { ty: fn() {<T as Bar<N>>::bar}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:20:6: 20:6
    }
}

Fiz::fiz::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/where-clauses.rs:18:30: 18:31

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/where-clauses.rs:18:30: 18:31
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:18:30: 18:31
    }
}

Fiz::fiz::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/where-clauses.rs:19:19: 19:20

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/where-clauses.rs:19:19: 19:20
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:19:19: 19:20
    }
}

<impl at ui/const-generics/where-clauses.rs:23:1: 23:35>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/where-clauses.rs:23:26: 23:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/where-clauses.rs:23:26: 23:27
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:23:26: 23:27
    }
}

<impl at ui/const-generics/where-clauses.rs:24:1: 24:35>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/where-clauses.rs:24:26: 24:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/where-clauses.rs:24:26: 24:27
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:24:26: 24:27
    }
}

<impl at ui/const-generics/where-clauses.rs:25:1: 25:35>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/where-clauses.rs:25:26: 25:27

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/where-clauses.rs:25:26: 25:27
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:25:26: 25:27
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/where-clauses.rs:26:11: 26:11
    let _1: ();                          // in scope 0 at ui/const-generics/where-clauses.rs:27:5: 27:21
    let _2: ();                          // in scope 0 at ui/const-generics/where-clauses.rs:28:5: 28:27
    let _3: ();                          // in scope 0 at ui/const-generics/where-clauses.rs:29:5: 29:33

    bb0: {
        _1 = test::<u8, 13>() -> bb1;    // scope 0 at ui/const-generics/where-clauses.rs:27:5: 27:21
                                         // mir::Constant
                                         // + span: ui/const-generics/where-clauses.rs:27:5: 27:19
                                         // + literal: Const { ty: fn() {test::<u8, 13>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Faz::<3>::test::<u8>() -> bb2; // scope 0 at ui/const-generics/where-clauses.rs:28:5: 28:27
                                         // mir::Constant
                                         // + span: ui/const-generics/where-clauses.rs:28:5: 28:25
                                         // + literal: Const { ty: fn() {Faz::<3>::test::<u8>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <u8 as Fiz<13>>::fiz::<u8>() -> bb3; // scope 0 at ui/const-generics/where-clauses.rs:29:5: 29:33
                                         // mir::Constant
                                         // + span: ui/const-generics/where-clauses.rs:29:5: 29:31
                                         // + literal: Const { ty: fn() {<u8 as Fiz<13>>::fiz::<u8>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:30:2: 30:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/where-clauses.rs:27:16: 27:18

    bb0: {
        _0 = const 13_usize;             // scope 0 at ui/const-generics/where-clauses.rs:27:16: 27:18
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:27:16: 27:18
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/where-clauses.rs:28:11: 28:12

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/where-clauses.rs:28:11: 28:12
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:28:11: 28:12
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/where-clauses.rs:29:16: 29:18

    bb0: {
        _0 = const 13_usize;             // scope 0 at ui/const-generics/where-clauses.rs:29:16: 29:18
        return;                          // scope 0 at ui/const-generics/where-clauses.rs:29:16: 29:18
    }
}
