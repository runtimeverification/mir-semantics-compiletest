// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
MaybeUninitWrapper::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/transparent-maybeunit-array-wrapper.rs:10:65: 10:66

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/transparent-maybeunit-array-wrapper.rs:10:65: 10:66
        return;                          // scope 0 at ui/const-generics/transparent-maybeunit-array-wrapper.rs:10:65: 10:66
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/transparent-maybeunit-array-wrapper.rs:12:11: 12:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/transparent-maybeunit-array-wrapper.rs:12:13: 12:13
    }
}

fn MaybeUninitWrapper(_1: MaybeUninit<[u64; N]>) -> MaybeUninitWrapper<N> {
    let mut _0: MaybeUninitWrapper<N>;   // return place in scope 0 at ui/const-generics/transparent-maybeunit-array-wrapper.rs:10:1: 10:46

    bb0: {
        _0 = MaybeUninitWrapper::<N>(move _1); // scope 0 at ui/const-generics/transparent-maybeunit-array-wrapper.rs:10:1: 10:46
        return;                          // scope 0 at ui/const-generics/transparent-maybeunit-array-wrapper.rs:10:1: 10:46
    }
}

// MIR FOR CTFE
fn MaybeUninitWrapper(_1: MaybeUninit<[u64; N]>) -> MaybeUninitWrapper<N> {
    let mut _0: MaybeUninitWrapper<N>;   // return place in scope 0 at ui/const-generics/transparent-maybeunit-array-wrapper.rs:10:1: 10:46

    bb0: {
        _0 = MaybeUninitWrapper::<N>(move _1); // scope 0 at ui/const-generics/transparent-maybeunit-array-wrapper.rs:10:1: 10:46
        return;                          // scope 0 at ui/const-generics/transparent-maybeunit-array-wrapper.rs:10:1: 10:46
    }
}
