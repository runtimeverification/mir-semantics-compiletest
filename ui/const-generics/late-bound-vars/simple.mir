// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn inner() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/late-bound-vars/simple.rs:5:25: 5:30

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/late-bound-vars/simple.rs:6:5: 6:6
        return;                          // scope 0 at ui/const-generics/late-bound-vars/simple.rs:7:2: 7:2
    }
}

// MIR FOR CTFE
fn inner() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/late-bound-vars/simple.rs:5:25: 5:30

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/const-generics/late-bound-vars/simple.rs:6:5: 6:6
        return;                          // scope 0 at ui/const-generics/late-bound-vars/simple.rs:7:2: 7:2
    }
}

fn test() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/late-bound-vars/simple.rs:9:15: 9:15
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at ui/const-generics/late-bound-vars/simple.rs:12:2: 12:2
    }
}

test::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/late-bound-vars/simple.rs:10:17: 10:30

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/const-generics/late-bound-vars/simple.rs:10:17: 10:30
        _0 = inner::<'_>() -> bb1;       // scope 0 at ui/const-generics/late-bound-vars/simple.rs:10:17: 10:30
                                         // mir::Constant
                                         // + span: ui/const-generics/late-bound-vars/simple.rs:10:17: 10:28
                                         // + literal: Const { ty: fn() -> usize {inner::<'_>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/late-bound-vars/simple.rs:10:17: 10:30
    }
}

test::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/late-bound-vars/simple.rs:11:17: 11:30

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/const-generics/late-bound-vars/simple.rs:11:17: 11:30
        _0 = inner::<'_>() -> bb1;       // scope 0 at ui/const-generics/late-bound-vars/simple.rs:11:17: 11:30
                                         // mir::Constant
                                         // + span: ui/const-generics/late-bound-vars/simple.rs:11:17: 11:28
                                         // + literal: Const { ty: fn() -> usize {inner::<'_>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/late-bound-vars/simple.rs:11:17: 11:30
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/late-bound-vars/simple.rs:14:11: 14:11
    let _1: ();                          // in scope 0 at ui/const-generics/late-bound-vars/simple.rs:15:5: 15:11

    bb0: {
        _1 = test() -> bb1;              // scope 0 at ui/const-generics/late-bound-vars/simple.rs:15:5: 15:11
                                         // mir::Constant
                                         // + span: ui/const-generics/late-bound-vars/simple.rs:15:5: 15:9
                                         // + literal: Const { ty: fn() {test}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/const-generics/late-bound-vars/simple.rs:16:2: 16:2
    }
}
