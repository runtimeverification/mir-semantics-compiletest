// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const Trait::ASSOC_CONST: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/backcompat/trait-resolution-breakage.rs:4:24: 4:29

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/const-generics/backcompat/trait-resolution-breakage.rs:4:32: 4:33
        return;                          // scope 0 at ui/const-generics/backcompat/trait-resolution-breakage.rs:4:5: 4:34
    }
}

fn foo() -> [(T, U); 0] {
    let mut _0: [(T, U); 0];             // return place in scope 0 at ui/const-generics/backcompat/trait-resolution-breakage.rs:11:19: 11:44
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _1 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/backcompat/trait-resolution-breakage.rs:11:28: 11:43

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/backcompat/trait-resolution-breakage.rs:11:28: 11:43
        return;                          // scope 0 at ui/const-generics/backcompat/trait-resolution-breakage.rs:11:28: 11:43
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/backcompat/trait-resolution-breakage.rs:18:11: 18:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/backcompat/trait-resolution-breakage.rs:18:13: 18:13
    }
}
