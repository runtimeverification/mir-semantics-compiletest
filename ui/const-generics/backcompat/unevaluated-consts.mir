// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/backcompat/unevaluated-consts.rs:7:1: 7:50>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:7:19: 7:24
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:7:19: 7:24

    bb0: {
        _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:7:19: 7:24
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, const 1_usize) -> bb1; // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:7:19: 7:24
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:7:19: 7:24
        return;                          // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:7:19: 7:24
    }
}

<impl at ui/const-generics/backcompat/unevaluated-consts.rs:7:1: 7:50>::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:7:43: 7:48
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:7:43: 7:48

    bb0: {
        _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:7:43: 7:48
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, const 1_usize) -> bb1; // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:7:43: 7:48
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:7:43: 7:48
        return;                          // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:7:43: 7:48
    }
}

fn <impl at ui/const-generics/backcompat/unevaluated-consts.rs:7:1: 7:50>::from(_1: [u8; 2]) -> Foo<T, [u8; 2]> {
    debug value => _1;                   // in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:8:13: 8:18
    let mut _0: Foo<T, [u8; 2]>;         // return place in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:8:36: 8:55
    let _2: !;                           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

<impl at ui/const-generics/backcompat/unevaluated-consts.rs:7:1: 7:50>::from::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:8:25: 8:30
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:8:25: 8:30

    bb0: {
        _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:8:25: 8:30
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, const 1_usize) -> bb1; // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:8:25: 8:30
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:8:25: 8:30
        return;                          // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:8:25: 8:30
    }
}

<impl at ui/const-generics/backcompat/unevaluated-consts.rs:7:1: 7:50>::from::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:8:48: 8:53
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:8:48: 8:53

    bb0: {
        _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:8:48: 8:53
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, const 1_usize) -> bb1; // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:8:48: 8:53
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:8:48: 8:53
        return;                          // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:8:48: 8:53
    }
}

fn break_me() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:14:1: 14:1

    bb0: {
        return;                          // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:16:3: 16:3
    }
}

break_me::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:15:10: 15:15
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:15:10: 15:15

    bb0: {
        _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:15:10: 15:15
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, const 1_usize) -> bb1; // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:15:10: 15:15
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:15:10: 15:15
        return;                          // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:15:10: 15:15
    }
}

break_me::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:15:28: 15:33
    let mut _1: (usize, bool);           // in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:15:28: 15:33

    bb0: {
        _1 = CheckedAdd(const 1_usize, const 1_usize); // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:15:28: 15:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, const 1_usize) -> bb1; // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:15:28: 15:33
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:15:28: 15:33
        return;                          // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:15:28: 15:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:18:11: 18:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:18:13: 18:13
    }
}

fn Foo(_1: T, _2: U) -> Foo<T, U> {
    let mut _0: Foo<T, U>;               // return place in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:5:1: 5:17

    bb0: {
        _0 = Foo::<T, U>(move _1, move _2); // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:5:1: 5:17
        return;                          // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:5:1: 5:17
    }
}

// MIR FOR CTFE
fn Foo(_1: T, _2: U) -> Foo<T, U> {
    let mut _0: Foo<T, U>;               // return place in scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:5:1: 5:17

    bb0: {
        _0 = Foo::<T, U>(move _1, move _2); // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:5:1: 5:17
        return;                          // scope 0 at ui/const-generics/backcompat/unevaluated-consts.rs:5:1: 5:17
    }
}
