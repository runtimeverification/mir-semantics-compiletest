// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/concrete-const-impl-method.rs:7:1: 7:10>::{constant#0}: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 2_u32;
        return;
    }
}

fn <impl at ui/const-generics/concrete-const-impl-method.rs:7:1: 7:10>::impl_method(_1: &A<2>) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = const 17_u32;
        return;
    }
}

fn <impl at ui/const-generics/concrete-const-impl-method.rs:7:1: 7:10>::associated_non_method() -> u32 {
    let mut _0: u32;

    bb0: {
        _0 = const 17_u32;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: A<2>;
    let mut _2: (&u32, &u32);
    let mut _3: &u32;
    let _4: u32;
    let mut _5: &A<2>;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u32;
    let mut _11: u32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&u32, &u32);
    let mut _16: &u32;
    let _17: u32;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: u32;
    let mut _23: u32;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug val => const A::<2>;
        let _6: &u32;
        let _7: &u32;
        let _18: &u32;
        let _19: &u32;
        let mut _27: &u32;
        let mut _28: &u32;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug left_val => _18;
            debug right_val => _19;
            let _24: core::panicking::AssertKind;
            scope 5 {
                debug kind => _24;
            }
        }
    }

    bb0: {
        _5 = &_1;
        _4 = A::<2>::impl_method(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _28 = const _;
        _2 = (move _3, _28);
        _6 = (_2.0: &u32);
        _7 = (_2.1: &u32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u32, u32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _17 = A::<2>::associated_non_method() -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = &_17;
        _27 = const _;
        _15 = (move _16, _27);
        _18 = (_15.0: &u32);
        _19 = (_15.1: &u32);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<u32, u32>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 17_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 17_u32;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 2_u32;
        return;
    }
}

main::{constant#1}: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 2_u32;
        return;
    }
}
