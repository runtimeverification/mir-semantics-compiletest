// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const ONE: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/const-generics/overlapping_impls.rs:9:12: 9:15

    bb0: {
        _0 = const 1_i32;                // scope 0 at ui/const-generics/overlapping_impls.rs:9:18: 9:19
        return;                          // scope 0 at ui/const-generics/overlapping_impls.rs:9:1: 9:20
    }
}

const TWO: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/const-generics/overlapping_impls.rs:10:12: 10:15

    bb0: {
        _0 = const 2_i32;                // scope 0 at ui/const-generics/overlapping_impls.rs:10:18: 10:19
        return;                          // scope 0 at ui/const-generics/overlapping_impls.rs:10:1: 10:20
    }
}

<impl at ui/const-generics/overlapping_impls.rs:12:1: 12:31>::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/const-generics/overlapping_impls.rs:12:24: 12:25

    bb0: {
        _0 = const I;                    // scope 0 at ui/const-generics/overlapping_impls.rs:12:24: 12:25
        return;                          // scope 0 at ui/const-generics/overlapping_impls.rs:12:24: 12:25
    }
}

<impl at ui/const-generics/overlapping_impls.rs:12:1: 12:31>::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/const-generics/overlapping_impls.rs:12:27: 12:30

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/overlapping_impls.rs:12:27: 12:30
        return;                          // scope 0 at ui/const-generics/overlapping_impls.rs:12:27: 12:30
    }
}

fn <impl at ui/const-generics/overlapping_impls.rs:12:1: 12:31>::foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/overlapping_impls.rs:13:18: 13:18

    bb0: {
        return;                          // scope 0 at ui/const-generics/overlapping_impls.rs:13:20: 13:20
    }
}

<impl at ui/const-generics/overlapping_impls.rs:16:1: 16:31>::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/const-generics/overlapping_impls.rs:16:24: 16:25

    bb0: {
        _0 = const I;                    // scope 0 at ui/const-generics/overlapping_impls.rs:16:24: 16:25
        return;                          // scope 0 at ui/const-generics/overlapping_impls.rs:16:24: 16:25
    }
}

<impl at ui/const-generics/overlapping_impls.rs:16:1: 16:31>::{constant#1}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/const-generics/overlapping_impls.rs:16:27: 16:30

    bb0: {
        _0 = const _;                    // scope 0 at ui/const-generics/overlapping_impls.rs:16:27: 16:30
        return;                          // scope 0 at ui/const-generics/overlapping_impls.rs:16:27: 16:30
    }
}

fn <impl at ui/const-generics/overlapping_impls.rs:16:1: 16:31>::foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/overlapping_impls.rs:17:18: 17:18

    bb0: {
        return;                          // scope 0 at ui/const-generics/overlapping_impls.rs:17:20: 17:20
    }
}

fn <impl at ui/const-generics/overlapping_impls.rs:25:10: 25:19>::eq(_1: &Protocol, _2: &Protocol) -> bool {
    debug self => _1;                    // in scope 0 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
    debug other => _2;                   // in scope 0 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
    let mut _0: bool;                    // return place in scope 0 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
    let _3: isize;                       // in scope 0 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
    let mut _4: &Protocol;               // in scope 0 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
    let mut _6: &Protocol;               // in scope 0 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
    let mut _7: isize;                   // in scope 0 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
    let mut _8: isize;                   // in scope 0 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
        let _5: isize;                   // in scope 1 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
        _3 = discriminant((*_4));        // scope 0 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
        _6 = _2;                         // scope 1 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
        _5 = discriminant((*_6));        // scope 1 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
        _7 = _3;                         // scope 2 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
        _8 = _5;                         // scope 2 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
        _0 = Eq(move _7, move _8);       // scope 2 at ui/const-generics/overlapping_impls.rs:25:10: 25:19
        return;                          // scope 0 at ui/const-generics/overlapping_impls.rs:25:19: 25:19
    }
}

fn <impl at ui/const-generics/overlapping_impls.rs:25:21: 25:23>::assert_receiver_is_total_eq(_1: &Protocol) -> () {
    debug self => _1;                    // in scope 0 at ui/const-generics/overlapping_impls.rs:25:21: 25:23
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/overlapping_impls.rs:25:21: 25:23

    bb0: {
        return;                          // scope 0 at ui/const-generics/overlapping_impls.rs:25:23: 25:23
    }
}

<impl at ui/const-generics/overlapping_impls.rs:33:1: 33:48>::{constant#0}: Protocol = {
    let mut _0: Protocol;                // return place in scope 0 at ui/const-generics/overlapping_impls.rs:33:22: 33:44

    bb0: {
        _0 = Protocol::Variant1;         // scope 0 at ui/const-generics/overlapping_impls.rs:33:24: 33:42
        return;                          // scope 0 at ui/const-generics/overlapping_impls.rs:33:22: 33:44
    }
}

<impl at ui/const-generics/overlapping_impls.rs:34:1: 34:48>::{constant#0}: Protocol = {
    let mut _0: Protocol;                // return place in scope 0 at ui/const-generics/overlapping_impls.rs:34:22: 34:44

    bb0: {
        _0 = Protocol::Variant2;         // scope 0 at ui/const-generics/overlapping_impls.rs:34:24: 34:42
        return;                          // scope 0 at ui/const-generics/overlapping_impls.rs:34:22: 34:44
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/overlapping_impls.rs:36:11: 36:11

    bb0: {
        return;                          // scope 0 at ui/const-generics/overlapping_impls.rs:36:13: 36:13
    }
}
