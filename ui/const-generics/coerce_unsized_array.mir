// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &[u8; N]) -> &[u8] {
    debug v => _1;                       // in scope 0 at ui/const-generics/coerce_unsized_array.rs:2:24: 2:25
    let mut _0: &[u8];                   // return place in scope 0 at ui/const-generics/coerce_unsized_array.rs:2:40: 2:45
    let mut _2: &[u8; N];                // in scope 0 at ui/const-generics/coerce_unsized_array.rs:3:5: 3:6

    bb0: {
        _2 = _1;                         // scope 0 at ui/const-generics/coerce_unsized_array.rs:3:5: 3:6
        _0 = move _2 as &[u8] (Pointer(Unsize)); // scope 0 at ui/const-generics/coerce_unsized_array.rs:3:5: 3:6
        return;                          // scope 0 at ui/const-generics/coerce_unsized_array.rs:4:2: 4:2
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/coerce_unsized_array.rs:2:33: 2:34

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/coerce_unsized_array.rs:2:33: 2:34
        return;                          // scope 0 at ui/const-generics/coerce_unsized_array.rs:2:33: 2:34
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/coerce_unsized_array.rs:6:11: 6:11
    let mut _1: (&&[u8], &&[u8; 2]);     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &&[u8];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: &[u8];                       // in scope 0 at ui/const-generics/coerce_unsized_array.rs:7:16: 7:28
    let mut _4: &[u8; 2];                // in scope 0 at ui/const-generics/coerce_unsized_array.rs:7:20: 7:27
    let _5: &[u8; 2];                    // in scope 0 at ui/const-generics/coerce_unsized_array.rs:7:20: 7:27
    let mut _6: &&[u8; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: &&[u8];                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _8: &&[u8; 2];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: &&[u8];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: &&[u8; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &&[u8];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &&[u8];                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &&[u8; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &&[u8; 2];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: &&[u8; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _22: &[u8; 2];               // in scope 0 at ui/const-generics/coerce_unsized_array.rs:7:20: 7:27
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _22 = const _;                   // scope 0 at ui/const-generics/coerce_unsized_array.rs:7:20: 7:27
                                         // mir::Constant
                                         // + span: ui/const-generics/coerce_unsized_array.rs:7:20: 7:27
                                         // + literal: Const { ty: &[u8; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _5 = _22;                        // scope 0 at ui/const-generics/coerce_unsized_array.rs:7:20: 7:27
        _4 = _5;                         // scope 0 at ui/const-generics/coerce_unsized_array.rs:7:20: 7:27
        _3 = foo::<2>(move _4) -> bb1;   // scope 0 at ui/const-generics/coerce_unsized_array.rs:7:16: 7:28
                                         // mir::Constant
                                         // + span: ui/const-generics/coerce_unsized_array.rs:7:16: 7:19
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 2]) -> &'a [u8] {foo::<2>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u8; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _21;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_1.0: &&[u8]);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_1.1: &&[u8; 2]);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = _8;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = <&[u8] as PartialEq<&[u8; 2]>>::eq(move _11, move _12) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[u8], &'b &[u8; 2]) -> bool {<&[u8] as PartialEq<&[u8; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = Not(move _10);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _13 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<&[u8], &[u8; 2]>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[u8], &'b &[u8; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[u8], &[u8; 2]>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/const-generics/coerce_unsized_array.rs:8:2: 8:2
    }
}

promoted[0] in main: &&[u8; 2] = {
    let mut _0: &&[u8; 2];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u8; 2];                // in scope 0 at ui/const-generics/coerce_unsized_array.rs:7:30: 7:37
    let mut _2: [u8; 2];                 // in scope 0 at ui/const-generics/coerce_unsized_array.rs:7:31: 7:37

    bb0: {
        _2 = [const 1_u8, const 2_u8];   // scope 0 at ui/const-generics/coerce_unsized_array.rs:7:31: 7:37
        _1 = &_2;                        // scope 0 at ui/const-generics/coerce_unsized_array.rs:7:30: 7:37
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[u8; 2] = {
    let mut _0: &[u8; 2];                // return place in scope 0 at ui/const-generics/coerce_unsized_array.rs:7:20: 7:27
    let mut _1: [u8; 2];                 // in scope 0 at ui/const-generics/coerce_unsized_array.rs:7:21: 7:27

    bb0: {
        _1 = [const 1_u8, const 2_u8];   // scope 0 at ui/const-generics/coerce_unsized_array.rs:7:21: 7:27
        _0 = &_1;                        // scope 0 at ui/const-generics/coerce_unsized_array.rs:7:20: 7:27
        return;                          // scope 0 at ui/const-generics/coerce_unsized_array.rs:7:20: 7:27
    }
}
