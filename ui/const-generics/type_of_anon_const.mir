// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/const-generics/type_of_anon_const.rs:9:1: 9:32>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type_of_anon_const.rs:9:24: 9:25

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type_of_anon_const.rs:9:24: 9:25
        return;                          // scope 0 at ui/const-generics/type_of_anon_const.rs:9:24: 9:25
    }
}

fn <impl at ui/const-generics/type_of_anon_const.rs:9:1: 9:32>::l() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type_of_anon_const.rs:10:30: 10:35

    bb0: {
        _0 = const N;                    // scope 0 at ui/const-generics/type_of_anon_const.rs:10:38: 10:39
        return;                          // scope 0 at ui/const-generics/type_of_anon_const.rs:10:41: 10:41
    }
}

fn <impl at ui/const-generics/type_of_anon_const.rs:9:1: 9:32>::r() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/const-generics/type_of_anon_const.rs:11:30: 11:34

    bb0: {
        _0 = const M;                    // scope 0 at ui/const-generics/type_of_anon_const.rs:11:37: 11:38
        return;                          // scope 0 at ui/const-generics/type_of_anon_const.rs:11:40: 11:40
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/const-generics/type_of_anon_const.rs:14:11: 14:11
    let mut _1: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: usize;                       // in scope 0 at ui/const-generics/type_of_anon_const.rs:15:15: 15:41
    let mut _4: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: bool;                   // in scope 0 at ui/const-generics/type_of_anon_const.rs:16:4: 16:39
    let mut _20: bool;                   // in scope 0 at ui/const-generics/type_of_anon_const.rs:16:12: 16:38
    let mut _21: !;                      // in scope 0 at ui/const-generics/type_of_anon_const.rs:16:4: 16:39
    let mut _22: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = <S as T<123>>::l::<true>() -> bb1; // scope 0 at ui/const-generics/type_of_anon_const.rs:15:15: 15:41
                                         // mir::Constant
                                         // + span: ui/const-generics/type_of_anon_const.rs:15:15: 15:39
                                         // + literal: Const { ty: fn() -> usize {<S as T<123>>::l::<true>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _22;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = (*_5);                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = const 123_usize;           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = Eq(move _9, move _10);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<usize, usize>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb3: {
        _20 = <S as T<123>>::r::<true>() -> bb4; // scope 0 at ui/const-generics/type_of_anon_const.rs:16:12: 16:38
                                         // mir::Constant
                                         // + span: ui/const-generics/type_of_anon_const.rs:16:12: 16:36
                                         // + literal: Const { ty: fn() -> bool {<S as T<123>>::r::<true>}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = Not(move _20);             // scope 0 at ui/const-generics/type_of_anon_const.rs:16:4: 16:39
        switchInt(move _19) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/const-generics/type_of_anon_const.rs:16:4: 16:39
    }

    bb5: {
        _21 = core::panicking::panic(const "assertion failed: <S as T<123>>::r::<true>()"); // scope 0 at ui/const-generics/type_of_anon_const.rs:16:4: 16:39
                                         // mir::Constant
                                         // + span: ui/const-generics/type_of_anon_const.rs:16:4: 16:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        return;                          // scope 0 at ui/const-generics/type_of_anon_const.rs:17:2: 17:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/const-generics/type_of_anon_const.rs:15:43: 15:46

    bb0: {
        _1 = const 123_usize;            // scope 0 at ui/const-generics/type_of_anon_const.rs:15:43: 15:46
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type_of_anon_const.rs:15:23: 15:26

    bb0: {
        _0 = const 123_usize;            // scope 0 at ui/const-generics/type_of_anon_const.rs:15:23: 15:26
        return;                          // scope 0 at ui/const-generics/type_of_anon_const.rs:15:23: 15:26
    }
}

main::{constant#1}: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/const-generics/type_of_anon_const.rs:15:34: 15:38

    bb0: {
        _0 = const true;                 // scope 0 at ui/const-generics/type_of_anon_const.rs:15:34: 15:38
        return;                          // scope 0 at ui/const-generics/type_of_anon_const.rs:15:34: 15:38
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/const-generics/type_of_anon_const.rs:16:20: 16:23

    bb0: {
        _0 = const 123_usize;            // scope 0 at ui/const-generics/type_of_anon_const.rs:16:20: 16:23
        return;                          // scope 0 at ui/const-generics/type_of_anon_const.rs:16:20: 16:23
    }
}

main::{constant#3}: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/const-generics/type_of_anon_const.rs:16:31: 16:35

    bb0: {
        _0 = const true;                 // scope 0 at ui/const-generics/type_of_anon_const.rs:16:31: 16:35
        return;                          // scope 0 at ui/const-generics/type_of_anon_const.rs:16:31: 16:35
    }
}
