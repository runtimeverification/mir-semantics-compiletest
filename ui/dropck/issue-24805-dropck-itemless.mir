// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dropck/issue-24805-dropck-itemless.rs:23:9: 23:62>::drop(_1: &mut D_Send<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:24:21: 24:30
    let mut _0: ();                      // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:24:32: 24:32

    bb0: {
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:24:35: 24:35
    }
}

fn <impl at ui/dropck/issue-24805-dropck-itemless.rs:23:9: 23:62>::drop(_1: &mut D_Sized<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:24:21: 24:30
    let mut _0: ();                      // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:24:32: 24:32

    bb0: {
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:24:35: 24:35
    }
}

fn <impl at ui/dropck/issue-24805-dropck-itemless.rs:23:9: 23:62>::drop(_1: &mut D_Sync<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:24:21: 24:30
    let mut _0: ();                      // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:24:32: 24:32

    bb0: {
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:24:35: 24:35
    }
}

fn <impl at ui/dropck/issue-24805-dropck-itemless.rs:23:9: 23:62>::drop(_1: &mut D_UserDefined<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:24:21: 24:30
    let mut _0: ();                      // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:24:32: 24:32

    bb0: {
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:24:35: 24:35
    }
}

fn f_send() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:52:13: 52:13
    let _1: D_Send<&D_Send<i32>>;        // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:41:14: 41:16
    let _2: D_Send<i32>;                 // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:41:18: 41:20
    let mut _3: D_Send<i32>;             // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:43:14: 43:20
    let mut _4: D_Send<&D_Send<i32>>;    // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:45:14: 45:22
    let mut _5: &D_Send<i32>;            // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:45:18: 45:21
    scope 1 {
        debug _d => _1;                  // in scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:41:14: 41:16
        debug d1 => _2;                  // in scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:41:18: 41:20
    }

    bb0: {
        _3 = const D_Send::<i32>(1_i32); // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:43:14: 43:20
                                         // mir::Constant
                                         // + span: ui/dropck/issue-24805-dropck-itemless.rs:43:14: 43:20
                                         // + literal: Const { ty: D_Send<i32>, val: Value(Scalar(0x00000001)) }
        _2 = move _3;                    // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:43:9: 43:11
        _5 = &_2;                        // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:45:18: 45:21
        _4 = D_Send::<&D_Send<i32>>(move _5); // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:45:14: 45:22
        _1 = move _4;                    // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:45:9: 45:11
        drop(_2) -> [return: bb1, unwind: bb3]; // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:49:5: 49:6
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:49:5: 49:6
    }

    bb2: {
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:52:30: 52:30
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:49:5: 49:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:52:1: 52:30
    }
}

fn f_sized() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:53:14: 53:14
    let _1: D_Sized<&D_Sized<i32>>;      // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:41:14: 41:16
    let _2: D_Sized<i32>;                // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:41:18: 41:20
    let mut _3: D_Sized<i32>;            // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:43:14: 43:20
    let mut _4: D_Sized<&D_Sized<i32>>;  // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:45:14: 45:22
    let mut _5: &D_Sized<i32>;           // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:45:18: 45:21
    scope 1 {
        debug _d => _1;                  // in scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:41:14: 41:16
        debug d1 => _2;                  // in scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:41:18: 41:20
    }

    bb0: {
        _3 = const D_Sized::<i32>(1_i32); // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:43:14: 43:20
                                         // mir::Constant
                                         // + span: ui/dropck/issue-24805-dropck-itemless.rs:43:14: 43:20
                                         // + literal: Const { ty: D_Sized<i32>, val: Value(Scalar(0x00000001)) }
        _2 = move _3;                    // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:43:9: 43:11
        _5 = &_2;                        // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:45:18: 45:21
        _4 = D_Sized::<&D_Sized<i32>>(move _5); // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:45:14: 45:22
        _1 = move _4;                    // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:45:9: 45:11
        drop(_2) -> [return: bb1, unwind: bb3]; // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:49:5: 49:6
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:49:5: 49:6
    }

    bb2: {
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:53:32: 53:32
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:49:5: 49:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:53:1: 53:32
    }
}

fn f_sync() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:54:13: 54:13
    let _1: D_Sync<&D_Sync<i32>>;        // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:41:14: 41:16
    let _2: D_Sync<i32>;                 // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:41:18: 41:20
    let mut _3: D_Sync<i32>;             // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:43:14: 43:20
    let mut _4: D_Sync<&D_Sync<i32>>;    // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:45:14: 45:22
    let mut _5: &D_Sync<i32>;            // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:45:18: 45:21
    scope 1 {
        debug _d => _1;                  // in scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:41:14: 41:16
        debug d1 => _2;                  // in scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:41:18: 41:20
    }

    bb0: {
        _3 = const D_Sync::<i32>(1_i32); // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:43:14: 43:20
                                         // mir::Constant
                                         // + span: ui/dropck/issue-24805-dropck-itemless.rs:43:14: 43:20
                                         // + literal: Const { ty: D_Sync<i32>, val: Value(Scalar(0x00000001)) }
        _2 = move _3;                    // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:43:9: 43:11
        _5 = &_2;                        // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:45:18: 45:21
        _4 = D_Sync::<&D_Sync<i32>>(move _5); // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:45:14: 45:22
        _1 = move _4;                    // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:45:9: 45:11
        drop(_2) -> [return: bb1, unwind: bb3]; // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:49:5: 49:6
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:49:5: 49:6
    }

    bb2: {
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:54:30: 54:30
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:49:5: 49:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:54:1: 54:30
    }
}

fn f_userdefined() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:68:20: 68:20
    let _1: D_UserDefined<&D_UserDefined<i32>>; // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:41:14: 41:16
    let _2: D_UserDefined<i32>;          // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:41:18: 41:20
    let mut _3: D_UserDefined<i32>;      // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:43:14: 43:20
    let mut _4: D_UserDefined<&D_UserDefined<i32>>; // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:45:14: 45:22
    let mut _5: &D_UserDefined<i32>;     // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:45:18: 45:21
    scope 1 {
        debug _d => _1;                  // in scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:41:14: 41:16
        debug d1 => _2;                  // in scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:41:18: 41:20
    }

    bb0: {
        _3 = const D_UserDefined::<i32>(1_i32); // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:43:14: 43:20
                                         // mir::Constant
                                         // + span: ui/dropck/issue-24805-dropck-itemless.rs:43:14: 43:20
                                         // + literal: Const { ty: D_UserDefined<i32>, val: Value(Scalar(0x00000001)) }
        _2 = move _3;                    // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:43:9: 43:11
        _5 = &_2;                        // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:45:18: 45:21
        _4 = D_UserDefined::<&D_UserDefined<i32>>(move _5); // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:45:14: 45:22
        _1 = move _4;                    // scope 1 at ui/dropck/issue-24805-dropck-itemless.rs:45:9: 45:11
        drop(_2) -> [return: bb1, unwind: bb3]; // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:49:5: 49:6
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:49:5: 49:6
    }

    bb2: {
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:68:44: 68:44
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:49:5: 49:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:68:1: 68:44
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:70:11: 70:11
    let _1: ();                          // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:71:5: 71:13
    let _2: ();                          // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:72:5: 72:14
    let _3: ();                          // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:75:5: 75:13
    let _4: ();                          // in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:76:5: 76:20

    bb0: {
        _1 = f_send() -> bb1;            // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:71:5: 71:13
                                         // mir::Constant
                                         // + span: ui/dropck/issue-24805-dropck-itemless.rs:71:5: 71:11
                                         // + literal: Const { ty: fn() {f_send}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = f_sized() -> bb2;           // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:72:5: 72:14
                                         // mir::Constant
                                         // + span: ui/dropck/issue-24805-dropck-itemless.rs:72:5: 72:12
                                         // + literal: Const { ty: fn() {f_sized}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = f_sync() -> bb3;            // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:75:5: 75:13
                                         // mir::Constant
                                         // + span: ui/dropck/issue-24805-dropck-itemless.rs:75:5: 75:11
                                         // + literal: Const { ty: fn() {f_sync}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = f_userdefined() -> bb4;     // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:76:5: 76:20
                                         // mir::Constant
                                         // + span: ui/dropck/issue-24805-dropck-itemless.rs:76:5: 76:18
                                         // + literal: Const { ty: fn() {f_userdefined}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:77:2: 77:2
    }
}

fn D_Send(_1: T) -> D_Send<T> {
    let mut _0: D_Send<T>;               // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71

    bb0: {
        _0 = D_Send::<T>(move _1);       // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71
    }
}

// MIR FOR CTFE
fn D_Send(_1: T) -> D_Send<T> {
    let mut _0: D_Send<T>;               // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71

    bb0: {
        _0 = D_Send::<T>(move _1);       // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71
    }
}

fn D_Sized(_1: T) -> D_Sized<T> {
    let mut _0: D_Sized<T>;              // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71

    bb0: {
        _0 = D_Sized::<T>(move _1);      // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71
    }
}

// MIR FOR CTFE
fn D_Sized(_1: T) -> D_Sized<T> {
    let mut _0: D_Sized<T>;              // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71

    bb0: {
        _0 = D_Sized::<T>(move _1);      // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71
    }
}

fn D_Sync(_1: T) -> D_Sync<T> {
    let mut _0: D_Sync<T>;               // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71

    bb0: {
        _0 = D_Sync::<T>(move _1);       // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71
    }
}

// MIR FOR CTFE
fn D_Sync(_1: T) -> D_Sync<T> {
    let mut _0: D_Sync<T>;               // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71

    bb0: {
        _0 = D_Sync::<T>(move _1);       // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71
    }
}

fn D_UserDefined(_1: T) -> D_UserDefined<T> {
    let mut _0: D_UserDefined<T>;        // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71

    bb0: {
        _0 = D_UserDefined::<T>(move _1); // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71
    }
}

// MIR FOR CTFE
fn D_UserDefined(_1: T) -> D_UserDefined<T> {
    let mut _0: D_UserDefined<T>;        // return place in scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71

    bb0: {
        _0 = D_UserDefined::<T>(move _1); // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71
        return;                          // scope 0 at ui/dropck/issue-24805-dropck-itemless.rs:22:9: 22:71
    }
}
