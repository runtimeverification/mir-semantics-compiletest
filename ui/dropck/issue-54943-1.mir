// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: T) -> () {
    debug _t => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let _2: main::A<'_, &str>;
    let mut _3: (std::string::String, main::A<'_, &str>);
    let mut _4: std::string::String;
    let mut _5: main::A<'_, &str>;
    let _6: ();
    let mut _7: (std::string::String, main::A<'_, &str>);
    let mut _8: std::string::String;
    let mut _9: &&str;
    let mut _10: bool;
    scope 1 {
        debug a1 => _1;
        debug a2 => _2;
    }

    bb0: {
        _10 = const false;
        _4 = <String as From<&str>>::from(const "auto") -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = const _;
        _5 = A::<'_, &str>(_9);
        _3 = (move _4, move _5);
        _10 = const true;
        _1 = move (_3.0: std::string::String);
        _2 = move (_3.1: main::A<'_, &str>);
        _10 = const false;
        _8 = move _1;
        _7 = (move _8, move _2);
        _6 = foo::<(String, A<'_, &str>)>(move _7) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _10 = const false;
        return;
    }

    bb3 (cleanup): {
        switchInt(_10) -> [0: bb4, otherwise: bb5];
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "this";
        _0 = &_1;
        return;
    }
}

fn A(_1: &B) -> A<'_, B> {
    let mut _0: main::A<'_, B>;

    bb0: {
        _0 = A::<'_, B>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn A(_1: &B) -> A<'_, B> {
    let mut _0: main::A<'_, B>;

    bb0: {
        _0 = A::<'_, B>(move _1);
        return;
    }
}
