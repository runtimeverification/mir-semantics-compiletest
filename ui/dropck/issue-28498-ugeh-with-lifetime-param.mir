// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dropck/issue-28498-ugeh-with-lifetime-param.rs:10:10: 10:15>::fmt(_1: &ScribbleOnDrop, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&std::string::String;
    let _6: &std::string::String;

    bb0: {
        _3 = const "ScribbleOnDrop";
        _6 = &((*_1).0: std::string::String);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/dropck/issue-28498-ugeh-with-lifetime-param.rs:13:1: 13:29>::drop(_1: &mut ScribbleOnDrop) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: std::string::String;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _6 = const _;
        _5 = _6 as &[&str] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = format(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = move _3;
        drop(((*_1).0: std::string::String)) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        ((*_1).0: std::string::String) = move _2;
        return;
    }

    bb4 (cleanup): {
        ((*_1).0: std::string::String) = move _2;
        resume;
    }
}

promoted[0] in <impl at ui/dropck/issue-28498-ugeh-with-lifetime-param.rs:13:1: 13:29>::drop: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "DROPPED"];
        _0 = &_1;
        return;
    }
}

fn <impl at ui/dropck/issue-28498-ugeh-with-lifetime-param.rs:21:1: 21:47>::drop(_1: &mut Foo<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &u32;
    let mut _10: &[&str; 2];

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (Pointer(Unsize));
        _9 = &((*_1).0: u32);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in <impl at ui/dropck/issue-28498-ugeh-with-lifetime-param.rs:21:1: 21:47>::drop: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Dropping Foo(", const ", _)\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ScribbleOnDrop;
    let _2: Foo<'_>;
    let mut _5: ScribbleOnDrop;
    let mut _6: std::string::String;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: ScribbleOnDrop;
    let mut _11: std::string::String;
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: Foo<'_>;
    let _16: &ScribbleOnDrop;
    let mut _17: Foo<'_>;
    let _18: &ScribbleOnDrop;
    let _19: ();
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let _23: &[core::fmt::rt::Argument<'_>; 2];
    let _24: [core::fmt::rt::Argument<'_>; 2];
    let mut _25: core::fmt::rt::Argument<'_>;
    let _26: &&ScribbleOnDrop;
    let mut _27: core::fmt::rt::Argument<'_>;
    let _28: &&ScribbleOnDrop;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    scope 1 {
        debug last_dropped => _1;
        debug foo0 => _2;
        let _3: Foo<'_>;
        let _4: ScribbleOnDrop;
        scope 2 {
            debug foo1 => _3;
            debug first_dropped => _4;
            let _7: std::string::String;
            let _12: std::string::String;
            let mut _29: &[&str; 3];
            let mut _30: &[&str; 1];
            let mut _31: &[&str; 1];
            scope 3 {
                debug res => _7;
            }
            scope 4 {
                debug res => _12;
            }
        }
    }

    bb0: {
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const _;
        _9 = _31 as &[&str] (Pointer(Unsize));
        _8 = Arguments::<'_>::new_const(move _9) -> [return: bb1, unwind: bb15];
    }

    bb1: {
        _7 = format(move _8) -> [return: bb2, unwind: bb15];
    }

    bb2: {
        _6 = move _7;
        _5 = ScribbleOnDrop(move _6);
        _35 = const true;
        _1 = move _5;
        _30 = const _;
        _14 = _30 as &[&str] (Pointer(Unsize));
        _13 = Arguments::<'_>::new_const(move _14) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _12 = format(move _13) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _11 = move _12;
        _10 = ScribbleOnDrop(move _11);
        _32 = const true;
        _4 = move _10;
        _16 = &_1;
        _15 = Foo::<'_>(const 0_u32, _16);
        _34 = const true;
        _2 = move _15;
        _18 = &_4;
        _17 = Foo::<'_>(const 1_u32, _18);
        _33 = const true;
        _3 = move _17;
        _29 = const _;
        _21 = _29 as &[&str] (Pointer(Unsize));
        _26 = &(_2.1: &ScribbleOnDrop);
        _25 = core::fmt::rt::Argument::<'_>::new_debug::<&ScribbleOnDrop>(_26) -> [return: bb5, unwind: bb15];
    }

    bb5: {
        _28 = &(_3.1: &ScribbleOnDrop);
        _27 = core::fmt::rt::Argument::<'_>::new_debug::<&ScribbleOnDrop>(_28) -> [return: bb6, unwind: bb15];
    }

    bb6: {
        _24 = [move _25, move _27];
        _23 = &_24;
        _22 = _23 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _20 = Arguments::<'_>::new_v1(move _21, move _22) -> [return: bb7, unwind: bb15];
    }

    bb7: {
        _19 = _print(move _20) -> [return: bb8, unwind: bb15];
    }

    bb8: {
        drop(_4) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        _32 = const false;
        drop(_3) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        _33 = const false;
        drop(_2) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        _34 = const false;
        drop(_1) -> [return: bb12, unwind continue];
    }

    bb12: {
        _35 = const false;
        return;
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        drop(_4) -> [return: bb17, unwind terminate];
    }

    bb15 (cleanup): {
        switchInt(_32) -> [0: bb17, otherwise: bb14];
    }

    bb16 (cleanup): {
        drop(_3) -> [return: bb19, unwind terminate];
    }

    bb17 (cleanup): {
        switchInt(_33) -> [0: bb19, otherwise: bb16];
    }

    bb18 (cleanup): {
        drop(_2) -> [return: bb21, unwind terminate];
    }

    bb19 (cleanup): {
        switchInt(_34) -> [0: bb21, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_1) -> [return: bb13, unwind terminate];
    }

    bb21 (cleanup): {
        switchInt(_35) -> [0: bb13, otherwise: bb20];
    }
}

promoted[0] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "foo0.1: ", const " foo1.1: ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "first"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "last"];
        _0 = &_1;
        return;
    }
}

fn ScribbleOnDrop(_1: String) -> ScribbleOnDrop {
    let mut _0: ScribbleOnDrop;

    bb0: {
        _0 = ScribbleOnDrop(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ScribbleOnDrop(_1: String) -> ScribbleOnDrop {
    let mut _0: ScribbleOnDrop;

    bb0: {
        _0 = ScribbleOnDrop(move _1);
        return;
    }
}

fn Foo(_1: u32, _2: &ScribbleOnDrop) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: u32, _2: &ScribbleOnDrop) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1, move _2);
        return;
    }
}
