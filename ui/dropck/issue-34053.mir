// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static DROP_COUNTER: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicUsize::new(const 0_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/dropck/issue-34053.rs:8:1: 8:16>::drop(_1: &mut A) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: usize;
    let _3: &std::sync::atomic::AtomicUsize;
    let mut _4: std::sync::atomic::Ordering;

    bb0: {
        _3 = const {alloc1: &AtomicUsize};
        _4 = SeqCst;
        _2 = AtomicUsize::fetch_add(_3, const 1_usize, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc1 (static: DROP_COUNTER, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

static FOO: A = {
    let mut _0: A;

    bb0: {
        _0 = A(const 123_i32);
        return;
    }
}

const BAR: A = {
    let mut _0: A;

    bb0: {
        _0 = A(const 456_i32);
        return;
    }
}

const <impl at ui/dropck/issue-34053.rs:18:1: 18:7>::BAZ: A = {
    let mut _0: A;

    bb0: {
        _0 = A(const 789_i32);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let _4: &std::sync::atomic::AtomicUsize;
    let mut _5: std::sync::atomic::Ordering;
    let _6: &usize;
    let _7: &usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&&i32, &&i32);
    let mut _16: &&i32;
    let _17: &i32;
    let _18: &A;
    let _19: &&i32;
    let _20: &&i32;
    let mut _21: bool;
    let mut _22: bool;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: (&usize, &usize);
    let mut _27: &usize;
    let _28: usize;
    let _29: &std::sync::atomic::AtomicUsize;
    let mut _30: std::sync::atomic::Ordering;
    let _31: &usize;
    let _32: &usize;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: usize;
    let mut _36: usize;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&i32, &i32);
    let mut _41: &i32;
    let _42: A;
    let _43: &i32;
    let _44: &i32;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: i32;
    let mut _48: i32;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: (&usize, &usize);
    let mut _53: &usize;
    let _54: usize;
    let _55: &std::sync::atomic::AtomicUsize;
    let mut _56: std::sync::atomic::Ordering;
    let _57: &usize;
    let _58: &usize;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: usize;
    let mut _62: usize;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: (&i32, &i32);
    let mut _67: &i32;
    let _68: A;
    let _69: &i32;
    let _70: &i32;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: i32;
    let mut _74: i32;
    let _76: !;
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _78: (&usize, &usize);
    let mut _79: &usize;
    let _80: usize;
    let _81: &std::sync::atomic::AtomicUsize;
    let mut _82: std::sync::atomic::Ordering;
    let _83: &usize;
    let _84: &usize;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: usize;
    let mut _88: usize;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: &usize;
    let mut _93: &i32;
    let mut _94: &usize;
    let mut _95: &i32;
    let mut _96: &usize;
    let mut _97: &&i32;
    let mut _98: &usize;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _19;
        debug right_val => _20;
        let _23: core::panicking::AssertKind;
        scope 4 {
            debug kind => _23;
        }
    }
    scope 5 {
        debug left_val => _31;
        debug right_val => _32;
        let _37: core::panicking::AssertKind;
        scope 6 {
            debug kind => _37;
        }
    }
    scope 7 {
        debug left_val => _43;
        debug right_val => _44;
        let _49: core::panicking::AssertKind;
        scope 8 {
            debug kind => _49;
        }
    }
    scope 9 {
        debug left_val => _57;
        debug right_val => _58;
        let _63: core::panicking::AssertKind;
        scope 10 {
            debug kind => _63;
        }
    }
    scope 11 {
        debug left_val => _69;
        debug right_val => _70;
        let _75: core::panicking::AssertKind;
        scope 12 {
            debug kind => _75;
        }
    }
    scope 13 {
        debug left_val => _83;
        debug right_val => _84;
        let _89: core::panicking::AssertKind;
        scope 14 {
            debug kind => _89;
        }
    }

    bb0: {
        _4 = const {alloc1: &AtomicUsize};
        _5 = SeqCst;
        _3 = AtomicUsize::load(_4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _98 = const _;
        _1 = (move _2, _98);
        _6 = (_1.0: &usize);
        _7 = (_1.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _18 = const {alloc2: &A};
        _17 = &((*_18).0: i32);
        _16 = &_17;
        _97 = const _;
        _15 = (move _16, _97);
        _19 = (_15.0: &&i32);
        _20 = (_15.1: &&i32);
        _22 = <&i32 as PartialEq>::eq(_19, _20) -> [return: bb4, unwind continue];
    }

    bb4: {
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<&i32, &i32>(move _23, _19, _20, move _25) -> unwind continue;
    }

    bb6: {
        _29 = const {alloc1: &AtomicUsize};
        _30 = SeqCst;
        _28 = AtomicUsize::load(_29, move _30) -> [return: bb7, unwind continue];
    }

    bb7: {
        _27 = &_28;
        _96 = const _;
        _26 = (move _27, _96);
        _31 = (_26.0: &usize);
        _32 = (_26.1: &usize);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<usize, usize>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb9: {
        _42 = const _;
        _41 = &(_42.0: i32);
        _95 = const _;
        _40 = (move _41, _95);
        _43 = (_40.0: &i32);
        _44 = (_40.1: &i32);
        _47 = (*_43);
        _48 = (*_44);
        _46 = Eq(move _47, move _48);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<i32, i32>(move _49, _43, _44, move _51) -> bb23;
    }

    bb11: {
        drop(_42) -> [return: bb12, unwind continue];
    }

    bb12: {
        _55 = const {alloc1: &AtomicUsize};
        _56 = SeqCst;
        _54 = AtomicUsize::load(_55, move _56) -> [return: bb13, unwind continue];
    }

    bb13: {
        _53 = &_54;
        _94 = const _;
        _52 = (move _53, _94);
        _57 = (_52.0: &usize);
        _58 = (_52.1: &usize);
        _61 = (*_57);
        _62 = (*_58);
        _60 = Eq(move _61, move _62);
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<usize, usize>(move _63, _57, _58, move _65) -> unwind continue;
    }

    bb15: {
        _68 = const _;
        _67 = &(_68.0: i32);
        _93 = const _;
        _66 = (move _67, _93);
        _69 = (_66.0: &i32);
        _70 = (_66.1: &i32);
        _73 = (*_69);
        _74 = (*_70);
        _72 = Eq(move _73, move _74);
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _75 = core::panicking::AssertKind::Eq;
        _77 = Option::<Arguments<'_>>::None;
        _76 = core::panicking::assert_failed::<i32, i32>(move _75, _69, _70, move _77) -> bb22;
    }

    bb17: {
        drop(_68) -> [return: bb18, unwind continue];
    }

    bb18: {
        _81 = const {alloc1: &AtomicUsize};
        _82 = SeqCst;
        _80 = AtomicUsize::load(_81, move _82) -> [return: bb19, unwind continue];
    }

    bb19: {
        _79 = &_80;
        _92 = const _;
        _78 = (move _79, _92);
        _83 = (_78.0: &usize);
        _84 = (_78.1: &usize);
        _87 = (*_83);
        _88 = (*_84);
        _86 = Eq(move _87, move _88);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<usize, usize>(move _89, _83, _84, move _91) -> unwind continue;
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_68) -> [return: bb24, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_42) -> [return: bb24, unwind terminate];
    }

    bb24 (cleanup): {
        resume;
    }
}

alloc2 (static: FOO, size: 4, align: 4) {
    7b 00 00 00                                     â”‚ {...
}

alloc1 (static: DROP_COUNTER, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 789_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 456_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &&i32 = {
    let mut _0: &&i32;
    let mut _1: &i32;
    let mut _2: i32;

    bb0: {
        _2 = const 123_i32;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

fn A(_1: i32) -> A {
    let mut _0: A;

    bb0: {
        _0 = A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn A(_1: i32) -> A {
    let mut _0: A;

    bb0: {
        _0 = A(move _1);
        return;
    }
}
