// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/impl-inherent-non-conflict.rs:9:1: 9:16>::bar(_1: &Foo<usize>) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: usize;

    bb0: {
        _2 = ((*_1).0: usize);
        _0 = move _2 as i32 (IntToInt);
        return;
    }
}

fn <impl at ui/impl-inherent-non-conflict.rs:13:1: 13:16>::bar(_1: &Foo<isize>) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: i32;
    let mut _3: isize;

    bb0: {
        _3 = ((*_1).0: isize);
        _2 = move _3 as i32 (IntToInt);
        _0 = Neg(move _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo<usize>;
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: i32;
    let mut _5: &Foo<usize>;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&i32, &i32);
    let mut _17: &i32;
    let _18: i32;
    let mut _19: &Foo<isize>;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: i32;
    let mut _25: i32;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo_u => _1;
        let _6: &i32;
        let _7: &i32;
        let _15: Foo<isize>;
        let mut _30: &i32;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug foo_i => _15;
            let _20: &i32;
            let _21: &i32;
            let mut _29: &i32;
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _26: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _26;
                }
            }
        }
    }

    bb0: {
        _1 = Foo::<usize>(const 5_usize);
        _5 = &_1;
        _4 = Foo::<usize>::bar(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _30 = const _;
        _2 = (move _3, _30);
        _6 = (_2.0: &i32);
        _7 = (_2.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _15 = Foo::<isize>(const 3_isize);
        _19 = &_15;
        _18 = Foo::<isize>::bar(move _19) -> [return: bb4, unwind continue];
    }

    bb4: {
        _17 = &_18;
        _29 = const _;
        _16 = (move _17, _29);
        _20 = (_16.0: &i32);
        _21 = (_16.1: &i32);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<i32, i32>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -3_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}
