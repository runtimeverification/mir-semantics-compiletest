// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/structs/rhs-type.rs:15:11: 15:11
    let _1: std::string::String;         // in scope 0 at ui/structs/rhs-type.rs:16:9: 16:12
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    scope 1 {
        debug pth => _1;                 // in scope 1 at ui/structs/rhs-type.rs:16:9: 16:12
        let _3: T;                       // in scope 1 at ui/structs/rhs-type.rs:17:9: 17:12
        scope 2 {
            debug _rs => _3;             // in scope 2 at ui/structs/rhs-type.rs:17:9: 17:12
        }
    }

    bb0: {
        _2 = begin_panic::<&str>(const "bye"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/structs/rhs-type.rs:16:22: 16:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}
