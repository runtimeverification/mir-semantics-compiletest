// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/structs/large-records.rs:22:8: 22:8
    let _1: Large;                       // in scope 0 at ui/structs/large-records.rs:23:9: 23:13
    scope 1 {
        debug _foo => _1;                // in scope 1 at ui/structs/large-records.rs:23:9: 23:13
    }

    bb0: {
        _1 = Large { a: const 0_isize, b: const 0_isize, c: const 0_isize, d: const 0_isize, e: const 0_isize, f: const 0_isize, g: const 0_isize, h: const 0_isize, i: const 0_isize, j: const 0_isize, k: const 0_isize, l: const 0_isize }; // scope 0 at ui/structs/large-records.rs:24:9: 35:15
        return;                          // scope 0 at ui/structs/large-records.rs:36:2: 36:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/structs/large-records.rs:38:15: 38:15
    let _1: ();                          // in scope 0 at ui/structs/large-records.rs:38:17: 38:20

    bb0: {
        _1 = f() -> bb1;                 // scope 0 at ui/structs/large-records.rs:38:17: 38:20
                                         // mir::Constant
                                         // + span: ui/structs/large-records.rs:38:17: 38:18
                                         // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/structs/large-records.rs:38:23: 38:23
    }
}
