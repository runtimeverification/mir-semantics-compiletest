// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/structs/struct-record-suggestion_fixed.rs:2:10: 2:15>::fmt(_1: &A, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:10: 2:15
    debug f => _2;                       // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:10: 2:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:10: 2:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:10: 2:15
    let mut _4: &str;                    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:10: 2:15
    let _5: &str;                        // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:10: 2:15
    let mut _6: &str;                    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
    let _7: &str;                        // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
    let mut _9: &u32;                    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
    let _10: &u32;                       // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
    let mut _11: &str;                   // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
    let _12: &str;                       // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
    let mut _14: &u64;                   // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
    let _15: &u64;                       // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
    let mut _16: &str;                   // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
    let _17: &str;                       // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
    let mut _18: &dyn std::fmt::Debug;   // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
    let mut _19: &&usize;                // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
    let _20: &&usize;                    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
    let _21: &usize;                     // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:10: 2:15
        _5 = const "A";                  // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:10: 2:15
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:2:10: 2:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:10: 2:15
        _7 = const "b";                  // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
        _10 = &((*_1).0: u32);           // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
        _9 = _10;                        // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
        _12 = const "c";                 // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
        _15 = &((*_1).1: u64);           // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
        _14 = _15;                       // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
        _17 = const "d";                 // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _16 = _17;                       // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
        _21 = &((*_1).2: usize);         // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
        _20 = &_21;                      // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
        _19 = _20;                       // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
        _18 = move _19 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
        _0 = Formatter::<'_>::debug_struct_field3_finish(move _3, move _4, move _6, move _8, move _11, move _13, move _16, move _18) -> bb1; // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:10: 2:15
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:2:10: 2:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:15: 2:15
    }
}

fn <impl at ui/structs/struct-record-suggestion_fixed.rs:2:17: 2:24>::default() -> A {
    let mut _0: A;                       // return place in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:17: 2:24
    let mut _1: u32;                     // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
    let mut _2: u64;                     // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
    let mut _3: usize;                   // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13

    bb0: {
        _1 = <u32 as Default>::default() -> bb1; // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <u64 as Default>::default() -> bb2; // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
                                         // + literal: Const { ty: fn() -> u64 {<u64 as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <usize as Default>::default() -> bb3; // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
                                         // + literal: Const { ty: fn() -> usize {<usize as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = A { b: move _1, c: move _2, d: move _3 }; // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:17: 2:24
        return;                          // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:24: 2:24
    }
}

fn <impl at ui/structs/struct-record-suggestion_fixed.rs:2:26: 2:28>::assert_receiver_is_total_eq(_1: &A) -> () {
    debug self => _1;                    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:26: 2:28
    let mut _0: ();                      // return place in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:26: 2:28
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;                          // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:28: 2:28
    }
}

fn <impl at ui/structs/struct-record-suggestion_fixed.rs:2:30: 2:39>::eq(_1: &A, _2: &A) -> bool {
    debug self => _1;                    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:30: 2:39
    debug other => _2;                   // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:30: 2:39
    let mut _0: bool;                    // return place in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:30: 2:39
    let mut _3: bool;                    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
    let mut _4: bool;                    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
    let mut _5: u32;                     // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
    let mut _6: u32;                     // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
    let mut _7: bool;                    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
    let mut _8: u64;                     // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
    let mut _9: u64;                     // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
    let mut _10: bool;                   // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
    let mut _11: usize;                  // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
    let mut _12: usize;                  // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13

    bb0: {
        _5 = ((*_1).0: u32);             // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
        _6 = ((*_2).0: u32);             // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
        _4 = Eq(move _5, move _6);       // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:4:5: 4:11
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
        goto -> bb3;                     // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
    }

    bb2: {
        _11 = ((*_1).2: usize);          // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
        _12 = ((*_2).2: usize);          // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
        _10 = Eq(move _11, move _12);    // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
        _0 = move _10;                   // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
        goto -> bb3;                     // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
    }

    bb3: {
        return;                          // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:2:39: 2:39
    }

    bb4: {
        _3 = const false;                // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
        goto -> bb6;                     // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
    }

    bb5: {
        _8 = ((*_1).1: u64);             // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
        _9 = ((*_2).1: u64);             // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
        _7 = Eq(move _8, move _9);       // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
        _3 = move _7;                    // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
        goto -> bb6;                     // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:5:5: 5:11
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:6:5: 6:13
    }
}

fn a() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:9:8: 9:8
    let _1: A;                           // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:10:9: 10:10
    let mut _2: A;                       // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:10:25: 10:43
    let mut _4: A;                       // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:13:25: 13:43
    let mut _5: (&A, &A);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &A;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _7: &A;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: &A;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: &A;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &A;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &A;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &A;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &A;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug q => _1;                   // in scope 1 at ui/structs/struct-record-suggestion_fixed.rs:10:9: 10:10
        let _3: A;                       // in scope 1 at ui/structs/struct-record-suggestion_fixed.rs:13:9: 13:10
        scope 2 {
            debug r => _3;               // in scope 2 at ui/structs/struct-record-suggestion_fixed.rs:13:9: 13:10
            let _8: &A;                  // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _9: &A;                  // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _8;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _9;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _14: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _14;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _2 = <A as Default>::default() -> bb1; // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:10:25: 10:43
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:10:25: 10:41
                                         // + literal: Const { ty: fn() -> A {<A as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { b: (_2.0: u32), c: const 5_u64, d: (_2.2: usize) }; // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:10:13: 10:45
        _4 = <A as Default>::default() -> bb2; // scope 1 at ui/structs/struct-record-suggestion_fixed.rs:13:25: 13:43
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:13:25: 13:41
                                         // + literal: Const { ty: fn() -> A {<A as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = A { b: (_4.0: u32), c: const 5_u64, d: (_4.2: usize) }; // scope 1 at ui/structs/struct-record-suggestion_fixed.rs:13:13: 13:45
        _6 = &_1;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = &_3;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _7);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_5.0: &A);                 // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_5.1: &A);                 // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = <A as PartialEq>::eq(move _12, move _13) -> bb3; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b A) -> bool {<A as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = Not(move _11);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _14 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<A, A>(move _16, move _17, move _19, move _21); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a A, &'b A, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<A, A>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:15:2: 15:2
    }
}

fn <impl at ui/structs/struct-record-suggestion_fixed.rs:17:10: 17:15>::fmt(_1: &B, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:10: 17:15
    debug f => _2;                       // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:10: 17:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:10: 17:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:10: 17:15
    let mut _4: &str;                    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:10: 17:15
    let _5: &str;                        // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:10: 17:15
    let mut _6: &str;                    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
    let _7: &str;                        // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
    let mut _9: &&u32;                   // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
    let _10: &&u32;                      // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
    let _11: &u32;                       // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:10: 17:15
        _5 = const "B";                  // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:10: 17:15
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:17:10: 17:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:10: 17:15
        _7 = const "b";                  // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
        _11 = &((*_1).0: u32);           // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
        _10 = &_11;                      // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
        _9 = _10;                        // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:10: 17:15
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:17:10: 17:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:15: 17:15
    }
}

fn <impl at ui/structs/struct-record-suggestion_fixed.rs:17:17: 17:24>::default() -> B {
    let mut _0: B;                       // return place in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:17: 17:24
    let mut _1: u32;                     // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11

    bb0: {
        _1 = <u32 as Default>::default() -> bb1; // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = B { b: move _1 };           // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:17: 17:24
        return;                          // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:24: 17:24
    }
}

fn <impl at ui/structs/struct-record-suggestion_fixed.rs:17:26: 17:28>::assert_receiver_is_total_eq(_1: &B) -> () {
    debug self => _1;                    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:26: 17:28
    let mut _0: ();                      // return place in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:26: 17:28
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:28: 17:28
    }
}

fn <impl at ui/structs/struct-record-suggestion_fixed.rs:17:30: 17:39>::eq(_1: &B, _2: &B) -> bool {
    debug self => _1;                    // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:30: 17:39
    debug other => _2;                   // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:30: 17:39
    let mut _0: bool;                    // return place in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:30: 17:39
    let mut _3: u32;                     // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
    let mut _4: u32;                     // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11

    bb0: {
        _3 = ((*_1).0: u32);             // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
        _4 = ((*_2).0: u32);             // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
        _0 = Eq(move _3, move _4);       // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:19:5: 19:11
        return;                          // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:17:39: 17:39
    }
}

fn b() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:22:8: 22:8
    let _1: B;                           // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:23:9: 23:10
    let mut _2: B;                       // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:23:25: 23:43
    let mut _4: (&B, &B);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &B;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _6: &B;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: &B;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: &B;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &B;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &B;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &B;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &B;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug q => _1;                   // in scope 1 at ui/structs/struct-record-suggestion_fixed.rs:23:9: 23:10
        let _3: B;                       // in scope 1 at ui/structs/struct-record-suggestion_fixed.rs:26:9: 26:10
        scope 2 {
            debug r => _3;               // in scope 2 at ui/structs/struct-record-suggestion_fixed.rs:26:9: 26:10
            let _7: &B;                  // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _8: &B;                  // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _7;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _8;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _13: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _13;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _2 = <B as Default>::default() -> bb1; // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:23:25: 23:43
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:23:25: 23:41
                                         // + literal: Const { ty: fn() -> B {<B as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = B { b: const 1_u32 };       // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:23:13: 23:45
        _3 = B { b: const 1_u32 };       // scope 1 at ui/structs/struct-record-suggestion_fixed.rs:26:13: 26:23
        _5 = &_1;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _6 = &_3;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _6);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_4.0: &B);                 // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_4.1: &B);                 // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = <B as PartialEq>::eq(move _11, move _12) -> bb2; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b B) -> bool {<B as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = Not(move _10);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _13 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<B, B>(move _15, move _16, move _18, move _20); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a B, &'b B, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<B, B>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:28:2: 28:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:30:11: 30:11
    let _1: ();                          // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:31:5: 31:8
    let _2: ();                          // in scope 0 at ui/structs/struct-record-suggestion_fixed.rs:32:5: 32:8

    bb0: {
        _1 = a() -> bb1;                 // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:31:5: 31:8
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:31:5: 31:6
                                         // + literal: Const { ty: fn() {a}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = b() -> bb2;                 // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:32:5: 32:8
                                         // mir::Constant
                                         // + span: ui/structs/struct-record-suggestion_fixed.rs:32:5: 32:6
                                         // + literal: Const { ty: fn() {b}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/structs/struct-record-suggestion_fixed.rs:33:2: 33:2
    }
}
