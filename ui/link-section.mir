// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn i_live_in_more_text() -> &str {
    let mut _0: &str;                    // return place in scope 0 at ui/link-section.rs:6:29: 6:41

    bb0: {
        _0 = const "knock knock";        // scope 0 at ui/link-section.rs:7:5: 7:18
                                         // mir::Constant
                                         // + span: ui/link-section.rs:7:5: 7:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/link-section.rs:8:2: 8:2
    }
}

static magic: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/link-section.rs:12:15: 12:20

    bb0: {
        _0 = const 42_usize;             // scope 0 at ui/link-section.rs:12:23: 12:25
        return;                          // scope 0 at ui/link-section.rs:12:1: 12:26
    }
}

static mut frobulator: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/link-section.rs:16:24: 16:29

    bb0: {
        _0 = const 3735928559_usize;     // scope 0 at ui/link-section.rs:16:32: 16:42
        return;                          // scope 0 at ui/link-section.rs:16:1: 16:43
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/link-section.rs:32:15: 32:15
    let mut _1: *mut usize;              // in scope 0 at ui/link-section.rs:34:9: 34:19
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/link-section.rs:35:18: 35:28
    let mut _5: &[&str; 4];              // in scope 0 at ui/link-section.rs:35:18: 35:28
    let _6: &[&str; 4];                  // in scope 0 at ui/link-section.rs:35:18: 35:28
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/link-section.rs:35:30: 35:51
    let mut _12: &&str;                  // in scope 0 at ui/link-section.rs:35:30: 35:51
    let _13: &&str;                      // in scope 0 at ui/link-section.rs:35:30: 35:51
    let _14: &str;                       // in scope 0 at ui/link-section.rs:35:30: 35:51
    let mut _15: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/link-section.rs:35:53: 35:58
    let mut _16: &usize;                 // in scope 0 at ui/link-section.rs:35:53: 35:58
    let _17: &usize;                     // in scope 0 at ui/link-section.rs:35:53: 35:58
    let _18: &usize;                     // in scope 0 at ui/link-section.rs:35:53: 35:58
    let mut _19: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/link-section.rs:35:60: 35:70
    let mut _20: &usize;                 // in scope 0 at ui/link-section.rs:35:60: 35:70
    let _21: &usize;                     // in scope 0 at ui/link-section.rs:35:60: 35:70
    let _22: *mut usize;                 // in scope 0 at ui/link-section.rs:35:60: 35:70
    scope 1 {
        let mut _23: &[&str; 4];         // in scope 1 at ui/link-section.rs:35:18: 35:28
    }

    bb0: {
        _1 = const {alloc1: *mut usize}; // scope 1 at ui/link-section.rs:34:9: 34:19
                                         // mir::Constant
                                         // + span: ui/link-section.rs:34:9: 34:19
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc1)) }
        (*_1) = const 305419896_usize;   // scope 1 at ui/link-section.rs:34:9: 34:32
        _23 = const _;                   // scope 1 at ui/link-section.rs:35:18: 35:28
                                         // mir::Constant
                                         // + span: ui/link-section.rs:35:18: 35:28
                                         // + literal: Const { ty: &[&str; 4], val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _23;                        // scope 1 at ui/link-section.rs:35:18: 35:28
        _5 = _6;                         // scope 1 at ui/link-section.rs:35:18: 35:28
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 1 at ui/link-section.rs:35:18: 35:28
        _14 = i_live_in_more_text() -> bb1; // scope 1 at ui/link-section.rs:35:30: 35:51
                                         // mir::Constant
                                         // + span: ui/link-section.rs:35:30: 35:49
                                         // + literal: Const { ty: fn() -> &'static str {i_live_in_more_text}, val: Value(<ZST>) }
    }

    bb1: {
        _13 = &_14;                      // scope 1 at ui/link-section.rs:35:30: 35:51
        _12 = _13;                       // scope 1 at ui/link-section.rs:35:30: 35:51
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _12) -> bb2; // scope 1 at ui/link-section.rs:35:30: 35:51
                                         // mir::Constant
                                         // + span: ui/link-section.rs:35:30: 35:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb2: {
        _18 = const {alloc2: &usize};    // scope 1 at ui/link-section.rs:35:53: 35:58
                                         // mir::Constant
                                         // + span: ui/link-section.rs:35:53: 35:58
                                         // + literal: Const { ty: &usize, val: Value(Scalar(alloc2)) }
        _17 = _18;                       // scope 1 at ui/link-section.rs:35:53: 35:58
        _16 = _17;                       // scope 1 at ui/link-section.rs:35:53: 35:58
        _15 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _16) -> bb3; // scope 1 at ui/link-section.rs:35:53: 35:58
                                         // mir::Constant
                                         // + span: ui/link-section.rs:35:53: 35:58
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb3: {
        _22 = const {alloc1: *mut usize}; // scope 1 at ui/link-section.rs:35:60: 35:70
                                         // mir::Constant
                                         // + span: ui/link-section.rs:35:60: 35:70
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc1)) }
        _21 = &(*_22);                   // scope 1 at ui/link-section.rs:35:60: 35:70
        _20 = _21;                       // scope 1 at ui/link-section.rs:35:60: 35:70
        _19 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _20) -> bb4; // scope 1 at ui/link-section.rs:35:60: 35:70
                                         // mir::Constant
                                         // + span: ui/link-section.rs:35:60: 35:70
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = [move _11, move _15, move _19]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb5; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _2 = _print(move _3) -> bb6;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/link-section.rs:37:2: 37:2
    }
}

alloc2 (static: magic, size: 8, align: 8) {
    2a 00 00 00 00 00 00 00                         │ *.......
}

alloc1 (static: frobulator, size: 8, align: 8) {
    ef be ad de 00 00 00 00                         │ ........
}

promoted[0] in main: &[&str; 4] = {
    let mut _0: &[&str; 4];              // return place in scope 0 at ui/link-section.rs:35:18: 35:28
    let mut _1: [&str; 4];               // in scope 0 at ui/link-section.rs:35:18: 35:28

    bb0: {
        _1 = [const "", const " ", const " ", const "\n"]; // scope 0 at ui/link-section.rs:35:18: 35:28
                                         // mir::Constant
                                         // + span: ui/link-section.rs:35:18: 35:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/link-section.rs:35:18: 35:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/link-section.rs:35:18: 35:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/link-section.rs:35:18: 35:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/link-section.rs:35:18: 35:28
        return;                          // scope 0 at ui/link-section.rs:35:18: 35:28
    }
}
