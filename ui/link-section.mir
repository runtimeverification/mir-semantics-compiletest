// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn i_live_in_more_text() -> &str {
    let mut _0: &str;

    bb0: {
        _0 = const "knock knock";
        return;
    }
}

static magic: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 42_usize;
        return;
    }
}

static mut frobulator: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3735928559_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: *mut usize;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 3];
    let _7: [core::fmt::rt::Argument<'_>; 3];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &&str;
    let _10: &str;
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &usize;
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &usize;
    let _15: *mut usize;
    scope 1 {
        let mut _16: &[&str; 4];
        let mut _17: *const ();
        let mut _18: usize;
        let mut _19: usize;
        let mut _20: usize;
        let mut _21: usize;
        let mut _22: bool;
        let mut _23: *const ();
        let mut _24: usize;
        let mut _25: usize;
        let mut _26: usize;
        let mut _27: usize;
        let mut _28: bool;
    }

    bb0: {
        _1 = const {alloc1: *mut usize};
        _23 = _1 as *const () (PtrToPtr);
        _24 = _23 as usize (Transmute);
        _25 = AlignOf(usize);
        _26 = Sub(_25, const 1_usize);
        _27 = BitAnd(_24, _26);
        _28 = Eq(_27, const 0_usize);
        assert(_28, "misaligned pointer dereference: address must be a multiple of {} but is {}", _25, _24) -> [success: bb8, unwind unreachable];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = const {alloc2: &usize};
        _11 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_12) -> [return: bb3, unwind continue];
    }

    bb3: {
        _15 = const {alloc1: *mut usize};
        _17 = _15 as *const () (PtrToPtr);
        _18 = _17 as usize (Transmute);
        _19 = AlignOf(usize);
        _20 = Sub(_19, const 1_usize);
        _21 = BitAnd(_18, _20);
        _22 = Eq(_21, const 0_usize);
        assert(_22, "misaligned pointer dereference: address must be a multiple of {} but is {}", _19, _18) -> [success: bb7, unwind unreachable];
    }

    bb4: {
        _7 = [move _8, move _11, move _13];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _2 = _print(move _3) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7: {
        _14 = &(*_15);
        _13 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_14) -> [return: bb4, unwind continue];
    }

    bb8: {
        (*_1) = const 305419896_usize;
        _16 = const _;
        _4 = _16 as &[&str] (Pointer(Unsize));
        _10 = i_live_in_more_text() -> [return: bb1, unwind continue];
    }
}

alloc2 (static: magic, size: 8, align: 8) {
    2a 00 00 00 00 00 00 00                         │ *.......
}

alloc1 (static: frobulator, size: 8, align: 8) {
    ef be ad de 00 00 00 00                         │ ........
}

promoted[0] in main: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "", const " ", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}
