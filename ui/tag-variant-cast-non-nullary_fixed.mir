// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/tag-variant-cast-non-nullary_fixed.rs:8:1: 8:32>::from(_1: NonNullary) -> isize {
    debug val => _1;                     // in scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:9:13: 9:16
    let mut _0: isize;                   // return place in scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:9:33: 9:38
    let mut _2: isize;                   // in scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:11:13: 11:32
    let _3: isize;                       // in scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:12:31: 12:32
    scope 1 {
        debug i => _3;                   // in scope 1 at ui/tag-variant-cast-non-nullary_fixed.rs:12:31: 12:32
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:10:15: 10:18
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:10:9: 10:18
    }

    bb1: {
        _3 = ((_1 as Other).0: isize);   // scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:12:31: 12:32
        _0 = _3;                         // scope 1 at ui/tag-variant-cast-non-nullary_fixed.rs:12:37: 12:38
        goto -> bb4;                     // scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:12:37: 12:38
    }

    bb2: {
        unreachable;                     // scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:10:15: 10:18
    }

    bb3: {
        _0 = const 0_isize;              // scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:11:36: 11:37
        goto -> bb4;                     // scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:11:36: 11:37
    }

    bb4: {
        return;                          // scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:14:6: 14:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:17:11: 17:11
    let _1: NonNullary;                  // in scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:18:9: 18:10
    let mut _3: NonNullary;              // in scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:19:27: 19:28
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/tag-variant-cast-non-nullary_fixed.rs:18:9: 18:10
        let _2: isize;                   // in scope 1 at ui/tag-variant-cast-non-nullary_fixed.rs:19:9: 19:12
        scope 2 {
            debug val => _2;             // in scope 2 at ui/tag-variant-cast-non-nullary_fixed.rs:19:9: 19:12
        }
    }

    bb0: {
        _1 = NonNullary::Nullary;        // scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:18:13: 18:32
        _3 = move _1;                    // scope 1 at ui/tag-variant-cast-non-nullary_fixed.rs:19:27: 19:28
        _2 = <isize as From<NonNullary>>::from(move _3) -> bb1; // scope 1 at ui/tag-variant-cast-non-nullary_fixed.rs:19:15: 19:29
                                         // mir::Constant
                                         // + span: ui/tag-variant-cast-non-nullary_fixed.rs:19:15: 19:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(NonNullary) -> isize {<isize as From<NonNullary>>::from}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:20:2: 20:2
    }
}

fn NonNullary::Other(_1: isize) -> NonNullary {
    let mut _0: NonNullary;              // return place in scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:5:5: 5:10

    bb0: {
        _0 = NonNullary::Other(move _1); // scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:5:5: 5:10
        return;                          // scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:5:5: 5:10
    }
}

// MIR FOR CTFE
fn NonNullary::Other(_1: isize) -> NonNullary {
    let mut _0: NonNullary;              // return place in scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:5:5: 5:10

    bb0: {
        _0 = NonNullary::Other(move _1); // scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:5:5: 5:10
        return;                          // scope 0 at ui/tag-variant-cast-non-nullary_fixed.rs:5:5: 5:10
    }
}
