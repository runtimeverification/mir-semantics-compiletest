// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn noop() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issue-62658.rs:7:17: 7:17
    let mut _1: [async fn body@ui/async-await/issue-62658.rs:7:17: 7:19]; // in scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19

    bb0: {
        _1 = [generator@ui/async-await/issue-62658.rs:7:17: 7:19 (#0)]; // scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19
                                         // generator
                                         // + def_id: DefId(0:4 ~ issue_62658[99c2]::noop::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issue-62658.rs:7:17: 7:19]>(move _1) -> bb1; // scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:7:17: 7:19
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issue-62658.rs:7:17: 7:19]) -> [async fn body@ui/async-await/issue-62658.rs:7:17: 7:19] {identity_future::<(), [async fn body@ui/async-await/issue-62658.rs:7:17: 7:19]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issue-62658.rs:7:19: 7:19
    }
}

fn noop::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issue-62658.rs:7:17: 7:19]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19
    let mut _3: ();                      // in scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19
    let mut _5: u32;                     // in scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19
    let mut _6: &mut [async fn body@ui/async-await/issue-62658.rs:7:17: 7:19]; // in scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19
    let mut _7: &mut [async fn body@ui/async-await/issue-62658.rs:7:17: 7:19]; // in scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19

    bb0: {
        _6 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:7:17: 7:19]); // scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19
        _3 = const ();                   // scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/issue-62658.rs:7:19: 7:19
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:7:17: 7:19]); // scope 0 at ui/async-await/issue-62658.rs:7:19: 7:19
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/issue-62658.rs:7:19: 7:19
        return;                          // scope 0 at ui/async-await/issue-62658.rs:7:19: 7:19
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/issue-62658.rs:7:17: 7:19
    }
}

fn foo() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issue-62658.rs:9:16: 9:16
    let mut _1: [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]; // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2

    bb0: {
        _1 = [generator@ui/async-await/issue-62658.rs:9:16: 23:2 (#0)]; // scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
                                         // generator
                                         // + def_id: DefId(0:6 ~ issue_62658[99c2]::foo::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, [u8; 17], impl std::future::Future<Output = ()>, (), u64},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]>(move _1) -> bb1; // scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:9:16: 23:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]) -> [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2] {identity_future::<(), [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issue-62658.rs:23:2: 23:2
    }
}

fn foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _54;          // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _3: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-62658.rs:13:15: 13:21
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-62658.rs:13:9: 13:15
    let mut _5: std::task::Poll<()>;     // in scope 0 at ui/async-await/issue-62658.rs:13:15: 13:21
    let mut _6: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/issue-62658.rs:13:15: 13:21
    let mut _7: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-62658.rs:13:15: 13:21
    let mut _8: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-62658.rs:13:15: 13:21
    let mut _9: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-62658.rs:13:9: 13:21
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-62658.rs:13:9: 13:21
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-62658.rs:13:15: 13:21
    let mut _12: isize;                  // in scope 0 at ui/async-await/issue-62658.rs:13:15: 13:21
    let mut _14: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-62658.rs:13:15: 13:21
    let _15: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _16: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _17: &[&str];                // in scope 0 at ui/async-await/issue-62658.rs:14:18: 14:24
    let mut _18: &[&str; 2];             // in scope 0 at ui/async-await/issue-62658.rs:14:18: 14:24
    let _19: &[&str; 2];                 // in scope 0 at ui/async-await/issue-62658.rs:14:18: 14:24
    let mut _20: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _21: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _22: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _23: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _24: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/async-await/issue-62658.rs:14:26: 14:27
    let mut _25: &[u8; 17];              // in scope 0 at ui/async-await/issue-62658.rs:14:26: 14:27
    let _26: &[u8; 17];                  // in scope 0 at ui/async-await/issue-62658.rs:14:26: 14:27
    let mut _27: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-62658.rs:20:15: 20:21
    let mut _28: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-62658.rs:20:9: 20:15
    let mut _29: std::task::Poll<()>;    // in scope 0 at ui/async-await/issue-62658.rs:20:15: 20:21
    let mut _30: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/issue-62658.rs:20:15: 20:21
    let mut _31: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-62658.rs:20:15: 20:21
    let mut _32: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-62658.rs:20:15: 20:21
    let mut _33: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-62658.rs:20:9: 20:21
    let mut _34: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-62658.rs:20:9: 20:21
    let mut _35: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-62658.rs:20:15: 20:21
    let mut _36: isize;                  // in scope 0 at ui/async-await/issue-62658.rs:20:15: 20:21
    let mut _38: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-62658.rs:20:15: 20:21
    let _39: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _40: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _41: &[&str];                // in scope 0 at ui/async-await/issue-62658.rs:21:18: 21:24
    let mut _42: &[&str; 2];             // in scope 0 at ui/async-await/issue-62658.rs:21:18: 21:24
    let _43: &[&str; 2];                 // in scope 0 at ui/async-await/issue-62658.rs:21:18: 21:24
    let mut _44: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _45: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _46: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _47: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _48: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/async-await/issue-62658.rs:21:26: 21:27
    let mut _49: &u64;                   // in scope 0 at ui/async-await/issue-62658.rs:21:26: 21:27
    let _50: &u64;                       // in scope 0 at ui/async-await/issue-62658.rs:21:26: 21:27
    let mut _53: ();                     // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _54: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _55: u32;                    // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _56: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]; // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _57: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]; // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _58: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]; // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _59: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]; // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _60: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]; // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _61: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]; // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _62: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]; // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _63: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]; // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _64: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]; // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _65: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]; // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _66: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]; // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _67: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]; // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    let mut _68: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]; // in scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    scope 1 {
        debug x => (((*(_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2])) as variant#3).0: [u8; 17]); // in scope 1 at ui/async-await/issue-62658.rs:12:13: 12:14
        let mut _52: &[&str; 2];         // in scope 1 at ui/async-await/issue-62658.rs:14:18: 14:24
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2])) as variant#3).1: impl std::future::Future<Output = ()>); // in scope 2 at ui/async-await/issue-62658.rs:13:15: 13:21
            let _13: ();                 // in scope 2 at ui/async-await/issue-62658.rs:13:9: 13:21
            scope 3 {
            }
            scope 4 {
                debug result => _13;     // in scope 4 at ui/async-await/issue-62658.rs:13:9: 13:21
            }
        }
    }
    scope 5 {
        debug x => (((*(_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2])) as variant#4).0: u64); // in scope 5 at ui/async-await/issue-62658.rs:19:13: 19:14
        let mut _51: &[&str; 2];         // in scope 5 at ui/async-await/issue-62658.rs:21:18: 21:24
        scope 6 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2])) as variant#4).1: impl std::future::Future<Output = ()>); // in scope 6 at ui/async-await/issue-62658.rs:20:15: 20:21
            let _37: ();                 // in scope 6 at ui/async-await/issue-62658.rs:20:9: 20:21
            scope 7 {
            }
            scope 8 {
                debug result => _37;     // in scope 8 at ui/async-await/issue-62658.rs:20:9: 20:21
            }
        }
    }

    bb0: {
        _56 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]); // scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
        _55 = discriminant((*_56));      // scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
        switchInt(move _55) -> [0: bb1, 1: bb28, 2: bb27, 3: bb25, 4: bb26, otherwise: bb29]; // scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    }

    bb1: {
        _54 = move _2;                   // scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
        _57 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]); // scope 0 at ui/async-await/issue-62658.rs:12:17: 12:26
        (((*_57) as variant#3).0: [u8; 17]) = [const 0_u8; 17]; // scope 0 at ui/async-await/issue-62658.rs:12:17: 12:26
        _4 = noop() -> [return: bb2, unwind: bb24]; // scope 1 at ui/async-await/issue-62658.rs:13:9: 13:15
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:13:9: 13:13
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {noop}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <impl Future<Output = ()> as IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb24]; // scope 1 at ui/async-await/issue-62658.rs:13:15: 13:21
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:13:15: 13:21
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _58 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]); // scope 1 at ui/async-await/issue-62658.rs:13:15: 13:21
        (((*_58) as variant#3).1: impl std::future::Future<Output = ()>) = move _3; // scope 1 at ui/async-await/issue-62658.rs:13:15: 13:21
        goto -> bb4;                     // scope 2 at ui/async-await/issue-62658.rs:13:15: 13:21
    }

    bb4: {
        _59 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]); // scope 3 at ui/async-await/issue-62658.rs:13:15: 13:21
        _8 = &mut (((*_59) as variant#3).1: impl std::future::Future<Output = ()>); // scope 3 at ui/async-await/issue-62658.rs:13:15: 13:21
        _7 = &mut (*_8);                 // scope 3 at ui/async-await/issue-62658.rs:13:15: 13:21
        _6 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _7) -> [return: bb5, unwind: bb24]; // scope 3 at ui/async-await/issue-62658.rs:13:15: 13:21
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:13:15: 13:21
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = _54;                       // scope 3 at ui/async-await/issue-62658.rs:13:15: 13:21
        _10 = move _11;                  // scope 3 at ui/async-await/issue-62658.rs:13:9: 13:21
        _9 = &mut (*_10);                // scope 3 at ui/async-await/issue-62658.rs:13:9: 13:21
        _5 = <impl Future<Output = ()> as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb24]; // scope 3 at ui/async-await/issue-62658.rs:13:15: 13:21
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:13:15: 13:21
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = discriminant(_5);          // scope 2 at ui/async-await/issue-62658.rs:13:15: 13:21
        switchInt(move _12) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at ui/async-await/issue-62658.rs:13:15: 13:21
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/issue-62658.rs:13:15: 13:21
        _60 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]); // scope 2 at ui/async-await/issue-62658.rs:13:15: 13:21
        discriminant((*_60)) = 3;        // scope 2 at ui/async-await/issue-62658.rs:13:15: 13:21
        return;                          // scope 2 at ui/async-await/issue-62658.rs:13:15: 13:21
    }

    bb8: {
        unreachable;                     // scope 2 at ui/async-await/issue-62658.rs:13:15: 13:21
    }

    bb9: {
        _13 = ((_5 as Ready).0: ());     // scope 2 at ui/async-await/issue-62658.rs:13:9: 13:21
        _52 = const _;                   // scope 1 at ui/async-await/issue-62658.rs:14:18: 14:24
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:14:18: 14:24
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(foo::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[1])) }
        _19 = _52;                       // scope 1 at ui/async-await/issue-62658.rs:14:18: 14:24
        _18 = _19;                       // scope 1 at ui/async-await/issue-62658.rs:14:18: 14:24
        _17 = move _18 as &[&str] (Pointer(Unsize)); // scope 1 at ui/async-await/issue-62658.rs:14:18: 14:24
        _61 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]); // scope 1 at ui/async-await/issue-62658.rs:14:26: 14:27
        _26 = &(((*_61) as variant#3).0: [u8; 17]); // scope 1 at ui/async-await/issue-62658.rs:14:26: 14:27
        _25 = _26;                       // scope 1 at ui/async-await/issue-62658.rs:14:26: 14:27
        _24 = core::fmt::ArgumentV1::<'_>::new_debug::<[u8; 17]>(move _25) -> [return: bb10, unwind: bb24]; // scope 1 at ui/async-await/issue-62658.rs:14:26: 14:27
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:14:26: 14:27
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b [u8; 17]) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<[u8; 17]>}, val: Value(<ZST>) }
    }

    bb10: {
        _23 = [move _24];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _22 = &_23;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = _22;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = move _21 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _16 = Arguments::<'_>::new_v1(move _17, move _20) -> [return: bb11, unwind: bb24]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb11: {
        _15 = _print(move _16) -> [return: bb12, unwind: bb24]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb12: {
        _62 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]); // scope 0 at ui/async-await/issue-62658.rs:19:17: 19:21
        (((*_62) as variant#4).0: u64) = const 0_u64; // scope 0 at ui/async-await/issue-62658.rs:19:17: 19:21
        _28 = noop() -> [return: bb13, unwind: bb24]; // scope 5 at ui/async-await/issue-62658.rs:20:9: 20:15
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:20:9: 20:13
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {noop}, val: Value(<ZST>) }
    }

    bb13: {
        _27 = <impl Future<Output = ()> as IntoFuture>::into_future(move _28) -> [return: bb14, unwind: bb24]; // scope 5 at ui/async-await/issue-62658.rs:20:15: 20:21
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:20:15: 20:21
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb14: {
        _63 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]); // scope 5 at ui/async-await/issue-62658.rs:20:15: 20:21
        (((*_63) as variant#4).1: impl std::future::Future<Output = ()>) = move _27; // scope 5 at ui/async-await/issue-62658.rs:20:15: 20:21
        goto -> bb15;                    // scope 6 at ui/async-await/issue-62658.rs:20:15: 20:21
    }

    bb15: {
        _64 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]); // scope 7 at ui/async-await/issue-62658.rs:20:15: 20:21
        _32 = &mut (((*_64) as variant#4).1: impl std::future::Future<Output = ()>); // scope 7 at ui/async-await/issue-62658.rs:20:15: 20:21
        _31 = &mut (*_32);               // scope 7 at ui/async-await/issue-62658.rs:20:15: 20:21
        _30 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _31) -> [return: bb16, unwind: bb24]; // scope 7 at ui/async-await/issue-62658.rs:20:15: 20:21
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:20:15: 20:21
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb16: {
        _35 = _54;                       // scope 7 at ui/async-await/issue-62658.rs:20:15: 20:21
        _34 = move _35;                  // scope 7 at ui/async-await/issue-62658.rs:20:9: 20:21
        _33 = &mut (*_34);               // scope 7 at ui/async-await/issue-62658.rs:20:9: 20:21
        _29 = <impl Future<Output = ()> as Future>::poll(move _30, move _33) -> [return: bb17, unwind: bb24]; // scope 7 at ui/async-await/issue-62658.rs:20:15: 20:21
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:20:15: 20:21
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb17: {
        _36 = discriminant(_29);         // scope 6 at ui/async-await/issue-62658.rs:20:15: 20:21
        switchInt(move _36) -> [0: bb20, 1: bb18, otherwise: bb19]; // scope 6 at ui/async-await/issue-62658.rs:20:15: 20:21
    }

    bb18: {
        _0 = Poll::<()>::Pending;        // scope 6 at ui/async-await/issue-62658.rs:20:15: 20:21
        _65 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]); // scope 6 at ui/async-await/issue-62658.rs:20:15: 20:21
        discriminant((*_65)) = 4;        // scope 6 at ui/async-await/issue-62658.rs:20:15: 20:21
        return;                          // scope 6 at ui/async-await/issue-62658.rs:20:15: 20:21
    }

    bb19: {
        unreachable;                     // scope 6 at ui/async-await/issue-62658.rs:20:15: 20:21
    }

    bb20: {
        _37 = ((_29 as Ready).0: ());    // scope 6 at ui/async-await/issue-62658.rs:20:9: 20:21
        _51 = const _;                   // scope 5 at ui/async-await/issue-62658.rs:21:18: 21:24
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:21:18: 21:24
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(foo::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[0])) }
        _43 = _51;                       // scope 5 at ui/async-await/issue-62658.rs:21:18: 21:24
        _42 = _43;                       // scope 5 at ui/async-await/issue-62658.rs:21:18: 21:24
        _41 = move _42 as &[&str] (Pointer(Unsize)); // scope 5 at ui/async-await/issue-62658.rs:21:18: 21:24
        _66 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]); // scope 5 at ui/async-await/issue-62658.rs:21:26: 21:27
        _50 = &(((*_66) as variant#4).0: u64); // scope 5 at ui/async-await/issue-62658.rs:21:26: 21:27
        _49 = _50;                       // scope 5 at ui/async-await/issue-62658.rs:21:26: 21:27
        _48 = core::fmt::ArgumentV1::<'_>::new_debug::<u64>(move _49) -> [return: bb21, unwind: bb24]; // scope 5 at ui/async-await/issue-62658.rs:21:26: 21:27
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:21:26: 21:27
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<u64>}, val: Value(<ZST>) }
    }

    bb21: {
        _47 = [move _48];                // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _46 = &_47;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _45 = _46;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _44 = move _45 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _40 = Arguments::<'_>::new_v1(move _41, move _44) -> [return: bb22, unwind: bb24]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb22: {
        _39 = _print(move _40) -> [return: bb23, unwind: bb24]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb23: {
        _53 = const ();                  // scope 0 at ui/async-await/issue-62658.rs:18:5: 22:6
        _0 = Poll::<()>::Ready(move _53); // scope 0 at ui/async-await/issue-62658.rs:23:2: 23:2
        _67 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]); // scope 0 at ui/async-await/issue-62658.rs:23:2: 23:2
        discriminant((*_67)) = 1;        // scope 0 at ui/async-await/issue-62658.rs:23:2: 23:2
        return;                          // scope 0 at ui/async-await/issue-62658.rs:23:2: 23:2
    }

    bb24 (cleanup): {
        _68 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-62658.rs:9:16: 23:2]); // scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
        discriminant((*_68)) = 2;        // scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
        resume;                          // scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    }

    bb25: {
        _14 = move _2;                   // scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
        _54 = move _14;                  // scope 2 at ui/async-await/issue-62658.rs:13:15: 13:21
        goto -> bb4;                     // scope 2 at ui/async-await/issue-62658.rs:13:15: 13:21
    }

    bb26: {
        _38 = move _2;                   // scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
        _54 = move _38;                  // scope 6 at ui/async-await/issue-62658.rs:20:15: 20:21
        goto -> bb15;                    // scope 6 at ui/async-await/issue-62658.rs:20:15: 20:21
    }

    bb27: {
        assert(const false, "`async fn` resumed after panicking") -> bb27; // scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    }

    bb28: {
        assert(const false, "`async fn` resumed after completion") -> bb28; // scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    }

    bb29: {
        unreachable;                     // scope 0 at ui/async-await/issue-62658.rs:9:16: 23:2
    }
}

promoted[0] in foo::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/async-await/issue-62658.rs:21:18: 21:24
    let mut _1: [&str; 2];               // in scope 0 at ui/async-await/issue-62658.rs:21:18: 21:24

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/async-await/issue-62658.rs:21:18: 21:24
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:21:18: 21:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:21:18: 21:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/async-await/issue-62658.rs:21:18: 21:24
        return;                          // scope 0 at ui/async-await/issue-62658.rs:21:18: 21:24
    }
}

promoted[1] in foo::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/async-await/issue-62658.rs:14:18: 14:24
    let mut _1: [&str; 2];               // in scope 0 at ui/async-await/issue-62658.rs:14:18: 14:24

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/async-await/issue-62658.rs:14:18: 14:24
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:14:18: 14:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:14:18: 14:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/async-await/issue-62658.rs:14:18: 14:24
        return;                          // scope 0 at ui/async-await/issue-62658.rs:14:18: 14:24
    }
}

foo::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/async-await/issue-62658.rs:12:23: 12:25

    bb0: {
        _0 = const 17_usize;             // scope 0 at ui/async-await/issue-62658.rs:12:23: 12:25
        return;                          // scope 0 at ui/async-await/issue-62658.rs:12:23: 12:25
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issue-62658.rs:25:11: 25:11
    let mut _1: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-62658.rs:26:13: 26:18
    scope 1 {
    }

    bb0: {
        _1 = foo() -> bb1;               // scope 0 at ui/async-await/issue-62658.rs:26:13: 26:18
                                         // mir::Constant
                                         // + span: ui/async-await/issue-62658.rs:26:13: 26:16
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issue-62658.rs:27:2: 27:2
    }
}
