// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:14
    let mut _1: [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16]; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16

    bb0: {
        _1 = [generator@ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16 (#0)]; // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16
                                         // generator
                                         // + def_id: DefId(0:4 ~ proper_span_for_type_error_fixed[b117]::a::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16]>(move _1) -> bb1; // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16
                                         // mir::Constant
                                         // + span: ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16]) -> [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16] {identity_future::<(), [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:16: 5:16
    }
}

fn a::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16
    let mut _3: ();                      // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16
    let mut _5: u32;                     // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16
    let mut _6: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16]; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16
    let mut _7: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16]; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16

    bb0: {
        _6 = deref_copy (_1.0: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16]); // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16
        _3 = const ();                   // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:16: 5:16
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16]); // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:16: 5:16
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:16: 5:16
        return;                          // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:16: 5:16
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:5:14: 5:16
    }
}

fn foo() -> impl Future<Output = Result<(), i32>> {
    let mut _0: impl std::future::Future<Output = std::result::Result<(), i32>>; // return place in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:19: 7:34
    let mut _1: [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2

    bb0: {
        _1 = [generator@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2 (#0)]; // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
                                         // generator
                                         // + def_id: DefId(0:6 ~ proper_span_for_type_error_fixed[b117]::foo::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     std::result::Result<(), i32>,
                                         //     {std::future::ResumeTy, impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<Result<(), i32>, [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]>(move _1) -> bb1; // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
                                         // mir::Constant
                                         // + span: ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]) -> [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2] {identity_future::<Result<(), i32>, [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:10:2: 10:2
    }
}

fn foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]>, _2: &mut Context<'_>) -> Poll<Result<(), i32>> {
    debug _task_context => _17;          // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
    let mut _0: std::task::Poll<std::result::Result<(), i32>>; // return place in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
    let mut _3: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:8:5: 8:8
    let mut _5: std::task::Poll<()>;     // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
    let mut _6: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
    let mut _7: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
    let mut _8: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
    let mut _9: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:8:5: 8:14
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:8:5: 8:14
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
    let mut _12: isize;                  // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
    let mut _14: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
    let mut _15: ();                     // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:9:8: 9:10
    let mut _16: std::result::Result<(), i32>; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
    let mut _17: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
    let mut _18: u32;                    // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
    let mut _19: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
    let mut _20: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
    let mut _21: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
    let mut _22: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
    let mut _23: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
    let mut _24: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]; // in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2])) as variant#3).0: impl std::future::Future<Output = ()>); // in scope 1 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
        let _13: ();                     // in scope 1 at ui/async-await/proper-span-for-type-error_fixed.rs:8:5: 8:14
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at ui/async-await/proper-span-for-type-error_fixed.rs:8:5: 8:14
        }
    }

    bb0: {
        _19 = deref_copy (_1.0: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]); // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
        _18 = discriminant((*_19));      // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
        switchInt(move _18) -> [0: bb1, 1: bb13, 2: bb12, 3: bb11, otherwise: bb14]; // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
    }

    bb1: {
        _17 = move _2;                   // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
        _4 = a() -> [return: bb2, unwind: bb10]; // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:8:5: 8:8
                                         // mir::Constant
                                         // + span: ui/async-await/proper-span-for-type-error_fixed.rs:8:5: 8:6
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {a}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <impl Future<Output = ()> as IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb10]; // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
                                         // mir::Constant
                                         // + span: ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _20 = deref_copy (_1.0: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]); // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
        (((*_20) as variant#3).0: impl std::future::Future<Output = ()>) = move _3; // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
        goto -> bb4;                     // scope 1 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
    }

    bb4: {
        _21 = deref_copy (_1.0: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]); // scope 2 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
        _8 = &mut (((*_21) as variant#3).0: impl std::future::Future<Output = ()>); // scope 2 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
        _7 = &mut (*_8);                 // scope 2 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
        _6 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _7) -> [return: bb5, unwind: bb10]; // scope 2 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
                                         // mir::Constant
                                         // + span: ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = _17;                       // scope 2 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
        _10 = move _11;                  // scope 2 at ui/async-await/proper-span-for-type-error_fixed.rs:8:5: 8:14
        _9 = &mut (*_10);                // scope 2 at ui/async-await/proper-span-for-type-error_fixed.rs:8:5: 8:14
        _5 = <impl Future<Output = ()> as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb10]; // scope 2 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
                                         // mir::Constant
                                         // + span: ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = discriminant(_5);          // scope 1 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
        switchInt(move _12) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 1 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
    }

    bb7: {
        _0 = Poll::<Result<(), i32>>::Pending; // scope 1 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]); // scope 1 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
        discriminant((*_22)) = 3;        // scope 1 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
        return;                          // scope 1 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
    }

    bb8: {
        unreachable;                     // scope 1 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
    }

    bb9: {
        _13 = ((_5 as Ready).0: ());     // scope 1 at ui/async-await/proper-span-for-type-error_fixed.rs:8:5: 8:14
        _15 = ();                        // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:9:8: 9:10
        _16 = Result::<(), i32>::Ok(move _15); // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:9:5: 9:11
        _0 = Poll::<Result<(), i32>>::Ready(move _16); // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:10:2: 10:2
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]); // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:10:2: 10:2
        discriminant((*_23)) = 1;        // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:10:2: 10:2
        return;                          // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:10:2: 10:2
    }

    bb10 (cleanup): {
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2]); // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
        discriminant((*_24)) = 2;        // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
        resume;                          // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
    }

    bb11: {
        _14 = move _2;                   // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
        _17 = move _14;                  // scope 1 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
        goto -> bb4;                     // scope 1 at ui/async-await/proper-span-for-type-error_fixed.rs:8:8: 8:14
    }

    bb12: {
        assert(const false, "`async fn` resumed after panicking") -> bb12; // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
    }

    bb13: {
        assert(const false, "`async fn` resumed after completion") -> bb13; // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
    }

    bb14: {
        unreachable;                     // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:7:35: 10:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:12:11: 12:11

    bb0: {
        return;                          // scope 0 at ui/async-await/proper-span-for-type-error_fixed.rs:12:13: 12:13
    }
}
