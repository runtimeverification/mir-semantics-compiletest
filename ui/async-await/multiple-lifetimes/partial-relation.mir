// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn lotsa_lifetimes(_1: &u32, _2: &u32, _3: &u32) -> impl Future<Output = (&u32, &u32)> {
    debug a => _1;                       // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:38: 4:39
    debug b => _2;                       // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:50: 4:51
    debug c => _3;                       // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:62: 4:63
    let mut _0: impl std::future::Future<Output = (&u32, &u32)>; // return place in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:77: 4:95
    let mut _4: [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]; // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2

    bb0: {
        _4 = [generator@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2 (#0)] { a: _1, b: _2, c: _3 }; // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
                                         // generator
                                         // + def_id: DefId(0:7 ~ partial_relation[b403]::lotsa_lifetimes::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     ReErased,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (&u32, &u32),
                                         //     {},
                                         //     (&u32, &u32, &u32),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(&u32, &u32), [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]>(move _4) -> bb1; // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]) -> [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2] {identity_future::<(&u32, &u32), [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:9:2: 9:2
    }
}

fn lotsa_lifetimes::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]>, _2: &mut Context<'_>) -> Poll<(&u32, &u32)> {
    debug _task_context => _13;          // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
    debug a => ((*(_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2])).0: &u32); // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:38: 4:39
    debug b => ((*(_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2])).1: &u32); // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:50: 4:51
    debug c => ((*(_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2])).2: &u32); // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:62: 4:63
    let mut _0: std::task::Poll<(&u32, &u32)>; // return place in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
    let _3: &u32;                        // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:38: 4:39
    let _6: ();                          // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:7:5: 7:17
    let mut _7: (&u32, &u32);            // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:7:10: 7:16
    let mut _8: &u32;                    // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:7:11: 7:12
    let mut _9: &u32;                    // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:7:14: 7:15
    let mut _10: &u32;                   // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:8:6: 8:7
    let mut _11: &u32;                   // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:8:9: 8:10
    let mut _12: (&u32, &u32);           // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
    let mut _13: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
    let mut _14: u32;                    // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
    let mut _15: &mut [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]; // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
    let mut _16: &mut [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]; // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
    let mut _17: &mut [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]; // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
    let mut _18: &mut [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]; // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
    let mut _19: &mut [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]; // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
    let mut _20: &mut [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]; // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
    scope 1 {
        debug a => _3;                   // in scope 1 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:38: 4:39
        let _4: &u32;                    // in scope 1 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:50: 4:51
        scope 2 {
            debug b => _4;               // in scope 2 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:50: 4:51
            let _5: &u32;                // in scope 2 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:62: 4:63
            scope 3 {
                debug c => _5;           // in scope 3 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:62: 4:63
            }
        }
    }

    bb0: {
        _15 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]); // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
        _14 = discriminant((*_15));      // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
        switchInt(move _14) -> [0: bb1, 1: bb5, 2: bb4, otherwise: bb6]; // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
    }

    bb1: {
        _13 = move _2;                   // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
        _16 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]); // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:38: 4:39
        _3 = ((*_16).0: &u32);           // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:38: 4:39
        _17 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]); // scope 1 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:50: 4:51
        _4 = ((*_17).1: &u32);           // scope 1 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:50: 4:51
        _18 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]); // scope 2 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:62: 4:63
        _5 = ((*_18).2: &u32);           // scope 2 at ui/async-await/multiple-lifetimes/partial-relation.rs:4:62: 4:63
        _8 = _3;                         // scope 3 at ui/async-await/multiple-lifetimes/partial-relation.rs:7:11: 7:12
        _9 = _5;                         // scope 3 at ui/async-await/multiple-lifetimes/partial-relation.rs:7:14: 7:15
        _7 = (move _8, move _9);         // scope 3 at ui/async-await/multiple-lifetimes/partial-relation.rs:7:10: 7:16
        _6 = std::mem::drop::<(&u32, &u32)>(move _7) -> [return: bb2, unwind: bb3]; // scope 3 at ui/async-await/multiple-lifetimes/partial-relation.rs:7:5: 7:17
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/partial-relation.rs:7:5: 7:9
                                         // + literal: Const { ty: fn((&u32, &u32)) {std::mem::drop::<(&u32, &u32)>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = _4;                        // scope 3 at ui/async-await/multiple-lifetimes/partial-relation.rs:8:6: 8:7
        _11 = _4;                        // scope 3 at ui/async-await/multiple-lifetimes/partial-relation.rs:8:9: 8:10
        _12 = (move _10, move _11);      // scope 3 at ui/async-await/multiple-lifetimes/partial-relation.rs:8:5: 8:11
        _0 = Poll::<(&u32, &u32)>::Ready(move _12); // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:9:2: 9:2
        _19 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]); // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:9:2: 9:2
        discriminant((*_19)) = 1;        // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:9:2: 9:2
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:9:2: 9:2
    }

    bb3 (cleanup): {
        _20 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2]); // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
        discriminant((*_20)) = 2;        // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
        resume;                          // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
    }

    bb4: {
        assert(const false, "`async fn` resumed after panicking") -> bb4; // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
    }

    bb5: {
        assert(const false, "`async fn` resumed after completion") -> bb5; // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
    }

    bb6: {
        unreachable;                     // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:6:1: 9:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:11:11: 11:11
    let mut _1: impl std::future::Future<Output = (&u32, &u32)>; // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:13: 12:43
    let mut _2: &u32;                    // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:29: 12:32
    let _3: &u32;                        // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:29: 12:32
    let mut _4: &u32;                    // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:34: 12:37
    let _5: &u32;                        // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:34: 12:37
    let mut _6: &u32;                    // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:39: 12:42
    let _7: &u32;                        // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:39: 12:42
    let mut _8: &u32;                    // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:39: 12:42
    let mut _9: &u32;                    // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:34: 12:37
    let mut _10: &u32;                   // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:29: 12:32
    scope 1 {
    }

    bb0: {
        _10 = const _;                   // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:29: 12:32
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/partial-relation.rs:12:29: 12:32
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[2])) }
        _3 = _10;                        // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:29: 12:32
        _2 = _3;                         // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:29: 12:32
        _9 = const _;                    // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:34: 12:37
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/partial-relation.rs:12:34: 12:37
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[1])) }
        _5 = _9;                         // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:34: 12:37
        _4 = _5;                         // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:34: 12:37
        _8 = const _;                    // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:39: 12:42
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/partial-relation.rs:12:39: 12:42
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _8;                         // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:39: 12:42
        _6 = _7;                         // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:39: 12:42
        _1 = lotsa_lifetimes::<'_, '_>(move _2, move _4, move _6) -> bb1; // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:13: 12:43
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/partial-relation.rs:12:13: 12:28
                                         // + literal: Const { ty: for<'c> fn(&u32, &u32, &'c u32) -> impl Future<Output = (&u32, &u32)> {lotsa_lifetimes::<'_, '_>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:13:2: 13:2
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:39: 12:42
    let mut _1: u32;                     // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:40: 12:42

    bb0: {
        _1 = const 66_u32;               // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:40: 12:42
        _0 = &_1;                        // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:39: 12:42
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:39: 12:42
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:34: 12:37
    let mut _1: u32;                     // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:35: 12:37

    bb0: {
        _1 = const 44_u32;               // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:35: 12:37
        _0 = &_1;                        // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:34: 12:37
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:34: 12:37
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:29: 12:32
    let mut _1: u32;                     // in scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:30: 12:32

    bb0: {
        _1 = const 22_u32;               // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:30: 12:32
        _0 = &_1;                        // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:29: 12:32
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/partial-relation.rs:12:29: 12:32
    }
}
