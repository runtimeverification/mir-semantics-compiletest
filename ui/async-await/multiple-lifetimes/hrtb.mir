// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn multiple_hrtb_and_single_named_lifetime_ok(_1: impl for<'a> Add<&'a u8>, _2: impl for<'b> Add<&'b u8>, _3: &u8) -> impl Future<Output = ()> {
    debug _ => _1;                       // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:9:5: 9:6
    debug _ => _2;                       // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:10:5: 10:6
    debug _ => _3;                       // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:11:5: 11:6
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:3
    let mut _4: [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]; // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5

    bb0: {
        _4 = [generator@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5 (#0)] { _: move _1, _: move _2, _: _3 }; // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
                                         // generator
                                         // + def_id: DefId(0:8 ~ hrtb[f807]::multiple_hrtb_and_single_named_lifetime_ok::{closure#0})
                                         // + substs: [
                                         //     impl for<'a> Add<&'a u8>,
                                         //     impl for<'b> Add<&'b u8>,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (impl for<'a> Add<&'a u8>, impl for<'b> Add<&'b u8>, &u8),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]>(move _4) -> bb1; // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]) -> [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5] {identity_future::<(), [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:5: 12:5
    }
}

fn multiple_hrtb_and_single_named_lifetime_ok::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _7;           // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5])).0: impl for<'a> Add<&'a u8>); // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:9:5: 9:6
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5])).1: impl for<'b> Add<&'b u8>); // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:10:5: 10:6
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5])).2: &u8); // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:11:5: 11:6
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
    let mut _3: impl for<'a> Add<&'a u8>; // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:9:5: 9:6
    let mut _6: ();                      // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
    let mut _7: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
    let mut _8: u32;                     // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
    let mut _9: &mut [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]; // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
    let mut _10: &mut [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]; // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
    let mut _11: &mut [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]; // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
    let mut _12: &mut [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]; // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
    let mut _13: &mut [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]; // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
    let mut _14: &mut [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]; // in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
    scope 1 {
        debug _ => _3;                   // in scope 1 at ui/async-await/multiple-lifetimes/hrtb.rs:9:5: 9:6
        scope 2 {
            let mut _4: impl for<'b> Add<&'b u8>; // in scope 2 at ui/async-await/multiple-lifetimes/hrtb.rs:10:5: 10:6
            scope 3 {
                debug _ => _4;           // in scope 3 at ui/async-await/multiple-lifetimes/hrtb.rs:10:5: 10:6
                scope 4 {
                    let mut _5: &u8;     // in scope 4 at ui/async-await/multiple-lifetimes/hrtb.rs:11:5: 11:6
                    scope 5 {
                        debug _ => _5;   // in scope 5 at ui/async-await/multiple-lifetimes/hrtb.rs:11:5: 11:6
                        scope 6 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]); // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
        _8 = discriminant((*_9));        // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
        switchInt(move _8) -> [0: bb1, 1: bb7, 2: bb6, otherwise: bb8]; // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
    }

    bb1: {
        _7 = move _2;                    // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]); // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:9:5: 9:6
        _3 = move ((*_10).0: impl for<'a> Add<&'a u8>); // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:9:5: 9:6
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]); // scope 2 at ui/async-await/multiple-lifetimes/hrtb.rs:10:5: 10:6
        _4 = move ((*_11).1: impl for<'b> Add<&'b u8>); // scope 2 at ui/async-await/multiple-lifetimes/hrtb.rs:10:5: 10:6
        _12 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]); // scope 4 at ui/async-await/multiple-lifetimes/hrtb.rs:11:5: 11:6
        _5 = ((*_12).2: &u8);            // scope 4 at ui/async-await/multiple-lifetimes/hrtb.rs:11:5: 11:6
        _6 = const ();                   // scope 6 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
        drop(_4) -> [return: bb2, unwind: bb4]; // scope 2 at ui/async-await/multiple-lifetimes/hrtb.rs:12:4: 12:5
    }

    bb2: {
        drop(_3) -> [return: bb3, unwind: bb5]; // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:4: 12:5
    }

    bb3: {
        _0 = Poll::<()>::Ready(move _6); // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:5: 12:5
        _13 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]); // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:5: 12:5
        discriminant((*_13)) = 1;        // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:5: 12:5
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:5: 12:5
    }

    bb4 (cleanup): {
        drop(_3) -> bb5;                 // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:4: 12:5
    }

    bb5 (cleanup): {
        _14 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5]); // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
        discriminant((*_14)) = 2;        // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
        resume;                          // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
    }

    bb6: {
        assert(const false, "`async fn` resumed after panicking") -> bb6; // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
    }

    bb7: {
        assert(const false, "`async fn` resumed after completion") -> bb7; // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
    }

    bb8: {
        unreachable;                     // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:12:3: 12:5
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:14:11: 14:11

    bb0: {
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/hrtb.rs:14:13: 14:13
    }
}
