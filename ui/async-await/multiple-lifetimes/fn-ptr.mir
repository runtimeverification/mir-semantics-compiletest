// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn multiple_named_lifetimes(_1: &u8, _2: &u8, _3: for<'a> fn(&'a u8)) -> impl Future<Output = ()> {
    debug _ => _1;                       // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:43: 6:44
    debug _ => _2;                       // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:54: 6:55
    debug _ => _3;                       // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:65: 6:66
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:77
    let mut _4: [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79]; // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79

    bb0: {
        _4 = [generator@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79 (#0)] { _: _1, _: _2, _: _3 }; // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
                                         // generator
                                         // + def_id: DefId(0:6 ~ fn_ptr[48fb]::multiple_named_lifetimes::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (&u8, &u8, for<'a> fn(&'a u8)),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79]>(move _4) -> bb1; // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79]) -> [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79] {identity_future::<(), [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:79: 6:79
    }
}

fn multiple_named_lifetimes::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _7;           // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79])).0: &u8); // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:43: 6:44
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79])).1: &u8); // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:54: 6:55
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79])).2: for<'a> fn(&'a u8)); // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:65: 6:66
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
    let mut _3: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:43: 6:44
    let mut _6: ();                      // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
    let mut _7: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
    let mut _8: u32;                     // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
    let mut _9: &mut [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79]; // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
    let mut _10: &mut [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79]; // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
    let mut _11: &mut [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79]; // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
    let mut _12: &mut [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79]; // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
    let mut _13: &mut [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79]; // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
    scope 1 {
        debug _ => _3;                   // in scope 1 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:43: 6:44
        scope 2 {
            let mut _4: &u8;             // in scope 2 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:54: 6:55
            scope 3 {
                debug _ => _4;           // in scope 3 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:54: 6:55
                scope 4 {
                    let mut _5: for<'a> fn(&'a u8); // in scope 4 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:65: 6:66
                    scope 5 {
                        debug _ => _5;   // in scope 5 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:65: 6:66
                        scope 6 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79]); // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
        _8 = discriminant((*_9));        // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
        switchInt(move _8) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
    }

    bb1: {
        _7 = move _2;                    // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79]); // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:43: 6:44
        _3 = ((*_10).0: &u8);            // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:43: 6:44
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79]); // scope 2 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:54: 6:55
        _4 = ((*_11).1: &u8);            // scope 2 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:54: 6:55
        _12 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79]); // scope 4 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:65: 6:66
        _5 = ((*_12).2: for<'a> fn(&'a u8)); // scope 4 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:65: 6:66
        _6 = const ();                   // scope 6 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
        _0 = Poll::<()>::Ready(move _6); // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:79: 6:79
        _13 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79]); // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:79: 6:79
        discriminant((*_13)) = 1;        // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:79: 6:79
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:79: 6:79
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:6:77: 6:79
    }
}

fn gimme(_1: &u8) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:8:18: 8:18

    bb0: {
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:8:21: 8:21
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:10:11: 10:11
    let mut _1: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:13: 11:54
    let mut _2: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:38: 11:41
    let _3: &u8;                         // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:38: 11:41
    let mut _4: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:43: 11:46
    let _5: &u8;                         // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:43: 11:46
    let mut _6: for<'a> fn(&'a u8);      // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:48: 11:53
    let mut _7: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:43: 11:46
    let mut _8: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:38: 11:41
    scope 1 {
    }

    bb0: {
        _8 = const _;                    // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:38: 11:41
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/fn-ptr.rs:11:38: 11:41
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[1])) }
        _3 = _8;                         // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:38: 11:41
        _2 = _3;                         // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:38: 11:41
        _7 = const _;                    // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:43: 11:46
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/fn-ptr.rs:11:43: 11:46
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _7;                         // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:43: 11:46
        _4 = _5;                         // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:43: 11:46
        _6 = gimme as for<'a> fn(&'a u8) (Pointer(ReifyFnPointer)); // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:48: 11:53
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/fn-ptr.rs:11:48: 11:53
                                         // + literal: Const { ty: for<'a> fn(&'a u8) {gimme}, val: Value(<ZST>) }
        _1 = multiple_named_lifetimes(move _2, move _4, move _6) -> bb1; // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:13: 11:54
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/fn-ptr.rs:11:13: 11:37
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8, for<'c> fn(&'c u8)) -> impl Future<Output = ()> {multiple_named_lifetimes}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:12:2: 12:2
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:43: 11:46
    let mut _1: u8;                      // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:44: 11:46

    bb0: {
        _1 = const 44_u8;                // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:44: 11:46
        _0 = &_1;                        // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:43: 11:46
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:43: 11:46
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:38: 11:41
    let mut _1: u8;                      // in scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:39: 11:41

    bb0: {
        _1 = const 22_u8;                // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:39: 11:41
        _0 = &_1;                        // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:38: 11:41
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/fn-ptr.rs:11:38: 11:41
    }
}
