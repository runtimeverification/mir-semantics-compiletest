// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn multiple_elided_lifetimes(_1: &u8, _2: &u8) -> impl Future<Output = ()> {
    debug _ => _1;                       // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:36: 6:37
    debug _ => _2;                       // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:44: 6:45
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:52
    let mut _3: [async fn body@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54]; // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54

    bb0: {
        _3 = [generator@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54 (#0)] { _: _1, _: _2 }; // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
                                         // generator
                                         // + def_id: DefId(0:4 ~ elided[df9d]::multiple_elided_lifetimes::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (&u8, &u8),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54]>(move _3) -> bb1; // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54]) -> [async fn body@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54] {identity_future::<(), [async fn body@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:54: 6:54
    }
}

fn multiple_elided_lifetimes::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _6;           // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54])).0: &u8); // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:36: 6:37
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54])).1: &u8); // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:44: 6:45
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
    let mut _3: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:36: 6:37
    let mut _5: ();                      // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
    let mut _6: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
    let mut _7: u32;                     // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
    let mut _8: &mut [async fn body@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54]; // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
    let mut _9: &mut [async fn body@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54]; // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
    let mut _10: &mut [async fn body@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54]; // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
    let mut _11: &mut [async fn body@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54]; // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
    scope 1 {
        debug _ => _3;                   // in scope 1 at ui/async-await/multiple-lifetimes/elided.rs:6:36: 6:37
        scope 2 {
            let mut _4: &u8;             // in scope 2 at ui/async-await/multiple-lifetimes/elided.rs:6:44: 6:45
            scope 3 {
                debug _ => _4;           // in scope 3 at ui/async-await/multiple-lifetimes/elided.rs:6:44: 6:45
                scope 4 {
                }
            }
        }
    }

    bb0: {
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54]); // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
        _7 = discriminant((*_8));        // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
        switchInt(move _7) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
    }

    bb1: {
        _6 = move _2;                    // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54]); // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:36: 6:37
        _3 = ((*_9).0: &u8);             // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:36: 6:37
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54]); // scope 2 at ui/async-await/multiple-lifetimes/elided.rs:6:44: 6:45
        _4 = ((*_10).1: &u8);            // scope 2 at ui/async-await/multiple-lifetimes/elided.rs:6:44: 6:45
        _5 = const ();                   // scope 4 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
        _0 = Poll::<()>::Ready(move _5); // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:54: 6:54
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54]); // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:54: 6:54
        discriminant((*_11)) = 1;        // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:54: 6:54
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:54: 6:54
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:6:52: 6:54
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:8:11: 8:11
    let mut _1: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:13: 9:48
    let mut _2: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:39: 9:42
    let _3: &u8;                         // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:39: 9:42
    let mut _4: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:44: 9:47
    let _5: &u8;                         // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:44: 9:47
    let mut _6: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:44: 9:47
    let mut _7: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:39: 9:42
    scope 1 {
    }

    bb0: {
        _7 = const _;                    // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:39: 9:42
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/elided.rs:9:39: 9:42
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[1])) }
        _3 = _7;                         // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:39: 9:42
        _2 = _3;                         // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:39: 9:42
        _6 = const _;                    // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:44: 9:47
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/elided.rs:9:44: 9:47
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _6;                         // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:44: 9:47
        _4 = _5;                         // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:44: 9:47
        _1 = multiple_elided_lifetimes(move _2, move _4) -> bb1; // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:13: 9:48
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/elided.rs:9:13: 9:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8) -> impl Future<Output = ()> {multiple_elided_lifetimes}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:10:2: 10:2
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:44: 9:47
    let mut _1: u8;                      // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:45: 9:47

    bb0: {
        _1 = const 44_u8;                // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:45: 9:47
        _0 = &_1;                        // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:44: 9:47
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:44: 9:47
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:39: 9:42
    let mut _1: u8;                      // in scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:40: 9:42

    bb0: {
        _1 = const 22_u8;                // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:40: 9:42
        _0 = &_1;                        // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:39: 9:42
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/elided.rs:9:39: 9:42
    }
}
