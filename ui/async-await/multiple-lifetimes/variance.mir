// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn lotsa_lifetimes(_1: fn(&u8), _2: fn(&u8) -> &u8, _3: fn() -> &u8) -> impl Future<Output = ()> {
    debug _ => _1;                       // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:38: 7:39
    debug _ => _2;                       // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:53: 7:54
    debug _ => _3;                       // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:78: 7:79
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:97
    let mut _4: [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100]; // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100

    bb0: {
        _4 = [generator@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100 (#0)] { _: _1, _: _2, _: _3 }; // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
                                         // generator
                                         // + def_id: DefId(0:7 ~ variance[8d4d]::lotsa_lifetimes::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (fn(&u8), fn(&u8) -> &u8, fn() -> &u8),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100]>(move _4) -> bb1; // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100]) -> [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100] {identity_future::<(), [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:100: 7:100
    }
}

fn lotsa_lifetimes::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _7;           // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100])).0: fn(&u8)); // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:38: 7:39
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100])).1: fn(&u8) -> &u8); // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:53: 7:54
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100])).2: fn() -> &u8); // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:78: 7:79
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
    let mut _3: fn(&u8);                 // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:38: 7:39
    let mut _6: ();                      // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
    let mut _7: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
    let mut _8: u32;                     // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
    let mut _9: &mut [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100]; // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
    let mut _10: &mut [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100]; // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
    let mut _11: &mut [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100]; // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
    let mut _12: &mut [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100]; // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
    let mut _13: &mut [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100]; // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
    scope 1 {
        debug _ => _3;                   // in scope 1 at ui/async-await/multiple-lifetimes/variance.rs:7:38: 7:39
        scope 2 {
            let mut _4: fn(&u8) -> &u8;  // in scope 2 at ui/async-await/multiple-lifetimes/variance.rs:7:53: 7:54
            scope 3 {
                debug _ => _4;           // in scope 3 at ui/async-await/multiple-lifetimes/variance.rs:7:53: 7:54
                scope 4 {
                    let mut _5: fn() -> &u8; // in scope 4 at ui/async-await/multiple-lifetimes/variance.rs:7:78: 7:79
                    scope 5 {
                        debug _ => _5;   // in scope 5 at ui/async-await/multiple-lifetimes/variance.rs:7:78: 7:79
                        scope 6 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100]); // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
        _8 = discriminant((*_9));        // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
        switchInt(move _8) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
    }

    bb1: {
        _7 = move _2;                    // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100]); // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:38: 7:39
        _3 = ((*_10).0: fn(&u8));        // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:38: 7:39
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100]); // scope 2 at ui/async-await/multiple-lifetimes/variance.rs:7:53: 7:54
        _4 = ((*_11).1: fn(&u8) -> &u8); // scope 2 at ui/async-await/multiple-lifetimes/variance.rs:7:53: 7:54
        _12 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100]); // scope 4 at ui/async-await/multiple-lifetimes/variance.rs:7:78: 7:79
        _5 = ((*_12).2: fn() -> &u8);    // scope 4 at ui/async-await/multiple-lifetimes/variance.rs:7:78: 7:79
        _6 = const ();                   // scope 6 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
        _0 = Poll::<()>::Ready(move _6); // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:100: 7:100
        _13 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100]); // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:100: 7:100
        discriminant((*_13)) = 1;        // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:100: 7:100
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:100: 7:100
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:7:97: 7:100
    }
}

fn take_any(_1: &u8) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:9:21: 9:21

    bb0: {
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:9:24: 9:24
    }
}

fn identify(_1: &u8) -> &u8 {
    debug x => _1;                       // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:10:13: 10:14
    let mut _0: &u8;                     // return place in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:10:24: 10:27

    bb0: {
        _0 = _1;                         // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:10:30: 10:31
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:10:33: 10:33
    }
}

fn give_back() -> &u8 {
    let mut _0: &u8;                     // return place in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:11:33: 11:36
    let mut _1: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:11:33: 11:36

    bb0: {
        _1 = const _;                    // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:11:33: 11:36
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/variance.rs:11:33: 11:36
                                         // + literal: Const { ty: &u8, val: Unevaluated(give_back, [], Some(promoted[0])) }
        _0 = _1;                         // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:11:33: 11:36
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:11:38: 11:38
    }
}

promoted[0] in give_back: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:11:33: 11:36
    let mut _1: u8;                      // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:11:34: 11:36

    bb0: {
        _1 = const 22_u8;                // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:11:34: 11:36
        _0 = &_1;                        // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:11:33: 11:36
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:11:33: 11:36
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:13:11: 13:11
    let mut _1: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:14:13: 14:59
    let mut _2: for<'a> fn(&'a u8);      // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:14:29: 14:37
    let mut _3: for<'a> fn(&'a u8) -> &'a u8; // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:14:39: 14:47
    let mut _4: fn() -> &u8;             // in scope 0 at ui/async-await/multiple-lifetimes/variance.rs:14:49: 14:58
    scope 1 {
    }

    bb0: {
        _2 = take_any as for<'a> fn(&'a u8) (Pointer(ReifyFnPointer)); // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:14:29: 14:37
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/variance.rs:14:29: 14:37
                                         // + literal: Const { ty: for<'a> fn(&'a u8) {take_any}, val: Value(<ZST>) }
        _3 = identify as for<'a> fn(&'a u8) -> &'a u8 (Pointer(ReifyFnPointer)); // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:14:39: 14:47
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/variance.rs:14:39: 14:47
                                         // + literal: Const { ty: for<'a> fn(&'a u8) -> &'a u8 {identify}, val: Value(<ZST>) }
        _4 = give_back as fn() -> &u8 (Pointer(ReifyFnPointer)); // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:14:49: 14:58
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/variance.rs:14:49: 14:58
                                         // + literal: Const { ty: fn() -> &'static u8 {give_back}, val: Value(<ZST>) }
        _1 = lotsa_lifetimes(move _2, move _3, move _4) -> bb1; // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:14:13: 14:59
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/variance.rs:14:13: 14:28
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(fn(&'a u8), fn(&'b u8) -> &'b u8, fn() -> &'c u8) -> impl Future<Output = ()> {lotsa_lifetimes}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/variance.rs:15:2: 15:2
    }
}
