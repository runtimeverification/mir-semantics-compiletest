// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn async_ret_impl_trait(_1: &u8, _2: &u8) -> impl Future<Output = impl Trait<'_, '_>> {
    debug a => _1;                       // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:39: 11:40
    debug b => _2;                       // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:50: 11:51
    let mut _0: impl std::future::Future<Output = impl Trait<'_, '_>>; // return place in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:64: 11:82
    let mut _3: [async fn body@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2]; // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2

    bb0: {
        _3 = [generator@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2 (#0)] { a: _1, b: _2 }; // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
                                         // generator
                                         // + def_id: DefId(0:11 ~ ret_impl_trait_fg[bcf3]::async_ret_impl_trait::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (&u8, &u8),
                                         //     {},
                                         //     (&u8, &u8),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(&u8, &u8), [async fn body@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2]>(move _3) -> bb1; // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2]) -> [async fn body@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2] {identity_future::<(&u8, &u8), [async fn body@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:13:2: 13:2
    }
}

fn async_ret_impl_trait::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2]>, _2: &mut Context<'_>) -> Poll<(&u8, &u8)> {
    debug _task_context => _8;           // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
    debug a => ((*(_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2])).0: &u8); // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:39: 11:40
    debug b => ((*(_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2])).1: &u8); // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:50: 11:51
    let mut _0: std::task::Poll<(&u8, &u8)>; // return place in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
    let _3: &u8;                         // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:39: 11:40
    let mut _5: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:12:6: 12:7
    let mut _6: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:12:9: 12:10
    let mut _7: (&u8, &u8);              // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
    let mut _8: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
    let mut _9: u32;                     // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
    let mut _10: &mut [async fn body@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2]; // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
    let mut _11: &mut [async fn body@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2]; // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
    let mut _12: &mut [async fn body@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2]; // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
    let mut _13: &mut [async fn body@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2]; // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
    scope 1 {
        debug a => _3;                   // in scope 1 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:39: 11:40
        let _4: &u8;                     // in scope 1 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:50: 11:51
        scope 2 {
            debug b => _4;               // in scope 2 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:50: 11:51
        }
    }

    bb0: {
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2]); // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
        _9 = discriminant((*_10));       // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
        switchInt(move _9) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
    }

    bb1: {
        _8 = move _2;                    // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2]); // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:39: 11:40
        _3 = ((*_11).0: &u8);            // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:39: 11:40
        _12 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2]); // scope 1 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:50: 11:51
        _4 = ((*_12).1: &u8);            // scope 1 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:50: 11:51
        _5 = _3;                         // scope 2 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:12:6: 12:7
        _6 = _4;                         // scope 2 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:12:9: 12:10
        _7 = (move _5, move _6);         // scope 2 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:12:5: 12:11
        _0 = Poll::<(&u8, &u8)>::Ready(move _7); // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:13:2: 13:2
        _13 = deref_copy (_1.0: &mut [async fn body@ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2]); // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:13:2: 13:2
        discriminant((*_13)) = 1;        // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:13:2: 13:2
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:13:2: 13:2
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:11:83: 13:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:15:11: 15:11
    let mut _1: impl std::future::Future<Output = impl Trait<'_, '_>>; // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:13: 16:43
    let mut _2: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:34: 16:37
    let _3: &u8;                         // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:34: 16:37
    let mut _4: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:39: 16:42
    let _5: &u8;                         // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:39: 16:42
    let mut _6: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:39: 16:42
    let mut _7: &u8;                     // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:34: 16:37
    scope 1 {
    }

    bb0: {
        _7 = const _;                    // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:34: 16:37
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:34: 16:37
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[1])) }
        _3 = _7;                         // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:34: 16:37
        _2 = _3;                         // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:34: 16:37
        _6 = const _;                    // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:39: 16:42
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:39: 16:42
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _6;                         // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:39: 16:42
        _4 = _5;                         // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:39: 16:42
        _1 = async_ret_impl_trait(move _2, move _4) -> bb1; // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:13: 16:43
                                         // mir::Constant
                                         // + span: ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:13: 16:33
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8) -> impl Future<Output = impl Trait<'a, 'b>> {async_ret_impl_trait}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:17:2: 17:2
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:39: 16:42
    let mut _1: u8;                      // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:40: 16:42

    bb0: {
        _1 = const 44_u8;                // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:40: 16:42
        _0 = &_1;                        // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:39: 16:42
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:39: 16:42
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:34: 16:37
    let mut _1: u8;                      // in scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:35: 16:37

    bb0: {
        _1 = const 22_u8;                // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:35: 16:37
        _0 = &_1;                        // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:34: 16:37
        return;                          // scope 0 at ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs:16:34: 16:37
    }
}
