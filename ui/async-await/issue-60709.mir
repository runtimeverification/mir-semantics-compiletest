// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/issue-60709.rs:15:1: 15:22>::poll(_1: Pin<&mut Never>, _2: &mut Context<'_>) -> Poll<()> {
    debug self => _1;                    // in scope 0 at ui/async-await/issue-60709.rs:17:13: 17:17
    debug _cx => _2;                     // in scope 0 at ui/async-await/issue-60709.rs:17:35: 17:38
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issue-60709.rs:17:61: 17:79

    bb0: {
        _0 = const Poll::<()>::Pending;  // scope 0 at ui/async-await/issue-60709.rs:18:9: 18:22
                                         // mir::Constant
                                         // + span: ui/async-await/issue-60709.rs:18:9: 18:22
                                         // + literal: Const { ty: Poll<()>, val: Value(Scalar(0x01)) }
        return;                          // scope 0 at ui/async-await/issue-60709.rs:19:6: 19:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issue-60709.rs:22:11: 22:11
    let _1: [async block@ui/async-await/issue-60709.rs:23:15: 26:6]; // in scope 0 at ui/async-await/issue-60709.rs:23:9: 23:12
    let mut _2: [async block@ui/async-await/issue-60709.rs:23:15: 26:6]; // in scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    scope 1 {
        debug fut => _1;                 // in scope 1 at ui/async-await/issue-60709.rs:23:9: 23:12
        let _3: [async block@ui/async-await/issue-60709.rs:23:15: 26:6]; // in scope 1 at ui/async-await/issue-60709.rs:27:9: 27:13
        scope 2 {
            debug _bla => _3;            // in scope 2 at ui/async-await/issue-60709.rs:27:9: 27:13
        }
    }

    bb0: {
        _2 = [generator@ui/async-await/issue-60709.rs:23:15: 26:6 (#0)]; // scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
                                         // generator
                                         // + def_id: DefId(0:14 ~ issue_60709[5f58]::main::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, std::rc::Rc<()>, Never, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _1 = identity_future::<(), [async block@ui/async-await/issue-60709.rs:23:15: 26:6]>(move _2) -> bb1; // scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
                                         // mir::Constant
                                         // + span: ui/async-await/issue-60709.rs:23:15: 26:6
                                         // + literal: Const { ty: fn([async block@ui/async-await/issue-60709.rs:23:15: 26:6]) -> [async block@ui/async-await/issue-60709.rs:23:15: 26:6] {identity_future::<(), [async block@ui/async-await/issue-60709.rs:23:15: 26:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _1;                    // scope 1 at ui/async-await/issue-60709.rs:27:16: 27:19
        drop(_3) -> bb2;                 // scope 1 at ui/async-await/issue-60709.rs:28:1: 28:2
    }

    bb2: {
        return;                          // scope 0 at ui/async-await/issue-60709.rs:28:2: 28:2
    }
}

fn main::{closure#0}(_1: Pin<&mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _17;          // in scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    let mut _3: ();                      // in scope 0 at ui/async-await/issue-60709.rs:24:27: 24:29
    let mut _4: Never;                   // in scope 0 at ui/async-await/issue-60709.rs:25:16: 25:22
    let mut _5: Never;                   // in scope 0 at ui/async-await/issue-60709.rs:25:9: 25:16
    let mut _6: std::task::Poll<()>;     // in scope 0 at ui/async-await/issue-60709.rs:25:16: 25:22
    let mut _7: std::pin::Pin<&mut Never>; // in scope 0 at ui/async-await/issue-60709.rs:25:16: 25:22
    let mut _8: &mut Never;              // in scope 0 at ui/async-await/issue-60709.rs:25:16: 25:22
    let mut _9: &mut Never;              // in scope 0 at ui/async-await/issue-60709.rs:25:16: 25:22
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-60709.rs:25:9: 25:22
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-60709.rs:25:9: 25:22
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-60709.rs:25:16: 25:22
    let mut _13: isize;                  // in scope 0 at ui/async-await/issue-60709.rs:25:16: 25:22
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-60709.rs:25:16: 25:22
    let mut _16: ();                     // in scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    let mut _17: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    let mut _18: u32;                    // in scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    let mut _19: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]; // in scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    let mut _20: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]; // in scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    let mut _21: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]; // in scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    let mut _22: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]; // in scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    let mut _23: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]; // in scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    let mut _24: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]; // in scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    let mut _25: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]; // in scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    let mut _26: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]; // in scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    let mut _27: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]; // in scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    scope 1 {
        debug _rc => (((*(_1.0: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6])) as variant#3).0: std::rc::Rc<()>); // in scope 1 at ui/async-await/issue-60709.rs:24:13: 24:16
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6])) as variant#3).1: Never); // in scope 2 at ui/async-await/issue-60709.rs:25:16: 25:22
            let _14: ();                 // in scope 2 at ui/async-await/issue-60709.rs:25:9: 25:22
            scope 3 {
            }
            scope 4 {
                debug result => _14;     // in scope 4 at ui/async-await/issue-60709.rs:25:9: 25:22
            }
        }
    }

    bb0: {
        _19 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]); // scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
        _18 = discriminant((*_19));      // scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
        switchInt(move _18) -> [0: bb1, 1: bb15, 2: bb14, 3: bb13, otherwise: bb16]; // scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    }

    bb1: {
        _17 = move _2;                   // scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
        _3 = ();                         // scope 0 at ui/async-await/issue-60709.rs:24:27: 24:29
        _20 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]); // scope 0 at ui/async-await/issue-60709.rs:24:19: 24:30
        (((*_20) as variant#3).0: std::rc::Rc<()>) = Rc::<()>::new(move _3) -> [return: bb2, unwind: bb12]; // scope 0 at ui/async-await/issue-60709.rs:24:19: 24:30
                                         // mir::Constant
                                         // + span: ui/async-await/issue-60709.rs:24:19: 24:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(()) -> Rc<()> {Rc::<()>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Never;                      // scope 1 at ui/async-await/issue-60709.rs:25:9: 25:16
        _4 = <Never as IntoFuture>::into_future(move _5) -> [return: bb3, unwind: bb11]; // scope 1 at ui/async-await/issue-60709.rs:25:16: 25:22
                                         // mir::Constant
                                         // + span: ui/async-await/issue-60709.rs:25:16: 25:22
                                         // + literal: Const { ty: fn(Never) -> <Never as IntoFuture>::IntoFuture {<Never as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _21 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]); // scope 1 at ui/async-await/issue-60709.rs:25:16: 25:22
        (((*_21) as variant#3).1: Never) = move _4; // scope 1 at ui/async-await/issue-60709.rs:25:16: 25:22
        goto -> bb4;                     // scope 2 at ui/async-await/issue-60709.rs:25:16: 25:22
    }

    bb4: {
        _22 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]); // scope 3 at ui/async-await/issue-60709.rs:25:16: 25:22
        _9 = &mut (((*_22) as variant#3).1: Never); // scope 3 at ui/async-await/issue-60709.rs:25:16: 25:22
        _8 = &mut (*_9);                 // scope 3 at ui/async-await/issue-60709.rs:25:16: 25:22
        _7 = Pin::<&mut Never>::new_unchecked(move _8) -> [return: bb5, unwind: bb11]; // scope 3 at ui/async-await/issue-60709.rs:25:16: 25:22
                                         // mir::Constant
                                         // + span: ui/async-await/issue-60709.rs:25:16: 25:22
                                         // + literal: Const { ty: unsafe fn(&mut Never) -> Pin<&mut Never> {Pin::<&mut Never>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = _17;                       // scope 3 at ui/async-await/issue-60709.rs:25:16: 25:22
        _11 = move _12;                  // scope 3 at ui/async-await/issue-60709.rs:25:9: 25:22
        _10 = &mut (*_11);               // scope 3 at ui/async-await/issue-60709.rs:25:9: 25:22
        _6 = <Never as Future>::poll(move _7, move _10) -> [return: bb6, unwind: bb11]; // scope 3 at ui/async-await/issue-60709.rs:25:16: 25:22
                                         // mir::Constant
                                         // + span: ui/async-await/issue-60709.rs:25:16: 25:22
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut Never>, &'b mut Context<'c>) -> Poll<<Never as Future>::Output> {<Never as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = discriminant(_6);          // scope 2 at ui/async-await/issue-60709.rs:25:16: 25:22
        switchInt(move _13) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at ui/async-await/issue-60709.rs:25:16: 25:22
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/issue-60709.rs:25:16: 25:22
        _23 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]); // scope 2 at ui/async-await/issue-60709.rs:25:16: 25:22
        discriminant((*_23)) = 3;        // scope 2 at ui/async-await/issue-60709.rs:25:16: 25:22
        return;                          // scope 2 at ui/async-await/issue-60709.rs:25:16: 25:22
    }

    bb8: {
        unreachable;                     // scope 2 at ui/async-await/issue-60709.rs:25:16: 25:22
    }

    bb9: {
        _14 = ((_6 as Ready).0: ());     // scope 2 at ui/async-await/issue-60709.rs:25:9: 25:22
        _16 = const ();                  // scope 0 at ui/async-await/issue-60709.rs:23:21: 26:6
        _24 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]); // scope 0 at ui/async-await/issue-60709.rs:26:5: 26:6
        drop((((*_24) as variant#3).0: std::rc::Rc<()>)) -> [return: bb10, unwind: bb12]; // scope 0 at ui/async-await/issue-60709.rs:26:5: 26:6
    }

    bb10: {
        _0 = Poll::<()>::Ready(move _16); // scope 0 at ui/async-await/issue-60709.rs:26:6: 26:6
        _25 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]); // scope 0 at ui/async-await/issue-60709.rs:26:6: 26:6
        discriminant((*_25)) = 1;        // scope 0 at ui/async-await/issue-60709.rs:26:6: 26:6
        return;                          // scope 0 at ui/async-await/issue-60709.rs:26:6: 26:6
    }

    bb11 (cleanup): {
        _26 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]); // scope 0 at ui/async-await/issue-60709.rs:26:5: 26:6
        drop((((*_26) as variant#3).0: std::rc::Rc<()>)) -> bb12; // scope 0 at ui/async-await/issue-60709.rs:26:5: 26:6
    }

    bb12 (cleanup): {
        _27 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-60709.rs:23:15: 26:6]); // scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
        discriminant((*_27)) = 2;        // scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
        resume;                          // scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    }

    bb13: {
        _15 = move _2;                   // scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
        _17 = move _15;                  // scope 2 at ui/async-await/issue-60709.rs:25:16: 25:22
        goto -> bb4;                     // scope 2 at ui/async-await/issue-60709.rs:25:16: 25:22
    }

    bb14: {
        assert(const false, "`async fn` resumed after panicking") -> bb14; // scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    }

    bb15: {
        assert(const false, "`async fn` resumed after completion") -> bb15; // scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    }

    bb16: {
        unreachable;                     // scope 0 at ui/async-await/issue-60709.rs:23:15: 26:6
    }
}

fn Never() -> Never {
    let mut _0: Never;                   // return place in scope 0 at ui/async-await/issue-60709.rs:14:1: 14:13

    bb0: {
        _0 = Never;                      // scope 0 at ui/async-await/issue-60709.rs:14:1: 14:13
        return;                          // scope 0 at ui/async-await/issue-60709.rs:14:1: 14:13
    }
}

// MIR FOR CTFE
fn Never() -> Never {
    let mut _0: Never;                   // return place in scope 0 at ui/async-await/issue-60709.rs:14:1: 14:13

    bb0: {
        _0 = Never;                      // scope 0 at ui/async-await/issue-60709.rs:14:1: 14:13
        return;                          // scope 0 at ui/async-await/issue-60709.rs:14:1: 14:13
    }
}
