// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/await-sequence.rs:7:11: 7:11
    let mut _1: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:8:13: 8:24
    scope 1 {
    }

    bb0: {
        _1 = real_main() -> bb1;         // scope 0 at ui/async-await/await-sequence.rs:8:13: 8:24
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:8:13: 8:22
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {real_main}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/async-await/await-sequence.rs:8:24: 8:25
    }

    bb2: {
        return;                          // scope 0 at ui/async-await/await-sequence.rs:9:2: 9:2
    }
}

fn nop() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/await-sequence.rs:11:16: 11:16
    let mut _1: [async fn body@ui/async-await/await-sequence.rs:11:16: 11:18]; // in scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18

    bb0: {
        _1 = [generator@ui/async-await/await-sequence.rs:11:16: 11:18 (#0)]; // scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18
                                         // generator
                                         // + def_id: DefId(0:6 ~ await_sequence[280a]::nop::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/await-sequence.rs:11:16: 11:18]>(move _1) -> bb1; // scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:11:16: 11:18
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/await-sequence.rs:11:16: 11:18]) -> [async fn body@ui/async-await/await-sequence.rs:11:16: 11:18] {identity_future::<(), [async fn body@ui/async-await/await-sequence.rs:11:16: 11:18]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/await-sequence.rs:11:18: 11:18
    }
}

fn nop::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/await-sequence.rs:11:16: 11:18]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18
    let mut _3: ();                      // in scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18
    let mut _5: u32;                     // in scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18
    let mut _6: &mut [async fn body@ui/async-await/await-sequence.rs:11:16: 11:18]; // in scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18
    let mut _7: &mut [async fn body@ui/async-await/await-sequence.rs:11:16: 11:18]; // in scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18

    bb0: {
        _6 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:11:16: 11:18]); // scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18
        _3 = const ();                   // scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/await-sequence.rs:11:18: 11:18
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:11:16: 11:18]); // scope 0 at ui/async-await/await-sequence.rs:11:18: 11:18
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/await-sequence.rs:11:18: 11:18
        return;                          // scope 0 at ui/async-await/await-sequence.rs:11:18: 11:18
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/await-sequence.rs:11:16: 11:18
    }
}

fn real_main() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/await-sequence.rs:13:22: 13:22
    let mut _1: [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2

    bb0: {
        _1 = [generator@ui/async-await/await-sequence.rs:13:22: 21:2 (#0)]; // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
                                         // generator
                                         // + def_id: DefId(0:8 ~ await_sequence[280a]::real_main::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     for<'a> {std::future::ResumeTy, impl std::future::Future<Output = ()>, (), std::collections::HashMap<(), ()>, &'a mut std::collections::HashMap<(), ()>},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]>(move _1) -> bb1; // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:13:22: 21:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]) -> [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2] {identity_future::<(), [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/await-sequence.rs:21:2: 21:2
    }
}

fn real_main::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _66;          // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _3: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:14:10: 14:16
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:14:5: 14:10
    let mut _5: std::task::Poll<()>;     // in scope 0 at ui/async-await/await-sequence.rs:14:10: 14:16
    let mut _6: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/await-sequence.rs:14:10: 14:16
    let mut _7: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:14:10: 14:16
    let mut _8: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:14:10: 14:16
    let mut _9: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:14:5: 14:16
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:14:5: 14:16
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:14:10: 14:16
    let mut _12: isize;                  // in scope 0 at ui/async-await/await-sequence.rs:14:10: 14:16
    let mut _14: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:14:10: 14:16
    let mut _15: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:15:10: 15:16
    let mut _16: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:15:5: 15:10
    let mut _17: std::task::Poll<()>;    // in scope 0 at ui/async-await/await-sequence.rs:15:10: 15:16
    let mut _18: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/await-sequence.rs:15:10: 15:16
    let mut _19: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:15:10: 15:16
    let mut _20: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:15:10: 15:16
    let mut _21: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:15:5: 15:16
    let mut _22: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:15:5: 15:16
    let mut _23: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:15:10: 15:16
    let mut _24: isize;                  // in scope 0 at ui/async-await/await-sequence.rs:15:10: 15:16
    let mut _26: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:15:10: 15:16
    let mut _27: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:16:10: 16:16
    let mut _28: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:16:5: 16:10
    let mut _29: std::task::Poll<()>;    // in scope 0 at ui/async-await/await-sequence.rs:16:10: 16:16
    let mut _30: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/await-sequence.rs:16:10: 16:16
    let mut _31: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:16:10: 16:16
    let mut _32: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:16:10: 16:16
    let mut _33: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:16:5: 16:16
    let mut _34: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:16:5: 16:16
    let mut _35: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:16:10: 16:16
    let mut _36: isize;                  // in scope 0 at ui/async-await/await-sequence.rs:16:10: 16:16
    let mut _38: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:16:10: 16:16
    let mut _39: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:17:10: 17:16
    let mut _40: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:17:5: 17:10
    let mut _41: std::task::Poll<()>;    // in scope 0 at ui/async-await/await-sequence.rs:17:10: 17:16
    let mut _42: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/await-sequence.rs:17:10: 17:16
    let mut _43: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:17:10: 17:16
    let mut _44: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:17:10: 17:16
    let mut _45: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:17:5: 17:16
    let mut _46: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:17:5: 17:16
    let mut _47: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:17:10: 17:16
    let mut _48: isize;                  // in scope 0 at ui/async-await/await-sequence.rs:17:10: 17:16
    let mut _50: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:17:10: 17:16
    let _51: std::option::Option<()>;    // in scope 0 at ui/async-await/await-sequence.rs:20:5: 20:32
    let mut _52: ();                     // in scope 0 at ui/async-await/await-sequence.rs:20:20: 20:31
    let mut _53: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:20:25: 20:31
    let mut _54: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:20:20: 20:25
    let mut _55: std::task::Poll<()>;    // in scope 0 at ui/async-await/await-sequence.rs:20:25: 20:31
    let mut _56: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/await-sequence.rs:20:25: 20:31
    let mut _57: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:20:25: 20:31
    let mut _58: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/await-sequence.rs:20:25: 20:31
    let mut _59: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:20:20: 20:31
    let mut _60: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:20:20: 20:31
    let mut _61: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:20:25: 20:31
    let mut _62: isize;                  // in scope 0 at ui/async-await/await-sequence.rs:20:25: 20:31
    let mut _64: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:20:25: 20:31
    let mut _65: ();                     // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _66: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _67: u32;                    // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _68: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _69: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _70: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _71: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _72: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _73: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _74: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _75: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _76: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _77: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _78: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _79: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _80: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _81: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _82: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _83: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _84: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _85: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _86: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _87: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _88: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _89: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _90: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _91: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _92: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    let mut _93: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]; // in scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2])) as variant#3).0: impl std::future::Future<Output = ()>); // in scope 1 at ui/async-await/await-sequence.rs:14:10: 14:16
        let _13: ();                     // in scope 1 at ui/async-await/await-sequence.rs:14:5: 14:16
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at ui/async-await/await-sequence.rs:14:5: 14:16
        }
    }
    scope 4 {
        debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2])) as variant#4).0: impl std::future::Future<Output = ()>); // in scope 4 at ui/async-await/await-sequence.rs:15:10: 15:16
        let _25: ();                     // in scope 4 at ui/async-await/await-sequence.rs:15:5: 15:16
        scope 5 {
        }
        scope 6 {
            debug result => _25;         // in scope 6 at ui/async-await/await-sequence.rs:15:5: 15:16
        }
    }
    scope 7 {
        debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2])) as variant#5).0: impl std::future::Future<Output = ()>); // in scope 7 at ui/async-await/await-sequence.rs:16:10: 16:16
        let _37: ();                     // in scope 7 at ui/async-await/await-sequence.rs:16:5: 16:16
        scope 8 {
        }
        scope 9 {
            debug result => _37;         // in scope 9 at ui/async-await/await-sequence.rs:16:5: 16:16
        }
    }
    scope 10 {
        debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2])) as variant#6).0: impl std::future::Future<Output = ()>); // in scope 10 at ui/async-await/await-sequence.rs:17:10: 17:16
        let _49: ();                     // in scope 10 at ui/async-await/await-sequence.rs:17:5: 17:16
        scope 11 {
        }
        scope 12 {
            debug result => _49;         // in scope 12 at ui/async-await/await-sequence.rs:17:5: 17:16
        }
    }
    scope 13 {
        debug map => (((*(_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2])) as variant#7).0: std::collections::HashMap<(), ()>); // in scope 13 at ui/async-await/await-sequence.rs:19:9: 19:16
        scope 14 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2])) as variant#7).3: impl std::future::Future<Output = ()>); // in scope 14 at ui/async-await/await-sequence.rs:20:25: 20:31
            let _63: ();                 // in scope 14 at ui/async-await/await-sequence.rs:20:20: 20:31
            scope 15 {
            }
            scope 16 {
                debug result => _63;     // in scope 16 at ui/async-await/await-sequence.rs:20:20: 20:31
            }
        }
    }

    bb0: {
        _68 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
        _67 = discriminant((*_68));      // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
        switchInt(move _67) -> [0: bb1, 1: bb53, 2: bb52, 3: bb47, 4: bb48, 5: bb49, 6: bb50, 7: bb51, otherwise: bb54]; // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    }

    bb1: {
        _66 = move _2;                   // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
        _4 = nop() -> [return: bb2, unwind: bb46]; // scope 0 at ui/async-await/await-sequence.rs:14:5: 14:10
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:14:5: 14:8
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {nop}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <impl Future<Output = ()> as IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb46]; // scope 0 at ui/async-await/await-sequence.rs:14:10: 14:16
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:14:10: 14:16
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _69 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 0 at ui/async-await/await-sequence.rs:14:10: 14:16
        (((*_69) as variant#3).0: impl std::future::Future<Output = ()>) = move _3; // scope 0 at ui/async-await/await-sequence.rs:14:10: 14:16
        goto -> bb4;                     // scope 1 at ui/async-await/await-sequence.rs:14:10: 14:16
    }

    bb4: {
        _70 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 2 at ui/async-await/await-sequence.rs:14:10: 14:16
        _8 = &mut (((*_70) as variant#3).0: impl std::future::Future<Output = ()>); // scope 2 at ui/async-await/await-sequence.rs:14:10: 14:16
        _7 = &mut (*_8);                 // scope 2 at ui/async-await/await-sequence.rs:14:10: 14:16
        _6 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _7) -> [return: bb5, unwind: bb46]; // scope 2 at ui/async-await/await-sequence.rs:14:10: 14:16
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:14:10: 14:16
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = _66;                       // scope 2 at ui/async-await/await-sequence.rs:14:10: 14:16
        _10 = move _11;                  // scope 2 at ui/async-await/await-sequence.rs:14:5: 14:16
        _9 = &mut (*_10);                // scope 2 at ui/async-await/await-sequence.rs:14:5: 14:16
        _5 = <impl Future<Output = ()> as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb46]; // scope 2 at ui/async-await/await-sequence.rs:14:10: 14:16
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:14:10: 14:16
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = discriminant(_5);          // scope 1 at ui/async-await/await-sequence.rs:14:10: 14:16
        switchInt(move _12) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 1 at ui/async-await/await-sequence.rs:14:10: 14:16
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 1 at ui/async-await/await-sequence.rs:14:10: 14:16
        _71 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 1 at ui/async-await/await-sequence.rs:14:10: 14:16
        discriminant((*_71)) = 3;        // scope 1 at ui/async-await/await-sequence.rs:14:10: 14:16
        return;                          // scope 1 at ui/async-await/await-sequence.rs:14:10: 14:16
    }

    bb8: {
        unreachable;                     // scope 1 at ui/async-await/await-sequence.rs:14:10: 14:16
    }

    bb9: {
        _13 = ((_5 as Ready).0: ());     // scope 1 at ui/async-await/await-sequence.rs:14:5: 14:16
        _16 = nop() -> [return: bb10, unwind: bb46]; // scope 0 at ui/async-await/await-sequence.rs:15:5: 15:10
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:15:5: 15:8
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {nop}, val: Value(<ZST>) }
    }

    bb10: {
        _15 = <impl Future<Output = ()> as IntoFuture>::into_future(move _16) -> [return: bb11, unwind: bb46]; // scope 0 at ui/async-await/await-sequence.rs:15:10: 15:16
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:15:10: 15:16
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb11: {
        _72 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 0 at ui/async-await/await-sequence.rs:15:10: 15:16
        (((*_72) as variant#4).0: impl std::future::Future<Output = ()>) = move _15; // scope 0 at ui/async-await/await-sequence.rs:15:10: 15:16
        goto -> bb12;                    // scope 4 at ui/async-await/await-sequence.rs:15:10: 15:16
    }

    bb12: {
        _73 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 5 at ui/async-await/await-sequence.rs:15:10: 15:16
        _20 = &mut (((*_73) as variant#4).0: impl std::future::Future<Output = ()>); // scope 5 at ui/async-await/await-sequence.rs:15:10: 15:16
        _19 = &mut (*_20);               // scope 5 at ui/async-await/await-sequence.rs:15:10: 15:16
        _18 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _19) -> [return: bb13, unwind: bb46]; // scope 5 at ui/async-await/await-sequence.rs:15:10: 15:16
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:15:10: 15:16
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb13: {
        _23 = _66;                       // scope 5 at ui/async-await/await-sequence.rs:15:10: 15:16
        _22 = move _23;                  // scope 5 at ui/async-await/await-sequence.rs:15:5: 15:16
        _21 = &mut (*_22);               // scope 5 at ui/async-await/await-sequence.rs:15:5: 15:16
        _17 = <impl Future<Output = ()> as Future>::poll(move _18, move _21) -> [return: bb14, unwind: bb46]; // scope 5 at ui/async-await/await-sequence.rs:15:10: 15:16
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:15:10: 15:16
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb14: {
        _24 = discriminant(_17);         // scope 4 at ui/async-await/await-sequence.rs:15:10: 15:16
        switchInt(move _24) -> [0: bb17, 1: bb15, otherwise: bb16]; // scope 4 at ui/async-await/await-sequence.rs:15:10: 15:16
    }

    bb15: {
        _0 = Poll::<()>::Pending;        // scope 4 at ui/async-await/await-sequence.rs:15:10: 15:16
        _74 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 4 at ui/async-await/await-sequence.rs:15:10: 15:16
        discriminant((*_74)) = 4;        // scope 4 at ui/async-await/await-sequence.rs:15:10: 15:16
        return;                          // scope 4 at ui/async-await/await-sequence.rs:15:10: 15:16
    }

    bb16: {
        unreachable;                     // scope 4 at ui/async-await/await-sequence.rs:15:10: 15:16
    }

    bb17: {
        _25 = ((_17 as Ready).0: ());    // scope 4 at ui/async-await/await-sequence.rs:15:5: 15:16
        _28 = nop() -> [return: bb18, unwind: bb46]; // scope 0 at ui/async-await/await-sequence.rs:16:5: 16:10
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:16:5: 16:8
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {nop}, val: Value(<ZST>) }
    }

    bb18: {
        _27 = <impl Future<Output = ()> as IntoFuture>::into_future(move _28) -> [return: bb19, unwind: bb46]; // scope 0 at ui/async-await/await-sequence.rs:16:10: 16:16
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:16:10: 16:16
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb19: {
        _75 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 0 at ui/async-await/await-sequence.rs:16:10: 16:16
        (((*_75) as variant#5).0: impl std::future::Future<Output = ()>) = move _27; // scope 0 at ui/async-await/await-sequence.rs:16:10: 16:16
        goto -> bb20;                    // scope 7 at ui/async-await/await-sequence.rs:16:10: 16:16
    }

    bb20: {
        _76 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 8 at ui/async-await/await-sequence.rs:16:10: 16:16
        _32 = &mut (((*_76) as variant#5).0: impl std::future::Future<Output = ()>); // scope 8 at ui/async-await/await-sequence.rs:16:10: 16:16
        _31 = &mut (*_32);               // scope 8 at ui/async-await/await-sequence.rs:16:10: 16:16
        _30 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _31) -> [return: bb21, unwind: bb46]; // scope 8 at ui/async-await/await-sequence.rs:16:10: 16:16
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:16:10: 16:16
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb21: {
        _35 = _66;                       // scope 8 at ui/async-await/await-sequence.rs:16:10: 16:16
        _34 = move _35;                  // scope 8 at ui/async-await/await-sequence.rs:16:5: 16:16
        _33 = &mut (*_34);               // scope 8 at ui/async-await/await-sequence.rs:16:5: 16:16
        _29 = <impl Future<Output = ()> as Future>::poll(move _30, move _33) -> [return: bb22, unwind: bb46]; // scope 8 at ui/async-await/await-sequence.rs:16:10: 16:16
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:16:10: 16:16
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb22: {
        _36 = discriminant(_29);         // scope 7 at ui/async-await/await-sequence.rs:16:10: 16:16
        switchInt(move _36) -> [0: bb25, 1: bb23, otherwise: bb24]; // scope 7 at ui/async-await/await-sequence.rs:16:10: 16:16
    }

    bb23: {
        _0 = Poll::<()>::Pending;        // scope 7 at ui/async-await/await-sequence.rs:16:10: 16:16
        _77 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 7 at ui/async-await/await-sequence.rs:16:10: 16:16
        discriminant((*_77)) = 5;        // scope 7 at ui/async-await/await-sequence.rs:16:10: 16:16
        return;                          // scope 7 at ui/async-await/await-sequence.rs:16:10: 16:16
    }

    bb24: {
        unreachable;                     // scope 7 at ui/async-await/await-sequence.rs:16:10: 16:16
    }

    bb25: {
        _37 = ((_29 as Ready).0: ());    // scope 7 at ui/async-await/await-sequence.rs:16:5: 16:16
        _40 = nop() -> [return: bb26, unwind: bb46]; // scope 0 at ui/async-await/await-sequence.rs:17:5: 17:10
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:17:5: 17:8
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {nop}, val: Value(<ZST>) }
    }

    bb26: {
        _39 = <impl Future<Output = ()> as IntoFuture>::into_future(move _40) -> [return: bb27, unwind: bb46]; // scope 0 at ui/async-await/await-sequence.rs:17:10: 17:16
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:17:10: 17:16
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb27: {
        _78 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 0 at ui/async-await/await-sequence.rs:17:10: 17:16
        (((*_78) as variant#6).0: impl std::future::Future<Output = ()>) = move _39; // scope 0 at ui/async-await/await-sequence.rs:17:10: 17:16
        goto -> bb28;                    // scope 10 at ui/async-await/await-sequence.rs:17:10: 17:16
    }

    bb28: {
        _79 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 11 at ui/async-await/await-sequence.rs:17:10: 17:16
        _44 = &mut (((*_79) as variant#6).0: impl std::future::Future<Output = ()>); // scope 11 at ui/async-await/await-sequence.rs:17:10: 17:16
        _43 = &mut (*_44);               // scope 11 at ui/async-await/await-sequence.rs:17:10: 17:16
        _42 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _43) -> [return: bb29, unwind: bb46]; // scope 11 at ui/async-await/await-sequence.rs:17:10: 17:16
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:17:10: 17:16
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb29: {
        _47 = _66;                       // scope 11 at ui/async-await/await-sequence.rs:17:10: 17:16
        _46 = move _47;                  // scope 11 at ui/async-await/await-sequence.rs:17:5: 17:16
        _45 = &mut (*_46);               // scope 11 at ui/async-await/await-sequence.rs:17:5: 17:16
        _41 = <impl Future<Output = ()> as Future>::poll(move _42, move _45) -> [return: bb30, unwind: bb46]; // scope 11 at ui/async-await/await-sequence.rs:17:10: 17:16
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:17:10: 17:16
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb30: {
        _48 = discriminant(_41);         // scope 10 at ui/async-await/await-sequence.rs:17:10: 17:16
        switchInt(move _48) -> [0: bb33, 1: bb31, otherwise: bb32]; // scope 10 at ui/async-await/await-sequence.rs:17:10: 17:16
    }

    bb31: {
        _0 = Poll::<()>::Pending;        // scope 10 at ui/async-await/await-sequence.rs:17:10: 17:16
        _80 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 10 at ui/async-await/await-sequence.rs:17:10: 17:16
        discriminant((*_80)) = 6;        // scope 10 at ui/async-await/await-sequence.rs:17:10: 17:16
        return;                          // scope 10 at ui/async-await/await-sequence.rs:17:10: 17:16
    }

    bb32: {
        unreachable;                     // scope 10 at ui/async-await/await-sequence.rs:17:10: 17:16
    }

    bb33: {
        _49 = ((_41 as Ready).0: ());    // scope 10 at ui/async-await/await-sequence.rs:17:5: 17:16
        _81 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 0 at ui/async-await/await-sequence.rs:19:36: 19:50
        (((*_81) as variant#7).0: std::collections::HashMap<(), ()>) = HashMap::<(), ()>::new() -> [return: bb34, unwind: bb46]; // scope 0 at ui/async-await/await-sequence.rs:19:36: 19:50
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:19:36: 19:48
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> HashMap<(), ()> {HashMap::<(), ()>::new}, val: Value(<ZST>) }
    }

    bb34: {
        _82 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 13 at ui/async-await/await-sequence.rs:20:5: 20:32
        _83 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 13 at ui/async-await/await-sequence.rs:20:5: 20:32
        (((*_82) as variant#7).1: &mut std::collections::HashMap<(), ()>) = &mut (((*_83) as variant#7).0: std::collections::HashMap<(), ()>); // scope 13 at ui/async-await/await-sequence.rs:20:5: 20:32
        _84 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 13 at ui/async-await/await-sequence.rs:20:16: 20:18
        (((*_84) as variant#7).2: ()) = (); // scope 13 at ui/async-await/await-sequence.rs:20:16: 20:18
        _54 = nop() -> [return: bb35, unwind: bb45]; // scope 13 at ui/async-await/await-sequence.rs:20:20: 20:25
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:20:20: 20:23
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {nop}, val: Value(<ZST>) }
    }

    bb35: {
        _53 = <impl Future<Output = ()> as IntoFuture>::into_future(move _54) -> [return: bb36, unwind: bb45]; // scope 13 at ui/async-await/await-sequence.rs:20:25: 20:31
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:20:25: 20:31
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb36: {
        _85 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 13 at ui/async-await/await-sequence.rs:20:25: 20:31
        (((*_85) as variant#7).3: impl std::future::Future<Output = ()>) = move _53; // scope 13 at ui/async-await/await-sequence.rs:20:25: 20:31
        goto -> bb37;                    // scope 14 at ui/async-await/await-sequence.rs:20:25: 20:31
    }

    bb37: {
        _86 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 15 at ui/async-await/await-sequence.rs:20:25: 20:31
        _58 = &mut (((*_86) as variant#7).3: impl std::future::Future<Output = ()>); // scope 15 at ui/async-await/await-sequence.rs:20:25: 20:31
        _57 = &mut (*_58);               // scope 15 at ui/async-await/await-sequence.rs:20:25: 20:31
        _56 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _57) -> [return: bb38, unwind: bb45]; // scope 15 at ui/async-await/await-sequence.rs:20:25: 20:31
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:20:25: 20:31
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb38: {
        _61 = _66;                       // scope 15 at ui/async-await/await-sequence.rs:20:25: 20:31
        _60 = move _61;                  // scope 15 at ui/async-await/await-sequence.rs:20:20: 20:31
        _59 = &mut (*_60);               // scope 15 at ui/async-await/await-sequence.rs:20:20: 20:31
        _55 = <impl Future<Output = ()> as Future>::poll(move _56, move _59) -> [return: bb39, unwind: bb45]; // scope 15 at ui/async-await/await-sequence.rs:20:25: 20:31
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:20:25: 20:31
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb39: {
        _62 = discriminant(_55);         // scope 14 at ui/async-await/await-sequence.rs:20:25: 20:31
        switchInt(move _62) -> [0: bb42, 1: bb40, otherwise: bb41]; // scope 14 at ui/async-await/await-sequence.rs:20:25: 20:31
    }

    bb40: {
        _0 = Poll::<()>::Pending;        // scope 14 at ui/async-await/await-sequence.rs:20:25: 20:31
        _87 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 14 at ui/async-await/await-sequence.rs:20:25: 20:31
        discriminant((*_87)) = 7;        // scope 14 at ui/async-await/await-sequence.rs:20:25: 20:31
        return;                          // scope 14 at ui/async-await/await-sequence.rs:20:25: 20:31
    }

    bb41: {
        unreachable;                     // scope 14 at ui/async-await/await-sequence.rs:20:25: 20:31
    }

    bb42: {
        _63 = ((_55 as Ready).0: ());    // scope 14 at ui/async-await/await-sequence.rs:20:20: 20:31
        _52 = _63;                       // scope 16 at ui/async-await/await-sequence.rs:20:20: 20:31
        _88 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 13 at ui/async-await/await-sequence.rs:20:5: 20:32
        _89 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 13 at ui/async-await/await-sequence.rs:20:5: 20:32
        _51 = HashMap::<(), ()>::insert(move (((*_88) as variant#7).1: &mut std::collections::HashMap<(), ()>), move (((*_89) as variant#7).2: ()), move _52) -> [return: bb43, unwind: bb45]; // scope 13 at ui/async-await/await-sequence.rs:20:5: 20:32
                                         // mir::Constant
                                         // + span: ui/async-await/await-sequence.rs:20:9: 20:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<(), ()>, (), ()) -> Option<()> {HashMap::<(), ()>::insert}, val: Value(<ZST>) }
    }

    bb43: {
        _65 = const ();                  // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
        _90 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 0 at ui/async-await/await-sequence.rs:21:1: 21:2
        drop((((*_90) as variant#7).0: std::collections::HashMap<(), ()>)) -> [return: bb44, unwind: bb46]; // scope 0 at ui/async-await/await-sequence.rs:21:1: 21:2
    }

    bb44: {
        _0 = Poll::<()>::Ready(move _65); // scope 0 at ui/async-await/await-sequence.rs:21:2: 21:2
        _91 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 0 at ui/async-await/await-sequence.rs:21:2: 21:2
        discriminant((*_91)) = 1;        // scope 0 at ui/async-await/await-sequence.rs:21:2: 21:2
        return;                          // scope 0 at ui/async-await/await-sequence.rs:21:2: 21:2
    }

    bb45 (cleanup): {
        _92 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 0 at ui/async-await/await-sequence.rs:21:1: 21:2
        drop((((*_92) as variant#7).0: std::collections::HashMap<(), ()>)) -> bb46; // scope 0 at ui/async-await/await-sequence.rs:21:1: 21:2
    }

    bb46 (cleanup): {
        _93 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-sequence.rs:13:22: 21:2]); // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
        discriminant((*_93)) = 2;        // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
        resume;                          // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    }

    bb47: {
        _14 = move _2;                   // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
        _66 = move _14;                  // scope 1 at ui/async-await/await-sequence.rs:14:10: 14:16
        goto -> bb4;                     // scope 1 at ui/async-await/await-sequence.rs:14:10: 14:16
    }

    bb48: {
        _26 = move _2;                   // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
        _66 = move _26;                  // scope 4 at ui/async-await/await-sequence.rs:15:10: 15:16
        goto -> bb12;                    // scope 4 at ui/async-await/await-sequence.rs:15:10: 15:16
    }

    bb49: {
        _38 = move _2;                   // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
        _66 = move _38;                  // scope 7 at ui/async-await/await-sequence.rs:16:10: 16:16
        goto -> bb20;                    // scope 7 at ui/async-await/await-sequence.rs:16:10: 16:16
    }

    bb50: {
        _50 = move _2;                   // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
        _66 = move _50;                  // scope 10 at ui/async-await/await-sequence.rs:17:10: 17:16
        goto -> bb28;                    // scope 10 at ui/async-await/await-sequence.rs:17:10: 17:16
    }

    bb51: {
        _64 = move _2;                   // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
        _66 = move _64;                  // scope 14 at ui/async-await/await-sequence.rs:20:25: 20:31
        goto -> bb37;                    // scope 14 at ui/async-await/await-sequence.rs:20:25: 20:31
    }

    bb52: {
        assert(const false, "`async fn` resumed after panicking") -> bb52; // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    }

    bb53: {
        assert(const false, "`async fn` resumed after completion") -> bb53; // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    }

    bb54: {
        unreachable;                     // scope 0 at ui/async-await/await-sequence.rs:13:22: 21:2
    }
}
