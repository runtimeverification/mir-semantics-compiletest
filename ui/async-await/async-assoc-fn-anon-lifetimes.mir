// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/async-assoc-fn-anon-lifetimes.rs:11:1: 11:15>::assoc(_1: &u32, _2: B<'_>) -> impl Future<Output = ()> {
    debug x => _1;                       // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:20: 12:21
    debug y => _2;                       // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:29: 12:30
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 12:39
    let mut _3: [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6

    bb0: {
        _3 = [generator@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6 (#0)] { x: _1, y: move _2 }; // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
                                         // generator
                                         // + def_id: DefId(0:14 ~ async_assoc_fn_anon_lifetimes[e574]::{impl#0}::assoc::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     ReErased,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (&u32, B<'_>),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6]>(move _3) -> bb1; // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
                                         // mir::Constant
                                         // + span: ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6]) -> [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6] {identity_future::<(), [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:14:6: 14:6
    }
}

fn <impl at ui/async-await/async-assoc-fn-anon-lifetimes.rs:11:1: 11:15>::assoc::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _6;           // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
    debug x => ((*(_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6])).0: &u32); // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:20: 12:21
    debug y => ((*(_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6])).1: B<'_>); // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:29: 12:30
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
    let _3: &u32;                        // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:20: 12:21
    let mut _5: ();                      // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
    let mut _6: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
    let mut _7: u32;                     // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
    let mut _8: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
    let mut _9: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
    let mut _10: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
    let mut _11: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:20: 12:21
        let _4: B<'_>;                   // in scope 1 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:29: 12:30
        scope 2 {
            debug y => _4;               // in scope 2 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:29: 12:30
        }
    }

    bb0: {
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6]); // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
        _7 = discriminant((*_8));        // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
        switchInt(move _7) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
    }

    bb1: {
        _6 = move _2;                    // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6]); // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:20: 12:21
        _3 = ((*_9).0: &u32);            // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:20: 12:21
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6]); // scope 1 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:29: 12:30
        _4 = move ((*_10).1: B<'_>);     // scope 1 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:29: 12:30
        _5 = const ();                   // scope 2 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
        _0 = Poll::<()>::Ready(move _5); // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:14:6: 14:6
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6]); // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:14:6: 14:6
        discriminant((*_11)) = 1;        // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:14:6: 14:6
        return;                          // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:14:6: 14:6
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:12:39: 14:6
    }
}

fn nested(_1: &u32, _2: A<'_, '_>) -> impl Future<Output = ()> {
    debug x => _1;                       // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:25: 13:26
    debug y => _2;                       // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:34: 13:35
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:48
    let mut _3: [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50

    bb0: {
        _3 = [generator@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50 (#0)] { x: _1, y: move _2 }; // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
                                         // generator
                                         // + def_id: DefId(0:16 ~ async_assoc_fn_anon_lifetimes[e574]::{impl#0}::assoc::{closure#0}::nested::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (&u32, A<'_, '_>),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50]>(move _3) -> bb1; // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
                                         // mir::Constant
                                         // + span: ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50]) -> [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50] {identity_future::<(), [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:50: 13:50
    }
}

fn nested::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _6;           // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
    debug x => ((*(_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50])).0: &u32); // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:25: 13:26
    debug y => ((*(_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50])).1: A<'_, '_>); // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:34: 13:35
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
    let _3: &u32;                        // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:25: 13:26
    let mut _5: ();                      // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
    let mut _6: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
    let mut _7: u32;                     // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
    let mut _8: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
    let mut _9: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
    let mut _10: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
    let mut _11: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:25: 13:26
        let _4: A<'_, '_>;               // in scope 1 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:34: 13:35
        scope 2 {
            debug y => _4;               // in scope 2 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:34: 13:35
        }
    }

    bb0: {
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50]); // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
        _7 = discriminant((*_8));        // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
        switchInt(move _7) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
    }

    bb1: {
        _6 = move _2;                    // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50]); // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:25: 13:26
        _3 = ((*_9).0: &u32);            // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:25: 13:26
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50]); // scope 1 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:34: 13:35
        _4 = move ((*_10).1: A<'_, '_>); // scope 1 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:34: 13:35
        _5 = const ();                   // scope 2 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
        _0 = Poll::<()>::Ready(move _5); // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:50: 13:50
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50]); // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:50: 13:50
        discriminant((*_11)) = 1;        // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:50: 13:50
        return;                          // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:50: 13:50
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:13:48: 13:50
    }
}

fn <impl at ui/async-await/async-assoc-fn-anon-lifetimes.rs:11:1: 11:15>::assoc2(_1: &u32, _2: A<'_, '_>) -> impl Future<Output = ()> {
    debug x => _1;                       // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:21: 16:22
    debug y => _2;                       // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:30: 16:31
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 16:44
    let mut _3: [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6

    bb0: {
        _3 = [generator@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6 (#0)] { x: _1, y: move _2 }; // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
                                         // generator
                                         // + def_id: DefId(0:18 ~ async_assoc_fn_anon_lifetimes[e574]::{impl#0}::assoc2::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     ReErased,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (&u32, A<'_, '_>),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6]>(move _3) -> bb1; // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
                                         // mir::Constant
                                         // + span: ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6]) -> [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6] {identity_future::<(), [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:20:6: 20:6
    }
}

fn <impl at ui/async-await/async-assoc-fn-anon-lifetimes.rs:11:1: 11:15>::assoc2::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _6;           // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
    debug x => ((*(_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6])).0: &u32); // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:21: 16:22
    debug y => ((*(_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6])).1: A<'_, '_>); // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:30: 16:31
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
    let _3: &u32;                        // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:21: 16:22
    let mut _5: ();                      // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
    let mut _6: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
    let mut _7: u32;                     // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
    let mut _8: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
    let mut _9: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
    let mut _10: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
    let mut _11: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:21: 16:22
        let _4: A<'_, '_>;               // in scope 1 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:30: 16:31
        scope 2 {
            debug y => _4;               // in scope 2 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:30: 16:31
        }
    }

    bb0: {
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6]); // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
        _7 = discriminant((*_8));        // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
        switchInt(move _7) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
    }

    bb1: {
        _6 = move _2;                    // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6]); // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:21: 16:22
        _3 = ((*_9).0: &u32);            // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:21: 16:22
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6]); // scope 1 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:30: 16:31
        _4 = move ((*_10).1: A<'_, '_>); // scope 1 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:30: 16:31
        _5 = const ();                   // scope 2 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
        _0 = Poll::<()>::Ready(move _5); // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:20:6: 20:6
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6]); // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:20:6: 20:6
        discriminant((*_11)) = 1;        // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:20:6: 20:6
        return;                          // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:20:6: 20:6
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:16:44: 20:6
    }
}

fn <impl at ui/async-await/async-assoc-fn-anon-lifetimes.rs:11:1: 11:15>::assoc2::{closure#0}::<impl at ui/async-await/async-assoc-fn-anon-lifetimes.rs:17:9: 17:23>::nested_assoc(_1: &u32, _2: B<'_>) -> impl Future<Output = ()> {
    debug x => _1;                       // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:35: 18:36
    debug y => _2;                       // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:44: 18:45
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:54
    let mut _3: [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56

    bb0: {
        _3 = [generator@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56 (#0)] { x: _1, y: move _2 }; // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
                                         // generator
                                         // + def_id: DefId(0:21 ~ async_assoc_fn_anon_lifetimes[e574]::{impl#0}::assoc2::{closure#0}::{impl#0}::nested_assoc::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     ReErased,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (&u32, B<'_>),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56]>(move _3) -> bb1; // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
                                         // mir::Constant
                                         // + span: ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56]) -> [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56] {identity_future::<(), [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:56: 18:56
    }
}

fn <impl at ui/async-await/async-assoc-fn-anon-lifetimes.rs:11:1: 11:15>::assoc2::{closure#0}::<impl at ui/async-await/async-assoc-fn-anon-lifetimes.rs:17:9: 17:23>::nested_assoc::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _6;           // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
    debug x => ((*(_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56])).0: &u32); // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:35: 18:36
    debug y => ((*(_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56])).1: B<'_>); // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:44: 18:45
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
    let _3: &u32;                        // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:35: 18:36
    let mut _5: ();                      // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
    let mut _6: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
    let mut _7: u32;                     // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
    let mut _8: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
    let mut _9: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
    let mut _10: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
    let mut _11: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56]; // in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:35: 18:36
        let _4: B<'_>;                   // in scope 1 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:44: 18:45
        scope 2 {
            debug y => _4;               // in scope 2 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:44: 18:45
        }
    }

    bb0: {
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56]); // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
        _7 = discriminant((*_8));        // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
        switchInt(move _7) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
    }

    bb1: {
        _6 = move _2;                    // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56]); // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:35: 18:36
        _3 = ((*_9).0: &u32);            // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:35: 18:36
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56]); // scope 1 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:44: 18:45
        _4 = move ((*_10).1: B<'_>);     // scope 1 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:44: 18:45
        _5 = const ();                   // scope 2 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
        _0 = Poll::<()>::Ready(move _5); // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:56: 18:56
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56]); // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:56: 18:56
        discriminant((*_11)) = 1;        // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:56: 18:56
        return;                          // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:56: 18:56
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:18:54: 18:56
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:23:11: 23:11

    bb0: {
        return;                          // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:23:13: 23:13
    }
}

fn A(_1: &&i32) -> A<'_, '_> {
    let mut _0: A<'_, '_>;               // return place in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:8:1: 8:17

    bb0: {
        _0 = A::<'_, '_>(move _1);       // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:8:1: 8:17
        return;                          // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:8:1: 8:17
    }
}

// MIR FOR CTFE
fn A(_1: &&i32) -> A<'_, '_> {
    let mut _0: A<'_, '_>;               // return place in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:8:1: 8:17

    bb0: {
        _0 = A::<'_, '_>(move _1);       // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:8:1: 8:17
        return;                          // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:8:1: 8:17
    }
}

fn B(_1: &i32) -> B<'_> {
    let mut _0: B<'_>;                   // return place in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:9:1: 9:13

    bb0: {
        _0 = B::<'_>(move _1);           // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:9:1: 9:13
        return;                          // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:9:1: 9:13
    }
}

// MIR FOR CTFE
fn B(_1: &i32) -> B<'_> {
    let mut _0: B<'_>;                   // return place in scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:9:1: 9:13

    bb0: {
        _0 = B::<'_>(move _1);           // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:9:1: 9:13
        return;                          // scope 0 at ui/async-await/async-assoc-fn-anon-lifetimes.rs:9:1: 9:13
    }
}
