// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/in-trait/async-associated-types2.rs:18:1: 18:21>::foo(_1: &i32) -> <i32 as MyTrait>::Fut<'_> {
    debug self => _1;                    // in scope 0 at ui/async-await/in-trait/async-associated-types2.rs:23:16: 23:24
    let mut _0: <i32 as MyTrait>::Fut<'_>; // return place in scope 0 at ui/async-await/in-trait/async-associated-types2.rs:23:29: 23:42
    let mut _2: [async block@ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10]; // in scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
    let mut _3: &i32;                    // in scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10

    bb0: {
        _3 = _1;                         // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
        _2 = [generator@ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10 (#0)] { self: move _3 }; // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
                                         // generator
                                         // + def_id: DefId(0:14 ~ async_associated_types2[99a8]::{impl#0}::foo::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     i32,
                                         //     {},
                                         //     (&i32,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<i32, [async block@ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10]>(move _2) -> bb1; // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
                                         // + literal: Const { ty: fn([async block@ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10]) -> [async block@ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10] {identity_future::<i32, [async block@ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:27:6: 27:6
    }
}

fn <impl at ui/async-await/in-trait/async-associated-types2.rs:18:1: 18:21>::foo::{closure#0}(_1: Pin<&mut [async block@ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10]>, _2: &mut Context<'_>) -> Poll<i32> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
    debug self => (*((*(_1.0: &mut [async block@ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10])).0: &i32)); // in scope 0 at ui/async-await/in-trait/async-associated-types2.rs:23:16: 23:24
    let mut _0: std::task::Poll<i32>;    // return place in scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
    let mut _3: &i32;                    // in scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
    let mut _4: i32;                     // in scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
    let mut _6: u32;                     // in scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
    let mut _7: &mut [async block@ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10]; // in scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
    let mut _8: &mut [async block@ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10]; // in scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
    let mut _9: &mut [async block@ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10]; // in scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10

    bb0: {
        _7 = deref_copy (_1.0: &mut [async block@ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10]); // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
        switchInt(move _6) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
        _8 = deref_copy (_1.0: &mut [async block@ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10]); // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:25:13: 25:18
        _3 = deref_copy ((*_8).0: &i32); // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:25:13: 25:18
        _4 = (*_3);                      // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:25:13: 25:18
        _0 = Poll::<i32>::Ready(move _4); // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:26:10: 26:10
        _9 = deref_copy (_1.0: &mut [async block@ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10]); // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:26:10: 26:10
        discriminant((*_9)) = 1;         // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:26:10: 26:10
        return;                          // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:26:10: 26:10
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:24:9: 26:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/in-trait/async-associated-types2.rs:30:11: 30:11

    bb0: {
        return;                          // scope 0 at ui/async-await/in-trait/async-associated-types2.rs:30:13: 30:13
    }
}
