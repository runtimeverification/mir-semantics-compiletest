// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:13:1: 13:44>::foo(_1: &U, _2: &T) -> impl Future<Output = (&U, &T)> {
    debug self => _1;                    // in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:18: 14:26
    debug key => _2;                     // in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:28: 14:31
    let mut _0: impl std::future::Future<Output = (&U, &T)>; // return place in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:43: 14:57
    let mut _3: [async fn body@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6]; // in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6

    bb0: {
        _3 = [generator@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6 (#0)] { self: _1, key: _2 }; // scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
                                         // generator
                                         // + def_id: DefId(0:15 ~ async_lifetimes_and_bounds[11d0]::{impl#0}::foo::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     ReErased,
                                         //     T,
                                         //     U,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (&U, &T),
                                         //     {},
                                         //     (&U, &T),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(&U, &T), [async fn body@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6]>(move _3) -> bb1; // scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6]) -> [async fn body@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6] {identity_future::<(&U, &T), [async fn body@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:16:6: 16:6
    }
}

fn <impl at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:13:1: 13:44>::foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6]>, _2: &mut Context<'_>) -> Poll<(&U, &T)> {
    debug _task_context => _8;           // in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
    debug self => ((*(_1.0: &mut [async fn body@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6])).0: &U); // in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:18: 14:26
    debug key => ((*(_1.0: &mut [async fn body@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6])).1: &T); // in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:28: 14:31
    let mut _0: std::task::Poll<(&U, &T)>; // return place in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
    let _3: &U;                          // in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:18: 14:26
    let mut _5: &U;                      // in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:15:10: 15:14
    let mut _6: &T;                      // in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:15:16: 15:19
    let mut _7: (&U, &T);                // in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
    let mut _8: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
    let mut _9: u32;                     // in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
    let mut _10: &mut [async fn body@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6]; // in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
    let mut _11: &mut [async fn body@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6]; // in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
    let mut _12: &mut [async fn body@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6]; // in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
    let mut _13: &mut [async fn body@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6]; // in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
    scope 1 {
        debug self => _3;                // in scope 1 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:18: 14:26
        let _4: &T;                      // in scope 1 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:28: 14:31
        scope 2 {
            debug key => _4;             // in scope 2 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:28: 14:31
        }
    }

    bb0: {
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6]); // scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
        _9 = discriminant((*_10));       // scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
        switchInt(move _9) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
    }

    bb1: {
        _8 = move _2;                    // scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6]); // scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:18: 14:26
        _3 = ((*_11).0: &U);             // scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:18: 14:26
        _12 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6]); // scope 1 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:28: 14:31
        _4 = ((*_12).1: &T);             // scope 1 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:28: 14:31
        _5 = _3;                         // scope 2 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:15:10: 15:14
        _6 = _4;                         // scope 2 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:15:16: 15:19
        _7 = (move _5, move _6);         // scope 2 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:15:9: 15:20
        _0 = Poll::<(&U, &T)>::Ready(move _7); // scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:16:6: 16:6
        _13 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6]); // scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:16:6: 16:6
        discriminant((*_13)) = 1;        // scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:16:6: 16:6
        return;                          // scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:16:6: 16:6
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:14:58: 16:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:19:11: 19:11

    bb0: {
        return;                          // scope 0 at ui/async-await/in-trait/async-lifetimes-and-bounds.rs:19:13: 19:13
    }
}
