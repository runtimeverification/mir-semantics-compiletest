// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/in-trait/async-example-desugared-in-trait.rs:14:1: 14:21>::foo(_1: &i32) -> impl Future<Output = i32> {
    debug self => _1;                    // in scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:18: 16:23
    let mut _0: impl std::future::Future<Output = i32>; // return place in scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:28: 16:31
    let mut _2: [async fn body@ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6]; // in scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6

    bb0: {
        _2 = [generator@ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6 (#0)] { self: _1 }; // scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
                                         // generator
                                         // + def_id: DefId(0:8 ~ async_example_desugared_in_trait[5847]::{impl#0}::foo::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     i32,
                                         //     {},
                                         //     (&i32,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<i32, [async fn body@ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6]>(move _2) -> bb1; // scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6]) -> [async fn body@ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6] {identity_future::<i32, [async fn body@ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:18:6: 18:6
    }
}

fn <impl at ui/async-await/in-trait/async-example-desugared-in-trait.rs:14:1: 14:21>::foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6]>, _2: &mut Context<'_>) -> Poll<i32> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
    debug self => ((*(_1.0: &mut [async fn body@ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6])).0: &i32); // in scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:18: 16:23
    let mut _0: std::task::Poll<i32>;    // return place in scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
    let _3: &i32;                        // in scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:18: 16:23
    let mut _4: i32;                     // in scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
    let mut _6: u32;                     // in scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
    let mut _7: &mut [async fn body@ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6]; // in scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
    let mut _8: &mut [async fn body@ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6]; // in scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
    let mut _9: &mut [async fn body@ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6]; // in scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
    scope 1 {
        debug self => _3;                // in scope 1 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:18: 16:23
    }

    bb0: {
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6]); // scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
        switchInt(move _6) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6]); // scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:18: 16:23
        _3 = ((*_8).0: &i32);            // scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:18: 16:23
        _4 = (*_3);                      // scope 1 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:17:9: 17:14
        _0 = Poll::<i32>::Ready(move _4); // scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:18:6: 18:6
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6]); // scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:18:6: 18:6
        discriminant((*_9)) = 1;         // scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:18:6: 18:6
        return;                          // scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:18:6: 18:6
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:16:32: 18:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:21:11: 21:11

    bb0: {
        return;                          // scope 0 at ui/async-await/in-trait/async-example-desugared-in-trait.rs:21:13: 21:13
    }
}
