// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/in-trait/async-example.rs:12:1: 12:21>::foo(_1: &i32) -> impl Future<Output = i32> {
    debug self => _1;                    // in scope 0 at ui/async-await/in-trait/async-example.rs:13:18: 13:23
    let mut _0: impl std::future::Future<Output = i32>; // return place in scope 0 at ui/async-await/in-trait/async-example.rs:13:28: 13:31
    let mut _2: [async fn body@ui/async-await/in-trait/async-example.rs:13:32: 15:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6

    bb0: {
        _2 = [generator@ui/async-await/in-trait/async-example.rs:13:32: 15:6 (#0)] { self: _1 }; // scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6
                                         // generator
                                         // + def_id: DefId(0:8 ~ async_example[dfbc]::{impl#0}::foo::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     i32,
                                         //     {},
                                         //     (&i32,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<i32, [async fn body@ui/async-await/in-trait/async-example.rs:13:32: 15:6]>(move _2) -> bb1; // scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:13:32: 15:6
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/in-trait/async-example.rs:13:32: 15:6]) -> [async fn body@ui/async-await/in-trait/async-example.rs:13:32: 15:6] {identity_future::<i32, [async fn body@ui/async-await/in-trait/async-example.rs:13:32: 15:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/in-trait/async-example.rs:15:6: 15:6
    }
}

fn <impl at ui/async-await/in-trait/async-example.rs:12:1: 12:21>::foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/in-trait/async-example.rs:13:32: 15:6]>, _2: &mut Context<'_>) -> Poll<i32> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6
    debug self => ((*(_1.0: &mut [async fn body@ui/async-await/in-trait/async-example.rs:13:32: 15:6])).0: &i32); // in scope 0 at ui/async-await/in-trait/async-example.rs:13:18: 13:23
    let mut _0: std::task::Poll<i32>;    // return place in scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6
    let _3: &i32;                        // in scope 0 at ui/async-await/in-trait/async-example.rs:13:18: 13:23
    let mut _4: i32;                     // in scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6
    let mut _6: u32;                     // in scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6
    let mut _7: &mut [async fn body@ui/async-await/in-trait/async-example.rs:13:32: 15:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6
    let mut _8: &mut [async fn body@ui/async-await/in-trait/async-example.rs:13:32: 15:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6
    let mut _9: &mut [async fn body@ui/async-await/in-trait/async-example.rs:13:32: 15:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6
    scope 1 {
        debug self => _3;                // in scope 1 at ui/async-await/in-trait/async-example.rs:13:18: 13:23
    }

    bb0: {
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-example.rs:13:32: 15:6]); // scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6
        switchInt(move _6) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-example.rs:13:32: 15:6]); // scope 0 at ui/async-await/in-trait/async-example.rs:13:18: 13:23
        _3 = ((*_8).0: &i32);            // scope 0 at ui/async-await/in-trait/async-example.rs:13:18: 13:23
        _4 = (*_3);                      // scope 1 at ui/async-await/in-trait/async-example.rs:14:9: 14:14
        _0 = Poll::<i32>::Ready(move _4); // scope 0 at ui/async-await/in-trait/async-example.rs:15:6: 15:6
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-example.rs:13:32: 15:6]); // scope 0 at ui/async-await/in-trait/async-example.rs:15:6: 15:6
        discriminant((*_9)) = 1;         // scope 0 at ui/async-await/in-trait/async-example.rs:15:6: 15:6
        return;                          // scope 0 at ui/async-await/in-trait/async-example.rs:15:6: 15:6
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/in-trait/async-example.rs:13:32: 15:6
    }
}

fn <impl at ui/async-await/in-trait/async-example.rs:12:1: 12:21>::bar(_1: &i32) -> impl Future<Output = i32> {
    debug self => _1;                    // in scope 0 at ui/async-await/in-trait/async-example.rs:17:18: 17:23
    let mut _0: impl std::future::Future<Output = i32>; // return place in scope 0 at ui/async-await/in-trait/async-example.rs:17:28: 17:31
    let mut _2: [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6

    bb0: {
        _2 = [generator@ui/async-await/in-trait/async-example.rs:17:32: 19:6 (#0)] { self: _1 }; // scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
                                         // generator
                                         // + def_id: DefId(0:10 ~ async_example[dfbc]::{impl#0}::bar::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     i32,
                                         //     for<'a, 'b> {std::future::ResumeTy, &'a i32, impl std::future::Future<Output = i32>, ()},
                                         //     (&i32,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<i32, [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]>(move _2) -> bb1; // scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:17:32: 19:6
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]) -> [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6] {identity_future::<i32, [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/in-trait/async-example.rs:19:6: 19:6
    }
}

fn <impl at ui/async-await/in-trait/async-example.rs:12:1: 12:21>::bar::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]>, _2: &mut Context<'_>) -> Poll<i32> {
    debug _task_context => _18;          // in scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    debug self => ((*(_1.0: &mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6])).0: &i32); // in scope 0 at ui/async-await/in-trait/async-example.rs:17:18: 17:23
    let mut _0: std::task::Poll<i32>;    // return place in scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    let _3: &i32;                        // in scope 0 at ui/async-await/in-trait/async-example.rs:17:18: 17:23
    let mut _4: impl std::future::Future<Output = i32>; // in scope 0 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
    let mut _5: impl std::future::Future<Output = i32>; // in scope 0 at ui/async-await/in-trait/async-example.rs:18:9: 18:19
    let mut _6: &i32;                    // in scope 0 at ui/async-await/in-trait/async-example.rs:18:9: 18:19
    let mut _7: std::task::Poll<i32>;    // in scope 0 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
    let mut _8: std::pin::Pin<&mut impl std::future::Future<Output = i32>>; // in scope 0 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
    let mut _9: &mut impl std::future::Future<Output = i32>; // in scope 0 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
    let mut _10: &mut impl std::future::Future<Output = i32>; // in scope 0 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-example.rs:18:9: 18:25
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-example.rs:18:9: 18:25
    let mut _13: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
    let mut _14: isize;                  // in scope 0 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
    let mut _16: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
    let mut _17: i32;                    // in scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    let mut _18: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    let mut _19: u32;                    // in scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    let mut _20: &mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    let mut _21: &mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    let mut _22: &mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    let mut _23: &mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    let mut _24: &mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    let mut _25: &mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    let mut _26: &mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    scope 1 {
        debug self => _3;                // in scope 1 at ui/async-await/in-trait/async-example.rs:17:18: 17:23
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6])) as variant#3).0: impl std::future::Future<Output = i32>); // in scope 2 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
            let _15: i32;                // in scope 2 at ui/async-await/in-trait/async-example.rs:18:9: 18:25
            scope 3 {
            }
            scope 4 {
                debug result => _15;     // in scope 4 at ui/async-await/in-trait/async-example.rs:18:9: 18:25
            }
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]); // scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
        _19 = discriminant((*_20));      // scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
        switchInt(move _19) -> [0: bb1, 1: bb13, 2: bb12, 3: bb11, otherwise: bb14]; // scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    }

    bb1: {
        _18 = move _2;                   // scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
        _21 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]); // scope 0 at ui/async-await/in-trait/async-example.rs:17:18: 17:23
        _3 = ((*_21).0: &i32);           // scope 0 at ui/async-await/in-trait/async-example.rs:17:18: 17:23
        _6 = _3;                         // scope 1 at ui/async-await/in-trait/async-example.rs:18:9: 18:19
        _5 = <i32 as MyTrait>::foo(move _6) -> [return: bb2, unwind: bb10]; // scope 1 at ui/async-await/in-trait/async-example.rs:18:9: 18:19
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:18:14: 18:17
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> impl Future<Output = i32> {<i32 as MyTrait>::foo}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = <impl Future<Output = i32> as IntoFuture>::into_future(move _5) -> [return: bb3, unwind: bb10]; // scope 1 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:18:19: 18:25
                                         // + literal: Const { ty: fn(impl Future<Output = i32>) -> <impl Future<Output = i32> as IntoFuture>::IntoFuture {<impl Future<Output = i32> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]); // scope 1 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
        (((*_22) as variant#3).0: impl std::future::Future<Output = i32>) = move _4; // scope 1 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
        goto -> bb4;                     // scope 2 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
    }

    bb4: {
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]); // scope 3 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
        _10 = &mut (((*_23) as variant#3).0: impl std::future::Future<Output = i32>); // scope 3 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
        _9 = &mut (*_10);                // scope 3 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
        _8 = Pin::<&mut impl Future<Output = i32>>::new_unchecked(move _9) -> [return: bb5, unwind: bb10]; // scope 3 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:18:19: 18:25
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = i32>) -> Pin<&mut impl Future<Output = i32>> {Pin::<&mut impl Future<Output = i32>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = _18;                       // scope 3 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
        _12 = move _13;                  // scope 3 at ui/async-await/in-trait/async-example.rs:18:9: 18:25
        _11 = &mut (*_12);               // scope 3 at ui/async-await/in-trait/async-example.rs:18:9: 18:25
        _7 = <impl Future<Output = i32> as Future>::poll(move _8, move _11) -> [return: bb6, unwind: bb10]; // scope 3 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:18:19: 18:25
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = i32>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = i32> as Future>::Output> {<impl Future<Output = i32> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = discriminant(_7);          // scope 2 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
        switchInt(move _14) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
    }

    bb7: {
        _0 = Poll::<i32>::Pending;       // scope 2 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]); // scope 2 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
        discriminant((*_24)) = 3;        // scope 2 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
        return;                          // scope 2 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
    }

    bb8: {
        unreachable;                     // scope 2 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
    }

    bb9: {
        _15 = ((_7 as Ready).0: i32);    // scope 2 at ui/async-await/in-trait/async-example.rs:18:9: 18:25
        _17 = _15;                       // scope 4 at ui/async-await/in-trait/async-example.rs:18:9: 18:25
        _0 = Poll::<i32>::Ready(move _17); // scope 0 at ui/async-await/in-trait/async-example.rs:19:6: 19:6
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]); // scope 0 at ui/async-await/in-trait/async-example.rs:19:6: 19:6
        discriminant((*_25)) = 1;        // scope 0 at ui/async-await/in-trait/async-example.rs:19:6: 19:6
        return;                          // scope 0 at ui/async-await/in-trait/async-example.rs:19:6: 19:6
    }

    bb10 (cleanup): {
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/async-example.rs:17:32: 19:6]); // scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
        discriminant((*_26)) = 2;        // scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
        resume;                          // scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    }

    bb11: {
        _16 = move _2;                   // scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
        _18 = move _16;                  // scope 2 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
        goto -> bb4;                     // scope 2 at ui/async-await/in-trait/async-example.rs:18:19: 18:25
    }

    bb12: {
        assert(const false, "`async fn` resumed after panicking") -> bb12; // scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    }

    bb13: {
        assert(const false, "`async fn` resumed after completion") -> bb13; // scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    }

    bb14: {
        unreachable;                     // scope 0 at ui/async-await/in-trait/async-example.rs:17:32: 19:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/in-trait/async-example.rs:22:11: 22:11
    let _1: i32;                         // in scope 0 at ui/async-await/in-trait/async-example.rs:23:9: 23:10
    let mut _2: impl std::future::Future<Output = i32>; // in scope 0 at ui/async-await/in-trait/async-example.rs:25:13: 25:20
    let mut _3: &i32;                    // in scope 0 at ui/async-await/in-trait/async-example.rs:25:13: 25:20
    let mut _4: impl std::future::Future<Output = i32>; // in scope 0 at ui/async-await/in-trait/async-example.rs:26:13: 26:20
    let mut _5: &i32;                    // in scope 0 at ui/async-await/in-trait/async-example.rs:26:13: 26:20
    let _6: [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _7: [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _8: &i32;                    // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/async-await/in-trait/async-example.rs:23:9: 23:10
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/async-await/in-trait/async-example.rs:23:13: 23:14
        _3 = &_1;                        // scope 1 at ui/async-await/in-trait/async-example.rs:25:13: 25:20
        _2 = <i32 as MyTrait>::foo(move _3) -> bb1; // scope 1 at ui/async-await/in-trait/async-example.rs:25:13: 25:20
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:25:15: 25:18
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> impl Future<Output = i32> {<i32 as MyTrait>::foo}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_1;                        // scope 2 at ui/async-await/in-trait/async-example.rs:26:13: 26:20
        _4 = <i32 as MyTrait>::bar(move _5) -> bb2; // scope 2 at ui/async-await/in-trait/async-example.rs:26:13: 26:20
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:26:15: 26:18
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> impl Future<Output = i32> {<i32 as MyTrait>::bar}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_4) -> bb3;                 // scope 2 at ui/async-await/in-trait/async-example.rs:26:20: 26:21
    }

    bb3: {
        _8 = &_1;                        // scope 3 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
        _7 = [generator@ui/async-await/in-trait/async-example.rs:28:5: 31:6 (#0)] { x: move _8 }; // scope 3 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
                                         // generator
                                         // + def_id: DefId(0:12 ~ async_example[dfbc]::main::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     for<'a, 'b, 'c> {std::future::ResumeTy, &'a i32, i32, impl std::future::Future<Output = i32>, (), impl std::future::Future<Output = i32>},
                                         //     (&i32,),
                                         // ]
                                         // + movability: Static
        _6 = identity_future::<(), [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]>(move _7) -> bb4; // scope 3 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:28:5: 31:6
                                         // + literal: Const { ty: fn([async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]) -> [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6] {identity_future::<(), [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_6) -> bb5;                 // scope 3 at ui/async-await/in-trait/async-example.rs:31:6: 31:7
    }

    bb5: {
        return;                          // scope 0 at ui/async-await/in-trait/async-example.rs:32:2: 32:2
    }
}

fn main::{closure#0}(_1: Pin<&mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _32;          // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    debug x => (*((*(_1.0: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6])).0: &i32)); // in scope 0 at ui/async-await/in-trait/async-example.rs:23:9: 23:10
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _3: impl std::future::Future<Output = i32>; // in scope 0 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
    let mut _4: impl std::future::Future<Output = i32>; // in scope 0 at ui/async-await/in-trait/async-example.rs:29:22: 29:29
    let mut _5: &i32;                    // in scope 0 at ui/async-await/in-trait/async-example.rs:29:22: 29:29
    let mut _6: std::task::Poll<i32>;    // in scope 0 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
    let mut _7: std::pin::Pin<&mut impl std::future::Future<Output = i32>>; // in scope 0 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
    let mut _8: &mut impl std::future::Future<Output = i32>; // in scope 0 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
    let mut _9: &mut impl std::future::Future<Output = i32>; // in scope 0 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-example.rs:29:22: 29:35
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-example.rs:29:22: 29:35
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
    let mut _13: isize;                  // in scope 0 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
    let mut _16: impl std::future::Future<Output = i32>; // in scope 0 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
    let mut _17: impl std::future::Future<Output = i32>; // in scope 0 at ui/async-await/in-trait/async-example.rs:30:22: 30:29
    let mut _18: &i32;                   // in scope 0 at ui/async-await/in-trait/async-example.rs:30:22: 30:29
    let mut _19: std::task::Poll<i32>;   // in scope 0 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
    let mut _20: std::pin::Pin<&mut impl std::future::Future<Output = i32>>; // in scope 0 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
    let mut _21: &mut impl std::future::Future<Output = i32>; // in scope 0 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
    let mut _22: &mut impl std::future::Future<Output = i32>; // in scope 0 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
    let mut _23: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-example.rs:30:22: 30:35
    let mut _24: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-example.rs:30:22: 30:35
    let mut _25: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
    let mut _26: isize;                  // in scope 0 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
    let mut _28: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
    let mut _29: &i32;                   // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _30: &i32;                   // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _31: ();                     // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _32: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _33: u32;                    // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _34: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _35: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _36: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _37: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _38: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _39: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _40: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _41: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _42: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _43: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _44: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _45: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    let mut _46: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]; // in scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    scope 1 {
        scope 5 {
        }
        scope 6 {
            debug __awaitee => (((*(_1.0: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6])) as variant#4).0: impl std::future::Future<Output = i32>); // in scope 6 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
            let _27: i32;                // in scope 6 at ui/async-await/in-trait/async-example.rs:30:22: 30:35
            scope 7 {
            }
            scope 8 {
                debug result => _27;     // in scope 8 at ui/async-await/in-trait/async-example.rs:30:22: 30:35
            }
        }
    }
    scope 2 {
        debug __awaitee => (((*(_1.0: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6])) as variant#3).0: impl std::future::Future<Output = i32>); // in scope 2 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
        let _14: i32;                    // in scope 2 at ui/async-await/in-trait/async-example.rs:29:22: 29:35
        scope 3 {
        }
        scope 4 {
            debug result => _14;         // in scope 4 at ui/async-await/in-trait/async-example.rs:29:22: 29:35
        }
    }

    bb0: {
        _34 = deref_copy (_1.0: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]); // scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
        _33 = discriminant((*_34));      // scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
        switchInt(move _33) -> [0: bb1, 1: bb24, 2: bb23, 3: bb21, 4: bb22, otherwise: bb25]; // scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    }

    bb1: {
        _32 = move _2;                   // scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
        _35 = deref_copy (_1.0: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]); // scope 0 at ui/async-await/in-trait/async-example.rs:29:22: 29:29
        _29 = deref_copy ((*_35).0: &i32); // scope 0 at ui/async-await/in-trait/async-example.rs:29:22: 29:29
        _5 = _29;                        // scope 0 at ui/async-await/in-trait/async-example.rs:29:22: 29:29
        _4 = <i32 as MyTrait>::foo(move _5) -> [return: bb2, unwind: bb20]; // scope 0 at ui/async-await/in-trait/async-example.rs:29:22: 29:29
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:29:24: 29:27
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> impl Future<Output = i32> {<i32 as MyTrait>::foo}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <impl Future<Output = i32> as IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb20]; // scope 0 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:29:29: 29:35
                                         // + literal: Const { ty: fn(impl Future<Output = i32>) -> <impl Future<Output = i32> as IntoFuture>::IntoFuture {<impl Future<Output = i32> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _36 = deref_copy (_1.0: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]); // scope 0 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
        (((*_36) as variant#3).0: impl std::future::Future<Output = i32>) = move _3; // scope 0 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
        goto -> bb4;                     // scope 2 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
    }

    bb4: {
        _37 = deref_copy (_1.0: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]); // scope 3 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
        _9 = &mut (((*_37) as variant#3).0: impl std::future::Future<Output = i32>); // scope 3 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
        _8 = &mut (*_9);                 // scope 3 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
        _7 = Pin::<&mut impl Future<Output = i32>>::new_unchecked(move _8) -> [return: bb5, unwind: bb20]; // scope 3 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:29:29: 29:35
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = i32>) -> Pin<&mut impl Future<Output = i32>> {Pin::<&mut impl Future<Output = i32>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = _32;                       // scope 3 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
        _11 = move _12;                  // scope 3 at ui/async-await/in-trait/async-example.rs:29:22: 29:35
        _10 = &mut (*_11);               // scope 3 at ui/async-await/in-trait/async-example.rs:29:22: 29:35
        _6 = <impl Future<Output = i32> as Future>::poll(move _7, move _10) -> [return: bb6, unwind: bb20]; // scope 3 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:29:29: 29:35
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = i32>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = i32> as Future>::Output> {<impl Future<Output = i32> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = discriminant(_6);          // scope 2 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
        switchInt(move _13) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
        _38 = deref_copy (_1.0: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]); // scope 2 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
        discriminant((*_38)) = 3;        // scope 2 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
        return;                          // scope 2 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
    }

    bb8: {
        unreachable;                     // scope 2 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
    }

    bb9: {
        _14 = ((_6 as Ready).0: i32);    // scope 2 at ui/async-await/in-trait/async-example.rs:29:22: 29:35
        _39 = deref_copy (_1.0: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]); // scope 1 at ui/async-await/in-trait/async-example.rs:30:22: 30:29
        _30 = deref_copy ((*_39).0: &i32); // scope 1 at ui/async-await/in-trait/async-example.rs:30:22: 30:29
        _18 = _30;                       // scope 1 at ui/async-await/in-trait/async-example.rs:30:22: 30:29
        _17 = <i32 as MyTrait>::bar(move _18) -> [return: bb10, unwind: bb20]; // scope 1 at ui/async-await/in-trait/async-example.rs:30:22: 30:29
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:30:24: 30:27
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> impl Future<Output = i32> {<i32 as MyTrait>::bar}, val: Value(<ZST>) }
    }

    bb10: {
        _16 = <impl Future<Output = i32> as IntoFuture>::into_future(move _17) -> [return: bb11, unwind: bb20]; // scope 1 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:30:29: 30:35
                                         // + literal: Const { ty: fn(impl Future<Output = i32>) -> <impl Future<Output = i32> as IntoFuture>::IntoFuture {<impl Future<Output = i32> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb11: {
        _40 = deref_copy (_1.0: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]); // scope 1 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
        (((*_40) as variant#4).0: impl std::future::Future<Output = i32>) = move _16; // scope 1 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
        goto -> bb12;                    // scope 6 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
    }

    bb12: {
        _41 = deref_copy (_1.0: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]); // scope 7 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
        _22 = &mut (((*_41) as variant#4).0: impl std::future::Future<Output = i32>); // scope 7 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
        _21 = &mut (*_22);               // scope 7 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
        _20 = Pin::<&mut impl Future<Output = i32>>::new_unchecked(move _21) -> [return: bb13, unwind: bb19]; // scope 7 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:30:29: 30:35
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = i32>) -> Pin<&mut impl Future<Output = i32>> {Pin::<&mut impl Future<Output = i32>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb13: {
        _25 = _32;                       // scope 7 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
        _24 = move _25;                  // scope 7 at ui/async-await/in-trait/async-example.rs:30:22: 30:35
        _23 = &mut (*_24);               // scope 7 at ui/async-await/in-trait/async-example.rs:30:22: 30:35
        _19 = <impl Future<Output = i32> as Future>::poll(move _20, move _23) -> [return: bb14, unwind: bb19]; // scope 7 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example.rs:30:29: 30:35
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = i32>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = i32> as Future>::Output> {<impl Future<Output = i32> as Future>::poll}, val: Value(<ZST>) }
    }

    bb14: {
        _26 = discriminant(_19);         // scope 6 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
        switchInt(move _26) -> [0: bb17, 1: bb15, otherwise: bb16]; // scope 6 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
    }

    bb15: {
        _0 = Poll::<()>::Pending;        // scope 6 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
        _42 = deref_copy (_1.0: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]); // scope 6 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
        discriminant((*_42)) = 4;        // scope 6 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
        return;                          // scope 6 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
    }

    bb16: {
        unreachable;                     // scope 6 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
    }

    bb17: {
        _27 = ((_19 as Ready).0: i32);   // scope 6 at ui/async-await/in-trait/async-example.rs:30:22: 30:35
        _43 = deref_copy (_1.0: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]); // scope 1 at ui/async-await/in-trait/async-example.rs:30:34: 30:35
        drop((((*_43) as variant#4).0: impl std::future::Future<Output = i32>)) -> [return: bb18, unwind: bb20]; // scope 1 at ui/async-await/in-trait/async-example.rs:30:34: 30:35
    }

    bb18: {
        _31 = const ();                  // scope 0 at ui/async-await/in-trait/async-example.rs:28:11: 31:6
        _0 = Poll::<()>::Ready(move _31); // scope 0 at ui/async-await/in-trait/async-example.rs:31:6: 31:6
        _44 = deref_copy (_1.0: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]); // scope 0 at ui/async-await/in-trait/async-example.rs:31:6: 31:6
        discriminant((*_44)) = 1;        // scope 0 at ui/async-await/in-trait/async-example.rs:31:6: 31:6
        return;                          // scope 0 at ui/async-await/in-trait/async-example.rs:31:6: 31:6
    }

    bb19 (cleanup): {
        _45 = deref_copy (_1.0: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]); // scope 1 at ui/async-await/in-trait/async-example.rs:30:34: 30:35
        drop((((*_45) as variant#4).0: impl std::future::Future<Output = i32>)) -> bb20; // scope 1 at ui/async-await/in-trait/async-example.rs:30:34: 30:35
    }

    bb20 (cleanup): {
        _46 = deref_copy (_1.0: &mut [async block@ui/async-await/in-trait/async-example.rs:28:5: 31:6]); // scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
        discriminant((*_46)) = 2;        // scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
        resume;                          // scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    }

    bb21: {
        _15 = move _2;                   // scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
        _32 = move _15;                  // scope 2 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
        goto -> bb4;                     // scope 2 at ui/async-await/in-trait/async-example.rs:29:29: 29:35
    }

    bb22: {
        _28 = move _2;                   // scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
        _32 = move _28;                  // scope 6 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
        goto -> bb12;                    // scope 6 at ui/async-await/in-trait/async-example.rs:30:29: 30:35
    }

    bb23: {
        assert(const false, "`async fn` resumed after panicking") -> bb23; // scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    }

    bb24: {
        assert(const false, "`async fn` resumed after completion") -> bb24; // scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    }

    bb25: {
        unreachable;                     // scope 0 at ui/async-await/in-trait/async-example.rs:28:5: 31:6
    }
}
