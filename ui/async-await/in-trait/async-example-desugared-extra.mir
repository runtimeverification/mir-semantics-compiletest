// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/in-trait/async-example-desugared-extra.rs:16:10: 16:15>::clone(_1: &MyFuture) -> MyFuture {
    debug self => _1;                    // in scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:16:10: 16:15
    let mut _0: MyFuture;                // return place in scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:16:10: 16:15
    let mut _2: i32;                     // in scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:17:17: 17:20
    let mut _3: &i32;                    // in scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:17:17: 17:20
    let _4: &i32;                        // in scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:17:17: 17:20

    bb0: {
        _4 = &((*_1).0: i32);            // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:17:17: 17:20
        _3 = _4;                         // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:17:17: 17:20
        _2 = (*_3);                      // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:17:17: 17:20
        _0 = MyFuture(move _2);          // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:16:10: 16:15
        return;                          // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:16:15: 16:15
    }
}

fn <impl at ui/async-await/in-trait/async-example-desugared-extra.rs:19:1: 19:25>::poll(_1: Pin<&mut MyFuture>, _2: &mut Context<'_>) -> Poll<i32> {
    debug self => _1;                    // in scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:22:9: 22:13
    let mut _0: std::task::Poll<i32>;    // return place in scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:24:10: 24:40
    let mut _3: i32;                     // in scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:25:21: 25:27
    let mut _4: &MyFuture;               // in scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:25:21: 25:27
    let mut _5: &std::pin::Pin<&mut MyFuture>; // in scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:25:21: 25:25

    bb0: {
        _5 = &_1;                        // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:25:21: 25:25
        _4 = <Pin<&mut MyFuture> as Deref>::deref(move _5) -> bb1; // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:25:21: 25:27
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/async-example-desugared-extra.rs:25:21: 25:27
                                         // + literal: Const { ty: for<'a> fn(&'a Pin<&mut MyFuture>) -> &'a <Pin<&mut MyFuture> as Deref>::Target {<Pin<&mut MyFuture> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = ((*_4).0: i32);             // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:25:21: 25:27
        _0 = Poll::<i32>::Ready(move _3); // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:25:9: 25:28
        return;                          // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:26:6: 26:6
    }
}

fn <impl at ui/async-await/in-trait/async-example-desugared-extra.rs:29:1: 29:21>::foo(_1: &i32) -> impl Future<Output = i32> + Clone {
    debug self => _1;                    // in scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:32:12: 32:17
    let mut _0: impl std::future::Future<Output = i32> + std::clone::Clone; // return place in scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:32:22: 32:55
    let mut _2: i32;                     // in scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:33:18: 33:23

    bb0: {
        _2 = (*_1);                      // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:33:18: 33:23
        _0 = MyFuture(move _2);          // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:33:9: 33:24
        return;                          // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:34:6: 34:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:37:11: 37:11

    bb0: {
        return;                          // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:37:13: 37:13
    }
}

fn MyFuture(_1: i32) -> MyFuture {
    let mut _0: MyFuture;                // return place in scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:17:1: 17:16

    bb0: {
        _0 = MyFuture(move _1);          // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:17:1: 17:16
        return;                          // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:17:1: 17:16
    }
}

// MIR FOR CTFE
fn MyFuture(_1: i32) -> MyFuture {
    let mut _0: MyFuture;                // return place in scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:17:1: 17:16

    bb0: {
        _0 = MyFuture(move _1);          // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:17:1: 17:16
        return;                          // scope 0 at ui/async-await/in-trait/async-example-desugared-extra.rs:17:1: 17:16
    }
}
