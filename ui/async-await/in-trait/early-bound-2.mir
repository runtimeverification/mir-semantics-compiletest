// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/in-trait/early-bound-2.rs:11:1: 11:28>::foo(_1: &mut &mut T) -> impl Future<Output = ()> {
    debug self => _1;                    // in scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:18: 12:27
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:29
    let mut _2: [async fn body@ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31]; // in scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31

    bb0: {
        _2 = [generator@ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31 (#0)] { self: move _1 }; // scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
                                         // generator
                                         // + def_id: DefId(0:8 ~ early_bound_2[9f8d]::{impl#0}::foo::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     T,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (&mut &mut T,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31]>(move _2) -> bb1; // scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31]) -> [async fn body@ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31] {identity_future::<(), [async fn body@ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:31: 12:31
    }
}

fn <impl at ui/async-await/in-trait/early-bound-2.rs:11:1: 11:28>::foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
    debug self => ((*(_1.0: &mut [async fn body@ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31])).0: &mut &mut T); // in scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:18: 12:27
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
    let _3: &mut &mut T;                 // in scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:18: 12:27
    let mut _4: ();                      // in scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
    let mut _6: u32;                     // in scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
    let mut _7: &mut [async fn body@ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31]; // in scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
    let mut _8: &mut [async fn body@ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31]; // in scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
    let mut _9: &mut [async fn body@ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31]; // in scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
    scope 1 {
        debug self => _3;                // in scope 1 at ui/async-await/in-trait/early-bound-2.rs:12:18: 12:27
    }

    bb0: {
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31]); // scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
        switchInt(move _6) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31]); // scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:18: 12:27
        _3 = move ((*_8).0: &mut &mut T); // scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:18: 12:27
        _4 = const ();                   // scope 1 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
        _0 = Poll::<()>::Ready(move _4); // scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:31: 12:31
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31]); // scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:31: 12:31
        discriminant((*_9)) = 1;         // scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:31: 12:31
        return;                          // scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:31: 12:31
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/in-trait/early-bound-2.rs:12:29: 12:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/in-trait/early-bound-2.rs:15:11: 15:11

    bb0: {
        return;                          // scope 0 at ui/async-await/in-trait/early-bound-2.rs:15:13: 15:13
    }
}
