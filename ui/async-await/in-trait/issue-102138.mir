// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn yield_now() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:22
    let mut _1: [async fn body@ui/async-await/in-trait/issue-102138.rs:9:22: 9:24]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24

    bb0: {
        _1 = [generator@ui/async-await/in-trait/issue-102138.rs:9:22: 9:24 (#0)]; // scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24
                                         // generator
                                         // + def_id: DefId(0:5 ~ issue_102138[bdc7]::yield_now::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/in-trait/issue-102138.rs:9:22: 9:24]>(move _1) -> bb1; // scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-102138.rs:9:22: 9:24
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/in-trait/issue-102138.rs:9:22: 9:24]) -> [async fn body@ui/async-await/in-trait/issue-102138.rs:9:22: 9:24] {identity_future::<(), [async fn body@ui/async-await/in-trait/issue-102138.rs:9:22: 9:24]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/in-trait/issue-102138.rs:9:24: 9:24
    }
}

fn yield_now::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/in-trait/issue-102138.rs:9:22: 9:24]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24
    let mut _3: ();                      // in scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24
    let mut _5: u32;                     // in scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24
    let mut _6: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:9:22: 9:24]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24
    let mut _7: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:9:22: 9:24]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24

    bb0: {
        _6 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:9:22: 9:24]); // scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24
        _3 = const ();                   // scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/in-trait/issue-102138.rs:9:24: 9:24
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:9:22: 9:24]); // scope 0 at ui/async-await/in-trait/issue-102138.rs:9:24: 9:24
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/in-trait/issue-102138.rs:9:24: 9:24
        return;                          // scope 0 at ui/async-await/in-trait/issue-102138.rs:9:24: 9:24
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/in-trait/issue-102138.rs:9:22: 9:24
    }
}

fn <impl at ui/async-await/in-trait/issue-102138.rs:21:1: 21:37>::next(_1: &mut YieldingRange) -> impl Future<Output = Option<<YieldingRange as AsyncIterator>::Item>> {
    debug self => _1;                    // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:19: 24:28
    let mut _0: impl std::future::Future<Output = std::option::Option<<YieldingRange as AsyncIterator>::Item>>; // return place in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:33: 24:51
    let mut _2: [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6

    bb0: {
        _2 = [generator@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6 (#0)] { self: move _1 }; // scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
                                         // generator
                                         // + def_id: DefId(0:15 ~ issue_102138[bdc7]::{impl#0}::next::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     std::option::Option<u32>,
                                         //     for<'a> {std::future::ResumeTy, &'a mut YieldingRange, bool, u32, impl std::future::Future<Output = ()>, ()},
                                         //     (&mut YieldingRange,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<Option<u32>, [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]>(move _2) -> bb1; // scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]) -> [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6] {identity_future::<Option<u32>, [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/in-trait/issue-102138.rs:33:6: 33:6
    }
}

fn <impl at ui/async-await/in-trait/issue-102138.rs:21:1: 21:37>::next::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]>, _2: &mut Context<'_>) -> Poll<Option<u32>> {
    debug _task_context => _22;          // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    debug self => ((*(_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6])).0: &mut YieldingRange); // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:19: 24:28
    let mut _0: std::task::Poll<std::option::Option<u32>>; // return place in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    let _3: &mut YieldingRange;          // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:19: 24:28
    let mut _4: bool;                    // in scope 0 at ui/async-await/in-trait/issue-102138.rs:25:12: 25:37
    let mut _5: u32;                     // in scope 0 at ui/async-await/in-trait/issue-102138.rs:25:12: 25:24
    let mut _6: u32;                     // in scope 0 at ui/async-await/in-trait/issue-102138.rs:25:28: 25:37
    let mut _7: (u32, bool);             // in scope 0 at ui/async-await/in-trait/issue-102138.rs:29:13: 29:30
    let mut _8: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
    let mut _9: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:30:13: 30:24
    let mut _10: std::task::Poll<()>;    // in scope 0 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
    let mut _11: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
    let mut _12: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
    let mut _13: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
    let mut _14: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:30:13: 30:30
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:30:13: 30:30
    let mut _16: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
    let mut _17: isize;                  // in scope 0 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
    let mut _19: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
    let mut _20: u32;                    // in scope 0 at ui/async-await/in-trait/issue-102138.rs:31:18: 31:19
    let mut _21: std::option::Option<u32>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    let mut _22: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    let mut _23: u32;                    // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    let mut _24: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    let mut _25: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    let mut _26: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    let mut _27: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    let mut _28: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    let mut _29: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    let mut _30: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    let mut _31: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    let mut _32: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    scope 1 {
        debug self => _3;                // in scope 1 at ui/async-await/in-trait/issue-102138.rs:24:19: 24:28
        scope 2 {
            debug c => (((*(_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6])) as variant#3).0: u32); // in scope 2 at ui/async-await/in-trait/issue-102138.rs:28:17: 28:18
            scope 3 {
                debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6])) as variant#3).1: impl std::future::Future<Output = ()>); // in scope 3 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
                let _18: ();             // in scope 3 at ui/async-await/in-trait/issue-102138.rs:30:13: 30:30
                scope 4 {
                }
                scope 5 {
                    debug result => _18; // in scope 5 at ui/async-await/in-trait/issue-102138.rs:30:13: 30:30
                }
            }
        }
    }

    bb0: {
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]); // scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
        _23 = discriminant((*_24));      // scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
        switchInt(move _23) -> [0: bb1, 1: bb17, 2: bb16, 3: bb15, otherwise: bb18]; // scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    }

    bb1: {
        _22 = move _2;                   // scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]); // scope 0 at ui/async-await/in-trait/issue-102138.rs:24:19: 24:28
        _3 = move ((*_25).0: &mut YieldingRange); // scope 0 at ui/async-await/in-trait/issue-102138.rs:24:19: 24:28
        _5 = ((*_3).0: u32);             // scope 1 at ui/async-await/in-trait/issue-102138.rs:25:12: 25:24
        _6 = ((*_3).1: u32);             // scope 1 at ui/async-await/in-trait/issue-102138.rs:25:28: 25:37
        _4 = Eq(move _5, move _6);       // scope 1 at ui/async-await/in-trait/issue-102138.rs:25:12: 25:37
        switchInt(move _4) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/async-await/in-trait/issue-102138.rs:25:12: 25:37
    }

    bb2: {
        _21 = Option::<u32>::None;       // scope 1 at ui/async-await/in-trait/issue-102138.rs:26:13: 26:17
        goto -> bb13;                    // scope 1 at ui/async-await/in-trait/issue-102138.rs:25:9: 32:10
    }

    bb3: {
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]); // scope 1 at ui/async-await/in-trait/issue-102138.rs:28:21: 28:33
        (((*_26) as variant#3).0: u32) = ((*_3).0: u32); // scope 1 at ui/async-await/in-trait/issue-102138.rs:28:21: 28:33
        _7 = CheckedAdd(((*_3).0: u32), const 1_u32); // scope 2 at ui/async-await/in-trait/issue-102138.rs:29:13: 29:30
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_3).0: u32), const 1_u32) -> [success: bb4, unwind: bb14]; // scope 2 at ui/async-await/in-trait/issue-102138.rs:29:13: 29:30
    }

    bb4: {
        ((*_3).0: u32) = move (_7.0: u32); // scope 2 at ui/async-await/in-trait/issue-102138.rs:29:13: 29:30
        _9 = yield_now() -> [return: bb5, unwind: bb14]; // scope 2 at ui/async-await/in-trait/issue-102138.rs:30:13: 30:24
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-102138.rs:30:13: 30:22
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {yield_now}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = <impl Future<Output = ()> as IntoFuture>::into_future(move _9) -> [return: bb6, unwind: bb14]; // scope 2 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb6: {
        _27 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]); // scope 2 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
        (((*_27) as variant#3).1: impl std::future::Future<Output = ()>) = move _8; // scope 2 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
        goto -> bb7;                     // scope 3 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
    }

    bb7: {
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]); // scope 4 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
        _13 = &mut (((*_28) as variant#3).1: impl std::future::Future<Output = ()>); // scope 4 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
        _12 = &mut (*_13);               // scope 4 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
        _11 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _12) -> [return: bb8, unwind: bb14]; // scope 4 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = _22;                       // scope 4 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
        _15 = move _16;                  // scope 4 at ui/async-await/in-trait/issue-102138.rs:30:13: 30:30
        _14 = &mut (*_15);               // scope 4 at ui/async-await/in-trait/issue-102138.rs:30:13: 30:30
        _10 = <impl Future<Output = ()> as Future>::poll(move _11, move _14) -> [return: bb9, unwind: bb14]; // scope 4 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb9: {
        _17 = discriminant(_10);         // scope 3 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
        switchInt(move _17) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 3 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
    }

    bb10: {
        _0 = Poll::<Option<u32>>::Pending; // scope 3 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
        _29 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]); // scope 3 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
        discriminant((*_29)) = 3;        // scope 3 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
        return;                          // scope 3 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
    }

    bb11: {
        unreachable;                     // scope 3 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
    }

    bb12: {
        _18 = ((_10 as Ready).0: ());    // scope 3 at ui/async-await/in-trait/issue-102138.rs:30:13: 30:30
        _30 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]); // scope 2 at ui/async-await/in-trait/issue-102138.rs:31:18: 31:19
        _20 = (((*_30) as variant#3).0: u32); // scope 2 at ui/async-await/in-trait/issue-102138.rs:31:18: 31:19
        _21 = Option::<u32>::Some(move _20); // scope 2 at ui/async-await/in-trait/issue-102138.rs:31:13: 31:20
        goto -> bb13;                    // scope 1 at ui/async-await/in-trait/issue-102138.rs:25:9: 32:10
    }

    bb13: {
        _0 = Poll::<Option<u32>>::Ready(move _21); // scope 0 at ui/async-await/in-trait/issue-102138.rs:33:6: 33:6
        _31 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]); // scope 0 at ui/async-await/in-trait/issue-102138.rs:33:6: 33:6
        discriminant((*_31)) = 1;        // scope 0 at ui/async-await/in-trait/issue-102138.rs:33:6: 33:6
        return;                          // scope 0 at ui/async-await/in-trait/issue-102138.rs:33:6: 33:6
    }

    bb14 (cleanup): {
        _32 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:24:52: 33:6]); // scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
        discriminant((*_32)) = 2;        // scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
        resume;                          // scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    }

    bb15: {
        _19 = move _2;                   // scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
        _22 = move _19;                  // scope 3 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
        goto -> bb7;                     // scope 3 at ui/async-await/in-trait/issue-102138.rs:30:24: 30:30
    }

    bb16: {
        assert(const false, "`async fn` resumed after panicking") -> bb16; // scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    }

    bb17: {
        assert(const false, "`async fn` resumed after completion") -> bb17; // scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    }

    bb18: {
        unreachable;                     // scope 0 at ui/async-await/in-trait/issue-102138.rs:24:52: 33:6
    }
}

fn async_main() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 36:23
    let mut _1: [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2

    bb0: {
        _1 = [generator@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2 (#0)]; // scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
                                         // generator
                                         // + def_id: DefId(0:17 ~ issue_102138[bdc7]::async_main::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     for<'a, 'b> {std::future::ResumeTy, YieldingRange, &'a mut YieldingRange, impl std::future::Future<Output = std::option::Option<<YieldingRange as AsyncIterator>::Item>>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]>(move _1) -> bb1; // scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]) -> [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2] {identity_future::<(), [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/in-trait/issue-102138.rs:42:2: 42:2
    }
}

fn async_main::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _33;          // in scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    let mut _3: std::option::Option<u32>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:39:25: 39:39
    let mut _4: impl std::future::Future<Output = std::option::Option<<YieldingRange as AsyncIterator>::Item>>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
    let mut _5: impl std::future::Future<Output = std::option::Option<<YieldingRange as AsyncIterator>::Item>>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:39:25: 39:33
    let mut _6: &mut YieldingRange;      // in scope 0 at ui/async-await/in-trait/issue-102138.rs:39:25: 39:33
    let mut _7: std::task::Poll<std::option::Option<u32>>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
    let mut _8: std::pin::Pin<&mut impl std::future::Future<Output = std::option::Option<<YieldingRange as AsyncIterator>::Item>>>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
    let mut _9: &mut impl std::future::Future<Output = std::option::Option<<YieldingRange as AsyncIterator>::Item>>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
    let mut _10: &mut impl std::future::Future<Output = std::option::Option<<YieldingRange as AsyncIterator>::Item>>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:39:25: 39:39
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:39:25: 39:39
    let mut _13: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
    let mut _14: isize;                  // in scope 0 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
    let mut _16: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
    let mut _17: isize;                  // in scope 0 at ui/async-await/in-trait/issue-102138.rs:39:15: 39:22
    let _19: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _20: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _21: &[&str];                // in scope 0 at ui/async-await/in-trait/issue-102138.rs:40:18: 40:27
    let mut _22: &[&str; 2];             // in scope 0 at ui/async-await/in-trait/issue-102138.rs:40:18: 40:27
    let _23: &[&str; 2];                 // in scope 0 at ui/async-await/in-trait/issue-102138.rs:40:18: 40:27
    let mut _24: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _25: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _26: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _27: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _28: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:40:24: 40:25
    let mut _29: &u32;                   // in scope 0 at ui/async-await/in-trait/issue-102138.rs:40:24: 40:25
    let _30: &u32;                       // in scope 0 at ui/async-await/in-trait/issue-102138.rs:40:24: 40:25
    let mut _32: ();                     // in scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    let mut _33: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    let mut _34: u32;                    // in scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    let mut _35: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    let mut _36: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    let mut _37: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    let mut _38: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    let mut _39: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    let mut _40: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    let mut _41: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    let mut _42: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    scope 1 {
        debug x => (((*(_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2])) as variant#3).0: YieldingRange); // in scope 1 at ui/async-await/in-trait/issue-102138.rs:37:9: 37:14
        scope 2 {
            debug v => _18;              // in scope 2 at ui/async-await/in-trait/issue-102138.rs:39:20: 39:21
            let _18: u32;                // in scope 2 at ui/async-await/in-trait/issue-102138.rs:39:20: 39:21
            let mut _31: &[&str; 2];     // in scope 2 at ui/async-await/in-trait/issue-102138.rs:40:18: 40:27
            scope 3 {
                debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2])) as variant#3).1: impl std::future::Future<Output = std::option::Option<<YieldingRange as AsyncIterator>::Item>>); // in scope 3 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
                let _15: std::option::Option<u32>; // in scope 3 at ui/async-await/in-trait/issue-102138.rs:39:25: 39:39
                scope 4 {
                }
                scope 5 {
                    debug result => _15; // in scope 5 at ui/async-await/in-trait/issue-102138.rs:39:25: 39:39
                }
            }
        }
    }

    bb0: {
        _35 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]); // scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
        _34 = discriminant((*_35));      // scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
        switchInt(move _34) -> [0: bb1, 1: bb18, 2: bb17, 3: bb16, otherwise: bb19]; // scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    }

    bb1: {
        _33 = move _2;                   // scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
        _36 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]); // scope 0 at ui/async-await/in-trait/issue-102138.rs:37:17: 37:55
        (((*_36) as variant#3).0: YieldingRange) = YieldingRange { counter: const 0_u32, stop: const 10_u32 }; // scope 0 at ui/async-await/in-trait/issue-102138.rs:37:17: 37:55
        goto -> bb2;                     // scope 1 at ui/async-await/in-trait/issue-102138.rs:39:5: 41:6
    }

    bb2: {
        _37 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]); // scope 2 at ui/async-await/in-trait/issue-102138.rs:39:25: 39:33
        _6 = &mut (((*_37) as variant#3).0: YieldingRange); // scope 2 at ui/async-await/in-trait/issue-102138.rs:39:25: 39:33
        _5 = <YieldingRange as AsyncIterator>::next(move _6) -> [return: bb3, unwind: bb15]; // scope 2 at ui/async-await/in-trait/issue-102138.rs:39:25: 39:33
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-102138.rs:39:27: 39:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut YieldingRange) -> impl Future<Output = Option<<YieldingRange as AsyncIterator>::Item>> {<YieldingRange as AsyncIterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = <impl Future<Output = Option<<YieldingRange as AsyncIterator>::Item>> as IntoFuture>::into_future(move _5) -> [return: bb4, unwind: bb15]; // scope 2 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
                                         // + literal: Const { ty: fn(impl Future<Output = Option<<YieldingRange as AsyncIterator>::Item>>) -> <impl Future<Output = Option<<YieldingRange as AsyncIterator>::Item>> as IntoFuture>::IntoFuture {<impl Future<Output = Option<<YieldingRange as AsyncIterator>::Item>> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb4: {
        _38 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]); // scope 2 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
        (((*_38) as variant#3).1: impl std::future::Future<Output = std::option::Option<<YieldingRange as AsyncIterator>::Item>>) = move _4; // scope 2 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
        goto -> bb5;                     // scope 3 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
    }

    bb5: {
        _39 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]); // scope 4 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
        _10 = &mut (((*_39) as variant#3).1: impl std::future::Future<Output = std::option::Option<<YieldingRange as AsyncIterator>::Item>>); // scope 4 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
        _9 = &mut (*_10);                // scope 4 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
        _8 = Pin::<&mut impl Future<Output = Option<<YieldingRange as AsyncIterator>::Item>>>::new_unchecked(move _9) -> [return: bb6, unwind: bb15]; // scope 4 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = Option<<YieldingRange as AsyncIterator>::Item>>) -> Pin<&mut impl Future<Output = Option<<YieldingRange as AsyncIterator>::Item>>> {Pin::<&mut impl Future<Output = Option<<YieldingRange as AsyncIterator>::Item>>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = _33;                       // scope 4 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
        _12 = move _13;                  // scope 4 at ui/async-await/in-trait/issue-102138.rs:39:25: 39:39
        _11 = &mut (*_12);               // scope 4 at ui/async-await/in-trait/issue-102138.rs:39:25: 39:39
        _7 = <impl Future<Output = Option<<YieldingRange as AsyncIterator>::Item>> as Future>::poll(move _8, move _11) -> [return: bb7, unwind: bb15]; // scope 4 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = Option<<YieldingRange as AsyncIterator>::Item>>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = Option<<YieldingRange as AsyncIterator>::Item>> as Future>::Output> {<impl Future<Output = Option<<YieldingRange as AsyncIterator>::Item>> as Future>::poll}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = discriminant(_7);          // scope 3 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
        switchInt(move _14) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 3 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
    }

    bb8: {
        _0 = Poll::<()>::Pending;        // scope 3 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
        _40 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]); // scope 3 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
        discriminant((*_40)) = 3;        // scope 3 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
        return;                          // scope 3 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
    }

    bb9: {
        unreachable;                     // scope 3 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
    }

    bb10: {
        _15 = ((_7 as Ready).0: std::option::Option<u32>); // scope 3 at ui/async-await/in-trait/issue-102138.rs:39:25: 39:39
        _3 = _15;                        // scope 5 at ui/async-await/in-trait/issue-102138.rs:39:25: 39:39
        _17 = discriminant(_3);          // scope 2 at ui/async-await/in-trait/issue-102138.rs:39:15: 39:22
        switchInt(move _17) -> [1: bb12, otherwise: bb11]; // scope 2 at ui/async-await/in-trait/issue-102138.rs:39:15: 39:22
    }

    bb11: {
        _32 = const ();                  // scope 1 at ui/async-await/in-trait/issue-102138.rs:39:5: 41:6
        _0 = Poll::<()>::Ready(move _32); // scope 0 at ui/async-await/in-trait/issue-102138.rs:42:2: 42:2
        _41 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]); // scope 0 at ui/async-await/in-trait/issue-102138.rs:42:2: 42:2
        discriminant((*_41)) = 1;        // scope 0 at ui/async-await/in-trait/issue-102138.rs:42:2: 42:2
        return;                          // scope 0 at ui/async-await/in-trait/issue-102138.rs:42:2: 42:2
    }

    bb12: {
        _18 = ((_3 as Some).0: u32);     // scope 2 at ui/async-await/in-trait/issue-102138.rs:39:20: 39:21
        _31 = const _;                   // scope 2 at ui/async-await/in-trait/issue-102138.rs:40:18: 40:27
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-102138.rs:40:18: 40:27
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(async_main::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[0])) }
        _23 = _31;                       // scope 2 at ui/async-await/in-trait/issue-102138.rs:40:18: 40:27
        _22 = _23;                       // scope 2 at ui/async-await/in-trait/issue-102138.rs:40:18: 40:27
        _21 = move _22 as &[&str] (Pointer(Unsize)); // scope 2 at ui/async-await/in-trait/issue-102138.rs:40:18: 40:27
        _30 = &_18;                      // scope 2 at ui/async-await/in-trait/issue-102138.rs:40:24: 40:25
        _29 = _30;                       // scope 2 at ui/async-await/in-trait/issue-102138.rs:40:24: 40:25
        _28 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(move _29) -> [return: bb13, unwind: bb15]; // scope 2 at ui/async-await/in-trait/issue-102138.rs:40:24: 40:25
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-102138.rs:40:24: 40:25
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u32>}, val: Value(<ZST>) }
    }

    bb13: {
        _27 = [move _28];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _26 = &_27;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _25 = _26;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _24 = move _25 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = Arguments::<'_>::new_v1(move _21, move _24) -> [return: bb14, unwind: bb15]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb14: {
        _19 = _print(move _20) -> [return: bb20, unwind: bb15]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb15 (cleanup): {
        _42 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-102138.rs:36:23: 42:2]); // scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
        discriminant((*_42)) = 2;        // scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
        resume;                          // scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    }

    bb16: {
        _16 = move _2;                   // scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
        _33 = move _16;                  // scope 3 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
        goto -> bb5;                     // scope 3 at ui/async-await/in-trait/issue-102138.rs:39:33: 39:39
    }

    bb17: {
        assert(const false, "`async fn` resumed after panicking") -> bb17; // scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    }

    bb18: {
        assert(const false, "`async fn` resumed after completion") -> bb18; // scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    }

    bb19: {
        unreachable;                     // scope 0 at ui/async-await/in-trait/issue-102138.rs:36:23: 42:2
    }

    bb20: {
        goto -> bb2;                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    }
}

promoted[0] in async_main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/async-await/in-trait/issue-102138.rs:40:18: 40:27
    let mut _1: [&str; 2];               // in scope 0 at ui/async-await/in-trait/issue-102138.rs:40:18: 40:27

    bb0: {
        _1 = [const "Hi: ", const "\n"]; // scope 0 at ui/async-await/in-trait/issue-102138.rs:40:18: 40:27
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-102138.rs:40:18: 40:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-102138.rs:40:18: 40:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/async-await/in-trait/issue-102138.rs:40:18: 40:27
        return;                          // scope 0 at ui/async-await/in-trait/issue-102138.rs:40:18: 40:27
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/in-trait/issue-102138.rs:44:11: 44:11
    let mut _1: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/in-trait/issue-102138.rs:45:13: 45:25
    scope 1 {
    }

    bb0: {
        _1 = async_main() -> bb1;        // scope 0 at ui/async-await/in-trait/issue-102138.rs:45:13: 45:25
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-102138.rs:45:13: 45:23
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {async_main}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/async-await/in-trait/issue-102138.rs:45:25: 45:26
    }

    bb2: {
        return;                          // scope 0 at ui/async-await/in-trait/issue-102138.rs:46:2: 46:2
    }
}
