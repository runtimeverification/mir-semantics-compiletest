// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/in-trait/issue-104678.rs:20:1: 20:23>::async_callback(_1: &PoolImpl, _2: F) -> impl Future<Output = ()> {
    debug self => _1;                    // in scope 0 at ui/async-await/in-trait/issue-104678.rs:24:9: 24:17
    debug _callback => _2;               // in scope 0 at ui/async-await/in-trait/issue-104678.rs:25:9: 25:18
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/in-trait/issue-104678.rs:26:10: 26:12
    let mut _3: [async fn body@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6]; // in scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6

    bb0: {
        _3 = [generator@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6 (#0)] { self: _1, _callback: move _2 }; // scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
                                         // generator
                                         // + def_id: DefId(0:20 ~ issue_104678[8888]::{impl#0}::async_callback::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     F,
                                         //     Fut,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (&PoolImpl, F),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6]>(move _3) -> bb1; // scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
                                         // mir::Constant
                                         // + span: ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6]) -> [async fn body@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6] {identity_future::<(), [async fn body@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/in-trait/issue-104678.rs:28:6: 28:6
    }
}

fn <impl at ui/async-await/in-trait/issue-104678.rs:20:1: 20:23>::async_callback::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _6;           // in scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
    debug self => ((*(_1.0: &mut [async fn body@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6])).0: &PoolImpl); // in scope 0 at ui/async-await/in-trait/issue-104678.rs:24:9: 24:17
    debug _callback => ((*(_1.0: &mut [async fn body@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6])).1: F); // in scope 0 at ui/async-await/in-trait/issue-104678.rs:25:9: 25:18
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
    let _3: &PoolImpl;                   // in scope 0 at ui/async-await/in-trait/issue-104678.rs:24:9: 24:17
    let mut _5: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
    let mut _6: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
    let mut _7: u32;                     // in scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
    let mut _8: &mut [async fn body@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6]; // in scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
    let mut _9: &mut [async fn body@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6]; // in scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
    let mut _10: &mut [async fn body@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6]; // in scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
    let mut _11: &mut [async fn body@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6]; // in scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
    scope 1 {
        debug self => _3;                // in scope 1 at ui/async-await/in-trait/issue-104678.rs:24:9: 24:17
        let _4: F;                       // in scope 1 at ui/async-await/in-trait/issue-104678.rs:25:9: 25:18
        scope 2 {
            debug _callback => _4;       // in scope 2 at ui/async-await/in-trait/issue-104678.rs:25:9: 25:18
        }
    }

    bb0: {
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6]); // scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
        _7 = discriminant((*_8));        // scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
        switchInt(move _7) -> [0: bb1, 2: bb4, otherwise: bb5]; // scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
    }

    bb1: {
        _6 = move _2;                    // scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6]); // scope 0 at ui/async-await/in-trait/issue-104678.rs:24:9: 24:17
        _3 = ((*_9).0: &PoolImpl);       // scope 0 at ui/async-await/in-trait/issue-104678.rs:24:9: 24:17
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6]); // scope 1 at ui/async-await/in-trait/issue-104678.rs:25:9: 25:18
        _4 = move ((*_10).1: F);         // scope 1 at ui/async-await/in-trait/issue-104678.rs:25:9: 25:18
        _5 = core::panicking::panic(const "not yet implemented") -> bb2; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2 (cleanup): {
        drop(_4) -> bb3;                 // scope 1 at ui/async-await/in-trait/issue-104678.rs:28:5: 28:6
    }

    bb3 (cleanup): {
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/in-trait/issue-104678.rs:26:13: 28:6]); // scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
        discriminant((*_11)) = 2;        // scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
        resume;                          // scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
    }

    bb4: {
        assert(const false, "`async fn` resumed after panicking") -> bb4; // scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
    }

    bb5: {
        unreachable;                     // scope 0 at ui/async-await/in-trait/issue-104678.rs:26:13: 28:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/in-trait/issue-104678.rs:31:11: 31:11

    bb0: {
        return;                          // scope 0 at ui/async-await/in-trait/issue-104678.rs:31:13: 31:13
    }
}
