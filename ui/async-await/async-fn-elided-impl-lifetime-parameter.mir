// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:11:1: 11:13>::bar() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:20
    let mut _1: [async fn body@ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22]; // in scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22

    bb0: {
        _1 = [generator@ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22 (#0)]; // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22
                                         // generator
                                         // + def_id: DefId(0:9 ~ async_fn_elided_impl_lifetime_parameter[3cc2]::{impl#0}::bar::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22]>(move _1) -> bb1; // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22]) -> [async fn body@ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22] {identity_future::<(), [async fn body@ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:22: 12:22
    }
}

fn <impl at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:11:1: 11:13>::bar::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22
    let mut _3: ();                      // in scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22
    let mut _5: u32;                     // in scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22
    let mut _6: &mut [async fn body@ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22]; // in scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22
    let mut _7: &mut [async fn body@ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22]; // in scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22

    bb0: {
        _6 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22]); // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22
        _3 = const ();                   // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:22: 12:22
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22]); // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:22: 12:22
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:22: 12:22
        return;                          // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:22: 12:22
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:12:20: 12:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:15:11: 15:11

    bb0: {
        return;                          // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:15:14: 15:14
    }
}

fn Foo(_1: &u8) -> Foo<'_> {
    let mut _0: Foo<'_>;                 // return place in scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:9:1: 9:15

    bb0: {
        _0 = Foo::<'_>(move _1);         // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:9:1: 9:15
        return;                          // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:9:1: 9:15
    }
}

// MIR FOR CTFE
fn Foo(_1: &u8) -> Foo<'_> {
    let mut _0: Foo<'_>;                 // return place in scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:9:1: 9:15

    bb0: {
        _0 = Foo::<'_>(move _1);         // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:9:1: 9:15
        return;                          // scope 0 at ui/async-await/async-fn-elided-impl-lifetime-parameter.rs:9:1: 9:15
    }
}
