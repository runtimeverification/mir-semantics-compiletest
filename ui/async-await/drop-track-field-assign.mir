// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/drop-track-field-assign.rs:10:10: 10:15>::clone(_1: &InfoResult) -> InfoResult {
    debug self => _1;                    // in scope 0 at ui/async-await/drop-track-field-assign.rs:10:10: 10:15
    let mut _0: InfoResult;              // return place in scope 0 at ui/async-await/drop-track-field-assign.rs:10:10: 10:15
    let mut _2: std::option::Option<std::string::String>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:12:5: 12:25
    let mut _3: &std::option::Option<std::string::String>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:12:5: 12:25
    let _4: &std::option::Option<std::string::String>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:12:5: 12:25

    bb0: {
        _4 = &((*_1).0: std::option::Option<std::string::String>); // scope 0 at ui/async-await/drop-track-field-assign.rs:12:5: 12:25
        _3 = _4;                         // scope 0 at ui/async-await/drop-track-field-assign.rs:12:5: 12:25
        _2 = <Option<String> as Clone>::clone(move _3) -> bb1; // scope 0 at ui/async-await/drop-track-field-assign.rs:12:5: 12:25
                                         // mir::Constant
                                         // + span: ui/async-await/drop-track-field-assign.rs:12:5: 12:25
                                         // + literal: Const { ty: for<'a> fn(&'a Option<String>) -> Option<String> {<Option<String> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = InfoResult { node: move _2 }; // scope 0 at ui/async-await/drop-track-field-assign.rs:10:10: 10:15
        return;                          // scope 0 at ui/async-await/drop-track-field-assign.rs:10:15: 10:15
    }
}

fn <impl at ui/async-await/drop-track-field-assign.rs:19:1: 19:11>::handle(_1: &mut Agent) -> impl Future<Output = ()> {
    debug self => _1;                    // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:21: 20:30
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 20:32
    let mut _2: [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6

    bb0: {
        _2 = [generator@ui/async-await/drop-track-field-assign.rs:20:32: 25:6 (#0)] { self: move _1 }; // scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
                                         // generator
                                         // + def_id: DefId(0:7 ~ drop_track_field_assign[5b25]::{impl#0}::handle::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     for<'a> {std::future::ResumeTy, &'a mut Agent, InfoResult, Element, impl std::future::Future<Output = ()>, ()},
                                         //     (&mut Agent,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]>(move _2) -> bb1; // scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
                                         // mir::Constant
                                         // + span: ui/async-await/drop-track-field-assign.rs:20:32: 25:6
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]) -> [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6] {identity_future::<(), [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/drop-track-field-assign.rs:25:6: 25:6
    }
}

fn <impl at ui/async-await/drop-track-field-assign.rs:19:1: 19:11>::handle::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _25;          // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    debug self => ((*(_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6])).0: &mut Agent); // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:21: 20:30
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let _3: &mut Agent;                  // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:21: 20:30
    let mut _4: &InfoResult;             // in scope 0 at ui/async-await/drop-track-field-assign.rs:21:24: 21:48
    let mut _5: std::option::Option<std::string::String>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:22:21: 22:39
    let mut _6: std::string::String;     // in scope 0 at ui/async-await/drop-track-field-assign.rs:22:26: 22:38
    let mut _7: &str;                    // in scope 0 at ui/async-await/drop-track-field-assign.rs:22:26: 22:38
    let _8: &str;                        // in scope 0 at ui/async-await/drop-track-field-assign.rs:22:26: 22:31
    let mut _10: InfoResult;             // in scope 0 at ui/async-await/drop-track-field-assign.rs:23:34: 23:38
    let mut _11: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
    let mut _12: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:24:17: 24:38
    let mut _13: Element;                // in scope 0 at ui/async-await/drop-track-field-assign.rs:24:30: 24:37
    let mut _14: std::task::Poll<()>;    // in scope 0 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
    let mut _15: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
    let mut _16: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
    let mut _17: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
    let mut _18: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:24:17: 24:44
    let mut _19: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:24:17: 24:44
    let mut _20: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
    let mut _21: isize;                  // in scope 0 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
    let mut _23: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
    let mut _24: ();                     // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _25: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _26: u32;                    // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _27: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _28: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _29: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _30: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _31: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _32: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _33: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _34: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _35: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _36: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _37: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _38: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _39: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _40: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _41: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _42: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _43: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _44: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _45: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _46: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    let mut _47: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    scope 1 {
        debug self => _3;                // in scope 1 at ui/async-await/drop-track-field-assign.rs:20:21: 20:30
        scope 2 {
            debug info => (((*(_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6])) as variant#3).0: InfoResult); // in scope 2 at ui/async-await/drop-track-field-assign.rs:21:13: 21:21
            let _9: Element;             // in scope 2 at ui/async-await/drop-track-field-assign.rs:23:13: 23:20
            scope 3 {
                debug element => _9;     // in scope 3 at ui/async-await/drop-track-field-assign.rs:23:13: 23:20
                scope 4 {
                }
                scope 5 {
                    debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6])) as variant#3).1: impl std::future::Future<Output = ()>); // in scope 5 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
                    let _22: ();         // in scope 5 at ui/async-await/drop-track-field-assign.rs:24:17: 24:44
                    scope 6 {
                    }
                    scope 7 {
                        debug result => _22; // in scope 7 at ui/async-await/drop-track-field-assign.rs:24:17: 24:44
                    }
                }
            }
        }
    }

    bb0: {
        _27 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
        _26 = discriminant((*_27));      // scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
        switchInt(move _26) -> [0: bb1, 1: bb20, 2: bb19, 3: bb18, otherwise: bb21]; // scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    }

    bb1: {
        _25 = move _2;                   // scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 0 at ui/async-await/drop-track-field-assign.rs:20:21: 20:30
        (((*_28) as variant#3).2: bool) = const false; // scope 0 at ui/async-await/drop-track-field-assign.rs:20:21: 20:30
        _29 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 0 at ui/async-await/drop-track-field-assign.rs:20:21: 20:30
        _3 = move ((*_29).0: &mut Agent); // scope 0 at ui/async-await/drop-track-field-assign.rs:20:21: 20:30
        _4 = &((*_3).0: InfoResult);     // scope 1 at ui/async-await/drop-track-field-assign.rs:21:24: 21:48
        _30 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 1 at ui/async-await/drop-track-field-assign.rs:21:24: 21:48
        (((*_30) as variant#3).0: InfoResult) = <InfoResult as Clone>::clone(move _4) -> [return: bb2, unwind: bb13]; // scope 1 at ui/async-await/drop-track-field-assign.rs:21:24: 21:48
                                         // mir::Constant
                                         // + span: ui/async-await/drop-track-field-assign.rs:21:41: 21:46
                                         // + literal: Const { ty: for<'a> fn(&'a InfoResult) -> InfoResult {<InfoResult as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _31 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 1 at ui/async-await/drop-track-field-assign.rs:21:47: 21:48
        (((*_31) as variant#3).2: bool) = const true; // scope 1 at ui/async-await/drop-track-field-assign.rs:21:47: 21:48
        _8 = const "bar";                // scope 2 at ui/async-await/drop-track-field-assign.rs:22:26: 22:31
                                         // mir::Constant
                                         // + span: ui/async-await/drop-track-field-assign.rs:22:26: 22:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 2 at ui/async-await/drop-track-field-assign.rs:22:26: 22:38
        _6 = <&str as Into<String>>::into(move _7) -> [return: bb3, unwind: bb17]; // scope 2 at ui/async-await/drop-track-field-assign.rs:22:26: 22:38
                                         // mir::Constant
                                         // + span: ui/async-await/drop-track-field-assign.rs:22:32: 22:36
                                         // + literal: Const { ty: fn(&str) -> String {<&str as Into<String>>::into}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = Option::<String>::Some(move _6); // scope 2 at ui/async-await/drop-track-field-assign.rs:22:21: 22:39
        _32 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 2 at ui/async-await/drop-track-field-assign.rs:22:9: 22:18
        drop(((((*_32) as variant#3).0: InfoResult).0: std::option::Option<std::string::String>)) -> [return: bb15, unwind: bb14]; // scope 2 at ui/async-await/drop-track-field-assign.rs:22:9: 22:18
    }

    bb4: {
        _13 = move _9;                   // scope 3 at ui/async-await/drop-track-field-assign.rs:24:30: 24:37
        _12 = send_element(move _13) -> [return: bb5, unwind: bb17]; // scope 3 at ui/async-await/drop-track-field-assign.rs:24:17: 24:38
                                         // mir::Constant
                                         // + span: ui/async-await/drop-track-field-assign.rs:24:17: 24:29
                                         // + literal: Const { ty: fn(Element) -> impl Future<Output = ()> {send_element}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = <impl Future<Output = ()> as IntoFuture>::into_future(move _12) -> [return: bb6, unwind: bb17]; // scope 3 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
                                         // mir::Constant
                                         // + span: ui/async-await/drop-track-field-assign.rs:24:38: 24:44
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb6: {
        _35 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 3 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
        (((*_35) as variant#3).1: impl std::future::Future<Output = ()>) = move _11; // scope 3 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
        goto -> bb7;                     // scope 5 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
    }

    bb7: {
        _36 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 6 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
        _17 = &mut (((*_36) as variant#3).1: impl std::future::Future<Output = ()>); // scope 6 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
        _16 = &mut (*_17);               // scope 6 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
        _15 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _16) -> [return: bb8, unwind: bb17]; // scope 6 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
                                         // mir::Constant
                                         // + span: ui/async-await/drop-track-field-assign.rs:24:38: 24:44
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb8: {
        _20 = _25;                       // scope 6 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
        _19 = move _20;                  // scope 6 at ui/async-await/drop-track-field-assign.rs:24:17: 24:44
        _18 = &mut (*_19);               // scope 6 at ui/async-await/drop-track-field-assign.rs:24:17: 24:44
        _14 = <impl Future<Output = ()> as Future>::poll(move _15, move _18) -> [return: bb9, unwind: bb17]; // scope 6 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
                                         // mir::Constant
                                         // + span: ui/async-await/drop-track-field-assign.rs:24:38: 24:44
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb9: {
        _21 = discriminant(_14);         // scope 5 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
        switchInt(move _21) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 5 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
    }

    bb10: {
        _0 = Poll::<()>::Pending;        // scope 5 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
        _37 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 5 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
        discriminant((*_37)) = 3;        // scope 5 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
        return;                          // scope 5 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
    }

    bb11: {
        unreachable;                     // scope 5 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
    }

    bb12: {
        _22 = ((_14 as Ready).0: ());    // scope 5 at ui/async-await/drop-track-field-assign.rs:24:17: 24:44
        _24 = const ();                  // scope 1 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
        _38 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 1 at ui/async-await/drop-track-field-assign.rs:25:5: 25:6
        (((*_38) as variant#3).2: bool) = const false; // scope 1 at ui/async-await/drop-track-field-assign.rs:25:5: 25:6
        _0 = Poll::<()>::Ready(move _24); // scope 0 at ui/async-await/drop-track-field-assign.rs:25:6: 25:6
        _39 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 0 at ui/async-await/drop-track-field-assign.rs:25:6: 25:6
        discriminant((*_39)) = 1;        // scope 0 at ui/async-await/drop-track-field-assign.rs:25:6: 25:6
        return;                          // scope 0 at ui/async-await/drop-track-field-assign.rs:25:6: 25:6
    }

    bb13 (cleanup): {
        _40 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 1 at ui/async-await/drop-track-field-assign.rs:25:5: 25:6
        (((*_40) as variant#3).2: bool) = const false; // scope 1 at ui/async-await/drop-track-field-assign.rs:25:5: 25:6
        _47 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
        discriminant((*_47)) = 2;        // scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
        resume;                          // scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    }

    bb14 (cleanup): {
        _41 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 2 at ui/async-await/drop-track-field-assign.rs:22:9: 22:18
        (((*_41) as variant#3).2: bool) = const true; // scope 2 at ui/async-await/drop-track-field-assign.rs:22:9: 22:18
        _42 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 2 at ui/async-await/drop-track-field-assign.rs:22:9: 22:18
        ((((*_42) as variant#3).0: InfoResult).0: std::option::Option<std::string::String>) = move _5; // scope 2 at ui/async-await/drop-track-field-assign.rs:22:9: 22:18
        goto -> bb17;                    // scope 2 at ui/async-await/drop-track-field-assign.rs:22:9: 22:18
    }

    bb15: {
        _43 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 2 at ui/async-await/drop-track-field-assign.rs:22:9: 22:18
        (((*_43) as variant#3).2: bool) = const true; // scope 2 at ui/async-await/drop-track-field-assign.rs:22:9: 22:18
        _44 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 2 at ui/async-await/drop-track-field-assign.rs:22:9: 22:18
        ((((*_44) as variant#3).0: InfoResult).0: std::option::Option<std::string::String>) = move _5; // scope 2 at ui/async-await/drop-track-field-assign.rs:22:9: 22:18
        _33 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 2 at ui/async-await/drop-track-field-assign.rs:23:34: 23:38
        (((*_33) as variant#3).2: bool) = const false; // scope 2 at ui/async-await/drop-track-field-assign.rs:23:34: 23:38
        _34 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 2 at ui/async-await/drop-track-field-assign.rs:23:34: 23:38
        _10 = move (((*_34) as variant#3).0: InfoResult); // scope 2 at ui/async-await/drop-track-field-assign.rs:23:34: 23:38
        _9 = parse_info(move _10) -> [return: bb4, unwind: bb17]; // scope 2 at ui/async-await/drop-track-field-assign.rs:23:23: 23:39
                                         // mir::Constant
                                         // + span: ui/async-await/drop-track-field-assign.rs:23:23: 23:33
                                         // + literal: Const { ty: fn(InfoResult) -> Element {parse_info}, val: Value(<ZST>) }
    }

    bb16 (cleanup): {
        _45 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 1 at ui/async-await/drop-track-field-assign.rs:25:5: 25:6
        drop(((((*_45) as variant#3).0: InfoResult).0: std::option::Option<std::string::String>)) -> bb13; // scope 1 at ui/async-await/drop-track-field-assign.rs:25:5: 25:6
    }

    bb17 (cleanup): {
        _46 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:20:32: 25:6]); // scope 1 at ui/async-await/drop-track-field-assign.rs:25:5: 25:6
        switchInt((((*_46) as variant#3).2: bool)) -> [0: bb13, otherwise: bb16]; // scope 1 at ui/async-await/drop-track-field-assign.rs:25:5: 25:6
    }

    bb18: {
        _23 = move _2;                   // scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
        _25 = move _23;                  // scope 5 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
        goto -> bb7;                     // scope 5 at ui/async-await/drop-track-field-assign.rs:24:38: 24:44
    }

    bb19: {
        assert(const false, "`async fn` resumed after panicking") -> bb19; // scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    }

    bb20: {
        assert(const false, "`async fn` resumed after completion") -> bb20; // scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    }

    bb21: {
        unreachable;                     // scope 0 at ui/async-await/drop-track-field-assign.rs:20:32: 25:6
    }
}

fn send_element(_1: Element) -> impl Future<Output = ()> {
    debug _ => _1;                       // in scope 0 at ui/async-await/drop-track-field-assign.rs:31:23: 31:24
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:35
    let mut _2: [async fn body@ui/async-await/drop-track-field-assign.rs:31:35: 31:37]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37

    bb0: {
        _2 = [generator@ui/async-await/drop-track-field-assign.rs:31:35: 31:37 (#0)] { _: move _1 }; // scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
                                         // generator
                                         // + def_id: DefId(0:10 ~ drop_track_field_assign[5b25]::send_element::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (Element,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/drop-track-field-assign.rs:31:35: 31:37]>(move _2) -> bb1; // scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
                                         // mir::Constant
                                         // + span: ui/async-await/drop-track-field-assign.rs:31:35: 31:37
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/drop-track-field-assign.rs:31:35: 31:37]) -> [async fn body@ui/async-await/drop-track-field-assign.rs:31:35: 31:37] {identity_future::<(), [async fn body@ui/async-await/drop-track-field-assign.rs:31:35: 31:37]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/drop-track-field-assign.rs:31:37: 31:37
    }
}

fn send_element::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/drop-track-field-assign.rs:31:35: 31:37]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:31:35: 31:37])).0: Element); // in scope 0 at ui/async-await/drop-track-field-assign.rs:31:23: 31:24
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
    let mut _3: Element;                 // in scope 0 at ui/async-await/drop-track-field-assign.rs:31:23: 31:24
    let mut _4: ();                      // in scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
    let mut _6: u32;                     // in scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
    let mut _7: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:31:35: 31:37]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
    let mut _8: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:31:35: 31:37]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
    let mut _9: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:31:35: 31:37]; // in scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
    scope 1 {
        debug _ => _3;                   // in scope 1 at ui/async-await/drop-track-field-assign.rs:31:23: 31:24
        scope 2 {
        }
    }

    bb0: {
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:31:35: 31:37]); // scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
        switchInt(move _6) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:31:35: 31:37]); // scope 0 at ui/async-await/drop-track-field-assign.rs:31:23: 31:24
        _3 = move ((*_8).0: Element);    // scope 0 at ui/async-await/drop-track-field-assign.rs:31:23: 31:24
        _4 = const ();                   // scope 2 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
        _0 = Poll::<()>::Ready(move _4); // scope 0 at ui/async-await/drop-track-field-assign.rs:31:37: 31:37
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-track-field-assign.rs:31:35: 31:37]); // scope 0 at ui/async-await/drop-track-field-assign.rs:31:37: 31:37
        discriminant((*_9)) = 1;         // scope 0 at ui/async-await/drop-track-field-assign.rs:31:37: 31:37
        return;                          // scope 0 at ui/async-await/drop-track-field-assign.rs:31:37: 31:37
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/drop-track-field-assign.rs:31:35: 31:37
    }
}

fn parse(_1: &[u8]) -> Result<(), ()> {
    let mut _0: std::result::Result<(), ()>; // return place in scope 0 at ui/async-await/drop-track-field-assign.rs:33:23: 33:37

    bb0: {
        _0 = const Result::<(), ()>::Ok(()); // scope 0 at ui/async-await/drop-track-field-assign.rs:34:5: 34:11
                                         // mir::Constant
                                         // + span: ui/async-await/drop-track-field-assign.rs:34:5: 34:11
                                         // + literal: Const { ty: Result<(), ()>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/async-await/drop-track-field-assign.rs:35:2: 35:2
    }
}

fn parse_info(_1: InfoResult) -> Element {
    let mut _0: Element;                 // return place in scope 0 at ui/async-await/drop-track-field-assign.rs:37:33: 37:40

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/async-await/drop-track-field-assign.rs:39:1: 39:2
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/drop-track-field-assign.rs:39:2: 39:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/drop-track-field-assign.rs:41:11: 41:11
    let mut _1: Agent;                   // in scope 0 at ui/async-await/drop-track-field-assign.rs:42:9: 42:18
    let mut _2: InfoResult;              // in scope 0 at ui/async-await/drop-track-field-assign.rs:43:22: 43:47
    let mut _3: std::option::Option<std::string::String>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:43:41: 43:45
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/drop-track-field-assign.rs:45:13: 45:27
    let mut _5: &mut Agent;              // in scope 0 at ui/async-await/drop-track-field-assign.rs:45:13: 45:27
    scope 1 {
        debug agent => _1;               // in scope 1 at ui/async-await/drop-track-field-assign.rs:42:9: 42:18
        scope 2 {
        }
    }

    bb0: {
        _3 = Option::<String>::None;     // scope 0 at ui/async-await/drop-track-field-assign.rs:43:41: 43:45
        _2 = InfoResult { node: move _3 }; // scope 0 at ui/async-await/drop-track-field-assign.rs:43:22: 43:47
        _1 = Agent { info_result: move _2 }; // scope 0 at ui/async-await/drop-track-field-assign.rs:42:21: 44:6
        _5 = &mut _1;                    // scope 1 at ui/async-await/drop-track-field-assign.rs:45:13: 45:27
        _4 = Agent::handle(move _5) -> [return: bb1, unwind: bb4]; // scope 1 at ui/async-await/drop-track-field-assign.rs:45:13: 45:27
                                         // mir::Constant
                                         // + span: ui/async-await/drop-track-field-assign.rs:45:19: 45:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut Agent) -> impl Future<Output = ()> {Agent::handle}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_4) -> [return: bb2, unwind: bb4]; // scope 1 at ui/async-await/drop-track-field-assign.rs:45:27: 45:28
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/async-await/drop-track-field-assign.rs:46:1: 46:2
    }

    bb3: {
        return;                          // scope 0 at ui/async-await/drop-track-field-assign.rs:46:2: 46:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/async-await/drop-track-field-assign.rs:46:1: 46:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/async-await/drop-track-field-assign.rs:41:1: 46:2
    }
}
