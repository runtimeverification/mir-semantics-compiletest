// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn unsize_trait_coercion() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:13:28: 13:28

    bb0: {
        return;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:21:2: 21:2
    }
}

fn unsize_trait_coercion::sync_example() -> Box<dyn Debug> {
    let mut _0: std::boxed::Box<dyn std::fmt::Debug>; // return place in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:14:26: 14:40
    let mut _1: std::boxed::Box<dyn std::fmt::Debug>; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:15:9: 15:25
    let mut _2: std::boxed::Box<&str>;   // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:15:9: 15:25

    bb0: {
        _2 = Box::<&str>::new(const "asdf") -> bb1; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:15:9: 15:25
                                         // mir::Constant
                                         // + span: ui/async-await/return-ty-unsize-coercion.rs:15:9: 15:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> Box<&str> {Box::<&str>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/async-await/return-ty-unsize-coercion.rs:15:18: 15:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _1 = move _2 as std::boxed::Box<dyn std::fmt::Debug> (Pointer(Unsize)); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:15:9: 15:25
        _0 = move _1 as std::boxed::Box<dyn std::fmt::Debug> (Pointer(Unsize)); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:15:9: 15:25
        return;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:16:6: 16:6
    }
}

fn unsize_trait_coercion::async_example() -> impl Future<Output = Box<(dyn Debug + 'static)>> {
    let mut _0: impl std::future::Future<Output = std::boxed::Box<(dyn std::fmt::Debug + 'static)>>; // return place in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:33: 18:47
    let mut _1: [async fn body@ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6]; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6

    bb0: {
        _1 = [generator@ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6 (#0)]; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
                                         // generator
                                         // + def_id: DefId(0:7 ~ return_ty_unsize_coercion[f5a3]::unsize_trait_coercion::async_example::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     std::boxed::Box<dyn std::fmt::Debug>,
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<Box<dyn Debug>, [async fn body@ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6]>(move _1) -> bb1; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
                                         // mir::Constant
                                         // + span: ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6]) -> [async fn body@ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6] {identity_future::<Box<dyn Debug>, [async fn body@ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:20:6: 20:6
    }
}

fn unsize_trait_coercion::async_example::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6]>, _2: &mut Context<'_>) -> Poll<Box<dyn Debug>> {
    debug _task_context => _7;           // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
    let mut _0: std::task::Poll<std::boxed::Box<dyn std::fmt::Debug>>; // return place in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
    let mut _3: std::boxed::Box<dyn std::fmt::Debug>; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
    let mut _4: std::boxed::Box<dyn std::fmt::Debug>; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
    let mut _5: std::boxed::Box<&str>;   // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:19:9: 19:25
    let mut _6: std::boxed::Box<dyn std::fmt::Debug>; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
    let mut _7: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
    let mut _8: u32;                     // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
    let mut _9: &mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6]; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
    let mut _10: &mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6]; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
    let mut _11: &mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6]; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6

    bb0: {
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6]); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
        _8 = discriminant((*_9));        // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
        switchInt(move _8) -> [0: bb1, 1: bb5, 2: bb4, otherwise: bb6]; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
    }

    bb1: {
        _7 = move _2;                    // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
        _5 = Box::<&str>::new(const "asdf") -> [return: bb2, unwind: bb3]; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:19:9: 19:25
                                         // mir::Constant
                                         // + span: ui/async-await/return-ty-unsize-coercion.rs:19:9: 19:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> Box<&str> {Box::<&str>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/async-await/return-ty-unsize-coercion.rs:19:18: 19:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _4 = move _5 as std::boxed::Box<dyn std::fmt::Debug> (Pointer(Unsize)); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:19:9: 19:25
        _3 = move _4 as std::boxed::Box<dyn std::fmt::Debug> (Pointer(Unsize)); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
        _6 = move _3 as std::boxed::Box<dyn std::fmt::Debug> (Pointer(Unsize)); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
        _0 = Poll::<Box<dyn Debug>>::Ready(move _6); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:20:6: 20:6
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6]); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:20:6: 20:6
        discriminant((*_10)) = 1;        // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:20:6: 20:6
        return;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:20:6: 20:6
    }

    bb3 (cleanup): {
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6]); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
        discriminant((*_11)) = 2;        // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
        resume;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
    }

    bb4: {
        assert(const false, "`async fn` resumed after panicking") -> bb4; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
    }

    bb5: {
        assert(const false, "`async fn` resumed after completion") -> bb5; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
    }

    bb6: {
        unreachable;                     // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:18:48: 20:6
    }
}

fn unsize_slice_coercion() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:24:28: 24:28

    bb0: {
        return;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:32:2: 32:2
    }
}

fn unsize_slice_coercion::sync_example() -> Box<[u32]> {
    let mut _0: std::boxed::Box<[u32]>;  // return place in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:25:26: 25:36
    let mut _1: std::boxed::Box<[u32; 1]>; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:26:9: 26:22
    let mut _2: [u32; 1];                // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:26:18: 26:21

    bb0: {
        _2 = [const 0_u32];              // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:26:18: 26:21
        _1 = Box::<[u32; 1]>::new(move _2) -> bb1; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:26:9: 26:22
                                         // mir::Constant
                                         // + span: ui/async-await/return-ty-unsize-coercion.rs:26:9: 26:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u32; 1]) -> Box<[u32; 1]> {Box::<[u32; 1]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _1 as std::boxed::Box<[u32]> (Pointer(Unsize)); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:26:9: 26:22
        return;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:27:6: 27:6
    }
}

fn unsize_slice_coercion::async_example() -> impl Future<Output = Box<[u32]>> {
    let mut _0: impl std::future::Future<Output = std::boxed::Box<[u32]>>; // return place in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:33: 29:43
    let mut _1: [async fn body@ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6]; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6

    bb0: {
        _1 = [generator@ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6 (#0)]; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
                                         // generator
                                         // + def_id: DefId(0:11 ~ return_ty_unsize_coercion[f5a3]::unsize_slice_coercion::async_example::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     std::boxed::Box<[u32]>,
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<Box<[u32]>, [async fn body@ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6]>(move _1) -> bb1; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
                                         // mir::Constant
                                         // + span: ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6]) -> [async fn body@ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6] {identity_future::<Box<[u32]>, [async fn body@ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:31:6: 31:6
    }
}

fn unsize_slice_coercion::async_example::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6]>, _2: &mut Context<'_>) -> Poll<Box<[u32]>> {
    debug _task_context => _6;           // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
    let mut _0: std::task::Poll<std::boxed::Box<[u32]>>; // return place in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
    let mut _3: std::boxed::Box<[u32; 1]>; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:30:9: 30:22
    let mut _4: [u32; 1];                // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:30:18: 30:21
    let mut _5: std::boxed::Box<[u32]>;  // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
    let mut _6: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
    let mut _7: u32;                     // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
    let mut _8: &mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6]; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
    let mut _9: &mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6]; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
    let mut _10: &mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6]; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6

    bb0: {
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6]); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
        _7 = discriminant((*_8));        // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
        switchInt(move _7) -> [0: bb1, 1: bb5, 2: bb4, otherwise: bb6]; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
    }

    bb1: {
        _6 = move _2;                    // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
        _4 = [const 0_u32];              // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:30:18: 30:21
        _3 = Box::<[u32; 1]>::new(move _4) -> [return: bb2, unwind: bb3]; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:30:9: 30:22
                                         // mir::Constant
                                         // + span: ui/async-await/return-ty-unsize-coercion.rs:30:9: 30:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u32; 1]) -> Box<[u32; 1]> {Box::<[u32; 1]>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = move _3 as std::boxed::Box<[u32]> (Pointer(Unsize)); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:30:9: 30:22
        _0 = Poll::<Box<[u32]>>::Ready(move _5); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:31:6: 31:6
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6]); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:31:6: 31:6
        discriminant((*_9)) = 1;         // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:31:6: 31:6
        return;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:31:6: 31:6
    }

    bb3 (cleanup): {
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6]); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
        discriminant((*_10)) = 2;        // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
        resume;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
    }

    bb4: {
        assert(const false, "`async fn` resumed after panicking") -> bb4; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
    }

    bb5: {
        assert(const false, "`async fn` resumed after completion") -> bb5; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
    }

    bb6: {
        unreachable;                     // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:29:44: 31:6
    }
}

fn unsize_slice_str_coercion() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:35:32: 35:32

    bb0: {
        return;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:43:2: 43:2
    }
}

fn unsize_slice_str_coercion::sync_example() -> &[&str] {
    let mut _0: &[&str];                 // return place in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:36:26: 36:49
    let mut _1: &[&str; 1];              // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:37:9: 37:16
    let _2: &[&str; 1];                  // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:37:9: 37:16
    let mut _3: &[&str; 1];              // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:37:9: 37:16

    bb0: {
        _3 = const _;                    // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:37:9: 37:16
                                         // mir::Constant
                                         // + span: ui/async-await/return-ty-unsize-coercion.rs:37:9: 37:16
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(unsize_slice_str_coercion::sync_example, [], Some(promoted[0])) }
        _2 = _3;                         // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:37:9: 37:16
        _1 = _2;                         // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:37:9: 37:16
        _0 = move _1 as &[&str] (Pointer(Unsize)); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:37:9: 37:16
        return;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:38:6: 38:6
    }
}

promoted[0] in unsize_slice_str_coercion::sync_example: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:37:9: 37:16
    let mut _1: [&str; 1];               // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:37:10: 37:16

    bb0: {
        _1 = [const "hi"];               // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:37:10: 37:16
                                         // mir::Constant
                                         // + span: ui/async-await/return-ty-unsize-coercion.rs:37:11: 37:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:37:9: 37:16
        return;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:37:9: 37:16
    }
}

fn unsize_slice_str_coercion::async_example() -> impl Future<Output = &'static [&'static str]> {
    let mut _0: impl std::future::Future<Output = &'static [&'static str]>; // return place in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:33: 40:56
    let mut _1: [async fn body@ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6]; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6

    bb0: {
        _1 = [generator@ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6 (#0)]; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6
                                         // generator
                                         // + def_id: DefId(0:15 ~ return_ty_unsize_coercion[f5a3]::unsize_slice_str_coercion::async_example::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     &[&str],
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<&[&str], [async fn body@ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6]>(move _1) -> bb1; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6
                                         // mir::Constant
                                         // + span: ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6]) -> [async fn body@ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6] {identity_future::<&[&str], [async fn body@ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:42:6: 42:6
    }
}

fn unsize_slice_str_coercion::async_example::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6]>, _2: &mut Context<'_>) -> Poll<&[&str]> {
    debug _task_context => _7;           // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6
    let mut _0: std::task::Poll<&[&str]>; // return place in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6
    let mut _3: &[&str; 1];              // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:41:9: 41:16
    let _4: &[&str; 1];                  // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:41:9: 41:16
    let mut _5: &[&str; 1];              // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:41:9: 41:16
    let mut _6: &[&str];                 // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6
    let mut _7: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6
    let mut _8: u32;                     // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6
    let mut _9: &mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6]; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6
    let mut _10: &mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6]; // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6

    bb0: {
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6]); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6
        _8 = discriminant((*_9));        // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6
        switchInt(move _8) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6
    }

    bb1: {
        _7 = move _2;                    // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6
        _5 = const _;                    // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:41:9: 41:16
                                         // mir::Constant
                                         // + span: ui/async-await/return-ty-unsize-coercion.rs:41:9: 41:16
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(unsize_slice_str_coercion::async_example::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[0])) }
        _4 = _5;                         // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:41:9: 41:16
        _3 = _4;                         // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:41:9: 41:16
        _6 = move _3 as &[&str] (Pointer(Unsize)); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:41:9: 41:16
        _0 = Poll::<&[&str]>::Ready(move _6); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:42:6: 42:6
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6]); // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:42:6: 42:6
        discriminant((*_10)) = 1;        // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:42:6: 42:6
        return;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:42:6: 42:6
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:40:57: 42:6
    }
}

promoted[0] in unsize_slice_str_coercion::async_example::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:41:9: 41:16
    let mut _1: [&str; 1];               // in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:41:10: 41:16

    bb0: {
        _1 = [const "hi"];               // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:41:10: 41:16
                                         // mir::Constant
                                         // + span: ui/async-await/return-ty-unsize-coercion.rs:41:11: 41:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:41:9: 41:16
        return;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:41:9: 41:16
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/return-ty-unsize-coercion.rs:45:11: 45:11

    bb0: {
        return;                          // scope 0 at ui/async-await/return-ty-unsize-coercion.rs:45:13: 45:13
    }
}
