// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:8:11: 8:11
    let _1: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:9:9: 9:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/async-await/interior-with-const-generic-expr.rs:9:9: 9:10
    }

    bb0: {
        _1 = test() -> bb1;              // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:9:13: 9:19
                                         // mir::Constant
                                         // + span: ui/async-await/interior-with-const-generic-expr.rs:9:13: 9:17
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {test}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:10:2: 10:2
    }
}

fn concat(_1: [f32; A], _2: [f32; B]) -> [f32; A + B] {
    debug a => _1;                       // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:12:43: 12:44
    debug b => _2;                       // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:12:56: 12:57
    let mut _0: [f32; A + B];            // return place in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:12:72: 12:84
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _3 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

concat::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:12:52: 12:53

    bb0: {
        _0 = const A;                    // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:12:52: 12:53
        return;                          // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:12:52: 12:53
    }
}

concat::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:12:65: 12:66

    bb0: {
        _0 = const B;                    // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:12:65: 12:66
        return;                          // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:12:65: 12:66
    }
}

concat::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:12:78: 12:83
    let mut _1: (usize, bool);           // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:12:78: 12:83

    bb0: {
        _1 = CheckedAdd(const A, const B); // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:12:78: 12:83
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const A, const B) -> bb1; // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:12:78: 12:83
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:12:78: 12:83
        return;                          // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:12:78: 12:83
    }
}

fn reverse(_1: [f32; A]) -> impl Future<Output = [f32; A]> {
    debug x => _1;                       // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:34: 16:35
    let mut _0: impl std::future::Future<Output = [f32; A]>; // return place in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:50: 16:58
    let mut _2: [async fn body@ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2]; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2

    bb0: {
        _2 = [generator@ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2 (#0)] { x: _1 }; // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
                                         // generator
                                         // + def_id: DefId(0:14 ~ interior_with_const_generic_expr[2532]::reverse::{closure#0})
                                         // + substs: [
                                         //     Const { ty: usize, kind: Param(A/#0) },
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     [f32; A],
                                         //     {},
                                         //     ([f32; A],),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<[f32; A], [async fn body@ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2]>(move _2) -> bb1; // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
                                         // mir::Constant
                                         // + span: ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2]) -> [async fn body@ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2] {identity_future::<[f32; A], [async fn body@ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:18:2: 18:2
    }
}

reverse::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:43: 16:44

    bb0: {
        _0 = const A;                    // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:43: 16:44
        return;                          // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:43: 16:44
    }
}

reverse::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:56: 16:57

    bb0: {
        _0 = const A;                    // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:56: 16:57
        return;                          // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:56: 16:57
    }
}

fn reverse::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2]>, _2: &mut Context<'_>) -> Poll<[f32; A]> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
    debug x => ((*(_1.0: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2])).0: [f32; A]); // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:34: 16:35
    let mut _0: std::task::Poll<[f32; A]>; // return place in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
    let _3: [f32; A];                    // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:34: 16:35
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
    let mut _6: u32;                     // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
    let mut _7: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2]; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
    let mut _8: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2]; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
    let mut _9: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2]; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/async-await/interior-with-const-generic-expr.rs:16:34: 16:35
    }

    bb0: {
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2]); // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
        switchInt(move _6) -> [0: bb1, 2: bb3, otherwise: bb4]; // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2]); // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:34: 16:35
        _3 = ((*_8).0: [f32; A]);        // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:34: 16:35
        _4 = core::panicking::panic(const "not yet implemented") -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2 (cleanup): {
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2]); // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
        discriminant((*_9)) = 2;         // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
        resume;                          // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
    }

    bb3: {
        assert(const false, "`async fn` resumed after panicking") -> bb3; // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
    }

    bb4: {
        unreachable;                     // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:16:59: 18:2
    }
}

fn test() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 20:17
    let mut _1: [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2

    bb0: {
        _1 = [generator@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2 (#0)]; // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
                                         // generator
                                         // + def_id: DefId(0:16 ~ interior_with_const_generic_expr[2532]::test::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, [f32; 1], [f32; 2], [f32; A + B], impl std::future::Future<Output = [f32; A + B]>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]>(move _1) -> bb1; // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
                                         // mir::Constant
                                         // + span: ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]) -> [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2] {identity_future::<(), [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:26:2: 26:2
    }
}

fn test::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _36;          // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
    let _3: [f32; 1];                    // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:21:9: 21:10
    let mut _6: [f32; 1];                // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:23:21: 23:22
    let mut _7: [f32; 2];                // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:23:23: 23:24
    let mut _9: impl std::future::Future<Output = [f32; A + B]>; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
    let mut _10: impl std::future::Future<Output = [f32; A + B]>; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:24:14: 24:25
    let mut _11: [f32; A + B];           // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:24:22: 24:24
    let mut _12: std::task::Poll<[f32; A + B]>; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
    let mut _13: std::pin::Pin<&mut impl std::future::Future<Output = [f32; A + B]>>; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
    let mut _14: &mut impl std::future::Future<Output = [f32; A + B]>; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
    let mut _15: &mut impl std::future::Future<Output = [f32; A + B]>; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
    let mut _16: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:24:14: 24:31
    let mut _17: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:24:14: 24:31
    let mut _18: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
    let mut _19: isize;                  // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
    let mut _21: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
    let _22: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _23: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _24: &[&str];                // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:25:14: 25:20
    let mut _25: &[&str; 2];             // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:25:14: 25:20
    let _26: &[&str; 2];                 // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:25:14: 25:20
    let mut _27: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _28: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _29: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _30: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _31: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:25:22: 25:24
    let mut _32: &[f32; A + B];          // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:25:22: 25:24
    let _33: &[f32; A + B];              // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:25:22: 25:24
    let mut _35: ();                     // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
    let mut _36: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
    let mut _37: u32;                    // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
    let mut _38: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
    let mut _39: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
    let mut _40: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
    let mut _41: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
    let mut _42: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
    let mut _43: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]; // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
    scope 1 {
        debug a => _3;                   // in scope 1 at ui/async-await/interior-with-const-generic-expr.rs:21:9: 21:10
        let _4: [f32; 2];                // in scope 1 at ui/async-await/interior-with-const-generic-expr.rs:22:9: 22:10
        scope 2 {
            debug b => _4;               // in scope 2 at ui/async-await/interior-with-const-generic-expr.rs:22:9: 22:10
            let _5: [f32; A + B];        // in scope 2 at ui/async-await/interior-with-const-generic-expr.rs:23:9: 23:11
            scope 3 {
                debug ab => _5;          // in scope 3 at ui/async-await/interior-with-const-generic-expr.rs:23:9: 23:11
                let _8: [f32; A + B];    // in scope 3 at ui/async-await/interior-with-const-generic-expr.rs:24:9: 24:11
                scope 4 {
                    debug ba => _8;      // in scope 4 at ui/async-await/interior-with-const-generic-expr.rs:24:9: 24:11
                    let mut _34: &[&str; 2]; // in scope 4 at ui/async-await/interior-with-const-generic-expr.rs:25:14: 25:20
                }
                scope 5 {
                    debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2])) as variant#3).0: impl std::future::Future<Output = [f32; A + B]>); // in scope 5 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
                    let _20: [f32; A + B]; // in scope 5 at ui/async-await/interior-with-const-generic-expr.rs:24:14: 24:31
                    scope 6 {
                    }
                    scope 7 {
                        debug result => _20; // in scope 7 at ui/async-await/interior-with-const-generic-expr.rs:24:14: 24:31
                    }
                }
            }
        }
    }

    bb0: {
        _38 = deref_copy (_1.0: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]); // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
        _37 = discriminant((*_38));      // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
        switchInt(move _37) -> [0: bb1, 1: bb17, 2: bb16, 3: bb15, otherwise: bb18]; // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
    }

    bb1: {
        _36 = move _2;                   // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
        _3 = [const 0f32];               // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:21:13: 21:18
        _4 = [const 1f32, const 2f32];   // scope 1 at ui/async-await/interior-with-const-generic-expr.rs:22:13: 22:23
        _6 = _3;                         // scope 2 at ui/async-await/interior-with-const-generic-expr.rs:23:21: 23:22
        _7 = _4;                         // scope 2 at ui/async-await/interior-with-const-generic-expr.rs:23:23: 23:24
        _5 = concat::<1, 2>(move _6, move _7) -> [return: bb2, unwind: bb14]; // scope 2 at ui/async-await/interior-with-const-generic-expr.rs:23:14: 23:25
                                         // mir::Constant
                                         // + span: ui/async-await/interior-with-const-generic-expr.rs:23:14: 23:20
                                         // + literal: Const { ty: fn([f32; 1], [f32; 2]) -> [f32; A + B] {concat::<1, 2>}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = _5;                        // scope 3 at ui/async-await/interior-with-const-generic-expr.rs:24:22: 24:24
        _10 = reverse::<A + B>(move _11) -> [return: bb3, unwind: bb14]; // scope 3 at ui/async-await/interior-with-const-generic-expr.rs:24:14: 24:25
                                         // mir::Constant
                                         // + span: ui/async-await/interior-with-const-generic-expr.rs:24:14: 24:21
                                         // + literal: Const { ty: fn([f32; A + B]) -> impl Future<Output = [f32; A + B]> {reverse::<A + B>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = <impl Future<Output = [f32; A + B]> as IntoFuture>::into_future(move _10) -> [return: bb4, unwind: bb14]; // scope 3 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
                                         // mir::Constant
                                         // + span: ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
                                         // + literal: Const { ty: fn(impl Future<Output = [f32; A + B]>) -> <impl Future<Output = [f32; A + B]> as IntoFuture>::IntoFuture {<impl Future<Output = [f32; A + B]> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb4: {
        _39 = deref_copy (_1.0: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]); // scope 3 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
        (((*_39) as variant#3).0: impl std::future::Future<Output = [f32; A + B]>) = move _9; // scope 3 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
        goto -> bb5;                     // scope 5 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
    }

    bb5: {
        _40 = deref_copy (_1.0: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]); // scope 6 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
        _15 = &mut (((*_40) as variant#3).0: impl std::future::Future<Output = [f32; A + B]>); // scope 6 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
        _14 = &mut (*_15);               // scope 6 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
        _13 = Pin::<&mut impl Future<Output = [f32; A + B]>>::new_unchecked(move _14) -> [return: bb6, unwind: bb14]; // scope 6 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
                                         // mir::Constant
                                         // + span: ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = [f32; A + B]>) -> Pin<&mut impl Future<Output = [f32; A + B]>> {Pin::<&mut impl Future<Output = [f32; A + B]>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb6: {
        _18 = _36;                       // scope 6 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
        _17 = move _18;                  // scope 6 at ui/async-await/interior-with-const-generic-expr.rs:24:14: 24:31
        _16 = &mut (*_17);               // scope 6 at ui/async-await/interior-with-const-generic-expr.rs:24:14: 24:31
        _12 = <impl Future<Output = [f32; A + B]> as Future>::poll(move _13, move _16) -> [return: bb7, unwind: bb14]; // scope 6 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
                                         // mir::Constant
                                         // + span: ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = [f32; A + B]>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = [f32; A + B]> as Future>::Output> {<impl Future<Output = [f32; A + B]> as Future>::poll}, val: Value(<ZST>) }
    }

    bb7: {
        _19 = discriminant(_12);         // scope 5 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
        switchInt(move _19) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 5 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
    }

    bb8: {
        _0 = Poll::<()>::Pending;        // scope 5 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
        _41 = deref_copy (_1.0: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]); // scope 5 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
        discriminant((*_41)) = 3;        // scope 5 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
        return;                          // scope 5 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
    }

    bb9: {
        unreachable;                     // scope 5 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
    }

    bb10: {
        _20 = ((_12 as Ready).0: [f32; A + B]); // scope 5 at ui/async-await/interior-with-const-generic-expr.rs:24:14: 24:31
        _8 = _20;                        // scope 7 at ui/async-await/interior-with-const-generic-expr.rs:24:14: 24:31
        _34 = const _;                   // scope 4 at ui/async-await/interior-with-const-generic-expr.rs:25:14: 25:20
                                         // mir::Constant
                                         // + span: ui/async-await/interior-with-const-generic-expr.rs:25:14: 25:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(test::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[0])) }
        _26 = _34;                       // scope 4 at ui/async-await/interior-with-const-generic-expr.rs:25:14: 25:20
        _25 = _26;                       // scope 4 at ui/async-await/interior-with-const-generic-expr.rs:25:14: 25:20
        _24 = move _25 as &[&str] (Pointer(Unsize)); // scope 4 at ui/async-await/interior-with-const-generic-expr.rs:25:14: 25:20
        _33 = &_8;                       // scope 4 at ui/async-await/interior-with-const-generic-expr.rs:25:22: 25:24
        _32 = _33;                       // scope 4 at ui/async-await/interior-with-const-generic-expr.rs:25:22: 25:24
        _31 = core::fmt::ArgumentV1::<'_>::new_debug::<[f32; A + B]>(move _32) -> [return: bb11, unwind: bb14]; // scope 4 at ui/async-await/interior-with-const-generic-expr.rs:25:22: 25:24
                                         // mir::Constant
                                         // + span: ui/async-await/interior-with-const-generic-expr.rs:25:22: 25:24
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b [f32; A + B]) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<[f32; A + B]>}, val: Value(<ZST>) }
    }

    bb11: {
        _30 = [move _31];                // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _29 = &_30;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _28 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _27 = move _28 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _23 = Arguments::<'_>::new_v1(move _24, move _27) -> [return: bb12, unwind: bb14]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb12: {
        _22 = _print(move _23) -> [return: bb13, unwind: bb14]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb13: {
        _35 = const ();                  // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
        _0 = Poll::<()>::Ready(move _35); // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:26:2: 26:2
        _42 = deref_copy (_1.0: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]); // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:26:2: 26:2
        discriminant((*_42)) = 1;        // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:26:2: 26:2
        return;                          // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:26:2: 26:2
    }

    bb14 (cleanup): {
        _43 = deref_copy (_1.0: &mut [async fn body@ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2]); // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
        discriminant((*_43)) = 2;        // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
        resume;                          // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
    }

    bb15: {
        _21 = move _2;                   // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
        _36 = move _21;                  // scope 5 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
        goto -> bb5;                     // scope 5 at ui/async-await/interior-with-const-generic-expr.rs:24:25: 24:31
    }

    bb16: {
        assert(const false, "`async fn` resumed after panicking") -> bb16; // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
    }

    bb17: {
        assert(const false, "`async fn` resumed after completion") -> bb17; // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
    }

    bb18: {
        unreachable;                     // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:20:17: 26:2
    }
}

promoted[0] in test::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:25:14: 25:20
    let mut _1: [&str; 2];               // in scope 0 at ui/async-await/interior-with-const-generic-expr.rs:25:14: 25:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:25:14: 25:20
                                         // mir::Constant
                                         // + span: ui/async-await/interior-with-const-generic-expr.rs:25:14: 25:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/async-await/interior-with-const-generic-expr.rs:25:14: 25:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:25:14: 25:20
        return;                          // scope 0 at ui/async-await/interior-with-const-generic-expr.rs:25:14: 25:20
    }
}
