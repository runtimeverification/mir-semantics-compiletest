// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issue-93648.rs:7:11: 7:11
    let mut _1: [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _2: [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    scope 1 {
    }

    bb0: {
        _2 = [generator@ui/async-await/issue-93648.rs:8:13: 13:6 (#0)]; // scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
                                         // generator
                                         // + def_id: DefId(0:4 ~ issue_93648[ec93]::main::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, (std::string::String,), [async block@ui/async-await/issue-93648.rs:12:9: 12:17], ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _1 = identity_future::<(), [async block@ui/async-await/issue-93648.rs:8:13: 13:6]>(move _2) -> bb1; // scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
                                         // mir::Constant
                                         // + span: ui/async-await/issue-93648.rs:8:13: 13:6
                                         // + literal: Const { ty: fn([async block@ui/async-await/issue-93648.rs:8:13: 13:6]) -> [async block@ui/async-await/issue-93648.rs:8:13: 13:6] {identity_future::<(), [async block@ui/async-await/issue-93648.rs:8:13: 13:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/async-await/issue-93648.rs:13:6: 13:7
    }

    bb2: {
        return;                          // scope 0 at ui/async-await/issue-93648.rs:14:2: 14:2
    }
}

fn main::{closure#0}(_1: Pin<&mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _24;          // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _3: std::string::String;     // in scope 0 at ui/async-await/issue-93648.rs:9:22: 9:35
    let _4: ();                          // in scope 0 at ui/async-await/issue-93648.rs:10:9: 10:28
    let mut _5: &mut std::string::String; // in scope 0 at ui/async-await/issue-93648.rs:10:9: 10:28
    let mut _6: &str;                    // in scope 0 at ui/async-await/issue-93648.rs:10:22: 10:27
    let _7: &str;                        // in scope 0 at ui/async-await/issue-93648.rs:10:22: 10:27
    let _8: ();                          // in scope 0 at ui/async-await/issue-93648.rs:11:9: 11:26
    let mut _9: (std::string::String,);  // in scope 0 at ui/async-await/issue-93648.rs:11:24: 11:25
    let mut _10: [async block@ui/async-await/issue-93648.rs:12:9: 12:17]; // in scope 0 at ui/async-await/issue-93648.rs:12:17: 12:23
    let mut _11: [async block@ui/async-await/issue-93648.rs:12:9: 12:17]; // in scope 0 at ui/async-await/issue-93648.rs:12:9: 12:17
    let mut _12: [async block@ui/async-await/issue-93648.rs:12:9: 12:17]; // in scope 0 at ui/async-await/issue-93648.rs:12:9: 12:17
    let mut _13: std::task::Poll<()>;    // in scope 0 at ui/async-await/issue-93648.rs:12:17: 12:23
    let mut _14: std::pin::Pin<&mut [async block@ui/async-await/issue-93648.rs:12:9: 12:17]>; // in scope 0 at ui/async-await/issue-93648.rs:12:17: 12:23
    let mut _15: &mut [async block@ui/async-await/issue-93648.rs:12:9: 12:17]; // in scope 0 at ui/async-await/issue-93648.rs:12:17: 12:23
    let mut _16: &mut [async block@ui/async-await/issue-93648.rs:12:9: 12:17]; // in scope 0 at ui/async-await/issue-93648.rs:12:17: 12:23
    let mut _17: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-93648.rs:12:9: 12:23
    let mut _18: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-93648.rs:12:9: 12:23
    let mut _19: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-93648.rs:12:17: 12:23
    let mut _20: isize;                  // in scope 0 at ui/async-await/issue-93648.rs:12:17: 12:23
    let mut _22: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-93648.rs:12:17: 12:23
    let mut _23: ();                     // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _24: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _25: u32;                    // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _26: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _27: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _28: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _29: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _30: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _31: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _32: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _33: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _34: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _35: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _36: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _37: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _38: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _39: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _40: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    let mut _41: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]; // in scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    scope 1 {
        debug s => (((*(_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6])) as variant#3).0: (std::string::String,)); // in scope 1 at ui/async-await/issue-93648.rs:9:13: 9:18
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6])) as variant#3).1: [async block@ui/async-await/issue-93648.rs:12:9: 12:17]); // in scope 2 at ui/async-await/issue-93648.rs:12:17: 12:23
            let _21: ();                 // in scope 2 at ui/async-await/issue-93648.rs:12:9: 12:23
            scope 3 {
            }
            scope 4 {
                debug result => _21;     // in scope 4 at ui/async-await/issue-93648.rs:12:9: 12:23
            }
        }
    }

    bb0: {
        _26 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]); // scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
        _25 = discriminant((*_26));      // scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
        switchInt(move _25) -> [0: bb1, 1: bb18, 2: bb17, 3: bb16, otherwise: bb19]; // scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    }

    bb1: {
        _24 = move _2;                   // scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
        _27 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]); // scope 0 at ui/async-await/issue-93648.rs:9:13: 9:18
        (((*_27) as variant#3).2: bool) = const false; // scope 0 at ui/async-await/issue-93648.rs:9:13: 9:18
        _3 = String::new() -> [return: bb2, unwind: bb13]; // scope 0 at ui/async-await/issue-93648.rs:9:22: 9:35
                                         // mir::Constant
                                         // + span: ui/async-await/issue-93648.rs:9:22: 9:33
                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(<ZST>) }
    }

    bb2: {
        _28 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]); // scope 0 at ui/async-await/issue-93648.rs:9:21: 9:37
        (((*_28) as variant#3).2: bool) = const true; // scope 0 at ui/async-await/issue-93648.rs:9:21: 9:37
        _29 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]); // scope 0 at ui/async-await/issue-93648.rs:9:21: 9:37
        (((*_29) as variant#3).0: (std::string::String,)) = (move _3,); // scope 0 at ui/async-await/issue-93648.rs:9:21: 9:37
        _30 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]); // scope 1 at ui/async-await/issue-93648.rs:10:9: 10:28
        _5 = &mut ((((*_30) as variant#3).0: (std::string::String,)).0: std::string::String); // scope 1 at ui/async-await/issue-93648.rs:10:9: 10:28
        _7 = const "abc";                // scope 1 at ui/async-await/issue-93648.rs:10:22: 10:27
                                         // mir::Constant
                                         // + span: ui/async-await/issue-93648.rs:10:22: 10:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/async-await/issue-93648.rs:10:22: 10:27
        _4 = String::push_str(move _5, move _6) -> [return: bb3, unwind: bb15]; // scope 1 at ui/async-await/issue-93648.rs:10:9: 10:28
                                         // mir::Constant
                                         // + span: ui/async-await/issue-93648.rs:10:13: 10:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, &'b str) {String::push_str}, val: Value(<ZST>) }
    }

    bb3: {
        _31 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]); // scope 1 at ui/async-await/issue-93648.rs:11:24: 11:25
        (((*_31) as variant#3).2: bool) = const false; // scope 1 at ui/async-await/issue-93648.rs:11:24: 11:25
        _32 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]); // scope 1 at ui/async-await/issue-93648.rs:11:24: 11:25
        _9 = move (((*_32) as variant#3).0: (std::string::String,)); // scope 1 at ui/async-await/issue-93648.rs:11:24: 11:25
        _8 = std::mem::drop::<(String,)>(move _9) -> [return: bb4, unwind: bb15]; // scope 1 at ui/async-await/issue-93648.rs:11:9: 11:26
                                         // mir::Constant
                                         // + span: ui/async-await/issue-93648.rs:11:9: 11:23
                                         // + literal: Const { ty: fn((String,)) {std::mem::drop::<(String,)>}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = [generator@ui/async-await/issue-93648.rs:12:9: 12:17 (#0)]; // scope 1 at ui/async-await/issue-93648.rs:12:9: 12:17
                                         // generator
                                         // + def_id: DefId(0:5 ~ issue_93648[ec93]::main::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _11 = identity_future::<(), [async block@ui/async-await/issue-93648.rs:12:9: 12:17]>(move _12) -> [return: bb5, unwind: bb15]; // scope 1 at ui/async-await/issue-93648.rs:12:9: 12:17
                                         // mir::Constant
                                         // + span: ui/async-await/issue-93648.rs:12:9: 12:17
                                         // + literal: Const { ty: fn([async block@ui/async-await/issue-93648.rs:12:9: 12:17]) -> [async block@ui/async-await/issue-93648.rs:12:9: 12:17] {identity_future::<(), [async block@ui/async-await/issue-93648.rs:12:9: 12:17]>}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = <[async block@ui/async-await/issue-93648.rs:12:9: 12:17] as IntoFuture>::into_future(move _11) -> [return: bb6, unwind: bb15]; // scope 1 at ui/async-await/issue-93648.rs:12:17: 12:23
                                         // mir::Constant
                                         // + span: ui/async-await/issue-93648.rs:12:17: 12:23
                                         // + literal: Const { ty: fn([async block@ui/async-await/issue-93648.rs:12:9: 12:17]) -> <[async block@ui/async-await/issue-93648.rs:12:9: 12:17] as IntoFuture>::IntoFuture {<[async block@ui/async-await/issue-93648.rs:12:9: 12:17] as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb6: {
        _33 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]); // scope 1 at ui/async-await/issue-93648.rs:12:17: 12:23
        (((*_33) as variant#3).1: [async block@ui/async-await/issue-93648.rs:12:9: 12:17]) = move _10; // scope 1 at ui/async-await/issue-93648.rs:12:17: 12:23
        goto -> bb7;                     // scope 2 at ui/async-await/issue-93648.rs:12:17: 12:23
    }

    bb7: {
        _34 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]); // scope 3 at ui/async-await/issue-93648.rs:12:17: 12:23
        _16 = &mut (((*_34) as variant#3).1: [async block@ui/async-await/issue-93648.rs:12:9: 12:17]); // scope 3 at ui/async-await/issue-93648.rs:12:17: 12:23
        _15 = &mut (*_16);               // scope 3 at ui/async-await/issue-93648.rs:12:17: 12:23
        _14 = Pin::<&mut [async block@ui/async-await/issue-93648.rs:12:9: 12:17]>::new_unchecked(move _15) -> [return: bb8, unwind: bb15]; // scope 3 at ui/async-await/issue-93648.rs:12:17: 12:23
                                         // mir::Constant
                                         // + span: ui/async-await/issue-93648.rs:12:17: 12:23
                                         // + literal: Const { ty: unsafe fn(&mut [async block@ui/async-await/issue-93648.rs:12:9: 12:17]) -> Pin<&mut [async block@ui/async-await/issue-93648.rs:12:9: 12:17]> {Pin::<&mut [async block@ui/async-await/issue-93648.rs:12:9: 12:17]>::new_unchecked}, val: Value(<ZST>) }
    }

    bb8: {
        _19 = _24;                       // scope 3 at ui/async-await/issue-93648.rs:12:17: 12:23
        _18 = move _19;                  // scope 3 at ui/async-await/issue-93648.rs:12:9: 12:23
        _17 = &mut (*_18);               // scope 3 at ui/async-await/issue-93648.rs:12:9: 12:23
        _13 = <[async block@ui/async-await/issue-93648.rs:12:9: 12:17] as Future>::poll(move _14, move _17) -> [return: bb9, unwind: bb15]; // scope 3 at ui/async-await/issue-93648.rs:12:17: 12:23
                                         // mir::Constant
                                         // + span: ui/async-await/issue-93648.rs:12:17: 12:23
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut [async block@ui/async-await/issue-93648.rs:12:9: 12:17]>, &'b mut Context<'c>) -> Poll<<[async block@ui/async-await/issue-93648.rs:12:9: 12:17] as Future>::Output> {<[async block@ui/async-await/issue-93648.rs:12:9: 12:17] as Future>::poll}, val: Value(<ZST>) }
    }

    bb9: {
        _20 = discriminant(_13);         // scope 2 at ui/async-await/issue-93648.rs:12:17: 12:23
        switchInt(move _20) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 2 at ui/async-await/issue-93648.rs:12:17: 12:23
    }

    bb10: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/issue-93648.rs:12:17: 12:23
        _35 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]); // scope 2 at ui/async-await/issue-93648.rs:12:17: 12:23
        discriminant((*_35)) = 3;        // scope 2 at ui/async-await/issue-93648.rs:12:17: 12:23
        return;                          // scope 2 at ui/async-await/issue-93648.rs:12:17: 12:23
    }

    bb11: {
        unreachable;                     // scope 2 at ui/async-await/issue-93648.rs:12:17: 12:23
    }

    bb12: {
        _21 = ((_13 as Ready).0: ());    // scope 2 at ui/async-await/issue-93648.rs:12:9: 12:23
        _23 = const ();                  // scope 0 at ui/async-await/issue-93648.rs:8:19: 13:6
        _36 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]); // scope 0 at ui/async-await/issue-93648.rs:13:5: 13:6
        (((*_36) as variant#3).2: bool) = const false; // scope 0 at ui/async-await/issue-93648.rs:13:5: 13:6
        _0 = Poll::<()>::Ready(move _23); // scope 0 at ui/async-await/issue-93648.rs:13:6: 13:6
        _37 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]); // scope 0 at ui/async-await/issue-93648.rs:13:6: 13:6
        discriminant((*_37)) = 1;        // scope 0 at ui/async-await/issue-93648.rs:13:6: 13:6
        return;                          // scope 0 at ui/async-await/issue-93648.rs:13:6: 13:6
    }

    bb13 (cleanup): {
        _38 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]); // scope 0 at ui/async-await/issue-93648.rs:13:5: 13:6
        (((*_38) as variant#3).2: bool) = const false; // scope 0 at ui/async-await/issue-93648.rs:13:5: 13:6
        _41 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]); // scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
        discriminant((*_41)) = 2;        // scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
        resume;                          // scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    }

    bb14 (cleanup): {
        _39 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]); // scope 0 at ui/async-await/issue-93648.rs:13:5: 13:6
        drop((((*_39) as variant#3).0: (std::string::String,))) -> bb13; // scope 0 at ui/async-await/issue-93648.rs:13:5: 13:6
    }

    bb15 (cleanup): {
        _40 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:8:13: 13:6]); // scope 0 at ui/async-await/issue-93648.rs:13:5: 13:6
        switchInt((((*_40) as variant#3).2: bool)) -> [0: bb13, otherwise: bb14]; // scope 0 at ui/async-await/issue-93648.rs:13:5: 13:6
    }

    bb16: {
        _22 = move _2;                   // scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
        _24 = move _22;                  // scope 2 at ui/async-await/issue-93648.rs:12:17: 12:23
        goto -> bb7;                     // scope 2 at ui/async-await/issue-93648.rs:12:17: 12:23
    }

    bb17: {
        assert(const false, "`async fn` resumed after panicking") -> bb17; // scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    }

    bb18: {
        assert(const false, "`async fn` resumed after completion") -> bb18; // scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    }

    bb19: {
        unreachable;                     // scope 0 at ui/async-await/issue-93648.rs:8:13: 13:6
    }
}

fn main::{closure#0}::{closure#0}(_1: Pin<&mut [async block@ui/async-await/issue-93648.rs:12:9: 12:17]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/issue-93648.rs:12:9: 12:17
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issue-93648.rs:12:9: 12:17
    let mut _3: ();                      // in scope 0 at ui/async-await/issue-93648.rs:12:9: 12:17
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-93648.rs:12:9: 12:17
    let mut _5: u32;                     // in scope 0 at ui/async-await/issue-93648.rs:12:9: 12:17
    let mut _6: &mut [async block@ui/async-await/issue-93648.rs:12:9: 12:17]; // in scope 0 at ui/async-await/issue-93648.rs:12:9: 12:17
    let mut _7: &mut [async block@ui/async-await/issue-93648.rs:12:9: 12:17]; // in scope 0 at ui/async-await/issue-93648.rs:12:9: 12:17

    bb0: {
        _6 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:12:9: 12:17]); // scope 0 at ui/async-await/issue-93648.rs:12:9: 12:17
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/issue-93648.rs:12:9: 12:17
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/issue-93648.rs:12:9: 12:17
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/issue-93648.rs:12:9: 12:17
        _3 = const ();                   // scope 0 at ui/async-await/issue-93648.rs:12:15: 12:17
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/issue-93648.rs:12:17: 12:17
        _7 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-93648.rs:12:9: 12:17]); // scope 0 at ui/async-await/issue-93648.rs:12:17: 12:17
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/issue-93648.rs:12:17: 12:17
        return;                          // scope 0 at ui/async-await/issue-93648.rs:12:17: 12:17
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/issue-93648.rs:12:9: 12:17
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/issue-93648.rs:12:9: 12:17
    }
}
