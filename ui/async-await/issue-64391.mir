// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn add(_1: u32, _2: u32) -> impl Future<Output = u32> {
    debug x => _1;                       // in scope 0 at ui/async-await/issue-64391.rs:10:14: 10:15
    debug y => _2;                       // in scope 0 at ui/async-await/issue-64391.rs:10:22: 10:23
    let mut _0: impl std::future::Future<Output = u32>; // return place in scope 0 at ui/async-await/issue-64391.rs:10:33: 10:36
    let mut _3: [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]; // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2

    bb0: {
        _3 = [generator@ui/async-await/issue-64391.rs:10:37: 12:2 (#0)] { x: _1, y: _2 }; // scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
                                         // generator
                                         // + def_id: DefId(0:4 ~ issue_64391[58b6]::add::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     u32,
                                         //     for<'a, 'b> {std::future::ResumeTy, u32, [async block@ui/async-await/issue-64391.rs:11:5: 11:20], ()},
                                         //     (u32, u32),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<u32, [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]>(move _3) -> bb1; // scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
                                         // mir::Constant
                                         // + span: ui/async-await/issue-64391.rs:10:37: 12:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]) -> [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2] {identity_future::<u32, [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issue-64391.rs:12:2: 12:2
    }
}

fn add::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]>, _2: &mut Context<'_>) -> Poll<u32> {
    debug _task_context => _19;          // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    debug x => ((*(_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2])).0: u32); // in scope 0 at ui/async-await/issue-64391.rs:10:14: 10:15
    debug y => ((*(_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2])).1: u32); // in scope 0 at ui/async-await/issue-64391.rs:10:22: 10:23
    let mut _0: std::task::Poll<u32>;    // return place in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    let mut _3: [async block@ui/async-await/issue-64391.rs:11:5: 11:20]; // in scope 0 at ui/async-await/issue-64391.rs:11:20: 11:26
    let mut _4: [async block@ui/async-await/issue-64391.rs:11:5: 11:20]; // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    let mut _5: [async block@ui/async-await/issue-64391.rs:11:5: 11:20]; // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    let mut _6: &u32;                    // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    let mut _7: &u32;                    // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    let mut _8: std::task::Poll<u32>;    // in scope 0 at ui/async-await/issue-64391.rs:11:20: 11:26
    let mut _9: std::pin::Pin<&mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]>; // in scope 0 at ui/async-await/issue-64391.rs:11:20: 11:26
    let mut _10: &mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]; // in scope 0 at ui/async-await/issue-64391.rs:11:20: 11:26
    let mut _11: &mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]; // in scope 0 at ui/async-await/issue-64391.rs:11:20: 11:26
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:26
    let mut _13: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:26
    let mut _14: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-64391.rs:11:20: 11:26
    let mut _15: isize;                  // in scope 0 at ui/async-await/issue-64391.rs:11:20: 11:26
    let mut _17: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-64391.rs:11:20: 11:26
    let mut _18: u32;                    // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    let mut _19: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    let mut _20: u32;                    // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    let mut _21: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]; // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    let mut _22: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]; // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    let mut _23: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]; // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    let mut _24: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]; // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    let mut _25: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]; // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    let mut _26: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]; // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    let mut _27: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]; // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    let mut _28: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]; // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    let mut _29: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]; // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    let mut _30: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]; // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    let mut _31: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]; // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    let mut _32: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]; // in scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    scope 1 {
        debug x => (((*(_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2])) as variant#3).0: u32); // in scope 1 at ui/async-await/issue-64391.rs:10:14: 10:15
        scope 2 {
            debug y => (((*(_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2])) as variant#3).1: u32); // in scope 2 at ui/async-await/issue-64391.rs:10:22: 10:23
            scope 3 {
                debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2])) as variant#3).2: [async block@ui/async-await/issue-64391.rs:11:5: 11:20]); // in scope 3 at ui/async-await/issue-64391.rs:11:20: 11:26
                let _16: u32;            // in scope 3 at ui/async-await/issue-64391.rs:11:5: 11:26
                scope 4 {
                }
                scope 5 {
                    debug result => _16; // in scope 5 at ui/async-await/issue-64391.rs:11:5: 11:26
                }
            }
        }
    }

    bb0: {
        _21 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]); // scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
        _20 = discriminant((*_21));      // scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
        switchInt(move _20) -> [0: bb1, 1: bb13, 2: bb12, 3: bb11, otherwise: bb14]; // scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    }

    bb1: {
        _19 = move _2;                   // scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]); // scope 0 at ui/async-await/issue-64391.rs:10:14: 10:15
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]); // scope 0 at ui/async-await/issue-64391.rs:10:14: 10:15
        (((*_22) as variant#3).0: u32) = ((*_23).0: u32); // scope 0 at ui/async-await/issue-64391.rs:10:14: 10:15
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]); // scope 1 at ui/async-await/issue-64391.rs:10:22: 10:23
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]); // scope 1 at ui/async-await/issue-64391.rs:10:22: 10:23
        (((*_24) as variant#3).1: u32) = ((*_25).1: u32); // scope 1 at ui/async-await/issue-64391.rs:10:22: 10:23
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]); // scope 2 at ui/async-await/issue-64391.rs:11:5: 11:20
        _6 = &(((*_26) as variant#3).0: u32); // scope 2 at ui/async-await/issue-64391.rs:11:5: 11:20
        _27 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]); // scope 2 at ui/async-await/issue-64391.rs:11:5: 11:20
        _7 = &(((*_27) as variant#3).1: u32); // scope 2 at ui/async-await/issue-64391.rs:11:5: 11:20
        _5 = [generator@ui/async-await/issue-64391.rs:11:5: 11:20 (#0)] { x: move _6, y: move _7 }; // scope 2 at ui/async-await/issue-64391.rs:11:5: 11:20
                                         // generator
                                         // + def_id: DefId(0:5 ~ issue_64391[58b6]::add::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     u32,
                                         //     {},
                                         //     (&u32, &u32),
                                         // ]
                                         // + movability: Static
        _4 = identity_future::<u32, [async block@ui/async-await/issue-64391.rs:11:5: 11:20]>(move _5) -> [return: bb2, unwind: bb10]; // scope 2 at ui/async-await/issue-64391.rs:11:5: 11:20
                                         // mir::Constant
                                         // + span: ui/async-await/issue-64391.rs:11:5: 11:20
                                         // + literal: Const { ty: fn([async block@ui/async-await/issue-64391.rs:11:5: 11:20]) -> [async block@ui/async-await/issue-64391.rs:11:5: 11:20] {identity_future::<u32, [async block@ui/async-await/issue-64391.rs:11:5: 11:20]>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <[async block@ui/async-await/issue-64391.rs:11:5: 11:20] as IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb10]; // scope 2 at ui/async-await/issue-64391.rs:11:20: 11:26
                                         // mir::Constant
                                         // + span: ui/async-await/issue-64391.rs:11:20: 11:26
                                         // + literal: Const { ty: fn([async block@ui/async-await/issue-64391.rs:11:5: 11:20]) -> <[async block@ui/async-await/issue-64391.rs:11:5: 11:20] as IntoFuture>::IntoFuture {<[async block@ui/async-await/issue-64391.rs:11:5: 11:20] as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]); // scope 2 at ui/async-await/issue-64391.rs:11:20: 11:26
        (((*_28) as variant#3).2: [async block@ui/async-await/issue-64391.rs:11:5: 11:20]) = move _3; // scope 2 at ui/async-await/issue-64391.rs:11:20: 11:26
        goto -> bb4;                     // scope 3 at ui/async-await/issue-64391.rs:11:20: 11:26
    }

    bb4: {
        _29 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]); // scope 4 at ui/async-await/issue-64391.rs:11:20: 11:26
        _11 = &mut (((*_29) as variant#3).2: [async block@ui/async-await/issue-64391.rs:11:5: 11:20]); // scope 4 at ui/async-await/issue-64391.rs:11:20: 11:26
        _10 = &mut (*_11);               // scope 4 at ui/async-await/issue-64391.rs:11:20: 11:26
        _9 = Pin::<&mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]>::new_unchecked(move _10) -> [return: bb5, unwind: bb10]; // scope 4 at ui/async-await/issue-64391.rs:11:20: 11:26
                                         // mir::Constant
                                         // + span: ui/async-await/issue-64391.rs:11:20: 11:26
                                         // + literal: Const { ty: unsafe fn(&mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]) -> Pin<&mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]> {Pin::<&mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = _19;                       // scope 4 at ui/async-await/issue-64391.rs:11:20: 11:26
        _13 = move _14;                  // scope 4 at ui/async-await/issue-64391.rs:11:5: 11:26
        _12 = &mut (*_13);               // scope 4 at ui/async-await/issue-64391.rs:11:5: 11:26
        _8 = <[async block@ui/async-await/issue-64391.rs:11:5: 11:20] as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb10]; // scope 4 at ui/async-await/issue-64391.rs:11:20: 11:26
                                         // mir::Constant
                                         // + span: ui/async-await/issue-64391.rs:11:20: 11:26
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]>, &'b mut Context<'c>) -> Poll<<[async block@ui/async-await/issue-64391.rs:11:5: 11:20] as Future>::Output> {<[async block@ui/async-await/issue-64391.rs:11:5: 11:20] as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = discriminant(_8);          // scope 3 at ui/async-await/issue-64391.rs:11:20: 11:26
        switchInt(move _15) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 3 at ui/async-await/issue-64391.rs:11:20: 11:26
    }

    bb7: {
        _0 = Poll::<u32>::Pending;       // scope 3 at ui/async-await/issue-64391.rs:11:20: 11:26
        _30 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]); // scope 3 at ui/async-await/issue-64391.rs:11:20: 11:26
        discriminant((*_30)) = 3;        // scope 3 at ui/async-await/issue-64391.rs:11:20: 11:26
        return;                          // scope 3 at ui/async-await/issue-64391.rs:11:20: 11:26
    }

    bb8: {
        unreachable;                     // scope 3 at ui/async-await/issue-64391.rs:11:20: 11:26
    }

    bb9: {
        _16 = ((_8 as Ready).0: u32);    // scope 3 at ui/async-await/issue-64391.rs:11:5: 11:26
        _18 = _16;                       // scope 5 at ui/async-await/issue-64391.rs:11:5: 11:26
        _0 = Poll::<u32>::Ready(move _18); // scope 0 at ui/async-await/issue-64391.rs:12:2: 12:2
        _31 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]); // scope 0 at ui/async-await/issue-64391.rs:12:2: 12:2
        discriminant((*_31)) = 1;        // scope 0 at ui/async-await/issue-64391.rs:12:2: 12:2
        return;                          // scope 0 at ui/async-await/issue-64391.rs:12:2: 12:2
    }

    bb10 (cleanup): {
        _32 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-64391.rs:10:37: 12:2]); // scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
        discriminant((*_32)) = 2;        // scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
        resume;                          // scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    }

    bb11: {
        _17 = move _2;                   // scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
        _19 = move _17;                  // scope 3 at ui/async-await/issue-64391.rs:11:20: 11:26
        goto -> bb4;                     // scope 3 at ui/async-await/issue-64391.rs:11:20: 11:26
    }

    bb12: {
        assert(const false, "`async fn` resumed after panicking") -> bb12; // scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    }

    bb13: {
        assert(const false, "`async fn` resumed after completion") -> bb13; // scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    }

    bb14: {
        unreachable;                     // scope 0 at ui/async-await/issue-64391.rs:10:37: 12:2
    }
}

fn add::{closure#0}::{closure#0}(_1: Pin<&mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]>, _2: &mut Context<'_>) -> Poll<u32> {
    debug _task_context => _9;           // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    debug x => (*((*(_1.0: &mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20])).0: &u32)); // in scope 0 at ui/async-await/issue-64391.rs:10:14: 10:15
    debug y => (*((*(_1.0: &mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20])).1: &u32)); // in scope 0 at ui/async-await/issue-64391.rs:10:22: 10:23
    let mut _0: std::task::Poll<u32>;    // return place in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    let mut _3: u32;                     // in scope 0 at ui/async-await/issue-64391.rs:11:13: 11:14
    let mut _4: u32;                     // in scope 0 at ui/async-await/issue-64391.rs:11:17: 11:18
    let mut _5: (u32, bool);             // in scope 0 at ui/async-await/issue-64391.rs:11:13: 11:18
    let mut _6: &u32;                    // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    let mut _7: &u32;                    // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    let mut _8: u32;                     // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    let mut _9: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    let mut _10: u32;                    // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    let mut _11: &mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]; // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    let mut _12: &mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]; // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    let mut _13: &mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]; // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    let mut _14: &mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]; // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    let mut _15: &mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]; // in scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20

    bb0: {
        _11 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]); // scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
        _10 = discriminant((*_11));      // scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
        switchInt(move _10) -> [0: bb1, 1: bb5, 2: bb4, otherwise: bb6]; // scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    }

    bb1: {
        _9 = move _2;                    // scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
        _12 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]); // scope 0 at ui/async-await/issue-64391.rs:11:13: 11:14
        _6 = deref_copy ((*_12).0: &u32); // scope 0 at ui/async-await/issue-64391.rs:11:13: 11:14
        _3 = (*_6);                      // scope 0 at ui/async-await/issue-64391.rs:11:13: 11:14
        _13 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]); // scope 0 at ui/async-await/issue-64391.rs:11:17: 11:18
        _7 = deref_copy ((*_13).1: &u32); // scope 0 at ui/async-await/issue-64391.rs:11:17: 11:18
        _4 = (*_7);                      // scope 0 at ui/async-await/issue-64391.rs:11:17: 11:18
        _5 = CheckedAdd(_3, _4);         // scope 0 at ui/async-await/issue-64391.rs:11:13: 11:18
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _4) -> [success: bb2, unwind: bb3]; // scope 0 at ui/async-await/issue-64391.rs:11:13: 11:18
    }

    bb2: {
        _8 = move (_5.0: u32);           // scope 0 at ui/async-await/issue-64391.rs:11:13: 11:18
        _0 = Poll::<u32>::Ready(move _8); // scope 0 at ui/async-await/issue-64391.rs:11:20: 11:20
        _14 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]); // scope 0 at ui/async-await/issue-64391.rs:11:20: 11:20
        discriminant((*_14)) = 1;        // scope 0 at ui/async-await/issue-64391.rs:11:20: 11:20
        return;                          // scope 0 at ui/async-await/issue-64391.rs:11:20: 11:20
    }

    bb3 (cleanup): {
        _15 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-64391.rs:11:5: 11:20]); // scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
        discriminant((*_15)) = 2;        // scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
        resume;                          // scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    }

    bb4: {
        assert(const false, "`async fn` resumed after panicking") -> bb4; // scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    }

    bb5: {
        assert(const false, "`async fn` resumed after completion") -> bb5; // scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    }

    bb6: {
        unreachable;                     // scope 0 at ui/async-await/issue-64391.rs:11:5: 11:20
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issue-64391.rs:14:11: 14:11

    bb0: {
        return;                          // scope 0 at ui/async-await/issue-64391.rs:14:14: 14:14
    }
}
