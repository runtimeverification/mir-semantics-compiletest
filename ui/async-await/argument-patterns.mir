// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a(_1: u32, _2: Vec<u32>) -> impl Future<Output = ()> {
    debug n => _1;                       // in scope 0 at ui/async-await/argument-patterns.rs:8:12: 8:13
    debug vec => _2;                     // in scope 0 at ui/async-await/argument-patterns.rs:8:20: 8:27
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/argument-patterns.rs:8:32: 8:32
    let mut _3: [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2]; // in scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2

    bb0: {
        _3 = [generator@ui/async-await/argument-patterns.rs:8:32: 10:2 (#0)] { n: _1, vec: move _2 }; // scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
                                         // generator
                                         // + def_id: DefId(0:5 ~ argument_patterns[2b61]::a::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (u32, std::vec::Vec<u32>),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2]>(move _3) -> bb1; // scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
                                         // mir::Constant
                                         // + span: ui/async-await/argument-patterns.rs:8:32: 10:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2]) -> [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2] {identity_future::<(), [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/argument-patterns.rs:10:2: 10:2
    }
}

fn a::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _9;           // in scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
    debug n => ((*(_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2])).0: u32); // in scope 0 at ui/async-await/argument-patterns.rs:8:12: 8:13
    debug vec => ((*(_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2])).1: std::vec::Vec<u32>); // in scope 0 at ui/async-await/argument-patterns.rs:8:20: 8:27
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
    let _3: u32;                         // in scope 0 at ui/async-await/argument-patterns.rs:8:12: 8:13
    let _5: ();                          // in scope 0 at ui/async-await/argument-patterns.rs:9:5: 9:16
    let mut _6: &mut std::vec::Vec<u32>; // in scope 0 at ui/async-await/argument-patterns.rs:9:5: 9:16
    let mut _7: u32;                     // in scope 0 at ui/async-await/argument-patterns.rs:9:14: 9:15
    let mut _8: ();                      // in scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
    let mut _9: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
    let mut _10: u32;                    // in scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
    let mut _11: &mut [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2]; // in scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
    let mut _12: &mut [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2]; // in scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
    let mut _13: &mut [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2]; // in scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
    let mut _14: &mut [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2]; // in scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
    let mut _15: &mut [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2]; // in scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
    scope 1 {
        debug n => _3;                   // in scope 1 at ui/async-await/argument-patterns.rs:8:12: 8:13
        let mut _4: std::vec::Vec<u32>;  // in scope 1 at ui/async-await/argument-patterns.rs:8:20: 8:27
        scope 2 {
            debug vec => _4;             // in scope 2 at ui/async-await/argument-patterns.rs:8:20: 8:27
        }
    }

    bb0: {
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2]); // scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
        _10 = discriminant((*_11));      // scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
        switchInt(move _10) -> [0: bb1, 1: bb7, 2: bb6, otherwise: bb8]; // scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
    }

    bb1: {
        _9 = move _2;                    // scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
        _12 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2]); // scope 0 at ui/async-await/argument-patterns.rs:8:12: 8:13
        _3 = ((*_12).0: u32);            // scope 0 at ui/async-await/argument-patterns.rs:8:12: 8:13
        _13 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2]); // scope 1 at ui/async-await/argument-patterns.rs:8:20: 8:27
        _4 = move ((*_13).1: std::vec::Vec<u32>); // scope 1 at ui/async-await/argument-patterns.rs:8:20: 8:27
        _6 = &mut _4;                    // scope 2 at ui/async-await/argument-patterns.rs:9:5: 9:16
        _7 = _3;                         // scope 2 at ui/async-await/argument-patterns.rs:9:14: 9:15
        _5 = Vec::<u32>::push(move _6, move _7) -> [return: bb2, unwind: bb4]; // scope 2 at ui/async-await/argument-patterns.rs:9:5: 9:16
                                         // mir::Constant
                                         // + span: ui/async-await/argument-patterns.rs:9:9: 9:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u32>, u32) {Vec::<u32>::push}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const ();                   // scope 2 at ui/async-await/argument-patterns.rs:8:32: 10:2
        drop(_4) -> [return: bb3, unwind: bb5]; // scope 1 at ui/async-await/argument-patterns.rs:10:1: 10:2
    }

    bb3: {
        _0 = Poll::<()>::Ready(move _8); // scope 0 at ui/async-await/argument-patterns.rs:10:2: 10:2
        _14 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2]); // scope 0 at ui/async-await/argument-patterns.rs:10:2: 10:2
        discriminant((*_14)) = 1;        // scope 0 at ui/async-await/argument-patterns.rs:10:2: 10:2
        return;                          // scope 0 at ui/async-await/argument-patterns.rs:10:2: 10:2
    }

    bb4 (cleanup): {
        drop(_4) -> bb5;                 // scope 1 at ui/async-await/argument-patterns.rs:10:1: 10:2
    }

    bb5 (cleanup): {
        _15 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:8:32: 10:2]); // scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
        discriminant((*_15)) = 2;        // scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
        resume;                          // scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
    }

    bb6: {
        assert(const false, "`async fn` resumed after panicking") -> bb6; // scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
    }

    bb7: {
        assert(const false, "`async fn` resumed after completion") -> bb7; // scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
    }

    bb8: {
        unreachable;                     // scope 0 at ui/async-await/argument-patterns.rs:8:32: 10:2
    }
}

fn b(_1: u32, _2: Vec<u32>) -> impl Future<Output = ()> {
    debug n => _1;                       // in scope 0 at ui/async-await/argument-patterns.rs:12:12: 12:13
    debug vec => _2;                     // in scope 0 at ui/async-await/argument-patterns.rs:12:20: 12:31
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/argument-patterns.rs:12:36: 12:36
    let mut _3: [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2]; // in scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2

    bb0: {
        _3 = [generator@ui/async-await/argument-patterns.rs:12:36: 14:2 (#0)] { n: _1, vec: move _2 }; // scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
                                         // generator
                                         // + def_id: DefId(0:7 ~ argument_patterns[2b61]::b::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (u32, std::vec::Vec<u32>),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2]>(move _3) -> bb1; // scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
                                         // mir::Constant
                                         // + span: ui/async-await/argument-patterns.rs:12:36: 14:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2]) -> [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2] {identity_future::<(), [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/argument-patterns.rs:14:2: 14:2
    }
}

fn b::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _10;          // in scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
    debug n => ((*(_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2])).0: u32); // in scope 0 at ui/async-await/argument-patterns.rs:12:12: 12:13
    debug vec => ((*(_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2])).1: std::vec::Vec<u32>); // in scope 0 at ui/async-await/argument-patterns.rs:12:20: 12:31
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
    let _3: u32;                         // in scope 0 at ui/async-await/argument-patterns.rs:12:12: 12:13
    let _6: ();                          // in scope 0 at ui/async-await/argument-patterns.rs:13:5: 13:16
    let mut _7: &mut std::vec::Vec<u32>; // in scope 0 at ui/async-await/argument-patterns.rs:13:5: 13:16
    let mut _8: u32;                     // in scope 0 at ui/async-await/argument-patterns.rs:13:14: 13:15
    let mut _9: ();                      // in scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
    let mut _11: u32;                    // in scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
    let mut _12: &mut [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2]; // in scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
    let mut _13: &mut [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2]; // in scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
    let mut _14: &mut [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2]; // in scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
    let mut _15: &mut [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2]; // in scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
    let mut _16: &mut [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2]; // in scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
    scope 1 {
        debug n => _3;                   // in scope 1 at ui/async-await/argument-patterns.rs:12:12: 12:13
        let mut _4: std::vec::Vec<u32>;  // in scope 1 at ui/async-await/argument-patterns.rs:12:20: 12:31
        scope 2 {
            debug vec => _4;             // in scope 2 at ui/async-await/argument-patterns.rs:12:20: 12:31
            let _5: &mut std::vec::Vec<u32>; // in scope 2 at ui/async-await/argument-patterns.rs:12:20: 12:31
            scope 3 {
                debug vec => _5;         // in scope 3 at ui/async-await/argument-patterns.rs:12:20: 12:31
            }
        }
    }

    bb0: {
        _12 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2]); // scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
        _11 = discriminant((*_12));      // scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
        switchInt(move _11) -> [0: bb1, 1: bb7, 2: bb6, otherwise: bb8]; // scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
    }

    bb1: {
        _10 = move _2;                   // scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
        _13 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2]); // scope 0 at ui/async-await/argument-patterns.rs:12:12: 12:13
        _3 = ((*_13).0: u32);            // scope 0 at ui/async-await/argument-patterns.rs:12:12: 12:13
        _14 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2]); // scope 1 at ui/async-await/argument-patterns.rs:12:20: 12:31
        _4 = move ((*_14).1: std::vec::Vec<u32>); // scope 1 at ui/async-await/argument-patterns.rs:12:20: 12:31
        _5 = &mut _4;                    // scope 2 at ui/async-await/argument-patterns.rs:12:20: 12:31
        _7 = &mut (*_5);                 // scope 3 at ui/async-await/argument-patterns.rs:13:5: 13:16
        _8 = _3;                         // scope 3 at ui/async-await/argument-patterns.rs:13:14: 13:15
        _6 = Vec::<u32>::push(move _7, move _8) -> [return: bb2, unwind: bb4]; // scope 3 at ui/async-await/argument-patterns.rs:13:5: 13:16
                                         // mir::Constant
                                         // + span: ui/async-await/argument-patterns.rs:13:9: 13:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u32>, u32) {Vec::<u32>::push}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = const ();                   // scope 3 at ui/async-await/argument-patterns.rs:12:36: 14:2
        drop(_4) -> [return: bb3, unwind: bb5]; // scope 1 at ui/async-await/argument-patterns.rs:14:1: 14:2
    }

    bb3: {
        _0 = Poll::<()>::Ready(move _9); // scope 0 at ui/async-await/argument-patterns.rs:14:2: 14:2
        _15 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2]); // scope 0 at ui/async-await/argument-patterns.rs:14:2: 14:2
        discriminant((*_15)) = 1;        // scope 0 at ui/async-await/argument-patterns.rs:14:2: 14:2
        return;                          // scope 0 at ui/async-await/argument-patterns.rs:14:2: 14:2
    }

    bb4 (cleanup): {
        drop(_4) -> bb5;                 // scope 1 at ui/async-await/argument-patterns.rs:14:1: 14:2
    }

    bb5 (cleanup): {
        _16 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:12:36: 14:2]); // scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
        discriminant((*_16)) = 2;        // scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
        resume;                          // scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
    }

    bb6: {
        assert(const false, "`async fn` resumed after panicking") -> bb6; // scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
    }

    bb7: {
        assert(const false, "`async fn` resumed after completion") -> bb7; // scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
    }

    bb8: {
        unreachable;                     // scope 0 at ui/async-await/argument-patterns.rs:12:36: 14:2
    }
}

fn c(_1: Vec<u32>) -> impl Future<Output = ()> {
    debug vec => _1;                     // in scope 0 at ui/async-await/argument-patterns.rs:16:12: 16:19
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/argument-patterns.rs:16:24: 16:24
    let mut _2: [async fn body@ui/async-await/argument-patterns.rs:16:24: 18:2]; // in scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2

    bb0: {
        _2 = [generator@ui/async-await/argument-patterns.rs:16:24: 18:2 (#0)] { vec: move _1 }; // scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
                                         // generator
                                         // + def_id: DefId(0:9 ~ argument_patterns[2b61]::c::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (std::vec::Vec<u32>,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/argument-patterns.rs:16:24: 18:2]>(move _2) -> bb1; // scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
                                         // mir::Constant
                                         // + span: ui/async-await/argument-patterns.rs:16:24: 18:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/argument-patterns.rs:16:24: 18:2]) -> [async fn body@ui/async-await/argument-patterns.rs:16:24: 18:2] {identity_future::<(), [async fn body@ui/async-await/argument-patterns.rs:16:24: 18:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/argument-patterns.rs:18:2: 18:2
    }
}

fn c::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/argument-patterns.rs:16:24: 18:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _13;          // in scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
    debug vec => ((*(_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:16:24: 18:2])).0: std::vec::Vec<u32>); // in scope 0 at ui/async-await/argument-patterns.rs:16:12: 16:19
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
    let mut _3: std::vec::Vec<u32>;      // in scope 0 at ui/async-await/argument-patterns.rs:16:12: 16:19
    let _5: bool;                        // in scope 0 at ui/async-await/argument-patterns.rs:17:5: 17:21
    let mut _6: &[u32];                  // in scope 0 at ui/async-await/argument-patterns.rs:17:5: 17:21
    let _7: &[u32];                      // in scope 0 at ui/async-await/argument-patterns.rs:17:5: 17:21
    let mut _8: &std::vec::Vec<u32>;     // in scope 0 at ui/async-await/argument-patterns.rs:17:5: 17:21
    let mut _9: &u32;                    // in scope 0 at ui/async-await/argument-patterns.rs:17:18: 17:20
    let _10: &u32;                       // in scope 0 at ui/async-await/argument-patterns.rs:17:18: 17:20
    let mut _12: ();                     // in scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
    let mut _13: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
    let mut _14: u32;                    // in scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
    let mut _15: &mut [async fn body@ui/async-await/argument-patterns.rs:16:24: 18:2]; // in scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
    let mut _16: &mut [async fn body@ui/async-await/argument-patterns.rs:16:24: 18:2]; // in scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
    let mut _17: &mut [async fn body@ui/async-await/argument-patterns.rs:16:24: 18:2]; // in scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
    let mut _18: &mut [async fn body@ui/async-await/argument-patterns.rs:16:24: 18:2]; // in scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
    scope 1 {
        debug vec => _3;                 // in scope 1 at ui/async-await/argument-patterns.rs:16:12: 16:19
        let _4: &std::vec::Vec<u32>;     // in scope 1 at ui/async-await/argument-patterns.rs:16:12: 16:19
        scope 2 {
            debug vec => _4;             // in scope 2 at ui/async-await/argument-patterns.rs:16:12: 16:19
            let mut _11: &u32;           // in scope 2 at ui/async-await/argument-patterns.rs:17:18: 17:20
        }
    }

    bb0: {
        _15 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:16:24: 18:2]); // scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
        _14 = discriminant((*_15));      // scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
        switchInt(move _14) -> [0: bb1, 1: bb8, 2: bb7, otherwise: bb9]; // scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
    }

    bb1: {
        _13 = move _2;                   // scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
        _16 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:16:24: 18:2]); // scope 0 at ui/async-await/argument-patterns.rs:16:12: 16:19
        _3 = move ((*_16).0: std::vec::Vec<u32>); // scope 0 at ui/async-await/argument-patterns.rs:16:12: 16:19
        _4 = &_3;                        // scope 1 at ui/async-await/argument-patterns.rs:16:12: 16:19
        _8 = _4;                         // scope 2 at ui/async-await/argument-patterns.rs:17:5: 17:21
        _7 = <Vec<u32> as Deref>::deref(move _8) -> [return: bb2, unwind: bb5]; // scope 2 at ui/async-await/argument-patterns.rs:17:5: 17:21
                                         // mir::Constant
                                         // + span: ui/async-await/argument-patterns.rs:17:5: 17:21
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u32>) -> &'a <Vec<u32> as Deref>::Target {<Vec<u32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = _7;                         // scope 2 at ui/async-await/argument-patterns.rs:17:5: 17:21
        _11 = const _;                   // scope 2 at ui/async-await/argument-patterns.rs:17:18: 17:20
                                         // mir::Constant
                                         // + span: ui/async-await/argument-patterns.rs:17:18: 17:20
                                         // + literal: Const { ty: &u32, val: Unevaluated(c::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[0])) }
        _10 = _11;                       // scope 2 at ui/async-await/argument-patterns.rs:17:18: 17:20
        _9 = _10;                        // scope 2 at ui/async-await/argument-patterns.rs:17:18: 17:20
        _5 = core::slice::<impl [u32]>::contains(move _6, move _9) -> [return: bb3, unwind: bb5]; // scope 2 at ui/async-await/argument-patterns.rs:17:5: 17:21
                                         // mir::Constant
                                         // + span: ui/async-await/argument-patterns.rs:17:9: 17:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u32], &'b u32) -> bool {core::slice::<impl [u32]>::contains}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = const ();                  // scope 2 at ui/async-await/argument-patterns.rs:16:24: 18:2
        drop(_3) -> [return: bb4, unwind: bb6]; // scope 0 at ui/async-await/argument-patterns.rs:18:1: 18:2
    }

    bb4: {
        _0 = Poll::<()>::Ready(move _12); // scope 0 at ui/async-await/argument-patterns.rs:18:2: 18:2
        _17 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:16:24: 18:2]); // scope 0 at ui/async-await/argument-patterns.rs:18:2: 18:2
        discriminant((*_17)) = 1;        // scope 0 at ui/async-await/argument-patterns.rs:18:2: 18:2
        return;                          // scope 0 at ui/async-await/argument-patterns.rs:18:2: 18:2
    }

    bb5 (cleanup): {
        drop(_3) -> bb6;                 // scope 0 at ui/async-await/argument-patterns.rs:18:1: 18:2
    }

    bb6 (cleanup): {
        _18 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:16:24: 18:2]); // scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
        discriminant((*_18)) = 2;        // scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
        resume;                          // scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
    }

    bb7: {
        assert(const false, "`async fn` resumed after panicking") -> bb7; // scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
    }

    bb8: {
        assert(const false, "`async fn` resumed after completion") -> bb8; // scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
    }

    bb9: {
        unreachable;                     // scope 0 at ui/async-await/argument-patterns.rs:16:24: 18:2
    }
}

promoted[0] in c::{closure#0}: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/async-await/argument-patterns.rs:17:18: 17:20
    let mut _1: u32;                     // in scope 0 at ui/async-await/argument-patterns.rs:17:19: 17:20

    bb0: {
        _1 = const 0_u32;                // scope 0 at ui/async-await/argument-patterns.rs:17:19: 17:20
        _0 = &_1;                        // scope 0 at ui/async-await/argument-patterns.rs:17:18: 17:20
        return;                          // scope 0 at ui/async-await/argument-patterns.rs:17:18: 17:20
    }
}

fn d(_1: (Vec<u32>, Vec<u32>)) -> impl Future<Output = ()> {
    debug __arg0 => _1;                  // in scope 0 at ui/async-await/argument-patterns.rs:20:12: 20:22
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/argument-patterns.rs:20:32: 20:32
    let mut _2: [async fn body@ui/async-await/argument-patterns.rs:20:32: 22:2]; // in scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2

    bb0: {
        _2 = [generator@ui/async-await/argument-patterns.rs:20:32: 22:2 (#0)] { __arg0: move _1 }; // scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
                                         // generator
                                         // + def_id: DefId(0:11 ~ argument_patterns[2b61]::d::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     ((std::vec::Vec<u32>, std::vec::Vec<u32>),),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/argument-patterns.rs:20:32: 22:2]>(move _2) -> bb1; // scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
                                         // mir::Constant
                                         // + span: ui/async-await/argument-patterns.rs:20:32: 22:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/argument-patterns.rs:20:32: 22:2]) -> [async fn body@ui/async-await/argument-patterns.rs:20:32: 22:2] {identity_future::<(), [async fn body@ui/async-await/argument-patterns.rs:20:32: 22:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/argument-patterns.rs:22:2: 22:2
    }
}

fn d::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/argument-patterns.rs:20:32: 22:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _9;           // in scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
    debug __arg0 => ((*(_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:20:32: 22:2])).0: (std::vec::Vec<u32>, std::vec::Vec<u32>)); // in scope 0 at ui/async-await/argument-patterns.rs:20:12: 20:22
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
    let mut _3: (std::vec::Vec<u32>, std::vec::Vec<u32>); // in scope 0 at ui/async-await/argument-patterns.rs:20:12: 20:22
    let _6: ();                          // in scope 0 at ui/async-await/argument-patterns.rs:21:5: 21:14
    let mut _7: &mut std::vec::Vec<u32>; // in scope 0 at ui/async-await/argument-patterns.rs:21:5: 21:14
    let mut _8: ();                      // in scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
    let mut _9: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
    let mut _10: u32;                    // in scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
    let mut _11: &mut [async fn body@ui/async-await/argument-patterns.rs:20:32: 22:2]; // in scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
    let mut _12: &mut [async fn body@ui/async-await/argument-patterns.rs:20:32: 22:2]; // in scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
    let mut _13: &mut [async fn body@ui/async-await/argument-patterns.rs:20:32: 22:2]; // in scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
    let mut _14: &mut [async fn body@ui/async-await/argument-patterns.rs:20:32: 22:2]; // in scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
    scope 1 {
        debug __arg0 => _3;              // in scope 1 at ui/async-await/argument-patterns.rs:20:12: 20:22
        let _4: std::vec::Vec<u32>;      // in scope 1 at ui/async-await/argument-patterns.rs:20:13: 20:14
        let mut _5: std::vec::Vec<u32>;  // in scope 1 at ui/async-await/argument-patterns.rs:20:16: 20:21
        scope 2 {
            debug a => _4;               // in scope 2 at ui/async-await/argument-patterns.rs:20:13: 20:14
            debug b => _5;               // in scope 2 at ui/async-await/argument-patterns.rs:20:16: 20:21
        }
    }

    bb0: {
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:20:32: 22:2]); // scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
        _10 = discriminant((*_11));      // scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
        switchInt(move _10) -> [0: bb1, 1: bb9, 2: bb8, otherwise: bb10]; // scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
    }

    bb1: {
        _9 = move _2;                    // scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
        _12 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:20:32: 22:2]); // scope 0 at ui/async-await/argument-patterns.rs:20:12: 20:22
        _3 = move ((*_12).0: (std::vec::Vec<u32>, std::vec::Vec<u32>)); // scope 0 at ui/async-await/argument-patterns.rs:20:12: 20:22
        _4 = move (_3.0: std::vec::Vec<u32>); // scope 1 at ui/async-await/argument-patterns.rs:20:13: 20:14
        _5 = move (_3.1: std::vec::Vec<u32>); // scope 1 at ui/async-await/argument-patterns.rs:20:16: 20:21
        _7 = &mut _5;                    // scope 2 at ui/async-await/argument-patterns.rs:21:5: 21:14
        _6 = Vec::<u32>::push(move _7, const 1_u32) -> [return: bb2, unwind: bb5]; // scope 2 at ui/async-await/argument-patterns.rs:21:5: 21:14
                                         // mir::Constant
                                         // + span: ui/async-await/argument-patterns.rs:21:7: 21:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u32>, u32) {Vec::<u32>::push}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const ();                   // scope 2 at ui/async-await/argument-patterns.rs:20:32: 22:2
        drop(_5) -> [return: bb3, unwind: bb6]; // scope 1 at ui/async-await/argument-patterns.rs:22:1: 22:2
    }

    bb3: {
        drop(_4) -> [return: bb4, unwind: bb7]; // scope 1 at ui/async-await/argument-patterns.rs:22:1: 22:2
    }

    bb4: {
        _0 = Poll::<()>::Ready(move _8); // scope 0 at ui/async-await/argument-patterns.rs:22:2: 22:2
        _13 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:20:32: 22:2]); // scope 0 at ui/async-await/argument-patterns.rs:22:2: 22:2
        discriminant((*_13)) = 1;        // scope 0 at ui/async-await/argument-patterns.rs:22:2: 22:2
        return;                          // scope 0 at ui/async-await/argument-patterns.rs:22:2: 22:2
    }

    bb5 (cleanup): {
        drop(_5) -> bb6;                 // scope 1 at ui/async-await/argument-patterns.rs:22:1: 22:2
    }

    bb6 (cleanup): {
        drop(_4) -> bb7;                 // scope 1 at ui/async-await/argument-patterns.rs:22:1: 22:2
    }

    bb7 (cleanup): {
        _14 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:20:32: 22:2]); // scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
        discriminant((*_14)) = 2;        // scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
        resume;                          // scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
    }

    bb8: {
        assert(const false, "`async fn` resumed after panicking") -> bb8; // scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
    }

    bb9: {
        assert(const false, "`async fn` resumed after completion") -> bb9; // scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
    }

    bb10: {
        unreachable;                     // scope 0 at ui/async-await/argument-patterns.rs:20:32: 22:2
    }
}

fn f(_1: (Vec<u32>, Vec<u32>)) -> impl Future<Output = ()> {
    debug __arg0 => _1;                  // in scope 0 at ui/async-await/argument-patterns.rs:24:12: 24:30
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:40
    let mut _2: [async fn body@ui/async-await/argument-patterns.rs:24:40: 24:42]; // in scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42

    bb0: {
        _2 = [generator@ui/async-await/argument-patterns.rs:24:40: 24:42 (#0)] { __arg0: move _1 }; // scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
                                         // generator
                                         // + def_id: DefId(0:13 ~ argument_patterns[2b61]::f::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     ((std::vec::Vec<u32>, std::vec::Vec<u32>),),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/argument-patterns.rs:24:40: 24:42]>(move _2) -> bb1; // scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
                                         // mir::Constant
                                         // + span: ui/async-await/argument-patterns.rs:24:40: 24:42
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/argument-patterns.rs:24:40: 24:42]) -> [async fn body@ui/async-await/argument-patterns.rs:24:40: 24:42] {identity_future::<(), [async fn body@ui/async-await/argument-patterns.rs:24:40: 24:42]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/argument-patterns.rs:24:42: 24:42
    }
}

fn f::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/argument-patterns.rs:24:40: 24:42]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _7;           // in scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
    debug __arg0 => ((*(_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:24:40: 24:42])).0: (std::vec::Vec<u32>, std::vec::Vec<u32>)); // in scope 0 at ui/async-await/argument-patterns.rs:24:12: 24:30
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
    let mut _3: (std::vec::Vec<u32>, std::vec::Vec<u32>); // in scope 0 at ui/async-await/argument-patterns.rs:24:12: 24:30
    let mut _6: ();                      // in scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
    let mut _7: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
    let mut _8: u32;                     // in scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
    let mut _9: &mut [async fn body@ui/async-await/argument-patterns.rs:24:40: 24:42]; // in scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
    let mut _10: &mut [async fn body@ui/async-await/argument-patterns.rs:24:40: 24:42]; // in scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
    let mut _11: &mut [async fn body@ui/async-await/argument-patterns.rs:24:40: 24:42]; // in scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
    let mut _12: &mut [async fn body@ui/async-await/argument-patterns.rs:24:40: 24:42]; // in scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
    scope 1 {
        debug __arg0 => _3;              // in scope 1 at ui/async-await/argument-patterns.rs:24:12: 24:30
        let _4: &mut std::vec::Vec<u32>; // in scope 1 at ui/async-await/argument-patterns.rs:24:13: 24:22
        let _5: &std::vec::Vec<u32>;     // in scope 1 at ui/async-await/argument-patterns.rs:24:24: 24:29
        scope 2 {
            debug a => _4;               // in scope 2 at ui/async-await/argument-patterns.rs:24:13: 24:22
            debug b => _5;               // in scope 2 at ui/async-await/argument-patterns.rs:24:24: 24:29
        }
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:24:40: 24:42]); // scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
        _8 = discriminant((*_9));        // scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
        switchInt(move _8) -> [0: bb1, 1: bb5, 2: bb4, otherwise: bb6]; // scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
    }

    bb1: {
        _7 = move _2;                    // scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:24:40: 24:42]); // scope 0 at ui/async-await/argument-patterns.rs:24:12: 24:30
        _3 = move ((*_10).0: (std::vec::Vec<u32>, std::vec::Vec<u32>)); // scope 0 at ui/async-await/argument-patterns.rs:24:12: 24:30
        _4 = &mut (_3.0: std::vec::Vec<u32>); // scope 1 at ui/async-await/argument-patterns.rs:24:13: 24:22
        _5 = &(_3.1: std::vec::Vec<u32>); // scope 1 at ui/async-await/argument-patterns.rs:24:24: 24:29
        _6 = const ();                   // scope 2 at ui/async-await/argument-patterns.rs:24:40: 24:42
        drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at ui/async-await/argument-patterns.rs:24:41: 24:42
    }

    bb2: {
        _0 = Poll::<()>::Ready(move _6); // scope 0 at ui/async-await/argument-patterns.rs:24:42: 24:42
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:24:40: 24:42]); // scope 0 at ui/async-await/argument-patterns.rs:24:42: 24:42
        discriminant((*_11)) = 1;        // scope 0 at ui/async-await/argument-patterns.rs:24:42: 24:42
        return;                          // scope 0 at ui/async-await/argument-patterns.rs:24:42: 24:42
    }

    bb3 (cleanup): {
        _12 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:24:40: 24:42]); // scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
        discriminant((*_12)) = 2;        // scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
        resume;                          // scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
    }

    bb4: {
        assert(const false, "`async fn` resumed after panicking") -> bb4; // scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
    }

    bb5: {
        assert(const false, "`async fn` resumed after completion") -> bb5; // scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
    }

    bb6: {
        unreachable;                     // scope 0 at ui/async-await/argument-patterns.rs:24:40: 24:42
    }
}

fn g(_1: ((Vec<u32>, Vec<u32>), (Vec<u32>, Vec<u32>))) -> impl Future<Output = ()> {
    debug __arg0 => _1;                  // in scope 0 at ui/async-await/argument-patterns.rs:26:12: 26:52
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:72
    let mut _2: [async fn body@ui/async-await/argument-patterns.rs:26:72: 26:74]; // in scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74

    bb0: {
        _2 = [generator@ui/async-await/argument-patterns.rs:26:72: 26:74 (#0)] { __arg0: move _1 }; // scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
                                         // generator
                                         // + def_id: DefId(0:15 ~ argument_patterns[2b61]::g::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (((std::vec::Vec<u32>, std::vec::Vec<u32>), (std::vec::Vec<u32>, std::vec::Vec<u32>)),),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/argument-patterns.rs:26:72: 26:74]>(move _2) -> bb1; // scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
                                         // mir::Constant
                                         // + span: ui/async-await/argument-patterns.rs:26:72: 26:74
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/argument-patterns.rs:26:72: 26:74]) -> [async fn body@ui/async-await/argument-patterns.rs:26:72: 26:74] {identity_future::<(), [async fn body@ui/async-await/argument-patterns.rs:26:72: 26:74]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/argument-patterns.rs:26:74: 26:74
    }
}

fn g::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/argument-patterns.rs:26:72: 26:74]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _9;           // in scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
    debug __arg0 => ((*(_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:26:72: 26:74])).0: ((std::vec::Vec<u32>, std::vec::Vec<u32>), (std::vec::Vec<u32>, std::vec::Vec<u32>))); // in scope 0 at ui/async-await/argument-patterns.rs:26:12: 26:52
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
    let mut _3: ((std::vec::Vec<u32>, std::vec::Vec<u32>), (std::vec::Vec<u32>, std::vec::Vec<u32>)); // in scope 0 at ui/async-await/argument-patterns.rs:26:12: 26:52
    let mut _8: ();                      // in scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
    let mut _9: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
    let mut _10: u32;                    // in scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
    let mut _11: &mut [async fn body@ui/async-await/argument-patterns.rs:26:72: 26:74]; // in scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
    let mut _12: &mut [async fn body@ui/async-await/argument-patterns.rs:26:72: 26:74]; // in scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
    let mut _13: &mut [async fn body@ui/async-await/argument-patterns.rs:26:72: 26:74]; // in scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
    let mut _14: &mut [async fn body@ui/async-await/argument-patterns.rs:26:72: 26:74]; // in scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
    scope 1 {
        debug __arg0 => _3;              // in scope 1 at ui/async-await/argument-patterns.rs:26:12: 26:52
        let _4: &std::vec::Vec<u32>;     // in scope 1 at ui/async-await/argument-patterns.rs:26:14: 26:19
        let _5: &mut std::vec::Vec<u32>; // in scope 1 at ui/async-await/argument-patterns.rs:26:21: 26:30
        let _6: &mut std::vec::Vec<u32>; // in scope 1 at ui/async-await/argument-patterns.rs:26:34: 26:43
        let _7: &std::vec::Vec<u32>;     // in scope 1 at ui/async-await/argument-patterns.rs:26:45: 26:50
        scope 2 {
            debug a => _4;               // in scope 2 at ui/async-await/argument-patterns.rs:26:14: 26:19
            debug b => _5;               // in scope 2 at ui/async-await/argument-patterns.rs:26:21: 26:30
            debug c => _6;               // in scope 2 at ui/async-await/argument-patterns.rs:26:34: 26:43
            debug d => _7;               // in scope 2 at ui/async-await/argument-patterns.rs:26:45: 26:50
        }
    }

    bb0: {
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:26:72: 26:74]); // scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
        _10 = discriminant((*_11));      // scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
        switchInt(move _10) -> [0: bb1, 1: bb5, 2: bb4, otherwise: bb6]; // scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
    }

    bb1: {
        _9 = move _2;                    // scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
        _12 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:26:72: 26:74]); // scope 0 at ui/async-await/argument-patterns.rs:26:12: 26:52
        _3 = move ((*_12).0: ((std::vec::Vec<u32>, std::vec::Vec<u32>), (std::vec::Vec<u32>, std::vec::Vec<u32>))); // scope 0 at ui/async-await/argument-patterns.rs:26:12: 26:52
        _4 = &((_3.0: (std::vec::Vec<u32>, std::vec::Vec<u32>)).0: std::vec::Vec<u32>); // scope 1 at ui/async-await/argument-patterns.rs:26:14: 26:19
        _5 = &mut ((_3.0: (std::vec::Vec<u32>, std::vec::Vec<u32>)).1: std::vec::Vec<u32>); // scope 1 at ui/async-await/argument-patterns.rs:26:21: 26:30
        _6 = &mut ((_3.1: (std::vec::Vec<u32>, std::vec::Vec<u32>)).0: std::vec::Vec<u32>); // scope 1 at ui/async-await/argument-patterns.rs:26:34: 26:43
        _7 = &((_3.1: (std::vec::Vec<u32>, std::vec::Vec<u32>)).1: std::vec::Vec<u32>); // scope 1 at ui/async-await/argument-patterns.rs:26:45: 26:50
        _8 = const ();                   // scope 2 at ui/async-await/argument-patterns.rs:26:72: 26:74
        drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at ui/async-await/argument-patterns.rs:26:73: 26:74
    }

    bb2: {
        _0 = Poll::<()>::Ready(move _8); // scope 0 at ui/async-await/argument-patterns.rs:26:74: 26:74
        _13 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:26:72: 26:74]); // scope 0 at ui/async-await/argument-patterns.rs:26:74: 26:74
        discriminant((*_13)) = 1;        // scope 0 at ui/async-await/argument-patterns.rs:26:74: 26:74
        return;                          // scope 0 at ui/async-await/argument-patterns.rs:26:74: 26:74
    }

    bb3 (cleanup): {
        _14 = deref_copy (_1.0: &mut [async fn body@ui/async-await/argument-patterns.rs:26:72: 26:74]); // scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
        discriminant((*_14)) = 2;        // scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
        resume;                          // scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
    }

    bb4: {
        assert(const false, "`async fn` resumed after panicking") -> bb4; // scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
    }

    bb5: {
        assert(const false, "`async fn` resumed after completion") -> bb5; // scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
    }

    bb6: {
        unreachable;                     // scope 0 at ui/async-await/argument-patterns.rs:26:72: 26:74
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/argument-patterns.rs:28:11: 28:11

    bb0: {
        return;                          // scope 0 at ui/async-await/argument-patterns.rs:28:13: 28:13
    }
}
