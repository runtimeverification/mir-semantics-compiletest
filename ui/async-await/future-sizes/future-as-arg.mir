// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test(_1: [u8; 16]) -> impl Future<Output = ()> {
    debug _arg => _1;                    // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:15: 4:19
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:31
    let mut _2: [async fn body@ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33]; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33

    bb0: {
        _2 = [generator@ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33 (#0)] { _arg: _1 }; // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
                                         // generator
                                         // + def_id: DefId(0:5 ~ future_as_arg[0bf4]::test::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     ([u8; 16],),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33]>(move _2) -> bb1; // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33]) -> [async fn body@ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33] {identity_future::<(), [async fn body@ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:33: 4:33
    }
}

test::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:26: 4:28

    bb0: {
        _0 = const 16_usize;             // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:26: 4:28
        return;                          // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:26: 4:28
    }
}

fn test::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
    debug _arg => ((*(_1.0: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33])).0: [u8; 16]); // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:15: 4:19
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
    let _3: [u8; 16];                    // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:15: 4:19
    let mut _4: ();                      // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
    let mut _6: u32;                     // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
    let mut _7: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33]; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
    let mut _8: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33]; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
    let mut _9: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33]; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
    scope 1 {
        debug _arg => _3;                // in scope 1 at ui/async-await/future-sizes/future-as-arg.rs:4:15: 4:19
    }

    bb0: {
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33]); // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
        switchInt(move _6) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33]); // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:15: 4:19
        _3 = ((*_8).0: [u8; 16]);        // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:15: 4:19
        _4 = const ();                   // scope 1 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
        _0 = Poll::<()>::Ready(move _4); // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:33: 4:33
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33]); // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:33: 4:33
        discriminant((*_9)) = 1;         // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:33: 4:33
        return;                          // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:33: 4:33
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:4:31: 4:33
    }
}

fn use_future(_1: impl std::future::Future<Output = ()>) -> impl Future<Output = ()> {
    debug fut => _1;                     // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:21: 6:24
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 6:65
    let mut _2: [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2

    bb0: {
        _2 = [generator@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2 (#0)] { fut: move _1 }; // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
                                         // generator
                                         // + def_id: DefId(0:7 ~ future_as_arg[0bf4]::use_future::{closure#0})
                                         // + substs: [
                                         //     impl std::future::Future<Output = ()>,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, impl std::future::Future<Output = ()>, ()},
                                         //     (impl std::future::Future<Output = ()>,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]>(move _2) -> bb1; // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]) -> [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2] {identity_future::<(), [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:8:2: 8:2
    }
}

fn use_future::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _17;          // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    debug fut => ((*(_1.0: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2])).0: impl std::future::Future<Output = ()>); // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:21: 6:24
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    let _3: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:21: 6:24
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
    let mut _5: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:7:5: 7:8
    let mut _6: std::task::Poll<()>;     // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
    let mut _7: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
    let mut _8: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
    let mut _9: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:7:5: 7:14
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:7:5: 7:14
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
    let mut _13: isize;                  // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
    let mut _16: ();                     // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    let mut _17: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    let mut _18: u32;                    // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    let mut _19: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    let mut _20: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    let mut _21: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    let mut _22: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    let mut _23: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    let mut _24: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    let mut _25: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    let mut _26: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    let mut _27: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    scope 1 {
        debug fut => _3;                 // in scope 1 at ui/async-await/future-sizes/future-as-arg.rs:6:21: 6:24
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2])) as variant#3).0: impl std::future::Future<Output = ()>); // in scope 2 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
            let _14: ();                 // in scope 2 at ui/async-await/future-sizes/future-as-arg.rs:7:5: 7:14
            scope 3 {
            }
            scope 4 {
                debug result => _14;     // in scope 4 at ui/async-await/future-sizes/future-as-arg.rs:7:5: 7:14
            }
        }
    }

    bb0: {
        _19 = deref_copy (_1.0: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]); // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
        _18 = discriminant((*_19));      // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
        switchInt(move _18) -> [0: bb1, 1: bb14, 2: bb13, 3: bb12, otherwise: bb15]; // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    }

    bb1: {
        _17 = move _2;                   // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
        _20 = deref_copy (_1.0: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]); // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:21: 6:24
        _3 = move ((*_20).0: impl std::future::Future<Output = ()>); // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:21: 6:24
        _5 = move _3;                    // scope 1 at ui/async-await/future-sizes/future-as-arg.rs:7:5: 7:8
        _4 = <impl std::future::Future<Output = ()> as IntoFuture>::into_future(move _5) -> [return: bb2, unwind: bb11]; // scope 1 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
                                         // + literal: Const { ty: fn(impl std::future::Future<Output = ()>) -> <impl std::future::Future<Output = ()> as IntoFuture>::IntoFuture {<impl std::future::Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb2: {
        _21 = deref_copy (_1.0: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]); // scope 1 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
        (((*_21) as variant#3).0: impl std::future::Future<Output = ()>) = move _4; // scope 1 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
        goto -> bb3;                     // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
    }

    bb3: {
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]); // scope 3 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
        _9 = &mut (((*_22) as variant#3).0: impl std::future::Future<Output = ()>); // scope 3 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
        _8 = &mut (*_9);                 // scope 3 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
        _7 = Pin::<&mut impl std::future::Future<Output = ()>>::new_unchecked(move _8) -> [return: bb4, unwind: bb10]; // scope 3 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
                                         // + literal: Const { ty: unsafe fn(&mut impl std::future::Future<Output = ()>) -> Pin<&mut impl std::future::Future<Output = ()>> {Pin::<&mut impl std::future::Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = _17;                       // scope 3 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
        _11 = move _12;                  // scope 3 at ui/async-await/future-sizes/future-as-arg.rs:7:5: 7:14
        _10 = &mut (*_11);               // scope 3 at ui/async-await/future-sizes/future-as-arg.rs:7:5: 7:14
        _6 = <impl std::future::Future<Output = ()> as Future>::poll(move _7, move _10) -> [return: bb5, unwind: bb10]; // scope 3 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl std::future::Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl std::future::Future<Output = ()> as Future>::Output> {<impl std::future::Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = discriminant(_6);          // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
        switchInt(move _13) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
    }

    bb6: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]); // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
        discriminant((*_23)) = 3;        // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
        return;                          // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
    }

    bb7: {
        unreachable;                     // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
    }

    bb8: {
        _14 = ((_6 as Ready).0: ());     // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:7:5: 7:14
        _16 = _14;                       // scope 4 at ui/async-await/future-sizes/future-as-arg.rs:7:5: 7:14
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]); // scope 1 at ui/async-await/future-sizes/future-as-arg.rs:7:13: 7:14
        drop((((*_24) as variant#3).0: impl std::future::Future<Output = ()>)) -> [return: bb9, unwind: bb11]; // scope 1 at ui/async-await/future-sizes/future-as-arg.rs:7:13: 7:14
    }

    bb9: {
        _0 = Poll::<()>::Ready(move _16); // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:8:2: 8:2
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]); // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:8:2: 8:2
        discriminant((*_25)) = 1;        // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:8:2: 8:2
        return;                          // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:8:2: 8:2
    }

    bb10 (cleanup): {
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]); // scope 1 at ui/async-await/future-sizes/future-as-arg.rs:7:13: 7:14
        drop((((*_26) as variant#3).0: impl std::future::Future<Output = ()>)) -> bb11; // scope 1 at ui/async-await/future-sizes/future-as-arg.rs:7:13: 7:14
    }

    bb11 (cleanup): {
        _27 = deref_copy (_1.0: &mut [async fn body@ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2]); // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
        discriminant((*_27)) = 2;        // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
        resume;                          // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    }

    bb12: {
        _15 = move _2;                   // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
        _17 = move _15;                  // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
        goto -> bb3;                     // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:7:8: 7:14
    }

    bb13: {
        assert(const false, "`async fn` resumed after panicking") -> bb13; // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    }

    bb14: {
        assert(const false, "`async fn` resumed after completion") -> bb14; // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    }

    bb15: {
        unreachable;                     // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:6:65: 8:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:10:11: 10:11
    let _1: usize;                       // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:11:9: 11:15
    let mut _2: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:9: 12:83
    let _3: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:9: 12:83
    let _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:10: 12:83
    let mut _5: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:21: 12:82
    let mut _6: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:32: 12:81
    let mut _7: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:43: 12:80
    let mut _8: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:54: 12:79
    let mut _9: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:65: 12:78
    let mut _10: [u8; 16];               // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:70: 12:77
    let mut _12: bool;                   // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:5: 15:74
    let mut _13: bool;                   // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:13: 15:30
    let mut _14: usize;                  // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:13: 15:19
    let mut _15: usize;                  // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:22: 15:30
    let mut _16: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:9: 57:73
    let mut _17: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
    let mut _18: &[&str];                // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:32: 15:73
    let mut _19: &[&str; 2];             // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:32: 15:73
    let _20: &[&str; 2];                 // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:32: 15:73
    let mut _21: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
    let mut _22: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
    let _23: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
    let _24: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
    let mut _25: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:45: 15:53
    let mut _26: &usize;                 // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:45: 15:53
    let _27: &usize;                     // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:45: 15:53
    let mut _28: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:65: 15:71
    let mut _29: &usize;                 // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:65: 15:71
    let _30: &usize;                     // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:65: 15:71
    scope 1 {
        debug actual => _1;              // in scope 1 at ui/async-await/future-sizes/future-as-arg.rs:11:9: 11:15
        let _11: usize;                  // in scope 1 at ui/async-await/future-sizes/future-as-arg.rs:14:9: 14:17
        scope 2 {
            debug expected => _11;       // in scope 2 at ui/async-await/future-sizes/future-as-arg.rs:14:9: 14:17
            let mut _31: &[&str; 2];     // in scope 2 at ui/async-await/future-sizes/future-as-arg.rs:15:32: 15:73
        }
    }

    bb0: {
        _10 = [const 0_u8; 16];          // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:70: 12:77
        _9 = test(move _10) -> bb1;      // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:65: 12:78
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:12:65: 12:69
                                         // + literal: Const { ty: fn([u8; 16]) -> impl Future<Output = ()> {test}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = use_future::<impl Future<Output = ()>>(move _9) -> bb2; // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:54: 12:79
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:12:54: 12:64
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> impl Future<Output = ()> {use_future::<impl Future<Output = ()>>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = use_future::<impl Future<Output = ()>>(move _8) -> bb3; // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:43: 12:80
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:12:43: 12:53
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> impl Future<Output = ()> {use_future::<impl Future<Output = ()>>}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = use_future::<impl Future<Output = ()>>(move _7) -> bb4; // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:32: 12:81
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:12:32: 12:42
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> impl Future<Output = ()> {use_future::<impl Future<Output = ()>>}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = use_future::<impl Future<Output = ()>>(move _6) -> bb5; // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:21: 12:82
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:12:21: 12:31
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> impl Future<Output = ()> {use_future::<impl Future<Output = ()>>}, val: Value(<ZST>) }
    }

    bb5: {
        _4 = use_future::<impl Future<Output = ()>>(move _5) -> bb6; // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:10: 12:83
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:12:10: 12:20
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> impl Future<Output = ()> {use_future::<impl Future<Output = ()>>}, val: Value(<ZST>) }
    }

    bb6: {
        _3 = &_4;                        // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:9: 12:83
        _2 = _3;                         // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:9: 12:83
        _1 = std::mem::size_of_val::<impl Future<Output = ()>>(move _2) -> bb7; // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:11:18: 12:84
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:11:18: 11:39
                                         // + literal: Const { ty: for<'a> fn(&'a impl Future<Output = ()>) -> usize {std::mem::size_of_val::<impl Future<Output = ()>>}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = const 550_usize;           // scope 1 at ui/async-await/future-sizes/future-as-arg.rs:14:20: 14:23
        _14 = _1;                        // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:15:13: 15:19
        _15 = _11;                       // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:15:22: 15:30
        _13 = Gt(move _14, move _15);    // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:15:13: 15:30
        _12 = Not(move _13);             // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:15:5: 15:74
        switchInt(move _12) -> [0: bb12, otherwise: bb8]; // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:15:5: 15:74
    }

    bb8: {
        _31 = const _;                   // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:15:32: 15:73
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:15:32: 15:73
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _20 = _31;                       // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:15:32: 15:73
        _19 = _20;                       // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:15:32: 15:73
        _18 = move _19 as &[&str] (Pointer(Unsize)); // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:15:32: 15:73
        _27 = &_11;                      // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:15:45: 15:53
        _26 = _27;                       // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:15:45: 15:53
        _25 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _26) -> bb9; // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:15:45: 15:53
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:15:45: 15:53
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb9: {
        _30 = &_1;                       // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:15:65: 15:71
        _29 = _30;                       // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:15:65: 15:71
        _28 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _29) -> bb10; // scope 2 at ui/async-await/future-sizes/future-as-arg.rs:15:65: 15:71
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:15:65: 15:71
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb10: {
        _24 = [move _25, move _28];      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
        _23 = &_24;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
        _22 = _23;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
        _21 = move _22 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
        _17 = Arguments::<'_>::new_v1(move _18, move _21) -> bb11; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:38: 57:72
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb11: {
        _16 = panic_fmt(move _17);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:9: 57:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:57:9: 57:37
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:16:2: 16:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:32: 15:73
    let mut _1: [&str; 2];               // in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:32: 15:73

    bb0: {
        _1 = [const "expected: >", const ", actual: "]; // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:32: 15:73
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:15:32: 15:73
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/async-await/future-sizes/future-as-arg.rs:15:32: 15:73
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:32: 15:73
        return;                          // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:15:32: 15:73
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:74: 12:76

    bb0: {
        _0 = const 16_usize;             // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:74: 12:76
        return;                          // scope 0 at ui/async-await/future-sizes/future-as-arg.rs:12:74: 12:76
    }
}
