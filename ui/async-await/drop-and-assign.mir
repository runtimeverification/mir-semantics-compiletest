// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/drop-and-assign.rs:8:1: 8:16>::drop(_1: &mut A) -> () {
    debug self => _1;                    // in scope 0 at ui/async-await/drop-and-assign.rs:8:27: 8:36
    let mut _0: ();                      // return place in scope 0 at ui/async-await/drop-and-assign.rs:8:38: 8:38

    bb0: {
        return;                          // scope 0 at ui/async-await/drop-and-assign.rs:8:40: 8:40
    }
}

fn f() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 10:18
    let mut _1: [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2

    bb0: {
        _1 = [generator@ui/async-await/drop-and-assign.rs:10:18: 15:2 (#0)]; // scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
                                         // generator
                                         // + def_id: DefId(0:8 ~ drop_and_assign[2816]::f::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, A, [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13], ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]>(move _1) -> bb1; // scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
                                         // mir::Constant
                                         // + span: ui/async-await/drop-and-assign.rs:10:18: 15:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]) -> [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2] {identity_future::<(), [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/drop-and-assign.rs:15:2: 15:2
    }
}

fn f::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _20;          // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _3: A;                       // in scope 0 at ui/async-await/drop-and-assign.rs:12:9: 12:10
    let _4: ();                          // in scope 0 at ui/async-await/drop-and-assign.rs:13:5: 13:12
    let mut _5: A;                       // in scope 0 at ui/async-await/drop-and-assign.rs:13:10: 13:11
    let mut _6: [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]; // in scope 0 at ui/async-await/drop-and-assign.rs:14:13: 14:19
    let mut _7: [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]; // in scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:13
    let mut _8: [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]; // in scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:13
    let mut _9: std::task::Poll<()>;     // in scope 0 at ui/async-await/drop-and-assign.rs:14:13: 14:19
    let mut _10: std::pin::Pin<&mut [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]>; // in scope 0 at ui/async-await/drop-and-assign.rs:14:13: 14:19
    let mut _11: &mut [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]; // in scope 0 at ui/async-await/drop-and-assign.rs:14:13: 14:19
    let mut _12: &mut [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]; // in scope 0 at ui/async-await/drop-and-assign.rs:14:13: 14:19
    let mut _13: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:19
    let mut _14: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:19
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/drop-and-assign.rs:14:13: 14:19
    let mut _16: isize;                  // in scope 0 at ui/async-await/drop-and-assign.rs:14:13: 14:19
    let mut _18: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/drop-and-assign.rs:14:13: 14:19
    let mut _19: ();                     // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _20: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _21: u32;                    // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _22: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _23: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _24: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _25: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _26: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _27: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _28: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _29: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _30: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _31: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _32: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _33: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _34: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _35: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _36: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _37: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _38: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _39: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _40: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    let mut _41: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]; // in scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    scope 1 {
        debug a => (((*(_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2])) as variant#3).0: A); // in scope 1 at ui/async-await/drop-and-assign.rs:11:9: 11:14
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2])) as variant#3).1: [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]); // in scope 2 at ui/async-await/drop-and-assign.rs:14:13: 14:19
            let _17: ();                 // in scope 2 at ui/async-await/drop-and-assign.rs:14:5: 14:19
            scope 3 {
            }
            scope 4 {
                debug result => _17;     // in scope 4 at ui/async-await/drop-and-assign.rs:14:5: 14:19
            }
        }
    }

    bb0: {
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
        _21 = discriminant((*_22));      // scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
        switchInt(move _21) -> [0: bb1, 1: bb18, 2: bb17, 3: bb16, otherwise: bb19]; // scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    }

    bb1: {
        _20 = move _2;                   // scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 0 at ui/async-await/drop-and-assign.rs:11:9: 11:14
        (((*_23) as variant#3).2: bool) = const false; // scope 0 at ui/async-await/drop-and-assign.rs:11:9: 11:14
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 0 at ui/async-await/drop-and-assign.rs:11:17: 11:18
        (((*_24) as variant#3).2: bool) = const true; // scope 0 at ui/async-await/drop-and-assign.rs:11:17: 11:18
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 0 at ui/async-await/drop-and-assign.rs:11:17: 11:18
        (((*_25) as variant#3).0: A) = A; // scope 0 at ui/async-await/drop-and-assign.rs:11:17: 11:18
        _3 = A;                          // scope 1 at ui/async-await/drop-and-assign.rs:12:9: 12:10
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 1 at ui/async-await/drop-and-assign.rs:12:5: 12:6
        drop((((*_26) as variant#3).0: A)) -> [return: bb13, unwind: bb12]; // scope 1 at ui/async-await/drop-and-assign.rs:12:5: 12:6
    }

    bb2: {
        _8 = [generator@ui/async-await/drop-and-assign.rs:14:5: 14:13 (#0)]; // scope 1 at ui/async-await/drop-and-assign.rs:14:5: 14:13
                                         // generator
                                         // + def_id: DefId(0:9 ~ drop_and_assign[2816]::f::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _7 = identity_future::<(), [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]>(move _8) -> [return: bb3, unwind: bb15]; // scope 1 at ui/async-await/drop-and-assign.rs:14:5: 14:13
                                         // mir::Constant
                                         // + span: ui/async-await/drop-and-assign.rs:14:5: 14:13
                                         // + literal: Const { ty: fn([async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]) -> [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13] {identity_future::<(), [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]>}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = <[async block@ui/async-await/drop-and-assign.rs:14:5: 14:13] as IntoFuture>::into_future(move _7) -> [return: bb4, unwind: bb15]; // scope 1 at ui/async-await/drop-and-assign.rs:14:13: 14:19
                                         // mir::Constant
                                         // + span: ui/async-await/drop-and-assign.rs:14:13: 14:19
                                         // + literal: Const { ty: fn([async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]) -> <[async block@ui/async-await/drop-and-assign.rs:14:5: 14:13] as IntoFuture>::IntoFuture {<[async block@ui/async-await/drop-and-assign.rs:14:5: 14:13] as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb4: {
        _29 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 1 at ui/async-await/drop-and-assign.rs:14:13: 14:19
        (((*_29) as variant#3).1: [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]) = move _6; // scope 1 at ui/async-await/drop-and-assign.rs:14:13: 14:19
        goto -> bb5;                     // scope 2 at ui/async-await/drop-and-assign.rs:14:13: 14:19
    }

    bb5: {
        _30 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 3 at ui/async-await/drop-and-assign.rs:14:13: 14:19
        _12 = &mut (((*_30) as variant#3).1: [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]); // scope 3 at ui/async-await/drop-and-assign.rs:14:13: 14:19
        _11 = &mut (*_12);               // scope 3 at ui/async-await/drop-and-assign.rs:14:13: 14:19
        _10 = Pin::<&mut [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]>::new_unchecked(move _11) -> [return: bb6, unwind: bb15]; // scope 3 at ui/async-await/drop-and-assign.rs:14:13: 14:19
                                         // mir::Constant
                                         // + span: ui/async-await/drop-and-assign.rs:14:13: 14:19
                                         // + literal: Const { ty: unsafe fn(&mut [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]) -> Pin<&mut [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]> {Pin::<&mut [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]>::new_unchecked}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = _20;                       // scope 3 at ui/async-await/drop-and-assign.rs:14:13: 14:19
        _14 = move _15;                  // scope 3 at ui/async-await/drop-and-assign.rs:14:5: 14:19
        _13 = &mut (*_14);               // scope 3 at ui/async-await/drop-and-assign.rs:14:5: 14:19
        _9 = <[async block@ui/async-await/drop-and-assign.rs:14:5: 14:13] as Future>::poll(move _10, move _13) -> [return: bb7, unwind: bb15]; // scope 3 at ui/async-await/drop-and-assign.rs:14:13: 14:19
                                         // mir::Constant
                                         // + span: ui/async-await/drop-and-assign.rs:14:13: 14:19
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]>, &'b mut Context<'c>) -> Poll<<[async block@ui/async-await/drop-and-assign.rs:14:5: 14:13] as Future>::Output> {<[async block@ui/async-await/drop-and-assign.rs:14:5: 14:13] as Future>::poll}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = discriminant(_9);          // scope 2 at ui/async-await/drop-and-assign.rs:14:13: 14:19
        switchInt(move _16) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 2 at ui/async-await/drop-and-assign.rs:14:13: 14:19
    }

    bb8: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/drop-and-assign.rs:14:13: 14:19
        _31 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 2 at ui/async-await/drop-and-assign.rs:14:13: 14:19
        discriminant((*_31)) = 3;        // scope 2 at ui/async-await/drop-and-assign.rs:14:13: 14:19
        return;                          // scope 2 at ui/async-await/drop-and-assign.rs:14:13: 14:19
    }

    bb9: {
        unreachable;                     // scope 2 at ui/async-await/drop-and-assign.rs:14:13: 14:19
    }

    bb10: {
        _17 = ((_9 as Ready).0: ());     // scope 2 at ui/async-await/drop-and-assign.rs:14:5: 14:19
        _19 = const ();                  // scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
        _32 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 0 at ui/async-await/drop-and-assign.rs:15:1: 15:2
        (((*_32) as variant#3).2: bool) = const false; // scope 0 at ui/async-await/drop-and-assign.rs:15:1: 15:2
        _0 = Poll::<()>::Ready(move _19); // scope 0 at ui/async-await/drop-and-assign.rs:15:2: 15:2
        _33 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 0 at ui/async-await/drop-and-assign.rs:15:2: 15:2
        discriminant((*_33)) = 1;        // scope 0 at ui/async-await/drop-and-assign.rs:15:2: 15:2
        return;                          // scope 0 at ui/async-await/drop-and-assign.rs:15:2: 15:2
    }

    bb11 (cleanup): {
        _34 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 0 at ui/async-await/drop-and-assign.rs:15:1: 15:2
        (((*_34) as variant#3).2: bool) = const false; // scope 0 at ui/async-await/drop-and-assign.rs:15:1: 15:2
        _41 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
        discriminant((*_41)) = 2;        // scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
        resume;                          // scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    }

    bb12 (cleanup): {
        _35 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 1 at ui/async-await/drop-and-assign.rs:12:5: 12:6
        (((*_35) as variant#3).2: bool) = const true; // scope 1 at ui/async-await/drop-and-assign.rs:12:5: 12:6
        _36 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 1 at ui/async-await/drop-and-assign.rs:12:5: 12:6
        (((*_36) as variant#3).0: A) = move _3; // scope 1 at ui/async-await/drop-and-assign.rs:12:5: 12:6
        goto -> bb15;                    // scope 1 at no-location
    }

    bb13: {
        _37 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 1 at ui/async-await/drop-and-assign.rs:12:5: 12:6
        (((*_37) as variant#3).2: bool) = const true; // scope 1 at ui/async-await/drop-and-assign.rs:12:5: 12:6
        _38 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 1 at ui/async-await/drop-and-assign.rs:12:5: 12:6
        (((*_38) as variant#3).0: A) = move _3; // scope 1 at ui/async-await/drop-and-assign.rs:12:5: 12:6
        _27 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 1 at ui/async-await/drop-and-assign.rs:13:10: 13:11
        (((*_27) as variant#3).2: bool) = const false; // scope 1 at ui/async-await/drop-and-assign.rs:13:10: 13:11
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 1 at ui/async-await/drop-and-assign.rs:13:10: 13:11
        _5 = move (((*_28) as variant#3).0: A); // scope 1 at ui/async-await/drop-and-assign.rs:13:10: 13:11
        _4 = std::mem::drop::<A>(move _5) -> [return: bb2, unwind: bb15]; // scope 1 at ui/async-await/drop-and-assign.rs:13:5: 13:12
                                         // mir::Constant
                                         // + span: ui/async-await/drop-and-assign.rs:13:5: 13:9
                                         // + literal: Const { ty: fn(A) {std::mem::drop::<A>}, val: Value(<ZST>) }
    }

    bb14 (cleanup): {
        _39 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 0 at ui/async-await/drop-and-assign.rs:15:1: 15:2
        drop((((*_39) as variant#3).0: A)) -> bb11; // scope 0 at ui/async-await/drop-and-assign.rs:15:1: 15:2
    }

    bb15 (cleanup): {
        _40 = deref_copy (_1.0: &mut [async fn body@ui/async-await/drop-and-assign.rs:10:18: 15:2]); // scope 0 at ui/async-await/drop-and-assign.rs:15:1: 15:2
        switchInt((((*_40) as variant#3).2: bool)) -> [0: bb11, otherwise: bb14]; // scope 0 at ui/async-await/drop-and-assign.rs:15:1: 15:2
    }

    bb16: {
        _18 = move _2;                   // scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
        _20 = move _18;                  // scope 2 at ui/async-await/drop-and-assign.rs:14:13: 14:19
        goto -> bb5;                     // scope 2 at ui/async-await/drop-and-assign.rs:14:13: 14:19
    }

    bb17: {
        assert(const false, "`async fn` resumed after panicking") -> bb17; // scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    }

    bb18: {
        assert(const false, "`async fn` resumed after completion") -> bb18; // scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    }

    bb19: {
        unreachable;                     // scope 0 at ui/async-await/drop-and-assign.rs:10:18: 15:2
    }
}

fn f::{closure#0}::{closure#0}(_1: Pin<&mut [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:13
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:13
    let mut _3: ();                      // in scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:13
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:13
    let mut _5: u32;                     // in scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:13
    let mut _6: &mut [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]; // in scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:13
    let mut _7: &mut [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]; // in scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:13

    bb0: {
        _6 = deref_copy (_1.0: &mut [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]); // scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:13
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:13
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:13
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:13
        _3 = const ();                   // scope 0 at ui/async-await/drop-and-assign.rs:14:11: 14:13
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/drop-and-assign.rs:14:13: 14:13
        _7 = deref_copy (_1.0: &mut [async block@ui/async-await/drop-and-assign.rs:14:5: 14:13]); // scope 0 at ui/async-await/drop-and-assign.rs:14:13: 14:13
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/drop-and-assign.rs:14:13: 14:13
        return;                          // scope 0 at ui/async-await/drop-and-assign.rs:14:13: 14:13
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:13
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/drop-and-assign.rs:14:5: 14:13
    }
}

fn assert_send(_1: T) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/drop-and-assign.rs:17:31: 17:31

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/async-await/drop-and-assign.rs:17:32: 17:33
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/drop-and-assign.rs:17:33: 17:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/drop-and-assign.rs:19:11: 19:11
    let mut _1: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/drop-and-assign.rs:20:13: 20:16
    scope 1 {
    }

    bb0: {
        _1 = f() -> bb1;                 // scope 0 at ui/async-await/drop-and-assign.rs:20:13: 20:16
                                         // mir::Constant
                                         // + span: ui/async-await/drop-and-assign.rs:20:13: 20:14
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {f}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/async-await/drop-and-assign.rs:20:16: 20:17
    }

    bb2: {
        return;                          // scope 0 at ui/async-await/drop-and-assign.rs:21:2: 21:2
    }
}
