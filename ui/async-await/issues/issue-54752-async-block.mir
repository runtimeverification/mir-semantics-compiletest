// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:11: 6:11
    let _1: [async block@ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32]; // in scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:17: 6:19
    let mut _2: [async block@ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32]; // in scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32
    scope 1 {
        debug _a => _1;                  // in scope 1 at ui/async-await/issues/issue-54752-async-block.rs:6:17: 6:19
    }

    bb0: {
        _2 = [generator@ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32 (#0)]; // scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32
                                         // generator
                                         // + def_id: DefId(0:4 ~ issue_54752_async_block[40bb]::main::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _1 = identity_future::<(), [async block@ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32]>(move _2) -> bb1; // scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:22: 6:33
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32
                                         // + literal: Const { ty: fn([async block@ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32]) -> [async block@ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32] {identity_future::<(), [async block@ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:36: 6:36
    }
}

fn main::{closure#0}(_1: Pin<&mut [async block@ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32
    let mut _3: ();                      // in scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32
    let mut _5: u32;                     // in scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32
    let mut _6: &mut [async block@ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32]; // in scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32
    let mut _7: &mut [async block@ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32]; // in scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32

    bb0: {
        _6 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32]); // scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32
        _3 = const ();                   // scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:29: 6:32
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:32: 6:32
        _7 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32]); // scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:32: 6:32
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:32: 6:32
        return;                          // scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:32: 6:32
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-54752-async-block.rs:6:23: 6:32
    }
}
