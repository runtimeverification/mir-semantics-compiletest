// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: &T) -> Pin<Box<dyn Future<Output = ()> + Send>> {
    let mut _0: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = ()> + std::marker::Send>>; // return place in scope 0 at ui/async-await/issues/issue-64477.rs:12:19: 12:59
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _2 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn g(_1: &T) -> impl Future<Output = ()> + Send {
    debug x => _1;                       // in scope 0 at ui/async-await/issues/issue-64477.rs:16:19: 16:20
    let mut _0: impl std::future::Future<Output = ()> + std::marker::Send; // return place in scope 0 at ui/async-await/issues/issue-64477.rs:16:37: 16:68
    let mut _2: [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30

    bb0: {
        _2 = [generator@ui/async-await/issues/issue-64477.rs:17:5: 17:30 (#0)] { x: _1 }; // scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
                                         // generator
                                         // + def_id: DefId(0:9 ~ issue_64477[608e]::g::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     for<'a, 'b> {std::future::ResumeTy, &'a T, std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = ()> + std::marker::Send + 'b)>>, ()},
                                         //     (&T,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]>(move _2) -> bb1; // scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477.rs:17:5: 17:30
                                         // + literal: Const { ty: fn([async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]) -> [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30] {identity_future::<(), [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-64477.rs:18:2: 18:2
    }
}

fn g::{closure#0}(_1: Pin<&mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _18;          // in scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    debug x => ((*(_1.0: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30])).0: &T); // in scope 0 at ui/async-await/issues/issue-64477.rs:16:19: 16:20
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    let mut _3: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = ()> + std::marker::Send>>; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
    let mut _4: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = ()> + std::marker::Send>>; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:18: 17:22
    let mut _5: &T;                      // in scope 0 at ui/async-await/issues/issue-64477.rs:17:20: 17:21
    let mut _6: std::task::Poll<()>;     // in scope 0 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
    let mut _7: std::pin::Pin<&mut std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = ()> + std::marker::Send>>>; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
    let mut _8: &mut std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = ()> + std::marker::Send>>; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
    let mut _9: &mut std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = ()> + std::marker::Send>>; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:18: 17:28
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:18: 17:28
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
    let mut _13: isize;                  // in scope 0 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
    let mut _16: &T;                     // in scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    let mut _17: ();                     // in scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    let mut _18: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    let mut _19: u32;                    // in scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    let mut _20: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    let mut _21: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    let mut _22: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    let mut _23: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    let mut _24: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    let mut _25: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    let mut _26: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    let mut _27: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    let mut _28: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]; // in scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30])) as variant#3).0: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = ()> + std::marker::Send>>); // in scope 1 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
        let _14: ();                     // in scope 1 at ui/async-await/issues/issue-64477.rs:17:18: 17:28
        scope 2 {
        }
        scope 3 {
            debug result => _14;         // in scope 3 at ui/async-await/issues/issue-64477.rs:17:18: 17:28
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]); // scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
        _19 = discriminant((*_20));      // scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
        switchInt(move _19) -> [0: bb1, 1: bb15, 2: bb14, 3: bb13, otherwise: bb16]; // scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    }

    bb1: {
        _18 = move _2;                   // scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
        _21 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]); // scope 0 at ui/async-await/issues/issue-64477.rs:17:20: 17:21
        _16 = deref_copy ((*_21).0: &T); // scope 0 at ui/async-await/issues/issue-64477.rs:17:20: 17:21
        _5 = _16;                        // scope 0 at ui/async-await/issues/issue-64477.rs:17:20: 17:21
        _4 = f::<T>(move _5) -> [return: bb2, unwind: bb12]; // scope 0 at ui/async-await/issues/issue-64477.rs:17:18: 17:22
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477.rs:17:18: 17:19
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> Pin<Box<(dyn Future<Output = ()> + Send + 'static)>> {f::<T>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <Pin<Box<dyn Future<Output = ()> + Send>> as IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb12]; // scope 0 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477.rs:17:22: 17:28
                                         // + literal: Const { ty: fn(Pin<Box<dyn Future<Output = ()> + Send>>) -> <Pin<Box<dyn Future<Output = ()> + Send>> as IntoFuture>::IntoFuture {<Pin<Box<dyn Future<Output = ()> + Send>> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _22 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]); // scope 0 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
        (((*_22) as variant#3).0: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = ()> + std::marker::Send>>) = move _3; // scope 0 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
        goto -> bb4;                     // scope 1 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
    }

    bb4: {
        _23 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]); // scope 2 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
        _9 = &mut (((*_23) as variant#3).0: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = ()> + std::marker::Send>>); // scope 2 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
        _8 = &mut (*_9);                 // scope 2 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
        _7 = Pin::<&mut Pin<Box<dyn Future<Output = ()> + Send>>>::new_unchecked(move _8) -> [return: bb5, unwind: bb11]; // scope 2 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477.rs:17:22: 17:28
                                         // + literal: Const { ty: unsafe fn(&mut Pin<Box<dyn Future<Output = ()> + Send>>) -> Pin<&mut Pin<Box<dyn Future<Output = ()> + Send>>> {Pin::<&mut Pin<Box<dyn Future<Output = ()> + Send>>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = _18;                       // scope 2 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
        _11 = move _12;                  // scope 2 at ui/async-await/issues/issue-64477.rs:17:18: 17:28
        _10 = &mut (*_11);               // scope 2 at ui/async-await/issues/issue-64477.rs:17:18: 17:28
        _6 = <Pin<Box<dyn Future<Output = ()> + Send>> as Future>::poll(move _7, move _10) -> [return: bb6, unwind: bb11]; // scope 2 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477.rs:17:22: 17:28
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut Pin<Box<dyn Future<Output = ()> + Send>>>, &'b mut Context<'c>) -> Poll<<Pin<Box<dyn Future<Output = ()> + Send>> as Future>::Output> {<Pin<Box<dyn Future<Output = ()> + Send>> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = discriminant(_6);          // scope 1 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
        switchInt(move _13) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 1 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 1 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
        _24 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]); // scope 1 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
        discriminant((*_24)) = 3;        // scope 1 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
        return;                          // scope 1 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
    }

    bb8: {
        unreachable;                     // scope 1 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
    }

    bb9: {
        _14 = ((_6 as Ready).0: ());     // scope 1 at ui/async-await/issues/issue-64477.rs:17:18: 17:28
        _17 = _14;                       // scope 3 at ui/async-await/issues/issue-64477.rs:17:18: 17:28
        _25 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]); // scope 0 at ui/async-await/issues/issue-64477.rs:17:27: 17:28
        drop((((*_25) as variant#3).0: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = ()> + std::marker::Send>>)) -> [return: bb10, unwind: bb12]; // scope 0 at ui/async-await/issues/issue-64477.rs:17:27: 17:28
    }

    bb10: {
        _0 = Poll::<()>::Ready(move _17); // scope 0 at ui/async-await/issues/issue-64477.rs:17:30: 17:30
        _26 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]); // scope 0 at ui/async-await/issues/issue-64477.rs:17:30: 17:30
        discriminant((*_26)) = 1;        // scope 0 at ui/async-await/issues/issue-64477.rs:17:30: 17:30
        return;                          // scope 0 at ui/async-await/issues/issue-64477.rs:17:30: 17:30
    }

    bb11 (cleanup): {
        _27 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]); // scope 0 at ui/async-await/issues/issue-64477.rs:17:27: 17:28
        drop((((*_27) as variant#3).0: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = ()> + std::marker::Send>>)) -> bb12; // scope 0 at ui/async-await/issues/issue-64477.rs:17:27: 17:28
    }

    bb12 (cleanup): {
        _28 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477.rs:17:5: 17:30]); // scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
        discriminant((*_28)) = 2;        // scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
        resume;                          // scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    }

    bb13: {
        _15 = move _2;                   // scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
        _18 = move _15;                  // scope 1 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
        goto -> bb4;                     // scope 1 at ui/async-await/issues/issue-64477.rs:17:22: 17:28
    }

    bb14: {
        assert(const false, "`async fn` resumed after panicking") -> bb14; // scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    }

    bb15: {
        assert(const false, "`async fn` resumed after completion") -> bb15; // scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    }

    bb16: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-64477.rs:17:5: 17:30
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-64477.rs:20:11: 20:11

    bb0: {
        return;                          // scope 0 at ui/async-await/issues/issue-64477.rs:20:14: 20:14
    }
}
