// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn my_task(_1: Arc<dyn SomeTrait>) -> impl Future<Output = ()> {
    debug obj => _1;                     // in scope 0 at ui/async-await/issues/issue-54974.rs:10:18: 10:21
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 10:43
    let mut _2: [async fn body@ui/async-await/issues/issue-54974.rs:10:43: 12:2]; // in scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2

    bb0: {
        _2 = [generator@ui/async-await/issues/issue-54974.rs:10:43: 12:2 (#0)] { obj: move _1 }; // scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
                                         // generator
                                         // + def_id: DefId(0:7 ~ issue_54974[bd49]::my_task::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (std::sync::Arc<dyn SomeTrait>,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issues/issue-54974.rs:10:43: 12:2]>(move _2) -> bb1; // scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-54974.rs:10:43: 12:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-54974.rs:10:43: 12:2]) -> [async fn body@ui/async-await/issues/issue-54974.rs:10:43: 12:2] {identity_future::<(), [async fn body@ui/async-await/issues/issue-54974.rs:10:43: 12:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-54974.rs:12:2: 12:2
    }
}

fn my_task::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-54974.rs:10:43: 12:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
    debug obj => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-54974.rs:10:43: 12:2])).0: std::sync::Arc<dyn SomeTrait>); // in scope 0 at ui/async-await/issues/issue-54974.rs:10:18: 10:21
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
    let _3: std::sync::Arc<dyn SomeTrait>; // in scope 0 at ui/async-await/issues/issue-54974.rs:10:18: 10:21
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
    let mut _6: u32;                     // in scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
    let mut _7: &mut [async fn body@ui/async-await/issues/issue-54974.rs:10:43: 12:2]; // in scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
    let mut _8: &mut [async fn body@ui/async-await/issues/issue-54974.rs:10:43: 12:2]; // in scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
    let mut _9: &mut [async fn body@ui/async-await/issues/issue-54974.rs:10:43: 12:2]; // in scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
    scope 1 {
        debug obj => _3;                 // in scope 1 at ui/async-await/issues/issue-54974.rs:10:18: 10:21
    }

    bb0: {
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-54974.rs:10:43: 12:2]); // scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
        switchInt(move _6) -> [0: bb1, 2: bb4, otherwise: bb5]; // scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-54974.rs:10:43: 12:2]); // scope 0 at ui/async-await/issues/issue-54974.rs:10:18: 10:21
        _3 = move ((*_8).0: std::sync::Arc<dyn SomeTrait>); // scope 0 at ui/async-await/issues/issue-54974.rs:10:18: 10:21
        _4 = core::panicking::panic(const "not implemented") -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2 (cleanup): {
        drop(_3) -> bb3;                 // scope 0 at ui/async-await/issues/issue-54974.rs:12:1: 12:2
    }

    bb3 (cleanup): {
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-54974.rs:10:43: 12:2]); // scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
        discriminant((*_9)) = 2;         // scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
        resume;                          // scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
    }

    bb4: {
        assert(const false, "`async fn` resumed after panicking") -> bb4; // scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
    }

    bb5: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-54974.rs:10:43: 12:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-54974.rs:14:11: 14:11

    bb0: {
        return;                          // scope 0 at ui/async-await/issues/issue-54974.rs:14:13: 14:13
    }
}
