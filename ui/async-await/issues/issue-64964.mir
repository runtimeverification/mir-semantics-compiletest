// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/issues/issue-64964.rs:9:1: 9:10>::next(_1: &mut Body) -> impl Future<Output = ()> {
    debug self => _1;                    // in scope 0 at ui/async-await/issues/issue-64964.rs:10:19: 10:28
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 10:30
    let mut _2: [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]; // in scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6

    bb0: {
        _2 = [generator@ui/async-await/issues/issue-64964.rs:10:30: 12:6 (#0)] { self: move _1 }; // scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
                                         // generator
                                         // + def_id: DefId(0:7 ~ issue_64964[3b4d]::{impl#0}::next::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     for<'a> {std::future::ResumeTy, &'a mut Body, [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17], ()},
                                         //     (&mut Body,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]>(move _2) -> bb1; // scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64964.rs:10:30: 12:6
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]) -> [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6] {identity_future::<(), [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-64964.rs:12:6: 12:6
    }
}

fn <impl at ui/async-await/issues/issue-64964.rs:9:1: 9:10>::next::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _18;          // in scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    debug self => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6])).0: &mut Body); // in scope 0 at ui/async-await/issues/issue-64964.rs:10:19: 10:28
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    let _3: &mut Body;                   // in scope 0 at ui/async-await/issues/issue-64964.rs:10:19: 10:28
    let mut _4: [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]; // in scope 0 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
    let mut _5: [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]; // in scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:17
    let mut _6: [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]; // in scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:17
    let mut _7: std::task::Poll<()>;     // in scope 0 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
    let mut _8: std::pin::Pin<&mut [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]>; // in scope 0 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
    let mut _9: &mut [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]; // in scope 0 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
    let mut _10: &mut [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]; // in scope 0 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:23
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:23
    let mut _13: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
    let mut _14: isize;                  // in scope 0 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
    let mut _16: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
    let mut _17: ();                     // in scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    let mut _18: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    let mut _19: u32;                    // in scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    let mut _20: &mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]; // in scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    let mut _21: &mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]; // in scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    let mut _22: &mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]; // in scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    let mut _23: &mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]; // in scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    let mut _24: &mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]; // in scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    let mut _25: &mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]; // in scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    let mut _26: &mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]; // in scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    scope 1 {
        debug self => _3;                // in scope 1 at ui/async-await/issues/issue-64964.rs:10:19: 10:28
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6])) as variant#3).0: [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]); // in scope 2 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
            let _15: ();                 // in scope 2 at ui/async-await/issues/issue-64964.rs:11:9: 11:23
            scope 3 {
            }
            scope 4 {
                debug result => _15;     // in scope 4 at ui/async-await/issues/issue-64964.rs:11:9: 11:23
            }
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]); // scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
        _19 = discriminant((*_20));      // scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
        switchInt(move _19) -> [0: bb1, 1: bb13, 2: bb12, 3: bb11, otherwise: bb14]; // scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    }

    bb1: {
        _18 = move _2;                   // scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
        _21 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]); // scope 0 at ui/async-await/issues/issue-64964.rs:10:19: 10:28
        _3 = move ((*_21).0: &mut Body); // scope 0 at ui/async-await/issues/issue-64964.rs:10:19: 10:28
        _6 = [generator@ui/async-await/issues/issue-64964.rs:11:9: 11:17 (#0)]; // scope 1 at ui/async-await/issues/issue-64964.rs:11:9: 11:17
                                         // generator
                                         // + def_id: DefId(0:8 ~ issue_64964[3b4d]::{impl#0}::next::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _5 = identity_future::<(), [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]>(move _6) -> [return: bb2, unwind: bb10]; // scope 1 at ui/async-await/issues/issue-64964.rs:11:9: 11:17
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64964.rs:11:9: 11:17
                                         // + literal: Const { ty: fn([async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]) -> [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17] {identity_future::<(), [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]>}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = <[async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17] as IntoFuture>::into_future(move _5) -> [return: bb3, unwind: bb10]; // scope 1 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64964.rs:11:17: 11:23
                                         // + literal: Const { ty: fn([async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]) -> <[async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17] as IntoFuture>::IntoFuture {<[async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17] as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]); // scope 1 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
        (((*_22) as variant#3).0: [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]) = move _4; // scope 1 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
        goto -> bb4;                     // scope 2 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
    }

    bb4: {
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]); // scope 3 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
        _10 = &mut (((*_23) as variant#3).0: [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]); // scope 3 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
        _9 = &mut (*_10);                // scope 3 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
        _8 = Pin::<&mut [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]>::new_unchecked(move _9) -> [return: bb5, unwind: bb10]; // scope 3 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64964.rs:11:17: 11:23
                                         // + literal: Const { ty: unsafe fn(&mut [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]) -> Pin<&mut [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]> {Pin::<&mut [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = _18;                       // scope 3 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
        _12 = move _13;                  // scope 3 at ui/async-await/issues/issue-64964.rs:11:9: 11:23
        _11 = &mut (*_12);               // scope 3 at ui/async-await/issues/issue-64964.rs:11:9: 11:23
        _7 = <[async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17] as Future>::poll(move _8, move _11) -> [return: bb6, unwind: bb10]; // scope 3 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64964.rs:11:17: 11:23
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]>, &'b mut Context<'c>) -> Poll<<[async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17] as Future>::Output> {<[async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17] as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = discriminant(_7);          // scope 2 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
        switchInt(move _14) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]); // scope 2 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
        discriminant((*_24)) = 3;        // scope 2 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
        return;                          // scope 2 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
    }

    bb8: {
        unreachable;                     // scope 2 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
    }

    bb9: {
        _15 = ((_7 as Ready).0: ());     // scope 2 at ui/async-await/issues/issue-64964.rs:11:9: 11:23
        _17 = _15;                       // scope 4 at ui/async-await/issues/issue-64964.rs:11:9: 11:23
        _0 = Poll::<()>::Ready(move _17); // scope 0 at ui/async-await/issues/issue-64964.rs:12:6: 12:6
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]); // scope 0 at ui/async-await/issues/issue-64964.rs:12:6: 12:6
        discriminant((*_25)) = 1;        // scope 0 at ui/async-await/issues/issue-64964.rs:12:6: 12:6
        return;                          // scope 0 at ui/async-await/issues/issue-64964.rs:12:6: 12:6
    }

    bb10 (cleanup): {
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:10:30: 12:6]); // scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
        discriminant((*_26)) = 2;        // scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
        resume;                          // scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    }

    bb11: {
        _16 = move _2;                   // scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
        _18 = move _16;                  // scope 2 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
        goto -> bb4;                     // scope 2 at ui/async-await/issues/issue-64964.rs:11:17: 11:23
    }

    bb12: {
        assert(const false, "`async fn` resumed after panicking") -> bb12; // scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    }

    bb13: {
        assert(const false, "`async fn` resumed after completion") -> bb13; // scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    }

    bb14: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-64964.rs:10:30: 12:6
    }
}

fn <impl at ui/async-await/issues/issue-64964.rs:9:1: 9:10>::next::{closure#0}::{closure#0}(_1: Pin<&mut [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:17
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:17
    let mut _3: ();                      // in scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:17
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:17
    let mut _5: u32;                     // in scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:17
    let mut _6: &mut [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]; // in scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:17
    let mut _7: &mut [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]; // in scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:17

    bb0: {
        _6 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]); // scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:17
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:17
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:17
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:17
        _3 = const ();                   // scope 0 at ui/async-await/issues/issue-64964.rs:11:15: 11:17
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/issues/issue-64964.rs:11:17: 11:17
        _7 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64964.rs:11:9: 11:17]); // scope 0 at ui/async-await/issues/issue-64964.rs:11:17: 11:17
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/issues/issue-64964.rs:11:17: 11:17
        return;                          // scope 0 at ui/async-await/issues/issue-64964.rs:11:17: 11:17
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:17
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-64964.rs:11:9: 11:17
    }
}

fn bar() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 17:16
    let mut _1: [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]; // in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2

    bb0: {
        _1 = [generator@ui/async-await/issues/issue-64964.rs:17:16: 21:2 (#0)]; // scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
                                         // generator
                                         // + def_id: DefId(0:10 ~ issue_64964[3b4d]::bar::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     for<'a, 'b> {std::future::ResumeTy, i32, std::ops::Range<i32>, &'a mut std::ops::Range<i32>, std::option::Option<i32>, [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26], ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]>(move _1) -> bb1; // scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64964.rs:17:16: 21:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]) -> [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2] {identity_future::<(), [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-64964.rs:21:2: 21:2
    }
}

fn bar::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _26;          // in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    let mut _3: std::ops::Range<i32>;    // in scope 0 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
    let mut _4: std::ops::Range<i32>;    // in scope 0 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
    let mut _5: std::option::Option<i32>; // in scope 0 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
    let mut _6: &mut std::ops::Range<i32>; // in scope 0 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
    let mut _7: &mut std::ops::Range<i32>; // in scope 0 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
    let mut _8: isize;                   // in scope 0 at ui/async-await/issues/issue-64964.rs:18:5: 20:6
    let _9: i32;                         // in scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:41
    let mut _10: std::option::Option<i32>; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:32
    let mut _11: [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
    let mut _12: [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
    let mut _13: [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
    let mut _14: &i32;                   // in scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
    let mut _15: std::task::Poll<std::option::Option<i32>>; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
    let mut _16: std::pin::Pin<&mut [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]>; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
    let mut _17: &mut [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
    let mut _18: &mut [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
    let mut _19: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:32
    let mut _20: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:32
    let mut _21: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
    let mut _22: isize;                  // in scope 0 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
    let mut _24: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
    let mut _25: ();                     // in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    let mut _26: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    let mut _27: u32;                    // in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    let mut _28: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]; // in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    let mut _29: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]; // in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    let mut _30: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]; // in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    let mut _31: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]; // in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    let mut _32: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]; // in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    let mut _33: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]; // in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    let mut _34: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]; // in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    let mut _35: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]; // in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    let mut _36: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]; // in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    let mut _37: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]; // in scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    scope 1 {
        debug iter => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2])) as variant#3).0: std::ops::Range<i32>); // in scope 1 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
        scope 2 {
            debug x => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2])) as variant#3).1: i32); // in scope 2 at ui/async-await/issues/issue-64964.rs:18:9: 18:10
            scope 3 {
                debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2])) as variant#3).2: [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]); // in scope 3 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
                let _23: std::option::Option<i32>; // in scope 3 at ui/async-await/issues/issue-64964.rs:19:9: 19:32
                scope 4 {
                }
                scope 5 {
                    debug result => _23; // in scope 5 at ui/async-await/issues/issue-64964.rs:19:9: 19:32
                }
            }
        }
    }

    bb0: {
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]); // scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
        _27 = discriminant((*_28));      // scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
        switchInt(move _27) -> [0: bb1, 1: bb19, 2: bb18, 3: bb17, otherwise: bb20]; // scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    }

    bb1: {
        _26 = move _2;                   // scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
        _4 = std::ops::Range::<i32> { start: const 0_i32, end: const 10_i32 }; // scope 0 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
        _3 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind: bb16]; // scope 0 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64964.rs:18:14: 18:19
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _29 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]); // scope 0 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
        (((*_29) as variant#3).0: std::ops::Range<i32>) = move _3; // scope 0 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
        goto -> bb3;                     // scope 1 at ui/async-await/issues/issue-64964.rs:18:5: 20:6
    }

    bb3: {
        _30 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]); // scope 1 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
        _7 = &mut (((*_30) as variant#3).0: std::ops::Range<i32>); // scope 1 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
        _6 = &mut (*_7);                 // scope 1 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
        _5 = <std::ops::Range<i32> as Iterator>::next(move _6) -> [return: bb4, unwind: bb16]; // scope 1 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64964.rs:18:14: 18:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = discriminant(_5);           // scope 1 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
        switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 1 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
    }

    bb5: {
        _31 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]); // scope 1 at ui/async-await/issues/issue-64964.rs:18:9: 18:10
        (((*_31) as variant#3).1: i32) = ((_5 as Some).0: i32); // scope 1 at ui/async-await/issues/issue-64964.rs:18:9: 18:10
        _32 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]); // scope 2 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
        _14 = &(((*_32) as variant#3).1: i32); // scope 2 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
        _13 = [generator@ui/async-await/issues/issue-64964.rs:19:9: 19:26 (#0)] { x: move _14 }; // scope 2 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
                                         // generator
                                         // + def_id: DefId(0:11 ~ issue_64964[3b4d]::bar::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     std::option::Option<i32>,
                                         //     {},
                                         //     (&i32,),
                                         // ]
                                         // + movability: Static
        _12 = identity_future::<Option<i32>, [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]>(move _13) -> [return: bb8, unwind: bb16]; // scope 2 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64964.rs:19:9: 19:26
                                         // + literal: Const { ty: fn([async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]) -> [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26] {identity_future::<Option<i32>, [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]>}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 1 at ui/async-await/issues/issue-64964.rs:18:14: 18:19
    }

    bb7: {
        _25 = const ();                  // scope 1 at ui/async-await/issues/issue-64964.rs:18:5: 20:6
        _0 = Poll::<()>::Ready(move _25); // scope 0 at ui/async-await/issues/issue-64964.rs:21:2: 21:2
        _33 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]); // scope 0 at ui/async-await/issues/issue-64964.rs:21:2: 21:2
        discriminant((*_33)) = 1;        // scope 0 at ui/async-await/issues/issue-64964.rs:21:2: 21:2
        return;                          // scope 0 at ui/async-await/issues/issue-64964.rs:21:2: 21:2
    }

    bb8: {
        _11 = <[async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26] as IntoFuture>::into_future(move _12) -> [return: bb9, unwind: bb16]; // scope 2 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64964.rs:19:26: 19:32
                                         // + literal: Const { ty: fn([async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]) -> <[async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26] as IntoFuture>::IntoFuture {<[async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26] as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb9: {
        _34 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]); // scope 2 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
        (((*_34) as variant#3).2: [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]) = move _11; // scope 2 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
        goto -> bb10;                    // scope 3 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
    }

    bb10: {
        _35 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]); // scope 4 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
        _18 = &mut (((*_35) as variant#3).2: [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]); // scope 4 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
        _17 = &mut (*_18);               // scope 4 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
        _16 = Pin::<&mut [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]>::new_unchecked(move _17) -> [return: bb11, unwind: bb16]; // scope 4 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64964.rs:19:26: 19:32
                                         // + literal: Const { ty: unsafe fn(&mut [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]) -> Pin<&mut [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]> {Pin::<&mut [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]>::new_unchecked}, val: Value(<ZST>) }
    }

    bb11: {
        _21 = _26;                       // scope 4 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
        _20 = move _21;                  // scope 4 at ui/async-await/issues/issue-64964.rs:19:9: 19:32
        _19 = &mut (*_20);               // scope 4 at ui/async-await/issues/issue-64964.rs:19:9: 19:32
        _15 = <[async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26] as Future>::poll(move _16, move _19) -> [return: bb12, unwind: bb16]; // scope 4 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64964.rs:19:26: 19:32
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]>, &'b mut Context<'c>) -> Poll<<[async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26] as Future>::Output> {<[async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26] as Future>::poll}, val: Value(<ZST>) }
    }

    bb12: {
        _22 = discriminant(_15);         // scope 3 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
        switchInt(move _22) -> [0: bb15, 1: bb13, otherwise: bb14]; // scope 3 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
    }

    bb13: {
        _0 = Poll::<()>::Pending;        // scope 3 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
        _36 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]); // scope 3 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
        discriminant((*_36)) = 3;        // scope 3 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
        return;                          // scope 3 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
    }

    bb14: {
        unreachable;                     // scope 3 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
    }

    bb15: {
        _23 = ((_15 as Ready).0: std::option::Option<i32>); // scope 3 at ui/async-await/issues/issue-64964.rs:19:9: 19:32
        _10 = _23;                       // scope 5 at ui/async-await/issues/issue-64964.rs:19:9: 19:32
        _9 = Option::<i32>::unwrap(move _10) -> [return: bb21, unwind: bb16]; // scope 2 at ui/async-await/issues/issue-64964.rs:19:9: 19:41
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64964.rs:19:33: 19:39
                                         // + literal: Const { ty: fn(Option<i32>) -> i32 {Option::<i32>::unwrap}, val: Value(<ZST>) }
    }

    bb16 (cleanup): {
        _37 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64964.rs:17:16: 21:2]); // scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
        discriminant((*_37)) = 2;        // scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
        resume;                          // scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    }

    bb17: {
        _24 = move _2;                   // scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
        _26 = move _24;                  // scope 3 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
        goto -> bb10;                    // scope 3 at ui/async-await/issues/issue-64964.rs:19:26: 19:32
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    }

    bb20: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-64964.rs:17:16: 21:2
    }

    bb21: {
        goto -> bb3;                     // scope 2 at ui/async-await/issues/issue-64964.rs:19:9: 19:41
    }
}

fn bar::{closure#0}::{closure#0}(_1: Pin<&mut [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]>, _2: &mut Context<'_>) -> Poll<Option<i32>> {
    debug _task_context => _6;           // in scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
    debug x => (*((*(_1.0: &mut [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26])).0: &i32)); // in scope 0 at ui/async-await/issues/issue-64964.rs:18:9: 18:10
    let mut _0: std::task::Poll<std::option::Option<i32>>; // return place in scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
    let mut _3: i32;                     // in scope 0 at ui/async-await/issues/issue-64964.rs:19:22: 19:23
    let mut _4: &i32;                    // in scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
    let mut _5: std::option::Option<i32>; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
    let mut _6: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
    let mut _7: u32;                     // in scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
    let mut _8: &mut [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
    let mut _9: &mut [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
    let mut _10: &mut [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]; // in scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26

    bb0: {
        _8 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]); // scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
        _7 = discriminant((*_8));        // scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
        switchInt(move _7) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
    }

    bb1: {
        _6 = move _2;                    // scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
        _9 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]); // scope 0 at ui/async-await/issues/issue-64964.rs:19:22: 19:23
        _4 = deref_copy ((*_9).0: &i32); // scope 0 at ui/async-await/issues/issue-64964.rs:19:22: 19:23
        _3 = (*_4);                      // scope 0 at ui/async-await/issues/issue-64964.rs:19:22: 19:23
        _5 = Option::<i32>::Some(move _3); // scope 0 at ui/async-await/issues/issue-64964.rs:19:17: 19:24
        _0 = Poll::<Option<i32>>::Ready(move _5); // scope 0 at ui/async-await/issues/issue-64964.rs:19:26: 19:26
        _10 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64964.rs:19:9: 19:26]); // scope 0 at ui/async-await/issues/issue-64964.rs:19:26: 19:26
        discriminant((*_10)) = 1;        // scope 0 at ui/async-await/issues/issue-64964.rs:19:26: 19:26
        return;                          // scope 0 at ui/async-await/issues/issue-64964.rs:19:26: 19:26
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-64964.rs:19:9: 19:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-64964.rs:23:11: 23:11

    bb0: {
        return;                          // scope 0 at ui/async-await/issues/issue-64964.rs:23:13: 23:13
    }
}
