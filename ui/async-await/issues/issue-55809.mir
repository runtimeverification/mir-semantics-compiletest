// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo_async(_1: T) -> impl Future<Output = u8> {
    debug _v => _1;                      // in scope 0 at ui/async-await/issues/issue-55809.rs:10:23: 10:25
    let mut _0: impl std::future::Future<Output = u8>; // return place in scope 0 at ui/async-await/issues/issue-55809.rs:10:33: 10:35
    let mut _2: [async fn body@ui/async-await/issues/issue-55809.rs:10:49: 12:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2

    bb0: {
        _2 = [generator@ui/async-await/issues/issue-55809.rs:10:49: 12:2 (#0)] { _v: move _1 }; // scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
                                         // generator
                                         // + def_id: DefId(0:10 ~ issue_55809[6de6]::foo_async::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     u8,
                                         //     {},
                                         //     (T,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<u8, [async fn body@ui/async-await/issues/issue-55809.rs:10:49: 12:2]>(move _2) -> bb1; // scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:10:49: 12:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-55809.rs:10:49: 12:2]) -> [async fn body@ui/async-await/issues/issue-55809.rs:10:49: 12:2] {identity_future::<u8, [async fn body@ui/async-await/issues/issue-55809.rs:10:49: 12:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-55809.rs:12:2: 12:2
    }
}

fn foo_async::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-55809.rs:10:49: 12:2]>, _2: &mut Context<'_>) -> Poll<u8> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
    debug _v => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:10:49: 12:2])).0: T); // in scope 0 at ui/async-await/issues/issue-55809.rs:10:23: 10:25
    let mut _0: std::task::Poll<u8>;     // return place in scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
    let _3: T;                           // in scope 0 at ui/async-await/issues/issue-55809.rs:10:23: 10:25
    let mut _4: u8;                      // in scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
    let mut _6: u32;                     // in scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
    let mut _7: &mut [async fn body@ui/async-await/issues/issue-55809.rs:10:49: 12:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
    let mut _8: &mut [async fn body@ui/async-await/issues/issue-55809.rs:10:49: 12:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
    let mut _9: &mut [async fn body@ui/async-await/issues/issue-55809.rs:10:49: 12:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
    let mut _10: &mut [async fn body@ui/async-await/issues/issue-55809.rs:10:49: 12:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
    scope 1 {
        debug _v => _3;                  // in scope 1 at ui/async-await/issues/issue-55809.rs:10:23: 10:25
    }

    bb0: {
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:10:49: 12:2]); // scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
        switchInt(move _6) -> [0: bb1, 1: bb5, 2: bb4, otherwise: bb6]; // scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:10:49: 12:2]); // scope 0 at ui/async-await/issues/issue-55809.rs:10:23: 10:25
        _3 = move ((*_8).0: T);          // scope 0 at ui/async-await/issues/issue-55809.rs:10:23: 10:25
        _4 = const 0_u8;                 // scope 1 at ui/async-await/issues/issue-55809.rs:11:5: 11:6
        drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at ui/async-await/issues/issue-55809.rs:12:1: 12:2
    }

    bb2: {
        _0 = Poll::<u8>::Ready(move _4); // scope 0 at ui/async-await/issues/issue-55809.rs:12:2: 12:2
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:10:49: 12:2]); // scope 0 at ui/async-await/issues/issue-55809.rs:12:2: 12:2
        discriminant((*_9)) = 1;         // scope 0 at ui/async-await/issues/issue-55809.rs:12:2: 12:2
        return;                          // scope 0 at ui/async-await/issues/issue-55809.rs:12:2: 12:2
    }

    bb3 (cleanup): {
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:10:49: 12:2]); // scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
        discriminant((*_10)) = 2;        // scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
        resume;                          // scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
    }

    bb4: {
        assert(const false, "`async fn` resumed after panicking") -> bb4; // scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
    }

    bb5: {
        assert(const false, "`async fn` resumed after completion") -> bb5; // scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
    }

    bb6: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-55809.rs:10:49: 12:2
    }
}

fn bad(_1: T) -> impl Future<Output = u8> {
    debug v => _1;                       // in scope 0 at ui/async-await/issues/issue-55809.rs:14:17: 14:18
    let mut _0: impl std::future::Future<Output = u8>; // return place in scope 0 at ui/async-await/issues/issue-55809.rs:14:26: 14:28
    let mut _2: [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2

    bb0: {
        _2 = [generator@ui/async-await/issues/issue-55809.rs:14:42: 16:2 (#0)] { v: move _1 }; // scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
                                         // generator
                                         // + def_id: DefId(0:13 ~ issue_55809[6de6]::bad::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     u8,
                                         //     {std::future::ResumeTy, T, impl std::future::Future<Output = u8>, ()},
                                         //     (T,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<u8, [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]>(move _2) -> bb1; // scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:14:42: 16:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]) -> [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2] {identity_future::<u8, [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-55809.rs:16:2: 16:2
    }
}

fn bad::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]>, _2: &mut Context<'_>) -> Poll<u8> {
    debug _task_context => _18;          // in scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    debug v => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2])).0: T); // in scope 0 at ui/async-await/issues/issue-55809.rs:14:17: 14:18
    let mut _0: std::task::Poll<u8>;     // return place in scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    let _3: T;                           // in scope 0 at ui/async-await/issues/issue-55809.rs:14:17: 14:18
    let mut _4: impl std::future::Future<Output = u8>; // in scope 0 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
    let mut _5: impl std::future::Future<Output = u8>; // in scope 0 at ui/async-await/issues/issue-55809.rs:15:5: 15:17
    let mut _6: T;                       // in scope 0 at ui/async-await/issues/issue-55809.rs:15:15: 15:16
    let mut _7: std::task::Poll<u8>;     // in scope 0 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
    let mut _8: std::pin::Pin<&mut impl std::future::Future<Output = u8>>; // in scope 0 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
    let mut _9: &mut impl std::future::Future<Output = u8>; // in scope 0 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
    let mut _10: &mut impl std::future::Future<Output = u8>; // in scope 0 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:15:5: 15:23
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:15:5: 15:23
    let mut _13: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
    let mut _14: isize;                  // in scope 0 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
    let mut _16: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
    let mut _17: u8;                     // in scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    let mut _18: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    let mut _19: u32;                    // in scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    let mut _20: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    let mut _21: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    let mut _22: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    let mut _23: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    let mut _24: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    let mut _25: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    let mut _26: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    let mut _27: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    let mut _28: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    scope 1 {
        debug v => _3;                   // in scope 1 at ui/async-await/issues/issue-55809.rs:14:17: 14:18
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2])) as variant#3).0: impl std::future::Future<Output = u8>); // in scope 2 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
            let _15: u8;                 // in scope 2 at ui/async-await/issues/issue-55809.rs:15:5: 15:23
            scope 3 {
            }
            scope 4 {
                debug result => _15;     // in scope 4 at ui/async-await/issues/issue-55809.rs:15:5: 15:23
            }
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]); // scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
        _19 = discriminant((*_20));      // scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
        switchInt(move _19) -> [0: bb1, 1: bb15, 2: bb14, 3: bb13, otherwise: bb16]; // scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    }

    bb1: {
        _18 = move _2;                   // scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
        _21 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]); // scope 0 at ui/async-await/issues/issue-55809.rs:14:17: 14:18
        _3 = move ((*_21).0: T);         // scope 0 at ui/async-await/issues/issue-55809.rs:14:17: 14:18
        _6 = move _3;                    // scope 1 at ui/async-await/issues/issue-55809.rs:15:15: 15:16
        _5 = foo_async::<T>(move _6) -> [return: bb2, unwind: bb12]; // scope 1 at ui/async-await/issues/issue-55809.rs:15:5: 15:17
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:15:5: 15:14
                                         // + literal: Const { ty: fn(T) -> impl Future<Output = u8> {foo_async::<T>}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = <impl Future<Output = u8> as IntoFuture>::into_future(move _5) -> [return: bb3, unwind: bb12]; // scope 1 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:15:17: 15:23
                                         // + literal: Const { ty: fn(impl Future<Output = u8>) -> <impl Future<Output = u8> as IntoFuture>::IntoFuture {<impl Future<Output = u8> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]); // scope 1 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
        (((*_22) as variant#3).0: impl std::future::Future<Output = u8>) = move _4; // scope 1 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
        goto -> bb4;                     // scope 2 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
    }

    bb4: {
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]); // scope 3 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
        _10 = &mut (((*_23) as variant#3).0: impl std::future::Future<Output = u8>); // scope 3 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
        _9 = &mut (*_10);                // scope 3 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
        _8 = Pin::<&mut impl Future<Output = u8>>::new_unchecked(move _9) -> [return: bb5, unwind: bb11]; // scope 3 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:15:17: 15:23
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = u8>) -> Pin<&mut impl Future<Output = u8>> {Pin::<&mut impl Future<Output = u8>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = _18;                       // scope 3 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
        _12 = move _13;                  // scope 3 at ui/async-await/issues/issue-55809.rs:15:5: 15:23
        _11 = &mut (*_12);               // scope 3 at ui/async-await/issues/issue-55809.rs:15:5: 15:23
        _7 = <impl Future<Output = u8> as Future>::poll(move _8, move _11) -> [return: bb6, unwind: bb11]; // scope 3 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:15:17: 15:23
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = u8>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = u8> as Future>::Output> {<impl Future<Output = u8> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = discriminant(_7);          // scope 2 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
        switchInt(move _14) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
    }

    bb7: {
        _0 = Poll::<u8>::Pending;        // scope 2 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]); // scope 2 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
        discriminant((*_24)) = 3;        // scope 2 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
        return;                          // scope 2 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
    }

    bb8: {
        unreachable;                     // scope 2 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
    }

    bb9: {
        _15 = ((_7 as Ready).0: u8);     // scope 2 at ui/async-await/issues/issue-55809.rs:15:5: 15:23
        _17 = _15;                       // scope 4 at ui/async-await/issues/issue-55809.rs:15:5: 15:23
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]); // scope 1 at ui/async-await/issues/issue-55809.rs:15:22: 15:23
        drop((((*_25) as variant#3).0: impl std::future::Future<Output = u8>)) -> [return: bb10, unwind: bb12]; // scope 1 at ui/async-await/issues/issue-55809.rs:15:22: 15:23
    }

    bb10: {
        _0 = Poll::<u8>::Ready(move _17); // scope 0 at ui/async-await/issues/issue-55809.rs:16:2: 16:2
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]); // scope 0 at ui/async-await/issues/issue-55809.rs:16:2: 16:2
        discriminant((*_26)) = 1;        // scope 0 at ui/async-await/issues/issue-55809.rs:16:2: 16:2
        return;                          // scope 0 at ui/async-await/issues/issue-55809.rs:16:2: 16:2
    }

    bb11 (cleanup): {
        _27 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]); // scope 1 at ui/async-await/issues/issue-55809.rs:15:22: 15:23
        drop((((*_27) as variant#3).0: impl std::future::Future<Output = u8>)) -> bb12; // scope 1 at ui/async-await/issues/issue-55809.rs:15:22: 15:23
    }

    bb12 (cleanup): {
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:14:42: 16:2]); // scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
        discriminant((*_28)) = 2;        // scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
        resume;                          // scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    }

    bb13: {
        _16 = move _2;                   // scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
        _18 = move _16;                  // scope 2 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
        goto -> bb4;                     // scope 2 at ui/async-await/issues/issue-55809.rs:15:17: 15:23
    }

    bb14: {
        assert(const false, "`async fn` resumed after panicking") -> bb14; // scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    }

    bb15: {
        assert(const false, "`async fn` resumed after completion") -> bb15; // scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    }

    bb16: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-55809.rs:14:42: 16:2
    }
}

fn async_main() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 18:23
    let mut _1: [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2

    bb0: {
        _1 = [generator@ui/async-await/issues/issue-55809.rs:18:23: 24:2 (#0)]; // scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
                                         // generator
                                         // + def_id: DefId(0:15 ~ issue_55809[6de6]::async_main::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     for<'a, 'b, 'c> {std::future::ResumeTy, (), &'a mut (), impl std::future::Future<Output = u8>, impl std::future::Future<Output = u8>, impl std::future::Future<Output = u8>},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]>(move _1) -> bb1; // scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:18:23: 24:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]) -> [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2] {identity_future::<(), [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-55809.rs:24:2: 24:2
    }
}

fn async_main::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _43;          // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _3: impl std::future::Future<Output = u8>; // in scope 0 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
    let mut _4: impl std::future::Future<Output = u8>; // in scope 0 at ui/async-await/issues/issue-55809.rs:21:13: 21:24
    let mut _5: &mut ();                 // in scope 0 at ui/async-await/issues/issue-55809.rs:21:17: 21:23
    let mut _6: std::task::Poll<u8>;     // in scope 0 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
    let mut _7: std::pin::Pin<&mut impl std::future::Future<Output = u8>>; // in scope 0 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
    let mut _8: &mut impl std::future::Future<Output = u8>; // in scope 0 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
    let mut _9: &mut impl std::future::Future<Output = u8>; // in scope 0 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:21:13: 21:30
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:21:13: 21:30
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
    let mut _13: isize;                  // in scope 0 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
    let mut _16: impl std::future::Future<Output = u8>; // in scope 0 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
    let mut _17: impl std::future::Future<Output = u8>; // in scope 0 at ui/async-await/issues/issue-55809.rs:22:13: 22:30
    let mut _18: &mut ();                // in scope 0 at ui/async-await/issues/issue-55809.rs:22:23: 22:29
    let mut _19: std::task::Poll<u8>;    // in scope 0 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
    let mut _20: std::pin::Pin<&mut impl std::future::Future<Output = u8>>; // in scope 0 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
    let mut _21: &mut impl std::future::Future<Output = u8>; // in scope 0 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
    let mut _22: &mut impl std::future::Future<Output = u8>; // in scope 0 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
    let mut _23: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:22:13: 22:36
    let mut _24: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:22:13: 22:36
    let mut _25: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
    let mut _26: isize;                  // in scope 0 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
    let mut _28: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
    let mut _29: impl std::future::Future<Output = u8>; // in scope 0 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
    let mut _30: impl std::future::Future<Output = u8>; // in scope 0 at ui/async-await/issues/issue-55809.rs:23:13: 23:19
    let mut _31: ();                     // in scope 0 at ui/async-await/issues/issue-55809.rs:23:17: 23:18
    let mut _32: std::task::Poll<u8>;    // in scope 0 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
    let mut _33: std::pin::Pin<&mut impl std::future::Future<Output = u8>>; // in scope 0 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
    let mut _34: &mut impl std::future::Future<Output = u8>; // in scope 0 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
    let mut _35: &mut impl std::future::Future<Output = u8>; // in scope 0 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
    let mut _36: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:23:13: 23:25
    let mut _37: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:23:13: 23:25
    let mut _38: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
    let mut _39: isize;                  // in scope 0 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
    let mut _41: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
    let mut _42: ();                     // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _43: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _44: u32;                    // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _45: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _46: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _47: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _48: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _49: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _50: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _51: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _52: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _53: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _54: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _55: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _56: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _57: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _58: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _59: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    let mut _60: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]; // in scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    scope 1 {
        debug v => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2])) as variant#3).0: ()); // in scope 1 at ui/async-await/issues/issue-55809.rs:19:9: 19:14
        scope 2 {
            scope 6 {
                scope 10 {
                }
                scope 11 {
                    debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2])) as variant#5).1: impl std::future::Future<Output = u8>); // in scope 11 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
                    let _40: u8;         // in scope 11 at ui/async-await/issues/issue-55809.rs:23:13: 23:25
                    scope 12 {
                    }
                    scope 13 {
                        debug result => _40; // in scope 13 at ui/async-await/issues/issue-55809.rs:23:13: 23:25
                    }
                }
            }
            scope 7 {
                debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2])) as variant#4).1: impl std::future::Future<Output = u8>); // in scope 7 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
                let _27: u8;             // in scope 7 at ui/async-await/issues/issue-55809.rs:22:13: 22:36
                scope 8 {
                }
                scope 9 {
                    debug result => _27; // in scope 9 at ui/async-await/issues/issue-55809.rs:22:13: 22:36
                }
            }
        }
        scope 3 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2])) as variant#3).1: impl std::future::Future<Output = u8>); // in scope 3 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
            let _14: u8;                 // in scope 3 at ui/async-await/issues/issue-55809.rs:21:13: 21:30
            scope 4 {
            }
            scope 5 {
                debug result => _14;     // in scope 5 at ui/async-await/issues/issue-55809.rs:21:13: 21:30
            }
        }
    }

    bb0: {
        _45 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]); // scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
        _44 = discriminant((*_45));      // scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
        switchInt(move _44) -> [0: bb1, 1: bb31, 2: bb30, 3: bb27, 4: bb28, 5: bb29, otherwise: bb32]; // scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    }

    bb1: {
        _43 = move _2;                   // scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
        _46 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]); // scope 0 at ui/async-await/issues/issue-55809.rs:19:17: 19:19
        (((*_46) as variant#3).0: ()) = (); // scope 0 at ui/async-await/issues/issue-55809.rs:19:17: 19:19
        _47 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]); // scope 1 at ui/async-await/issues/issue-55809.rs:21:17: 21:23
        _5 = &mut (((*_47) as variant#3).0: ()); // scope 1 at ui/async-await/issues/issue-55809.rs:21:17: 21:23
        _4 = bad::<&mut ()>(move _5) -> [return: bb2, unwind: bb26]; // scope 1 at ui/async-await/issues/issue-55809.rs:21:13: 21:24
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:21:13: 21:16
                                         // + literal: Const { ty: fn(&mut ()) -> impl Future<Output = u8> {bad::<&mut ()>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <impl Future<Output = u8> as IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb26]; // scope 1 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:21:24: 21:30
                                         // + literal: Const { ty: fn(impl Future<Output = u8>) -> <impl Future<Output = u8> as IntoFuture>::IntoFuture {<impl Future<Output = u8> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _48 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]); // scope 1 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
        (((*_48) as variant#3).1: impl std::future::Future<Output = u8>) = move _3; // scope 1 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
        goto -> bb4;                     // scope 3 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
    }

    bb4: {
        _49 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]); // scope 4 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
        _9 = &mut (((*_49) as variant#3).1: impl std::future::Future<Output = u8>); // scope 4 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
        _8 = &mut (*_9);                 // scope 4 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
        _7 = Pin::<&mut impl Future<Output = u8>>::new_unchecked(move _8) -> [return: bb5, unwind: bb26]; // scope 4 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:21:24: 21:30
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = u8>) -> Pin<&mut impl Future<Output = u8>> {Pin::<&mut impl Future<Output = u8>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = _43;                       // scope 4 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
        _11 = move _12;                  // scope 4 at ui/async-await/issues/issue-55809.rs:21:13: 21:30
        _10 = &mut (*_11);               // scope 4 at ui/async-await/issues/issue-55809.rs:21:13: 21:30
        _6 = <impl Future<Output = u8> as Future>::poll(move _7, move _10) -> [return: bb6, unwind: bb26]; // scope 4 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:21:24: 21:30
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = u8>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = u8> as Future>::Output> {<impl Future<Output = u8> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = discriminant(_6);          // scope 3 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
        switchInt(move _13) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 3 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 3 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
        _50 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]); // scope 3 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
        discriminant((*_50)) = 3;        // scope 3 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
        return;                          // scope 3 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
    }

    bb8: {
        unreachable;                     // scope 3 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
    }

    bb9: {
        _14 = ((_6 as Ready).0: u8);     // scope 3 at ui/async-await/issues/issue-55809.rs:21:13: 21:30
        _51 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]); // scope 2 at ui/async-await/issues/issue-55809.rs:22:23: 22:29
        _18 = &mut (((*_51) as variant#3).0: ()); // scope 2 at ui/async-await/issues/issue-55809.rs:22:23: 22:29
        _17 = foo_async::<&mut ()>(move _18) -> [return: bb10, unwind: bb26]; // scope 2 at ui/async-await/issues/issue-55809.rs:22:13: 22:30
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:22:13: 22:22
                                         // + literal: Const { ty: fn(&mut ()) -> impl Future<Output = u8> {foo_async::<&mut ()>}, val: Value(<ZST>) }
    }

    bb10: {
        _16 = <impl Future<Output = u8> as IntoFuture>::into_future(move _17) -> [return: bb11, unwind: bb26]; // scope 2 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:22:30: 22:36
                                         // + literal: Const { ty: fn(impl Future<Output = u8>) -> <impl Future<Output = u8> as IntoFuture>::IntoFuture {<impl Future<Output = u8> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb11: {
        _52 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]); // scope 2 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
        (((*_52) as variant#4).1: impl std::future::Future<Output = u8>) = move _16; // scope 2 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
        goto -> bb12;                    // scope 7 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
    }

    bb12: {
        _53 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]); // scope 8 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
        _22 = &mut (((*_53) as variant#4).1: impl std::future::Future<Output = u8>); // scope 8 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
        _21 = &mut (*_22);               // scope 8 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
        _20 = Pin::<&mut impl Future<Output = u8>>::new_unchecked(move _21) -> [return: bb13, unwind: bb26]; // scope 8 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:22:30: 22:36
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = u8>) -> Pin<&mut impl Future<Output = u8>> {Pin::<&mut impl Future<Output = u8>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb13: {
        _25 = _43;                       // scope 8 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
        _24 = move _25;                  // scope 8 at ui/async-await/issues/issue-55809.rs:22:13: 22:36
        _23 = &mut (*_24);               // scope 8 at ui/async-await/issues/issue-55809.rs:22:13: 22:36
        _19 = <impl Future<Output = u8> as Future>::poll(move _20, move _23) -> [return: bb14, unwind: bb26]; // scope 8 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:22:30: 22:36
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = u8>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = u8> as Future>::Output> {<impl Future<Output = u8> as Future>::poll}, val: Value(<ZST>) }
    }

    bb14: {
        _26 = discriminant(_19);         // scope 7 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
        switchInt(move _26) -> [0: bb17, 1: bb15, otherwise: bb16]; // scope 7 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
    }

    bb15: {
        _0 = Poll::<()>::Pending;        // scope 7 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
        _54 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]); // scope 7 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
        discriminant((*_54)) = 4;        // scope 7 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
        return;                          // scope 7 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
    }

    bb16: {
        unreachable;                     // scope 7 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
    }

    bb17: {
        _27 = ((_19 as Ready).0: u8);    // scope 7 at ui/async-await/issues/issue-55809.rs:22:13: 22:36
        _55 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]); // scope 6 at ui/async-await/issues/issue-55809.rs:23:17: 23:18
        _31 = (((*_55) as variant#3).0: ()); // scope 6 at ui/async-await/issues/issue-55809.rs:23:17: 23:18
        _30 = bad::<()>(move _31) -> [return: bb18, unwind: bb26]; // scope 6 at ui/async-await/issues/issue-55809.rs:23:13: 23:19
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:23:13: 23:16
                                         // + literal: Const { ty: fn(()) -> impl Future<Output = u8> {bad::<()>}, val: Value(<ZST>) }
    }

    bb18: {
        _29 = <impl Future<Output = u8> as IntoFuture>::into_future(move _30) -> [return: bb19, unwind: bb26]; // scope 6 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:23:19: 23:25
                                         // + literal: Const { ty: fn(impl Future<Output = u8>) -> <impl Future<Output = u8> as IntoFuture>::IntoFuture {<impl Future<Output = u8> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb19: {
        _56 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]); // scope 6 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
        (((*_56) as variant#5).1: impl std::future::Future<Output = u8>) = move _29; // scope 6 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
        goto -> bb20;                    // scope 11 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
    }

    bb20: {
        _57 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]); // scope 12 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
        _35 = &mut (((*_57) as variant#5).1: impl std::future::Future<Output = u8>); // scope 12 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
        _34 = &mut (*_35);               // scope 12 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
        _33 = Pin::<&mut impl Future<Output = u8>>::new_unchecked(move _34) -> [return: bb21, unwind: bb26]; // scope 12 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:23:19: 23:25
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = u8>) -> Pin<&mut impl Future<Output = u8>> {Pin::<&mut impl Future<Output = u8>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb21: {
        _38 = _43;                       // scope 12 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
        _37 = move _38;                  // scope 12 at ui/async-await/issues/issue-55809.rs:23:13: 23:25
        _36 = &mut (*_37);               // scope 12 at ui/async-await/issues/issue-55809.rs:23:13: 23:25
        _32 = <impl Future<Output = u8> as Future>::poll(move _33, move _36) -> [return: bb22, unwind: bb26]; // scope 12 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:23:19: 23:25
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = u8>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = u8> as Future>::Output> {<impl Future<Output = u8> as Future>::poll}, val: Value(<ZST>) }
    }

    bb22: {
        _39 = discriminant(_32);         // scope 11 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
        switchInt(move _39) -> [0: bb25, 1: bb23, otherwise: bb24]; // scope 11 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
    }

    bb23: {
        _0 = Poll::<()>::Pending;        // scope 11 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
        _58 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]); // scope 11 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
        discriminant((*_58)) = 5;        // scope 11 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
        return;                          // scope 11 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
    }

    bb24: {
        unreachable;                     // scope 11 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
    }

    bb25: {
        _40 = ((_32 as Ready).0: u8);    // scope 11 at ui/async-await/issues/issue-55809.rs:23:13: 23:25
        _42 = const ();                  // scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
        _0 = Poll::<()>::Ready(move _42); // scope 0 at ui/async-await/issues/issue-55809.rs:24:2: 24:2
        _59 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]); // scope 0 at ui/async-await/issues/issue-55809.rs:24:2: 24:2
        discriminant((*_59)) = 1;        // scope 0 at ui/async-await/issues/issue-55809.rs:24:2: 24:2
        return;                          // scope 0 at ui/async-await/issues/issue-55809.rs:24:2: 24:2
    }

    bb26 (cleanup): {
        _60 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55809.rs:18:23: 24:2]); // scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
        discriminant((*_60)) = 2;        // scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
        resume;                          // scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    }

    bb27: {
        _15 = move _2;                   // scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
        _43 = move _15;                  // scope 3 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
        goto -> bb4;                     // scope 3 at ui/async-await/issues/issue-55809.rs:21:24: 21:30
    }

    bb28: {
        _28 = move _2;                   // scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
        _43 = move _28;                  // scope 7 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
        goto -> bb12;                    // scope 7 at ui/async-await/issues/issue-55809.rs:22:30: 22:36
    }

    bb29: {
        _41 = move _2;                   // scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
        _43 = move _41;                  // scope 11 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
        goto -> bb20;                    // scope 11 at ui/async-await/issues/issue-55809.rs:23:19: 23:25
    }

    bb30: {
        assert(const false, "`async fn` resumed after panicking") -> bb30; // scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    }

    bb31: {
        assert(const false, "`async fn` resumed after completion") -> bb31; // scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    }

    bb32: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-55809.rs:18:23: 24:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-55809.rs:26:11: 26:11
    let mut _1: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-55809.rs:27:13: 27:25
    scope 1 {
    }

    bb0: {
        _1 = async_main() -> bb1;        // scope 0 at ui/async-await/issues/issue-55809.rs:27:13: 27:25
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55809.rs:27:13: 27:23
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {async_main}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/async-await/issues/issue-55809.rs:27:25: 27:26
    }

    bb2: {
        return;                          // scope 0 at ui/async-await/issues/issue-55809.rs:28:2: 28:2
    }
}
