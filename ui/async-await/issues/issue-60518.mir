// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: impl Iterator<Item = ()>) -> impl Future<Output = ()> {
    debug ws => _1;                      // in scope 0 at ui/async-await/issues/issue-60518.rs:8:14: 8:16
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:44
    let mut _2: [async fn body@ui/async-await/issues/issue-60518.rs:8:44: 8:46]; // in scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46

    bb0: {
        _2 = [generator@ui/async-await/issues/issue-60518.rs:8:44: 8:46 (#0)] { ws: move _1 }; // scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
                                         // generator
                                         // + def_id: DefId(0:4 ~ issue_60518[f5cf]::foo::{closure#0})
                                         // + substs: [
                                         //     impl Iterator<Item = ()>,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (impl Iterator<Item = ()>,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issues/issue-60518.rs:8:44: 8:46]>(move _2) -> bb1; // scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-60518.rs:8:44: 8:46
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-60518.rs:8:44: 8:46]) -> [async fn body@ui/async-await/issues/issue-60518.rs:8:44: 8:46] {identity_future::<(), [async fn body@ui/async-await/issues/issue-60518.rs:8:44: 8:46]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-60518.rs:8:46: 8:46
    }
}

fn foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-60518.rs:8:44: 8:46]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
    debug ws => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-60518.rs:8:44: 8:46])).0: impl Iterator<Item = ()>); // in scope 0 at ui/async-await/issues/issue-60518.rs:8:14: 8:16
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
    let _3: impl Iterator<Item = ()>;    // in scope 0 at ui/async-await/issues/issue-60518.rs:8:14: 8:16
    let mut _4: ();                      // in scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
    let mut _6: u32;                     // in scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
    let mut _7: &mut [async fn body@ui/async-await/issues/issue-60518.rs:8:44: 8:46]; // in scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
    let mut _8: &mut [async fn body@ui/async-await/issues/issue-60518.rs:8:44: 8:46]; // in scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
    let mut _9: &mut [async fn body@ui/async-await/issues/issue-60518.rs:8:44: 8:46]; // in scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
    let mut _10: &mut [async fn body@ui/async-await/issues/issue-60518.rs:8:44: 8:46]; // in scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
    scope 1 {
        debug ws => _3;                  // in scope 1 at ui/async-await/issues/issue-60518.rs:8:14: 8:16
    }

    bb0: {
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-60518.rs:8:44: 8:46]); // scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
        switchInt(move _6) -> [0: bb1, 1: bb5, 2: bb4, otherwise: bb6]; // scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-60518.rs:8:44: 8:46]); // scope 0 at ui/async-await/issues/issue-60518.rs:8:14: 8:16
        _3 = move ((*_8).0: impl Iterator<Item = ()>); // scope 0 at ui/async-await/issues/issue-60518.rs:8:14: 8:16
        _4 = const ();                   // scope 1 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
        drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at ui/async-await/issues/issue-60518.rs:8:45: 8:46
    }

    bb2: {
        _0 = Poll::<()>::Ready(move _4); // scope 0 at ui/async-await/issues/issue-60518.rs:8:46: 8:46
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-60518.rs:8:44: 8:46]); // scope 0 at ui/async-await/issues/issue-60518.rs:8:46: 8:46
        discriminant((*_9)) = 1;         // scope 0 at ui/async-await/issues/issue-60518.rs:8:46: 8:46
        return;                          // scope 0 at ui/async-await/issues/issue-60518.rs:8:46: 8:46
    }

    bb3 (cleanup): {
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-60518.rs:8:44: 8:46]); // scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
        discriminant((*_10)) = 2;        // scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
        resume;                          // scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
    }

    bb4: {
        assert(const false, "`async fn` resumed after panicking") -> bb4; // scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
    }

    bb5: {
        assert(const false, "`async fn` resumed after completion") -> bb5; // scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
    }

    bb6: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-60518.rs:8:44: 8:46
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-60518.rs:10:11: 10:11

    bb0: {
        return;                          // scope 0 at ui/async-await/issues/issue-60518.rs:10:13: 10:13
    }
}
