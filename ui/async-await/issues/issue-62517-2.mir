// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &()) -> impl Future<Output = impl Alpha<(dyn Object + 'static)>> {
    debug _ => _1;                       // in scope 0 at ui/async-await/issues/issue-62517-2.rs:12:18: 12:19
    let mut _0: impl std::future::Future<Output = impl Alpha<(dyn Object + 'static)>>; // return place in scope 0 at ui/async-await/issues/issue-62517-2.rs:12:32: 12:54
    let mut _2: [async fn body@ui/async-await/issues/issue-62517-2.rs:12:55: 12:57]; // in scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57

    bb0: {
        _2 = [generator@ui/async-await/issues/issue-62517-2.rs:12:55: 12:57 (#0)] { _: _1 }; // scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
                                         // generator
                                         // + def_id: DefId(0:8 ~ issue_62517_2[8971]::foo::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (&(),),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issues/issue-62517-2.rs:12:55: 12:57]>(move _2) -> bb1; // scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-62517-2.rs:12:55: 12:57]) -> [async fn body@ui/async-await/issues/issue-62517-2.rs:12:55: 12:57] {identity_future::<(), [async fn body@ui/async-await/issues/issue-62517-2.rs:12:55: 12:57]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-62517-2.rs:12:57: 12:57
    }
}

fn foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-62517-2.rs:12:55: 12:57]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-62517-2.rs:12:55: 12:57])).0: &()); // in scope 0 at ui/async-await/issues/issue-62517-2.rs:12:18: 12:19
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
    let mut _3: &();                     // in scope 0 at ui/async-await/issues/issue-62517-2.rs:12:18: 12:19
    let mut _4: ();                      // in scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
    let mut _6: u32;                     // in scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
    let mut _7: &mut [async fn body@ui/async-await/issues/issue-62517-2.rs:12:55: 12:57]; // in scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
    let mut _8: &mut [async fn body@ui/async-await/issues/issue-62517-2.rs:12:55: 12:57]; // in scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
    let mut _9: &mut [async fn body@ui/async-await/issues/issue-62517-2.rs:12:55: 12:57]; // in scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
    scope 1 {
        debug _ => _3;                   // in scope 1 at ui/async-await/issues/issue-62517-2.rs:12:18: 12:19
        scope 2 {
        }
    }

    bb0: {
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-62517-2.rs:12:55: 12:57]); // scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
        switchInt(move _6) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-62517-2.rs:12:55: 12:57]); // scope 0 at ui/async-await/issues/issue-62517-2.rs:12:18: 12:19
        _3 = ((*_8).0: &());             // scope 0 at ui/async-await/issues/issue-62517-2.rs:12:18: 12:19
        _4 = const ();                   // scope 2 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
        _0 = Poll::<()>::Ready(move _4); // scope 0 at ui/async-await/issues/issue-62517-2.rs:12:57: 12:57
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-62517-2.rs:12:55: 12:57]); // scope 0 at ui/async-await/issues/issue-62517-2.rs:12:57: 12:57
        discriminant((*_9)) = 1;         // scope 0 at ui/async-await/issues/issue-62517-2.rs:12:57: 12:57
        return;                          // scope 0 at ui/async-await/issues/issue-62517-2.rs:12:57: 12:57
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-62517-2.rs:12:55: 12:57
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-62517-2.rs:16:11: 16:11

    bb0: {
        return;                          // scope 0 at ui/async-await/issues/issue-62517-2.rs:16:14: 16:14
    }
}
