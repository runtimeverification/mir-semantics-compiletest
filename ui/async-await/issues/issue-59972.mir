// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn uninhabited_async() -> Uninhabited {
    let mut _0: Uninhabited;             // return place in scope 0 at ui/async-await/issues/issue-59972.rs:11:27: 11:38
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:86:9: 86:77

    bb0: {
        _1 = core::panicking::panic(const "internal error: entered unreachable code"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:86:9: 86:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:86:9: 86:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:86:34: 86:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn noop() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:17
    let mut _1: [async fn body@ui/async-await/issues/issue-59972.rs:15:17: 15:20]; // in scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20

    bb0: {
        _1 = [generator@ui/async-await/issues/issue-59972.rs:15:17: 15:20 (#0)]; // scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20
                                         // generator
                                         // + def_id: DefId(0:6 ~ issue_59972[bdd9]::noop::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issues/issue-59972.rs:15:17: 15:20]>(move _1) -> bb1; // scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-59972.rs:15:17: 15:20
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-59972.rs:15:17: 15:20]) -> [async fn body@ui/async-await/issues/issue-59972.rs:15:17: 15:20] {identity_future::<(), [async fn body@ui/async-await/issues/issue-59972.rs:15:17: 15:20]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-59972.rs:15:20: 15:20
    }
}

fn noop::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-59972.rs:15:17: 15:20]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20
    let mut _3: ();                      // in scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20
    let mut _5: u32;                     // in scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20
    let mut _6: &mut [async fn body@ui/async-await/issues/issue-59972.rs:15:17: 15:20]; // in scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20
    let mut _7: &mut [async fn body@ui/async-await/issues/issue-59972.rs:15:17: 15:20]; // in scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20

    bb0: {
        _6 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-59972.rs:15:17: 15:20]); // scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20
        _3 = const ();                   // scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/issues/issue-59972.rs:15:20: 15:20
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-59972.rs:15:17: 15:20]); // scope 0 at ui/async-await/issues/issue-59972.rs:15:20: 15:20
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/issues/issue-59972.rs:15:20: 15:20
        return;                          // scope 0 at ui/async-await/issues/issue-59972.rs:15:20: 15:20
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-59972.rs:15:17: 15:20
    }
}

fn contains_never() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 17:27
    let mut _1: [async fn body@ui/async-await/issues/issue-59972.rs:17:27: 21:2]; // in scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2

    bb0: {
        _1 = [generator@ui/async-await/issues/issue-59972.rs:17:27: 21:2 (#0)]; // scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
                                         // generator
                                         // + def_id: DefId(0:8 ~ issue_59972[bdd9]::contains_never::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, Uninhabited, impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issues/issue-59972.rs:17:27: 21:2]>(move _1) -> bb1; // scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-59972.rs:17:27: 21:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-59972.rs:17:27: 21:2]) -> [async fn body@ui/async-await/issues/issue-59972.rs:17:27: 21:2] {identity_future::<(), [async fn body@ui/async-await/issues/issue-59972.rs:17:27: 21:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-59972.rs:21:2: 21:2
    }
}

fn contains_never::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-59972.rs:17:27: 21:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _7;           // in scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
    let _3: Uninhabited;                 // in scope 0 at ui/async-await/issues/issue-59972.rs:18:9: 18:14
    let mut _7: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
    let mut _8: u32;                     // in scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
    let mut _9: &mut [async fn body@ui/async-await/issues/issue-59972.rs:17:27: 21:2]; // in scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
    let mut _10: &mut [async fn body@ui/async-await/issues/issue-59972.rs:17:27: 21:2]; // in scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
    scope 1 {
        debug error => _3;               // in scope 1 at ui/async-await/issues/issue-59972.rs:18:9: 18:14
        let mut _4: impl std::future::Future<Output = ()>; // in scope 1 at ui/async-await/issues/issue-59972.rs:19:11: 19:17
        let _6: Uninhabited;             // in scope 1 at ui/async-await/issues/issue-59972.rs:20:9: 20:15
        scope 2 {
            debug __awaitee => _4;       // in scope 2 at ui/async-await/issues/issue-59972.rs:19:11: 19:17
            let _5: ();                  // in scope 2 at ui/async-await/issues/issue-59972.rs:19:5: 19:17
            scope 3 {
            }
            scope 4 {
                debug result => _5;      // in scope 4 at ui/async-await/issues/issue-59972.rs:19:5: 19:17
            }
        }
        scope 5 {
            debug error2 => _6;          // in scope 5 at ui/async-await/issues/issue-59972.rs:20:9: 20:15
        }
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-59972.rs:17:27: 21:2]); // scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
        _8 = discriminant((*_9));        // scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
        switchInt(move _8) -> [0: bb1, 2: bb3, otherwise: bb4]; // scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
    }

    bb1: {
        _7 = move _2;                    // scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
        _3 = uninhabited_async() -> bb2; // scope 0 at ui/async-await/issues/issue-59972.rs:18:17: 18:36
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-59972.rs:18:17: 18:34
                                         // + literal: Const { ty: fn() -> Uninhabited {uninhabited_async}, val: Value(<ZST>) }
    }

    bb2 (cleanup): {
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-59972.rs:17:27: 21:2]); // scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
        discriminant((*_10)) = 2;        // scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
        resume;                          // scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
    }

    bb3: {
        assert(const false, "`async fn` resumed after panicking") -> bb3; // scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
    }

    bb4: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-59972.rs:17:27: 21:2
    }
}

fn overlap_never() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 23:26
    let mut _1: [async fn body@ui/async-await/issues/issue-59972.rs:23:26: 30:2]; // in scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2

    bb0: {
        _1 = [generator@ui/async-await/issues/issue-59972.rs:23:26: 30:2 (#0)]; // scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
                                         // generator
                                         // + def_id: DefId(0:10 ~ issue_59972[bdd9]::overlap_never::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, Uninhabited, impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issues/issue-59972.rs:23:26: 30:2]>(move _1) -> bb1; // scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-59972.rs:23:26: 30:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-59972.rs:23:26: 30:2]) -> [async fn body@ui/async-await/issues/issue-59972.rs:23:26: 30:2] {identity_future::<(), [async fn body@ui/async-await/issues/issue-59972.rs:23:26: 30:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-59972.rs:30:2: 30:2
    }
}

fn overlap_never::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-59972.rs:23:26: 30:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _9;           // in scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
    let _3: Uninhabited;                 // in scope 0 at ui/async-await/issues/issue-59972.rs:24:9: 24:15
    let mut _9: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
    let mut _10: u32;                    // in scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
    let mut _11: &mut [async fn body@ui/async-await/issues/issue-59972.rs:23:26: 30:2]; // in scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
    let mut _12: &mut [async fn body@ui/async-await/issues/issue-59972.rs:23:26: 30:2]; // in scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
    scope 1 {
        debug error1 => _3;              // in scope 1 at ui/async-await/issues/issue-59972.rs:24:9: 24:15
        let mut _4: impl std::future::Future<Output = ()>; // in scope 1 at ui/async-await/issues/issue-59972.rs:25:11: 25:17
        let _6: Uninhabited;             // in scope 1 at ui/async-await/issues/issue-59972.rs:26:9: 26:15
        scope 2 {
            debug __awaitee => _4;       // in scope 2 at ui/async-await/issues/issue-59972.rs:25:11: 25:17
            let _5: ();                  // in scope 2 at ui/async-await/issues/issue-59972.rs:25:5: 25:17
            scope 3 {
            }
            scope 4 {
                debug result => _5;      // in scope 4 at ui/async-await/issues/issue-59972.rs:25:5: 25:17
            }
        }
        scope 5 {
            debug error2 => _6;          // in scope 5 at ui/async-await/issues/issue-59972.rs:26:9: 26:15
            let mut _7: impl std::future::Future<Output = ()>; // in scope 5 at ui/async-await/issues/issue-59972.rs:28:11: 28:17
            scope 6 {
                debug __awaitee => _7;   // in scope 6 at ui/async-await/issues/issue-59972.rs:28:11: 28:17
                let _8: ();              // in scope 6 at ui/async-await/issues/issue-59972.rs:28:5: 28:17
                scope 7 {
                }
                scope 8 {
                    debug result => _8;  // in scope 8 at ui/async-await/issues/issue-59972.rs:28:5: 28:17
                }
            }
        }
    }

    bb0: {
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-59972.rs:23:26: 30:2]); // scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
        _10 = discriminant((*_11));      // scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
        switchInt(move _10) -> [0: bb1, 2: bb3, otherwise: bb4]; // scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
    }

    bb1: {
        _9 = move _2;                    // scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
        _3 = uninhabited_async() -> bb2; // scope 0 at ui/async-await/issues/issue-59972.rs:24:18: 24:37
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-59972.rs:24:18: 24:35
                                         // + literal: Const { ty: fn() -> Uninhabited {uninhabited_async}, val: Value(<ZST>) }
    }

    bb2 (cleanup): {
        _12 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-59972.rs:23:26: 30:2]); // scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
        discriminant((*_12)) = 2;        // scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
        resume;                          // scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
    }

    bb3: {
        assert(const false, "`async fn` resumed after panicking") -> bb3; // scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
    }

    bb4: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-59972.rs:23:26: 30:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-59972.rs:33:11: 33:11

    bb0: {
        return;                          // scope 0 at ui/async-await/issues/issue-59972.rs:34:2: 34:2
    }
}
