// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/issues/issue-53249.rs:13:10: 13:15>::fmt(_1: &Lazy<F>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/async-await/issues/issue-53249.rs:13:10: 13:15
    debug f => _2;                       // in scope 0 at ui/async-await/issues/issue-53249.rs:13:10: 13:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/async-await/issues/issue-53249.rs:13:10: 13:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/async-await/issues/issue-53249.rs:13:10: 13:15
    let mut _4: &str;                    // in scope 0 at ui/async-await/issues/issue-53249.rs:13:10: 13:15
    let _5: &str;                        // in scope 0 at ui/async-await/issues/issue-53249.rs:13:10: 13:15
    let mut _6: &str;                    // in scope 0 at ui/async-await/issues/issue-53249.rs:16:5: 16:17
    let _7: &str;                        // in scope 0 at ui/async-await/issues/issue-53249.rs:16:5: 16:17
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/async-await/issues/issue-53249.rs:16:5: 16:17
    let mut _9: &&std::option::Option<F>; // in scope 0 at ui/async-await/issues/issue-53249.rs:16:5: 16:17
    let _10: &&std::option::Option<F>;   // in scope 0 at ui/async-await/issues/issue-53249.rs:16:5: 16:17
    let _11: &std::option::Option<F>;    // in scope 0 at ui/async-await/issues/issue-53249.rs:16:5: 16:17

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/async-await/issues/issue-53249.rs:13:10: 13:15
        _5 = const "Lazy";               // scope 0 at ui/async-await/issues/issue-53249.rs:13:10: 13:15
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:13:10: 13:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/async-await/issues/issue-53249.rs:13:10: 13:15
        _7 = const "f";                  // scope 0 at ui/async-await/issues/issue-53249.rs:16:5: 16:17
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:16:5: 16:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/async-await/issues/issue-53249.rs:16:5: 16:17
        _11 = &((*_1).0: std::option::Option<F>); // scope 0 at ui/async-await/issues/issue-53249.rs:16:5: 16:17
        _10 = &_11;                      // scope 0 at ui/async-await/issues/issue-53249.rs:16:5: 16:17
        _9 = _10;                        // scope 0 at ui/async-await/issues/issue-53249.rs:16:5: 16:17
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/async-await/issues/issue-53249.rs:16:5: 16:17
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/async-await/issues/issue-53249.rs:13:10: 13:15
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:13:10: 13:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-53249.rs:13:15: 13:15
    }
}

fn lazy(_1: F) -> Lazy<F> {
    debug f => _1;                       // in scope 0 at ui/async-await/issues/issue-53249.rs:21:19: 21:20
    let mut _0: Lazy<F>;                 // return place in scope 0 at ui/async-await/issues/issue-53249.rs:21:28: 21:35
    let mut _2: std::option::Option<F>;  // in scope 0 at ui/async-await/issues/issue-53249.rs:24:15: 24:22
    let mut _3: F;                       // in scope 0 at ui/async-await/issues/issue-53249.rs:24:20: 24:21

    bb0: {
        _3 = move _1;                    // scope 0 at ui/async-await/issues/issue-53249.rs:24:20: 24:21
        _2 = Option::<F>::Some(move _3); // scope 0 at ui/async-await/issues/issue-53249.rs:24:15: 24:22
        _0 = Lazy::<F> { f: move _2 };   // scope 0 at ui/async-await/issues/issue-53249.rs:24:5: 24:24
        return;                          // scope 0 at ui/async-await/issues/issue-53249.rs:25:2: 25:2
    }
}

fn <impl at ui/async-await/issues/issue-53249.rs:27:1: 27:30>::poll(_1: Pin<&mut Lazy<F>>, _2: &mut Context<'_>) -> Poll<R> {
    debug self => _1;                    // in scope 0 at ui/async-await/issues/issue-53249.rs:32:13: 32:21
    debug cx => _2;                      // in scope 0 at ui/async-await/issues/issue-53249.rs:32:39: 32:41
    let mut _0: std::task::Poll<R>;      // return place in scope 0 at ui/async-await/issues/issue-53249.rs:32:66: 32:73
    let mut _3: R;                       // in scope 0 at ui/async-await/issues/issue-53249.rs:33:21: 33:49
    let mut _4: F;                       // in scope 0 at ui/async-await/issues/issue-53249.rs:33:21: 33:45
    let mut _5: std::option::Option<F>;  // in scope 0 at ui/async-await/issues/issue-53249.rs:33:22: 33:35
    let mut _6: &mut std::option::Option<F>; // in scope 0 at ui/async-await/issues/issue-53249.rs:33:22: 33:35
    let mut _7: &mut Lazy<F>;            // in scope 0 at ui/async-await/issues/issue-53249.rs:33:22: 33:28
    let mut _8: &mut std::pin::Pin<&mut Lazy<F>>; // in scope 0 at ui/async-await/issues/issue-53249.rs:33:22: 33:26
    let mut _9: (&mut std::task::Context<'_>,); // in scope 0 at ui/async-await/issues/issue-53249.rs:33:21: 33:49
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-53249.rs:33:46: 33:48

    bb0: {
        _8 = &mut _1;                    // scope 0 at ui/async-await/issues/issue-53249.rs:33:22: 33:26
        _7 = <Pin<&mut Lazy<F>> as DerefMut>::deref_mut(move _8) -> bb1; // scope 0 at ui/async-await/issues/issue-53249.rs:33:22: 33:28
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:33:22: 33:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut Pin<&mut Lazy<F>>) -> &'a mut <Pin<&mut Lazy<F>> as Deref>::Target {<Pin<&mut Lazy<F>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &mut ((*_7).0: std::option::Option<F>); // scope 0 at ui/async-await/issues/issue-53249.rs:33:22: 33:35
        _5 = Option::<F>::take(move _6) -> bb2; // scope 0 at ui/async-await/issues/issue-53249.rs:33:22: 33:35
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:33:29: 33:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Option<F>) -> Option<F> {Option::<F>::take}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = Option::<F>::unwrap(move _5) -> bb3; // scope 0 at ui/async-await/issues/issue-53249.rs:33:21: 33:45
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:33:36: 33:42
                                         // + literal: Const { ty: fn(Option<F>) -> F {Option::<F>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &mut (*_2);                // scope 0 at ui/async-await/issues/issue-53249.rs:33:46: 33:48
        _9 = (move _10,);                // scope 0 at ui/async-await/issues/issue-53249.rs:33:21: 33:49
        _3 = <F as FnOnce<(&mut Context<'_>,)>>::call_once(move _4, move _9) -> bb4; // scope 0 at ui/async-await/issues/issue-53249.rs:33:21: 33:49
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:33:21: 33:45
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&mut Context<'_>,)) -> <F as FnOnce<(&mut Context<'_>,)>>::Output {<F as FnOnce<(&mut Context<'_>,)>>::call_once}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = Poll::<R>::Ready(move _3);  // scope 0 at ui/async-await/issues/issue-53249.rs:33:9: 33:50
        return;                          // scope 0 at ui/async-await/issues/issue-53249.rs:34:6: 34:6
    }
}

fn __receive(_1: WantFn) -> impl Future<Output = ()> {
    debug want => _1;                    // in scope 0 at ui/async-await/issues/issue-53249.rs:37:33: 37:37
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issues/issue-53249.rs:37:50: 37:52
    let mut _2: [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]; // in scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2

    bb0: {
        _2 = [generator@ui/async-await/issues/issue-53249.rs:39:1: 41:2 (#0)] { want: move _1 }; // scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
                                         // generator
                                         // + def_id: DefId(0:22 ~ issue_53249[a345]::__receive::{closure#0})
                                         // + substs: [
                                         //     WantFn,
                                         //     Fut,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, WantFn, [closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13], Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]>, ()},
                                         //     (WantFn,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]>(move _2) -> bb1; // scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:39:1: 41:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]) -> [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2] {identity_future::<(), [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-53249.rs:41:2: 41:2
    }
}

fn __receive::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _17;          // in scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    debug want => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2])).0: WantFn); // in scope 0 at ui/async-await/issues/issue-53249.rs:37:33: 37:37
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    let mut _3: Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]>; // in scope 0 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
    let mut _4: Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]>; // in scope 0 at ui/async-await/issues/issue-53249.rs:40:5: 40:17
    let mut _5: [closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]; // in scope 0 at ui/async-await/issues/issue-53249.rs:40:10: 40:16
    let mut _6: std::task::Poll<()>;     // in scope 0 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
    let mut _7: std::pin::Pin<&mut Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]>>; // in scope 0 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
    let mut _8: &mut Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]>; // in scope 0 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
    let mut _9: &mut Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]>; // in scope 0 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-53249.rs:40:5: 40:23
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-53249.rs:40:5: 40:23
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
    let mut _13: isize;                  // in scope 0 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
    let mut _16: ();                     // in scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    let mut _17: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    let mut _18: u32;                    // in scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    let mut _19: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]; // in scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    let mut _20: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]; // in scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    let mut _21: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]; // in scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    let mut _22: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]; // in scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    let mut _23: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]; // in scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    let mut _24: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]; // in scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    let mut _25: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]; // in scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    let mut _26: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]; // in scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    let mut _27: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]; // in scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    let mut _28: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]; // in scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    scope 1 {
        debug want => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2])) as variant#3).0: WantFn); // in scope 1 at ui/async-await/issues/issue-53249.rs:37:33: 37:37
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2])) as variant#3).1: Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]>); // in scope 2 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
            let _14: ();                 // in scope 2 at ui/async-await/issues/issue-53249.rs:40:5: 40:23
            scope 3 {
            }
            scope 4 {
                debug result => _14;     // in scope 4 at ui/async-await/issues/issue-53249.rs:40:5: 40:23
            }
        }
    }

    bb0: {
        _19 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]); // scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
        _18 = discriminant((*_19));      // scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
        switchInt(move _18) -> [0: bb1, 1: bb15, 2: bb14, 3: bb13, otherwise: bb16]; // scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    }

    bb1: {
        _17 = move _2;                   // scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
        _20 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]); // scope 0 at ui/async-await/issues/issue-53249.rs:37:33: 37:37
        _21 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]); // scope 0 at ui/async-await/issues/issue-53249.rs:37:33: 37:37
        (((*_20) as variant#3).0: WantFn) = move ((*_21).0: WantFn); // scope 0 at ui/async-await/issues/issue-53249.rs:37:33: 37:37
        _5 = [closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]; // scope 1 at ui/async-await/issues/issue-53249.rs:40:10: 40:16
                                         // closure
                                         // + def_id: DefId(0:23 ~ issue_53249[a345]::__receive::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     WantFn,
                                         //     Fut,
                                         //     i32,
                                         //     for<'a, 'b> extern "rust-call" fn((&'a mut std::task::Context<'b>,)),
                                         //     (),
                                         // ]
        _4 = lazy::<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13], ()>(move _5) -> [return: bb2, unwind: bb11]; // scope 1 at ui/async-await/issues/issue-53249.rs:40:5: 40:17
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:40:5: 40:9
                                         // + literal: Const { ty: fn([closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]) -> Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]> {lazy::<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13], ()>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]> as IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb11]; // scope 1 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:40:17: 40:23
                                         // + literal: Const { ty: fn(Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]>) -> <Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]> as IntoFuture>::IntoFuture {<Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]); // scope 1 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
        (((*_22) as variant#3).1: Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]>) = move _3; // scope 1 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
        goto -> bb4;                     // scope 2 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
    }

    bb4: {
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]); // scope 3 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
        _9 = &mut (((*_23) as variant#3).1: Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]>); // scope 3 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
        _8 = &mut (*_9);                 // scope 3 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
        _7 = Pin::<&mut Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]>>::new_unchecked(move _8) -> [return: bb5, unwind: bb11]; // scope 3 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:40:17: 40:23
                                         // + literal: Const { ty: unsafe fn(&mut Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]>) -> Pin<&mut Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]>> {Pin::<&mut Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = _17;                       // scope 3 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
        _11 = move _12;                  // scope 3 at ui/async-await/issues/issue-53249.rs:40:5: 40:23
        _10 = &mut (*_11);               // scope 3 at ui/async-await/issues/issue-53249.rs:40:5: 40:23
        _6 = <Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]> as Future>::poll(move _7, move _10) -> [return: bb6, unwind: bb11]; // scope 3 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:40:17: 40:23
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]>>, &'b mut Context<'c>) -> Poll<<Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]> as Future>::Output> {<Lazy<[closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13]> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = discriminant(_6);          // scope 2 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
        switchInt(move _13) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]); // scope 2 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
        discriminant((*_24)) = 3;        // scope 2 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
        return;                          // scope 2 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
    }

    bb8: {
        unreachable;                     // scope 2 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
    }

    bb9: {
        _14 = ((_6 as Ready).0: ());     // scope 2 at ui/async-await/issues/issue-53249.rs:40:5: 40:23
        _16 = const ();                  // scope 1 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]); // scope 0 at ui/async-await/issues/issue-53249.rs:41:1: 41:2
        drop((((*_25) as variant#3).0: WantFn)) -> [return: bb10, unwind: bb12]; // scope 0 at ui/async-await/issues/issue-53249.rs:41:1: 41:2
    }

    bb10: {
        _0 = Poll::<()>::Ready(move _16); // scope 0 at ui/async-await/issues/issue-53249.rs:41:2: 41:2
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]); // scope 0 at ui/async-await/issues/issue-53249.rs:41:2: 41:2
        discriminant((*_26)) = 1;        // scope 0 at ui/async-await/issues/issue-53249.rs:41:2: 41:2
        return;                          // scope 0 at ui/async-await/issues/issue-53249.rs:41:2: 41:2
    }

    bb11 (cleanup): {
        _27 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]); // scope 0 at ui/async-await/issues/issue-53249.rs:41:1: 41:2
        drop((((*_27) as variant#3).0: WantFn)) -> bb12; // scope 0 at ui/async-await/issues/issue-53249.rs:41:1: 41:2
    }

    bb12 (cleanup): {
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-53249.rs:39:1: 41:2]); // scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
        discriminant((*_28)) = 2;        // scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
        resume;                          // scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    }

    bb13: {
        _15 = move _2;                   // scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
        _17 = move _15;                  // scope 2 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
        goto -> bb4;                     // scope 2 at ui/async-await/issues/issue-53249.rs:40:17: 40:23
    }

    bb14: {
        assert(const false, "`async fn` resumed after panicking") -> bb14; // scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    }

    bb15: {
        assert(const false, "`async fn` resumed after completion") -> bb15; // scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    }

    bb16: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-53249.rs:39:1: 41:2
    }
}

fn __receive::{closure#0}::{closure#0}(_1: [closure@ui/async-await/issues/issue-53249.rs:40:10: 40:13], _2: &mut Context<'_>) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-53249.rs:40:14: 40:14

    bb0: {
        return;                          // scope 0 at ui/async-await/issues/issue-53249.rs:40:16: 40:16
    }
}

fn basic_spawn_receive() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-53249.rs:43:30: 43:30
    let _1: [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    let mut _2: [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48

    bb0: {
        _2 = [generator@ui/async-await/issues/issue-53249.rs:44:5: 44:48 (#0)]; // scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
                                         // generator
                                         // + def_id: DefId(0:25 ~ issue_53249[a345]::basic_spawn_receive::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     for<'a, 'b> {std::future::ResumeTy, [closure@ui/async-await/issues/issue-53249.rs:44:23: 44:26], impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _1 = identity_future::<(), [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]>(move _2) -> bb1; // scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:44:5: 44:48
                                         // + literal: Const { ty: fn([async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]) -> [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48] {identity_future::<(), [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]>}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/async-await/issues/issue-53249.rs:44:48: 44:49
    }

    bb2: {
        return;                          // scope 0 at ui/async-await/issues/issue-53249.rs:45:2: 45:2
    }
}

fn basic_spawn_receive::{closure#0}(_1: Pin<&mut [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _17;          // in scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    let mut _3: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:13: 44:40
    let mut _5: [closure@ui/async-await/issues/issue-53249.rs:44:23: 44:26]; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:23: 44:39
    let mut _6: std::task::Poll<()>;     // in scope 0 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
    let mut _7: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
    let mut _8: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
    let mut _9: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:13: 44:46
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:13: 44:46
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
    let mut _13: isize;                  // in scope 0 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
    let mut _16: ();                     // in scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    let mut _17: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    let mut _18: u32;                    // in scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    let mut _19: &mut [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    let mut _20: &mut [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    let mut _21: &mut [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    let mut _22: &mut [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    let mut _23: &mut [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    let mut _24: &mut [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48])) as variant#3).0: impl std::future::Future<Output = ()>); // in scope 1 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
        let _14: ();                     // in scope 1 at ui/async-await/issues/issue-53249.rs:44:13: 44:46
        scope 2 {
        }
        scope 3 {
            debug result => _14;         // in scope 3 at ui/async-await/issues/issue-53249.rs:44:13: 44:46
        }
    }

    bb0: {
        _19 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]); // scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
        _18 = discriminant((*_19));      // scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
        switchInt(move _18) -> [0: bb1, 1: bb13, 2: bb12, 3: bb11, otherwise: bb14]; // scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    }

    bb1: {
        _17 = move _2;                   // scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
        _5 = [closure@ui/async-await/issues/issue-53249.rs:44:23: 44:26]; // scope 0 at ui/async-await/issues/issue-53249.rs:44:23: 44:39
                                         // closure
                                         // + def_id: DefId(0:26 ~ issue_53249[a345]::basic_spawn_receive::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     for<'a> extern "rust-call" fn((&'a std::boxed::Box<dyn std::marker::Send>,)) -> [async block@ui/async-await/issues/issue-53249.rs:44:27: 44:39],
                                         //     (),
                                         // ]
        _4 = __receive::<[closure@ui/async-await/issues/issue-53249.rs:44:23: 44:26], [async block@ui/async-await/issues/issue-53249.rs:44:27: 44:39]>(move _5) -> [return: bb2, unwind: bb10]; // scope 0 at ui/async-await/issues/issue-53249.rs:44:13: 44:40
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:44:13: 44:22
                                         // + literal: Const { ty: fn([closure@ui/async-await/issues/issue-53249.rs:44:23: 44:26]) -> impl Future<Output = ()> {__receive::<[closure@ui/async-await/issues/issue-53249.rs:44:23: 44:26], [async block@ui/async-await/issues/issue-53249.rs:44:27: 44:39]>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <impl Future<Output = ()> as IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb10]; // scope 0 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:44:40: 44:46
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _20 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]); // scope 0 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
        (((*_20) as variant#3).0: impl std::future::Future<Output = ()>) = move _3; // scope 0 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
        goto -> bb4;                     // scope 1 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
    }

    bb4: {
        _21 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]); // scope 2 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
        _9 = &mut (((*_21) as variant#3).0: impl std::future::Future<Output = ()>); // scope 2 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
        _8 = &mut (*_9);                 // scope 2 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
        _7 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _8) -> [return: bb5, unwind: bb10]; // scope 2 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:44:40: 44:46
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = _17;                       // scope 2 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
        _11 = move _12;                  // scope 2 at ui/async-await/issues/issue-53249.rs:44:13: 44:46
        _10 = &mut (*_11);               // scope 2 at ui/async-await/issues/issue-53249.rs:44:13: 44:46
        _6 = <impl Future<Output = ()> as Future>::poll(move _7, move _10) -> [return: bb6, unwind: bb10]; // scope 2 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:44:40: 44:46
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = discriminant(_6);          // scope 1 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
        switchInt(move _13) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 1 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 1 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
        _22 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]); // scope 1 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
        discriminant((*_22)) = 3;        // scope 1 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
        return;                          // scope 1 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
    }

    bb8: {
        unreachable;                     // scope 1 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
    }

    bb9: {
        _14 = ((_6 as Ready).0: ());     // scope 1 at ui/async-await/issues/issue-53249.rs:44:13: 44:46
        _16 = _14;                       // scope 3 at ui/async-await/issues/issue-53249.rs:44:13: 44:46
        _0 = Poll::<()>::Ready(move _16); // scope 0 at ui/async-await/issues/issue-53249.rs:44:48: 44:48
        _23 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]); // scope 0 at ui/async-await/issues/issue-53249.rs:44:48: 44:48
        discriminant((*_23)) = 1;        // scope 0 at ui/async-await/issues/issue-53249.rs:44:48: 44:48
        return;                          // scope 0 at ui/async-await/issues/issue-53249.rs:44:48: 44:48
    }

    bb10 (cleanup): {
        _24 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-53249.rs:44:5: 44:48]); // scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
        discriminant((*_24)) = 2;        // scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
        resume;                          // scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    }

    bb11: {
        _15 = move _2;                   // scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
        _17 = move _15;                  // scope 1 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
        goto -> bb4;                     // scope 1 at ui/async-await/issues/issue-53249.rs:44:40: 44:46
    }

    bb12: {
        assert(const false, "`async fn` resumed after panicking") -> bb12; // scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    }

    bb13: {
        assert(const false, "`async fn` resumed after completion") -> bb13; // scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    }

    bb14: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-53249.rs:44:5: 44:48
    }
}

fn basic_spawn_receive::{closure#0}::{closure#0}(_1: &[closure@ui/async-await/issues/issue-53249.rs:44:23: 44:26], _2: &Box<dyn Send>) -> [async block@ui/async-await/issues/issue-53249.rs:44:27: 44:39] {
    let mut _0: [async block@ui/async-await/issues/issue-53249.rs:44:27: 44:39]; // return place in scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:27
    let mut _3: [async block@ui/async-await/issues/issue-53249.rs:44:27: 44:39]; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:39

    bb0: {
        _3 = [generator@ui/async-await/issues/issue-53249.rs:44:27: 44:39 (#0)]; // scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:39
                                         // generator
                                         // + def_id: DefId(0:27 ~ issue_53249[a345]::basic_spawn_receive::{closure#0}::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async block@ui/async-await/issues/issue-53249.rs:44:27: 44:39]>(move _3) -> bb1; // scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:39
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-53249.rs:44:27: 44:39
                                         // + literal: Const { ty: fn([async block@ui/async-await/issues/issue-53249.rs:44:27: 44:39]) -> [async block@ui/async-await/issues/issue-53249.rs:44:27: 44:39] {identity_future::<(), [async block@ui/async-await/issues/issue-53249.rs:44:27: 44:39]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-53249.rs:44:39: 44:39
    }
}

fn basic_spawn_receive::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut [async block@ui/async-await/issues/issue-53249.rs:44:27: 44:39]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:39
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:39
    let mut _3: ();                      // in scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:39
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:39
    let mut _5: u32;                     // in scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:39
    let mut _6: &mut [async block@ui/async-await/issues/issue-53249.rs:44:27: 44:39]; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:39
    let mut _7: &mut [async block@ui/async-await/issues/issue-53249.rs:44:27: 44:39]; // in scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:39

    bb0: {
        _6 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-53249.rs:44:27: 44:39]); // scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:39
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:39
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:39
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:39
        _3 = ();                         // scope 0 at ui/async-await/issues/issue-53249.rs:44:35: 44:37
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/issues/issue-53249.rs:44:39: 44:39
        _7 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-53249.rs:44:27: 44:39]); // scope 0 at ui/async-await/issues/issue-53249.rs:44:39: 44:39
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/issues/issue-53249.rs:44:39: 44:39
        return;                          // scope 0 at ui/async-await/issues/issue-53249.rs:44:39: 44:39
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:39
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-53249.rs:44:27: 44:39
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-53249.rs:47:11: 47:11

    bb0: {
        return;                          // scope 0 at ui/async-await/issues/issue-53249.rs:47:13: 47:13
    }
}
