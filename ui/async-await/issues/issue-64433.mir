// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/issues/issue-64433.rs:9:10: 9:15>::fmt(_1: &A<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/async-await/issues/issue-64433.rs:9:10: 9:15
    debug f => _2;                       // in scope 0 at ui/async-await/issues/issue-64433.rs:9:10: 9:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/async-await/issues/issue-64433.rs:9:10: 9:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/async-await/issues/issue-64433.rs:9:10: 9:15
    let mut _4: &str;                    // in scope 0 at ui/async-await/issues/issue-64433.rs:9:10: 9:15
    let _5: &str;                        // in scope 0 at ui/async-await/issues/issue-64433.rs:9:10: 9:15
    let mut _6: &str;                    // in scope 0 at ui/async-await/issues/issue-64433.rs:11:5: 11:24
    let _7: &str;                        // in scope 0 at ui/async-await/issues/issue-64433.rs:11:5: 11:24
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/async-await/issues/issue-64433.rs:11:5: 11:24
    let mut _9: &&std::vec::Vec<&str>;   // in scope 0 at ui/async-await/issues/issue-64433.rs:11:5: 11:24
    let _10: &&std::vec::Vec<&str>;      // in scope 0 at ui/async-await/issues/issue-64433.rs:11:5: 11:24
    let _11: &std::vec::Vec<&str>;       // in scope 0 at ui/async-await/issues/issue-64433.rs:11:5: 11:24

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/async-await/issues/issue-64433.rs:9:10: 9:15
        _5 = const "A";                  // scope 0 at ui/async-await/issues/issue-64433.rs:9:10: 9:15
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:9:10: 9:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/async-await/issues/issue-64433.rs:9:10: 9:15
        _7 = const "inner";              // scope 0 at ui/async-await/issues/issue-64433.rs:11:5: 11:24
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:11:5: 11:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/async-await/issues/issue-64433.rs:11:5: 11:24
        _11 = &((*_1).0: std::vec::Vec<&str>); // scope 0 at ui/async-await/issues/issue-64433.rs:11:5: 11:24
        _10 = &_11;                      // scope 0 at ui/async-await/issues/issue-64433.rs:11:5: 11:24
        _9 = _10;                        // scope 0 at ui/async-await/issues/issue-64433.rs:11:5: 11:24
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/async-await/issues/issue-64433.rs:11:5: 11:24
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/async-await/issues/issue-64433.rs:9:10: 9:15
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:9:10: 9:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-64433.rs:9:15: 9:15
    }
}

fn <impl at ui/async-await/issues/issue-64433.rs:16:1: 16:7>::something_with_a(_1: &mut B, _2: A<'_>) -> impl Future<Output = Result<(), String>> {
    debug self => _1;                    // in scope 0 at ui/async-await/issues/issue-64433.rs:17:31: 17:40
    debug a => _2;                       // in scope 0 at ui/async-await/issues/issue-64433.rs:17:42: 17:43
    let mut _0: impl std::future::Future<Output = std::result::Result<(), std::string::String>>; // return place in scope 0 at ui/async-await/issues/issue-64433.rs:17:55: 17:73
    let mut _3: [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6]; // in scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6

    bb0: {
        _3 = [generator@ui/async-await/issues/issue-64433.rs:17:74: 20:6 (#0)] { self: move _1, a: move _2 }; // scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
                                         // generator
                                         // + def_id: DefId(0:6 ~ issue_64433[d61a]::{impl#0}::something_with_a::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     std::result::Result<(), std::string::String>,
                                         //     {},
                                         //     (&mut B, A<'_>),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<Result<(), String>, [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6]>(move _3) -> bb1; // scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:17:74: 20:6
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6]) -> [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6] {identity_future::<Result<(), String>, [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-64433.rs:20:6: 20:6
    }
}

fn <impl at ui/async-await/issues/issue-64433.rs:16:1: 16:7>::something_with_a::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6]>, _2: &mut Context<'_>) -> Poll<Result<(), String>> {
    debug _task_context => _20;          // in scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
    debug self => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6])).0: &mut B); // in scope 0 at ui/async-await/issues/issue-64433.rs:17:31: 17:40
    debug a => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6])).1: A<'_>); // in scope 0 at ui/async-await/issues/issue-64433.rs:17:42: 17:43
    let mut _0: std::task::Poll<std::result::Result<(), std::string::String>>; // return place in scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
    let _3: &mut B;                      // in scope 0 at ui/async-await/issues/issue-64433.rs:17:31: 17:40
    let _5: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _6: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[&str];                 // in scope 0 at ui/async-await/issues/issue-64433.rs:18:18: 18:24
    let mut _8: &[&str; 2];              // in scope 0 at ui/async-await/issues/issue-64433.rs:18:18: 18:24
    let _9: &[&str; 2];                  // in scope 0 at ui/async-await/issues/issue-64433.rs:18:18: 18:24
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _13: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/async-await/issues/issue-64433.rs:18:26: 18:27
    let mut _15: &A<'_>;                 // in scope 0 at ui/async-await/issues/issue-64433.rs:18:26: 18:27
    let _16: &A<'_>;                     // in scope 0 at ui/async-await/issues/issue-64433.rs:18:26: 18:27
    let mut _17: ();                     // in scope 0 at ui/async-await/issues/issue-64433.rs:19:12: 19:14
    let mut _19: std::result::Result<(), std::string::String>; // in scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
    let mut _20: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
    let mut _21: u32;                    // in scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
    let mut _22: &mut [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6]; // in scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
    let mut _23: &mut [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6]; // in scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
    let mut _24: &mut [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6]; // in scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
    let mut _25: &mut [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6]; // in scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
    let mut _26: &mut [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6]; // in scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
    scope 1 {
        debug self => _3;                // in scope 1 at ui/async-await/issues/issue-64433.rs:17:31: 17:40
        let _4: A<'_>;                   // in scope 1 at ui/async-await/issues/issue-64433.rs:17:42: 17:43
        scope 2 {
            debug a => _4;               // in scope 2 at ui/async-await/issues/issue-64433.rs:17:42: 17:43
            let mut _18: &[&str; 2];     // in scope 2 at ui/async-await/issues/issue-64433.rs:18:18: 18:24
        }
    }

    bb0: {
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6]); // scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
        _21 = discriminant((*_22));      // scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
        switchInt(move _21) -> [0: bb1, 1: bb9, 2: bb8, otherwise: bb10]; // scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
    }

    bb1: {
        _20 = move _2;                   // scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6]); // scope 0 at ui/async-await/issues/issue-64433.rs:17:31: 17:40
        _3 = move ((*_23).0: &mut B);    // scope 0 at ui/async-await/issues/issue-64433.rs:17:31: 17:40
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6]); // scope 1 at ui/async-await/issues/issue-64433.rs:17:42: 17:43
        _4 = move ((*_24).1: A<'_>);     // scope 1 at ui/async-await/issues/issue-64433.rs:17:42: 17:43
        _18 = const _;                   // scope 2 at ui/async-await/issues/issue-64433.rs:18:18: 18:24
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:18:18: 18:24
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(B::something_with_a::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[0])) }
        _9 = _18;                        // scope 2 at ui/async-await/issues/issue-64433.rs:18:18: 18:24
        _8 = _9;                         // scope 2 at ui/async-await/issues/issue-64433.rs:18:18: 18:24
        _7 = move _8 as &[&str] (Pointer(Unsize)); // scope 2 at ui/async-await/issues/issue-64433.rs:18:18: 18:24
        _16 = &_4;                       // scope 2 at ui/async-await/issues/issue-64433.rs:18:26: 18:27
        _15 = _16;                       // scope 2 at ui/async-await/issues/issue-64433.rs:18:26: 18:27
        _14 = core::fmt::ArgumentV1::<'_>::new_debug::<A<'_>>(move _15) -> [return: bb2, unwind: bb6]; // scope 2 at ui/async-await/issues/issue-64433.rs:18:26: 18:27
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:18:26: 18:27
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b A<'_>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<A<'_>>}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = [move _14];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = &_13;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = move _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> [return: bb3, unwind: bb6]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _print(move _6) -> [return: bb4, unwind: bb6]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        _17 = ();                        // scope 2 at ui/async-await/issues/issue-64433.rs:19:12: 19:14
        _19 = Result::<(), String>::Ok(move _17); // scope 2 at ui/async-await/issues/issue-64433.rs:19:9: 19:15
        drop(_4) -> [return: bb5, unwind: bb7]; // scope 1 at ui/async-await/issues/issue-64433.rs:20:5: 20:6
    }

    bb5: {
        _0 = Poll::<Result<(), String>>::Ready(move _19); // scope 0 at ui/async-await/issues/issue-64433.rs:20:6: 20:6
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6]); // scope 0 at ui/async-await/issues/issue-64433.rs:20:6: 20:6
        discriminant((*_25)) = 1;        // scope 0 at ui/async-await/issues/issue-64433.rs:20:6: 20:6
        return;                          // scope 0 at ui/async-await/issues/issue-64433.rs:20:6: 20:6
    }

    bb6 (cleanup): {
        drop(_4) -> bb7;                 // scope 1 at ui/async-await/issues/issue-64433.rs:20:5: 20:6
    }

    bb7 (cleanup): {
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:17:74: 20:6]); // scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
        discriminant((*_26)) = 2;        // scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
        resume;                          // scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
    }

    bb8: {
        assert(const false, "`async fn` resumed after panicking") -> bb8; // scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
    }

    bb9: {
        assert(const false, "`async fn` resumed after completion") -> bb9; // scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
    }

    bb10: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-64433.rs:17:74: 20:6
    }
}

promoted[0] in <impl at ui/async-await/issues/issue-64433.rs:16:1: 16:7>::something_with_a::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/async-await/issues/issue-64433.rs:18:18: 18:24
    let mut _1: [&str; 2];               // in scope 0 at ui/async-await/issues/issue-64433.rs:18:18: 18:24

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/async-await/issues/issue-64433.rs:18:18: 18:24
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:18:18: 18:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:18:18: 18:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/async-await/issues/issue-64433.rs:18:18: 18:24
        return;                          // scope 0 at ui/async-await/issues/issue-64433.rs:18:18: 18:24
    }
}

fn can_error(_1: &str) -> impl Future<Output = Result<(), String>> {
    debug some_string => _1;             // in scope 0 at ui/async-await/issues/issue-64433.rs:23:20: 23:31
    let mut _0: impl std::future::Future<Output = std::result::Result<(), std::string::String>>; // return place in scope 0 at ui/async-await/issues/issue-64433.rs:23:42: 23:60
    let mut _2: [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]; // in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2

    bb0: {
        _2 = [generator@ui/async-await/issues/issue-64433.rs:23:61: 27:2 (#0)] { some_string: _1 }; // scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
                                         // generator
                                         // + def_id: DefId(0:8 ~ issue_64433[d61a]::can_error::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     std::result::Result<(), std::string::String>,
                                         //     for<'a, 'b, 'c, 'd, 'e> {std::future::ResumeTy, &'a str, A<'b>, B, &'c mut B, impl std::future::Future<Output = std::result::Result<(), std::string::String>>, ()},
                                         //     (&str,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<Result<(), String>, [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]>(move _2) -> bb1; // scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:23:61: 27:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]) -> [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2] {identity_future::<Result<(), String>, [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-64433.rs:27:2: 27:2
    }
}

fn can_error::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]>, _2: &mut Context<'_>) -> Poll<Result<(), String>> {
    debug _task_context => _39;          // in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    debug some_string => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2])).0: &str); // in scope 0 at ui/async-await/issues/issue-64433.rs:23:20: 23:31
    let mut _0: std::task::Poll<std::result::Result<(), std::string::String>>; // return place in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    let _3: &str;                        // in scope 0 at ui/async-await/issues/issue-64433.rs:23:20: 23:31
    let mut _5: std::vec::Vec<&str>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _6: std::boxed::Box<[&str]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[&str; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: std::boxed::Box<[&str; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _12: &str;                   // in scope 0 at ui/async-await/issues/issue-64433.rs:24:29: 24:40
    let mut _13: &str;                   // in scope 0 at ui/async-await/issues/issue-64433.rs:24:42: 24:47
    let _14: &str;                       // in scope 0 at ui/async-await/issues/issue-64433.rs:24:42: 24:47
    let mut _15: ();                     // in scope 0 at ui/async-await/issues/issue-64433.rs:26:8: 26:46
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>>; // in scope 0 at ui/async-await/issues/issue-64433.rs:26:8: 26:46
    let mut _17: std::result::Result<(), std::string::String>; // in scope 0 at ui/async-await/issues/issue-64433.rs:26:8: 26:45
    let mut _18: std::result::Result<(), std::string::String>; // in scope 0 at ui/async-await/issues/issue-64433.rs:26:8: 26:35
    let mut _19: impl std::future::Future<Output = std::result::Result<(), std::string::String>>; // in scope 0 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
    let mut _20: impl std::future::Future<Output = std::result::Result<(), std::string::String>>; // in scope 0 at ui/async-await/issues/issue-64433.rs:26:8: 26:29
    let mut _21: &mut B;                 // in scope 0 at ui/async-await/issues/issue-64433.rs:26:8: 26:29
    let mut _22: A<'_>;                  // in scope 0 at ui/async-await/issues/issue-64433.rs:26:27: 26:28
    let mut _23: std::task::Poll<std::result::Result<(), std::string::String>>; // in scope 0 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
    let mut _24: std::pin::Pin<&mut impl std::future::Future<Output = std::result::Result<(), std::string::String>>>; // in scope 0 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
    let mut _25: &mut impl std::future::Future<Output = std::result::Result<(), std::string::String>>; // in scope 0 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
    let mut _26: &mut impl std::future::Future<Output = std::result::Result<(), std::string::String>>; // in scope 0 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
    let mut _27: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64433.rs:26:8: 26:35
    let mut _28: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64433.rs:26:8: 26:35
    let mut _29: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
    let mut _30: isize;                  // in scope 0 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
    let mut _32: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
    let mut _33: isize;                  // in scope 0 at ui/async-await/issues/issue-64433.rs:26:45: 26:46
    let mut _35: std::result::Result<std::convert::Infallible, std::string::String>; // in scope 0 at ui/async-await/issues/issue-64433.rs:26:45: 26:46
    let mut _37: *const [&str; 2];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _38: std::result::Result<(), std::string::String>; // in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    let mut _39: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    let mut _40: u32;                    // in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    let mut _41: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]; // in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    let mut _42: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]; // in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    let mut _43: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]; // in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    let mut _44: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]; // in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    let mut _45: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]; // in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    let mut _46: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]; // in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    let mut _47: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]; // in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    let mut _48: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]; // in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    let mut _49: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]; // in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    let mut _50: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]; // in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    let mut _51: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]; // in scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    scope 1 {
        debug some_string => _3;         // in scope 1 at ui/async-await/issues/issue-64433.rs:23:20: 23:31
        let _4: A<'_>;                   // in scope 1 at ui/async-await/issues/issue-64433.rs:24:9: 24:10
        scope 2 {
            debug a => _4;               // in scope 2 at ui/async-await/issues/issue-64433.rs:24:9: 24:10
            scope 4 {
                debug b => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2])) as variant#3).0: B); // in scope 4 at ui/async-await/issues/issue-64433.rs:25:9: 25:14
                let _34: std::result::Result<std::convert::Infallible, std::string::String>; // in scope 4 at ui/async-await/issues/issue-64433.rs:26:45: 26:46
                let _36: ();             // in scope 4 at ui/async-await/issues/issue-64433.rs:26:8: 26:46
                scope 5 {
                    debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2])) as variant#3).1: impl std::future::Future<Output = std::result::Result<(), std::string::String>>); // in scope 5 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
                    let _31: std::result::Result<(), std::string::String>; // in scope 5 at ui/async-await/issues/issue-64433.rs:26:8: 26:35
                    scope 6 {
                    }
                    scope 7 {
                        debug result => _31; // in scope 7 at ui/async-await/issues/issue-64433.rs:26:8: 26:35
                    }
                }
                scope 8 {
                    debug residual => _34; // in scope 8 at ui/async-await/issues/issue-64433.rs:26:45: 26:46
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => _36;    // in scope 10 at ui/async-await/issues/issue-64433.rs:26:8: 26:46
                    scope 11 {
                    }
                }
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _41 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]); // scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
        _40 = discriminant((*_41));      // scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
        switchInt(move _40) -> [0: bb1, 1: bb23, 2: bb22, 3: bb21, otherwise: bb24]; // scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    }

    bb1: {
        _39 = move _2;                   // scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
        _42 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]); // scope 0 at ui/async-await/issues/issue-64433.rs:23:20: 23:31
        _3 = ((*_42).0: &str);           // scope 0 at ui/async-await/issues/issue-64433.rs:23:20: 23:31
        _8 = SizeOf([&str; 2]);          // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = AlignOf([&str; 2]);         // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb2, unwind: bb20]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = ShallowInitBox(move _10, [&str; 2]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _12 = _3;                        // scope 1 at ui/async-await/issues/issue-64433.rs:24:29: 24:40
        _14 = const "foo";               // scope 1 at ui/async-await/issues/issue-64433.rs:24:42: 24:47
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:24:42: 24:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 1 at ui/async-await/issues/issue-64433.rs:24:42: 24:47
        _37 = (((_11.0: std::ptr::Unique<[&str; 2]>).0: std::ptr::NonNull<[&str; 2]>).0: *const [&str; 2]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_37) = [move _12, move _13];   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _7 = move _11;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = move _7 as std::boxed::Box<[&str]> (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = slice::<impl [&str]>::into_vec::<std::alloc::Global>(move _6) -> [return: bb3, unwind: bb20]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[&str]>) -> Vec<&str> {slice::<impl [&str]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = A::<'_> { inner: move _5 }; // scope 1 at ui/async-await/issues/issue-64433.rs:24:13: 24:50
        _43 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]); // scope 2 at ui/async-await/issues/issue-64433.rs:25:17: 25:21
        (((*_43) as variant#3).0: B) = B; // scope 2 at ui/async-await/issues/issue-64433.rs:25:17: 25:21
        _44 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]); // scope 4 at ui/async-await/issues/issue-64433.rs:26:8: 26:29
        _21 = &mut (((*_44) as variant#3).0: B); // scope 4 at ui/async-await/issues/issue-64433.rs:26:8: 26:29
        _22 = move _4;                   // scope 4 at ui/async-await/issues/issue-64433.rs:26:27: 26:28
        _20 = B::something_with_a(move _21, move _22) -> [return: bb4, unwind: bb20]; // scope 4 at ui/async-await/issues/issue-64433.rs:26:8: 26:29
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:26:10: 26:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut B, A<'b>) -> impl Future<Output = Result<(), String>> {B::something_with_a}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = <impl Future<Output = Result<(), String>> as IntoFuture>::into_future(move _20) -> [return: bb5, unwind: bb20]; // scope 4 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:26:29: 26:35
                                         // + literal: Const { ty: fn(impl Future<Output = Result<(), String>>) -> <impl Future<Output = Result<(), String>> as IntoFuture>::IntoFuture {<impl Future<Output = Result<(), String>> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb5: {
        _45 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]); // scope 4 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
        (((*_45) as variant#3).1: impl std::future::Future<Output = std::result::Result<(), std::string::String>>) = move _19; // scope 4 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
        goto -> bb6;                     // scope 5 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
    }

    bb6: {
        _46 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]); // scope 6 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
        _26 = &mut (((*_46) as variant#3).1: impl std::future::Future<Output = std::result::Result<(), std::string::String>>); // scope 6 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
        _25 = &mut (*_26);               // scope 6 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
        _24 = Pin::<&mut impl Future<Output = Result<(), String>>>::new_unchecked(move _25) -> [return: bb7, unwind: bb19]; // scope 6 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:26:29: 26:35
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = Result<(), String>>) -> Pin<&mut impl Future<Output = Result<(), String>>> {Pin::<&mut impl Future<Output = Result<(), String>>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb7: {
        _29 = _39;                       // scope 6 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
        _28 = move _29;                  // scope 6 at ui/async-await/issues/issue-64433.rs:26:8: 26:35
        _27 = &mut (*_28);               // scope 6 at ui/async-await/issues/issue-64433.rs:26:8: 26:35
        _23 = <impl Future<Output = Result<(), String>> as Future>::poll(move _24, move _27) -> [return: bb8, unwind: bb19]; // scope 6 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:26:29: 26:35
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = Result<(), String>>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = Result<(), String>> as Future>::Output> {<impl Future<Output = Result<(), String>> as Future>::poll}, val: Value(<ZST>) }
    }

    bb8: {
        _30 = discriminant(_23);         // scope 5 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
        switchInt(move _30) -> [0: bb11, 1: bb9, otherwise: bb10]; // scope 5 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
    }

    bb9: {
        _0 = Poll::<Result<(), String>>::Pending; // scope 5 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
        _47 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]); // scope 5 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
        discriminant((*_47)) = 3;        // scope 5 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
        return;                          // scope 5 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
    }

    bb10: {
        unreachable;                     // scope 5 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
    }

    bb11: {
        _31 = move ((_23 as Ready).0: std::result::Result<(), std::string::String>); // scope 5 at ui/async-await/issues/issue-64433.rs:26:8: 26:35
        _18 = move _31;                  // scope 7 at ui/async-await/issues/issue-64433.rs:26:8: 26:35
        _48 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]); // scope 4 at ui/async-await/issues/issue-64433.rs:26:34: 26:35
        drop((((*_48) as variant#3).1: impl std::future::Future<Output = std::result::Result<(), std::string::String>>)) -> [return: bb12, unwind: bb20]; // scope 4 at ui/async-await/issues/issue-64433.rs:26:34: 26:35
    }

    bb12: {
        _17 = Result::<(), String>::map::<(), fn(()) {std::mem::drop::<()>}>(move _18, std::mem::drop::<()>) -> [return: bb13, unwind: bb20]; // scope 4 at ui/async-await/issues/issue-64433.rs:26:8: 26:45
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:26:36: 26:39
                                         // + literal: Const { ty: fn(Result<(), String>, fn(()) {std::mem::drop::<()>}) -> Result<(), String> {Result::<(), String>::map::<(), fn(()) {std::mem::drop::<()>}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:26:40: 26:44
                                         // + literal: Const { ty: fn(()) {std::mem::drop::<()>}, val: Value(<ZST>) }
    }

    bb13: {
        _16 = <Result<(), String> as Try>::branch(move _17) -> [return: bb14, unwind: bb20]; // scope 4 at ui/async-await/issues/issue-64433.rs:26:8: 26:46
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:26:8: 26:46
                                         // + literal: Const { ty: fn(Result<(), String>) -> ControlFlow<<Result<(), String> as Try>::Residual, <Result<(), String> as Try>::Output> {<Result<(), String> as Try>::branch}, val: Value(<ZST>) }
    }

    bb14: {
        _33 = discriminant(_16);         // scope 4 at ui/async-await/issues/issue-64433.rs:26:8: 26:46
        switchInt(move _33) -> [0: bb15, 1: bb17, otherwise: bb16]; // scope 4 at ui/async-await/issues/issue-64433.rs:26:8: 26:46
    }

    bb15: {
        _36 = ((_16 as Continue).0: ()); // scope 4 at ui/async-await/issues/issue-64433.rs:26:8: 26:46
        _15 = _36;                       // scope 11 at ui/async-await/issues/issue-64433.rs:26:8: 26:46
        _38 = Result::<(), String>::Ok(move _15); // scope 4 at ui/async-await/issues/issue-64433.rs:26:5: 26:47
        goto -> bb18;                    // scope 0 at ui/async-await/issues/issue-64433.rs:27:1: 27:2
    }

    bb16: {
        unreachable;                     // scope 4 at ui/async-await/issues/issue-64433.rs:26:8: 26:46
    }

    bb17: {
        _34 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>); // scope 4 at ui/async-await/issues/issue-64433.rs:26:45: 26:46
        _35 = move _34;                  // scope 9 at ui/async-await/issues/issue-64433.rs:26:45: 26:46
        _38 = <Result<(), String> as FromResidual<Result<Infallible, String>>>::from_residual(move _35) -> [return: bb25, unwind: bb20]; // scope 9 at ui/async-await/issues/issue-64433.rs:26:8: 26:46
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64433.rs:26:45: 26:46
                                         // + literal: Const { ty: fn(Result<Infallible, String>) -> Result<(), String> {<Result<(), String> as FromResidual<Result<Infallible, String>>>::from_residual}, val: Value(<ZST>) }
    }

    bb18: {
        _0 = Poll::<Result<(), String>>::Ready(move _38); // scope 0 at ui/async-await/issues/issue-64433.rs:27:2: 27:2
        _49 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]); // scope 0 at ui/async-await/issues/issue-64433.rs:27:2: 27:2
        discriminant((*_49)) = 1;        // scope 0 at ui/async-await/issues/issue-64433.rs:27:2: 27:2
        return;                          // scope 0 at ui/async-await/issues/issue-64433.rs:27:2: 27:2
    }

    bb19 (cleanup): {
        _50 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]); // scope 4 at ui/async-await/issues/issue-64433.rs:26:34: 26:35
        drop((((*_50) as variant#3).1: impl std::future::Future<Output = std::result::Result<(), std::string::String>>)) -> bb20; // scope 4 at ui/async-await/issues/issue-64433.rs:26:34: 26:35
    }

    bb20 (cleanup): {
        _51 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64433.rs:23:61: 27:2]); // scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
        discriminant((*_51)) = 2;        // scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
        resume;                          // scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    }

    bb21: {
        _32 = move _2;                   // scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
        _39 = move _32;                  // scope 5 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
        goto -> bb6;                     // scope 5 at ui/async-await/issues/issue-64433.rs:26:29: 26:35
    }

    bb22: {
        assert(const false, "`async fn` resumed after panicking") -> bb22; // scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    }

    bb23: {
        assert(const false, "`async fn` resumed after completion") -> bb23; // scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    }

    bb24: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-64433.rs:23:61: 27:2
    }

    bb25: {
        goto -> bb18;                    // scope 9 at ui/async-await/issues/issue-64433.rs:26:8: 26:46
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-64433.rs:29:11: 29:11

    bb0: {
        return;                          // scope 0 at ui/async-await/issues/issue-64433.rs:30:2: 30:2
    }
}
