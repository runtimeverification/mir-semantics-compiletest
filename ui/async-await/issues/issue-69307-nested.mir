// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn block_on(_1: F) -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/async-await/issues/issue-69307-nested.rs:10:25: 10:30

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/async-await/issues/issue-69307-nested.rs:11:5: 11:6
        drop(_1) -> bb1;                 // scope 0 at ui/async-await/issues/issue-69307-nested.rs:12:1: 12:2
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-69307-nested.rs:12:2: 12:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-69307-nested.rs:14:11: 14:11

    bb0: {
        return;                          // scope 0 at ui/async-await/issues/issue-69307-nested.rs:14:13: 14:13
    }
}

fn bar() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 16:16
    let mut _1: [async fn body@ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2

    bb0: {
        _1 = [generator@ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2 (#0)]; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
                                         // generator
                                         // + def_id: DefId(0:7 ~ issue_69307_nested[2600]::bar::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2]>(move _1) -> bb1; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2]) -> [async fn body@ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2] {identity_future::<(), [async fn body@ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-69307-nested.rs:28:2: 28:2
    }
}

fn bar::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _9;           // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
    let mut _3: usize;                   // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:17:9: 17:16
    let mut _4: usize;                   // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:18:12: 27:6
    let mut _5: [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    let mut _6: [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    let mut _7: (usize, bool);           // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:18:5: 27:6
    let mut _8: ();                      // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
    let mut _9: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
    let mut _10: u32;                    // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
    let mut _11: &mut [async fn body@ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
    let mut _12: &mut [async fn body@ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
    let mut _13: &mut [async fn body@ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
    scope 1 {
        debug sum => _3;                 // in scope 1 at ui/async-await/issues/issue-69307-nested.rs:17:9: 17:16
    }

    bb0: {
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2]); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
        _10 = discriminant((*_11));      // scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
        switchInt(move _10) -> [0: bb1, 1: bb7, 2: bb6, otherwise: bb8]; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
    }

    bb1: {
        _9 = move _2;                    // scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
        _3 = const 0_usize;              // scope 0 at ui/async-await/issues/issue-69307-nested.rs:17:19: 17:20
        _6 = [generator@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10 (#0)]; // scope 1 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
                                         // generator
                                         // + def_id: DefId(0:8 ~ issue_69307_nested[2600]::bar::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _5 = identity_future::<(), [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]>(move _6) -> [return: bb2, unwind: bb5]; // scope 1 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
                                         // + literal: Const { ty: fn([async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]) -> [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10] {identity_future::<(), [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]>}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = block_on::<[async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]>(move _5) -> [return: bb3, unwind: bb5]; // scope 1 at ui/async-await/issues/issue-69307-nested.rs:19:9: 26:11
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-69307-nested.rs:19:9: 19:17
                                         // + literal: Const { ty: fn([async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]) -> usize {block_on::<[async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]>}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = CheckedAdd(_3, _4);         // scope 1 at ui/async-await/issues/issue-69307-nested.rs:18:5: 27:6
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _4) -> [success: bb4, unwind: bb5]; // scope 1 at ui/async-await/issues/issue-69307-nested.rs:18:5: 27:6
    }

    bb4: {
        _3 = move (_7.0: usize);         // scope 1 at ui/async-await/issues/issue-69307-nested.rs:18:5: 27:6
        _8 = const ();                   // scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
        _0 = Poll::<()>::Ready(move _8); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:28:2: 28:2
        _12 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2]); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:28:2: 28:2
        discriminant((*_12)) = 1;        // scope 0 at ui/async-await/issues/issue-69307-nested.rs:28:2: 28:2
        return;                          // scope 0 at ui/async-await/issues/issue-69307-nested.rs:28:2: 28:2
    }

    bb5 (cleanup): {
        _13 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2]); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
        discriminant((*_13)) = 2;        // scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
        resume;                          // scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
    }

    bb6: {
        assert(const false, "`async fn` resumed after panicking") -> bb6; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
    }

    bb7: {
        assert(const false, "`async fn` resumed after completion") -> bb7; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
    }

    bb8: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-69307-nested.rs:16:16: 28:2
    }
}

fn bar::{closure#0}::{closure#0}(_1: Pin<&mut [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _21;          // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    let mut _3: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:20:13: 20:18
    let mut _5: std::task::Poll<()>;     // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
    let mut _6: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
    let mut _7: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
    let mut _8: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
    let mut _9: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:20:13: 20:24
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:20:13: 20:24
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
    let mut _12: isize;                  // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
    let mut _14: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
    let mut _15: usize;                  // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:21:17: 21:26
    let mut _16: usize;                  // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:22: 25:15
    let mut _17: [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    let mut _18: [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    let mut _19: (usize, bool);          // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:13: 25:15
    let mut _20: ();                     // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    let mut _21: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    let mut _22: u32;                    // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    let mut _23: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    let mut _24: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    let mut _25: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    let mut _26: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    let mut _27: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    let mut _28: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10])) as variant#3).0: impl std::future::Future<Output = ()>); // in scope 1 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
        let _13: ();                     // in scope 1 at ui/async-await/issues/issue-69307-nested.rs:20:13: 20:24
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at ui/async-await/issues/issue-69307-nested.rs:20:13: 20:24
        }
    }
    scope 4 {
        debug inner => _15;              // in scope 4 at ui/async-await/issues/issue-69307-nested.rs:21:17: 21:26
    }

    bb0: {
        _23 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
        _22 = discriminant((*_23));      // scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
        switchInt(move _22) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb17]; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    }

    bb1: {
        _21 = move _2;                   // scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
        _4 = baz() -> [return: bb2, unwind: bb13]; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:20:13: 20:18
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-69307-nested.rs:20:13: 20:16
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {baz}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <impl Future<Output = ()> as IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb13]; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _24 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
        (((*_24) as variant#3).0: impl std::future::Future<Output = ()>) = move _3; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
        goto -> bb4;                     // scope 1 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
    }

    bb4: {
        _25 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]); // scope 2 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
        _8 = &mut (((*_25) as variant#3).0: impl std::future::Future<Output = ()>); // scope 2 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
        _7 = &mut (*_8);                 // scope 2 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
        _6 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _7) -> [return: bb5, unwind: bb13]; // scope 2 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = _21;                       // scope 2 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
        _10 = move _11;                  // scope 2 at ui/async-await/issues/issue-69307-nested.rs:20:13: 20:24
        _9 = &mut (*_10);                // scope 2 at ui/async-await/issues/issue-69307-nested.rs:20:13: 20:24
        _5 = <impl Future<Output = ()> as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb13]; // scope 2 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = discriminant(_5);          // scope 1 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
        switchInt(move _12) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 1 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 1 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
        _26 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]); // scope 1 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
        discriminant((*_26)) = 3;        // scope 1 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
        return;                          // scope 1 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
    }

    bb8: {
        unreachable;                     // scope 1 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
    }

    bb9: {
        _13 = ((_5 as Ready).0: ());     // scope 1 at ui/async-await/issues/issue-69307-nested.rs:20:13: 20:24
        _15 = const 1_usize;             // scope 0 at ui/async-await/issues/issue-69307-nested.rs:21:29: 21:30
        _18 = [generator@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14 (#0)]; // scope 4 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
                                         // generator
                                         // + def_id: DefId(0:9 ~ issue_69307_nested[2600]::bar::{closure#0}::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     i32,
                                         //     {std::future::ResumeTy, impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _17 = identity_future::<i32, [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]>(move _18) -> [return: bb10, unwind: bb13]; // scope 4 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
                                         // + literal: Const { ty: fn([async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]) -> [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14] {identity_future::<i32, [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]>}, val: Value(<ZST>) }
    }

    bb10: {
        _16 = block_on::<[async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]>(move _17) -> [return: bb11, unwind: bb13]; // scope 4 at ui/async-await/issues/issue-69307-nested.rs:22:22: 25:15
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-69307-nested.rs:22:22: 22:30
                                         // + literal: Const { ty: fn([async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]) -> usize {block_on::<[async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]>}, val: Value(<ZST>) }
    }

    bb11: {
        _19 = CheckedAdd(_15, _16);      // scope 4 at ui/async-await/issues/issue-69307-nested.rs:22:13: 25:15
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", _15, move _16) -> [success: bb12, unwind: bb13]; // scope 4 at ui/async-await/issues/issue-69307-nested.rs:22:13: 25:15
    }

    bb12: {
        _15 = move (_19.0: usize);       // scope 4 at ui/async-await/issues/issue-69307-nested.rs:22:13: 25:15
        _20 = const ();                  // scope 4 at ui/async-await/issues/issue-69307-nested.rs:22:13: 25:15
        _0 = Poll::<()>::Ready(move _20); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:26:10: 26:10
        _27 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:26:10: 26:10
        discriminant((*_27)) = 1;        // scope 0 at ui/async-await/issues/issue-69307-nested.rs:26:10: 26:10
        return;                          // scope 0 at ui/async-await/issues/issue-69307-nested.rs:26:10: 26:10
    }

    bb13 (cleanup): {
        _28 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10]); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
        discriminant((*_28)) = 2;        // scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
        resume;                          // scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    }

    bb14: {
        _14 = move _2;                   // scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
        _21 = move _14;                  // scope 1 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
        goto -> bb4;                     // scope 1 at ui/async-await/issues/issue-69307-nested.rs:20:18: 20:24
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> bb15; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> bb16; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    }

    bb17: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-69307-nested.rs:19:18: 26:10
    }
}

fn bar::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]>, _2: &mut Context<'_>) -> Poll<i32> {
    debug _task_context => _16;          // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    let mut _0: std::task::Poll<i32>;    // return place in scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    let mut _3: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:23:17: 23:22
    let mut _5: std::task::Poll<()>;     // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
    let mut _6: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
    let mut _7: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
    let mut _8: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
    let mut _9: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:23:17: 23:28
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:23:17: 23:28
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
    let mut _12: isize;                  // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
    let mut _14: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
    let mut _15: i32;                    // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    let mut _16: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    let mut _17: u32;                    // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    let mut _18: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    let mut _19: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    let mut _20: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    let mut _21: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    let mut _22: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    let mut _23: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14])) as variant#3).0: impl std::future::Future<Output = ()>); // in scope 1 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
        let _13: ();                     // in scope 1 at ui/async-await/issues/issue-69307-nested.rs:23:17: 23:28
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at ui/async-await/issues/issue-69307-nested.rs:23:17: 23:28
        }
    }

    bb0: {
        _18 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
        _17 = discriminant((*_18));      // scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
        switchInt(move _17) -> [0: bb1, 1: bb13, 2: bb12, 3: bb11, otherwise: bb14]; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    }

    bb1: {
        _16 = move _2;                   // scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
        _4 = baz() -> [return: bb2, unwind: bb10]; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:23:17: 23:22
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-69307-nested.rs:23:17: 23:20
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {baz}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <impl Future<Output = ()> as IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb10]; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _19 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
        (((*_19) as variant#3).0: impl std::future::Future<Output = ()>) = move _3; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
        goto -> bb4;                     // scope 1 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
    }

    bb4: {
        _20 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]); // scope 2 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
        _8 = &mut (((*_20) as variant#3).0: impl std::future::Future<Output = ()>); // scope 2 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
        _7 = &mut (*_8);                 // scope 2 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
        _6 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _7) -> [return: bb5, unwind: bb10]; // scope 2 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = _16;                       // scope 2 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
        _10 = move _11;                  // scope 2 at ui/async-await/issues/issue-69307-nested.rs:23:17: 23:28
        _9 = &mut (*_10);                // scope 2 at ui/async-await/issues/issue-69307-nested.rs:23:17: 23:28
        _5 = <impl Future<Output = ()> as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb10]; // scope 2 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = discriminant(_5);          // scope 1 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
        switchInt(move _12) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 1 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
    }

    bb7: {
        _0 = Poll::<i32>::Pending;       // scope 1 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
        _21 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]); // scope 1 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
        discriminant((*_21)) = 3;        // scope 1 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
        return;                          // scope 1 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
    }

    bb8: {
        unreachable;                     // scope 1 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
    }

    bb9: {
        _13 = ((_5 as Ready).0: ());     // scope 1 at ui/async-await/issues/issue-69307-nested.rs:23:17: 23:28
        _15 = const 0_i32;               // scope 0 at ui/async-await/issues/issue-69307-nested.rs:24:17: 24:18
        _0 = Poll::<i32>::Ready(move _15); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:25:14: 25:14
        _22 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:25:14: 25:14
        discriminant((*_22)) = 1;        // scope 0 at ui/async-await/issues/issue-69307-nested.rs:25:14: 25:14
        return;                          // scope 0 at ui/async-await/issues/issue-69307-nested.rs:25:14: 25:14
    }

    bb10 (cleanup): {
        _23 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14]); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
        discriminant((*_23)) = 2;        // scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
        resume;                          // scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    }

    bb11: {
        _14 = move _2;                   // scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
        _16 = move _14;                  // scope 1 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
        goto -> bb4;                     // scope 1 at ui/async-await/issues/issue-69307-nested.rs:23:22: 23:28
    }

    bb12: {
        assert(const false, "`async fn` resumed after panicking") -> bb12; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    }

    bb13: {
        assert(const false, "`async fn` resumed after completion") -> bb13; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    }

    bb14: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-69307-nested.rs:22:31: 25:14
    }
}

fn baz() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:16
    let mut _1: [async fn body@ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18

    bb0: {
        _1 = [generator@ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18 (#0)]; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18
                                         // generator
                                         // + def_id: DefId(0:11 ~ issue_69307_nested[2600]::baz::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18]>(move _1) -> bb1; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18]) -> [async fn body@ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18] {identity_future::<(), [async fn body@ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:18: 30:18
    }
}

fn baz::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18
    let mut _3: ();                      // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18
    let mut _5: u32;                     // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18
    let mut _6: &mut [async fn body@ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18
    let mut _7: &mut [async fn body@ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18]; // in scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18

    bb0: {
        _6 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18]); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18
        _3 = const ();                   // scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:18: 30:18
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18]); // scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:18: 30:18
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:18: 30:18
        return;                          // scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:18: 30:18
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-69307-nested.rs:30:16: 30:18
    }
}
