// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn connect() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 11:20
    let mut _1: [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2

    bb0: {
        _1 = [generator@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2 (#0)]; // scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
                                         // generator
                                         // + def_id: DefId(0:4 ~ issue_64391_2[71c2]::connect::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     for<'a, 'b, 'c> {std::future::ResumeTy, u32, &'a u32, &'b str, std::string::String, impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]>(move _1) -> bb1; // scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]) -> [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2] {identity_future::<(), [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-64391-2.rs:14:2: 14:2
    }
}

fn connect::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _21;          // in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    let mut _3: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:13:5: 13:38
    let mut _5: &u32;                    // in scope 0 at ui/async-await/issues/issue-64391-2.rs:13:14: 13:21
    let _6: &u32;                        // in scope 0 at ui/async-await/issues/issue-64391-2.rs:13:14: 13:21
    let mut _7: std::string::String;     // in scope 0 at ui/async-await/issues/issue-64391-2.rs:13:23: 13:37
    let mut _8: &str;                    // in scope 0 at ui/async-await/issues/issue-64391-2.rs:13:23: 13:37
    let _9: &str;                        // in scope 0 at ui/async-await/issues/issue-64391-2.rs:13:23: 13:25
    let mut _10: std::task::Poll<()>;    // in scope 0 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
    let mut _11: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
    let mut _12: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
    let mut _13: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
    let mut _14: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:13:5: 13:44
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:13:5: 13:44
    let mut _16: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
    let mut _17: isize;                  // in scope 0 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
    let mut _19: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
    let mut _20: ();                     // in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    let mut _21: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    let mut _22: u32;                    // in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    let mut _23: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    let mut _24: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    let mut _25: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    let mut _26: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    let mut _27: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    let mut _28: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    let mut _29: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    let mut _30: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    let mut _31: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    let mut _32: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    scope 1 {
        debug config => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2])) as variant#3).0: u32); // in scope 1 at ui/async-await/issues/issue-64391-2.rs:12:9: 12:15
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2])) as variant#3).1: impl std::future::Future<Output = ()>); // in scope 2 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
            let _18: ();                 // in scope 2 at ui/async-await/issues/issue-64391-2.rs:13:5: 13:44
            scope 3 {
            }
            scope 4 {
                debug result => _18;     // in scope 4 at ui/async-await/issues/issue-64391-2.rs:13:5: 13:44
            }
        }
    }

    bb0: {
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]); // scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
        _22 = discriminant((*_23));      // scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
        switchInt(move _22) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb17]; // scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    }

    bb1: {
        _21 = move _2;                   // scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]); // scope 0 at ui/async-await/issues/issue-64391-2.rs:12:18: 12:21
        (((*_24) as variant#3).0: u32) = const 666_u32; // scope 0 at ui/async-await/issues/issue-64391-2.rs:12:18: 12:21
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]); // scope 1 at ui/async-await/issues/issue-64391-2.rs:13:14: 13:21
        _6 = &(((*_25) as variant#3).0: u32); // scope 1 at ui/async-await/issues/issue-64391-2.rs:13:14: 13:21
        _5 = _6;                         // scope 1 at ui/async-await/issues/issue-64391-2.rs:13:14: 13:21
        _9 = const "";                   // scope 1 at ui/async-await/issues/issue-64391-2.rs:13:23: 13:25
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64391-2.rs:13:23: 13:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = _9;                         // scope 1 at ui/async-await/issues/issue-64391-2.rs:13:23: 13:37
        _7 = <str as ToString>::to_string(move _8) -> [return: bb2, unwind: bb13]; // scope 1 at ui/async-await/issues/issue-64391-2.rs:13:23: 13:37
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64391-2.rs:13:26: 13:35
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = connect2(move _5, move _7) -> [return: bb3, unwind: bb13]; // scope 1 at ui/async-await/issues/issue-64391-2.rs:13:5: 13:38
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64391-2.rs:13:5: 13:13
                                         // + literal: Const { ty: for<'a> fn(&'a u32, String) -> impl Future<Output = ()> {connect2}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = <impl Future<Output = ()> as IntoFuture>::into_future(move _4) -> [return: bb4, unwind: bb13]; // scope 1 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb4: {
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]); // scope 1 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
        (((*_26) as variant#3).1: impl std::future::Future<Output = ()>) = move _3; // scope 1 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
        goto -> bb5;                     // scope 2 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
    }

    bb5: {
        _27 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]); // scope 3 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
        _13 = &mut (((*_27) as variant#3).1: impl std::future::Future<Output = ()>); // scope 3 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
        _12 = &mut (*_13);               // scope 3 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
        _11 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _12) -> [return: bb6, unwind: bb12]; // scope 3 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = _21;                       // scope 3 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
        _15 = move _16;                  // scope 3 at ui/async-await/issues/issue-64391-2.rs:13:5: 13:44
        _14 = &mut (*_15);               // scope 3 at ui/async-await/issues/issue-64391-2.rs:13:5: 13:44
        _10 = <impl Future<Output = ()> as Future>::poll(move _11, move _14) -> [return: bb7, unwind: bb12]; // scope 3 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb7: {
        _17 = discriminant(_10);         // scope 2 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
        switchInt(move _17) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 2 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
    }

    bb8: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]); // scope 2 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
        discriminant((*_28)) = 3;        // scope 2 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
        return;                          // scope 2 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
    }

    bb9: {
        unreachable;                     // scope 2 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
    }

    bb10: {
        _18 = ((_10 as Ready).0: ());    // scope 2 at ui/async-await/issues/issue-64391-2.rs:13:5: 13:44
        _20 = _18;                       // scope 4 at ui/async-await/issues/issue-64391-2.rs:13:5: 13:44
        _29 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]); // scope 1 at ui/async-await/issues/issue-64391-2.rs:13:43: 13:44
        drop((((*_29) as variant#3).1: impl std::future::Future<Output = ()>)) -> [return: bb11, unwind: bb13]; // scope 1 at ui/async-await/issues/issue-64391-2.rs:13:43: 13:44
    }

    bb11: {
        _0 = Poll::<()>::Ready(move _20); // scope 0 at ui/async-await/issues/issue-64391-2.rs:14:2: 14:2
        _30 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]); // scope 0 at ui/async-await/issues/issue-64391-2.rs:14:2: 14:2
        discriminant((*_30)) = 1;        // scope 0 at ui/async-await/issues/issue-64391-2.rs:14:2: 14:2
        return;                          // scope 0 at ui/async-await/issues/issue-64391-2.rs:14:2: 14:2
    }

    bb12 (cleanup): {
        _31 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]); // scope 1 at ui/async-await/issues/issue-64391-2.rs:13:43: 13:44
        drop((((*_31) as variant#3).1: impl std::future::Future<Output = ()>)) -> bb13; // scope 1 at ui/async-await/issues/issue-64391-2.rs:13:43: 13:44
    }

    bb13 (cleanup): {
        _32 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:11:20: 14:2]); // scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
        discriminant((*_32)) = 2;        // scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
        resume;                          // scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    }

    bb14: {
        _19 = move _2;                   // scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
        _21 = move _19;                  // scope 2 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
        goto -> bb5;                     // scope 2 at ui/async-await/issues/issue-64391-2.rs:13:38: 13:44
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> bb15; // scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> bb16; // scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    }

    bb17: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-64391-2.rs:11:20: 14:2
    }
}

fn connect2(_1: &u32, _2: String) -> impl Future<Output = ()> {
    debug _config => _1;                 // in scope 0 at ui/async-await/issues/issue-64391-2.rs:16:19: 16:26
    debug _tls => _2;                    // in scope 0 at ui/async-await/issues/issue-64391-2.rs:16:34: 16:38
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 16:48
    let mut _3: [async fn body@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2]; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2

    bb0: {
        _3 = [generator@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2 (#0)] { _config: _1, _tls: move _2 }; // scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
                                         // generator
                                         // + def_id: DefId(0:6 ~ issue_64391_2[71c2]::connect2::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (&u32, std::string::String),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2]>(move _3) -> bb1; // scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2]) -> [async fn body@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2] {identity_future::<(), [async fn body@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-64391-2.rs:18:2: 18:2
    }
}

fn connect2::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _6;           // in scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
    debug _config => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2])).0: &u32); // in scope 0 at ui/async-await/issues/issue-64391-2.rs:16:19: 16:26
    debug _tls => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2])).1: std::string::String); // in scope 0 at ui/async-await/issues/issue-64391-2.rs:16:34: 16:38
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
    let _3: &u32;                        // in scope 0 at ui/async-await/issues/issue-64391-2.rs:16:19: 16:26
    let mut _5: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _6: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
    let mut _7: u32;                     // in scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
    let mut _8: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2]; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
    let mut _9: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2]; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
    let mut _10: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2]; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
    let mut _11: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2]; // in scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
    scope 1 {
        debug _config => _3;             // in scope 1 at ui/async-await/issues/issue-64391-2.rs:16:19: 16:26
        let _4: std::string::String;     // in scope 1 at ui/async-await/issues/issue-64391-2.rs:16:34: 16:38
        scope 2 {
            debug _tls => _4;            // in scope 2 at ui/async-await/issues/issue-64391-2.rs:16:34: 16:38
        }
    }

    bb0: {
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2]); // scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
        _7 = discriminant((*_8));        // scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
        switchInt(move _7) -> [0: bb1, 2: bb4, otherwise: bb5]; // scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
    }

    bb1: {
        _6 = move _2;                    // scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2]); // scope 0 at ui/async-await/issues/issue-64391-2.rs:16:19: 16:26
        _3 = ((*_9).0: &u32);            // scope 0 at ui/async-await/issues/issue-64391-2.rs:16:19: 16:26
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2]); // scope 1 at ui/async-await/issues/issue-64391-2.rs:16:34: 16:38
        _4 = move ((*_10).1: std::string::String); // scope 1 at ui/async-await/issues/issue-64391-2.rs:16:34: 16:38
        _5 = core::panicking::panic(const "not implemented") -> bb2; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2 (cleanup): {
        drop(_4) -> bb3;                 // scope 1 at ui/async-await/issues/issue-64391-2.rs:18:1: 18:2
    }

    bb3 (cleanup): {
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64391-2.rs:16:48: 18:2]); // scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
        discriminant((*_11)) = 2;        // scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
        resume;                          // scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
    }

    bb4: {
        assert(const false, "`async fn` resumed after panicking") -> bb4; // scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
    }

    bb5: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-64391-2.rs:16:48: 18:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-64391-2.rs:20:11: 20:11

    bb0: {
        return;                          // scope 0 at ui/async-await/issues/issue-64391-2.rs:20:14: 20:14
    }
}
