// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bar() -> impl Future<Output = Option<()>> {
    let mut _0: impl std::future::Future<Output = std::option::Option<()>>; // return place in scope 0 at ui/async-await/issues/issue-61986.rs:7:19: 7:29
    let mut _1: [async fn body@ui/async-await/issues/issue-61986.rs:7:30: 9:2]; // in scope 0 at ui/async-await/issues/issue-61986.rs:7:30: 9:2

    bb0: {
        _1 = [generator@ui/async-await/issues/issue-61986.rs:7:30: 9:2 (#0)]; // scope 0 at ui/async-await/issues/issue-61986.rs:7:30: 9:2
                                         // generator
                                         // + def_id: DefId(0:4 ~ issue_61986[fd10]::bar::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     std::option::Option<()>,
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<Option<()>, [async fn body@ui/async-await/issues/issue-61986.rs:7:30: 9:2]>(move _1) -> bb1; // scope 0 at ui/async-await/issues/issue-61986.rs:7:30: 9:2
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-61986.rs:7:30: 9:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-61986.rs:7:30: 9:2]) -> [async fn body@ui/async-await/issues/issue-61986.rs:7:30: 9:2] {identity_future::<Option<()>, [async fn body@ui/async-await/issues/issue-61986.rs:7:30: 9:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-61986.rs:9:2: 9:2
    }
}

fn bar::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-61986.rs:7:30: 9:2]>, _2: &mut Context<'_>) -> Poll<Option<()>> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/issues/issue-61986.rs:7:30: 9:2
    let mut _0: std::task::Poll<std::option::Option<()>>; // return place in scope 0 at ui/async-await/issues/issue-61986.rs:7:30: 9:2
    let mut _3: ();                      // in scope 0 at ui/async-await/issues/issue-61986.rs:8:10: 8:12
    let mut _4: std::option::Option<()>; // in scope 0 at ui/async-await/issues/issue-61986.rs:7:30: 9:2
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-61986.rs:7:30: 9:2
    let mut _6: u32;                     // in scope 0 at ui/async-await/issues/issue-61986.rs:7:30: 9:2
    let mut _7: &mut [async fn body@ui/async-await/issues/issue-61986.rs:7:30: 9:2]; // in scope 0 at ui/async-await/issues/issue-61986.rs:7:30: 9:2
    let mut _8: &mut [async fn body@ui/async-await/issues/issue-61986.rs:7:30: 9:2]; // in scope 0 at ui/async-await/issues/issue-61986.rs:7:30: 9:2

    bb0: {
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-61986.rs:7:30: 9:2]); // scope 0 at ui/async-await/issues/issue-61986.rs:7:30: 9:2
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/issues/issue-61986.rs:7:30: 9:2
        switchInt(move _6) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/issues/issue-61986.rs:7:30: 9:2
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/issues/issue-61986.rs:7:30: 9:2
        _3 = ();                         // scope 0 at ui/async-await/issues/issue-61986.rs:8:10: 8:12
        _4 = Option::<()>::Some(move _3); // scope 0 at ui/async-await/issues/issue-61986.rs:8:5: 8:13
        _0 = Poll::<Option<()>>::Ready(move _4); // scope 0 at ui/async-await/issues/issue-61986.rs:9:2: 9:2
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-61986.rs:7:30: 9:2]); // scope 0 at ui/async-await/issues/issue-61986.rs:9:2: 9:2
        discriminant((*_8)) = 1;         // scope 0 at ui/async-await/issues/issue-61986.rs:9:2: 9:2
        return;                          // scope 0 at ui/async-await/issues/issue-61986.rs:9:2: 9:2
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/issues/issue-61986.rs:7:30: 9:2
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-61986.rs:7:30: 9:2
    }
}

fn listen() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 11:19
    let mut _1: [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]; // in scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2

    bb0: {
        _1 = [generator@ui/async-await/issues/issue-61986.rs:11:19: 15:2 (#0)]; // scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
                                         // generator
                                         // + def_id: DefId(0:6 ~ issue_61986[fd10]::listen::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, impl std::future::Future<Output = std::option::Option<()>>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]>(move _1) -> bb1; // scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-61986.rs:11:19: 15:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]) -> [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2] {identity_future::<(), [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-61986.rs:15:2: 15:2
    }
}

fn listen::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _19;          // in scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
    let mut _3: std::option::Option<()>; // in scope 0 at ui/async-await/issues/issue-61986.rs:12:25: 12:36
    let mut _4: impl std::future::Future<Output = std::option::Option<()>>; // in scope 0 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
    let mut _5: impl std::future::Future<Output = std::option::Option<()>>; // in scope 0 at ui/async-await/issues/issue-61986.rs:12:25: 12:30
    let mut _6: std::task::Poll<std::option::Option<()>>; // in scope 0 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
    let mut _7: std::pin::Pin<&mut impl std::future::Future<Output = std::option::Option<()>>>; // in scope 0 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
    let mut _8: &mut impl std::future::Future<Output = std::option::Option<()>>; // in scope 0 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
    let mut _9: &mut impl std::future::Future<Output = std::option::Option<()>>; // in scope 0 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-61986.rs:12:25: 12:36
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-61986.rs:12:25: 12:36
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
    let mut _13: isize;                  // in scope 0 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
    let mut _16: isize;                  // in scope 0 at ui/async-await/issues/issue-61986.rs:12:15: 12:22
    let _17: std::string::String;        // in scope 0 at ui/async-await/issues/issue-61986.rs:13:9: 13:22
    let mut _18: ();                     // in scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
    let mut _19: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
    let mut _20: u32;                    // in scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
    let mut _21: &mut [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]; // in scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
    let mut _22: &mut [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]; // in scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
    let mut _23: &mut [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]; // in scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
    let mut _24: &mut [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]; // in scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
    let mut _25: &mut [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]; // in scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
    let mut _26: &mut [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]; // in scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
    scope 1 {
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2])) as variant#3).0: impl std::future::Future<Output = std::option::Option<()>>); // in scope 2 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
            let _14: std::option::Option<()>; // in scope 2 at ui/async-await/issues/issue-61986.rs:12:25: 12:36
            scope 3 {
            }
            scope 4 {
                debug result => _14;     // in scope 4 at ui/async-await/issues/issue-61986.rs:12:25: 12:36
            }
        }
    }

    bb0: {
        _21 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]); // scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
        _20 = discriminant((*_21));      // scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
        switchInt(move _20) -> [0: bb1, 1: bb17, 2: bb16, 3: bb15, otherwise: bb18]; // scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
    }

    bb1: {
        _19 = move _2;                   // scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
        goto -> bb2;                     // scope 0 at ui/async-await/issues/issue-61986.rs:12:5: 14:6
    }

    bb2: {
        _5 = bar() -> [return: bb3, unwind: bb14]; // scope 1 at ui/async-await/issues/issue-61986.rs:12:25: 12:30
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-61986.rs:12:25: 12:28
                                         // + literal: Const { ty: fn() -> impl Future<Output = Option<()>> {bar}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = <impl Future<Output = Option<()>> as IntoFuture>::into_future(move _5) -> [return: bb4, unwind: bb14]; // scope 1 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-61986.rs:12:30: 12:36
                                         // + literal: Const { ty: fn(impl Future<Output = Option<()>>) -> <impl Future<Output = Option<()>> as IntoFuture>::IntoFuture {<impl Future<Output = Option<()>> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb4: {
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]); // scope 1 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
        (((*_22) as variant#3).0: impl std::future::Future<Output = std::option::Option<()>>) = move _4; // scope 1 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
        goto -> bb5;                     // scope 2 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
    }

    bb5: {
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]); // scope 3 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
        _9 = &mut (((*_23) as variant#3).0: impl std::future::Future<Output = std::option::Option<()>>); // scope 3 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
        _8 = &mut (*_9);                 // scope 3 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
        _7 = Pin::<&mut impl Future<Output = Option<()>>>::new_unchecked(move _8) -> [return: bb6, unwind: bb14]; // scope 3 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-61986.rs:12:30: 12:36
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = Option<()>>) -> Pin<&mut impl Future<Output = Option<()>>> {Pin::<&mut impl Future<Output = Option<()>>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = _19;                       // scope 3 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
        _11 = move _12;                  // scope 3 at ui/async-await/issues/issue-61986.rs:12:25: 12:36
        _10 = &mut (*_11);               // scope 3 at ui/async-await/issues/issue-61986.rs:12:25: 12:36
        _6 = <impl Future<Output = Option<()>> as Future>::poll(move _7, move _10) -> [return: bb7, unwind: bb14]; // scope 3 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-61986.rs:12:30: 12:36
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = Option<()>>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = Option<()>> as Future>::Output> {<impl Future<Output = Option<()>> as Future>::poll}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = discriminant(_6);          // scope 2 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
        switchInt(move _13) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 2 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
    }

    bb8: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]); // scope 2 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
        discriminant((*_24)) = 3;        // scope 2 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
        return;                          // scope 2 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
    }

    bb9: {
        unreachable;                     // scope 2 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
    }

    bb10: {
        _14 = ((_6 as Ready).0: std::option::Option<()>); // scope 2 at ui/async-await/issues/issue-61986.rs:12:25: 12:36
        _3 = _14;                        // scope 4 at ui/async-await/issues/issue-61986.rs:12:25: 12:36
        _16 = discriminant(_3);          // scope 1 at ui/async-await/issues/issue-61986.rs:12:15: 12:22
        switchInt(move _16) -> [1: bb12, otherwise: bb11]; // scope 1 at ui/async-await/issues/issue-61986.rs:12:15: 12:22
    }

    bb11: {
        _18 = const ();                  // scope 0 at ui/async-await/issues/issue-61986.rs:12:5: 14:6
        _0 = Poll::<()>::Ready(move _18); // scope 0 at ui/async-await/issues/issue-61986.rs:15:2: 15:2
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]); // scope 0 at ui/async-await/issues/issue-61986.rs:15:2: 15:2
        discriminant((*_25)) = 1;        // scope 0 at ui/async-await/issues/issue-61986.rs:15:2: 15:2
        return;                          // scope 0 at ui/async-await/issues/issue-61986.rs:15:2: 15:2
    }

    bb12: {
        _17 = String::new() -> [return: bb13, unwind: bb14]; // scope 1 at ui/async-await/issues/issue-61986.rs:13:9: 13:22
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-61986.rs:13:9: 13:20
                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(<ZST>) }
    }

    bb13: {
        drop(_17) -> [return: bb2, unwind: bb14]; // scope 1 at ui/async-await/issues/issue-61986.rs:13:22: 13:23
    }

    bb14 (cleanup): {
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-61986.rs:11:19: 15:2]); // scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
        discriminant((*_26)) = 2;        // scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
        resume;                          // scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
    }

    bb15: {
        _15 = move _2;                   // scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
        _19 = move _15;                  // scope 2 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
        goto -> bb5;                     // scope 2 at ui/async-await/issues/issue-61986.rs:12:30: 12:36
    }

    bb16: {
        assert(const false, "`async fn` resumed after panicking") -> bb16; // scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
    }

    bb17: {
        assert(const false, "`async fn` resumed after completion") -> bb17; // scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
    }

    bb18: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-61986.rs:11:19: 15:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-61986.rs:17:11: 17:11
    let _1: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-61986.rs:18:5: 18:13

    bb0: {
        _1 = listen() -> bb1;            // scope 0 at ui/async-await/issues/issue-61986.rs:18:5: 18:13
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-61986.rs:18:5: 18:11
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {listen}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-61986.rs:19:2: 19:2
    }
}
