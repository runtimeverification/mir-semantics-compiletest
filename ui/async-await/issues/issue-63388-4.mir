// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/issues/issue-63388-4.rs:6:1: 6:7>::foo(_1: &A, _2: &u32) -> impl Future<Output = &A> {
    debug self => _1;                    // in scope 0 at ui/async-await/issues/issue-63388-4.rs:7:18: 7:23
    debug f => _2;                       // in scope 0 at ui/async-await/issues/issue-63388-4.rs:7:25: 7:26
    let mut _0: impl std::future::Future<Output = &A>; // return place in scope 0 at ui/async-await/issues/issue-63388-4.rs:7:37: 7:39
    let mut _3: [async fn body@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48]; // in scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48

    bb0: {
        _3 = [generator@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48 (#0)] { self: _1, f: _2 }; // scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
                                         // generator
                                         // + def_id: DefId(0:7 ~ issue_63388_4[0567]::{impl#0}::foo::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     &A,
                                         //     {},
                                         //     (&A, &u32),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<&A, [async fn body@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48]>(move _3) -> bb1; // scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48]) -> [async fn body@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48] {identity_future::<&A, [async fn body@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-63388-4.rs:7:48: 7:48
    }
}

fn <impl at ui/async-await/issues/issue-63388-4.rs:6:1: 6:7>::foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48]>, _2: &mut Context<'_>) -> Poll<&A> {
    debug _task_context => _6;           // in scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
    debug self => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48])).0: &A); // in scope 0 at ui/async-await/issues/issue-63388-4.rs:7:18: 7:23
    debug f => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48])).1: &u32); // in scope 0 at ui/async-await/issues/issue-63388-4.rs:7:25: 7:26
    let mut _0: std::task::Poll<&A>;     // return place in scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
    let _3: &A;                          // in scope 0 at ui/async-await/issues/issue-63388-4.rs:7:18: 7:23
    let mut _5: &A;                      // in scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
    let mut _6: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
    let mut _7: u32;                     // in scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
    let mut _8: &mut [async fn body@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48]; // in scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
    let mut _9: &mut [async fn body@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48]; // in scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
    let mut _10: &mut [async fn body@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48]; // in scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
    let mut _11: &mut [async fn body@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48]; // in scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
    scope 1 {
        debug self => _3;                // in scope 1 at ui/async-await/issues/issue-63388-4.rs:7:18: 7:23
        let _4: &u32;                    // in scope 1 at ui/async-await/issues/issue-63388-4.rs:7:25: 7:26
        scope 2 {
            debug f => _4;               // in scope 2 at ui/async-await/issues/issue-63388-4.rs:7:25: 7:26
        }
    }

    bb0: {
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48]); // scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
        _7 = discriminant((*_8));        // scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
        switchInt(move _7) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
    }

    bb1: {
        _6 = move _2;                    // scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48]); // scope 0 at ui/async-await/issues/issue-63388-4.rs:7:18: 7:23
        _3 = ((*_9).0: &A);              // scope 0 at ui/async-await/issues/issue-63388-4.rs:7:18: 7:23
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48]); // scope 1 at ui/async-await/issues/issue-63388-4.rs:7:25: 7:26
        _4 = ((*_10).1: &u32);           // scope 1 at ui/async-await/issues/issue-63388-4.rs:7:25: 7:26
        _5 = _3;                         // scope 2 at ui/async-await/issues/issue-63388-4.rs:7:42: 7:46
        _0 = Poll::<&A>::Ready(move _5); // scope 0 at ui/async-await/issues/issue-63388-4.rs:7:48: 7:48
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-63388-4.rs:7:40: 7:48]); // scope 0 at ui/async-await/issues/issue-63388-4.rs:7:48: 7:48
        discriminant((*_11)) = 1;        // scope 0 at ui/async-await/issues/issue-63388-4.rs:7:48: 7:48
        return;                          // scope 0 at ui/async-await/issues/issue-63388-4.rs:7:48: 7:48
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-63388-4.rs:7:40: 7:48
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-63388-4.rs:10:11: 10:11

    bb0: {
        return;                          // scope 0 at ui/async-await/issues/issue-63388-4.rs:10:14: 10:14
    }
}
