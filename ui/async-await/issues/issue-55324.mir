// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &i32, _2: F) -> impl Future<Output = i32> {
    debug x => _1;                       // in scope 0 at ui/async-await/issues/issue-55324.rs:6:39: 6:40
    debug future => _2;                  // in scope 0 at ui/async-await/issues/issue-55324.rs:6:48: 6:54
    let mut _0: impl std::future::Future<Output = i32>; // return place in scope 0 at ui/async-await/issues/issue-55324.rs:6:62: 6:65
    let mut _3: [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]; // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2

    bb0: {
        _3 = [generator@ui/async-await/issues/issue-55324.rs:6:66: 9:2 (#0)] { x: _1, future: move _2 }; // scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
                                         // generator
                                         // + def_id: DefId(0:6 ~ issue_55324[23a8]::foo::{closure#0})
                                         // + substs: [
                                         //     F,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     i32,
                                         //     for<'a> {std::future::ResumeTy, &'a i32, F, ()},
                                         //     (&i32, F),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<i32, [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]>(move _3) -> bb1; // scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55324.rs:6:66: 9:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]) -> [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2] {identity_future::<i32, [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-55324.rs:9:2: 9:2
    }
}

fn foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]>, _2: &mut Context<'_>) -> Poll<i32> {
    debug _task_context => _21;          // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    debug x => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2])).0: &i32); // in scope 0 at ui/async-await/issues/issue-55324.rs:6:39: 6:40
    debug future => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2])).1: F); // in scope 0 at ui/async-await/issues/issue-55324.rs:6:48: 6:54
    let mut _0: std::task::Poll<i32>;    // return place in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    let mut _5: F;                       // in scope 0 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
    let mut _6: F;                       // in scope 0 at ui/async-await/issues/issue-55324.rs:7:13: 7:19
    let mut _7: std::task::Poll<i32>;    // in scope 0 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
    let mut _8: std::pin::Pin<&mut F>;   // in scope 0 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
    let mut _9: &mut F;                  // in scope 0 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
    let mut _10: &mut F;                 // in scope 0 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55324.rs:7:13: 7:25
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55324.rs:7:13: 7:25
    let mut _13: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
    let mut _14: isize;                  // in scope 0 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
    let mut _16: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
    let mut _17: i32;                    // in scope 0 at ui/async-await/issues/issue-55324.rs:8:5: 8:7
    let mut _18: i32;                    // in scope 0 at ui/async-await/issues/issue-55324.rs:8:10: 8:11
    let mut _19: (i32, bool);            // in scope 0 at ui/async-await/issues/issue-55324.rs:8:5: 8:11
    let mut _20: i32;                    // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    let mut _21: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    let mut _22: u32;                    // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    let mut _23: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]; // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    let mut _24: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]; // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    let mut _25: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]; // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    let mut _26: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]; // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    let mut _27: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]; // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    let mut _28: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]; // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    let mut _29: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]; // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    let mut _30: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]; // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    let mut _31: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]; // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    let mut _32: &i32;                   // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    let mut _33: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]; // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    let mut _34: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]; // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    let mut _35: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]; // in scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    scope 1 {
        debug x => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2])) as variant#3).0: &i32); // in scope 1 at ui/async-await/issues/issue-55324.rs:6:39: 6:40
        let _3: F;                       // in scope 1 at ui/async-await/issues/issue-55324.rs:6:48: 6:54
        scope 2 {
            debug future => _3;          // in scope 2 at ui/async-await/issues/issue-55324.rs:6:48: 6:54
            let _4: i32;                 // in scope 2 at ui/async-await/issues/issue-55324.rs:7:9: 7:10
            scope 3 {
                debug y => _4;           // in scope 3 at ui/async-await/issues/issue-55324.rs:7:9: 7:10
            }
            scope 4 {
                debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2])) as variant#3).1: F); // in scope 4 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
                let _15: i32;            // in scope 4 at ui/async-await/issues/issue-55324.rs:7:13: 7:25
                scope 5 {
                }
                scope 6 {
                    debug result => _15; // in scope 6 at ui/async-await/issues/issue-55324.rs:7:13: 7:25
                }
            }
        }
    }

    bb0: {
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]); // scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
        _22 = discriminant((*_23));      // scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
        switchInt(move _22) -> [0: bb1, 1: bb15, 2: bb14, 3: bb13, otherwise: bb16]; // scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    }

    bb1: {
        _21 = move _2;                   // scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]); // scope 0 at ui/async-await/issues/issue-55324.rs:6:39: 6:40
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]); // scope 0 at ui/async-await/issues/issue-55324.rs:6:39: 6:40
        (((*_24) as variant#3).0: &i32) = ((*_25).0: &i32); // scope 0 at ui/async-await/issues/issue-55324.rs:6:39: 6:40
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]); // scope 1 at ui/async-await/issues/issue-55324.rs:6:48: 6:54
        _3 = move ((*_26).1: F);         // scope 1 at ui/async-await/issues/issue-55324.rs:6:48: 6:54
        _6 = move _3;                    // scope 2 at ui/async-await/issues/issue-55324.rs:7:13: 7:19
        _5 = <F as IntoFuture>::into_future(move _6) -> [return: bb2, unwind: bb12]; // scope 2 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55324.rs:7:19: 7:25
                                         // + literal: Const { ty: fn(F) -> <F as IntoFuture>::IntoFuture {<F as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb2: {
        _27 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]); // scope 2 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
        (((*_27) as variant#3).1: F) = move _5; // scope 2 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
        goto -> bb3;                     // scope 4 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
    }

    bb3: {
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]); // scope 5 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
        _10 = &mut (((*_28) as variant#3).1: F); // scope 5 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
        _9 = &mut (*_10);                // scope 5 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
        _8 = Pin::<&mut F>::new_unchecked(move _9) -> [return: bb4, unwind: bb11]; // scope 5 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55324.rs:7:19: 7:25
                                         // + literal: Const { ty: unsafe fn(&mut F) -> Pin<&mut F> {Pin::<&mut F>::new_unchecked}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = _21;                       // scope 5 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
        _12 = move _13;                  // scope 5 at ui/async-await/issues/issue-55324.rs:7:13: 7:25
        _11 = &mut (*_12);               // scope 5 at ui/async-await/issues/issue-55324.rs:7:13: 7:25
        _7 = <F as Future>::poll(move _8, move _11) -> [return: bb5, unwind: bb11]; // scope 5 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-55324.rs:7:19: 7:25
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut F>, &'b mut Context<'c>) -> Poll<<F as Future>::Output> {<F as Future>::poll}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = discriminant(_7);          // scope 4 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
        switchInt(move _14) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 4 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
    }

    bb6: {
        _0 = Poll::<i32>::Pending;       // scope 4 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
        _29 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]); // scope 4 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
        discriminant((*_29)) = 3;        // scope 4 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
        return;                          // scope 4 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
    }

    bb7: {
        unreachable;                     // scope 4 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
    }

    bb8: {
        _15 = ((_7 as Ready).0: i32);    // scope 4 at ui/async-await/issues/issue-55324.rs:7:13: 7:25
        _4 = _15;                        // scope 6 at ui/async-await/issues/issue-55324.rs:7:13: 7:25
        _30 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]); // scope 2 at ui/async-await/issues/issue-55324.rs:7:24: 7:25
        drop((((*_30) as variant#3).1: F)) -> [return: bb9, unwind: bb12]; // scope 2 at ui/async-await/issues/issue-55324.rs:7:24: 7:25
    }

    bb9: {
        _31 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]); // scope 3 at ui/async-await/issues/issue-55324.rs:8:5: 8:7
        _32 = deref_copy (((*_31) as variant#3).0: &i32); // scope 3 at ui/async-await/issues/issue-55324.rs:8:5: 8:7
        _17 = (*_32);                    // scope 3 at ui/async-await/issues/issue-55324.rs:8:5: 8:7
        _18 = _4;                        // scope 3 at ui/async-await/issues/issue-55324.rs:8:10: 8:11
        _19 = CheckedAdd(_17, _18);      // scope 3 at ui/async-await/issues/issue-55324.rs:8:5: 8:11
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _17, move _18) -> [success: bb10, unwind: bb12]; // scope 3 at ui/async-await/issues/issue-55324.rs:8:5: 8:11
    }

    bb10: {
        _20 = move (_19.0: i32);         // scope 3 at ui/async-await/issues/issue-55324.rs:8:5: 8:11
        _0 = Poll::<i32>::Ready(move _20); // scope 0 at ui/async-await/issues/issue-55324.rs:9:2: 9:2
        _33 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]); // scope 0 at ui/async-await/issues/issue-55324.rs:9:2: 9:2
        discriminant((*_33)) = 1;        // scope 0 at ui/async-await/issues/issue-55324.rs:9:2: 9:2
        return;                          // scope 0 at ui/async-await/issues/issue-55324.rs:9:2: 9:2
    }

    bb11 (cleanup): {
        _34 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]); // scope 2 at ui/async-await/issues/issue-55324.rs:7:24: 7:25
        drop((((*_34) as variant#3).1: F)) -> bb12; // scope 2 at ui/async-await/issues/issue-55324.rs:7:24: 7:25
    }

    bb12 (cleanup): {
        _35 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-55324.rs:6:66: 9:2]); // scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
        discriminant((*_35)) = 2;        // scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
        resume;                          // scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    }

    bb13: {
        _16 = move _2;                   // scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
        _21 = move _16;                  // scope 4 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
        goto -> bb3;                     // scope 4 at ui/async-await/issues/issue-55324.rs:7:19: 7:25
    }

    bb14: {
        assert(const false, "`async fn` resumed after panicking") -> bb14; // scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    }

    bb15: {
        assert(const false, "`async fn` resumed after completion") -> bb15; // scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    }

    bb16: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-55324.rs:6:66: 9:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-55324.rs:11:11: 11:11

    bb0: {
        return;                          // scope 0 at ui/async-await/issues/issue-55324.rs:11:13: 11:13
    }
}
