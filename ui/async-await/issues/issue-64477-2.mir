// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: String) -> impl Future<Output = ()> {
    debug _ => _1;                       // in scope 0 at ui/async-await/issues/issue-64477-2.rs:12:14: 12:15
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:25
    let mut _2: [async fn body@ui/async-await/issues/issue-64477-2.rs:12:25: 12:27]; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27

    bb0: {
        _2 = [generator@ui/async-await/issues/issue-64477-2.rs:12:25: 12:27 (#0)] { _: move _1 }; // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
                                         // generator
                                         // + def_id: DefId(0:4 ~ issue_64477_2[ebe2]::foo::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (std::string::String,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issues/issue-64477-2.rs:12:25: 12:27]>(move _2) -> bb1; // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issues/issue-64477-2.rs:12:25: 12:27]) -> [async fn body@ui/async-await/issues/issue-64477-2.rs:12:25: 12:27] {identity_future::<(), [async fn body@ui/async-await/issues/issue-64477-2.rs:12:25: 12:27]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:27: 12:27
    }
}

fn foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issues/issue-64477-2.rs:12:25: 12:27]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/issues/issue-64477-2.rs:12:25: 12:27])).0: std::string::String); // in scope 0 at ui/async-await/issues/issue-64477-2.rs:12:14: 12:15
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
    let mut _3: std::string::String;     // in scope 0 at ui/async-await/issues/issue-64477-2.rs:12:14: 12:15
    let mut _4: ();                      // in scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
    let mut _6: u32;                     // in scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
    let mut _7: &mut [async fn body@ui/async-await/issues/issue-64477-2.rs:12:25: 12:27]; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
    let mut _8: &mut [async fn body@ui/async-await/issues/issue-64477-2.rs:12:25: 12:27]; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
    let mut _9: &mut [async fn body@ui/async-await/issues/issue-64477-2.rs:12:25: 12:27]; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
    let mut _10: &mut [async fn body@ui/async-await/issues/issue-64477-2.rs:12:25: 12:27]; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
    scope 1 {
        debug _ => _3;                   // in scope 1 at ui/async-await/issues/issue-64477-2.rs:12:14: 12:15
        scope 2 {
        }
    }

    bb0: {
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64477-2.rs:12:25: 12:27]); // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
        switchInt(move _6) -> [0: bb1, 1: bb5, 2: bb4, otherwise: bb6]; // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64477-2.rs:12:25: 12:27]); // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:14: 12:15
        _3 = move ((*_8).0: std::string::String); // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:14: 12:15
        _4 = const ();                   // scope 2 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
        drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:26: 12:27
    }

    bb2: {
        _0 = Poll::<()>::Ready(move _4); // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:27: 12:27
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64477-2.rs:12:25: 12:27]); // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:27: 12:27
        discriminant((*_9)) = 1;         // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:27: 12:27
        return;                          // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:27: 12:27
    }

    bb3 (cleanup): {
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issues/issue-64477-2.rs:12:25: 12:27]); // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
        discriminant((*_10)) = 2;        // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
        resume;                          // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
    }

    bb4: {
        assert(const false, "`async fn` resumed after panicking") -> bb4; // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
    }

    bb5: {
        assert(const false, "`async fn` resumed after completion") -> bb5; // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
    }

    bb6: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-64477-2.rs:12:25: 12:27
    }
}

fn bar() -> impl Send {
    let mut _0: impl std::marker::Send;  // return place in scope 0 at ui/async-await/issues/issue-64477-2.rs:14:13: 14:22
    let mut _1: [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6

    bb0: {
        _1 = [generator@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6 (#0)]; // scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
                                         // generator
                                         // + def_id: DefId(0:6 ~ issue_64477_2[ebe2]::bar::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, std::string::String, impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]>(move _1) -> bb1; // scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
                                         // + literal: Const { ty: fn([async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]) -> [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6] {identity_future::<(), [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issues/issue-64477-2.rs:18:2: 18:2
    }
}

fn bar::{closure#0}(_1: Pin<&mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _35;          // in scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    let mut _3: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:9: 16:36
    let mut _5: std::string::String;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let _6: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _7: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _8: &[&str];                 // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:21: 16:28
    let mut _9: &[&str; 2];              // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:21: 16:28
    let _10: &[&str; 2];                 // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:21: 16:28
    let mut _11: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _12: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _13: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _14: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _15: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:30: 16:31
    let mut _16: &i32;                   // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:30: 16:31
    let _17: &i32;                       // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:30: 16:31
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:33: 16:34
    let mut _19: &i32;                   // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:33: 16:34
    let _20: &i32;                       // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:33: 16:34
    let mut _21: std::task::Poll<()>;    // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
    let mut _22: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
    let mut _23: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
    let mut _24: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
    let mut _25: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:9: 16:42
    let mut _26: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:9: 16:42
    let mut _27: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
    let mut _28: isize;                  // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
    let mut _30: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
    let mut _31: &i32;                   // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:33: 16:34
    let mut _32: &i32;                   // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:30: 16:31
    let mut _33: &[&str; 2];             // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:21: 16:28
    let mut _34: ();                     // in scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    let mut _35: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    let mut _36: u32;                    // in scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    let mut _37: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    let mut _38: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    let mut _39: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    let mut _40: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    let mut _41: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    let mut _42: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    let mut _43: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    let mut _44: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]; // in scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    scope 1 {
        debug res => _6;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }
    scope 2 {
        debug __awaitee => (((*(_1.0: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6])) as variant#3).0: impl std::future::Future<Output = ()>); // in scope 2 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
        let _29: ();                     // in scope 2 at ui/async-await/issues/issue-64477-2.rs:16:9: 16:42
        scope 3 {
        }
        scope 4 {
            debug result => _29;         // in scope 4 at ui/async-await/issues/issue-64477-2.rs:16:9: 16:42
        }
    }

    bb0: {
        _37 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]); // scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
        _36 = discriminant((*_37));      // scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
        switchInt(move _36) -> [0: bb1, 1: bb19, 2: bb18, 3: bb17, otherwise: bb20]; // scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    }

    bb1: {
        _35 = move _2;                   // scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
        _33 = const _;                   // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:21: 16:28
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477-2.rs:16:21: 16:28
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(bar::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[2])) }
        _10 = _33;                       // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:21: 16:28
        _9 = _10;                        // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:21: 16:28
        _8 = move _9 as &[&str] (Pointer(Unsize)); // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:21: 16:28
        _32 = const _;                   // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:30: 16:31
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477-2.rs:16:30: 16:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(bar::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[1])) }
        _17 = _32;                       // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:30: 16:31
        _16 = _17;                       // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:30: 16:31
        _15 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _16) -> [return: bb2, unwind: bb16]; // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:30: 16:31
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477-2.rs:16:30: 16:31
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _31 = const _;                   // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:33: 16:34
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477-2.rs:16:33: 16:34
                                         // + literal: Const { ty: &i32, val: Unevaluated(bar::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[0])) }
        _20 = _31;                       // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:33: 16:34
        _19 = _20;                       // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:33: 16:34
        _18 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _19) -> [return: bb3, unwind: bb16]; // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:33: 16:34
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477-2.rs:16:33: 16:34
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = [move _15, move _18];      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _13 = &_14;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _12 = _13;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _11 = move _12 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _7 = Arguments::<'_>::new_v1(move _8, move _11) -> [return: bb4, unwind: bb16]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = format(move _7) -> [return: bb5, unwind: bb16]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb5: {
        _5 = move _6;                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _4 = foo(move _5) -> [return: bb6, unwind: bb16]; // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:9: 16:36
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477-2.rs:16:9: 16:12
                                         // + literal: Const { ty: fn(String) -> impl Future<Output = ()> {foo}, val: Value(<ZST>) }
    }

    bb6: {
        _3 = <impl Future<Output = ()> as IntoFuture>::into_future(move _4) -> [return: bb7, unwind: bb16]; // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb7: {
        _38 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]); // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
        (((*_38) as variant#3).0: impl std::future::Future<Output = ()>) = move _3; // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
        goto -> bb8;                     // scope 2 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
    }

    bb8: {
        _39 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]); // scope 3 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
        _24 = &mut (((*_39) as variant#3).0: impl std::future::Future<Output = ()>); // scope 3 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
        _23 = &mut (*_24);               // scope 3 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
        _22 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _23) -> [return: bb9, unwind: bb15]; // scope 3 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb9: {
        _27 = _35;                       // scope 3 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
        _26 = move _27;                  // scope 3 at ui/async-await/issues/issue-64477-2.rs:16:9: 16:42
        _25 = &mut (*_26);               // scope 3 at ui/async-await/issues/issue-64477-2.rs:16:9: 16:42
        _21 = <impl Future<Output = ()> as Future>::poll(move _22, move _25) -> [return: bb10, unwind: bb15]; // scope 3 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb10: {
        _28 = discriminant(_21);         // scope 2 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
        switchInt(move _28) -> [0: bb13, 1: bb11, otherwise: bb12]; // scope 2 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
    }

    bb11: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
        _40 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]); // scope 2 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
        discriminant((*_40)) = 3;        // scope 2 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
        return;                          // scope 2 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
    }

    bb12: {
        unreachable;                     // scope 2 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
    }

    bb13: {
        _29 = ((_21 as Ready).0: ());    // scope 2 at ui/async-await/issues/issue-64477-2.rs:16:9: 16:42
        _41 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]); // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:41: 16:42
        drop((((*_41) as variant#3).0: impl std::future::Future<Output = ()>)) -> [return: bb14, unwind: bb16]; // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:41: 16:42
    }

    bb14: {
        _34 = const ();                  // scope 0 at ui/async-await/issues/issue-64477-2.rs:15:16: 17:6
        _0 = Poll::<()>::Ready(move _34); // scope 0 at ui/async-await/issues/issue-64477-2.rs:17:6: 17:6
        _42 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]); // scope 0 at ui/async-await/issues/issue-64477-2.rs:17:6: 17:6
        discriminant((*_42)) = 1;        // scope 0 at ui/async-await/issues/issue-64477-2.rs:17:6: 17:6
        return;                          // scope 0 at ui/async-await/issues/issue-64477-2.rs:17:6: 17:6
    }

    bb15 (cleanup): {
        _43 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]); // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:41: 16:42
        drop((((*_43) as variant#3).0: impl std::future::Future<Output = ()>)) -> bb16; // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:41: 16:42
    }

    bb16 (cleanup): {
        _44 = deref_copy (_1.0: &mut [async block@ui/async-await/issues/issue-64477-2.rs:15:5: 17:6]); // scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
        discriminant((*_44)) = 2;        // scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
        resume;                          // scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    }

    bb17: {
        _30 = move _2;                   // scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
        _35 = move _30;                  // scope 2 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
        goto -> bb8;                     // scope 2 at ui/async-await/issues/issue-64477-2.rs:16:36: 16:42
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    }

    bb20: {
        unreachable;                     // scope 0 at ui/async-await/issues/issue-64477-2.rs:15:5: 17:6
    }
}

promoted[0] in bar::{closure#0}: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:33: 16:34
    let mut _1: i32;                     // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:33: 16:34

    bb0: {
        _1 = const 2_i32;                // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:33: 16:34
        _0 = &_1;                        // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:33: 16:34
        return;                          // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:33: 16:34
    }
}

promoted[1] in bar::{closure#0}: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:30: 16:31
    let mut _1: i32;                     // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:30: 16:31

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:30: 16:31
        _0 = &_1;                        // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:30: 16:31
        return;                          // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:30: 16:31
    }
}

promoted[2] in bar::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:21: 16:28
    let mut _1: [&str; 2];               // in scope 0 at ui/async-await/issues/issue-64477-2.rs:16:21: 16:28

    bb0: {
        _1 = [const "", const ":"];      // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:21: 16:28
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477-2.rs:16:21: 16:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477-2.rs:16:21: 16:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:21: 16:28
        return;                          // scope 0 at ui/async-await/issues/issue-64477-2.rs:16:21: 16:28
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issues/issue-64477-2.rs:20:11: 20:11
    let mut _1: impl std::marker::Send;  // in scope 0 at ui/async-await/issues/issue-64477-2.rs:21:13: 21:18
    scope 1 {
    }

    bb0: {
        _1 = bar() -> bb1;               // scope 0 at ui/async-await/issues/issue-64477-2.rs:21:13: 21:18
                                         // mir::Constant
                                         // + span: ui/async-await/issues/issue-64477-2.rs:21:13: 21:16
                                         // + literal: Const { ty: fn() -> impl Send {bar}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/async-await/issues/issue-64477-2.rs:21:18: 21:19
    }

    bb2: {
        return;                          // scope 0 at ui/async-await/issues/issue-64477-2.rs:22:2: 22:2
    }
}
