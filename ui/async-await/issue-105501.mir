// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn is_send(_1: impl Send) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issue-105501.rs:12:26: 12:26

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/async-await/issue-105501.rs:12:27: 12:28
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issue-105501.rs:12:28: 12:28
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issue-105501.rs:14:15: 14:15
    let _1: [async block@ui/async-await/issue-105501.rs:15:15: 23:6]; // in scope 0 at ui/async-await/issue-105501.rs:15:9: 15:12
    let mut _2: [async block@ui/async-await/issue-105501.rs:15:15: 23:6]; // in scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    let _3: ();                          // in scope 0 at ui/async-await/issue-105501.rs:25:5: 27:7
    let mut _4: [async block@ui/async-await/issue-105501.rs:25:13: 27:6]; // in scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    let mut _5: [async block@ui/async-await/issue-105501.rs:25:13: 27:6]; // in scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    scope 1 {
        debug fut => _1;                 // in scope 1 at ui/async-await/issue-105501.rs:15:9: 15:12
    }

    bb0: {
        _2 = [generator@ui/async-await/issue-105501.rs:15:15: 23:6 (#0)]; // scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
                                         // generator
                                         // + def_id: DefId(0:6 ~ issue_105501[38b6]::main::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     std::option::Option<()>,
                                         //     for<'a, 'b> {std::future::ResumeTy, mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>, &'a mut mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>, mini_futures::Next<'b, mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _1 = identity_future::<Option<()>, [async block@ui/async-await/issue-105501.rs:15:15: 23:6]>(move _2) -> bb1; // scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:15:15: 23:6
                                         // + literal: Const { ty: fn([async block@ui/async-await/issue-105501.rs:15:15: 23:6]) -> [async block@ui/async-await/issue-105501.rs:15:15: 23:6] {identity_future::<Option<()>, [async block@ui/async-await/issue-105501.rs:15:15: 23:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = [generator@ui/async-await/issue-105501.rs:25:13: 27:6 (#0)] { fut: move _1 }; // scope 1 at ui/async-await/issue-105501.rs:25:13: 27:6
                                         // generator
                                         // + def_id: DefId(0:11 ~ issue_105501[38b6]::main::{closure#1})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, [async block@ui/async-await/issue-105501.rs:15:15: 23:6], ()},
                                         //     ([async block@ui/async-await/issue-105501.rs:15:15: 23:6],),
                                         // ]
                                         // + movability: Static
        _4 = identity_future::<(), [async block@ui/async-await/issue-105501.rs:25:13: 27:6]>(move _5) -> bb2; // scope 1 at ui/async-await/issue-105501.rs:25:13: 27:6
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:25:13: 27:6
                                         // + literal: Const { ty: fn([async block@ui/async-await/issue-105501.rs:25:13: 27:6]) -> [async block@ui/async-await/issue-105501.rs:25:13: 27:6] {identity_future::<(), [async block@ui/async-await/issue-105501.rs:25:13: 27:6]>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = is_send::<[async block@ui/async-await/issue-105501.rs:25:13: 27:6]>(move _4) -> bb3; // scope 1 at ui/async-await/issue-105501.rs:25:5: 27:7
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:25:5: 25:12
                                         // + literal: Const { ty: fn([async block@ui/async-await/issue-105501.rs:25:13: 27:6]) {is_send::<[async block@ui/async-await/issue-105501.rs:25:13: 27:6]>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/async-await/issue-105501.rs:28:2: 28:2
    }
}

fn main::{closure#0}(_1: Pin<&mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]>, _2: &mut Context<'_>) -> Poll<Option<()>> {
    debug _task_context => _25;          // in scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    let mut _0: std::task::Poll<std::option::Option<()>>; // return place in scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    let mut _3: mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>; // in scope 0 at ui/async-await/issue-105501.rs:16:26: 19:24
    let mut _4: mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>; // in scope 0 at ui/async-await/issue-105501.rs:16:26: 18:37
    let mut _5: mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>; // in scope 0 at ui/async-await/issue-105501.rs:16:26: 17:32
    let mut _6: mini_futures::Iter<std::array::IntoIter<(), 1>>; // in scope 0 at ui/async-await/issue-105501.rs:16:26: 16:50
    let mut _7: [(); 1];                 // in scope 0 at ui/async-await/issue-105501.rs:16:45: 16:49
    let mut _8: ();                      // in scope 0 at ui/async-await/issue-105501.rs:16:46: 16:48
    let mut _9: [closure@ui/async-await/issue-105501.rs:17:19: 17:22]; // in scope 0 at ui/async-await/issue-105501.rs:17:19: 17:31
    let mut _10: [closure@ui/async-await/issue-105501.rs:18:18: 18:21]; // in scope 0 at ui/async-await/issue-105501.rs:18:18: 18:36
    let mut _11: mini_futures::Next<'_, mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>>; // in scope 0 at ui/async-await/issue-105501.rs:22:22: 22:28
    let mut _12: mini_futures::Next<'_, mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>>; // in scope 0 at ui/async-await/issue-105501.rs:22:9: 22:22
    let mut _13: &mut mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>; // in scope 0 at ui/async-await/issue-105501.rs:22:9: 22:22
    let mut _14: std::task::Poll<std::option::Option<()>>; // in scope 0 at ui/async-await/issue-105501.rs:22:22: 22:28
    let mut _15: std::pin::Pin<&mut mini_futures::Next<'_, mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>>>; // in scope 0 at ui/async-await/issue-105501.rs:22:22: 22:28
    let mut _16: &mut mini_futures::Next<'_, mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>>; // in scope 0 at ui/async-await/issue-105501.rs:22:22: 22:28
    let mut _17: &mut mini_futures::Next<'_, mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>>; // in scope 0 at ui/async-await/issue-105501.rs:22:22: 22:28
    let mut _18: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-105501.rs:22:9: 22:28
    let mut _19: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-105501.rs:22:9: 22:28
    let mut _20: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-105501.rs:22:22: 22:28
    let mut _21: isize;                  // in scope 0 at ui/async-await/issue-105501.rs:22:22: 22:28
    let mut _23: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-105501.rs:22:22: 22:28
    let mut _24: std::option::Option<()>; // in scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    let mut _25: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    let mut _26: u32;                    // in scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    let mut _27: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]; // in scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    let mut _28: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]; // in scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    let mut _29: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]; // in scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    let mut _30: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]; // in scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    let mut _31: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]; // in scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    let mut _32: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]; // in scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    let mut _33: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]; // in scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    let mut _34: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]; // in scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    let mut _35: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]; // in scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    let mut _36: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]; // in scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    scope 1 {
        debug stream => (((*(_1.0: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6])) as variant#3).0: mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>); // in scope 1 at ui/async-await/issue-105501.rs:16:13: 16:23
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6])) as variant#3).1: mini_futures::Next<'_, mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>>); // in scope 2 at ui/async-await/issue-105501.rs:22:22: 22:28
            let _22: std::option::Option<()>; // in scope 2 at ui/async-await/issue-105501.rs:22:9: 22:28
            scope 3 {
            }
            scope 4 {
                debug result => _22;     // in scope 4 at ui/async-await/issue-105501.rs:22:9: 22:28
            }
        }
    }

    bb0: {
        _27 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]); // scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
        _26 = discriminant((*_27));      // scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
        switchInt(move _26) -> [0: bb1, 1: bb20, 2: bb19, 3: bb18, otherwise: bb21]; // scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    }

    bb1: {
        _25 = move _2;                   // scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
        _8 = ();                         // scope 0 at ui/async-await/issue-105501.rs:16:46: 16:48
        _7 = [move _8];                  // scope 0 at ui/async-await/issue-105501.rs:16:45: 16:49
        _6 = iter::<[(); 1]>(move _7) -> [return: bb2, unwind: bb17]; // scope 0 at ui/async-await/issue-105501.rs:16:26: 16:50
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:16:26: 16:44
                                         // + literal: Const { ty: fn([(); 1]) -> mini_futures::Iter<<[(); 1] as IntoIterator>::IntoIter> {iter::<[(); 1]>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = [closure@ui/async-await/issue-105501.rs:17:19: 17:22]; // scope 0 at ui/async-await/issue-105501.rs:17:19: 17:31
                                         // closure
                                         // + def_id: DefId(0:7 ~ issue_105501[38b6]::main::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(((),)) -> [async block@ui/async-await/issue-105501.rs:17:23: 17:31],
                                         //     (),
                                         // ]
        _5 = <mini_futures::Iter<std::array::IntoIter<(), 1>> as Stream>::then::<[async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>(move _6, move _9) -> [return: bb3, unwind: bb17]; // scope 0 at ui/async-await/issue-105501.rs:16:26: 17:32
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:17:14: 17:18
                                         // + literal: Const { ty: fn(mini_futures::Iter<std::array::IntoIter<(), 1>>, [closure@ui/async-await/issue-105501.rs:17:19: 17:22]) -> Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]> {<mini_futures::Iter<std::array::IntoIter<(), 1>> as Stream>::then::<[async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = [closure@ui/async-await/issue-105501.rs:18:18: 18:21]; // scope 0 at ui/async-await/issue-105501.rs:18:18: 18:36
                                         // closure
                                         // + def_id: DefId(0:9 ~ issue_105501[38b6]::main::{closure#0}::{closure#1})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(((),)) -> [async block@ui/async-await/issue-105501.rs:18:22: 18:36],
                                         //     (),
                                         // ]
        _4 = <Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]> as Stream>::map::<[async block@ui/async-await/issue-105501.rs:18:22: 18:36], [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>(move _5, move _10) -> [return: bb4, unwind: bb17]; // scope 0 at ui/async-await/issue-105501.rs:16:26: 18:37
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:18:14: 18:17
                                         // + literal: Const { ty: fn(Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]) -> mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]> {<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]> as Stream>::map::<[async block@ui/async-await/issue-105501.rs:18:22: 18:36], [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>}, val: Value(<ZST>) }
    }

    bb4: {
        _3 = <mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]> as Stream>::buffered(move _4) -> [return: bb5, unwind: bb17]; // scope 0 at ui/async-await/issue-105501.rs:16:26: 19:24
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:19:14: 19:22
                                         // + literal: Const { ty: fn(mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>) -> Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>> {<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]> as Stream>::buffered}, val: Value(<ZST>) }
    }

    bb5: {
        _28 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]); // scope 0 at ui/async-await/issue-105501.rs:16:26: 20:44
        (((*_28) as variant#3).0: mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>) = <Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>> as Stream>::filter_map::<std::future::Ready<Option<()>>, (), fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}>(move _3, ready::<Option<()>>) -> [return: bb6, unwind: bb17]; // scope 0 at ui/async-await/issue-105501.rs:16:26: 20:44
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:20:14: 20:24
                                         // + literal: Const { ty: fn(Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}) -> mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}> {<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>> as Stream>::filter_map::<std::future::Ready<Option<()>>, (), fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:20:25: 20:43
                                         // + literal: Const { ty: fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}, val: Value(<ZST>) }
    }

    bb6: {
        _29 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]); // scope 1 at ui/async-await/issue-105501.rs:22:9: 22:22
        _13 = &mut (((*_29) as variant#3).0: mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>); // scope 1 at ui/async-await/issue-105501.rs:22:9: 22:22
        _12 = <mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}> as Stream>::next(move _13) -> [return: bb7, unwind: bb16]; // scope 1 at ui/async-await/issue-105501.rs:22:9: 22:22
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:22:16: 22:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}>) -> Next<'a, mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}>> {<mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}> as Stream>::next}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = <Next<'_, mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}>> as IntoFuture>::into_future(move _12) -> [return: bb8, unwind: bb16]; // scope 1 at ui/async-await/issue-105501.rs:22:22: 22:28
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:22:22: 22:28
                                         // + literal: Const { ty: fn(Next<'_, mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}>>) -> <Next<'_, mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}>> as IntoFuture>::IntoFuture {<Next<'_, mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}>> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb8: {
        _30 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]); // scope 1 at ui/async-await/issue-105501.rs:22:22: 22:28
        (((*_30) as variant#3).1: mini_futures::Next<'_, mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>>) = move _11; // scope 1 at ui/async-await/issue-105501.rs:22:22: 22:28
        goto -> bb9;                     // scope 2 at ui/async-await/issue-105501.rs:22:22: 22:28
    }

    bb9: {
        _31 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]); // scope 3 at ui/async-await/issue-105501.rs:22:22: 22:28
        _17 = &mut (((*_31) as variant#3).1: mini_futures::Next<'_, mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>>); // scope 3 at ui/async-await/issue-105501.rs:22:22: 22:28
        _16 = &mut (*_17);               // scope 3 at ui/async-await/issue-105501.rs:22:22: 22:28
        _15 = Pin::<&mut Next<'_, mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}>>>::new_unchecked(move _16) -> [return: bb10, unwind: bb16]; // scope 3 at ui/async-await/issue-105501.rs:22:22: 22:28
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:22:22: 22:28
                                         // + literal: Const { ty: unsafe fn(&mut Next<'_, mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}>>) -> Pin<&mut Next<'_, mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}>>> {Pin::<&mut Next<'_, mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}>>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb10: {
        _20 = _25;                       // scope 3 at ui/async-await/issue-105501.rs:22:22: 22:28
        _19 = move _20;                  // scope 3 at ui/async-await/issue-105501.rs:22:9: 22:28
        _18 = &mut (*_19);               // scope 3 at ui/async-await/issue-105501.rs:22:9: 22:28
        _14 = <Next<'_, mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}>> as Future>::poll(move _15, move _18) -> [return: bb11, unwind: bb16]; // scope 3 at ui/async-await/issue-105501.rs:22:22: 22:28
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:22:22: 22:28
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut Next<'_, mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}>>>, &'b mut Context<'c>) -> Poll<<Next<'_, mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}>> as Future>::Output> {<Next<'_, mini_futures::FilterMap<Buffered<mini_futures::Map<Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<Option<()>>, fn(Option<()>) -> std::future::Ready<Option<()>> {ready::<Option<()>>}>> as Future>::poll}, val: Value(<ZST>) }
    }

    bb11: {
        _21 = discriminant(_14);         // scope 2 at ui/async-await/issue-105501.rs:22:22: 22:28
        switchInt(move _21) -> [0: bb14, 1: bb12, otherwise: bb13]; // scope 2 at ui/async-await/issue-105501.rs:22:22: 22:28
    }

    bb12: {
        _0 = Poll::<Option<()>>::Pending; // scope 2 at ui/async-await/issue-105501.rs:22:22: 22:28
        _32 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]); // scope 2 at ui/async-await/issue-105501.rs:22:22: 22:28
        discriminant((*_32)) = 3;        // scope 2 at ui/async-await/issue-105501.rs:22:22: 22:28
        return;                          // scope 2 at ui/async-await/issue-105501.rs:22:22: 22:28
    }

    bb13: {
        unreachable;                     // scope 2 at ui/async-await/issue-105501.rs:22:22: 22:28
    }

    bb14: {
        _22 = ((_14 as Ready).0: std::option::Option<()>); // scope 2 at ui/async-await/issue-105501.rs:22:9: 22:28
        _24 = _22;                       // scope 4 at ui/async-await/issue-105501.rs:22:9: 22:28
        _33 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]); // scope 0 at ui/async-await/issue-105501.rs:23:5: 23:6
        drop((((*_33) as variant#3).0: mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>)) -> [return: bb15, unwind: bb17]; // scope 0 at ui/async-await/issue-105501.rs:23:5: 23:6
    }

    bb15: {
        _0 = Poll::<Option<()>>::Ready(move _24); // scope 0 at ui/async-await/issue-105501.rs:23:6: 23:6
        _34 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]); // scope 0 at ui/async-await/issue-105501.rs:23:6: 23:6
        discriminant((*_34)) = 1;        // scope 0 at ui/async-await/issue-105501.rs:23:6: 23:6
        return;                          // scope 0 at ui/async-await/issue-105501.rs:23:6: 23:6
    }

    bb16 (cleanup): {
        _35 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]); // scope 0 at ui/async-await/issue-105501.rs:23:5: 23:6
        drop((((*_35) as variant#3).0: mini_futures::FilterMap<mini_futures::Buffered<mini_futures::Map<mini_futures::Then<mini_futures::Iter<std::array::IntoIter<(), 1>>, [async block@ui/async-await/issue-105501.rs:17:23: 17:31], [closure@ui/async-await/issue-105501.rs:17:19: 17:22]>, [closure@ui/async-await/issue-105501.rs:18:18: 18:21]>>, std::future::Ready<std::option::Option<()>>, fn(std::option::Option<()>) -> std::future::Ready<std::option::Option<()>> {std::future::ready::<std::option::Option<()>>}>)) -> bb17; // scope 0 at ui/async-await/issue-105501.rs:23:5: 23:6
    }

    bb17 (cleanup): {
        _36 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]); // scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
        discriminant((*_36)) = 2;        // scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
        resume;                          // scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    }

    bb18: {
        _23 = move _2;                   // scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
        _25 = move _23;                  // scope 2 at ui/async-await/issue-105501.rs:22:22: 22:28
        goto -> bb9;                     // scope 2 at ui/async-await/issue-105501.rs:22:22: 22:28
    }

    bb19: {
        assert(const false, "`async fn` resumed after panicking") -> bb19; // scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    }

    bb20: {
        assert(const false, "`async fn` resumed after completion") -> bb20; // scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    }

    bb21: {
        unreachable;                     // scope 0 at ui/async-await/issue-105501.rs:15:15: 23:6
    }
}

fn main::{closure#0}::{closure#0}(_1: &mut [closure@ui/async-await/issue-105501.rs:17:19: 17:22], _2: ()) -> [async block@ui/async-await/issue-105501.rs:17:23: 17:31] {
    let mut _0: [async block@ui/async-await/issue-105501.rs:17:23: 17:31]; // return place in scope 0 at ui/async-await/issue-105501.rs:17:23: 17:23
    let mut _3: [async block@ui/async-await/issue-105501.rs:17:23: 17:31]; // in scope 0 at ui/async-await/issue-105501.rs:17:23: 17:31

    bb0: {
        _3 = [generator@ui/async-await/issue-105501.rs:17:23: 17:31 (#0)]; // scope 0 at ui/async-await/issue-105501.rs:17:23: 17:31
                                         // generator
                                         // + def_id: DefId(0:8 ~ issue_105501[38b6]::main::{closure#0}::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async block@ui/async-await/issue-105501.rs:17:23: 17:31]>(move _3) -> bb1; // scope 0 at ui/async-await/issue-105501.rs:17:23: 17:31
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:17:23: 17:31
                                         // + literal: Const { ty: fn([async block@ui/async-await/issue-105501.rs:17:23: 17:31]) -> [async block@ui/async-await/issue-105501.rs:17:23: 17:31] {identity_future::<(), [async block@ui/async-await/issue-105501.rs:17:23: 17:31]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issue-105501.rs:17:31: 17:31
    }
}

fn main::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut [async block@ui/async-await/issue-105501.rs:17:23: 17:31]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/issue-105501.rs:17:23: 17:31
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issue-105501.rs:17:23: 17:31
    let mut _3: ();                      // in scope 0 at ui/async-await/issue-105501.rs:17:23: 17:31
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-105501.rs:17:23: 17:31
    let mut _5: u32;                     // in scope 0 at ui/async-await/issue-105501.rs:17:23: 17:31
    let mut _6: &mut [async block@ui/async-await/issue-105501.rs:17:23: 17:31]; // in scope 0 at ui/async-await/issue-105501.rs:17:23: 17:31
    let mut _7: &mut [async block@ui/async-await/issue-105501.rs:17:23: 17:31]; // in scope 0 at ui/async-await/issue-105501.rs:17:23: 17:31

    bb0: {
        _6 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:17:23: 17:31]); // scope 0 at ui/async-await/issue-105501.rs:17:23: 17:31
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/issue-105501.rs:17:23: 17:31
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/issue-105501.rs:17:23: 17:31
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/issue-105501.rs:17:23: 17:31
        _3 = const ();                   // scope 0 at ui/async-await/issue-105501.rs:17:29: 17:31
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/issue-105501.rs:17:31: 17:31
        _7 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:17:23: 17:31]); // scope 0 at ui/async-await/issue-105501.rs:17:31: 17:31
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/issue-105501.rs:17:31: 17:31
        return;                          // scope 0 at ui/async-await/issue-105501.rs:17:31: 17:31
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/issue-105501.rs:17:23: 17:31
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/issue-105501.rs:17:23: 17:31
    }
}

fn main::{closure#0}::{closure#1}(_1: &mut [closure@ui/async-await/issue-105501.rs:18:18: 18:21], _2: ()) -> [async block@ui/async-await/issue-105501.rs:18:22: 18:36] {
    let mut _0: [async block@ui/async-await/issue-105501.rs:18:22: 18:36]; // return place in scope 0 at ui/async-await/issue-105501.rs:18:22: 18:22
    let mut _3: [async block@ui/async-await/issue-105501.rs:18:22: 18:36]; // in scope 0 at ui/async-await/issue-105501.rs:18:22: 18:36

    bb0: {
        _3 = [generator@ui/async-await/issue-105501.rs:18:22: 18:36 (#0)]; // scope 0 at ui/async-await/issue-105501.rs:18:22: 18:36
                                         // generator
                                         // + def_id: DefId(0:10 ~ issue_105501[38b6]::main::{closure#0}::{closure#1}::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     std::option::Option<()>,
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<Option<()>, [async block@ui/async-await/issue-105501.rs:18:22: 18:36]>(move _3) -> bb1; // scope 0 at ui/async-await/issue-105501.rs:18:22: 18:36
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:18:22: 18:36
                                         // + literal: Const { ty: fn([async block@ui/async-await/issue-105501.rs:18:22: 18:36]) -> [async block@ui/async-await/issue-105501.rs:18:22: 18:36] {identity_future::<Option<()>, [async block@ui/async-await/issue-105501.rs:18:22: 18:36]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issue-105501.rs:18:36: 18:36
    }
}

fn main::{closure#0}::{closure#1}::{closure#0}(_1: Pin<&mut [async block@ui/async-await/issue-105501.rs:18:22: 18:36]>, _2: &mut Context<'_>) -> Poll<Option<()>> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/issue-105501.rs:18:22: 18:36
    let mut _0: std::task::Poll<std::option::Option<()>>; // return place in scope 0 at ui/async-await/issue-105501.rs:18:22: 18:36
    let mut _3: std::option::Option<()>; // in scope 0 at ui/async-await/issue-105501.rs:18:22: 18:36
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-105501.rs:18:22: 18:36
    let mut _5: u32;                     // in scope 0 at ui/async-await/issue-105501.rs:18:22: 18:36
    let mut _6: &mut [async block@ui/async-await/issue-105501.rs:18:22: 18:36]; // in scope 0 at ui/async-await/issue-105501.rs:18:22: 18:36
    let mut _7: &mut [async block@ui/async-await/issue-105501.rs:18:22: 18:36]; // in scope 0 at ui/async-await/issue-105501.rs:18:22: 18:36

    bb0: {
        _6 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:18:22: 18:36]); // scope 0 at ui/async-await/issue-105501.rs:18:22: 18:36
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/issue-105501.rs:18:22: 18:36
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/issue-105501.rs:18:22: 18:36
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/issue-105501.rs:18:22: 18:36
        _3 = Option::<()>::None;         // scope 0 at ui/async-await/issue-105501.rs:18:30: 18:34
        _0 = Poll::<Option<()>>::Ready(move _3); // scope 0 at ui/async-await/issue-105501.rs:18:36: 18:36
        _7 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:18:22: 18:36]); // scope 0 at ui/async-await/issue-105501.rs:18:36: 18:36
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/issue-105501.rs:18:36: 18:36
        return;                          // scope 0 at ui/async-await/issue-105501.rs:18:36: 18:36
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/issue-105501.rs:18:22: 18:36
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/issue-105501.rs:18:22: 18:36
    }
}

fn main::{closure#1}(_1: Pin<&mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _16;          // in scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    debug fut => ((*(_1.0: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6])).0: [async block@ui/async-await/issue-105501.rs:15:15: 23:6]); // in scope 0 at ui/async-await/issue-105501.rs:15:9: 15:12
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    let mut _3: [async block@ui/async-await/issue-105501.rs:15:15: 23:6]; // in scope 0 at ui/async-await/issue-105501.rs:26:32: 26:38
    let mut _4: [async block@ui/async-await/issue-105501.rs:15:15: 23:6]; // in scope 0 at ui/async-await/issue-105501.rs:26:29: 26:32
    let mut _5: std::task::Poll<std::option::Option<()>>; // in scope 0 at ui/async-await/issue-105501.rs:26:32: 26:38
    let mut _6: std::pin::Pin<&mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]>; // in scope 0 at ui/async-await/issue-105501.rs:26:32: 26:38
    let mut _7: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]; // in scope 0 at ui/async-await/issue-105501.rs:26:32: 26:38
    let mut _8: &mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]; // in scope 0 at ui/async-await/issue-105501.rs:26:32: 26:38
    let mut _9: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-105501.rs:26:29: 26:38
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-105501.rs:26:29: 26:38
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-105501.rs:26:32: 26:38
    let mut _12: isize;                  // in scope 0 at ui/async-await/issue-105501.rs:26:32: 26:38
    let mut _14: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-105501.rs:26:32: 26:38
    let mut _15: ();                     // in scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    let mut _16: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    let mut _17: u32;                    // in scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    let mut _18: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]; // in scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    let mut _19: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]; // in scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    let mut _20: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]; // in scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    let mut _21: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]; // in scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    let mut _22: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]; // in scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    let mut _23: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]; // in scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    let mut _24: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]; // in scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    let mut _25: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]; // in scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    let mut _26: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]; // in scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    scope 1 {
    }
    scope 2 {
        debug __awaitee => (((*(_1.0: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6])) as variant#3).0: [async block@ui/async-await/issue-105501.rs:15:15: 23:6]); // in scope 2 at ui/async-await/issue-105501.rs:26:32: 26:38
        let _13: std::option::Option<()>; // in scope 2 at ui/async-await/issue-105501.rs:26:29: 26:38
        scope 3 {
        }
        scope 4 {
            debug result => _13;         // in scope 4 at ui/async-await/issue-105501.rs:26:29: 26:38
        }
    }

    bb0: {
        _18 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]); // scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
        _17 = discriminant((*_18));      // scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
        switchInt(move _17) -> [0: bb1, 1: bb14, 2: bb13, 3: bb12, otherwise: bb15]; // scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    }

    bb1: {
        _16 = move _2;                   // scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
        _19 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]); // scope 0 at ui/async-await/issue-105501.rs:26:29: 26:32
        _4 = move ((*_19).0: [async block@ui/async-await/issue-105501.rs:15:15: 23:6]); // scope 0 at ui/async-await/issue-105501.rs:26:29: 26:32
        _3 = <[async block@ui/async-await/issue-105501.rs:15:15: 23:6] as IntoFuture>::into_future(move _4) -> [return: bb2, unwind: bb11]; // scope 0 at ui/async-await/issue-105501.rs:26:32: 26:38
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:26:32: 26:38
                                         // + literal: Const { ty: fn([async block@ui/async-await/issue-105501.rs:15:15: 23:6]) -> <[async block@ui/async-await/issue-105501.rs:15:15: 23:6] as IntoFuture>::IntoFuture {<[async block@ui/async-await/issue-105501.rs:15:15: 23:6] as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb2: {
        _20 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]); // scope 0 at ui/async-await/issue-105501.rs:26:32: 26:38
        (((*_20) as variant#3).0: [async block@ui/async-await/issue-105501.rs:15:15: 23:6]) = move _3; // scope 0 at ui/async-await/issue-105501.rs:26:32: 26:38
        goto -> bb3;                     // scope 2 at ui/async-await/issue-105501.rs:26:32: 26:38
    }

    bb3: {
        _21 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]); // scope 3 at ui/async-await/issue-105501.rs:26:32: 26:38
        _8 = &mut (((*_21) as variant#3).0: [async block@ui/async-await/issue-105501.rs:15:15: 23:6]); // scope 3 at ui/async-await/issue-105501.rs:26:32: 26:38
        _7 = &mut (*_8);                 // scope 3 at ui/async-await/issue-105501.rs:26:32: 26:38
        _6 = Pin::<&mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]>::new_unchecked(move _7) -> [return: bb4, unwind: bb10]; // scope 3 at ui/async-await/issue-105501.rs:26:32: 26:38
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:26:32: 26:38
                                         // + literal: Const { ty: unsafe fn(&mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]) -> Pin<&mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]> {Pin::<&mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]>::new_unchecked}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = _16;                       // scope 3 at ui/async-await/issue-105501.rs:26:32: 26:38
        _10 = move _11;                  // scope 3 at ui/async-await/issue-105501.rs:26:29: 26:38
        _9 = &mut (*_10);                // scope 3 at ui/async-await/issue-105501.rs:26:29: 26:38
        _5 = <[async block@ui/async-await/issue-105501.rs:15:15: 23:6] as Future>::poll(move _6, move _9) -> [return: bb5, unwind: bb10]; // scope 3 at ui/async-await/issue-105501.rs:26:32: 26:38
                                         // mir::Constant
                                         // + span: ui/async-await/issue-105501.rs:26:32: 26:38
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut [async block@ui/async-await/issue-105501.rs:15:15: 23:6]>, &'b mut Context<'c>) -> Poll<<[async block@ui/async-await/issue-105501.rs:15:15: 23:6] as Future>::Output> {<[async block@ui/async-await/issue-105501.rs:15:15: 23:6] as Future>::poll}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = discriminant(_5);          // scope 2 at ui/async-await/issue-105501.rs:26:32: 26:38
        switchInt(move _12) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 2 at ui/async-await/issue-105501.rs:26:32: 26:38
    }

    bb6: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/issue-105501.rs:26:32: 26:38
        _22 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]); // scope 2 at ui/async-await/issue-105501.rs:26:32: 26:38
        discriminant((*_22)) = 3;        // scope 2 at ui/async-await/issue-105501.rs:26:32: 26:38
        return;                          // scope 2 at ui/async-await/issue-105501.rs:26:32: 26:38
    }

    bb7: {
        unreachable;                     // scope 2 at ui/async-await/issue-105501.rs:26:32: 26:38
    }

    bb8: {
        _13 = ((_5 as Ready).0: std::option::Option<()>); // scope 2 at ui/async-await/issue-105501.rs:26:29: 26:38
        _23 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]); // scope 0 at ui/async-await/issue-105501.rs:26:37: 26:38
        drop((((*_23) as variant#3).0: [async block@ui/async-await/issue-105501.rs:15:15: 23:6])) -> [return: bb9, unwind: bb11]; // scope 0 at ui/async-await/issue-105501.rs:26:37: 26:38
    }

    bb9: {
        _15 = const ();                  // scope 0 at ui/async-await/issue-105501.rs:25:24: 27:6
        _0 = Poll::<()>::Ready(move _15); // scope 0 at ui/async-await/issue-105501.rs:27:6: 27:6
        _24 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]); // scope 0 at ui/async-await/issue-105501.rs:27:6: 27:6
        discriminant((*_24)) = 1;        // scope 0 at ui/async-await/issue-105501.rs:27:6: 27:6
        return;                          // scope 0 at ui/async-await/issue-105501.rs:27:6: 27:6
    }

    bb10 (cleanup): {
        _25 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]); // scope 0 at ui/async-await/issue-105501.rs:26:37: 26:38
        drop((((*_25) as variant#3).0: [async block@ui/async-await/issue-105501.rs:15:15: 23:6])) -> bb11; // scope 0 at ui/async-await/issue-105501.rs:26:37: 26:38
    }

    bb11 (cleanup): {
        _26 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-105501.rs:25:13: 27:6]); // scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
        discriminant((*_26)) = 2;        // scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
        resume;                          // scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    }

    bb12: {
        _14 = move _2;                   // scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
        _16 = move _14;                  // scope 2 at ui/async-await/issue-105501.rs:26:32: 26:38
        goto -> bb3;                     // scope 2 at ui/async-await/issue-105501.rs:26:32: 26:38
    }

    bb13: {
        assert(const false, "`async fn` resumed after panicking") -> bb13; // scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    }

    bb14: {
        assert(const false, "`async fn` resumed after completion") -> bb14; // scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    }

    bb15: {
        unreachable;                     // scope 0 at ui/async-await/issue-105501.rs:25:13: 27:6
    }
}

fn iter(_1: I) -> mini_futures::Iter<<I as IntoIterator>::IntoIter> {
    let mut _0: mini_futures::Iter<<I as std::iter::IntoIterator>::IntoIter>; // return place in scope 0 at ui/async-await/issue-105501.rs:36:29: 36:46
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_1) -> bb2;                 // scope 0 at ui/async-await/issue-105501.rs:41:5: 41:6
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/async-await/issue-105501.rs:36:5: 41:6
    }
}

fn Stream::then(_1: Self, _2: F) -> Then<Self, Fut, F> {
    debug self => _1;                    // in scope 0 at ui/async-await/issue-105501.rs:46:25: 46:29
    let mut _0: mini_futures::Then<Self, Fut, F>; // return place in scope 0 at ui/async-await/issue-105501.rs:46:40: 46:58
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _3 = core::panicking::panic(const "not yet implemented") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_2) -> bb2;                 // scope 0 at ui/async-await/issue-105501.rs:53:9: 53:10
    }

    bb2 (cleanup): {
        drop(_1) -> bb3;                 // scope 0 at ui/async-await/issue-105501.rs:53:9: 53:10
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/async-await/issue-105501.rs:46:9: 53:10
    }
}

fn Stream::map(_1: Self, _2: F) -> mini_futures::Map<Self, F> {
    debug self => _1;                    // in scope 0 at ui/async-await/issue-105501.rs:55:22: 55:26
    let mut _0: mini_futures::Map<Self, F>; // return place in scope 0 at ui/async-await/issue-105501.rs:55:37: 55:49
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _3 = core::panicking::panic(const "not yet implemented") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_2) -> bb2;                 // scope 0 at ui/async-await/issue-105501.rs:61:9: 61:10
    }

    bb2 (cleanup): {
        drop(_1) -> bb3;                 // scope 0 at ui/async-await/issue-105501.rs:61:9: 61:10
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/async-await/issue-105501.rs:55:9: 61:10
    }
}

fn Stream::buffered(_1: Self) -> Buffered<Self> {
    debug self => _1;                    // in scope 0 at ui/async-await/issue-105501.rs:63:21: 63:25
    let mut _0: mini_futures::Buffered<Self>; // return place in scope 0 at ui/async-await/issue-105501.rs:63:30: 63:44
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_1) -> bb2;                 // scope 0 at ui/async-await/issue-105501.rs:69:9: 69:10
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/async-await/issue-105501.rs:63:9: 69:10
    }
}

fn Stream::filter_map(_1: Self, _2: F) -> mini_futures::FilterMap<Self, Fut, F> {
    debug self => _1;                    // in scope 0 at ui/async-await/issue-105501.rs:71:34: 71:38
    let mut _0: mini_futures::FilterMap<Self, Fut, F>; // return place in scope 0 at ui/async-await/issue-105501.rs:71:49: 71:72
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _3 = core::panicking::panic(const "not yet implemented") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_2) -> bb2;                 // scope 0 at ui/async-await/issue-105501.rs:78:9: 78:10
    }

    bb2 (cleanup): {
        drop(_1) -> bb3;                 // scope 0 at ui/async-await/issue-105501.rs:78:9: 78:10
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/async-await/issue-105501.rs:71:9: 78:10
    }
}

fn Stream::next(_1: &mut Self) -> Next<'_, Self> {
    debug self => _1;                    // in scope 0 at ui/async-await/issue-105501.rs:80:17: 80:26
    let mut _0: mini_futures::Next<'_, Self>; // return place in scope 0 at ui/async-await/issue-105501.rs:80:31: 80:45
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn mini_futures::<impl at ui/async-await/issue-105501.rs:158:5: 158:54>::poll(_1: Pin<&mut Next<'_, St>>, _2: &mut Context<'_>) -> Poll<Option<<St as Stream>::Item>> {
    debug self => _1;                    // in scope 0 at ui/async-await/issue-105501.rs:161:17: 161:21
    let mut _0: std::task::Poll<std::option::Option<<St as mini_futures::Stream>::Item>>; // return place in scope 0 at ui/async-await/issue-105501.rs:161:63: 161:81
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _3 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}
