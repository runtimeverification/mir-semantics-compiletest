// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/unreachable-lint.rs:5:16: 5:16
    let mut _1: [async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2]; // in scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2

    bb0: {
        _1 = [generator@ui/async-await/unreachable-lint.rs:5:16: 7:2 (#0)]; // scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
                                         // generator
                                         // + def_id: DefId(0:4 ~ unreachable_lint[ce9e]::foo::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, impl std::future::Future<Output = !>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2]>(move _1) -> bb1; // scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
                                         // mir::Constant
                                         // + span: ui/async-await/unreachable-lint.rs:5:16: 7:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2]) -> [async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2] {identity_future::<(), [async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/unreachable-lint.rs:7:2: 7:2
    }
}

fn foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _15;          // in scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
    let mut _3: impl std::future::Future<Output = !>; // in scope 0 at ui/async-await/unreachable-lint.rs:6:14: 6:20
    let mut _4: impl std::future::Future<Output = !>; // in scope 0 at ui/async-await/unreachable-lint.rs:6:5: 6:14
    let mut _5: std::task::Poll<!>;      // in scope 0 at ui/async-await/unreachable-lint.rs:6:14: 6:20
    let mut _6: std::pin::Pin<&mut impl std::future::Future<Output = !>>; // in scope 0 at ui/async-await/unreachable-lint.rs:6:14: 6:20
    let mut _7: &mut impl std::future::Future<Output = !>; // in scope 0 at ui/async-await/unreachable-lint.rs:6:14: 6:20
    let mut _8: &mut impl std::future::Future<Output = !>; // in scope 0 at ui/async-await/unreachable-lint.rs:6:14: 6:20
    let mut _9: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/unreachable-lint.rs:6:5: 6:20
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/unreachable-lint.rs:6:5: 6:20
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/unreachable-lint.rs:6:14: 6:20
    let mut _12: isize;                  // in scope 0 at ui/async-await/unreachable-lint.rs:6:14: 6:20
    let mut _14: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/unreachable-lint.rs:6:14: 6:20
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
    let mut _16: u32;                    // in scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
    let mut _17: &mut [async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2]; // in scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
    let mut _18: &mut [async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2]; // in scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
    let mut _19: &mut [async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2]; // in scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
    let mut _20: &mut [async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2]; // in scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
    let mut _21: &mut [async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2]; // in scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2])) as variant#3).0: impl std::future::Future<Output = !>); // in scope 1 at ui/async-await/unreachable-lint.rs:6:14: 6:20
        let _13: !;                      // in scope 1 at ui/async-await/unreachable-lint.rs:6:5: 6:20
        scope 2 {
        }
        scope 3 {
            debug result => _13;         // in scope 3 at ui/async-await/unreachable-lint.rs:6:5: 6:20
        }
    }

    bb0: {
        _17 = deref_copy (_1.0: &mut [async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2]); // scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
        _16 = discriminant((*_17));      // scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
        switchInt(move _16) -> [0: bb1, 2: bb11, 3: bb10, otherwise: bb12]; // scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
    }

    bb1: {
        _15 = move _2;                   // scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
        _4 = endless() -> [return: bb2, unwind: bb9]; // scope 0 at ui/async-await/unreachable-lint.rs:6:5: 6:14
                                         // mir::Constant
                                         // + span: ui/async-await/unreachable-lint.rs:6:5: 6:12
                                         // + literal: Const { ty: fn() -> impl Future<Output = !> {endless}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <impl Future<Output = !> as IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb9]; // scope 0 at ui/async-await/unreachable-lint.rs:6:14: 6:20
                                         // mir::Constant
                                         // + span: ui/async-await/unreachable-lint.rs:6:14: 6:20
                                         // + literal: Const { ty: fn(impl Future<Output = !>) -> <impl Future<Output = !> as IntoFuture>::IntoFuture {<impl Future<Output = !> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _18 = deref_copy (_1.0: &mut [async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2]); // scope 0 at ui/async-await/unreachable-lint.rs:6:14: 6:20
        (((*_18) as variant#3).0: impl std::future::Future<Output = !>) = move _3; // scope 0 at ui/async-await/unreachable-lint.rs:6:14: 6:20
        goto -> bb4;                     // scope 1 at ui/async-await/unreachable-lint.rs:6:14: 6:20
    }

    bb4: {
        _19 = deref_copy (_1.0: &mut [async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2]); // scope 2 at ui/async-await/unreachable-lint.rs:6:14: 6:20
        _8 = &mut (((*_19) as variant#3).0: impl std::future::Future<Output = !>); // scope 2 at ui/async-await/unreachable-lint.rs:6:14: 6:20
        _7 = &mut (*_8);                 // scope 2 at ui/async-await/unreachable-lint.rs:6:14: 6:20
        _6 = Pin::<&mut impl Future<Output = !>>::new_unchecked(move _7) -> [return: bb5, unwind: bb9]; // scope 2 at ui/async-await/unreachable-lint.rs:6:14: 6:20
                                         // mir::Constant
                                         // + span: ui/async-await/unreachable-lint.rs:6:14: 6:20
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = !>) -> Pin<&mut impl Future<Output = !>> {Pin::<&mut impl Future<Output = !>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = _15;                       // scope 2 at ui/async-await/unreachable-lint.rs:6:14: 6:20
        _10 = move _11;                  // scope 2 at ui/async-await/unreachable-lint.rs:6:5: 6:20
        _9 = &mut (*_10);                // scope 2 at ui/async-await/unreachable-lint.rs:6:5: 6:20
        _5 = <impl Future<Output = !> as Future>::poll(move _6, move _9) -> [return: bb6, unwind: bb9]; // scope 2 at ui/async-await/unreachable-lint.rs:6:14: 6:20
                                         // mir::Constant
                                         // + span: ui/async-await/unreachable-lint.rs:6:14: 6:20
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = !>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = !> as Future>::Output> {<impl Future<Output = !> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = discriminant(_5);          // scope 1 at ui/async-await/unreachable-lint.rs:6:14: 6:20
        switchInt(move _12) -> [1: bb7, otherwise: bb8]; // scope 1 at ui/async-await/unreachable-lint.rs:6:14: 6:20
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 1 at ui/async-await/unreachable-lint.rs:6:14: 6:20
        _20 = deref_copy (_1.0: &mut [async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2]); // scope 1 at ui/async-await/unreachable-lint.rs:6:14: 6:20
        discriminant((*_20)) = 3;        // scope 1 at ui/async-await/unreachable-lint.rs:6:14: 6:20
        return;                          // scope 1 at ui/async-await/unreachable-lint.rs:6:14: 6:20
    }

    bb8: {
        unreachable;                     // scope 1 at ui/async-await/unreachable-lint.rs:6:14: 6:20
    }

    bb9 (cleanup): {
        _21 = deref_copy (_1.0: &mut [async fn body@ui/async-await/unreachable-lint.rs:5:16: 7:2]); // scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
        discriminant((*_21)) = 2;        // scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
        resume;                          // scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
    }

    bb10: {
        _14 = move _2;                   // scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
        _15 = move _14;                  // scope 1 at ui/async-await/unreachable-lint.rs:6:14: 6:20
        goto -> bb4;                     // scope 1 at ui/async-await/unreachable-lint.rs:6:14: 6:20
    }

    bb11: {
        assert(const false, "`async fn` resumed after panicking") -> bb11; // scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
    }

    bb12: {
        unreachable;                     // scope 0 at ui/async-await/unreachable-lint.rs:5:16: 7:2
    }
}

fn endless() -> impl Future<Output = !> {
    let mut _0: impl std::future::Future<Output = !>; // return place in scope 0 at ui/async-await/unreachable-lint.rs:9:23: 9:24
    let mut _1: [async fn body@ui/async-await/unreachable-lint.rs:9:25: 11:2]; // in scope 0 at ui/async-await/unreachable-lint.rs:9:25: 11:2

    bb0: {
        _1 = [generator@ui/async-await/unreachable-lint.rs:9:25: 11:2 (#0)]; // scope 0 at ui/async-await/unreachable-lint.rs:9:25: 11:2
                                         // generator
                                         // + def_id: DefId(0:6 ~ unreachable_lint[ce9e]::endless::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     !,
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<!, [async fn body@ui/async-await/unreachable-lint.rs:9:25: 11:2]>(move _1) -> bb1; // scope 0 at ui/async-await/unreachable-lint.rs:9:25: 11:2
                                         // mir::Constant
                                         // + span: ui/async-await/unreachable-lint.rs:9:25: 11:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/unreachable-lint.rs:9:25: 11:2]) -> [async fn body@ui/async-await/unreachable-lint.rs:9:25: 11:2] {identity_future::<!, [async fn body@ui/async-await/unreachable-lint.rs:9:25: 11:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/unreachable-lint.rs:11:2: 11:2
    }
}

fn endless::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/unreachable-lint.rs:9:25: 11:2]>, _2: &mut Context<'_>) -> Poll<!> {
    debug _task_context => _3;           // in scope 0 at ui/async-await/unreachable-lint.rs:9:25: 11:2
    let mut _0: std::task::Poll<!>;      // return place in scope 0 at ui/async-await/unreachable-lint.rs:9:25: 11:2
    let mut _3: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/unreachable-lint.rs:9:25: 11:2
    let mut _4: u32;                     // in scope 0 at ui/async-await/unreachable-lint.rs:9:25: 11:2
    let mut _5: &mut [async fn body@ui/async-await/unreachable-lint.rs:9:25: 11:2]; // in scope 0 at ui/async-await/unreachable-lint.rs:9:25: 11:2

    bb0: {
        _5 = deref_copy (_1.0: &mut [async fn body@ui/async-await/unreachable-lint.rs:9:25: 11:2]); // scope 0 at ui/async-await/unreachable-lint.rs:9:25: 11:2
        _4 = discriminant((*_5));        // scope 0 at ui/async-await/unreachable-lint.rs:9:25: 11:2
        switchInt(move _4) -> [0: bb1, otherwise: bb3]; // scope 0 at ui/async-await/unreachable-lint.rs:9:25: 11:2
    }

    bb1: {
        _3 = move _2;                    // scope 0 at ui/async-await/unreachable-lint.rs:9:25: 11:2
        goto -> bb2;                     // scope 0 at ui/async-await/unreachable-lint.rs:10:5: 10:12
    }

    bb2: {
        goto -> bb2;                     // scope 0 at ui/async-await/unreachable-lint.rs:10:5: 10:12
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/unreachable-lint.rs:9:25: 11:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/unreachable-lint.rs:13:11: 13:11

    bb0: {
        return;                          // scope 0 at ui/async-await/unreachable-lint.rs:13:14: 13:14
    }
}
