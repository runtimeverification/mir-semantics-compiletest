// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn register_message_type() -> Pin<Box<dyn Future<Output = ()> + Send>> {
    let mut _0: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = ()> + std::marker::Send>>; // return place in scope 0 at ui/async-await/send-bound-async-closure.rs:13:35: 13:46
    let mut _1: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = ()> + std::marker::Send>>; // in scope 0 at ui/async-await/send-bound-async-closure.rs:14:5: 17:7
    let mut _2: std::pin::Pin<std::boxed::Box<[async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]>>; // in scope 0 at ui/async-await/send-bound-async-closure.rs:14:5: 17:7
    let mut _3: [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]; // in scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    let mut _4: [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]; // in scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6

    bb0: {
        _4 = [generator@ui/async-await/send-bound-async-closure.rs:14:14: 17:6 (#0)]; // scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
                                         // generator
                                         // + def_id: DefId(0:10 ~ send_bound_async_closure[ba08]::register_message_type::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, [closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41], PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _3 = identity_future::<(), [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]>(move _4) -> bb1; // scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
                                         // mir::Constant
                                         // + span: ui/async-await/send-bound-async-closure.rs:14:14: 17:6
                                         // + literal: Const { ty: fn([async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]) -> [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6] {identity_future::<(), [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Box::<[async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]>::pin(move _3) -> bb2; // scope 0 at ui/async-await/send-bound-async-closure.rs:14:5: 17:7
                                         // mir::Constant
                                         // + span: ui/async-await/send-bound-async-closure.rs:14:5: 14:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]) -> Pin<Box<[async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]>> {Box::<[async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]>::pin}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = move _2 as std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = ()> + std::marker::Send>> (Pointer(Unsize)); // scope 0 at ui/async-await/send-bound-async-closure.rs:14:5: 17:7
        _0 = move _1 as std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = ()> + std::marker::Send>> (Pointer(Unsize)); // scope 0 at ui/async-await/send-bound-async-closure.rs:14:5: 17:7
        return;                          // scope 0 at ui/async-await/send-bound-async-closure.rs:18:2: 18:2
    }
}

fn register_message_type::{closure#0}(_1: Pin<&mut [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _18;          // in scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    let _3: [closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]; // in scope 0 at ui/async-await/send-bound-async-closure.rs:15:13: 15:14
    let mut _4: PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]>; // in scope 0 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
    let mut _5: PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]>; // in scope 0 at ui/async-await/send-bound-async-closure.rs:16:9: 16:21
    let mut _6: [closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]; // in scope 0 at ui/async-await/send-bound-async-closure.rs:16:18: 16:19
    let mut _7: std::task::Poll<()>;     // in scope 0 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
    let mut _8: std::pin::Pin<&mut PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]>>; // in scope 0 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
    let mut _9: &mut PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]>; // in scope 0 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
    let mut _10: &mut PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]>; // in scope 0 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/send-bound-async-closure.rs:16:9: 16:27
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/send-bound-async-closure.rs:16:9: 16:27
    let mut _13: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
    let mut _14: isize;                  // in scope 0 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
    let mut _16: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
    let mut _17: ();                     // in scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    let mut _18: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    let mut _19: u32;                    // in scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    let mut _20: &mut [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]; // in scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    let mut _21: &mut [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]; // in scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    let mut _22: &mut [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]; // in scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    let mut _23: &mut [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]; // in scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    let mut _24: &mut [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]; // in scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    let mut _25: &mut [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]; // in scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    scope 1 {
        debug f => _3;                   // in scope 1 at ui/async-await/send-bound-async-closure.rs:15:13: 15:14
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6])) as variant#3).0: PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]>); // in scope 2 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
            let _15: ();                 // in scope 2 at ui/async-await/send-bound-async-closure.rs:16:9: 16:27
            scope 3 {
            }
            scope 4 {
                debug result => _15;     // in scope 4 at ui/async-await/send-bound-async-closure.rs:16:9: 16:27
            }
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]); // scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
        _19 = discriminant((*_20));      // scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
        switchInt(move _19) -> [0: bb1, 1: bb12, 2: bb11, 3: bb10, otherwise: bb13]; // scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    }

    bb1: {
        _18 = move _2;                   // scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
        _3 = [closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]; // scope 0 at ui/async-await/send-bound-async-closure.rs:15:17: 15:61
                                         // closure
                                         // + def_id: DefId(0:11 ~ send_bound_async_closure[ba08]::register_message_type::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     for<'a, 'b> extern "rust-call" fn((&'a mut std::task::Context<'b>,)) -> std::task::Poll<()>,
                                         //     (),
                                         // ]
        _6 = _3;                         // scope 1 at ui/async-await/send-bound-async-closure.rs:16:18: 16:19
        _5 = PollFn::<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]> { f: move _6 }; // scope 1 at ui/async-await/send-bound-async-closure.rs:16:9: 16:21
        _4 = <PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]> as IntoFuture>::into_future(move _5) -> [return: bb2, unwind: bb9]; // scope 1 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
                                         // mir::Constant
                                         // + span: ui/async-await/send-bound-async-closure.rs:16:21: 16:27
                                         // + literal: Const { ty: fn(PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]>) -> <PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]> as IntoFuture>::IntoFuture {<PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb2: {
        _21 = deref_copy (_1.0: &mut [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]); // scope 1 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
        (((*_21) as variant#3).0: PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]>) = move _4; // scope 1 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
        goto -> bb3;                     // scope 2 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
    }

    bb3: {
        _22 = deref_copy (_1.0: &mut [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]); // scope 3 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
        _10 = &mut (((*_22) as variant#3).0: PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]>); // scope 3 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
        _9 = &mut (*_10);                // scope 3 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
        _8 = Pin::<&mut PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]>>::new_unchecked(move _9) -> [return: bb4, unwind: bb9]; // scope 3 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
                                         // mir::Constant
                                         // + span: ui/async-await/send-bound-async-closure.rs:16:21: 16:27
                                         // + literal: Const { ty: unsafe fn(&mut PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]>) -> Pin<&mut PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]>> {Pin::<&mut PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = _18;                       // scope 3 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
        _12 = move _13;                  // scope 3 at ui/async-await/send-bound-async-closure.rs:16:9: 16:27
        _11 = &mut (*_12);               // scope 3 at ui/async-await/send-bound-async-closure.rs:16:9: 16:27
        _7 = <PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]> as Future>::poll(move _8, move _11) -> [return: bb5, unwind: bb9]; // scope 3 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
                                         // mir::Constant
                                         // + span: ui/async-await/send-bound-async-closure.rs:16:21: 16:27
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]>>, &'b mut Context<'c>) -> Poll<<PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]> as Future>::Output> {<PollFn<[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41]> as Future>::poll}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = discriminant(_7);          // scope 2 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
        switchInt(move _14) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 2 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
    }

    bb6: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
        _23 = deref_copy (_1.0: &mut [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]); // scope 2 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
        discriminant((*_23)) = 3;        // scope 2 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
        return;                          // scope 2 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
    }

    bb7: {
        unreachable;                     // scope 2 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
    }

    bb8: {
        _15 = ((_7 as Ready).0: ());     // scope 2 at ui/async-await/send-bound-async-closure.rs:16:9: 16:27
        _17 = _15;                       // scope 4 at ui/async-await/send-bound-async-closure.rs:16:9: 16:27
        _0 = Poll::<()>::Ready(move _17); // scope 0 at ui/async-await/send-bound-async-closure.rs:17:6: 17:6
        _24 = deref_copy (_1.0: &mut [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]); // scope 0 at ui/async-await/send-bound-async-closure.rs:17:6: 17:6
        discriminant((*_24)) = 1;        // scope 0 at ui/async-await/send-bound-async-closure.rs:17:6: 17:6
        return;                          // scope 0 at ui/async-await/send-bound-async-closure.rs:17:6: 17:6
    }

    bb9 (cleanup): {
        _25 = deref_copy (_1.0: &mut [async block@ui/async-await/send-bound-async-closure.rs:14:14: 17:6]); // scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
        discriminant((*_25)) = 2;        // scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
        resume;                          // scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    }

    bb10: {
        _16 = move _2;                   // scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
        _18 = move _16;                  // scope 2 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
        goto -> bb3;                     // scope 2 at ui/async-await/send-bound-async-closure.rs:16:21: 16:27
    }

    bb11: {
        assert(const false, "`async fn` resumed after panicking") -> bb11; // scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    }

    bb12: {
        assert(const false, "`async fn` resumed after completion") -> bb12; // scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    }

    bb13: {
        unreachable;                     // scope 0 at ui/async-await/send-bound-async-closure.rs:14:14: 17:6
    }
}

fn register_message_type::{closure#0}::{closure#0}(_1: &[closure@ui/async-await/send-bound-async-closure.rs:15:17: 15:41], _2: &mut Context<'_>) -> Poll<()> {
    debug __cx => _2;                    // in scope 0 at ui/async-await/send-bound-async-closure.rs:15:18: 15:22
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/send-bound-async-closure.rs:15:42: 15:42

    bb0: {
        _0 = const Poll::<()>::Pending;  // scope 0 at ui/async-await/send-bound-async-closure.rs:15:42: 15:61
                                         // mir::Constant
                                         // + span: ui/async-await/send-bound-async-closure.rs:15:42: 15:61
                                         // + literal: Const { ty: Poll<()>, val: Value(Scalar(0x01)) }
        return;                          // scope 0 at ui/async-await/send-bound-async-closure.rs:15:61: 15:61
    }
}

fn <impl at ui/async-await/send-bound-async-closure.rs:26:1: 26:32>::poll(_1: Pin<&mut PollFn<F>>, _2: &mut Context<'_>) -> Poll<T> {
    debug self => _1;                    // in scope 0 at ui/async-await/send-bound-async-closure.rs:32:13: 32:21
    debug cx => _2;                      // in scope 0 at ui/async-await/send-bound-async-closure.rs:32:39: 32:41
    let mut _0: std::task::Poll<T>;      // return place in scope 0 at ui/async-await/send-bound-async-closure.rs:32:64: 32:71
    let mut _3: &mut F;                  // in scope 0 at ui/async-await/send-bound-async-closure.rs:33:9: 33:22
    let mut _4: &mut F;                  // in scope 0 at ui/async-await/send-bound-async-closure.rs:33:9: 33:22
    let mut _5: &mut PollFn<F>;          // in scope 0 at ui/async-await/send-bound-async-closure.rs:33:15: 33:21
    let mut _6: &mut std::pin::Pin<&mut PollFn<F>>; // in scope 0 at ui/async-await/send-bound-async-closure.rs:33:15: 33:19
    let mut _7: (&mut std::task::Context<'_>,); // in scope 0 at ui/async-await/send-bound-async-closure.rs:33:9: 33:26
    let mut _8: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/send-bound-async-closure.rs:33:23: 33:25

    bb0: {
        _6 = &mut _1;                    // scope 0 at ui/async-await/send-bound-async-closure.rs:33:15: 33:19
        _5 = <Pin<&mut PollFn<F>> as DerefMut>::deref_mut(move _6) -> bb1; // scope 0 at ui/async-await/send-bound-async-closure.rs:33:15: 33:21
                                         // mir::Constant
                                         // + span: ui/async-await/send-bound-async-closure.rs:33:15: 33:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut Pin<&mut PollFn<F>>) -> &'a mut <Pin<&mut PollFn<F>> as Deref>::Target {<Pin<&mut PollFn<F>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut ((*_5).0: F);          // scope 0 at ui/async-await/send-bound-async-closure.rs:33:9: 33:22
        _3 = &mut (*_4);                 // scope 0 at ui/async-await/send-bound-async-closure.rs:33:9: 33:22
        _8 = &mut (*_2);                 // scope 0 at ui/async-await/send-bound-async-closure.rs:33:23: 33:25
        _7 = (move _8,);                 // scope 0 at ui/async-await/send-bound-async-closure.rs:33:9: 33:26
        _0 = <F as FnMut<(&mut Context<'_>,)>>::call_mut(move _3, move _7) -> bb2; // scope 0 at ui/async-await/send-bound-async-closure.rs:33:9: 33:26
                                         // mir::Constant
                                         // + span: ui/async-await/send-bound-async-closure.rs:33:9: 33:22
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (&mut Context<'_>,)) -> <F as FnOnce<(&mut Context<'_>,)>>::Output {<F as FnMut<(&mut Context<'_>,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/async-await/send-bound-async-closure.rs:34:6: 34:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/send-bound-async-closure.rs:37:11: 37:11

    bb0: {
        return;                          // scope 0 at ui/async-await/send-bound-async-closure.rs:37:13: 37:13
    }
}
