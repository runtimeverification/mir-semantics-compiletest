// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a(_1: impl Future) -> impl Future<Output = ()> {
    debug f => _1;                       // in scope 0 at ui/async-await/no-std.rs:9:12: 9:13
    let mut _0: impl core::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/no-std.rs:9:28: 9:28
    let mut _2: [async fn body@ui/async-await/no-std.rs:9:28: 11:2]; // in scope 0 at ui/async-await/no-std.rs:9:28: 11:2

    bb0: {
        _2 = [generator@ui/async-await/no-std.rs:9:28: 11:2 (#0)] { f: move _1 }; // scope 0 at ui/async-await/no-std.rs:9:28: 11:2
                                         // generator
                                         // + def_id: DefId(0:6 ~ no_std[08cd]::a::{closure#0})
                                         // + substs: [
                                         //     impl Future,
                                         //     core::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {core::future::ResumeTy, impl Future, ()},
                                         //     (impl Future,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/no-std.rs:9:28: 11:2]>(move _2) -> bb1; // scope 0 at ui/async-await/no-std.rs:9:28: 11:2
                                         // mir::Constant
                                         // + span: ui/async-await/no-std.rs:9:28: 11:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/no-std.rs:9:28: 11:2]) -> [async fn body@ui/async-await/no-std.rs:9:28: 11:2] {identity_future::<(), [async fn body@ui/async-await/no-std.rs:9:28: 11:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/no-std.rs:11:2: 11:2
    }
}

fn a::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _18;          // in scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    debug f => ((*(_1.0: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2])).0: impl Future); // in scope 0 at ui/async-await/no-std.rs:9:12: 9:13
    let mut _0: core::task::Poll<()>;    // return place in scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    let _3: impl Future;                 // in scope 0 at ui/async-await/no-std.rs:9:12: 9:13
    let _4: <impl Future as core::future::Future>::Output; // in scope 0 at ui/async-await/no-std.rs:10:5: 10:12
    let mut _5: impl Future;             // in scope 0 at ui/async-await/no-std.rs:10:6: 10:12
    let mut _6: impl Future;             // in scope 0 at ui/async-await/no-std.rs:10:5: 10:6
    let mut _7: core::task::Poll<<impl Future as core::future::Future>::Output>; // in scope 0 at ui/async-await/no-std.rs:10:6: 10:12
    let mut _8: core::pin::Pin<&mut impl Future>; // in scope 0 at ui/async-await/no-std.rs:10:6: 10:12
    let mut _9: &mut impl Future;        // in scope 0 at ui/async-await/no-std.rs:10:6: 10:12
    let mut _10: &mut impl Future;       // in scope 0 at ui/async-await/no-std.rs:10:6: 10:12
    let mut _11: &mut core::task::Context<'_>; // in scope 0 at ui/async-await/no-std.rs:10:5: 10:12
    let mut _12: &mut core::task::Context<'_>; // in scope 0 at ui/async-await/no-std.rs:10:5: 10:12
    let mut _13: &mut core::task::Context<'_>; // in scope 0 at ui/async-await/no-std.rs:10:6: 10:12
    let mut _14: isize;                  // in scope 0 at ui/async-await/no-std.rs:10:6: 10:12
    let mut _16: &mut core::task::Context<'_>; // in scope 0 at ui/async-await/no-std.rs:10:6: 10:12
    let mut _17: ();                     // in scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    let mut _18: &mut core::task::Context<'_>; // in scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    let mut _19: u32;                    // in scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    let mut _20: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]; // in scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    let mut _21: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]; // in scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    let mut _22: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]; // in scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    let mut _23: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]; // in scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    let mut _24: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]; // in scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    let mut _25: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]; // in scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    let mut _26: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]; // in scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    let mut _27: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]; // in scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    let mut _28: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]; // in scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    scope 1 {
        debug f => _3;                   // in scope 1 at ui/async-await/no-std.rs:9:12: 9:13
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2])) as variant#3).0: impl Future); // in scope 2 at ui/async-await/no-std.rs:10:6: 10:12
            let _15: <impl Future as core::future::Future>::Output; // in scope 2 at ui/async-await/no-std.rs:10:5: 10:12
            scope 3 {
            }
            scope 4 {
                debug result => _15;     // in scope 4 at ui/async-await/no-std.rs:10:5: 10:12
            }
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]); // scope 0 at ui/async-await/no-std.rs:9:28: 11:2
        _19 = discriminant((*_20));      // scope 0 at ui/async-await/no-std.rs:9:28: 11:2
        switchInt(move _19) -> [0: bb1, 1: bb15, 2: bb14, 3: bb13, otherwise: bb16]; // scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    }

    bb1: {
        _18 = move _2;                   // scope 0 at ui/async-await/no-std.rs:9:28: 11:2
        _21 = deref_copy (_1.0: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]); // scope 0 at ui/async-await/no-std.rs:9:12: 9:13
        _3 = move ((*_21).0: impl Future); // scope 0 at ui/async-await/no-std.rs:9:12: 9:13
        _6 = move _3;                    // scope 1 at ui/async-await/no-std.rs:10:5: 10:6
        _5 = <impl Future as IntoFuture>::into_future(move _6) -> [return: bb2, unwind: bb12]; // scope 1 at ui/async-await/no-std.rs:10:6: 10:12
                                         // mir::Constant
                                         // + span: ui/async-await/no-std.rs:10:6: 10:12
                                         // + literal: Const { ty: fn(impl Future) -> <impl Future as IntoFuture>::IntoFuture {<impl Future as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb2: {
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]); // scope 1 at ui/async-await/no-std.rs:10:6: 10:12
        (((*_22) as variant#3).0: impl Future) = move _5; // scope 1 at ui/async-await/no-std.rs:10:6: 10:12
        goto -> bb3;                     // scope 2 at ui/async-await/no-std.rs:10:6: 10:12
    }

    bb3: {
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]); // scope 3 at ui/async-await/no-std.rs:10:6: 10:12
        _10 = &mut (((*_23) as variant#3).0: impl Future); // scope 3 at ui/async-await/no-std.rs:10:6: 10:12
        _9 = &mut (*_10);                // scope 3 at ui/async-await/no-std.rs:10:6: 10:12
        _8 = Pin::<&mut impl Future>::new_unchecked(move _9) -> [return: bb4, unwind: bb11]; // scope 3 at ui/async-await/no-std.rs:10:6: 10:12
                                         // mir::Constant
                                         // + span: ui/async-await/no-std.rs:10:6: 10:12
                                         // + literal: Const { ty: unsafe fn(&mut impl Future) -> Pin<&mut impl Future> {Pin::<&mut impl Future>::new_unchecked}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = _18;                       // scope 3 at ui/async-await/no-std.rs:10:6: 10:12
        _12 = move _13;                  // scope 3 at ui/async-await/no-std.rs:10:5: 10:12
        _11 = &mut (*_12);               // scope 3 at ui/async-await/no-std.rs:10:5: 10:12
        _7 = <impl Future as Future>::poll(move _8, move _11) -> [return: bb5, unwind: bb11]; // scope 3 at ui/async-await/no-std.rs:10:6: 10:12
                                         // mir::Constant
                                         // + span: ui/async-await/no-std.rs:10:6: 10:12
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future>, &'b mut Context<'c>) -> Poll<<impl Future as Future>::Output> {<impl Future as Future>::poll}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = discriminant(_7);          // scope 2 at ui/async-await/no-std.rs:10:6: 10:12
        switchInt(move _14) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 2 at ui/async-await/no-std.rs:10:6: 10:12
    }

    bb6: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/no-std.rs:10:6: 10:12
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]); // scope 2 at ui/async-await/no-std.rs:10:6: 10:12
        discriminant((*_24)) = 3;        // scope 2 at ui/async-await/no-std.rs:10:6: 10:12
        return;                          // scope 2 at ui/async-await/no-std.rs:10:6: 10:12
    }

    bb7: {
        unreachable;                     // scope 2 at ui/async-await/no-std.rs:10:6: 10:12
    }

    bb8: {
        _15 = move ((_7 as Ready).0: <impl Future as core::future::Future>::Output); // scope 2 at ui/async-await/no-std.rs:10:5: 10:12
        _4 = move _15;                   // scope 4 at ui/async-await/no-std.rs:10:5: 10:12
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]); // scope 1 at ui/async-await/no-std.rs:10:11: 10:12
        drop((((*_25) as variant#3).0: impl Future)) -> [return: bb9, unwind: bb12]; // scope 1 at ui/async-await/no-std.rs:10:11: 10:12
    }

    bb9: {
        drop(_4) -> [return: bb10, unwind: bb12]; // scope 1 at ui/async-await/no-std.rs:10:12: 10:13
    }

    bb10: {
        _17 = const ();                  // scope 1 at ui/async-await/no-std.rs:9:28: 11:2
        _0 = Poll::<()>::Ready(move _17); // scope 0 at ui/async-await/no-std.rs:11:2: 11:2
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]); // scope 0 at ui/async-await/no-std.rs:11:2: 11:2
        discriminant((*_26)) = 1;        // scope 0 at ui/async-await/no-std.rs:11:2: 11:2
        return;                          // scope 0 at ui/async-await/no-std.rs:11:2: 11:2
    }

    bb11 (cleanup): {
        _27 = deref_copy (_1.0: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]); // scope 1 at ui/async-await/no-std.rs:10:11: 10:12
        drop((((*_27) as variant#3).0: impl Future)) -> bb12; // scope 1 at ui/async-await/no-std.rs:10:11: 10:12
    }

    bb12 (cleanup): {
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/no-std.rs:9:28: 11:2]); // scope 0 at ui/async-await/no-std.rs:9:28: 11:2
        discriminant((*_28)) = 2;        // scope 0 at ui/async-await/no-std.rs:9:28: 11:2
        resume;                          // scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    }

    bb13: {
        _16 = move _2;                   // scope 0 at ui/async-await/no-std.rs:9:28: 11:2
        _18 = move _16;                  // scope 2 at ui/async-await/no-std.rs:10:6: 10:12
        goto -> bb3;                     // scope 2 at ui/async-await/no-std.rs:10:6: 10:12
    }

    bb14: {
        assert(const false, "`async fn` resumed after panicking") -> bb14; // scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    }

    bb15: {
        assert(const false, "`async fn` resumed after completion") -> bb15; // scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    }

    bb16: {
        unreachable;                     // scope 0 at ui/async-await/no-std.rs:9:28: 11:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/no-std.rs:13:11: 13:11

    bb0: {
        return;                          // scope 0 at ui/async-await/no-std.rs:13:13: 13:13
    }
}
