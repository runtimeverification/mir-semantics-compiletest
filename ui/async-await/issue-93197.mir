// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issue-93197.rs:10:20: 10:20
    let mut _1: [async fn body@ui/async-await/issue-93197.rs:10:20: 14:2]; // in scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2

    bb0: {
        _1 = [generator@ui/async-await/issue-93197.rs:10:20: 14:2 (#0)]; // scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
                                         // generator
                                         // + def_id: DefId(0:7 ~ issue_93197[c667]::foo::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issue-93197.rs:10:20: 14:2]>(move _1) -> bb1; // scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
                                         // mir::Constant
                                         // + span: ui/async-await/issue-93197.rs:10:20: 14:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issue-93197.rs:10:20: 14:2]) -> [async fn body@ui/async-await/issue-93197.rs:10:20: 14:2] {identity_future::<(), [async fn body@ui/async-await/issue-93197.rs:10:20: 14:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issue-93197.rs:14:2: 14:2
    }
}

fn foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issue-93197.rs:10:20: 14:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _15;          // in scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
    let _3: std::sync::mpsc::Sender<&str>; // in scope 0 at ui/async-await/issue-93197.rs:11:10: 11:12
    let mut _4: (std::sync::mpsc::Sender<&str>, std::sync::mpsc::Receiver<&str>); // in scope 0 at ui/async-await/issue-93197.rs:11:19: 11:34
    let mut _5: std::result::Result<(), std::sync::mpsc::SendError<&str>>; // in scope 0 at ui/async-await/issue-93197.rs:13:42: 13:68
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::sync::mpsc::SendError<&str>>>; // in scope 0 at ui/async-await/issue-93197.rs:13:48: 13:65
    let mut _7: std::result::Result<(), std::sync::mpsc::SendError<&str>>; // in scope 0 at ui/async-await/issue-93197.rs:13:48: 13:64
    let mut _8: &std::sync::mpsc::Sender<&str>; // in scope 0 at ui/async-await/issue-93197.rs:13:48: 13:64
    let mut _9: isize;                   // in scope 0 at ui/async-await/issue-93197.rs:13:64: 13:65
    let mut _11: std::result::Result<std::convert::Infallible, std::sync::mpsc::SendError<&str>>; // in scope 0 at ui/async-await/issue-93197.rs:13:64: 13:65
    let mut _13: ();                     // in scope 0 at ui/async-await/issue-93197.rs:13:67: 13:68
    let mut _14: ();                     // in scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
    let mut _16: u32;                    // in scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
    let mut _17: &mut [async fn body@ui/async-await/issue-93197.rs:10:20: 14:2]; // in scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
    let mut _18: &mut [async fn body@ui/async-await/issue-93197.rs:10:20: 14:2]; // in scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
    let mut _19: &mut [async fn body@ui/async-await/issue-93197.rs:10:20: 14:2]; // in scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
    scope 1 {
        debug tx => _3;                  // in scope 1 at ui/async-await/issue-93197.rs:11:10: 11:12
        let _10: std::result::Result<std::convert::Infallible, std::sync::mpsc::SendError<&str>>; // in scope 1 at ui/async-await/issue-93197.rs:13:64: 13:65
        let _12: ();                     // in scope 1 at ui/async-await/issue-93197.rs:13:48: 13:65
        scope 2 {
        }
        scope 3 {
            debug residual => _10;       // in scope 3 at ui/async-await/issue-93197.rs:13:64: 13:65
            scope 4 {
            }
        }
        scope 5 {
            debug val => _12;            // in scope 5 at ui/async-await/issue-93197.rs:13:48: 13:65
            scope 6 {
            }
        }
    }

    bb0: {
        _17 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-93197.rs:10:20: 14:2]); // scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
        _16 = discriminant((*_17));      // scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
        switchInt(move _16) -> [0: bb1, 1: bb14, 2: bb13, otherwise: bb15]; // scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
    }

    bb1: {
        _15 = move _2;                   // scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
        _4 = channel::<&str>() -> [return: bb2, unwind: bb12]; // scope 0 at ui/async-await/issue-93197.rs:11:19: 11:34
                                         // mir::Constant
                                         // + span: ui/async-await/issue-93197.rs:11:19: 11:32
                                         // + literal: Const { ty: fn() -> (Sender<&str>, std::sync::mpsc::Receiver<&str>) {channel::<&str>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = move (_4.0: std::sync::mpsc::Sender<&str>); // scope 0 at ui/async-await/issue-93197.rs:11:10: 11:12
        drop((_4.1: std::sync::mpsc::Receiver<&str>)) -> [return: bb11, unwind: bb10]; // scope 0 at ui/async-await/issue-93197.rs:11:34: 11:35
    }

    bb3: {
        _6 = <Result<(), SendError<&str>> as Try>::branch(move _7) -> [return: bb4, unwind: bb10]; // scope 1 at ui/async-await/issue-93197.rs:13:48: 13:65
                                         // mir::Constant
                                         // + span: ui/async-await/issue-93197.rs:13:48: 13:65
                                         // + literal: Const { ty: fn(Result<(), SendError<&str>>) -> ControlFlow<<Result<(), SendError<&str>> as Try>::Residual, <Result<(), SendError<&str>> as Try>::Output> {<Result<(), SendError<&str>> as Try>::branch}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = discriminant(_6);           // scope 1 at ui/async-await/issue-93197.rs:13:48: 13:65
        switchInt(move _9) -> [0: bb5, 1: bb7, otherwise: bb6]; // scope 1 at ui/async-await/issue-93197.rs:13:48: 13:65
    }

    bb5: {
        _12 = ((_6 as Continue).0: ());  // scope 1 at ui/async-await/issue-93197.rs:13:48: 13:65
        _13 = ();                        // scope 1 at ui/async-await/issue-93197.rs:13:67: 13:68
        _5 = <Result<(), SendError<&str>> as Try>::from_output(move _13) -> [return: bb16, unwind: bb10]; // scope 1 at ui/async-await/issue-93197.rs:13:67: 13:68
                                         // mir::Constant
                                         // + span: ui/async-await/issue-93197.rs:13:67: 13:68
                                         // + literal: Const { ty: fn(<Result<(), SendError<&str>> as Try>::Output) -> Result<(), SendError<&str>> {<Result<(), SendError<&str>> as Try>::from_output}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 1 at ui/async-await/issue-93197.rs:13:48: 13:65
    }

    bb7: {
        _10 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, std::sync::mpsc::SendError<&str>>); // scope 1 at ui/async-await/issue-93197.rs:13:64: 13:65
        _11 = _10;                       // scope 4 at ui/async-await/issue-93197.rs:13:64: 13:65
        _5 = <Result<(), SendError<&str>> as FromResidual<Result<Infallible, SendError<&str>>>>::from_residual(move _11) -> [return: bb17, unwind: bb10]; // scope 4 at ui/async-await/issue-93197.rs:13:48: 13:65
                                         // mir::Constant
                                         // + span: ui/async-await/issue-93197.rs:13:64: 13:65
                                         // + literal: Const { ty: fn(Result<Infallible, SendError<&str>>) -> Result<(), SendError<&str>> {<Result<(), SendError<&str>> as FromResidual<Result<Infallible, SendError<&str>>>>::from_residual}, val: Value(<ZST>) }
    }

    bb8: {
        _14 = const ();                  // scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
        drop(_3) -> [return: bb9, unwind: bb12]; // scope 0 at ui/async-await/issue-93197.rs:14:1: 14:2
    }

    bb9: {
        _0 = Poll::<()>::Ready(move _14); // scope 0 at ui/async-await/issue-93197.rs:14:2: 14:2
        _18 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-93197.rs:10:20: 14:2]); // scope 0 at ui/async-await/issue-93197.rs:14:2: 14:2
        discriminant((*_18)) = 1;        // scope 0 at ui/async-await/issue-93197.rs:14:2: 14:2
        return;                          // scope 0 at ui/async-await/issue-93197.rs:14:2: 14:2
    }

    bb10 (cleanup): {
        drop(_3) -> bb12;                // scope 0 at ui/async-await/issue-93197.rs:14:1: 14:2
    }

    bb11: {
        _8 = &_3;                        // scope 1 at ui/async-await/issue-93197.rs:13:48: 13:64
        _7 = Sender::<&str>::send(move _8, const "hello") -> [return: bb3, unwind: bb10]; // scope 1 at ui/async-await/issue-93197.rs:13:48: 13:64
                                         // mir::Constant
                                         // + span: ui/async-await/issue-93197.rs:13:51: 13:55
                                         // + literal: Const { ty: for<'a> fn(&'a Sender<&str>, &str) -> Result<(), SendError<&str>> {Sender::<&str>::send}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/async-await/issue-93197.rs:13:56: 13:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12 (cleanup): {
        _19 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-93197.rs:10:20: 14:2]); // scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
        discriminant((*_19)) = 2;        // scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
        resume;                          // scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
    }

    bb13: {
        assert(const false, "`async fn` resumed after panicking") -> bb13; // scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
    }

    bb14: {
        assert(const false, "`async fn` resumed after completion") -> bb14; // scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
    }

    bb15: {
        unreachable;                     // scope 0 at ui/async-await/issue-93197.rs:10:20: 14:2
    }

    bb16: {
        goto -> bb8;                     // scope 1 at ui/async-await/issue-93197.rs:13:67: 13:68
    }

    bb17: {
        goto -> bb8;                     // scope 4 at ui/async-await/issue-93197.rs:13:48: 13:65
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issue-93197.rs:16:11: 16:11

    bb0: {
        return;                          // scope 0 at ui/async-await/issue-93197.rs:16:13: 16:13
    }
}
