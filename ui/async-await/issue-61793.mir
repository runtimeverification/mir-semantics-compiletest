// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &(), _2: F) -> impl Future<Output = ()> {
    debug _ => _1;                       // in scope 0 at ui/async-await/issue-61793.rs:9:17: 9:18
    debug _ => _2;                       // in scope 0 at ui/async-await/issue-61793.rs:9:25: 9:26
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issue-61793.rs:9:31: 9:31
    let mut _3: [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33]; // in scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33

    bb0: {
        _3 = [generator@ui/async-await/issue-61793.rs:9:31: 9:33 (#0)] { _: _1, _: move _2 }; // scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
                                         // generator
                                         // + def_id: DefId(0:5 ~ issue_61793[3e10]::foo::{closure#0})
                                         // + substs: [
                                         //     F,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (&(), F),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33]>(move _3) -> bb1; // scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
                                         // mir::Constant
                                         // + span: ui/async-await/issue-61793.rs:9:31: 9:33
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issue-61793.rs:9:31: 9:33]) -> [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33] {identity_future::<(), [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issue-61793.rs:9:33: 9:33
    }
}

fn foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _6;           // in scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33])).0: &()); // in scope 0 at ui/async-await/issue-61793.rs:9:17: 9:18
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33])).1: F); // in scope 0 at ui/async-await/issue-61793.rs:9:25: 9:26
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
    let mut _3: &();                     // in scope 0 at ui/async-await/issue-61793.rs:9:17: 9:18
    let mut _5: ();                      // in scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
    let mut _6: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
    let mut _7: u32;                     // in scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
    let mut _8: &mut [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33]; // in scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
    let mut _9: &mut [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33]; // in scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
    let mut _10: &mut [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33]; // in scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
    let mut _11: &mut [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33]; // in scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
    let mut _12: &mut [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33]; // in scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
    scope 1 {
        debug _ => _3;                   // in scope 1 at ui/async-await/issue-61793.rs:9:17: 9:18
        scope 2 {
            let mut _4: F;               // in scope 2 at ui/async-await/issue-61793.rs:9:25: 9:26
            scope 3 {
                debug _ => _4;           // in scope 3 at ui/async-await/issue-61793.rs:9:25: 9:26
                scope 4 {
                }
            }
        }
    }

    bb0: {
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33]); // scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
        _7 = discriminant((*_8));        // scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
        switchInt(move _7) -> [0: bb1, 1: bb5, 2: bb4, otherwise: bb6]; // scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
    }

    bb1: {
        _6 = move _2;                    // scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33]); // scope 0 at ui/async-await/issue-61793.rs:9:17: 9:18
        _3 = ((*_9).0: &());             // scope 0 at ui/async-await/issue-61793.rs:9:17: 9:18
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33]); // scope 2 at ui/async-await/issue-61793.rs:9:25: 9:26
        _4 = move ((*_10).1: F);         // scope 2 at ui/async-await/issue-61793.rs:9:25: 9:26
        _5 = const ();                   // scope 4 at ui/async-await/issue-61793.rs:9:31: 9:33
        drop(_4) -> [return: bb2, unwind: bb3]; // scope 2 at ui/async-await/issue-61793.rs:9:32: 9:33
    }

    bb2: {
        _0 = Poll::<()>::Ready(move _5); // scope 0 at ui/async-await/issue-61793.rs:9:33: 9:33
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33]); // scope 0 at ui/async-await/issue-61793.rs:9:33: 9:33
        discriminant((*_11)) = 1;        // scope 0 at ui/async-await/issue-61793.rs:9:33: 9:33
        return;                          // scope 0 at ui/async-await/issue-61793.rs:9:33: 9:33
    }

    bb3 (cleanup): {
        _12 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-61793.rs:9:31: 9:33]); // scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
        discriminant((*_12)) = 2;        // scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
        resume;                          // scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
    }

    bb4: {
        assert(const false, "`async fn` resumed after panicking") -> bb4; // scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
    }

    bb5: {
        assert(const false, "`async fn` resumed after completion") -> bb5; // scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
    }

    bb6: {
        unreachable;                     // scope 0 at ui/async-await/issue-61793.rs:9:31: 9:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issue-61793.rs:11:11: 11:11
    let _1: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-61793.rs:12:5: 12:20
    let mut _2: &();                     // in scope 0 at ui/async-await/issue-61793.rs:12:9: 12:12
    let _3: &();                         // in scope 0 at ui/async-await/issue-61793.rs:12:9: 12:12
    let mut _4: [closure@ui/async-await/issue-61793.rs:12:14: 12:16]; // in scope 0 at ui/async-await/issue-61793.rs:12:14: 12:19
    let _5: [async block@ui/async-await/issue-61793.rs:13:5: 15:6]; // in scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    let mut _6: [async block@ui/async-await/issue-61793.rs:13:5: 15:6]; // in scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    let mut _7: &();                     // in scope 0 at ui/async-await/issue-61793.rs:12:9: 12:12

    bb0: {
        _7 = const _;                    // scope 0 at ui/async-await/issue-61793.rs:12:9: 12:12
                                         // mir::Constant
                                         // + span: ui/async-await/issue-61793.rs:12:9: 12:12
                                         // + literal: Const { ty: &(), val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _7;                         // scope 0 at ui/async-await/issue-61793.rs:12:9: 12:12
        _2 = _3;                         // scope 0 at ui/async-await/issue-61793.rs:12:9: 12:12
        _1 = foo::<[closure@ui/async-await/issue-61793.rs:12:14: 12:16]>(move _2, move _4) -> bb1; // scope 0 at ui/async-await/issue-61793.rs:12:5: 12:20
                                         // mir::Constant
                                         // + span: ui/async-await/issue-61793.rs:12:5: 12:8
                                         // + literal: Const { ty: for<'a> fn(&'a (), [closure@ui/async-await/issue-61793.rs:12:14: 12:16]) -> impl Future<Output = ()> {foo::<[closure@ui/async-await/issue-61793.rs:12:14: 12:16]>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = [generator@ui/async-await/issue-61793.rs:13:5: 15:6 (#0)]; // scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
                                         // generator
                                         // + def_id: DefId(0:8 ~ issue_61793[3e10]::main::{closure#1})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     for<'a, 'b> {std::future::ResumeTy, (), &'a (), [closure@ui/async-await/issue-61793.rs:14:18: 14:20], impl std::future::Future<Output = ()>},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _5 = identity_future::<(), [async block@ui/async-await/issue-61793.rs:13:5: 15:6]>(move _6) -> bb2; // scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
                                         // mir::Constant
                                         // + span: ui/async-await/issue-61793.rs:13:5: 15:6
                                         // + literal: Const { ty: fn([async block@ui/async-await/issue-61793.rs:13:5: 15:6]) -> [async block@ui/async-await/issue-61793.rs:13:5: 15:6] {identity_future::<(), [async block@ui/async-await/issue-61793.rs:13:5: 15:6]>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_5) -> bb3;                 // scope 0 at ui/async-await/issue-61793.rs:15:6: 15:7
    }

    bb3: {
        return;                          // scope 0 at ui/async-await/issue-61793.rs:16:2: 16:2
    }
}

promoted[0] in main: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/async-await/issue-61793.rs:12:9: 12:12
    let mut _1: ();                      // in scope 0 at ui/async-await/issue-61793.rs:12:10: 12:12

    bb0: {
        _1 = ();                         // scope 0 at ui/async-await/issue-61793.rs:12:10: 12:12
        _0 = &_1;                        // scope 0 at ui/async-await/issue-61793.rs:12:9: 12:12
        return;                          // scope 0 at ui/async-await/issue-61793.rs:12:9: 12:12
    }
}

fn main::{closure#0}(_1: &[closure@ui/async-await/issue-61793.rs:12:14: 12:16]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issue-61793.rs:12:17: 12:17

    bb0: {
        return;                          // scope 0 at ui/async-await/issue-61793.rs:12:19: 12:19
    }
}

fn main::{closure#1}(_1: Pin<&mut [async block@ui/async-await/issue-61793.rs:13:5: 15:6]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _20;          // in scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    let mut _3: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-61793.rs:14:24: 14:30
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-61793.rs:14:9: 14:24
    let mut _5: &();                     // in scope 0 at ui/async-await/issue-61793.rs:14:13: 14:16
    let _6: &();                         // in scope 0 at ui/async-await/issue-61793.rs:14:13: 14:16
    let mut _7: [closure@ui/async-await/issue-61793.rs:14:18: 14:20]; // in scope 0 at ui/async-await/issue-61793.rs:14:18: 14:23
    let mut _8: std::task::Poll<()>;     // in scope 0 at ui/async-await/issue-61793.rs:14:24: 14:30
    let mut _9: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/issue-61793.rs:14:24: 14:30
    let mut _10: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-61793.rs:14:24: 14:30
    let mut _11: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-61793.rs:14:24: 14:30
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-61793.rs:14:9: 14:30
    let mut _13: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-61793.rs:14:9: 14:30
    let mut _14: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-61793.rs:14:24: 14:30
    let mut _15: isize;                  // in scope 0 at ui/async-await/issue-61793.rs:14:24: 14:30
    let mut _17: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-61793.rs:14:24: 14:30
    let mut _18: &();                    // in scope 0 at ui/async-await/issue-61793.rs:14:13: 14:16
    let mut _19: ();                     // in scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    let mut _20: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    let mut _21: u32;                    // in scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    let mut _22: &mut [async block@ui/async-await/issue-61793.rs:13:5: 15:6]; // in scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    let mut _23: &mut [async block@ui/async-await/issue-61793.rs:13:5: 15:6]; // in scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    let mut _24: &mut [async block@ui/async-await/issue-61793.rs:13:5: 15:6]; // in scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    let mut _25: &mut [async block@ui/async-await/issue-61793.rs:13:5: 15:6]; // in scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    let mut _26: &mut [async block@ui/async-await/issue-61793.rs:13:5: 15:6]; // in scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    let mut _27: &mut [async block@ui/async-await/issue-61793.rs:13:5: 15:6]; // in scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut [async block@ui/async-await/issue-61793.rs:13:5: 15:6])) as variant#3).0: impl std::future::Future<Output = ()>); // in scope 1 at ui/async-await/issue-61793.rs:14:24: 14:30
        let _16: ();                     // in scope 1 at ui/async-await/issue-61793.rs:14:9: 14:30
        scope 2 {
        }
        scope 3 {
            debug result => _16;         // in scope 3 at ui/async-await/issue-61793.rs:14:9: 14:30
        }
    }

    bb0: {
        _22 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-61793.rs:13:5: 15:6]); // scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
        _21 = discriminant((*_22));      // scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
        switchInt(move _21) -> [0: bb1, 1: bb13, 2: bb12, 3: bb11, otherwise: bb14]; // scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    }

    bb1: {
        _20 = move _2;                   // scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
        _18 = const _;                   // scope 0 at ui/async-await/issue-61793.rs:14:13: 14:16
                                         // mir::Constant
                                         // + span: ui/async-await/issue-61793.rs:14:13: 14:16
                                         // + literal: Const { ty: &(), val: Unevaluated(main::{closure#1}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[0])) }
        _6 = _18;                        // scope 0 at ui/async-await/issue-61793.rs:14:13: 14:16
        _5 = _6;                         // scope 0 at ui/async-await/issue-61793.rs:14:13: 14:16
        _7 = [closure@ui/async-await/issue-61793.rs:14:18: 14:20]; // scope 0 at ui/async-await/issue-61793.rs:14:18: 14:23
                                         // closure
                                         // + def_id: DefId(0:9 ~ issue_61793[3e10]::main::{closure#1}::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()),
                                         //     (),
                                         // ]
        _4 = foo::<[closure@ui/async-await/issue-61793.rs:14:18: 14:20]>(move _5, move _7) -> [return: bb2, unwind: bb10]; // scope 0 at ui/async-await/issue-61793.rs:14:9: 14:24
                                         // mir::Constant
                                         // + span: ui/async-await/issue-61793.rs:14:9: 14:12
                                         // + literal: Const { ty: for<'a> fn(&'a (), [closure@ui/async-await/issue-61793.rs:14:18: 14:20]) -> impl Future<Output = ()> {foo::<[closure@ui/async-await/issue-61793.rs:14:18: 14:20]>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <impl Future<Output = ()> as IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb10]; // scope 0 at ui/async-await/issue-61793.rs:14:24: 14:30
                                         // mir::Constant
                                         // + span: ui/async-await/issue-61793.rs:14:24: 14:30
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _23 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-61793.rs:13:5: 15:6]); // scope 0 at ui/async-await/issue-61793.rs:14:24: 14:30
        (((*_23) as variant#3).0: impl std::future::Future<Output = ()>) = move _3; // scope 0 at ui/async-await/issue-61793.rs:14:24: 14:30
        goto -> bb4;                     // scope 1 at ui/async-await/issue-61793.rs:14:24: 14:30
    }

    bb4: {
        _24 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-61793.rs:13:5: 15:6]); // scope 2 at ui/async-await/issue-61793.rs:14:24: 14:30
        _11 = &mut (((*_24) as variant#3).0: impl std::future::Future<Output = ()>); // scope 2 at ui/async-await/issue-61793.rs:14:24: 14:30
        _10 = &mut (*_11);               // scope 2 at ui/async-await/issue-61793.rs:14:24: 14:30
        _9 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _10) -> [return: bb5, unwind: bb10]; // scope 2 at ui/async-await/issue-61793.rs:14:24: 14:30
                                         // mir::Constant
                                         // + span: ui/async-await/issue-61793.rs:14:24: 14:30
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = _20;                       // scope 2 at ui/async-await/issue-61793.rs:14:24: 14:30
        _13 = move _14;                  // scope 2 at ui/async-await/issue-61793.rs:14:9: 14:30
        _12 = &mut (*_13);               // scope 2 at ui/async-await/issue-61793.rs:14:9: 14:30
        _8 = <impl Future<Output = ()> as Future>::poll(move _9, move _12) -> [return: bb6, unwind: bb10]; // scope 2 at ui/async-await/issue-61793.rs:14:24: 14:30
                                         // mir::Constant
                                         // + span: ui/async-await/issue-61793.rs:14:24: 14:30
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = discriminant(_8);          // scope 1 at ui/async-await/issue-61793.rs:14:24: 14:30
        switchInt(move _15) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 1 at ui/async-await/issue-61793.rs:14:24: 14:30
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 1 at ui/async-await/issue-61793.rs:14:24: 14:30
        _25 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-61793.rs:13:5: 15:6]); // scope 1 at ui/async-await/issue-61793.rs:14:24: 14:30
        discriminant((*_25)) = 3;        // scope 1 at ui/async-await/issue-61793.rs:14:24: 14:30
        return;                          // scope 1 at ui/async-await/issue-61793.rs:14:24: 14:30
    }

    bb8: {
        unreachable;                     // scope 1 at ui/async-await/issue-61793.rs:14:24: 14:30
    }

    bb9: {
        _16 = ((_8 as Ready).0: ());     // scope 1 at ui/async-await/issue-61793.rs:14:9: 14:30
        _19 = const ();                  // scope 0 at ui/async-await/issue-61793.rs:13:11: 15:6
        _0 = Poll::<()>::Ready(move _19); // scope 0 at ui/async-await/issue-61793.rs:15:6: 15:6
        _26 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-61793.rs:13:5: 15:6]); // scope 0 at ui/async-await/issue-61793.rs:15:6: 15:6
        discriminant((*_26)) = 1;        // scope 0 at ui/async-await/issue-61793.rs:15:6: 15:6
        return;                          // scope 0 at ui/async-await/issue-61793.rs:15:6: 15:6
    }

    bb10 (cleanup): {
        _27 = deref_copy (_1.0: &mut [async block@ui/async-await/issue-61793.rs:13:5: 15:6]); // scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
        discriminant((*_27)) = 2;        // scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
        resume;                          // scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    }

    bb11: {
        _17 = move _2;                   // scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
        _20 = move _17;                  // scope 1 at ui/async-await/issue-61793.rs:14:24: 14:30
        goto -> bb4;                     // scope 1 at ui/async-await/issue-61793.rs:14:24: 14:30
    }

    bb12: {
        assert(const false, "`async fn` resumed after panicking") -> bb12; // scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    }

    bb13: {
        assert(const false, "`async fn` resumed after completion") -> bb13; // scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    }

    bb14: {
        unreachable;                     // scope 0 at ui/async-await/issue-61793.rs:13:5: 15:6
    }
}

promoted[0] in main::{closure#1}: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/async-await/issue-61793.rs:14:13: 14:16
    let mut _1: ();                      // in scope 0 at ui/async-await/issue-61793.rs:14:14: 14:16

    bb0: {
        _1 = ();                         // scope 0 at ui/async-await/issue-61793.rs:14:14: 14:16
        _0 = &_1;                        // scope 0 at ui/async-await/issue-61793.rs:14:13: 14:16
        return;                          // scope 0 at ui/async-await/issue-61793.rs:14:13: 14:16
    }
}

fn main::{closure#1}::{closure#0}(_1: &[closure@ui/async-await/issue-61793.rs:14:18: 14:20]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issue-61793.rs:14:21: 14:21

    bb0: {
        return;                          // scope 0 at ui/async-await/issue-61793.rs:14:23: 14:23
    }
}
