// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn make_boxed_object() -> impl Future<Output = Box<(dyn Send + 'static)>> {
    let mut _0: impl std::future::Future<Output = std::boxed::Box<(dyn std::marker::Send + 'static)>>; // return place in scope 0 at ui/async-await/await-unsize.rs:6:33: 6:46
    let mut _1: [async fn body@ui/async-await/await-unsize.rs:6:47: 8:2]; // in scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2

    bb0: {
        _1 = [generator@ui/async-await/await-unsize.rs:6:47: 8:2 (#0)]; // scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
                                         // generator
                                         // + def_id: DefId(0:4 ~ await_unsize[c74f]::make_boxed_object::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     std::boxed::Box<dyn std::marker::Send>,
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<Box<dyn Send>, [async fn body@ui/async-await/await-unsize.rs:6:47: 8:2]>(move _1) -> bb1; // scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
                                         // mir::Constant
                                         // + span: ui/async-await/await-unsize.rs:6:47: 8:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/await-unsize.rs:6:47: 8:2]) -> [async fn body@ui/async-await/await-unsize.rs:6:47: 8:2] {identity_future::<Box<dyn Send>, [async fn body@ui/async-await/await-unsize.rs:6:47: 8:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/await-unsize.rs:8:2: 8:2
    }
}

fn make_boxed_object::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/await-unsize.rs:6:47: 8:2]>, _2: &mut Context<'_>) -> Poll<Box<dyn Send>> {
    debug _task_context => _9;           // in scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
    let mut _0: std::task::Poll<std::boxed::Box<dyn std::marker::Send>>; // return place in scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
    let mut _3: std::boxed::Box<dyn std::marker::Send>; // in scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
    let mut _4: std::boxed::Box<dyn std::marker::Send>; // in scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
    let mut _5: std::boxed::Box<dyn std::marker::Send>; // in scope 0 at ui/async-await/await-unsize.rs:7:5: 7:22
    let mut _6: std::boxed::Box<()>;     // in scope 0 at ui/async-await/await-unsize.rs:7:5: 7:17
    let mut _7: ();                      // in scope 0 at ui/async-await/await-unsize.rs:7:14: 7:16
    let mut _8: std::boxed::Box<dyn std::marker::Send>; // in scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
    let mut _9: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
    let mut _10: u32;                    // in scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
    let mut _11: &mut [async fn body@ui/async-await/await-unsize.rs:6:47: 8:2]; // in scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
    let mut _12: &mut [async fn body@ui/async-await/await-unsize.rs:6:47: 8:2]; // in scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
    let mut _13: &mut [async fn body@ui/async-await/await-unsize.rs:6:47: 8:2]; // in scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2

    bb0: {
        _11 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-unsize.rs:6:47: 8:2]); // scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
        _10 = discriminant((*_11));      // scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
        switchInt(move _10) -> [0: bb1, 1: bb5, 2: bb4, otherwise: bb6]; // scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
    }

    bb1: {
        _9 = move _2;                    // scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
        _7 = ();                         // scope 0 at ui/async-await/await-unsize.rs:7:14: 7:16
        _6 = Box::<()>::new(move _7) -> [return: bb2, unwind: bb3]; // scope 0 at ui/async-await/await-unsize.rs:7:5: 7:17
                                         // mir::Constant
                                         // + span: ui/async-await/await-unsize.rs:7:5: 7:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(()) -> Box<()> {Box::<()>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = move _6 as std::boxed::Box<dyn std::marker::Send> (Pointer(Unsize)); // scope 0 at ui/async-await/await-unsize.rs:7:5: 7:17
        _4 = move _5;                    // scope 0 at ui/async-await/await-unsize.rs:7:5: 7:22
        _3 = move _4 as std::boxed::Box<dyn std::marker::Send> (Pointer(Unsize)); // scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
        _8 = move _3 as std::boxed::Box<dyn std::marker::Send> (Pointer(Unsize)); // scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
        _0 = Poll::<Box<dyn Send>>::Ready(move _8); // scope 0 at ui/async-await/await-unsize.rs:8:2: 8:2
        _12 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-unsize.rs:6:47: 8:2]); // scope 0 at ui/async-await/await-unsize.rs:8:2: 8:2
        discriminant((*_12)) = 1;        // scope 0 at ui/async-await/await-unsize.rs:8:2: 8:2
        return;                          // scope 0 at ui/async-await/await-unsize.rs:8:2: 8:2
    }

    bb3 (cleanup): {
        _13 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-unsize.rs:6:47: 8:2]); // scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
        discriminant((*_13)) = 2;        // scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
        resume;                          // scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
    }

    bb4: {
        assert(const false, "`async fn` resumed after panicking") -> bb4; // scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
    }

    bb5: {
        assert(const false, "`async fn` resumed after completion") -> bb5; // scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
    }

    bb6: {
        unreachable;                     // scope 0 at ui/async-await/await-unsize.rs:6:47: 8:2
    }
}

fn await_object() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/await-unsize.rs:10:25: 10:25
    let mut _1: [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]; // in scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2

    bb0: {
        _1 = [generator@ui/async-await/await-unsize.rs:10:25: 12:2 (#0)]; // scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
                                         // generator
                                         // + def_id: DefId(0:6 ~ await_unsize[c74f]::await_object::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, impl std::future::Future<Output = std::boxed::Box<(dyn std::marker::Send + 'static)>>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]>(move _1) -> bb1; // scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
                                         // mir::Constant
                                         // + span: ui/async-await/await-unsize.rs:10:25: 12:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]) -> [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2] {identity_future::<(), [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/await-unsize.rs:12:2: 12:2
    }
}

fn await_object::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _17;          // in scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
    let mut _3: std::boxed::Box<dyn std::marker::Send>; // in scope 0 at ui/async-await/await-unsize.rs:11:13: 11:38
    let mut _4: impl std::future::Future<Output = std::boxed::Box<(dyn std::marker::Send + 'static)>>; // in scope 0 at ui/async-await/await-unsize.rs:11:32: 11:38
    let mut _5: impl std::future::Future<Output = std::boxed::Box<(dyn std::marker::Send + 'static)>>; // in scope 0 at ui/async-await/await-unsize.rs:11:13: 11:32
    let mut _6: std::task::Poll<std::boxed::Box<dyn std::marker::Send>>; // in scope 0 at ui/async-await/await-unsize.rs:11:32: 11:38
    let mut _7: std::pin::Pin<&mut impl std::future::Future<Output = std::boxed::Box<(dyn std::marker::Send + 'static)>>>; // in scope 0 at ui/async-await/await-unsize.rs:11:32: 11:38
    let mut _8: &mut impl std::future::Future<Output = std::boxed::Box<(dyn std::marker::Send + 'static)>>; // in scope 0 at ui/async-await/await-unsize.rs:11:32: 11:38
    let mut _9: &mut impl std::future::Future<Output = std::boxed::Box<(dyn std::marker::Send + 'static)>>; // in scope 0 at ui/async-await/await-unsize.rs:11:32: 11:38
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-unsize.rs:11:13: 11:38
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-unsize.rs:11:13: 11:38
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-unsize.rs:11:32: 11:38
    let mut _13: isize;                  // in scope 0 at ui/async-await/await-unsize.rs:11:32: 11:38
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-unsize.rs:11:32: 11:38
    let mut _16: ();                     // in scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
    let mut _17: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
    let mut _18: u32;                    // in scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
    let mut _19: &mut [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]; // in scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
    let mut _20: &mut [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]; // in scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
    let mut _21: &mut [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]; // in scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
    let mut _22: &mut [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]; // in scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
    let mut _23: &mut [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]; // in scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
    let mut _24: &mut [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]; // in scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
    scope 1 {
    }
    scope 2 {
        debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2])) as variant#3).0: impl std::future::Future<Output = std::boxed::Box<(dyn std::marker::Send + 'static)>>); // in scope 2 at ui/async-await/await-unsize.rs:11:32: 11:38
        let _14: std::boxed::Box<dyn std::marker::Send>; // in scope 2 at ui/async-await/await-unsize.rs:11:13: 11:38
        scope 3 {
        }
        scope 4 {
            debug result => _14;         // in scope 4 at ui/async-await/await-unsize.rs:11:13: 11:38
        }
    }

    bb0: {
        _19 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]); // scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
        _18 = discriminant((*_19));      // scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
        switchInt(move _18) -> [0: bb1, 1: bb14, 2: bb13, 3: bb12, otherwise: bb15]; // scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
    }

    bb1: {
        _17 = move _2;                   // scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
        _5 = make_boxed_object() -> [return: bb2, unwind: bb11]; // scope 0 at ui/async-await/await-unsize.rs:11:13: 11:32
                                         // mir::Constant
                                         // + span: ui/async-await/await-unsize.rs:11:13: 11:30
                                         // + literal: Const { ty: fn() -> impl Future<Output = Box<(dyn Send + 'static)>> {make_boxed_object}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = <impl Future<Output = Box<(dyn Send + 'static)>> as IntoFuture>::into_future(move _5) -> [return: bb3, unwind: bb11]; // scope 0 at ui/async-await/await-unsize.rs:11:32: 11:38
                                         // mir::Constant
                                         // + span: ui/async-await/await-unsize.rs:11:32: 11:38
                                         // + literal: Const { ty: fn(impl Future<Output = Box<(dyn Send + 'static)>>) -> <impl Future<Output = Box<(dyn Send + 'static)>> as IntoFuture>::IntoFuture {<impl Future<Output = Box<(dyn Send + 'static)>> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _20 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]); // scope 0 at ui/async-await/await-unsize.rs:11:32: 11:38
        (((*_20) as variant#3).0: impl std::future::Future<Output = std::boxed::Box<(dyn std::marker::Send + 'static)>>) = move _4; // scope 0 at ui/async-await/await-unsize.rs:11:32: 11:38
        goto -> bb4;                     // scope 2 at ui/async-await/await-unsize.rs:11:32: 11:38
    }

    bb4: {
        _21 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]); // scope 3 at ui/async-await/await-unsize.rs:11:32: 11:38
        _9 = &mut (((*_21) as variant#3).0: impl std::future::Future<Output = std::boxed::Box<(dyn std::marker::Send + 'static)>>); // scope 3 at ui/async-await/await-unsize.rs:11:32: 11:38
        _8 = &mut (*_9);                 // scope 3 at ui/async-await/await-unsize.rs:11:32: 11:38
        _7 = Pin::<&mut impl Future<Output = Box<(dyn Send + 'static)>>>::new_unchecked(move _8) -> [return: bb5, unwind: bb11]; // scope 3 at ui/async-await/await-unsize.rs:11:32: 11:38
                                         // mir::Constant
                                         // + span: ui/async-await/await-unsize.rs:11:32: 11:38
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = Box<(dyn Send + 'static)>>) -> Pin<&mut impl Future<Output = Box<(dyn Send + 'static)>>> {Pin::<&mut impl Future<Output = Box<(dyn Send + 'static)>>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = _17;                       // scope 3 at ui/async-await/await-unsize.rs:11:32: 11:38
        _11 = move _12;                  // scope 3 at ui/async-await/await-unsize.rs:11:13: 11:38
        _10 = &mut (*_11);               // scope 3 at ui/async-await/await-unsize.rs:11:13: 11:38
        _6 = <impl Future<Output = Box<(dyn Send + 'static)>> as Future>::poll(move _7, move _10) -> [return: bb6, unwind: bb11]; // scope 3 at ui/async-await/await-unsize.rs:11:32: 11:38
                                         // mir::Constant
                                         // + span: ui/async-await/await-unsize.rs:11:32: 11:38
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = Box<(dyn Send + 'static)>>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = Box<(dyn Send + 'static)>> as Future>::Output> {<impl Future<Output = Box<(dyn Send + 'static)>> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = discriminant(_6);          // scope 2 at ui/async-await/await-unsize.rs:11:32: 11:38
        switchInt(move _13) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at ui/async-await/await-unsize.rs:11:32: 11:38
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/await-unsize.rs:11:32: 11:38
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]); // scope 2 at ui/async-await/await-unsize.rs:11:32: 11:38
        discriminant((*_22)) = 3;        // scope 2 at ui/async-await/await-unsize.rs:11:32: 11:38
        return;                          // scope 2 at ui/async-await/await-unsize.rs:11:32: 11:38
    }

    bb8: {
        unreachable;                     // scope 2 at ui/async-await/await-unsize.rs:11:32: 11:38
    }

    bb9: {
        _14 = move ((_6 as Ready).0: std::boxed::Box<dyn std::marker::Send>); // scope 2 at ui/async-await/await-unsize.rs:11:13: 11:38
        _3 = move _14;                   // scope 4 at ui/async-await/await-unsize.rs:11:13: 11:38
        drop(_3) -> [return: bb10, unwind: bb11]; // scope 0 at ui/async-await/await-unsize.rs:11:38: 11:39
    }

    bb10: {
        _16 = const ();                  // scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
        _0 = Poll::<()>::Ready(move _16); // scope 0 at ui/async-await/await-unsize.rs:12:2: 12:2
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]); // scope 0 at ui/async-await/await-unsize.rs:12:2: 12:2
        discriminant((*_23)) = 1;        // scope 0 at ui/async-await/await-unsize.rs:12:2: 12:2
        return;                          // scope 0 at ui/async-await/await-unsize.rs:12:2: 12:2
    }

    bb11 (cleanup): {
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/await-unsize.rs:10:25: 12:2]); // scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
        discriminant((*_24)) = 2;        // scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
        resume;                          // scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
    }

    bb12: {
        _15 = move _2;                   // scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
        _17 = move _15;                  // scope 2 at ui/async-await/await-unsize.rs:11:32: 11:38
        goto -> bb4;                     // scope 2 at ui/async-await/await-unsize.rs:11:32: 11:38
    }

    bb13: {
        assert(const false, "`async fn` resumed after panicking") -> bb13; // scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
    }

    bb14: {
        assert(const false, "`async fn` resumed after completion") -> bb14; // scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
    }

    bb15: {
        unreachable;                     // scope 0 at ui/async-await/await-unsize.rs:10:25: 12:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/await-unsize.rs:14:11: 14:11

    bb0: {
        return;                          // scope 0 at ui/async-await/await-unsize.rs:14:13: 14:13
    }
}
