// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn get_future(_1: MyStream<C>) -> impl Future<Output = ()> {
    debug _stream => _1;                 // in scope 0 at ui/async-await/async-with-closure.rs:17:44: 17:51
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:66
    let mut _2: [async fn body@ui/async-await/async-with-closure.rs:17:66: 17:68]; // in scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68

    bb0: {
        _2 = [generator@ui/async-await/async-with-closure.rs:17:66: 17:68 (#0)] { _stream: move _1 }; // scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
                                         // generator
                                         // + def_id: DefId(0:13 ~ async_with_closure[b366]::get_future::{closure#0})
                                         // + substs: [
                                         //     C,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (MyStream<C>,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-with-closure.rs:17:66: 17:68]>(move _2) -> bb1; // scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
                                         // mir::Constant
                                         // + span: ui/async-await/async-with-closure.rs:17:66: 17:68
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-with-closure.rs:17:66: 17:68]) -> [async fn body@ui/async-await/async-with-closure.rs:17:66: 17:68] {identity_future::<(), [async fn body@ui/async-await/async-with-closure.rs:17:66: 17:68]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-with-closure.rs:17:68: 17:68
    }
}

fn get_future::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-with-closure.rs:17:66: 17:68]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
    debug _stream => ((*(_1.0: &mut [async fn body@ui/async-await/async-with-closure.rs:17:66: 17:68])).0: MyStream<C>); // in scope 0 at ui/async-await/async-with-closure.rs:17:44: 17:51
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
    let _3: MyStream<C>;                 // in scope 0 at ui/async-await/async-with-closure.rs:17:44: 17:51
    let mut _4: ();                      // in scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
    let mut _6: u32;                     // in scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
    let mut _7: &mut [async fn body@ui/async-await/async-with-closure.rs:17:66: 17:68]; // in scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
    let mut _8: &mut [async fn body@ui/async-await/async-with-closure.rs:17:66: 17:68]; // in scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
    let mut _9: &mut [async fn body@ui/async-await/async-with-closure.rs:17:66: 17:68]; // in scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
    let mut _10: &mut [async fn body@ui/async-await/async-with-closure.rs:17:66: 17:68]; // in scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
    scope 1 {
        debug _stream => _3;             // in scope 1 at ui/async-await/async-with-closure.rs:17:44: 17:51
    }

    bb0: {
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-with-closure.rs:17:66: 17:68]); // scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
        switchInt(move _6) -> [0: bb1, 1: bb5, 2: bb4, otherwise: bb6]; // scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-with-closure.rs:17:66: 17:68]); // scope 0 at ui/async-await/async-with-closure.rs:17:44: 17:51
        _3 = move ((*_8).0: MyStream<C>); // scope 0 at ui/async-await/async-with-closure.rs:17:44: 17:51
        _4 = const ();                   // scope 1 at ui/async-await/async-with-closure.rs:17:66: 17:68
        drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at ui/async-await/async-with-closure.rs:17:67: 17:68
    }

    bb2: {
        _0 = Poll::<()>::Ready(move _4); // scope 0 at ui/async-await/async-with-closure.rs:17:68: 17:68
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-with-closure.rs:17:66: 17:68]); // scope 0 at ui/async-await/async-with-closure.rs:17:68: 17:68
        discriminant((*_9)) = 1;         // scope 0 at ui/async-await/async-with-closure.rs:17:68: 17:68
        return;                          // scope 0 at ui/async-await/async-with-closure.rs:17:68: 17:68
    }

    bb3 (cleanup): {
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-with-closure.rs:17:66: 17:68]); // scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
        discriminant((*_10)) = 2;        // scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
        resume;                          // scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
    }

    bb4: {
        assert(const false, "`async fn` resumed after panicking") -> bb4; // scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
    }

    bb5: {
        assert(const false, "`async fn` resumed after completion") -> bb5; // scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
    }

    bb6: {
        unreachable;                     // scope 0 at ui/async-await/async-with-closure.rs:17:66: 17:68
    }
}

fn f() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-with-closure.rs:19:14: 19:14
    let mut _1: [async fn body@ui/async-await/async-with-closure.rs:19:14: 22:2]; // in scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2

    bb0: {
        _1 = [generator@ui/async-await/async-with-closure.rs:19:14: 22:2 (#0)]; // scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
                                         // generator
                                         // + def_id: DefId(0:15 ~ async_with_closure[b366]::f::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     for<'a, 'b> {std::future::ResumeTy, MyStream<(dyn std::ops::FnMut() + 'a)>, impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-with-closure.rs:19:14: 22:2]>(move _1) -> bb1; // scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
                                         // mir::Constant
                                         // + span: ui/async-await/async-with-closure.rs:19:14: 22:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-with-closure.rs:19:14: 22:2]) -> [async fn body@ui/async-await/async-with-closure.rs:19:14: 22:2] {identity_future::<(), [async fn body@ui/async-await/async-with-closure.rs:19:14: 22:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-with-closure.rs:22:2: 22:2
    }
}

fn f::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-with-closure.rs:19:14: 22:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _7;           // in scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
    let _3: MyStream<dyn std::ops::FnMut()>; // in scope 0 at ui/async-await/async-with-closure.rs:20:9: 20:17
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _7: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
    let mut _8: u32;                     // in scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
    let mut _9: &mut [async fn body@ui/async-await/async-with-closure.rs:19:14: 22:2]; // in scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
    let mut _10: &mut [async fn body@ui/async-await/async-with-closure.rs:19:14: 22:2]; // in scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
    scope 1 {
        debug messages => _3;            // in scope 1 at ui/async-await/async-with-closure.rs:20:9: 20:17
        let mut _5: impl std::future::Future<Output = ()>; // in scope 1 at ui/async-await/async-with-closure.rs:21:25: 21:31
        scope 2 {
            debug __awaitee => _5;       // in scope 2 at ui/async-await/async-with-closure.rs:21:25: 21:31
            let _6: ();                  // in scope 2 at ui/async-await/async-with-closure.rs:21:5: 21:31
            scope 3 {
            }
            scope 4 {
                debug result => _6;      // in scope 4 at ui/async-await/async-with-closure.rs:21:5: 21:31
            }
        }
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-with-closure.rs:19:14: 22:2]); // scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
        _8 = discriminant((*_9));        // scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
        switchInt(move _8) -> [0: bb1, 2: bb3, otherwise: bb4]; // scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
    }

    bb1: {
        _7 = move _2;                    // scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
        _4 = core::panicking::panic(const "not implemented") -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2 (cleanup): {
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-with-closure.rs:19:14: 22:2]); // scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
        discriminant((*_10)) = 2;        // scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
        resume;                          // scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
    }

    bb3: {
        assert(const false, "`async fn` resumed after panicking") -> bb3; // scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
    }

    bb4: {
        unreachable;                     // scope 0 at ui/async-await/async-with-closure.rs:19:14: 22:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/async-with-closure.rs:24:11: 24:11

    bb0: {
        return;                          // scope 0 at ui/async-await/async-with-closure.rs:24:13: 24:13
    }
}
