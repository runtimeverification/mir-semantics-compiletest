// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/non-trivial-drop.rs:9:11: 9:11
    let mut _1: ();                      // in scope 0 at ui/async-await/non-trivial-drop.rs:10:13: 10:18
    scope 1 {
    }

    bb0: {
        _1 = foo() -> bb1;               // scope 0 at ui/async-await/non-trivial-drop.rs:10:13: 10:18
                                         // mir::Constant
                                         // + span: ui/async-await/non-trivial-drop.rs:10:13: 10:16
                                         // + literal: Const { ty: fn() {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/non-trivial-drop.rs:11:2: 11:2
    }
}

fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/non-trivial-drop.rs:13:10: 13:10
    let _1: [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]; // in scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6

    bb0: {
        _1 = [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7 (#0)]; // scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
                                         // generator
                                         // + def_id: DefId(0:5 ~ non_trivial_drop[3967]::foo::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {NonCopy, NonCopy2, Config, ()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        drop(_1) -> bb1;                 // scope 0 at ui/async-await/non-trivial-drop.rs:19:6: 19:7
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/non-trivial-drop.rs:20:2: 20:2
    }
}

fn foo::{closure#0}(_1: Pin<&mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
    let mut _3: ();                      // in scope 0 at ui/async-await/non-trivial-drop.rs:15:15: 18:20
    let mut _4: NonCopy;                 // in scope 0 at ui/async-await/non-trivial-drop.rs:15:20: 18:19
    let mut _5: NonCopy;                 // in scope 0 at ui/async-await/non-trivial-drop.rs:16:23: 16:30
    let mut _6: NonCopy2;                // in scope 0 at ui/async-await/non-trivial-drop.rs:17:16: 17:24
    let mut _7: ();                      // in scope 0 at ui/async-await/non-trivial-drop.rs:14:8: 14:8
    let mut _8: u32;                     // in scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
    let mut _9: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]; // in scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
    let mut _10: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]; // in scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
    let mut _11: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]; // in scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
    let mut _12: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]; // in scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
    let mut _13: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]; // in scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
    let mut _14: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]; // in scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
    let mut _15: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]; // in scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
    let mut _16: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]; // in scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6

    bb0: {
        _9 = deref_copy (_1.0: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]); // scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
        _8 = discriminant((*_9));        // scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
        switchInt(move _8) -> [0: bb1, 1: bb8, 2: bb7, 3: bb6, otherwise: bb9]; // scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
    }

    bb1: {
        _5 = NonCopy;                    // scope 0 at ui/async-await/non-trivial-drop.rs:16:23: 16:30
        _6 = NonCopy2;                   // scope 0 at ui/async-await/non-trivial-drop.rs:17:16: 17:24
        _10 = deref_copy (_1.0: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]); // scope 0 at ui/async-await/non-trivial-drop.rs:15:20: 18:10
        (((*_10) as variant#3).0: Config) = Config { nickname: move _5, b: move _6 }; // scope 0 at ui/async-await/non-trivial-drop.rs:15:20: 18:10
        _11 = deref_copy (_1.0: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]); // scope 0 at ui/async-await/non-trivial-drop.rs:15:20: 18:19
        _4 = move ((((*_11) as variant#3).0: Config).0: NonCopy); // scope 0 at ui/async-await/non-trivial-drop.rs:15:20: 18:19
        _3 = std::mem::drop::<NonCopy>(move _4) -> [return: bb2, unwind: bb3]; // scope 0 at ui/async-await/non-trivial-drop.rs:15:15: 18:20
                                         // mir::Constant
                                         // + span: ui/async-await/non-trivial-drop.rs:15:15: 15:19
                                         // + literal: Const { ty: fn(NonCopy) {std::mem::drop::<NonCopy>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = GeneratorState::<(), ()>::Yielded(move _3); // scope 0 at ui/async-await/non-trivial-drop.rs:15:9: 18:20
        _12 = deref_copy (_1.0: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]); // scope 0 at ui/async-await/non-trivial-drop.rs:15:9: 18:20
        discriminant((*_12)) = 3;        // scope 0 at ui/async-await/non-trivial-drop.rs:15:9: 18:20
        return;                          // scope 0 at ui/async-await/non-trivial-drop.rs:15:9: 18:20
    }

    bb3 (cleanup): {
        _15 = deref_copy (_1.0: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]); // scope 0 at ui/async-await/non-trivial-drop.rs:18:20: 18:21
        drop(((((*_15) as variant#3).0: Config).1: NonCopy2)) -> bb4; // scope 0 at ui/async-await/non-trivial-drop.rs:18:20: 18:21
    }

    bb4 (cleanup): {
        _16 = deref_copy (_1.0: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]); // scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
        discriminant((*_16)) = 2;        // scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
        resume;                          // scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
    }

    bb5: {
        _7 = const ();                   // scope 0 at ui/async-await/non-trivial-drop.rs:14:8: 19:6
        _0 = GeneratorState::<(), ()>::Complete(move _7); // scope 0 at ui/async-await/non-trivial-drop.rs:19:6: 19:6
        _13 = deref_copy (_1.0: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]); // scope 0 at ui/async-await/non-trivial-drop.rs:19:6: 19:6
        discriminant((*_13)) = 1;        // scope 0 at ui/async-await/non-trivial-drop.rs:19:6: 19:6
        return;                          // scope 0 at ui/async-await/non-trivial-drop.rs:19:6: 19:6
    }

    bb6: {
        _14 = deref_copy (_1.0: &mut [generator@ui/async-await/non-trivial-drop.rs:14:5: 14:7]); // scope 0 at ui/async-await/non-trivial-drop.rs:18:20: 18:21
        drop(((((*_14) as variant#3).0: Config).1: NonCopy2)) -> [return: bb5, unwind: bb4]; // scope 0 at ui/async-await/non-trivial-drop.rs:18:20: 18:21
    }

    bb7: {
        assert(const false, "generator resumed after panicking") -> bb7; // scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
    }

    bb8: {
        assert(const false, "generator resumed after completion") -> bb8; // scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
    }

    bb9: {
        unreachable;                     // scope 0 at ui/async-await/non-trivial-drop.rs:14:5: 19:6
    }
}

fn <impl at ui/async-await/non-trivial-drop.rs:22:10: 22:17>::default() -> NonCopy {
    let mut _0: NonCopy;                 // return place in scope 0 at ui/async-await/non-trivial-drop.rs:22:10: 22:17

    bb0: {
        return;                          // scope 0 at ui/async-await/non-trivial-drop.rs:22:17: 22:17
    }
}

fn <impl at ui/async-await/non-trivial-drop.rs:24:1: 24:22>::drop(_1: &mut NonCopy) -> () {
    debug self => _1;                    // in scope 0 at ui/async-await/non-trivial-drop.rs:25:13: 25:22
    let mut _0: ();                      // return place in scope 0 at ui/async-await/non-trivial-drop.rs:25:24: 25:24

    bb0: {
        return;                          // scope 0 at ui/async-await/non-trivial-drop.rs:25:26: 25:26
    }
}

fn <impl at ui/async-await/non-trivial-drop.rs:28:10: 28:17>::default() -> NonCopy2 {
    let mut _0: NonCopy2;                // return place in scope 0 at ui/async-await/non-trivial-drop.rs:28:10: 28:17

    bb0: {
        return;                          // scope 0 at ui/async-await/non-trivial-drop.rs:28:17: 28:17
    }
}

fn <impl at ui/async-await/non-trivial-drop.rs:30:1: 30:23>::drop(_1: &mut NonCopy2) -> () {
    debug self => _1;                    // in scope 0 at ui/async-await/non-trivial-drop.rs:31:13: 31:22
    let mut _0: ();                      // return place in scope 0 at ui/async-await/non-trivial-drop.rs:31:24: 31:24

    bb0: {
        return;                          // scope 0 at ui/async-await/non-trivial-drop.rs:31:26: 31:26
    }
}

fn <impl at ui/async-await/non-trivial-drop.rs:34:10: 34:17>::default() -> Config {
    let mut _0: Config;                  // return place in scope 0 at ui/async-await/non-trivial-drop.rs:34:10: 34:17
    let mut _1: NonCopy;                 // in scope 0 at ui/async-await/non-trivial-drop.rs:36:5: 36:22
    let mut _2: NonCopy2;                // in scope 0 at ui/async-await/non-trivial-drop.rs:37:5: 37:16

    bb0: {
        _1 = <NonCopy as Default>::default() -> bb1; // scope 0 at ui/async-await/non-trivial-drop.rs:36:5: 36:22
                                         // mir::Constant
                                         // + span: ui/async-await/non-trivial-drop.rs:36:5: 36:22
                                         // + literal: Const { ty: fn() -> NonCopy {<NonCopy as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <NonCopy2 as Default>::default() -> [return: bb2, unwind: bb3]; // scope 0 at ui/async-await/non-trivial-drop.rs:37:5: 37:16
                                         // mir::Constant
                                         // + span: ui/async-await/non-trivial-drop.rs:37:5: 37:16
                                         // + literal: Const { ty: fn() -> NonCopy2 {<NonCopy2 as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/async-await/non-trivial-drop.rs:34:17: 34:17
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/async-await/non-trivial-drop.rs:34:16: 34:17
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/async-await/non-trivial-drop.rs:34:10: 34:17
    }
}
