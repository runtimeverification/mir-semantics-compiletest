// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const BIG_FUT_SIZE: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:19:21: 19:26

    bb0: {
        _0 = const 1024_usize;           // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:19:29: 19:33
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:19:1: 19:34
    }
}

BigFut::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:20:57: 20:69

    bb0: {
        _0 = const _;                    // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:20:57: 20:69
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:20:57: 20:69
    }
}

fn <impl at ui/async-await/async-fn-size-moved-locals.rs:22:1: 22:12>::new() -> BigFut {
    let mut _0: BigFut;                  // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:23:17: 23:21
    let mut _1: [u8; 1024];              // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:24:16: 24:33

    bb0: {
        _1 = [const 0_u8; 1024];         // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:24:16: 24:33
        _0 = BigFut(move _1);            // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:24:9: 24:34
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:25:6: 25:6
    }
}

<impl at ui/async-await/async-fn-size-moved-locals.rs:22:1: 22:12>::new::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:24:20: 24:32

    bb0: {
        _0 = const _;                    // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:24:20: 24:32
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:24:20: 24:32
    }
}

fn <impl at ui/async-await/async-fn-size-moved-locals.rs:28:1: 28:21>::drop(_1: &mut BigFut) -> () {
    debug self => _1;                    // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:29:13: 29:22
    let mut _0: ();                      // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:29:24: 29:24

    bb0: {
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:29:26: 29:26
    }
}

fn <impl at ui/async-await/async-fn-size-moved-locals.rs:32:1: 32:23>::poll(_1: Pin<&mut BigFut>, _2: &mut Context<'_>) -> Poll<()> {
    debug self => _1;                    // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:35:13: 35:17
    debug _ctx => _2;                    // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:35:35: 35:39
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:35:62: 35:80

    bb0: {
        _0 = const Poll::<()>::Ready(()); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:36:9: 36:24
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:36:9: 36:24
                                         // + literal: Const { ty: Poll<()>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:37:6: 37:6
    }
}

fn <impl at ui/async-await/async-fn-size-moved-locals.rs:47:1: 47:23>::poll(_1: Pin<&mut Joiner>, _2: &mut Context<'_>) -> Poll<()> {
    debug self => _1;                    // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:50:13: 50:17
    debug _ctx => _2;                    // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:50:35: 50:39
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:50:62: 50:80

    bb0: {
        _0 = const Poll::<()>::Ready(()); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:51:9: 51:24
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:51:9: 51:24
                                         // + literal: Const { ty: Poll<()>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:52:6: 52:6
    }
}

fn noop() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:55:11: 55:11

    bb0: {
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:55:13: 55:13
    }
}

fn single() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 57:19
    let mut _1: [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2

    bb0: {
        _1 = [generator@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2 (#0)]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
                                         // generator
                                         // + def_id: DefId(0:30 ~ async_fn_size_moved_locals[cfe4]::single::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, BigFut, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]>(move _1) -> bb1; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]) -> [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2] {identity_future::<(), [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:60:2: 60:2
    }
}

fn single::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _17;          // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    let _3: BigFut;                      // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:58:9: 58:10
    let mut _4: BigFut;                  // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
    let mut _5: BigFut;                  // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:59:5: 59:6
    let mut _6: std::task::Poll<()>;     // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
    let mut _7: std::pin::Pin<&mut BigFut>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
    let mut _8: &mut BigFut;             // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
    let mut _9: &mut BigFut;             // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:59:5: 59:12
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:59:5: 59:12
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
    let mut _13: isize;                  // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
    let mut _16: ();                     // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    let mut _17: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    let mut _18: u32;                    // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    let mut _19: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    let mut _20: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    let mut _21: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    let mut _22: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    let mut _23: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    let mut _24: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    let mut _25: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    let mut _26: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/async-await/async-fn-size-moved-locals.rs:58:9: 58:10
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2])) as variant#3).0: BigFut); // in scope 2 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
            let _14: ();                 // in scope 2 at ui/async-await/async-fn-size-moved-locals.rs:59:5: 59:12
            scope 3 {
            }
            scope 4 {
                debug result => _14;     // in scope 4 at ui/async-await/async-fn-size-moved-locals.rs:59:5: 59:12
            }
        }
    }

    bb0: {
        _19 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
        _18 = discriminant((*_19));      // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
        switchInt(move _18) -> [0: bb1, 1: bb15, 2: bb14, 3: bb13, otherwise: bb16]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    }

    bb1: {
        _17 = move _2;                   // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
        _3 = BigFut::new() -> [return: bb2, unwind: bb12]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:58:13: 58:26
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:58:13: 58:24
                                         // + literal: Const { ty: fn() -> BigFut {BigFut::new}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = move _3;                    // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:59:5: 59:6
        _4 = <BigFut as IntoFuture>::into_future(move _5) -> [return: bb3, unwind: bb12]; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
                                         // + literal: Const { ty: fn(BigFut) -> <BigFut as IntoFuture>::IntoFuture {<BigFut as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _20 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]); // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
        (((*_20) as variant#3).0: BigFut) = move _4; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
        goto -> bb4;                     // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
    }

    bb4: {
        _21 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]); // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
        _9 = &mut (((*_21) as variant#3).0: BigFut); // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
        _8 = &mut (*_9);                 // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
        _7 = Pin::<&mut BigFut>::new_unchecked(move _8) -> [return: bb5, unwind: bb11]; // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
                                         // + literal: Const { ty: unsafe fn(&mut BigFut) -> Pin<&mut BigFut> {Pin::<&mut BigFut>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = _17;                       // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
        _11 = move _12;                  // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:59:5: 59:12
        _10 = &mut (*_11);               // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:59:5: 59:12
        _6 = <BigFut as Future>::poll(move _7, move _10) -> [return: bb6, unwind: bb11]; // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut BigFut>, &'b mut Context<'c>) -> Poll<<BigFut as Future>::Output> {<BigFut as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = discriminant(_6);          // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
        switchInt(move _13) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]); // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
        discriminant((*_22)) = 3;        // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
        return;                          // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
    }

    bb8: {
        unreachable;                     // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
    }

    bb9: {
        _14 = ((_6 as Ready).0: ());     // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:59:5: 59:12
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]); // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:59:11: 59:12
        drop((((*_23) as variant#3).0: BigFut)) -> [return: bb10, unwind: bb12]; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:59:11: 59:12
    }

    bb10: {
        _16 = const ();                  // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
        _0 = Poll::<()>::Ready(move _16); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:60:2: 60:2
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:60:2: 60:2
        discriminant((*_24)) = 1;        // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:60:2: 60:2
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:60:2: 60:2
    }

    bb11 (cleanup): {
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]); // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:59:11: 59:12
        drop((((*_25) as variant#3).0: BigFut)) -> bb12; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:59:11: 59:12
    }

    bb12 (cleanup): {
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
        discriminant((*_26)) = 2;        // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
        resume;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    }

    bb13: {
        _15 = move _2;                   // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
        _17 = move _15;                  // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
        goto -> bb4;                     // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:59:6: 59:12
    }

    bb14: {
        assert(const false, "`async fn` resumed after panicking") -> bb14; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    }

    bb15: {
        assert(const false, "`async fn` resumed after completion") -> bb15; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    }

    bb16: {
        unreachable;                     // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:57:19: 60:2
    }
}

fn single_with_noop() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 62:29
    let mut _1: [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2

    bb0: {
        _1 = [generator@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2 (#0)]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
                                         // generator
                                         // + def_id: DefId(0:32 ~ async_fn_size_moved_locals[cfe4]::single_with_noop::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, BigFut, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]>(move _1) -> bb1; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]) -> [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2] {identity_future::<(), [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:66:2: 66:2
    }
}

fn single_with_noop::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _18;          // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let _3: BigFut;                      // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:63:9: 63:10
    let _4: ();                          // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:64:5: 64:11
    let mut _5: BigFut;                  // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
    let mut _6: BigFut;                  // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:65:5: 65:6
    let mut _7: std::task::Poll<()>;     // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
    let mut _8: std::pin::Pin<&mut BigFut>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
    let mut _9: &mut BigFut;             // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
    let mut _10: &mut BigFut;            // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:65:5: 65:12
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:65:5: 65:12
    let mut _13: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
    let mut _14: isize;                  // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
    let mut _16: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
    let mut _17: ();                     // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _18: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _19: u32;                    // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _20: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _21: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _22: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _23: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _24: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _25: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _26: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _27: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _28: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _29: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _30: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _31: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _32: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    let mut _33: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/async-await/async-fn-size-moved-locals.rs:63:9: 63:10
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2])) as variant#3).0: BigFut); // in scope 2 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
            let _15: ();                 // in scope 2 at ui/async-await/async-fn-size-moved-locals.rs:65:5: 65:12
            scope 3 {
            }
            scope 4 {
                debug result => _15;     // in scope 4 at ui/async-await/async-fn-size-moved-locals.rs:65:5: 65:12
            }
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
        _19 = discriminant((*_20));      // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
        switchInt(move _19) -> [0: bb1, 1: bb18, 2: bb17, 3: bb16, otherwise: bb19]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    }

    bb1: {
        _18 = move _2;                   // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
        _21 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:63:9: 63:10
        (((*_21) as variant#3).1: bool) = const false; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:63:9: 63:10
        _3 = BigFut::new() -> [return: bb2, unwind: bb13]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:63:13: 63:26
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:63:13: 63:24
                                         // + literal: Const { ty: fn() -> BigFut {BigFut::new}, val: Value(<ZST>) }
    }

    bb2: {
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]); // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:64:5: 64:11
        (((*_22) as variant#3).1: bool) = const true; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:64:5: 64:11
        _4 = noop() -> [return: bb3, unwind: bb15]; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:64:5: 64:11
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:64:5: 64:9
                                         // + literal: Const { ty: fn() {noop}, val: Value(<ZST>) }
    }

    bb3: {
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]); // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:65:5: 65:6
        (((*_23) as variant#3).1: bool) = const false; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:65:5: 65:6
        _6 = move _3;                    // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:65:5: 65:6
        _5 = <BigFut as IntoFuture>::into_future(move _6) -> [return: bb4, unwind: bb15]; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
                                         // + literal: Const { ty: fn(BigFut) -> <BigFut as IntoFuture>::IntoFuture {<BigFut as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb4: {
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]); // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
        (((*_24) as variant#3).0: BigFut) = move _5; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
        goto -> bb5;                     // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
    }

    bb5: {
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]); // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
        _10 = &mut (((*_25) as variant#3).0: BigFut); // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
        _9 = &mut (*_10);                // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
        _8 = Pin::<&mut BigFut>::new_unchecked(move _9) -> [return: bb6, unwind: bb12]; // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
                                         // + literal: Const { ty: unsafe fn(&mut BigFut) -> Pin<&mut BigFut> {Pin::<&mut BigFut>::new_unchecked}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = _18;                       // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
        _12 = move _13;                  // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:65:5: 65:12
        _11 = &mut (*_12);               // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:65:5: 65:12
        _7 = <BigFut as Future>::poll(move _8, move _11) -> [return: bb7, unwind: bb12]; // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut BigFut>, &'b mut Context<'c>) -> Poll<<BigFut as Future>::Output> {<BigFut as Future>::poll}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = discriminant(_7);          // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
        switchInt(move _14) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
    }

    bb8: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]); // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
        discriminant((*_26)) = 3;        // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
        return;                          // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
    }

    bb9: {
        unreachable;                     // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
    }

    bb10: {
        _15 = ((_7 as Ready).0: ());     // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:65:5: 65:12
        _27 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]); // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:65:11: 65:12
        drop((((*_27) as variant#3).0: BigFut)) -> [return: bb11, unwind: bb15]; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:65:11: 65:12
    }

    bb11: {
        _17 = const ();                  // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:66:1: 66:2
        (((*_28) as variant#3).1: bool) = const false; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:66:1: 66:2
        _0 = Poll::<()>::Ready(move _17); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:66:2: 66:2
        _29 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:66:2: 66:2
        discriminant((*_29)) = 1;        // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:66:2: 66:2
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:66:2: 66:2
    }

    bb12 (cleanup): {
        _30 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]); // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:65:11: 65:12
        drop((((*_30) as variant#3).0: BigFut)) -> bb15; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:65:11: 65:12
    }

    bb13 (cleanup): {
        _31 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:66:1: 66:2
        (((*_31) as variant#3).1: bool) = const false; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:66:1: 66:2
        _33 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
        discriminant((*_33)) = 2;        // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
        resume;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    }

    bb14 (cleanup): {
        drop(_3) -> bb13;                // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:66:1: 66:2
    }

    bb15 (cleanup): {
        _32 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:66:1: 66:2
        switchInt((((*_32) as variant#3).1: bool)) -> [0: bb13, otherwise: bb14]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:66:1: 66:2
    }

    bb16: {
        _16 = move _2;                   // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
        _18 = move _16;                  // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
        goto -> bb5;                     // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:65:6: 65:12
    }

    bb17: {
        assert(const false, "`async fn` resumed after panicking") -> bb17; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    }

    bb18: {
        assert(const false, "`async fn` resumed after completion") -> bb18; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    }

    bb19: {
        unreachable;                     // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:62:29: 66:2
    }
}

fn joined() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 68:19
    let mut _1: [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2

    bb0: {
        _1 = [generator@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2 (#0)]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
                                         // generator
                                         // + def_id: DefId(0:34 ~ async_fn_size_moved_locals[cfe4]::joined::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, BigFut, Joiner, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]>(move _1) -> bb1; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]) -> [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2] {identity_future::<(), [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:79:2: 79:2
    }
}

fn joined::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _26;          // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    let _3: BigFut;                      // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:69:9: 69:10
    let mut _7: std::option::Option<BigFut>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:74:12: 74:19
    let mut _8: BigFut;                  // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:74:17: 74:18
    let mut _9: std::option::Option<BigFut>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:75:12: 75:19
    let mut _10: BigFut;                 // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:75:17: 75:18
    let mut _11: std::option::Option<BigFut>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:76:12: 76:19
    let mut _12: BigFut;                 // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:76:17: 76:18
    let mut _13: Joiner;                 // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
    let mut _14: Joiner;                 // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:78:5: 78:11
    let mut _15: std::task::Poll<()>;    // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
    let mut _16: std::pin::Pin<&mut Joiner>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
    let mut _17: &mut Joiner;            // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
    let mut _18: &mut Joiner;            // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
    let mut _19: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:78:5: 78:17
    let mut _20: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:78:5: 78:17
    let mut _21: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
    let mut _22: isize;                  // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
    let mut _24: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
    let mut _25: ();                     // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    let mut _26: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    let mut _27: u32;                    // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    let mut _28: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    let mut _29: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    let mut _30: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    let mut _31: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    let mut _32: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    let mut _33: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    let mut _34: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    let mut _35: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    scope 1 {
        debug a => _3;                   // in scope 1 at ui/async-await/async-fn-size-moved-locals.rs:69:9: 69:10
        let _4: BigFut;                  // in scope 1 at ui/async-await/async-fn-size-moved-locals.rs:70:9: 70:10
        scope 2 {
            debug b => _4;               // in scope 2 at ui/async-await/async-fn-size-moved-locals.rs:70:9: 70:10
            let _5: BigFut;              // in scope 2 at ui/async-await/async-fn-size-moved-locals.rs:71:9: 71:10
            scope 3 {
                debug c => _5;           // in scope 3 at ui/async-await/async-fn-size-moved-locals.rs:71:9: 71:10
                let _6: Joiner;          // in scope 3 at ui/async-await/async-fn-size-moved-locals.rs:73:9: 73:15
                scope 4 {
                    debug joiner => _6;  // in scope 4 at ui/async-await/async-fn-size-moved-locals.rs:73:9: 73:15
                    scope 5 {
                        debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2])) as variant#3).0: Joiner); // in scope 5 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
                        let _23: ();     // in scope 5 at ui/async-await/async-fn-size-moved-locals.rs:78:5: 78:17
                        scope 6 {
                        }
                        scope 7 {
                            debug result => _23; // in scope 7 at ui/async-await/async-fn-size-moved-locals.rs:78:5: 78:17
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
        _27 = discriminant((*_28));      // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
        switchInt(move _27) -> [0: bb1, 1: bb19, 2: bb18, 3: bb17, otherwise: bb20]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    }

    bb1: {
        _26 = move _2;                   // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
        _3 = BigFut::new() -> [return: bb2, unwind: bb16]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:69:13: 69:26
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:69:13: 69:24
                                         // + literal: Const { ty: fn() -> BigFut {BigFut::new}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = BigFut::new() -> [return: bb3, unwind: bb15]; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:70:13: 70:26
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:70:13: 70:24
                                         // + literal: Const { ty: fn() -> BigFut {BigFut::new}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = BigFut::new() -> [return: bb4, unwind: bb14]; // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:71:13: 71:26
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:71:13: 71:24
                                         // + literal: Const { ty: fn() -> BigFut {BigFut::new}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = move _3;                    // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:74:17: 74:18
        _7 = Option::<BigFut>::Some(move _8); // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:74:12: 74:19
        _10 = move _4;                   // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:75:17: 75:18
        _9 = Option::<BigFut>::Some(move _10); // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:75:12: 75:19
        _12 = move _5;                   // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:76:17: 76:18
        _11 = Option::<BigFut>::Some(move _12); // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:76:12: 76:19
        _6 = Joiner { a: move _7, b: move _9, c: move _11 }; // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:73:18: 77:6
        _14 = move _6;                   // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:78:5: 78:11
        _13 = <Joiner as IntoFuture>::into_future(move _14) -> [return: bb5, unwind: bb16]; // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
                                         // + literal: Const { ty: fn(Joiner) -> <Joiner as IntoFuture>::IntoFuture {<Joiner as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb5: {
        _29 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]); // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
        (((*_29) as variant#3).0: Joiner) = move _13; // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
        goto -> bb6;                     // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
    }

    bb6: {
        _30 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
        _18 = &mut (((*_30) as variant#3).0: Joiner); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
        _17 = &mut (*_18);               // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
        _16 = Pin::<&mut Joiner>::new_unchecked(move _17) -> [return: bb7, unwind: bb13]; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
                                         // + literal: Const { ty: unsafe fn(&mut Joiner) -> Pin<&mut Joiner> {Pin::<&mut Joiner>::new_unchecked}, val: Value(<ZST>) }
    }

    bb7: {
        _21 = _26;                       // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
        _20 = move _21;                  // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:78:5: 78:17
        _19 = &mut (*_20);               // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:78:5: 78:17
        _15 = <Joiner as Future>::poll(move _16, move _19) -> [return: bb8, unwind: bb13]; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut Joiner>, &'b mut Context<'c>) -> Poll<<Joiner as Future>::Output> {<Joiner as Future>::poll}, val: Value(<ZST>) }
    }

    bb8: {
        _22 = discriminant(_15);         // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
        switchInt(move _22) -> [0: bb11, 1: bb9, otherwise: bb10]; // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
    }

    bb9: {
        _0 = Poll::<()>::Pending;        // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
        _31 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]); // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
        discriminant((*_31)) = 3;        // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
        return;                          // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
    }

    bb10: {
        unreachable;                     // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
    }

    bb11: {
        _23 = ((_15 as Ready).0: ());    // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:78:5: 78:17
        _25 = _23;                       // scope 7 at ui/async-await/async-fn-size-moved-locals.rs:78:5: 78:17
        _32 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]); // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:78:16: 78:17
        drop((((*_32) as variant#3).0: Joiner)) -> [return: bb12, unwind: bb16]; // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:78:16: 78:17
    }

    bb12: {
        _0 = Poll::<()>::Ready(move _25); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:79:2: 79:2
        _33 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:79:2: 79:2
        discriminant((*_33)) = 1;        // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:79:2: 79:2
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:79:2: 79:2
    }

    bb13 (cleanup): {
        _34 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]); // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:78:16: 78:17
        drop((((*_34) as variant#3).0: Joiner)) -> bb16; // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:78:16: 78:17
    }

    bb14 (cleanup): {
        drop(_4) -> bb15;                // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:79:1: 79:2
    }

    bb15 (cleanup): {
        drop(_3) -> bb16;                // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:79:1: 79:2
    }

    bb16 (cleanup): {
        _35 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
        discriminant((*_35)) = 2;        // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
        resume;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    }

    bb17: {
        _24 = move _2;                   // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
        _26 = move _24;                  // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
        goto -> bb6;                     // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:78:11: 78:17
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    }

    bb20: {
        unreachable;                     // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:68:19: 79:2
    }
}

fn joined_with_noop() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 81:29
    let mut _1: [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2

    bb0: {
        _1 = [generator@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2 (#0)]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
                                         // generator
                                         // + def_id: DefId(0:36 ~ async_fn_size_moved_locals[cfe4]::joined_with_noop::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, BigFut, Joiner, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]>(move _1) -> bb1; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]) -> [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2] {identity_future::<(), [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:93:2: 93:2
    }
}

fn joined_with_noop::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _29;          // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    let _3: BigFut;                      // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:82:9: 82:10
    let mut _7: std::option::Option<BigFut>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:87:12: 87:19
    let mut _8: BigFut;                  // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:87:17: 87:18
    let mut _9: std::option::Option<BigFut>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:88:12: 88:19
    let mut _10: BigFut;                 // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:88:17: 88:18
    let mut _11: std::option::Option<BigFut>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:89:12: 89:19
    let mut _12: BigFut;                 // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:89:17: 89:18
    let _13: ();                         // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:91:5: 91:11
    let mut _14: Joiner;                 // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
    let mut _15: Joiner;                 // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:92:5: 92:11
    let mut _16: std::task::Poll<()>;    // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
    let mut _17: std::pin::Pin<&mut Joiner>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
    let mut _18: &mut Joiner;            // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
    let mut _19: &mut Joiner;            // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
    let mut _20: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:92:5: 92:17
    let mut _21: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:92:5: 92:17
    let mut _22: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
    let mut _23: isize;                  // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
    let mut _25: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
    let mut _26: bool;                   // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:93:1: 93:2
    let mut _27: bool;                   // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:93:1: 93:2
    let mut _28: ();                     // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    let mut _29: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    let mut _30: u32;                    // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    let mut _31: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    let mut _32: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    let mut _33: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    let mut _34: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    let mut _35: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    let mut _36: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    let mut _37: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    let mut _38: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    scope 1 {
        debug a => _3;                   // in scope 1 at ui/async-await/async-fn-size-moved-locals.rs:82:9: 82:10
        let _4: BigFut;                  // in scope 1 at ui/async-await/async-fn-size-moved-locals.rs:83:9: 83:10
        scope 2 {
            debug b => _4;               // in scope 2 at ui/async-await/async-fn-size-moved-locals.rs:83:9: 83:10
            let _5: BigFut;              // in scope 2 at ui/async-await/async-fn-size-moved-locals.rs:84:9: 84:10
            scope 3 {
                debug c => _5;           // in scope 3 at ui/async-await/async-fn-size-moved-locals.rs:84:9: 84:10
                let _6: Joiner;          // in scope 3 at ui/async-await/async-fn-size-moved-locals.rs:86:9: 86:15
                scope 4 {
                    debug joiner => _6;  // in scope 4 at ui/async-await/async-fn-size-moved-locals.rs:86:9: 86:15
                    scope 5 {
                        debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2])) as variant#3).0: Joiner); // in scope 5 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
                        let _24: ();     // in scope 5 at ui/async-await/async-fn-size-moved-locals.rs:92:5: 92:17
                        scope 6 {
                        }
                        scope 7 {
                            debug result => _24; // in scope 7 at ui/async-await/async-fn-size-moved-locals.rs:92:5: 92:17
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _31 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
        _30 = discriminant((*_31));      // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
        switchInt(move _30) -> [0: bb1, 1: bb26, 2: bb25, 3: bb24, otherwise: bb27]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    }

    bb1: {
        _29 = move _2;                   // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
        _26 = const false;               // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:82:9: 82:10
        _27 = const false;               // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:82:9: 82:10
        _3 = BigFut::new() -> [return: bb2, unwind: bb20]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:82:13: 82:26
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:82:13: 82:24
                                         // + literal: Const { ty: fn() -> BigFut {BigFut::new}, val: Value(<ZST>) }
    }

    bb2: {
        _27 = const true;                // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:83:9: 83:10
        _4 = BigFut::new() -> [return: bb3, unwind: bb19]; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:83:13: 83:26
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:83:13: 83:24
                                         // + literal: Const { ty: fn() -> BigFut {BigFut::new}, val: Value(<ZST>) }
    }

    bb3: {
        _26 = const true;                // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:84:9: 84:10
        _5 = BigFut::new() -> [return: bb4, unwind: bb18]; // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:84:13: 84:26
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:84:13: 84:24
                                         // + literal: Const { ty: fn() -> BigFut {BigFut::new}, val: Value(<ZST>) }
    }

    bb4: {
        _27 = const false;               // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:87:17: 87:18
        _8 = move _3;                    // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:87:17: 87:18
        _7 = Option::<BigFut>::Some(move _8); // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:87:12: 87:19
        _26 = const false;               // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:88:17: 88:18
        _10 = move _4;                   // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:88:17: 88:18
        _9 = Option::<BigFut>::Some(move _10); // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:88:12: 88:19
        _12 = move _5;                   // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:89:17: 89:18
        _11 = Option::<BigFut>::Some(move _12); // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:89:12: 89:19
        _6 = Joiner { a: move _7, b: move _9, c: move _11 }; // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:86:18: 90:6
        _13 = noop() -> [return: bb5, unwind: bb17]; // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:91:5: 91:11
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:91:5: 91:9
                                         // + literal: Const { ty: fn() {noop}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = move _6;                   // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:92:5: 92:11
        _14 = <Joiner as IntoFuture>::into_future(move _15) -> [return: bb6, unwind: bb16]; // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
                                         // + literal: Const { ty: fn(Joiner) -> <Joiner as IntoFuture>::IntoFuture {<Joiner as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb6: {
        _32 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]); // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
        (((*_32) as variant#3).0: Joiner) = move _14; // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
        goto -> bb7;                     // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
    }

    bb7: {
        _33 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
        _19 = &mut (((*_33) as variant#3).0: Joiner); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
        _18 = &mut (*_19);               // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
        _17 = Pin::<&mut Joiner>::new_unchecked(move _18) -> [return: bb8, unwind: bb14]; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
                                         // + literal: Const { ty: unsafe fn(&mut Joiner) -> Pin<&mut Joiner> {Pin::<&mut Joiner>::new_unchecked}, val: Value(<ZST>) }
    }

    bb8: {
        _22 = _29;                       // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
        _21 = move _22;                  // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:92:5: 92:17
        _20 = &mut (*_21);               // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:92:5: 92:17
        _16 = <Joiner as Future>::poll(move _17, move _20) -> [return: bb9, unwind: bb14]; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut Joiner>, &'b mut Context<'c>) -> Poll<<Joiner as Future>::Output> {<Joiner as Future>::poll}, val: Value(<ZST>) }
    }

    bb9: {
        _23 = discriminant(_16);         // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
        switchInt(move _23) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
    }

    bb10: {
        _0 = Poll::<()>::Pending;        // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
        _34 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]); // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
        discriminant((*_34)) = 3;        // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
        return;                          // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
    }

    bb11: {
        unreachable;                     // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
    }

    bb12: {
        _24 = ((_16 as Ready).0: ());    // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:92:5: 92:17
        _28 = _24;                       // scope 7 at ui/async-await/async-fn-size-moved-locals.rs:92:5: 92:17
        _35 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]); // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:92:16: 92:17
        drop((((*_35) as variant#3).0: Joiner)) -> [return: bb13, unwind: bb15]; // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:92:16: 92:17
    }

    bb13: {
        _26 = const false;               // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:93:1: 93:2
        _27 = const false;               // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:93:1: 93:2
        _0 = Poll::<()>::Ready(move _28); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:93:2: 93:2
        _36 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:93:2: 93:2
        discriminant((*_36)) = 1;        // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:93:2: 93:2
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:93:2: 93:2
    }

    bb14 (cleanup): {
        _37 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]); // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:92:16: 92:17
        drop((((*_37) as variant#3).0: Joiner)) -> bb15; // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:92:16: 92:17
    }

    bb15 (cleanup): {
        _26 = const false;               // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:93:1: 93:2
        _27 = const false;               // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:93:1: 93:2
        goto -> bb23;                    // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:93:1: 93:2
    }

    bb16 (cleanup): {
        _26 = const false;               // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:93:1: 93:2
        _27 = const false;               // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:93:1: 93:2
        goto -> bb23;                    // scope 0 at no-location
    }

    bb17 (cleanup): {
        drop(_6) -> bb18;                // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:93:1: 93:2
    }

    bb18 (cleanup): {
        switchInt(_26) -> [0: bb19, otherwise: bb21]; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:93:1: 93:2
    }

    bb19 (cleanup): {
        _26 = const false;               // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:93:1: 93:2
        switchInt(_27) -> [0: bb20, otherwise: bb22]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:93:1: 93:2
    }

    bb20 (cleanup): {
        _27 = const false;               // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:93:1: 93:2
        goto -> bb23;                    // scope 0 at no-location
    }

    bb21 (cleanup): {
        drop(_4) -> bb19;                // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:93:1: 93:2
    }

    bb22 (cleanup): {
        drop(_3) -> bb20;                // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:93:1: 93:2
    }

    bb23 (cleanup): {
        _38 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
        discriminant((*_38)) = 2;        // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
        resume;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    }

    bb24: {
        _25 = move _2;                   // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
        _29 = move _25;                  // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
        goto -> bb7;                     // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:92:11: 92:17
    }

    bb25: {
        assert(const false, "`async fn` resumed after panicking") -> bb25; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    }

    bb26: {
        assert(const false, "`async fn` resumed after completion") -> bb26; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    }

    bb27: {
        unreachable;                     // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:81:29: 93:2
    }
}

fn mixed_sizes() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 95:24
    let mut _1: [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2

    bb0: {
        _1 = [generator@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2 (#0)]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
                                         // generator
                                         // + def_id: DefId(0:38 ~ async_fn_size_moved_locals[cfe4]::mixed_sizes::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, BigFut, Joiner, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]>(move _1) -> bb1; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]) -> [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2] {identity_future::<(), [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:110:2: 110:2
    }
}

fn mixed_sizes::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _50;          // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let _3: BigFut;                      // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:96:9: 96:10
    let mut _7: std::option::Option<BigFut>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:102:12: 102:19
    let mut _8: BigFut;                  // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:102:17: 102:18
    let mut _9: std::option::Option<BigFut>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:103:12: 103:19
    let mut _10: BigFut;                 // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:103:17: 103:18
    let mut _11: std::option::Option<BigFut>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:104:12: 104:19
    let mut _12: BigFut;                 // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:104:17: 104:18
    let mut _13: BigFut;                 // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
    let mut _14: BigFut;                 // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:107:5: 107:6
    let mut _15: std::task::Poll<()>;    // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
    let mut _16: std::pin::Pin<&mut BigFut>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
    let mut _17: &mut BigFut;            // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
    let mut _18: &mut BigFut;            // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
    let mut _19: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:107:5: 107:12
    let mut _20: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:107:5: 107:12
    let mut _21: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
    let mut _22: isize;                  // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
    let mut _24: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
    let mut _25: BigFut;                 // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
    let mut _26: BigFut;                 // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:108:5: 108:6
    let mut _27: std::task::Poll<()>;    // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
    let mut _28: std::pin::Pin<&mut BigFut>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
    let mut _29: &mut BigFut;            // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
    let mut _30: &mut BigFut;            // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
    let mut _31: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:108:5: 108:12
    let mut _32: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:108:5: 108:12
    let mut _33: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
    let mut _34: isize;                  // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
    let mut _36: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
    let mut _37: Joiner;                 // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
    let mut _38: Joiner;                 // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:109:5: 109:11
    let mut _39: std::task::Poll<()>;    // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
    let mut _40: std::pin::Pin<&mut Joiner>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
    let mut _41: &mut Joiner;            // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
    let mut _42: &mut Joiner;            // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
    let mut _43: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:109:5: 109:17
    let mut _44: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:109:5: 109:17
    let mut _45: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
    let mut _46: isize;                  // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
    let mut _48: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
    let mut _49: ();                     // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _50: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _51: u32;                    // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _52: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _53: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _54: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _55: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _56: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _57: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _58: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _59: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _60: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _61: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _62: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _63: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _64: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _65: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _66: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _67: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _68: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _69: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _70: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _71: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _72: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _73: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _74: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _75: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _76: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _77: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _78: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _79: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _80: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _81: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _82: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _83: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _84: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _85: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _86: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _87: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _88: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _89: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _90: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _91: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _92: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _93: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _94: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _95: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _96: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _97: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _98: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _99: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _100: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _101: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _102: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _103: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _104: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _105: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _106: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _107: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _108: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _109: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _110: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    let mut _111: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    scope 1 {
        debug a => _3;                   // in scope 1 at ui/async-await/async-fn-size-moved-locals.rs:96:9: 96:10
        let _4: BigFut;                  // in scope 1 at ui/async-await/async-fn-size-moved-locals.rs:97:9: 97:10
        scope 2 {
            debug b => _4;               // in scope 2 at ui/async-await/async-fn-size-moved-locals.rs:97:9: 97:10
            let _5: BigFut;              // in scope 2 at ui/async-await/async-fn-size-moved-locals.rs:98:9: 98:10
            scope 3 {
                debug c => _5;           // in scope 3 at ui/async-await/async-fn-size-moved-locals.rs:98:9: 98:10
                let _6: BigFut;          // in scope 3 at ui/async-await/async-fn-size-moved-locals.rs:99:9: 99:10
                scope 4 {
                    debug d => _6;       // in scope 4 at ui/async-await/async-fn-size-moved-locals.rs:99:9: 99:10
                    scope 5 {
                        debug e => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2])) as variant#3).0: BigFut); // in scope 5 at ui/async-await/async-fn-size-moved-locals.rs:100:9: 100:10
                        scope 6 {
                            debug joiner => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2])) as variant#3).1: Joiner); // in scope 6 at ui/async-await/async-fn-size-moved-locals.rs:101:9: 101:15
                            scope 7 {
                                debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2])) as variant#3).2: BigFut); // in scope 7 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
                                let _23: (); // in scope 7 at ui/async-await/async-fn-size-moved-locals.rs:107:5: 107:12
                                scope 8 {
                                }
                                scope 9 {
                                    debug result => _23; // in scope 9 at ui/async-await/async-fn-size-moved-locals.rs:107:5: 107:12
                                }
                            }
                            scope 10 {
                                debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2])) as variant#4).1: BigFut); // in scope 10 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
                                let _35: (); // in scope 10 at ui/async-await/async-fn-size-moved-locals.rs:108:5: 108:12
                                scope 11 {
                                }
                                scope 12 {
                                    debug result => _35; // in scope 12 at ui/async-await/async-fn-size-moved-locals.rs:108:5: 108:12
                                }
                            }
                            scope 13 {
                                debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2])) as variant#5).0: Joiner); // in scope 13 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
                                let _47: (); // in scope 13 at ui/async-await/async-fn-size-moved-locals.rs:109:5: 109:17
                                scope 14 {
                                }
                                scope 15 {
                                    debug result => _47; // in scope 15 at ui/async-await/async-fn-size-moved-locals.rs:109:5: 109:17
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _52 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
        _51 = discriminant((*_52));      // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
        switchInt(move _51) -> [0: bb1, 1: bb51, 2: bb50, 3: bb47, 4: bb48, 5: bb49, otherwise: bb52]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    }

    bb1: {
        _50 = move _2;                   // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
        _53 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:96:9: 96:10
        (((*_53) as variant#3).3: bool) = const false; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:96:9: 96:10
        _54 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:96:9: 96:10
        (((*_54) as variant#3).6: bool) = const false; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:96:9: 96:10
        _55 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:96:9: 96:10
        (((*_55) as variant#3).4: bool) = const false; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:96:9: 96:10
        _56 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:96:9: 96:10
        (((*_56) as variant#3).7: bool) = const false; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:96:9: 96:10
        _57 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:96:9: 96:10
        (((*_57) as variant#3).5: bool) = const false; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:96:9: 96:10
        _58 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:96:9: 96:10
        (((*_58) as variant#3).8: bool) = const false; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:96:9: 96:10
        _3 = BigFut::new() -> [return: bb2, unwind: bb39]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:96:13: 96:26
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:96:13: 96:24
                                         // + literal: Const { ty: fn() -> BigFut {BigFut::new}, val: Value(<ZST>) }
    }

    bb2: {
        _59 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:97:9: 97:10
        (((*_59) as variant#3).8: bool) = const true; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:97:9: 97:10
        _4 = BigFut::new() -> [return: bb3, unwind: bb38]; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:97:13: 97:26
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:97:13: 97:24
                                         // + literal: Const { ty: fn() -> BigFut {BigFut::new}, val: Value(<ZST>) }
    }

    bb3: {
        _60 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:98:9: 98:10
        (((*_60) as variant#3).7: bool) = const true; // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:98:9: 98:10
        _5 = BigFut::new() -> [return: bb4, unwind: bb37]; // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:98:13: 98:26
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:98:13: 98:24
                                         // + literal: Const { ty: fn() -> BigFut {BigFut::new}, val: Value(<ZST>) }
    }

    bb4: {
        _61 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:99:9: 99:10
        (((*_61) as variant#3).6: bool) = const true; // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:99:9: 99:10
        _6 = BigFut::new() -> [return: bb5, unwind: bb36]; // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:99:13: 99:26
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:99:13: 99:24
                                         // + literal: Const { ty: fn() -> BigFut {BigFut::new}, val: Value(<ZST>) }
    }

    bb5: {
        _62 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:100:9: 100:10
        (((*_62) as variant#3).5: bool) = const true; // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:100:9: 100:10
        _63 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:100:13: 100:26
        (((*_63) as variant#3).0: BigFut) = BigFut::new() -> [return: bb6, unwind: bb35]; // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:100:13: 100:26
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:100:13: 100:24
                                         // + literal: Const { ty: fn() -> BigFut {BigFut::new}, val: Value(<ZST>) }
    }

    bb6: {
        _64 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:101:9: 101:15
        (((*_64) as variant#3).4: bool) = const true; // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:101:9: 101:15
        _65 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:102:17: 102:18
        (((*_65) as variant#3).8: bool) = const false; // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:102:17: 102:18
        _8 = move _3;                    // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:102:17: 102:18
        _7 = Option::<BigFut>::Some(move _8); // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:102:12: 102:19
        _66 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:103:17: 103:18
        (((*_66) as variant#3).7: bool) = const false; // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:103:17: 103:18
        _10 = move _4;                   // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:103:17: 103:18
        _9 = Option::<BigFut>::Some(move _10); // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:103:12: 103:19
        _67 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:104:17: 104:18
        (((*_67) as variant#3).6: bool) = const false; // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:104:17: 104:18
        _12 = move _5;                   // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:104:17: 104:18
        _11 = Option::<BigFut>::Some(move _12); // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:104:12: 104:19
        _68 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:101:18: 105:6
        (((*_68) as variant#3).3: bool) = const true; // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:101:18: 105:6
        _69 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:101:18: 105:6
        (((*_69) as variant#3).1: Joiner) = Joiner { a: move _7, b: move _9, c: move _11 }; // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:101:18: 105:6
        _70 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:107:5: 107:6
        (((*_70) as variant#3).5: bool) = const false; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:107:5: 107:6
        _14 = move _6;                   // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:107:5: 107:6
        _13 = <BigFut as IntoFuture>::into_future(move _14) -> [return: bb7, unwind: bb41]; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
                                         // + literal: Const { ty: fn(BigFut) -> <BigFut as IntoFuture>::IntoFuture {<BigFut as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb7: {
        _71 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
        (((*_71) as variant#3).2: BigFut) = move _13; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
        goto -> bb8;                     // scope 7 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
    }

    bb8: {
        _72 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 8 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
        _18 = &mut (((*_72) as variant#3).2: BigFut); // scope 8 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
        _17 = &mut (*_18);               // scope 8 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
        _16 = Pin::<&mut BigFut>::new_unchecked(move _17) -> [return: bb9, unwind: bb33]; // scope 8 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
                                         // + literal: Const { ty: unsafe fn(&mut BigFut) -> Pin<&mut BigFut> {Pin::<&mut BigFut>::new_unchecked}, val: Value(<ZST>) }
    }

    bb9: {
        _21 = _50;                       // scope 8 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
        _20 = move _21;                  // scope 8 at ui/async-await/async-fn-size-moved-locals.rs:107:5: 107:12
        _19 = &mut (*_20);               // scope 8 at ui/async-await/async-fn-size-moved-locals.rs:107:5: 107:12
        _15 = <BigFut as Future>::poll(move _16, move _19) -> [return: bb10, unwind: bb33]; // scope 8 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut BigFut>, &'b mut Context<'c>) -> Poll<<BigFut as Future>::Output> {<BigFut as Future>::poll}, val: Value(<ZST>) }
    }

    bb10: {
        _22 = discriminant(_15);         // scope 7 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
        switchInt(move _22) -> [0: bb13, 1: bb11, otherwise: bb12]; // scope 7 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
    }

    bb11: {
        _0 = Poll::<()>::Pending;        // scope 7 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
        _73 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 7 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
        discriminant((*_73)) = 3;        // scope 7 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
        return;                          // scope 7 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
    }

    bb12: {
        unreachable;                     // scope 7 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
    }

    bb13: {
        _23 = ((_15 as Ready).0: ());    // scope 7 at ui/async-await/async-fn-size-moved-locals.rs:107:5: 107:12
        _74 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:107:11: 107:12
        drop((((*_74) as variant#3).2: BigFut)) -> [return: bb14, unwind: bb41]; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:107:11: 107:12
    }

    bb14: {
        _75 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:108:5: 108:6
        (((*_75) as variant#3).4: bool) = const false; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:108:5: 108:6
        _76 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:108:5: 108:6
        _26 = move (((*_76) as variant#3).0: BigFut); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:108:5: 108:6
        _25 = <BigFut as IntoFuture>::into_future(move _26) -> [return: bb15, unwind: bb41]; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
                                         // + literal: Const { ty: fn(BigFut) -> <BigFut as IntoFuture>::IntoFuture {<BigFut as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb15: {
        _77 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
        (((*_77) as variant#4).1: BigFut) = move _25; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
        goto -> bb16;                    // scope 10 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
    }

    bb16: {
        _78 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 11 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
        _30 = &mut (((*_78) as variant#4).1: BigFut); // scope 11 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
        _29 = &mut (*_30);               // scope 11 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
        _28 = Pin::<&mut BigFut>::new_unchecked(move _29) -> [return: bb17, unwind: bb32]; // scope 11 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
                                         // + literal: Const { ty: unsafe fn(&mut BigFut) -> Pin<&mut BigFut> {Pin::<&mut BigFut>::new_unchecked}, val: Value(<ZST>) }
    }

    bb17: {
        _33 = _50;                       // scope 11 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
        _32 = move _33;                  // scope 11 at ui/async-await/async-fn-size-moved-locals.rs:108:5: 108:12
        _31 = &mut (*_32);               // scope 11 at ui/async-await/async-fn-size-moved-locals.rs:108:5: 108:12
        _27 = <BigFut as Future>::poll(move _28, move _31) -> [return: bb18, unwind: bb32]; // scope 11 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut BigFut>, &'b mut Context<'c>) -> Poll<<BigFut as Future>::Output> {<BigFut as Future>::poll}, val: Value(<ZST>) }
    }

    bb18: {
        _34 = discriminant(_27);         // scope 10 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
        switchInt(move _34) -> [0: bb21, 1: bb19, otherwise: bb20]; // scope 10 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
    }

    bb19: {
        _0 = Poll::<()>::Pending;        // scope 10 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
        _79 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 10 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
        discriminant((*_79)) = 4;        // scope 10 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
        return;                          // scope 10 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
    }

    bb20: {
        unreachable;                     // scope 10 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
    }

    bb21: {
        _35 = ((_27 as Ready).0: ());    // scope 10 at ui/async-await/async-fn-size-moved-locals.rs:108:5: 108:12
        _80 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:108:11: 108:12
        drop((((*_80) as variant#4).1: BigFut)) -> [return: bb22, unwind: bb41]; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:108:11: 108:12
    }

    bb22: {
        _81 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:109:5: 109:11
        (((*_81) as variant#3).3: bool) = const false; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:109:5: 109:11
        _82 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:109:5: 109:11
        _38 = move (((*_82) as variant#3).1: Joiner); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:109:5: 109:11
        _37 = <Joiner as IntoFuture>::into_future(move _38) -> [return: bb23, unwind: bb41]; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
                                         // + literal: Const { ty: fn(Joiner) -> <Joiner as IntoFuture>::IntoFuture {<Joiner as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb23: {
        _83 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
        (((*_83) as variant#5).0: Joiner) = move _37; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
        goto -> bb24;                    // scope 13 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
    }

    bb24: {
        _84 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 14 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
        _42 = &mut (((*_84) as variant#5).0: Joiner); // scope 14 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
        _41 = &mut (*_42);               // scope 14 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
        _40 = Pin::<&mut Joiner>::new_unchecked(move _41) -> [return: bb25, unwind: bb31]; // scope 14 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
                                         // + literal: Const { ty: unsafe fn(&mut Joiner) -> Pin<&mut Joiner> {Pin::<&mut Joiner>::new_unchecked}, val: Value(<ZST>) }
    }

    bb25: {
        _45 = _50;                       // scope 14 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
        _44 = move _45;                  // scope 14 at ui/async-await/async-fn-size-moved-locals.rs:109:5: 109:17
        _43 = &mut (*_44);               // scope 14 at ui/async-await/async-fn-size-moved-locals.rs:109:5: 109:17
        _39 = <Joiner as Future>::poll(move _40, move _43) -> [return: bb26, unwind: bb31]; // scope 14 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut Joiner>, &'b mut Context<'c>) -> Poll<<Joiner as Future>::Output> {<Joiner as Future>::poll}, val: Value(<ZST>) }
    }

    bb26: {
        _46 = discriminant(_39);         // scope 13 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
        switchInt(move _46) -> [0: bb29, 1: bb27, otherwise: bb28]; // scope 13 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
    }

    bb27: {
        _0 = Poll::<()>::Pending;        // scope 13 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
        _85 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 13 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
        discriminant((*_85)) = 5;        // scope 13 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
        return;                          // scope 13 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
    }

    bb28: {
        unreachable;                     // scope 13 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
    }

    bb29: {
        _47 = ((_39 as Ready).0: ());    // scope 13 at ui/async-await/async-fn-size-moved-locals.rs:109:5: 109:17
        _86 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:109:16: 109:17
        drop((((*_86) as variant#5).0: Joiner)) -> [return: bb30, unwind: bb41]; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:109:16: 109:17
    }

    bb30: {
        _49 = const ();                  // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
        _87 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        (((*_87) as variant#3).3: bool) = const false; // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        _88 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        (((*_88) as variant#3).4: bool) = const false; // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        _89 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        (((*_89) as variant#3).5: bool) = const false; // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        _90 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        (((*_90) as variant#3).6: bool) = const false; // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        _91 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        (((*_91) as variant#3).7: bool) = const false; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        _92 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        (((*_92) as variant#3).8: bool) = const false; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        _0 = Poll::<()>::Ready(move _49); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:110:2: 110:2
        _93 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:110:2: 110:2
        discriminant((*_93)) = 1;        // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:110:2: 110:2
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:110:2: 110:2
    }

    bb31 (cleanup): {
        _94 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:109:16: 109:17
        drop((((*_94) as variant#5).0: Joiner)) -> bb41; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:109:16: 109:17
    }

    bb32 (cleanup): {
        _95 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:108:11: 108:12
        drop((((*_95) as variant#4).1: BigFut)) -> bb41; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:108:11: 108:12
    }

    bb33 (cleanup): {
        _96 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:107:11: 107:12
        drop((((*_96) as variant#3).2: BigFut)) -> bb41; // scope 6 at ui/async-await/async-fn-size-moved-locals.rs:107:11: 107:12
    }

    bb34 (cleanup): {
        _97 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        (((*_97) as variant#3).3: bool) = const false; // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        _106 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        switchInt((((*_106) as variant#3).4: bool)) -> [0: bb35, otherwise: bb42]; // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
    }

    bb35 (cleanup): {
        _98 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        (((*_98) as variant#3).4: bool) = const false; // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        _107 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        switchInt((((*_107) as variant#3).5: bool)) -> [0: bb36, otherwise: bb43]; // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
    }

    bb36 (cleanup): {
        _99 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        (((*_99) as variant#3).5: bool) = const false; // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        _108 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        switchInt((((*_108) as variant#3).6: bool)) -> [0: bb37, otherwise: bb44]; // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
    }

    bb37 (cleanup): {
        _100 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        (((*_100) as variant#3).6: bool) = const false; // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        _109 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        switchInt((((*_109) as variant#3).7: bool)) -> [0: bb38, otherwise: bb45]; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
    }

    bb38 (cleanup): {
        _101 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        (((*_101) as variant#3).7: bool) = const false; // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        _110 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        switchInt((((*_110) as variant#3).8: bool)) -> [0: bb39, otherwise: bb46]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
    }

    bb39 (cleanup): {
        _102 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        (((*_102) as variant#3).8: bool) = const false; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        _111 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
        discriminant((*_111)) = 2;       // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
        resume;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    }

    bb40 (cleanup): {
        _103 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        drop((((*_103) as variant#3).1: Joiner)) -> bb34; // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
    }

    bb41 (cleanup): {
        _104 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        switchInt((((*_104) as variant#3).3: bool)) -> [0: bb34, otherwise: bb40]; // scope 5 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
    }

    bb42 (cleanup): {
        _105 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2]); // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
        drop((((*_105) as variant#3).0: BigFut)) -> bb35; // scope 4 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
    }

    bb43 (cleanup): {
        drop(_6) -> bb36;                // scope 3 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
    }

    bb44 (cleanup): {
        drop(_5) -> bb37;                // scope 2 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
    }

    bb45 (cleanup): {
        drop(_4) -> bb38;                // scope 1 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
    }

    bb46 (cleanup): {
        drop(_3) -> bb39;                // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:110:1: 110:2
    }

    bb47: {
        _24 = move _2;                   // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
        _50 = move _24;                  // scope 7 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
        goto -> bb8;                     // scope 7 at ui/async-await/async-fn-size-moved-locals.rs:107:6: 107:12
    }

    bb48: {
        _36 = move _2;                   // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
        _50 = move _36;                  // scope 10 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
        goto -> bb16;                    // scope 10 at ui/async-await/async-fn-size-moved-locals.rs:108:6: 108:12
    }

    bb49: {
        _48 = move _2;                   // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
        _50 = move _48;                  // scope 13 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
        goto -> bb24;                    // scope 13 at ui/async-await/async-fn-size-moved-locals.rs:109:11: 109:17
    }

    bb50: {
        assert(const false, "`async fn` resumed after panicking") -> bb50; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    }

    bb51: {
        assert(const false, "`async fn` resumed after completion") -> bb51; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    }

    bb52: {
        unreachable;                     // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:95:24: 110:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:112:11: 112:11
    let mut _1: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: usize;                       // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:113:22: 113:54
    let mut _5: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:113:44: 113:53
    let _6: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:113:44: 113:53
    let _7: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:113:45: 113:53
    let _8: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _24: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _25: usize;                      // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:114:22: 114:64
    let mut _26: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:114:44: 114:63
    let _27: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:114:44: 114:63
    let _28: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:114:45: 114:63
    let _29: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _30: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _43: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _44: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _45: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _46: usize;                      // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:115:22: 115:54
    let mut _47: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:115:44: 115:53
    let _48: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:115:44: 115:53
    let _49: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:115:45: 115:53
    let _50: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _51: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _52: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _54: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _55: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _57: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _58: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _59: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _60: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _61: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _62: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _64: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _65: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _66: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _67: usize;                      // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:116:22: 116:64
    let mut _68: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:116:44: 116:63
    let _69: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:116:44: 116:63
    let _70: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:116:45: 116:63
    let _71: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _72: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _73: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _74: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _75: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _76: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _78: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _79: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _80: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _81: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _82: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _83: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _85: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _86: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _87: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _88: usize;                      // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:117:22: 117:59
    let mut _89: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:117:44: 117:58
    let _90: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:117:44: 117:58
    let _91: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:117:45: 117:58
    let _92: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _93: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _94: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _95: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _96: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _97: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _99: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _100: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _101: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _102: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _103: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _104: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _105: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _106: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _107: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _108: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _109: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _110: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _29;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _30;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _35: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _35;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _50;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _51;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _56: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _56;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _71;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _72;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _77: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _77;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _92;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _93;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _98: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _98;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _110 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[4])) }
        _2 = _110;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = single() -> bb1;            // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:113:45: 113:53
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:113:45: 113:51
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {single}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_7;                        // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:113:44: 113:53
        _5 = _6;                         // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:113:44: 113:53
        _4 = std::mem::size_of_val::<impl Future<Output = ()>>(move _5) -> [return: bb2, unwind: bb30]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:113:22: 113:54
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:113:22: 113:43
                                         // + literal: Const { ty: for<'a> fn(&'a impl Future<Output = ()>) -> usize {std::mem::size_of_val::<impl Future<Output = ()>>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_1.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_1.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = const 1025_usize;          // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = (*_9);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<usize, usize>(move _16, move _17, move _19, move _21) -> bb30; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_7) -> bb5;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb5: {
        _109 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[3])) }
        _23 = _109;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _28 = single_with_noop() -> bb6; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:114:45: 114:63
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:114:45: 114:61
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {single_with_noop}, val: Value(<ZST>) }
    }

    bb6: {
        _27 = &_28;                      // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:114:44: 114:63
        _26 = _27;                       // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:114:44: 114:63
        _25 = std::mem::size_of_val::<impl Future<Output = ()>>(move _26) -> [return: bb7, unwind: bb29]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:114:22: 114:64
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:114:22: 114:43
                                         // + literal: Const { ty: for<'a> fn(&'a impl Future<Output = ()>) -> usize {std::mem::size_of_val::<impl Future<Output = ()>>}, val: Value(<ZST>) }
    }

    bb7: {
        _24 = &_25;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _24);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_22.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_22.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = const 1026_usize;          // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = (*_30);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = Eq(move _33, move _34);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _31 = Not(move _32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb9, otherwise: bb8]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _35 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<usize, usize>(move _37, move _38, move _40, move _42) -> bb29; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_28) -> bb10;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb10: {
        _108 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[2])) }
        _44 = _108;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _49 = joined() -> bb11;          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:115:45: 115:53
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:115:45: 115:51
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {joined}, val: Value(<ZST>) }
    }

    bb11: {
        _48 = &_49;                      // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:115:44: 115:53
        _47 = _48;                       // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:115:44: 115:53
        _46 = std::mem::size_of_val::<impl Future<Output = ()>>(move _47) -> [return: bb12, unwind: bb28]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:115:22: 115:54
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:115:22: 115:43
                                         // + literal: Const { ty: for<'a> fn(&'a impl Future<Output = ()>) -> usize {std::mem::size_of_val::<impl Future<Output = ()>>}, val: Value(<ZST>) }
    }

    bb12: {
        _45 = &_46;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _43 = (move _44, move _45);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _50 = (_43.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _51 = (_43.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _54 = const 3076_usize;          // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _55 = (*_51);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _53 = Eq(move _54, move _55);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _52 = Not(move _53);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _52) -> [0: bb14, otherwise: bb13]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _56 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _60 = _50;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _59 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _51;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = _62;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _63 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _57 = core::panicking::assert_failed::<usize, usize>(move _58, move _59, move _61, move _63) -> bb28; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_49) -> bb15;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb15: {
        _107 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _65 = _107;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _70 = joined_with_noop() -> bb16; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:116:45: 116:63
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:116:45: 116:61
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {joined_with_noop}, val: Value(<ZST>) }
    }

    bb16: {
        _69 = &_70;                      // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:116:44: 116:63
        _68 = _69;                       // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:116:44: 116:63
        _67 = std::mem::size_of_val::<impl Future<Output = ()>>(move _68) -> [return: bb17, unwind: bb27]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:116:22: 116:64
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:116:22: 116:43
                                         // + literal: Const { ty: for<'a> fn(&'a impl Future<Output = ()>) -> usize {std::mem::size_of_val::<impl Future<Output = ()>>}, val: Value(<ZST>) }
    }

    bb17: {
        _66 = &_67;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _64 = (move _65, move _66);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _71 = (_64.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _72 = (_64.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _75 = const 3076_usize;          // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _76 = (*_72);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _74 = Eq(move _75, move _76);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _73 = Not(move _74);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _73) -> [0: bb19, otherwise: bb18]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb18: {
        _77 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _81 = _71;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _80 = _81;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _83 = _72;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = _83;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _84 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _78 = core::panicking::assert_failed::<usize, usize>(move _79, move _80, move _82, move _84) -> bb27; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb19: {
        drop(_70) -> bb20;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb20: {
        _106 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _86 = _106;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _91 = mixed_sizes() -> bb21;     // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:117:45: 117:58
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:117:45: 117:56
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {mixed_sizes}, val: Value(<ZST>) }
    }

    bb21: {
        _90 = &_91;                      // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:117:44: 117:58
        _89 = _90;                       // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:117:44: 117:58
        _88 = std::mem::size_of_val::<impl Future<Output = ()>>(move _89) -> [return: bb22, unwind: bb26]; // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:117:22: 117:59
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-moved-locals.rs:117:22: 117:43
                                         // + literal: Const { ty: for<'a> fn(&'a impl Future<Output = ()>) -> usize {std::mem::size_of_val::<impl Future<Output = ()>>}, val: Value(<ZST>) }
    }

    bb22: {
        _87 = &_88;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _85 = (move _86, move _87);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _92 = (_85.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _93 = (_85.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _96 = const 6157_usize;          // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _97 = (*_93);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _95 = Eq(move _96, move _97);    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _94 = Not(move _95);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _94) -> [0: bb24, otherwise: bb23]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _98 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _100 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _102 = _92;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _101 = _102;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _104 = _93;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _103 = _104;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _105 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _99 = core::panicking::assert_failed::<usize, usize>(move _100, move _101, move _103, move _105) -> bb26; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb24: {
        drop(_91) -> bb25;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb25: {
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:118:2: 118:2
    }

    bb26 (cleanup): {
        drop(_91) -> bb31;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb27 (cleanup): {
        drop(_70) -> bb31;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb28 (cleanup): {
        drop(_49) -> bb31;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb29 (cleanup): {
        drop(_28) -> bb31;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb30 (cleanup): {
        drop(_7) -> bb31;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb31 (cleanup): {
        resume;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:112:1: 118:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:117:16: 117:20

    bb0: {
        _1 = const 6157_usize;           // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:117:16: 117:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:116:16: 116:20

    bb0: {
        _1 = const 3076_usize;           // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:116:16: 116:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:115:16: 115:20

    bb0: {
        _1 = const 3076_usize;           // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:115:16: 115:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:114:16: 114:20

    bb0: {
        _1 = const 1026_usize;           // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:114:16: 114:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:113:16: 113:20

    bb0: {
        _1 = const 1025_usize;           // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:113:16: 113:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

fn BigFut(_1: [u8; 1024]) -> BigFut {
    let mut _0: BigFut;                  // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:20:1: 20:14

    bb0: {
        _0 = BigFut(move _1);            // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:20:1: 20:14
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:20:1: 20:14
    }
}

// MIR FOR CTFE
fn BigFut(_1: [u8; 1024]) -> BigFut {
    let mut _0: BigFut;                  // return place in scope 0 at ui/async-await/async-fn-size-moved-locals.rs:20:1: 20:14

    bb0: {
        _0 = BigFut(move _1);            // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:20:1: 20:14
        return;                          // scope 0 at ui/async-await/async-fn-size-moved-locals.rs:20:1: 20:14
    }
}
