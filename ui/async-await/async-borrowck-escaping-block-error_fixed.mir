// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_boxed() -> Box<impl Future<Output = u32>> {
    let mut _0: std::boxed::Box<impl std::future::Future<Output = u32>>; // return place in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:4:20: 4:63
    let _1: u32;                         // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:5:9: 5:10
    let mut _2: [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30]; // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
    let mut _3: [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30]; // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:5:9: 5:10
    }

    bb0: {
        _1 = const 0_u32;                // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:5:13: 5:17
        _3 = [generator@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30 (#0)] { x: _1 }; // scope 1 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
                                         // generator
                                         // + def_id: DefId(0:4 ~ async_borrowck_escaping_block_error_fixed[5eaf]::test_boxed::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     u32,
                                         //     {},
                                         //     (u32,),
                                         // ]
                                         // + movability: Static
        _2 = identity_future::<u32, [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30]>(move _3) -> bb1; // scope 1 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
                                         // mir::Constant
                                         // + span: ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
                                         // + literal: Const { ty: fn([async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30]) -> [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30] {identity_future::<u32, [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30]>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Box::<[async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30]>::new(move _2) -> bb2; // scope 1 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:5: 6:32
                                         // mir::Constant
                                         // + span: ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:5: 6:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30]) -> Box<[async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30]> {Box::<[async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30]>::new}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:8:2: 8:2
    }
}

fn test_boxed::{closure#0}(_1: Pin<&mut [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30]>, _2: &mut Context<'_>) -> Poll<u32> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
    debug x => ((*(_1.0: &mut [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30])).0: u32); // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:5:9: 5:10
    let mut _0: std::task::Poll<u32>;    // return place in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
    let mut _3: u32;                     // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
    let mut _5: u32;                     // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
    let mut _6: &mut [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30]; // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
    let mut _7: &mut [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30]; // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
    let mut _8: &mut [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30]; // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30

    bb0: {
        _6 = deref_copy (_1.0: &mut [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30]); // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
        _7 = deref_copy (_1.0: &mut [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30]); // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:27: 6:28
        _3 = ((*_7).0: u32);             // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:27: 6:28
        _0 = Poll::<u32>::Ready(move _3); // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:30: 6:30
        _8 = deref_copy (_1.0: &mut [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30]); // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:30: 6:30
        discriminant((*_8)) = 1;         // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:30: 6:30
        return;                          // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:30: 6:30
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:6:14: 6:30
    }
}

fn test_ref(_1: &u32) -> impl Future<Output = u32> + '_ {
    debug x => _1;                       // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:10:13: 10:14
    let mut _0: impl std::future::Future<Output = u32> + '_; // return place in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:10:25: 10:68
    let mut _2: [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22]; // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22

    bb0: {
        _2 = [generator@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22 (#0)] { x: _1 }; // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
                                         // generator
                                         // + def_id: DefId(0:6 ~ async_borrowck_escaping_block_error_fixed[5eaf]::test_ref::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     u32,
                                         //     {},
                                         //     (&u32,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<u32, [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22]>(move _2) -> bb1; // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
                                         // mir::Constant
                                         // + span: ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
                                         // + literal: Const { ty: fn([async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22]) -> [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22] {identity_future::<u32, [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:13:2: 13:2
    }
}

fn test_ref::{closure#0}(_1: Pin<&mut [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22]>, _2: &mut Context<'_>) -> Poll<u32> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
    debug x => ((*(_1.0: &mut [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22])).0: &u32); // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:10:13: 10:14
    let mut _0: std::task::Poll<u32>;    // return place in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
    let mut _3: &u32;                    // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
    let mut _4: u32;                     // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
    let mut _6: u32;                     // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
    let mut _7: &mut [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22]; // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
    let mut _8: &mut [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22]; // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
    let mut _9: &mut [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22]; // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22

    bb0: {
        _7 = deref_copy (_1.0: &mut [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22]); // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
        switchInt(move _6) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
        _8 = deref_copy (_1.0: &mut [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22]); // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:18: 11:20
        _3 = deref_copy ((*_8).0: &u32); // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:18: 11:20
        _4 = (*_3);                      // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:18: 11:20
        _0 = Poll::<u32>::Ready(move _4); // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:22: 11:22
        _9 = deref_copy (_1.0: &mut [async block@ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22]); // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:22: 11:22
        discriminant((*_9)) = 1;         // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:22: 11:22
        return;                          // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:22: 11:22
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:11:5: 11:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:15:11: 15:11
    let mut _1: std::boxed::Box<impl std::future::Future<Output = u32>>; // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:16:13: 16:25
    let mut _2: impl std::future::Future<Output = u32> + '_; // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:17:13: 17:28
    let mut _3: &u32;                    // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:17:22: 17:27
    let _4: &u32;                        // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:17:22: 17:27
    scope 1 {
        let mut _5: &u32;                // in scope 1 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:17:22: 17:27
        scope 2 {
        }
    }

    bb0: {
        _1 = test_boxed() -> bb1;        // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:16:13: 16:25
                                         // mir::Constant
                                         // + span: ui/async-await/async-borrowck-escaping-block-error_fixed.rs:16:13: 16:23
                                         // + literal: Const { ty: fn() -> Box<impl Future<Output = u32>> {test_boxed}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:16:25: 16:26
    }

    bb2: {
        _5 = const _;                    // scope 1 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:17:22: 17:27
                                         // mir::Constant
                                         // + span: ui/async-await/async-borrowck-escaping-block-error_fixed.rs:17:22: 17:27
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _5;                         // scope 1 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:17:22: 17:27
        _3 = _4;                         // scope 1 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:17:22: 17:27
        _2 = test_ref(move _3) -> bb3;   // scope 1 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:17:13: 17:28
                                         // mir::Constant
                                         // + span: ui/async-await/async-borrowck-escaping-block-error_fixed.rs:17:13: 17:21
                                         // + literal: Const { ty: for<'a> fn(&'a u32) -> impl Future<Output = u32> + 'a {test_ref}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:18:2: 18:2
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:17:22: 17:27
    let mut _1: u32;                     // in scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:17:23: 17:27

    bb0: {
        _1 = const 0_u32;                // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:17:23: 17:27
        _0 = &_1;                        // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:17:22: 17:27
        return;                          // scope 0 at ui/async-await/async-borrowck-escaping-block-error_fixed.rs:17:22: 17:27
    }
}
