// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> impl Future<Output = <T as Trait>::Assoc> {
    let mut _0: impl std::future::Future<Output = <T as Trait>::Assoc>; // return place in scope 0 at ui/async-await/bound-normalization.rs:10:39: 10:47
    let mut _1: [async fn body@ui/async-await/bound-normalization.rs:10:48: 12:2]; // in scope 0 at ui/async-await/bound-normalization.rs:10:48: 12:2

    bb0: {
        _1 = [generator@ui/async-await/bound-normalization.rs:10:48: 12:2 (#0)]; // scope 0 at ui/async-await/bound-normalization.rs:10:48: 12:2
                                         // generator
                                         // + def_id: DefId(0:7 ~ bound_normalization[74ba]::foo::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/bound-normalization.rs:10:48: 12:2]>(move _1) -> bb1; // scope 0 at ui/async-await/bound-normalization.rs:10:48: 12:2
                                         // mir::Constant
                                         // + span: ui/async-await/bound-normalization.rs:10:48: 12:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/bound-normalization.rs:10:48: 12:2]) -> [async fn body@ui/async-await/bound-normalization.rs:10:48: 12:2] {identity_future::<(), [async fn body@ui/async-await/bound-normalization.rs:10:48: 12:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/bound-normalization.rs:12:2: 12:2
    }
}

fn foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/bound-normalization.rs:10:48: 12:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/bound-normalization.rs:10:48: 12:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/bound-normalization.rs:10:48: 12:2
    let mut _3: ();                      // in scope 0 at ui/async-await/bound-normalization.rs:10:48: 12:2
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/bound-normalization.rs:10:48: 12:2
    let mut _5: u32;                     // in scope 0 at ui/async-await/bound-normalization.rs:10:48: 12:2
    let mut _6: &mut [async fn body@ui/async-await/bound-normalization.rs:10:48: 12:2]; // in scope 0 at ui/async-await/bound-normalization.rs:10:48: 12:2
    let mut _7: &mut [async fn body@ui/async-await/bound-normalization.rs:10:48: 12:2]; // in scope 0 at ui/async-await/bound-normalization.rs:10:48: 12:2

    bb0: {
        _6 = deref_copy (_1.0: &mut [async fn body@ui/async-await/bound-normalization.rs:10:48: 12:2]); // scope 0 at ui/async-await/bound-normalization.rs:10:48: 12:2
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/bound-normalization.rs:10:48: 12:2
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/bound-normalization.rs:10:48: 12:2
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/bound-normalization.rs:10:48: 12:2
        _3 = ();                         // scope 0 at ui/async-await/bound-normalization.rs:11:5: 11:7
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/bound-normalization.rs:12:2: 12:2
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/bound-normalization.rs:10:48: 12:2]); // scope 0 at ui/async-await/bound-normalization.rs:12:2: 12:2
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/bound-normalization.rs:12:2: 12:2
        return;                          // scope 0 at ui/async-await/bound-normalization.rs:12:2: 12:2
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/bound-normalization.rs:10:48: 12:2
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/bound-normalization.rs:10:48: 12:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/bound-normalization.rs:14:11: 14:11

    bb0: {
        return;                          // scope 0 at ui/async-await/bound-normalization.rs:14:13: 14:13
    }
}
