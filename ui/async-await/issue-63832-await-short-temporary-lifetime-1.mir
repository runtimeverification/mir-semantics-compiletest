// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:6:1: 6:10>::borrow_async(_1: &Test) -> impl Future<Output = ()> {
    debug self => _1;                    // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:27: 7:32
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:34
    let mut _2: [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36]; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36

    bb0: {
        _2 = [generator@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36 (#0)] { self: _1 }; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
                                         // generator
                                         // + def_id: DefId(0:8 ~ issue_63832_await_short_temporary_lifetime_1[711c]::{impl#0}::borrow_async::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (&Test,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36]>(move _2) -> bb1; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
                                         // mir::Constant
                                         // + span: ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36]) -> [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36] {identity_future::<(), [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:36: 7:36
    }
}

fn <impl at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:6:1: 6:10>::borrow_async::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
    debug self => ((*(_1.0: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36])).0: &Test); // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:27: 7:32
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
    let _3: &Test;                       // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:27: 7:32
    let mut _4: ();                      // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
    let mut _6: u32;                     // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
    let mut _7: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36]; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
    let mut _8: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36]; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
    let mut _9: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36]; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
    scope 1 {
        debug self => _3;                // in scope 1 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:27: 7:32
    }

    bb0: {
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36]); // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
        switchInt(move _6) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36]); // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:27: 7:32
        _3 = ((*_8).0: &Test);           // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:27: 7:32
        _4 = const ();                   // scope 1 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
        _0 = Poll::<()>::Ready(move _4); // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:36: 7:36
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36]); // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:36: 7:36
        discriminant((*_9)) = 1;         // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:36: 7:36
        return;                          // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:36: 7:36
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:7:34: 7:36
    }
}

fn <impl at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:6:1: 6:10>::with(_1: &mut Test, _2: &str) -> &mut Test {
    debug self => _1;                    // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:9:13: 9:22
    debug s => _2;                       // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:9:24: 9:25
    let mut _0: &mut Test;               // return place in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:9:36: 9:45
    let mut _3: &mut Test;               // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:11:9: 11:13
    let mut _4: std::string::String;     // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:10:18: 10:26
    let mut _5: &str;                    // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:10:18: 10:26

    bb0: {
        _5 = _2;                         // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:10:18: 10:26
        _4 = <&str as Into<String>>::into(move _5) -> bb1; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:10:18: 10:26
                                         // mir::Constant
                                         // + span: ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:10:20: 10:24
                                         // + literal: Const { ty: fn(&str) -> String {<&str as Into<String>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        drop(((*_1).0: std::string::String)) -> [return: bb3, unwind: bb2]; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:10:9: 10:15
    }

    bb2 (cleanup): {
        ((*_1).0: std::string::String) = move _4; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:10:9: 10:15
        resume;                          // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:9:5: 12:6
    }

    bb3: {
        ((*_1).0: std::string::String) = move _4; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:10:9: 10:15
        _3 = &mut (*_1);                 // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:11:9: 11:13
        _0 = &mut (*_3);                 // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:11:9: 11:13
        return;                          // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:12:6: 12:6
    }
}

fn test() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 15:17
    let mut _1: [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2

    bb0: {
        _1 = [generator@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2 (#0)]; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
                                         // generator
                                         // + def_id: DefId(0:11 ~ issue_63832_await_short_temporary_lifetime_1[711c]::test::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     for<'a, 'b, 'c, 'd> {std::future::ResumeTy, &'a str, std::string::String, &'b mut Test, Test, &'c Test, impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]>(move _1) -> bb1; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
                                         // mir::Constant
                                         // + span: ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]) -> [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2] {identity_future::<(), [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:17:2: 17:2
    }
}

fn test::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _24;          // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    let mut _3: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:52
    let mut _5: &Test;                   // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:52
    let _6: &mut Test;                   // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:37
    let mut _7: &mut Test;               // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:37
    let mut _8: std::string::String;     // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:10: 16:24
    let mut _9: &str;                    // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:10: 16:24
    let _10: &str;                       // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:10: 16:12
    let mut _11: &str;                   // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:31: 16:36
    let _12: &str;                       // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:31: 16:36
    let mut _13: std::task::Poll<()>;    // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
    let mut _14: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
    let mut _15: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
    let mut _16: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
    let mut _17: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:58
    let mut _18: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:58
    let mut _19: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
    let mut _20: isize;                  // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
    let mut _22: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
    let mut _23: ();                     // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    let mut _24: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    let mut _25: u32;                    // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    let mut _26: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    let mut _27: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    let mut _28: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    let mut _29: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    let mut _30: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    let mut _31: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    let mut _32: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    let mut _33: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    let mut _34: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    let mut _35: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]; // in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2])) as variant#3).1: impl std::future::Future<Output = ()>); // in scope 1 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
        let _21: ();                     // in scope 1 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:58
        scope 2 {
        }
        scope 3 {
            debug result => _21;         // in scope 3 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:58
        }
    }

    bb0: {
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]); // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
        _25 = discriminant((*_26));      // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
        switchInt(move _25) -> [0: bb1, 1: bb17, 2: bb16, 3: bb15, otherwise: bb18]; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    }

    bb1: {
        _24 = move _2;                   // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
        _10 = const "";                  // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:10: 16:12
                                         // mir::Constant
                                         // + span: ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:10: 16:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = _10;                        // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:10: 16:24
        _8 = <str as ToString>::to_string(move _9) -> [return: bb2, unwind: bb14]; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:10: 16:24
                                         // mir::Constant
                                         // + span: ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:13: 16:22
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _27 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]); // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:25
        (((*_27) as variant#3).0: Test) = Test(move _8); // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:25
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]); // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:37
        _7 = &mut (((*_28) as variant#3).0: Test); // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:37
        _12 = const "123";               // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:31: 16:36
                                         // mir::Constant
                                         // + span: ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:31: 16:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:31: 16:36
        _6 = Test::with(move _7, move _11) -> [return: bb3, unwind: bb13]; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:37
                                         // mir::Constant
                                         // + span: ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:26: 16:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Test, &'b str) -> &'a mut Test {Test::with}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = &(*_6);                     // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:52
        _4 = Test::borrow_async(move _5) -> [return: bb4, unwind: bb13]; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:52
                                         // mir::Constant
                                         // + span: ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:38: 16:50
                                         // + literal: Const { ty: for<'a> fn(&'a Test) -> impl Future<Output = ()> {Test::borrow_async}, val: Value(<ZST>) }
    }

    bb4: {
        _3 = <impl Future<Output = ()> as IntoFuture>::into_future(move _4) -> [return: bb5, unwind: bb13]; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
                                         // mir::Constant
                                         // + span: ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb5: {
        _29 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]); // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
        (((*_29) as variant#3).1: impl std::future::Future<Output = ()>) = move _3; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
        goto -> bb6;                     // scope 1 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
    }

    bb6: {
        _30 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]); // scope 2 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
        _16 = &mut (((*_30) as variant#3).1: impl std::future::Future<Output = ()>); // scope 2 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
        _15 = &mut (*_16);               // scope 2 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
        _14 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _15) -> [return: bb7, unwind: bb13]; // scope 2 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
                                         // mir::Constant
                                         // + span: ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb7: {
        _19 = _24;                       // scope 2 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
        _18 = move _19;                  // scope 2 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:58
        _17 = &mut (*_18);               // scope 2 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:58
        _13 = <impl Future<Output = ()> as Future>::poll(move _14, move _17) -> [return: bb8, unwind: bb13]; // scope 2 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
                                         // mir::Constant
                                         // + span: ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb8: {
        _20 = discriminant(_13);         // scope 1 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
        switchInt(move _20) -> [0: bb11, 1: bb9, otherwise: bb10]; // scope 1 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
    }

    bb9: {
        _0 = Poll::<()>::Pending;        // scope 1 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
        _31 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]); // scope 1 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
        discriminant((*_31)) = 3;        // scope 1 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
        return;                          // scope 1 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
    }

    bb10: {
        unreachable;                     // scope 1 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
    }

    bb11: {
        _21 = ((_13 as Ready).0: ());    // scope 1 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:5: 16:58
        _32 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]); // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:58: 16:59
        drop((((*_32) as variant#3).0: Test)) -> [return: bb12, unwind: bb14]; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:58: 16:59
    }

    bb12: {
        _23 = const ();                  // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
        _0 = Poll::<()>::Ready(move _23); // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:17:2: 17:2
        _33 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]); // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:17:2: 17:2
        discriminant((*_33)) = 1;        // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:17:2: 17:2
        return;                          // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:17:2: 17:2
    }

    bb13 (cleanup): {
        _34 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]); // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:58: 16:59
        drop((((*_34) as variant#3).0: Test)) -> bb14; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:58: 16:59
    }

    bb14 (cleanup): {
        _35 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2]); // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
        discriminant((*_35)) = 2;        // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
        resume;                          // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    }

    bb15: {
        _22 = move _2;                   // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
        _24 = move _22;                  // scope 1 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
        goto -> bb6;                     // scope 1 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:16:52: 16:58
    }

    bb16: {
        assert(const false, "`async fn` resumed after panicking") -> bb16; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    }

    bb17: {
        assert(const false, "`async fn` resumed after completion") -> bb17; // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    }

    bb18: {
        unreachable;                     // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:15:17: 17:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:19:11: 19:11

    bb0: {
        return;                          // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:19:14: 19:14
    }
}

fn Test(_1: String) -> Test {
    let mut _0: Test;                    // return place in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:4:1: 4:12

    bb0: {
        _0 = Test(move _1);              // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:4:1: 4:12
        return;                          // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:4:1: 4:12
    }
}

// MIR FOR CTFE
fn Test(_1: String) -> Test {
    let mut _0: Test;                    // return place in scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:4:1: 4:12

    bb0: {
        _0 = Test(move _1);              // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:4:1: 4:12
        return;                          // scope 0 at ui/async-await/issue-63832-await-short-temporary-lifetime-1.rs:4:1: 4:12
    }
}
