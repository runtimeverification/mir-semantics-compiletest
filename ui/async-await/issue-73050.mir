// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issue-73050.rs:5:20: 5:20
    let mut _1: [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]; // in scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2

    bb0: {
        _1 = [generator@ui/async-await/issue-73050.rs:5:20: 8:2 (#0)]; // scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
                                         // generator
                                         // + def_id: DefId(0:5 ~ issue_73050[bc98]::foo::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     for<'a> {std::future::ResumeTy, [u8; 5], &'a mut [u8; 5], impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]>(move _1) -> bb1; // scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
                                         // mir::Constant
                                         // + span: ui/async-await/issue-73050.rs:5:20: 8:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]) -> [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2] {identity_future::<(), [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issue-73050.rs:8:2: 8:2
    }
}

fn foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _17;          // in scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    let _3: &mut [u8; 5];                // in scope 0 at ui/async-await/issue-73050.rs:6:9: 6:14
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-73050.rs:7:10: 7:16
    let mut _5: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-73050.rs:7:5: 7:10
    let mut _6: std::task::Poll<()>;     // in scope 0 at ui/async-await/issue-73050.rs:7:10: 7:16
    let mut _7: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/issue-73050.rs:7:10: 7:16
    let mut _8: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-73050.rs:7:10: 7:16
    let mut _9: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/issue-73050.rs:7:10: 7:16
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-73050.rs:7:5: 7:16
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-73050.rs:7:5: 7:16
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-73050.rs:7:10: 7:16
    let mut _13: isize;                  // in scope 0 at ui/async-await/issue-73050.rs:7:10: 7:16
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-73050.rs:7:10: 7:16
    let mut _16: ();                     // in scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    let mut _17: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    let mut _18: u32;                    // in scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    let mut _19: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]; // in scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    let mut _20: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]; // in scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    let mut _21: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]; // in scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    let mut _22: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]; // in scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    let mut _23: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]; // in scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    let mut _24: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]; // in scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    let mut _25: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]; // in scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    let mut _26: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]; // in scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    scope 1 {
        debug _data => _3;               // in scope 1 at ui/async-await/issue-73050.rs:6:9: 6:14
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2])) as variant#3).1: impl std::future::Future<Output = ()>); // in scope 2 at ui/async-await/issue-73050.rs:7:10: 7:16
            let _14: ();                 // in scope 2 at ui/async-await/issue-73050.rs:7:5: 7:16
            scope 3 {
            }
            scope 4 {
                debug result => _14;     // in scope 4 at ui/async-await/issue-73050.rs:7:5: 7:16
            }
        }
    }

    bb0: {
        _19 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]); // scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
        _18 = discriminant((*_19));      // scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
        switchInt(move _18) -> [0: bb1, 1: bb13, 2: bb12, 3: bb11, otherwise: bb14]; // scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    }

    bb1: {
        _17 = move _2;                   // scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
        _20 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]); // scope 0 at ui/async-await/issue-73050.rs:6:22: 6:38
        (((*_20) as variant#3).0: [u8; 5]) = [const 0_u8; 5]; // scope 0 at ui/async-await/issue-73050.rs:6:22: 6:38
        _21 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]); // scope 0 at ui/async-await/issue-73050.rs:6:17: 6:38
        _3 = &mut (((*_21) as variant#3).0: [u8; 5]); // scope 0 at ui/async-await/issue-73050.rs:6:17: 6:38
        _5 = bar() -> [return: bb2, unwind: bb10]; // scope 1 at ui/async-await/issue-73050.rs:7:5: 7:10
                                         // mir::Constant
                                         // + span: ui/async-await/issue-73050.rs:7:5: 7:8
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {bar}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = <impl Future<Output = ()> as IntoFuture>::into_future(move _5) -> [return: bb3, unwind: bb10]; // scope 1 at ui/async-await/issue-73050.rs:7:10: 7:16
                                         // mir::Constant
                                         // + span: ui/async-await/issue-73050.rs:7:10: 7:16
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]); // scope 1 at ui/async-await/issue-73050.rs:7:10: 7:16
        (((*_22) as variant#3).1: impl std::future::Future<Output = ()>) = move _4; // scope 1 at ui/async-await/issue-73050.rs:7:10: 7:16
        goto -> bb4;                     // scope 2 at ui/async-await/issue-73050.rs:7:10: 7:16
    }

    bb4: {
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]); // scope 3 at ui/async-await/issue-73050.rs:7:10: 7:16
        _9 = &mut (((*_23) as variant#3).1: impl std::future::Future<Output = ()>); // scope 3 at ui/async-await/issue-73050.rs:7:10: 7:16
        _8 = &mut (*_9);                 // scope 3 at ui/async-await/issue-73050.rs:7:10: 7:16
        _7 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _8) -> [return: bb5, unwind: bb10]; // scope 3 at ui/async-await/issue-73050.rs:7:10: 7:16
                                         // mir::Constant
                                         // + span: ui/async-await/issue-73050.rs:7:10: 7:16
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = _17;                       // scope 3 at ui/async-await/issue-73050.rs:7:10: 7:16
        _11 = move _12;                  // scope 3 at ui/async-await/issue-73050.rs:7:5: 7:16
        _10 = &mut (*_11);               // scope 3 at ui/async-await/issue-73050.rs:7:5: 7:16
        _6 = <impl Future<Output = ()> as Future>::poll(move _7, move _10) -> [return: bb6, unwind: bb10]; // scope 3 at ui/async-await/issue-73050.rs:7:10: 7:16
                                         // mir::Constant
                                         // + span: ui/async-await/issue-73050.rs:7:10: 7:16
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = discriminant(_6);          // scope 2 at ui/async-await/issue-73050.rs:7:10: 7:16
        switchInt(move _13) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at ui/async-await/issue-73050.rs:7:10: 7:16
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/issue-73050.rs:7:10: 7:16
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]); // scope 2 at ui/async-await/issue-73050.rs:7:10: 7:16
        discriminant((*_24)) = 3;        // scope 2 at ui/async-await/issue-73050.rs:7:10: 7:16
        return;                          // scope 2 at ui/async-await/issue-73050.rs:7:10: 7:16
    }

    bb8: {
        unreachable;                     // scope 2 at ui/async-await/issue-73050.rs:7:10: 7:16
    }

    bb9: {
        _14 = ((_6 as Ready).0: ());     // scope 2 at ui/async-await/issue-73050.rs:7:5: 7:16
        _16 = _14;                       // scope 4 at ui/async-await/issue-73050.rs:7:5: 7:16
        _0 = Poll::<()>::Ready(move _16); // scope 0 at ui/async-await/issue-73050.rs:8:2: 8:2
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]); // scope 0 at ui/async-await/issue-73050.rs:8:2: 8:2
        discriminant((*_25)) = 1;        // scope 0 at ui/async-await/issue-73050.rs:8:2: 8:2
        return;                          // scope 0 at ui/async-await/issue-73050.rs:8:2: 8:2
    }

    bb10 (cleanup): {
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-73050.rs:5:20: 8:2]); // scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
        discriminant((*_26)) = 2;        // scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
        resume;                          // scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    }

    bb11: {
        _15 = move _2;                   // scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
        _17 = move _15;                  // scope 2 at ui/async-await/issue-73050.rs:7:10: 7:16
        goto -> bb4;                     // scope 2 at ui/async-await/issue-73050.rs:7:10: 7:16
    }

    bb12: {
        assert(const false, "`async fn` resumed after panicking") -> bb12; // scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    }

    bb13: {
        assert(const false, "`async fn` resumed after completion") -> bb13; // scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    }

    bb14: {
        unreachable;                     // scope 0 at ui/async-await/issue-73050.rs:5:20: 8:2
    }
}

foo::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/async-await/issue-73050.rs:6:28: 6:37
    let mut _1: (usize, bool);           // in scope 0 at ui/async-await/issue-73050.rs:6:30: 6:35

    bb0: {
        _1 = CheckedAdd(const 1_usize, const 4_usize); // scope 0 at ui/async-await/issue-73050.rs:6:30: 6:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 1_usize, const 4_usize) -> bb1; // scope 0 at ui/async-await/issue-73050.rs:6:30: 6:35
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/async-await/issue-73050.rs:6:30: 6:35
        return;                          // scope 0 at ui/async-await/issue-73050.rs:6:28: 6:37
    }
}

fn bar() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/issue-73050.rs:10:16: 10:16
    let mut _1: [async fn body@ui/async-await/issue-73050.rs:10:16: 10:18]; // in scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18

    bb0: {
        _1 = [generator@ui/async-await/issue-73050.rs:10:16: 10:18 (#0)]; // scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18
                                         // generator
                                         // + def_id: DefId(0:8 ~ issue_73050[bc98]::bar::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/issue-73050.rs:10:16: 10:18]>(move _1) -> bb1; // scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18
                                         // mir::Constant
                                         // + span: ui/async-await/issue-73050.rs:10:16: 10:18
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/issue-73050.rs:10:16: 10:18]) -> [async fn body@ui/async-await/issue-73050.rs:10:16: 10:18] {identity_future::<(), [async fn body@ui/async-await/issue-73050.rs:10:16: 10:18]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/issue-73050.rs:10:18: 10:18
    }
}

fn bar::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/issue-73050.rs:10:16: 10:18]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18
    let mut _3: ();                      // in scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18
    let mut _5: u32;                     // in scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18
    let mut _6: &mut [async fn body@ui/async-await/issue-73050.rs:10:16: 10:18]; // in scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18
    let mut _7: &mut [async fn body@ui/async-await/issue-73050.rs:10:16: 10:18]; // in scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18

    bb0: {
        _6 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-73050.rs:10:16: 10:18]); // scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18
        _3 = const ();                   // scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/issue-73050.rs:10:18: 10:18
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/issue-73050.rs:10:16: 10:18]); // scope 0 at ui/async-await/issue-73050.rs:10:18: 10:18
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/issue-73050.rs:10:18: 10:18
        return;                          // scope 0 at ui/async-await/issue-73050.rs:10:18: 10:18
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/issue-73050.rs:10:16: 10:18
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/issue-73050.rs:12:11: 12:11

    bb0: {
        return;                          // scope 0 at ui/async-await/issue-73050.rs:12:13: 12:13
    }
}
