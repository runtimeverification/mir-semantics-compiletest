// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const BIG_FUT_SIZE: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:19:21: 19:26

    bb0: {
        _0 = const 1024_usize;           // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:19:29: 19:33
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:19:1: 19:34
    }
}

Big::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:20:54: 20:66

    bb0: {
        _0 = const _;                    // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:20:54: 20:66
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:20:54: 20:66
    }
}

fn <impl at ui/async-await/async-fn-size-uninit-locals.rs:22:1: 22:9>::new() -> Big {
    let mut _0: Big;                     // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:23:17: 23:21
    let mut _1: [u8; 1024];              // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:24:13: 24:30

    bb0: {
        _1 = [const 0_u8; 1024];         // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:24:13: 24:30
        _0 = Big(move _1);               // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:24:9: 24:31
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:25:6: 25:6
    }
}

<impl at ui/async-await/async-fn-size-uninit-locals.rs:22:1: 22:9>::new::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:24:17: 24:29

    bb0: {
        _0 = const _;                    // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:24:17: 24:29
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:24:17: 24:29
    }
}

fn <impl at ui/async-await/async-fn-size-uninit-locals.rs:28:1: 28:18>::drop(_1: &mut Big) -> () {
    debug self => _1;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:29:13: 29:22
    let mut _0: ();                      // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:29:24: 29:24

    bb0: {
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:29:26: 29:26
    }
}

fn <impl at ui/async-await/async-fn-size-uninit-locals.rs:39:1: 39:23>::poll(_1: Pin<&mut Joiner>, _2: &mut Context<'_>) -> Poll<()> {
    debug self => _1;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:42:13: 42:17
    debug _ctx => _2;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:42:35: 42:39
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:42:62: 42:80

    bb0: {
        _0 = const Poll::<()>::Ready(()); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:43:9: 43:24
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:43:9: 43:24
                                         // + literal: Const { ty: Poll<()>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:44:6: 44:6
    }
}

fn noop() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:47:11: 47:11

    bb0: {
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:47:13: 47:13
    }
}

fn fut() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:16
    let mut _1: [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18

    bb0: {
        _1 = [generator@ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18 (#0)]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18
                                         // generator
                                         // + def_id: DefId(0:27 ~ async_fn_size_uninit_locals[4903]::fut::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18]>(move _1) -> bb1; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18]) -> [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18] {identity_future::<(), [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:18: 48:18
    }
}

fn fut::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18
    let mut _3: ();                      // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18
    let mut _5: u32;                     // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18
    let mut _6: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18
    let mut _7: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18

    bb0: {
        _6 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18
        _3 = const ();                   // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:18: 48:18
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:18: 48:18
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:18: 48:18
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:18: 48:18
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:48:16: 48:18
    }
}

fn single() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 50:19
    let mut _1: [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2

    bb0: {
        _1 = [generator@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2 (#0)]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
                                         // generator
                                         // + def_id: DefId(0:29 ~ async_fn_size_uninit_locals[4903]::single::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, Big, impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]>(move _1) -> bb1; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]) -> [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2] {identity_future::<(), [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:54:2: 54:2
    }
}

fn single::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _18;          // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
    let _3: Big;                         // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:51:9: 51:10
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
    let mut _5: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:52:5: 52:10
    let mut _6: std::task::Poll<()>;     // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
    let mut _7: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
    let mut _8: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
    let mut _9: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:52:5: 52:16
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:52:5: 52:16
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
    let mut _13: isize;                  // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
    let mut _16: Big;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:53:9: 53:19
    let mut _17: ();                     // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
    let mut _18: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
    let mut _19: u32;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
    let mut _20: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
    let mut _21: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
    let mut _22: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
    let mut _23: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
    let mut _24: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
    let mut _25: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:51:9: 51:10
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2])) as variant#3).0: impl std::future::Future<Output = ()>); // in scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
            let _14: ();                 // in scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:52:5: 52:16
            scope 3 {
            }
            scope 4 {
                debug result => _14;     // in scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:52:5: 52:16
            }
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
        _19 = discriminant((*_20));      // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
        switchInt(move _19) -> [0: bb1, 1: bb15, 2: bb14, 3: bb13, otherwise: bb16]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
    }

    bb1: {
        _18 = move _2;                   // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
        _5 = fut() -> [return: bb2, unwind: bb12]; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:52:5: 52:10
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:52:5: 52:8
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {fut}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = <impl Future<Output = ()> as IntoFuture>::into_future(move _5) -> [return: bb3, unwind: bb12]; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _21 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]); // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
        (((*_21) as variant#3).0: impl std::future::Future<Output = ()>) = move _4; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
        goto -> bb4;                     // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
    }

    bb4: {
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
        _9 = &mut (((*_22) as variant#3).0: impl std::future::Future<Output = ()>); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
        _8 = &mut (*_9);                 // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
        _7 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _8) -> [return: bb5, unwind: bb12]; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = _18;                       // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
        _11 = move _12;                  // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:52:5: 52:16
        _10 = &mut (*_11);               // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:52:5: 52:16
        _6 = <impl Future<Output = ()> as Future>::poll(move _7, move _10) -> [return: bb6, unwind: bb12]; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = discriminant(_6);          // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
        switchInt(move _13) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]); // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
        discriminant((*_23)) = 3;        // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
        return;                          // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
    }

    bb8: {
        unreachable;                     // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
    }

    bb9: {
        _14 = ((_6 as Ready).0: ());     // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:52:5: 52:16
        _16 = Big::new() -> [return: bb10, unwind: bb12]; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:53:9: 53:19
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:53:9: 53:17
                                         // + literal: Const { ty: fn() -> Big {Big::new}, val: Value(<ZST>) }
    }

    bb10: {
        _3 = move _16;                   // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:53:5: 53:6
        _17 = const ();                  // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
        drop(_3) -> [return: bb11, unwind: bb12]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:54:1: 54:2
    }

    bb11: {
        _0 = Poll::<()>::Ready(move _17); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:54:2: 54:2
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:54:2: 54:2
        discriminant((*_24)) = 1;        // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:54:2: 54:2
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:54:2: 54:2
    }

    bb12 (cleanup): {
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
        discriminant((*_25)) = 2;        // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
        resume;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
    }

    bb13: {
        _15 = move _2;                   // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
        _18 = move _15;                  // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
        goto -> bb4;                     // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:52:10: 52:16
    }

    bb14: {
        assert(const false, "`async fn` resumed after panicking") -> bb14; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
    }

    bb15: {
        assert(const false, "`async fn` resumed after completion") -> bb15; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
    }

    bb16: {
        unreachable;                     // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:50:19: 54:2
    }
}

fn single_with_noop() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 56:29
    let mut _1: [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2

    bb0: {
        _1 = [generator@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2 (#0)]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
                                         // generator
                                         // + def_id: DefId(0:31 ~ async_fn_size_uninit_locals[4903]::single_with_noop::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, Big, impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]>(move _1) -> bb1; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]) -> [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2] {identity_future::<(), [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:62:2: 62:2
    }
}

fn single_with_noop::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _20;          // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    let _3: Big;                         // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:57:9: 57:10
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
    let mut _5: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:58:5: 58:10
    let mut _6: std::task::Poll<()>;     // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
    let mut _7: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
    let mut _8: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
    let mut _9: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:58:5: 58:16
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:58:5: 58:16
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
    let mut _13: isize;                  // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
    let _16: ();                         // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:59:5: 59:11
    let mut _17: Big;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:60:9: 60:19
    let _18: ();                         // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:61:5: 61:11
    let mut _19: ();                     // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    let mut _20: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    let mut _21: u32;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    let mut _22: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    let mut _23: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    let mut _24: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    let mut _25: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    let mut _26: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    let mut _27: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    let mut _28: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    let mut _29: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    let mut _30: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    let mut _31: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    let mut _32: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:57:9: 57:10
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2])) as variant#3).0: impl std::future::Future<Output = ()>); // in scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
            let _14: ();                 // in scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:58:5: 58:16
            scope 3 {
            }
            scope 4 {
                debug result => _14;     // in scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:58:5: 58:16
            }
        }
    }

    bb0: {
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
        _21 = discriminant((*_22));      // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
        switchInt(move _21) -> [0: bb1, 1: bb19, 2: bb18, 3: bb17, otherwise: bb20]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    }

    bb1: {
        _20 = move _2;                   // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:57:9: 57:10
        (((*_23) as variant#3).1: bool) = const false; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:57:9: 57:10
        _5 = fut() -> [return: bb2, unwind: bb16]; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:58:5: 58:10
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:58:5: 58:8
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {fut}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = <impl Future<Output = ()> as IntoFuture>::into_future(move _5) -> [return: bb3, unwind: bb16]; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]); // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
        (((*_24) as variant#3).0: impl std::future::Future<Output = ()>) = move _4; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
        goto -> bb4;                     // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
    }

    bb4: {
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
        _9 = &mut (((*_25) as variant#3).0: impl std::future::Future<Output = ()>); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
        _8 = &mut (*_9);                 // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
        _7 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _8) -> [return: bb5, unwind: bb16]; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = _20;                       // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
        _11 = move _12;                  // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:58:5: 58:16
        _10 = &mut (*_11);               // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:58:5: 58:16
        _6 = <impl Future<Output = ()> as Future>::poll(move _7, move _10) -> [return: bb6, unwind: bb16]; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = discriminant(_6);          // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
        switchInt(move _13) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]); // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
        discriminant((*_26)) = 3;        // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
        return;                          // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
    }

    bb8: {
        unreachable;                     // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
    }

    bb9: {
        _14 = ((_6 as Ready).0: ());     // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:58:5: 58:16
        _16 = noop() -> [return: bb10, unwind: bb16]; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:59:5: 59:11
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:59:5: 59:9
                                         // + literal: Const { ty: fn() {noop}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = Big::new() -> [return: bb14, unwind: bb16]; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:60:9: 60:19
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:60:9: 60:17
                                         // + literal: Const { ty: fn() -> Big {Big::new}, val: Value(<ZST>) }
    }

    bb11: {
        _19 = const ();                  // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
        drop(_3) -> [return: bb12, unwind: bb13]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:62:1: 62:2
    }

    bb12: {
        _27 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:62:1: 62:2
        (((*_27) as variant#3).1: bool) = const false; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:62:1: 62:2
        _0 = Poll::<()>::Ready(move _19); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:62:2: 62:2
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:62:2: 62:2
        discriminant((*_28)) = 1;        // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:62:2: 62:2
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:62:2: 62:2
    }

    bb13 (cleanup): {
        _29 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:62:1: 62:2
        (((*_29) as variant#3).1: bool) = const false; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:62:1: 62:2
        _32 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
        discriminant((*_32)) = 2;        // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
        resume;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    }

    bb14: {
        _30 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]); // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:60:5: 60:6
        (((*_30) as variant#3).1: bool) = const true; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:60:5: 60:6
        _3 = move _17;                   // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:60:5: 60:6
        _18 = noop() -> [return: bb11, unwind: bb16]; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:61:5: 61:11
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:61:5: 61:9
                                         // + literal: Const { ty: fn() {noop}, val: Value(<ZST>) }
    }

    bb15 (cleanup): {
        drop(_3) -> bb13;                // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:62:1: 62:2
    }

    bb16 (cleanup): {
        _31 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:62:1: 62:2
        switchInt((((*_31) as variant#3).1: bool)) -> [0: bb13, otherwise: bb15]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:62:1: 62:2
    }

    bb17: {
        _15 = move _2;                   // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
        _20 = move _15;                  // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
        goto -> bb4;                     // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:58:10: 58:16
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    }

    bb20: {
        unreachable;                     // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:56:29: 62:2
    }
}

fn joined() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 64:19
    let mut _1: [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2

    bb0: {
        _1 = [generator@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2 (#0)]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
                                         // generator
                                         // + def_id: DefId(0:33 ~ async_fn_size_uninit_locals[4903]::joined::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, Joiner, Big, impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]>(move _1) -> bb1; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]) -> [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2] {identity_future::<(), [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:72:2: 72:2
    }
}

fn joined::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _24;          // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let _3: Joiner;                      // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:65:9: 65:15
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
    let mut _5: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:70:5: 70:10
    let mut _6: std::task::Poll<()>;     // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
    let mut _7: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
    let mut _8: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
    let mut _9: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:70:5: 70:16
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:70:5: 70:16
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
    let mut _13: isize;                  // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
    let mut _16: Joiner;                 // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:71:14: 71:59
    let mut _17: std::option::Option<Big>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:71:26: 71:33
    let mut _18: Big;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:71:31: 71:32
    let mut _19: std::option::Option<Big>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:71:38: 71:45
    let mut _20: Big;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:71:43: 71:44
    let mut _21: std::option::Option<Big>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:71:50: 71:57
    let mut _22: Big;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:71:55: 71:56
    let mut _23: ();                     // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _24: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _25: u32;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _26: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _27: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _28: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _29: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _30: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _31: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _32: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _33: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _34: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _35: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _36: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _37: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _38: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _39: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    let mut _40: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    scope 1 {
        debug joiner => _3;              // in scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:65:9: 65:15
        scope 2 {
            debug a => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2])) as variant#3).0: Big); // in scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:66:9: 66:10
            scope 3 {
                debug b => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2])) as variant#3).1: Big); // in scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:67:9: 67:10
                scope 4 {
                    debug c => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2])) as variant#3).2: Big); // in scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:68:9: 68:10
                    scope 5 {
                        debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2])) as variant#3).3: impl std::future::Future<Output = ()>); // in scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
                        let _14: ();     // in scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:70:5: 70:16
                        scope 6 {
                        }
                        scope 7 {
                            debug result => _14; // in scope 7 at ui/async-await/async-fn-size-uninit-locals.rs:70:5: 70:16
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
        _25 = discriminant((*_26));      // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
        switchInt(move _25) -> [0: bb1, 1: bb20, 2: bb19, 3: bb18, otherwise: bb21]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    }

    bb1: {
        _24 = move _2;                   // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
        _27 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]); // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:66:13: 66:23
        (((*_27) as variant#3).0: Big) = Big::new() -> [return: bb2, unwind: bb17]; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:66:13: 66:23
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:66:13: 66:21
                                         // + literal: Const { ty: fn() -> Big {Big::new}, val: Value(<ZST>) }
    }

    bb2: {
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]); // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:67:13: 67:23
        (((*_28) as variant#3).1: Big) = Big::new() -> [return: bb3, unwind: bb16]; // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:67:13: 67:23
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:67:13: 67:21
                                         // + literal: Const { ty: fn() -> Big {Big::new}, val: Value(<ZST>) }
    }

    bb3: {
        _29 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:68:13: 68:23
        (((*_29) as variant#3).2: Big) = Big::new() -> [return: bb4, unwind: bb15]; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:68:13: 68:23
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:68:13: 68:21
                                         // + literal: Const { ty: fn() -> Big {Big::new}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = fut() -> [return: bb5, unwind: bb14]; // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:70:5: 70:10
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:70:5: 70:8
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {fut}, val: Value(<ZST>) }
    }

    bb5: {
        _4 = <impl Future<Output = ()> as IntoFuture>::into_future(move _5) -> [return: bb6, unwind: bb14]; // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb6: {
        _30 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
        (((*_30) as variant#3).3: impl std::future::Future<Output = ()>) = move _4; // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
        goto -> bb7;                     // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
    }

    bb7: {
        _31 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]); // scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
        _9 = &mut (((*_31) as variant#3).3: impl std::future::Future<Output = ()>); // scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
        _8 = &mut (*_9);                 // scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
        _7 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _8) -> [return: bb8, unwind: bb14]; // scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb8: {
        _12 = _24;                       // scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
        _11 = move _12;                  // scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:70:5: 70:16
        _10 = &mut (*_11);               // scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:70:5: 70:16
        _6 = <impl Future<Output = ()> as Future>::poll(move _7, move _10) -> [return: bb9, unwind: bb14]; // scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb9: {
        _13 = discriminant(_6);          // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
        switchInt(move _13) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
    }

    bb10: {
        _0 = Poll::<()>::Pending;        // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
        _32 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]); // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
        discriminant((*_32)) = 3;        // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
        return;                          // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
    }

    bb11: {
        unreachable;                     // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
    }

    bb12: {
        _14 = ((_6 as Ready).0: ());     // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:70:5: 70:16
        _33 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:71:31: 71:32
        _18 = move (((*_33) as variant#3).0: Big); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:71:31: 71:32
        _17 = Option::<Big>::Some(move _18); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:71:26: 71:33
        _34 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:71:43: 71:44
        _20 = move (((*_34) as variant#3).1: Big); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:71:43: 71:44
        _19 = Option::<Big>::Some(move _20); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:71:38: 71:45
        _35 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:71:55: 71:56
        _22 = move (((*_35) as variant#3).2: Big); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:71:55: 71:56
        _21 = Option::<Big>::Some(move _22); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:71:50: 71:57
        _16 = Joiner { a: move _17, b: move _19, c: move _21 }; // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:71:14: 71:59
        _3 = move _16;                   // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:71:5: 71:11
        _23 = const ();                  // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
        drop(_3) -> [return: bb13, unwind: bb17]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:72:1: 72:2
    }

    bb13: {
        _0 = Poll::<()>::Ready(move _23); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:72:2: 72:2
        _36 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:72:2: 72:2
        discriminant((*_36)) = 1;        // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:72:2: 72:2
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:72:2: 72:2
    }

    bb14 (cleanup): {
        _37 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:72:1: 72:2
        drop((((*_37) as variant#3).2: Big)) -> bb15; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:72:1: 72:2
    }

    bb15 (cleanup): {
        _38 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]); // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:72:1: 72:2
        drop((((*_38) as variant#3).1: Big)) -> bb16; // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:72:1: 72:2
    }

    bb16 (cleanup): {
        _39 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]); // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:72:1: 72:2
        drop((((*_39) as variant#3).0: Big)) -> bb17; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:72:1: 72:2
    }

    bb17 (cleanup): {
        _40 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
        discriminant((*_40)) = 2;        // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
        resume;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    }

    bb18: {
        _15 = move _2;                   // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
        _24 = move _15;                  // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
        goto -> bb7;                     // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:70:10: 70:16
    }

    bb19: {
        assert(const false, "`async fn` resumed after panicking") -> bb19; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    }

    bb20: {
        assert(const false, "`async fn` resumed after completion") -> bb20; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    }

    bb21: {
        unreachable;                     // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:64:19: 72:2
    }
}

fn joined_with_noop() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 74:29
    let mut _1: [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2

    bb0: {
        _1 = [generator@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2 (#0)]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
                                         // generator
                                         // + def_id: DefId(0:35 ~ async_fn_size_uninit_locals[4903]::joined_with_noop::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, Joiner, Big, impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]>(move _1) -> bb1; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]) -> [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2] {identity_future::<(), [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:84:2: 84:2
    }
}

fn joined_with_noop::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _26;          // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let _3: Joiner;                      // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:75:9: 75:15
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
    let mut _5: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:80:5: 80:10
    let mut _6: std::task::Poll<()>;     // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
    let mut _7: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
    let mut _8: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
    let mut _9: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:80:5: 80:16
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:80:5: 80:16
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
    let mut _13: isize;                  // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
    let mut _15: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
    let _16: ();                         // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:81:5: 81:11
    let mut _17: Joiner;                 // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:82:14: 82:59
    let mut _18: std::option::Option<Big>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:82:26: 82:33
    let mut _19: Big;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:82:31: 82:32
    let mut _20: std::option::Option<Big>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:82:38: 82:45
    let mut _21: Big;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:82:43: 82:44
    let mut _22: std::option::Option<Big>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:82:50: 82:57
    let mut _23: Big;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:82:55: 82:56
    let _24: ();                         // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:83:5: 83:11
    let mut _25: ();                     // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _26: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _27: u32;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _28: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _29: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _30: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _31: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _32: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _33: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _34: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _35: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _36: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _37: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _38: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _39: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _40: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _41: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _42: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _43: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _44: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _45: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _46: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _47: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _48: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _49: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _50: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _51: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _52: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _53: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _54: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _55: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _56: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _57: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _58: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _59: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _60: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _61: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _62: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _63: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _64: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    let mut _65: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    scope 1 {
        debug joiner => _3;              // in scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:75:9: 75:15
        scope 2 {
            debug a => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2])) as variant#3).0: Big); // in scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:76:9: 76:10
            scope 3 {
                debug b => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2])) as variant#3).1: Big); // in scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:77:9: 77:10
                scope 4 {
                    debug c => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2])) as variant#3).2: Big); // in scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:78:9: 78:10
                    scope 5 {
                        debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2])) as variant#3).3: impl std::future::Future<Output = ()>); // in scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
                        let _14: ();     // in scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:80:5: 80:16
                        scope 6 {
                        }
                        scope 7 {
                            debug result => _14; // in scope 7 at ui/async-await/async-fn-size-uninit-locals.rs:80:5: 80:16
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
        _27 = discriminant((*_28));      // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
        switchInt(move _27) -> [0: bb1, 1: bb27, 2: bb26, 3: bb25, otherwise: bb28]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    }

    bb1: {
        _26 = move _2;                   // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
        _29 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:75:9: 75:15
        (((*_29) as variant#3).5: bool) = const false; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:75:9: 75:15
        _30 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:75:9: 75:15
        (((*_30) as variant#3).6: bool) = const false; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:75:9: 75:15
        _31 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:75:9: 75:15
        (((*_31) as variant#3).4: bool) = const false; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:75:9: 75:15
        _32 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:75:9: 75:15
        (((*_32) as variant#3).7: bool) = const false; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:75:9: 75:15
        _33 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:76:13: 76:23
        (((*_33) as variant#3).0: Big) = Big::new() -> [return: bb2, unwind: bb18]; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:76:13: 76:23
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:76:13: 76:21
                                         // + literal: Const { ty: fn() -> Big {Big::new}, val: Value(<ZST>) }
    }

    bb2: {
        _34 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:77:9: 77:10
        (((*_34) as variant#3).6: bool) = const true; // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:77:9: 77:10
        _35 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:77:13: 77:23
        (((*_35) as variant#3).1: Big) = Big::new() -> [return: bb3, unwind: bb17]; // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:77:13: 77:23
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:77:13: 77:21
                                         // + literal: Const { ty: fn() -> Big {Big::new}, val: Value(<ZST>) }
    }

    bb3: {
        _36 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:78:9: 78:10
        (((*_36) as variant#3).5: bool) = const true; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:78:9: 78:10
        _37 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:78:13: 78:23
        (((*_37) as variant#3).2: Big) = Big::new() -> [return: bb4, unwind: bb16]; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:78:13: 78:23
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:78:13: 78:21
                                         // + literal: Const { ty: fn() -> Big {Big::new}, val: Value(<ZST>) }
    }

    bb4: {
        _38 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:80:5: 80:16
        (((*_38) as variant#3).4: bool) = const true; // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:80:5: 80:16
        _5 = fut() -> [return: bb5, unwind: bb21]; // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:80:5: 80:10
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:80:5: 80:8
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {fut}, val: Value(<ZST>) }
    }

    bb5: {
        _4 = <impl Future<Output = ()> as IntoFuture>::into_future(move _5) -> [return: bb6, unwind: bb21]; // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb6: {
        _39 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
        (((*_39) as variant#3).3: impl std::future::Future<Output = ()>) = move _4; // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
        goto -> bb7;                     // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
    }

    bb7: {
        _40 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
        _9 = &mut (((*_40) as variant#3).3: impl std::future::Future<Output = ()>); // scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
        _8 = &mut (*_9);                 // scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
        _7 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _8) -> [return: bb8, unwind: bb21]; // scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb8: {
        _12 = _26;                       // scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
        _11 = move _12;                  // scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:80:5: 80:16
        _10 = &mut (*_11);               // scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:80:5: 80:16
        _6 = <impl Future<Output = ()> as Future>::poll(move _7, move _10) -> [return: bb9, unwind: bb21]; // scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb9: {
        _13 = discriminant(_6);          // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
        switchInt(move _13) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
    }

    bb10: {
        _0 = Poll::<()>::Pending;        // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
        _41 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
        discriminant((*_41)) = 3;        // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
        return;                          // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
    }

    bb11: {
        unreachable;                     // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
    }

    bb12: {
        _14 = ((_6 as Ready).0: ());     // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:80:5: 80:16
        _16 = noop() -> [return: bb13, unwind: bb21]; // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:81:5: 81:11
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:81:5: 81:9
                                         // + literal: Const { ty: fn() {noop}, val: Value(<ZST>) }
    }

    bb13: {
        _42 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:31: 82:32
        (((*_42) as variant#3).6: bool) = const false; // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:31: 82:32
        _43 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:31: 82:32
        _19 = move (((*_43) as variant#3).0: Big); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:31: 82:32
        _18 = Option::<Big>::Some(move _19); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:26: 82:33
        _44 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:43: 82:44
        (((*_44) as variant#3).5: bool) = const false; // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:43: 82:44
        _45 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:43: 82:44
        _21 = move (((*_45) as variant#3).1: Big); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:43: 82:44
        _20 = Option::<Big>::Some(move _21); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:38: 82:45
        _46 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:55: 82:56
        (((*_46) as variant#3).4: bool) = const false; // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:55: 82:56
        _47 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:55: 82:56
        _23 = move (((*_47) as variant#3).2: Big); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:55: 82:56
        _22 = Option::<Big>::Some(move _23); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:50: 82:57
        _17 = Joiner { a: move _18, b: move _20, c: move _22 }; // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:14: 82:59
        _57 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:5: 82:11
        (((*_57) as variant#3).7: bool) = const true; // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:5: 82:11
        _3 = move _17;                   // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:82:5: 82:11
        _24 = noop() -> [return: bb14, unwind: bb21]; // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:83:5: 83:11
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:83:5: 83:9
                                         // + literal: Const { ty: fn() {noop}, val: Value(<ZST>) }
    }

    bb14: {
        _25 = const ();                  // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
        _48 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        (((*_48) as variant#3).4: bool) = const false; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        _49 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        (((*_49) as variant#3).5: bool) = const false; // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        _50 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        (((*_50) as variant#3).6: bool) = const false; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        drop(_3) -> [return: bb15, unwind: bb19]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
    }

    bb15: {
        _51 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        (((*_51) as variant#3).7: bool) = const false; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        _0 = Poll::<()>::Ready(move _25); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:84:2: 84:2
        _52 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:84:2: 84:2
        discriminant((*_52)) = 1;        // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:84:2: 84:2
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:84:2: 84:2
    }

    bb16 (cleanup): {
        _53 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        (((*_53) as variant#3).4: bool) = const false; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        _61 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        switchInt((((*_61) as variant#3).5: bool)) -> [0: bb17, otherwise: bb22]; // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
    }

    bb17 (cleanup): {
        _54 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        (((*_54) as variant#3).5: bool) = const false; // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        _63 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        switchInt((((*_63) as variant#3).6: bool)) -> [0: bb18, otherwise: bb23]; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
    }

    bb18 (cleanup): {
        _55 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        (((*_55) as variant#3).6: bool) = const false; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        _64 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        switchInt((((*_64) as variant#3).7: bool)) -> [0: bb19, otherwise: bb24]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
    }

    bb19 (cleanup): {
        _56 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        (((*_56) as variant#3).7: bool) = const false; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        _65 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
        discriminant((*_65)) = 2;        // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
        resume;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    }

    bb20 (cleanup): {
        _58 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        drop((((*_58) as variant#3).2: Big)) -> bb16; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
    }

    bb21 (cleanup): {
        _59 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        switchInt((((*_59) as variant#3).4: bool)) -> [0: bb16, otherwise: bb20]; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
    }

    bb22 (cleanup): {
        _60 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        drop((((*_60) as variant#3).1: Big)) -> bb17; // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
    }

    bb23 (cleanup): {
        _62 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2]); // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
        drop((((*_62) as variant#3).0: Big)) -> bb18; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
    }

    bb24 (cleanup): {
        drop(_3) -> bb19;                // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:84:1: 84:2
    }

    bb25: {
        _15 = move _2;                   // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
        _26 = move _15;                  // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
        goto -> bb7;                     // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:80:10: 80:16
    }

    bb26: {
        assert(const false, "`async fn` resumed after panicking") -> bb26; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    }

    bb27: {
        assert(const false, "`async fn` resumed after completion") -> bb27; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    }

    bb28: {
        unreachable;                     // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:74:29: 84:2
    }
}

fn join_retval() -> impl Future<Output = Joiner> {
    let mut _0: impl std::future::Future<Output = Joiner>; // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:27: 86:33
    let mut _1: [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2

    bb0: {
        _1 = [generator@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2 (#0)]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
                                         // generator
                                         // + def_id: DefId(0:37 ~ async_fn_size_uninit_locals[4903]::join_retval::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     Joiner,
                                         //     {std::future::ResumeTy, Big, impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<Joiner, [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]>(move _1) -> bb1; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]) -> [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2] {identity_future::<Joiner, [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:94:2: 94:2
    }
}

fn join_retval::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]>, _2: &mut Context<'_>) -> Poll<Joiner> {
    debug _task_context => _23;          // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _0: std::task::Poll<Joiner>; // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _3: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:91:5: 91:10
    let mut _5: std::task::Poll<()>;     // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
    let mut _6: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
    let mut _7: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
    let mut _8: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
    let mut _9: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:91:5: 91:16
    let mut _10: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:91:5: 91:16
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
    let mut _12: isize;                  // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
    let mut _14: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
    let _15: ();                         // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:92:5: 92:11
    let mut _16: std::option::Option<Big>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:93:17: 93:24
    let mut _17: Big;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:93:22: 93:23
    let mut _18: std::option::Option<Big>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:93:29: 93:36
    let mut _19: Big;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:93:34: 93:35
    let mut _20: std::option::Option<Big>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:93:41: 93:48
    let mut _21: Big;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:93:46: 93:47
    let mut _22: Joiner;                 // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _23: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _24: u32;                    // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _25: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _26: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _27: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _28: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _29: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _30: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _31: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _32: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _33: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _34: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _35: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _36: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _37: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _38: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    let mut _39: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    scope 1 {
        debug a => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2])) as variant#3).0: Big); // in scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:87:9: 87:10
        scope 2 {
            debug b => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2])) as variant#3).1: Big); // in scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:88:9: 88:10
            scope 3 {
                debug c => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2])) as variant#3).2: Big); // in scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:89:9: 89:10
                scope 4 {
                    debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2])) as variant#3).3: impl std::future::Future<Output = ()>); // in scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
                    let _13: ();         // in scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:91:5: 91:16
                    scope 5 {
                    }
                    scope 6 {
                        debug result => _13; // in scope 6 at ui/async-await/async-fn-size-uninit-locals.rs:91:5: 91:16
                    }
                }
            }
        }
    }

    bb0: {
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
        _24 = discriminant((*_25));      // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
        switchInt(move _24) -> [0: bb1, 1: bb20, 2: bb19, 3: bb18, otherwise: bb21]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    }

    bb1: {
        _23 = move _2;                   // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:87:13: 87:23
        (((*_26) as variant#3).0: Big) = Big::new() -> [return: bb2, unwind: bb17]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:87:13: 87:23
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:87:13: 87:21
                                         // + literal: Const { ty: fn() -> Big {Big::new}, val: Value(<ZST>) }
    }

    bb2: {
        _27 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]); // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:88:13: 88:23
        (((*_27) as variant#3).1: Big) = Big::new() -> [return: bb3, unwind: bb16]; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:88:13: 88:23
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:88:13: 88:21
                                         // + literal: Const { ty: fn() -> Big {Big::new}, val: Value(<ZST>) }
    }

    bb3: {
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]); // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:89:13: 89:23
        (((*_28) as variant#3).2: Big) = Big::new() -> [return: bb4, unwind: bb15]; // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:89:13: 89:23
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:89:13: 89:21
                                         // + literal: Const { ty: fn() -> Big {Big::new}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = fut() -> [return: bb5, unwind: bb14]; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:91:5: 91:10
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:91:5: 91:8
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {fut}, val: Value(<ZST>) }
    }

    bb5: {
        _3 = <impl Future<Output = ()> as IntoFuture>::into_future(move _4) -> [return: bb6, unwind: bb14]; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb6: {
        _29 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
        (((*_29) as variant#3).3: impl std::future::Future<Output = ()>) = move _3; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
        goto -> bb7;                     // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
    }

    bb7: {
        _30 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]); // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
        _8 = &mut (((*_30) as variant#3).3: impl std::future::Future<Output = ()>); // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
        _7 = &mut (*_8);                 // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
        _6 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _7) -> [return: bb8, unwind: bb14]; // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb8: {
        _11 = _23;                       // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
        _10 = move _11;                  // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:91:5: 91:16
        _9 = &mut (*_10);                // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:91:5: 91:16
        _5 = <impl Future<Output = ()> as Future>::poll(move _6, move _9) -> [return: bb9, unwind: bb14]; // scope 5 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb9: {
        _12 = discriminant(_5);          // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
        switchInt(move _12) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
    }

    bb10: {
        _0 = Poll::<Joiner>::Pending;    // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
        _31 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]); // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
        discriminant((*_31)) = 3;        // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
        return;                          // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
    }

    bb11: {
        unreachable;                     // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
    }

    bb12: {
        _13 = ((_5 as Ready).0: ());     // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:91:5: 91:16
        _15 = noop() -> [return: bb13, unwind: bb14]; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:92:5: 92:11
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:92:5: 92:9
                                         // + literal: Const { ty: fn() {noop}, val: Value(<ZST>) }
    }

    bb13: {
        _32 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:93:22: 93:23
        _17 = move (((*_32) as variant#3).0: Big); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:93:22: 93:23
        _16 = Option::<Big>::Some(move _17); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:93:17: 93:24
        _33 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:93:34: 93:35
        _19 = move (((*_33) as variant#3).1: Big); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:93:34: 93:35
        _18 = Option::<Big>::Some(move _19); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:93:29: 93:36
        _34 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:93:46: 93:47
        _21 = move (((*_34) as variant#3).2: Big); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:93:46: 93:47
        _20 = Option::<Big>::Some(move _21); // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:93:41: 93:48
        _22 = Joiner { a: move _16, b: move _18, c: move _20 }; // scope 3 at ui/async-await/async-fn-size-uninit-locals.rs:93:5: 93:50
        _0 = Poll::<Joiner>::Ready(move _22); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:94:2: 94:2
        _35 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:94:2: 94:2
        discriminant((*_35)) = 1;        // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:94:2: 94:2
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:94:2: 94:2
    }

    bb14 (cleanup): {
        _36 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]); // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:94:1: 94:2
        drop((((*_36) as variant#3).2: Big)) -> bb15; // scope 2 at ui/async-await/async-fn-size-uninit-locals.rs:94:1: 94:2
    }

    bb15 (cleanup): {
        _37 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]); // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:94:1: 94:2
        drop((((*_37) as variant#3).1: Big)) -> bb16; // scope 1 at ui/async-await/async-fn-size-uninit-locals.rs:94:1: 94:2
    }

    bb16 (cleanup): {
        _38 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:94:1: 94:2
        drop((((*_38) as variant#3).0: Big)) -> bb17; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:94:1: 94:2
    }

    bb17 (cleanup): {
        _39 = deref_copy (_1.0: &mut [async fn body@ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2]); // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
        discriminant((*_39)) = 2;        // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
        resume;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    }

    bb18: {
        _14 = move _2;                   // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
        _23 = move _14;                  // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
        goto -> bb7;                     // scope 4 at ui/async-await/async-fn-size-uninit-locals.rs:91:10: 91:16
    }

    bb19: {
        assert(const false, "`async fn` resumed after panicking") -> bb19; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    }

    bb20: {
        assert(const false, "`async fn` resumed after completion") -> bb20; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    }

    bb21: {
        unreachable;                     // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:86:34: 94:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:96:11: 96:11
    let mut _1: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: usize;                       // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:97:19: 97:51
    let mut _5: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:97:41: 97:50
    let _6: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:97:41: 97:50
    let _7: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:97:42: 97:50
    let _8: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _24: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _25: usize;                      // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:98:19: 98:61
    let mut _26: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:98:41: 98:60
    let _27: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:98:41: 98:60
    let _28: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:98:42: 98:60
    let _29: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _30: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _43: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _44: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _45: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _46: usize;                      // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:99:22: 99:54
    let mut _47: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:99:44: 99:53
    let _48: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:99:44: 99:53
    let _49: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:99:45: 99:53
    let _50: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _51: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _52: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _54: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _55: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _57: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _58: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _59: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _60: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _61: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _62: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _64: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _65: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _66: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _67: usize;                      // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:100:22: 100:64
    let mut _68: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:100:44: 100:63
    let _69: &impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:100:44: 100:63
    let _70: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:100:45: 100:63
    let _71: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _72: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _73: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _74: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _75: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _76: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _78: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _79: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _80: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _81: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _82: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _83: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _85: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _86: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _87: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _88: usize;                      // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:101:22: 101:59
    let mut _89: &impl std::future::Future<Output = Joiner>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:101:44: 101:58
    let _90: &impl std::future::Future<Output = Joiner>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:101:44: 101:58
    let _91: impl std::future::Future<Output = Joiner>; // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:101:45: 101:58
    let _92: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _93: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _94: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _95: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _96: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _97: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _99: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _100: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _101: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _102: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _103: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _104: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _105: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _106: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _107: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _108: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _109: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _110: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _29;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _30;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _35: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _35;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _50;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _51;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _56: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _56;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _71;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _72;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _77: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _77;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _92;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _93;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _98: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _98;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _110 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[4])) }
        _2 = _110;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = single() -> bb1;            // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:97:42: 97:50
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:97:42: 97:48
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {single}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_7;                        // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:97:41: 97:50
        _5 = _6;                         // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:97:41: 97:50
        _4 = std::mem::size_of_val::<impl Future<Output = ()>>(move _5) -> [return: bb2, unwind: bb30]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:97:19: 97:51
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:97:19: 97:40
                                         // + literal: Const { ty: for<'a> fn(&'a impl Future<Output = ()>) -> usize {std::mem::size_of_val::<impl Future<Output = ()>>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_1.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_1.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = const 2_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = (*_9);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<usize, usize>(move _16, move _17, move _19, move _21) -> bb30; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_7) -> bb5;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb5: {
        _109 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[3])) }
        _23 = _109;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _28 = single_with_noop() -> bb6; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:98:42: 98:60
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:98:42: 98:58
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {single_with_noop}, val: Value(<ZST>) }
    }

    bb6: {
        _27 = &_28;                      // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:98:41: 98:60
        _26 = _27;                       // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:98:41: 98:60
        _25 = std::mem::size_of_val::<impl Future<Output = ()>>(move _26) -> [return: bb7, unwind: bb29]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:98:19: 98:61
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:98:19: 98:40
                                         // + literal: Const { ty: for<'a> fn(&'a impl Future<Output = ()>) -> usize {std::mem::size_of_val::<impl Future<Output = ()>>}, val: Value(<ZST>) }
    }

    bb7: {
        _24 = &_25;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _24);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_22.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_22.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = const 3_usize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = (*_30);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = Eq(move _33, move _34);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _31 = Not(move _32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb9, otherwise: bb8]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _35 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<usize, usize>(move _37, move _38, move _40, move _42) -> bb29; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_28) -> bb10;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb10: {
        _108 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[2])) }
        _44 = _108;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _49 = joined() -> bb11;          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:99:45: 99:53
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:99:45: 99:51
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {joined}, val: Value(<ZST>) }
    }

    bb11: {
        _48 = &_49;                      // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:99:44: 99:53
        _47 = _48;                       // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:99:44: 99:53
        _46 = std::mem::size_of_val::<impl Future<Output = ()>>(move _47) -> [return: bb12, unwind: bb28]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:99:22: 99:54
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:99:22: 99:43
                                         // + literal: Const { ty: for<'a> fn(&'a impl Future<Output = ()>) -> usize {std::mem::size_of_val::<impl Future<Output = ()>>}, val: Value(<ZST>) }
    }

    bb12: {
        _45 = &_46;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _43 = (move _44, move _45);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _50 = (_43.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _51 = (_43.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _54 = const 3074_usize;          // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _55 = (*_51);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _53 = Eq(move _54, move _55);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _52 = Not(move _53);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _52) -> [0: bb14, otherwise: bb13]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _56 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _60 = _50;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _59 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _51;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = _62;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _63 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _57 = core::panicking::assert_failed::<usize, usize>(move _58, move _59, move _61, move _63) -> bb28; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_49) -> bb15;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb15: {
        _107 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _65 = _107;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _70 = joined_with_noop() -> bb16; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:100:45: 100:63
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:100:45: 100:61
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {joined_with_noop}, val: Value(<ZST>) }
    }

    bb16: {
        _69 = &_70;                      // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:100:44: 100:63
        _68 = _69;                       // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:100:44: 100:63
        _67 = std::mem::size_of_val::<impl Future<Output = ()>>(move _68) -> [return: bb17, unwind: bb27]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:100:22: 100:64
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:100:22: 100:43
                                         // + literal: Const { ty: for<'a> fn(&'a impl Future<Output = ()>) -> usize {std::mem::size_of_val::<impl Future<Output = ()>>}, val: Value(<ZST>) }
    }

    bb17: {
        _66 = &_67;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _64 = (move _65, move _66);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _71 = (_64.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _72 = (_64.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _75 = const 3078_usize;          // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _76 = (*_72);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _74 = Eq(move _75, move _76);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _73 = Not(move _74);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _73) -> [0: bb19, otherwise: bb18]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb18: {
        _77 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _81 = _71;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _80 = _81;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _83 = _72;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = _83;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _84 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _78 = core::panicking::assert_failed::<usize, usize>(move _79, move _80, move _82, move _84) -> bb27; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb19: {
        drop(_70) -> bb20;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb20: {
        _106 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _86 = _106;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _91 = join_retval() -> bb21;     // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:101:45: 101:58
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:101:45: 101:56
                                         // + literal: Const { ty: fn() -> impl Future<Output = Joiner> {join_retval}, val: Value(<ZST>) }
    }

    bb21: {
        _90 = &_91;                      // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:101:44: 101:58
        _89 = _90;                       // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:101:44: 101:58
        _88 = std::mem::size_of_val::<impl Future<Output = Joiner>>(move _89) -> [return: bb22, unwind: bb26]; // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:101:22: 101:59
                                         // mir::Constant
                                         // + span: ui/async-await/async-fn-size-uninit-locals.rs:101:22: 101:43
                                         // + literal: Const { ty: for<'a> fn(&'a impl Future<Output = Joiner>) -> usize {std::mem::size_of_val::<impl Future<Output = Joiner>>}, val: Value(<ZST>) }
    }

    bb22: {
        _87 = &_88;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _85 = (move _86, move _87);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _92 = (_85.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _93 = (_85.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _96 = const 3074_usize;          // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _97 = (*_93);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _95 = Eq(move _96, move _97);    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _94 = Not(move _95);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _94) -> [0: bb24, otherwise: bb23]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _98 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _100 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _102 = _92;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _101 = _102;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _104 = _93;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _103 = _104;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _105 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _99 = core::panicking::assert_failed::<usize, usize>(move _100, move _101, move _103, move _105) -> bb26; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb24: {
        drop(_91) -> bb25;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb25: {
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:102:2: 102:2
    }

    bb26 (cleanup): {
        drop(_91) -> bb31;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb27 (cleanup): {
        drop(_70) -> bb31;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb28 (cleanup): {
        drop(_49) -> bb31;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb29 (cleanup): {
        drop(_28) -> bb31;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb30 (cleanup): {
        drop(_7) -> bb31;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb31 (cleanup): {
        resume;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:96:1: 102:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:101:16: 101:20

    bb0: {
        _1 = const 3074_usize;           // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:101:16: 101:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:100:16: 100:20

    bb0: {
        _1 = const 3078_usize;           // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:100:16: 100:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:99:16: 99:20

    bb0: {
        _1 = const 3074_usize;           // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:99:16: 99:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:98:16: 98:17

    bb0: {
        _1 = const 3_usize;              // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:98:16: 98:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:97:16: 97:17

    bb0: {
        _1 = const 2_usize;              // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:97:16: 97:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

fn Big(_1: [u8; 1024]) -> Big {
    let mut _0: Big;                     // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:20:1: 20:11

    bb0: {
        _0 = Big(move _1);               // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:20:1: 20:11
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:20:1: 20:11
    }
}

// MIR FOR CTFE
fn Big(_1: [u8; 1024]) -> Big {
    let mut _0: Big;                     // return place in scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:20:1: 20:11

    bb0: {
        _0 = Big(move _1);               // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:20:1: 20:11
        return;                          // scope 0 at ui/async-await/async-fn-size-uninit-locals.rs:20:1: 20:11
    }
}
