// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/default-struct-update.rs:7:11: 7:11
    let mut _1: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/default-struct-update.rs:8:13: 8:18
    scope 1 {
    }

    bb0: {
        _1 = foo() -> bb1;               // scope 0 at ui/async-await/default-struct-update.rs:8:13: 8:18
                                         // mir::Constant
                                         // + span: ui/async-await/default-struct-update.rs:8:13: 8:16
                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {foo}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/async-await/default-struct-update.rs:8:18: 8:19
    }

    bb2: {
        return;                          // scope 0 at ui/async-await/default-struct-update.rs:9:2: 9:2
    }
}

fn from_config(_1: Config) -> impl Future<Output = ()> {
    debug _ => _1;                       // in scope 0 at ui/async-await/default-struct-update.rs:11:22: 11:23
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:33
    let mut _2: [async fn body@ui/async-await/default-struct-update.rs:11:33: 11:35]; // in scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35

    bb0: {
        _2 = [generator@ui/async-await/default-struct-update.rs:11:33: 11:35 (#0)] { _: move _1 }; // scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
                                         // generator
                                         // + def_id: DefId(0:5 ~ default_struct_update[e42f]::from_config::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (Config,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/default-struct-update.rs:11:33: 11:35]>(move _2) -> bb1; // scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
                                         // mir::Constant
                                         // + span: ui/async-await/default-struct-update.rs:11:33: 11:35
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/default-struct-update.rs:11:33: 11:35]) -> [async fn body@ui/async-await/default-struct-update.rs:11:33: 11:35] {identity_future::<(), [async fn body@ui/async-await/default-struct-update.rs:11:33: 11:35]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/default-struct-update.rs:11:35: 11:35
    }
}

fn from_config::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/default-struct-update.rs:11:33: 11:35]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _5;           // in scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
    debug _ => ((*(_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:11:33: 11:35])).0: Config); // in scope 0 at ui/async-await/default-struct-update.rs:11:22: 11:23
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
    let mut _3: Config;                  // in scope 0 at ui/async-await/default-struct-update.rs:11:22: 11:23
    let mut _4: ();                      // in scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
    let mut _5: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
    let mut _6: u32;                     // in scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
    let mut _7: &mut [async fn body@ui/async-await/default-struct-update.rs:11:33: 11:35]; // in scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
    let mut _8: &mut [async fn body@ui/async-await/default-struct-update.rs:11:33: 11:35]; // in scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
    let mut _9: &mut [async fn body@ui/async-await/default-struct-update.rs:11:33: 11:35]; // in scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
    let mut _10: &mut [async fn body@ui/async-await/default-struct-update.rs:11:33: 11:35]; // in scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
    scope 1 {
        debug _ => _3;                   // in scope 1 at ui/async-await/default-struct-update.rs:11:22: 11:23
        scope 2 {
        }
    }

    bb0: {
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:11:33: 11:35]); // scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
        _6 = discriminant((*_7));        // scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
        switchInt(move _6) -> [0: bb1, 1: bb5, 2: bb4, otherwise: bb6]; // scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
        _8 = deref_copy (_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:11:33: 11:35]); // scope 0 at ui/async-await/default-struct-update.rs:11:22: 11:23
        _3 = move ((*_8).0: Config);     // scope 0 at ui/async-await/default-struct-update.rs:11:22: 11:23
        _4 = const ();                   // scope 2 at ui/async-await/default-struct-update.rs:11:33: 11:35
        drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at ui/async-await/default-struct-update.rs:11:34: 11:35
    }

    bb2: {
        _0 = Poll::<()>::Ready(move _4); // scope 0 at ui/async-await/default-struct-update.rs:11:35: 11:35
        _9 = deref_copy (_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:11:33: 11:35]); // scope 0 at ui/async-await/default-struct-update.rs:11:35: 11:35
        discriminant((*_9)) = 1;         // scope 0 at ui/async-await/default-struct-update.rs:11:35: 11:35
        return;                          // scope 0 at ui/async-await/default-struct-update.rs:11:35: 11:35
    }

    bb3 (cleanup): {
        _10 = deref_copy (_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:11:33: 11:35]); // scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
        discriminant((*_10)) = 2;        // scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
        resume;                          // scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
    }

    bb4: {
        assert(const false, "`async fn` resumed after panicking") -> bb4; // scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
    }

    bb5: {
        assert(const false, "`async fn` resumed after completion") -> bb5; // scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
    }

    bb6: {
        unreachable;                     // scope 0 at ui/async-await/default-struct-update.rs:11:33: 11:35
    }
}

fn foo() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/default-struct-update.rs:13:16: 13:16
    let mut _1: [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]; // in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2

    bb0: {
        _1 = [generator@ui/async-await/default-struct-update.rs:13:16: 19:2 (#0)]; // scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
                                         // generator
                                         // + def_id: DefId(0:7 ~ default_struct_update[e42f]::foo::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, std::option::Option<std::boxed::Box<u8>>, Config, impl std::future::Future<Output = ()>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]>(move _1) -> bb1; // scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
                                         // mir::Constant
                                         // + span: ui/async-await/default-struct-update.rs:13:16: 19:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]) -> [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2] {identity_future::<(), [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/default-struct-update.rs:19:2: 19:2
    }
}

fn foo::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _18;          // in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    let mut _3: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/default-struct-update.rs:18:5: 18:11
    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/default-struct-update.rs:14:5: 17:7
    let mut _5: Config;                  // in scope 0 at ui/async-await/default-struct-update.rs:14:17: 17:6
    let mut _6: std::option::Option<std::boxed::Box<u8>>; // in scope 0 at ui/async-await/default-struct-update.rs:15:19: 15:23
    let mut _7: std::task::Poll<()>;     // in scope 0 at ui/async-await/default-struct-update.rs:18:5: 18:11
    let mut _8: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at ui/async-await/default-struct-update.rs:18:5: 18:11
    let mut _9: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/default-struct-update.rs:18:5: 18:11
    let mut _10: &mut impl std::future::Future<Output = ()>; // in scope 0 at ui/async-await/default-struct-update.rs:18:5: 18:11
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/default-struct-update.rs:14:5: 18:11
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/default-struct-update.rs:14:5: 18:11
    let mut _13: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/default-struct-update.rs:18:5: 18:11
    let mut _14: isize;                  // in scope 0 at ui/async-await/default-struct-update.rs:18:5: 18:11
    let mut _16: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/default-struct-update.rs:18:5: 18:11
    let mut _17: ();                     // in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    let mut _18: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    let mut _19: u32;                    // in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    let mut _20: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]; // in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    let mut _21: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]; // in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    let mut _22: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]; // in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    let mut _23: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]; // in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    let mut _24: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]; // in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    let mut _25: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]; // in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    let mut _26: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]; // in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    let mut _27: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]; // in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    let mut _28: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]; // in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    let mut _29: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]; // in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    let mut _30: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]; // in scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2])) as variant#3).1: impl std::future::Future<Output = ()>); // in scope 1 at ui/async-await/default-struct-update.rs:18:5: 18:11
        let _15: ();                     // in scope 1 at ui/async-await/default-struct-update.rs:14:5: 18:11
        scope 2 {
        }
        scope 3 {
            debug result => _15;         // in scope 3 at ui/async-await/default-struct-update.rs:14:5: 18:11
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]); // scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
        _19 = discriminant((*_20));      // scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
        switchInt(move _19) -> [0: bb1, 1: bb19, 2: bb18, 3: bb17, otherwise: bb20]; // scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    }

    bb1: {
        _18 = move _2;                   // scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
        _6 = Option::<Box<u8>>::None;    // scope 0 at ui/async-await/default-struct-update.rs:15:19: 15:23
        _21 = deref_copy (_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]); // scope 0 at ui/async-await/default-struct-update.rs:16:11: 16:29
        (((*_21) as variant#3).0: Config) = <Config as Default>::default() -> [return: bb2, unwind: bb15]; // scope 0 at ui/async-await/default-struct-update.rs:16:11: 16:29
                                         // mir::Constant
                                         // + span: ui/async-await/default-struct-update.rs:16:11: 16:27
                                         // + literal: Const { ty: fn() -> Config {<Config as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Config { nickname: move _6 }; // scope 0 at ui/async-await/default-struct-update.rs:14:17: 17:6
        _4 = from_config(move _5) -> [return: bb3, unwind: bb14]; // scope 0 at ui/async-await/default-struct-update.rs:14:5: 17:7
                                         // mir::Constant
                                         // + span: ui/async-await/default-struct-update.rs:14:5: 14:16
                                         // + literal: Const { ty: fn(Config) -> impl Future<Output = ()> {from_config}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = <impl Future<Output = ()> as IntoFuture>::into_future(move _4) -> [return: bb4, unwind: bb14]; // scope 0 at ui/async-await/default-struct-update.rs:18:5: 18:11
                                         // mir::Constant
                                         // + span: ui/async-await/default-struct-update.rs:18:5: 18:11
                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb4: {
        _22 = deref_copy (_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]); // scope 0 at ui/async-await/default-struct-update.rs:18:5: 18:11
        (((*_22) as variant#3).1: impl std::future::Future<Output = ()>) = move _3; // scope 0 at ui/async-await/default-struct-update.rs:18:5: 18:11
        goto -> bb5;                     // scope 1 at ui/async-await/default-struct-update.rs:18:5: 18:11
    }

    bb5: {
        _23 = deref_copy (_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]); // scope 2 at ui/async-await/default-struct-update.rs:18:5: 18:11
        _10 = &mut (((*_23) as variant#3).1: impl std::future::Future<Output = ()>); // scope 2 at ui/async-await/default-struct-update.rs:18:5: 18:11
        _9 = &mut (*_10);                // scope 2 at ui/async-await/default-struct-update.rs:18:5: 18:11
        _8 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _9) -> [return: bb6, unwind: bb13]; // scope 2 at ui/async-await/default-struct-update.rs:18:5: 18:11
                                         // mir::Constant
                                         // + span: ui/async-await/default-struct-update.rs:18:5: 18:11
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = _18;                       // scope 2 at ui/async-await/default-struct-update.rs:18:5: 18:11
        _12 = move _13;                  // scope 2 at ui/async-await/default-struct-update.rs:14:5: 18:11
        _11 = &mut (*_12);               // scope 2 at ui/async-await/default-struct-update.rs:14:5: 18:11
        _7 = <impl Future<Output = ()> as Future>::poll(move _8, move _11) -> [return: bb7, unwind: bb13]; // scope 2 at ui/async-await/default-struct-update.rs:18:5: 18:11
                                         // mir::Constant
                                         // + span: ui/async-await/default-struct-update.rs:18:5: 18:11
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = discriminant(_7);          // scope 1 at ui/async-await/default-struct-update.rs:18:5: 18:11
        switchInt(move _14) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 1 at ui/async-await/default-struct-update.rs:18:5: 18:11
    }

    bb8: {
        _0 = Poll::<()>::Pending;        // scope 1 at ui/async-await/default-struct-update.rs:18:5: 18:11
        _24 = deref_copy (_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]); // scope 1 at ui/async-await/default-struct-update.rs:18:5: 18:11
        discriminant((*_24)) = 3;        // scope 1 at ui/async-await/default-struct-update.rs:18:5: 18:11
        return;                          // scope 1 at ui/async-await/default-struct-update.rs:18:5: 18:11
    }

    bb9: {
        unreachable;                     // scope 1 at ui/async-await/default-struct-update.rs:18:5: 18:11
    }

    bb10: {
        _15 = ((_7 as Ready).0: ());     // scope 1 at ui/async-await/default-struct-update.rs:14:5: 18:11
        _25 = deref_copy (_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]); // scope 0 at ui/async-await/default-struct-update.rs:18:10: 18:11
        drop((((*_25) as variant#3).1: impl std::future::Future<Output = ()>)) -> [return: bb11, unwind: bb14]; // scope 0 at ui/async-await/default-struct-update.rs:18:10: 18:11
    }

    bb11: {
        _26 = deref_copy (_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]); // scope 0 at ui/async-await/default-struct-update.rs:18:11: 18:12
        drop((((*_26) as variant#3).0: Config)) -> [return: bb12, unwind: bb16]; // scope 0 at ui/async-await/default-struct-update.rs:18:11: 18:12
    }

    bb12: {
        _17 = const ();                  // scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
        _0 = Poll::<()>::Ready(move _17); // scope 0 at ui/async-await/default-struct-update.rs:19:2: 19:2
        _27 = deref_copy (_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]); // scope 0 at ui/async-await/default-struct-update.rs:19:2: 19:2
        discriminant((*_27)) = 1;        // scope 0 at ui/async-await/default-struct-update.rs:19:2: 19:2
        return;                          // scope 0 at ui/async-await/default-struct-update.rs:19:2: 19:2
    }

    bb13 (cleanup): {
        _28 = deref_copy (_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]); // scope 0 at ui/async-await/default-struct-update.rs:18:10: 18:11
        drop((((*_28) as variant#3).1: impl std::future::Future<Output = ()>)) -> bb14; // scope 0 at ui/async-await/default-struct-update.rs:18:10: 18:11
    }

    bb14 (cleanup): {
        _29 = deref_copy (_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]); // scope 0 at ui/async-await/default-struct-update.rs:18:11: 18:12
        drop((((*_29) as variant#3).0: Config)) -> bb16; // scope 0 at ui/async-await/default-struct-update.rs:18:11: 18:12
    }

    bb15 (cleanup): {
        drop(_6) -> bb16;                // scope 0 at ui/async-await/default-struct-update.rs:17:5: 17:6
    }

    bb16 (cleanup): {
        _30 = deref_copy (_1.0: &mut [async fn body@ui/async-await/default-struct-update.rs:13:16: 19:2]); // scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
        discriminant((*_30)) = 2;        // scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
        resume;                          // scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    }

    bb17: {
        _16 = move _2;                   // scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
        _18 = move _16;                  // scope 1 at ui/async-await/default-struct-update.rs:18:5: 18:11
        goto -> bb5;                     // scope 1 at ui/async-await/default-struct-update.rs:18:5: 18:11
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> bb18; // scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> bb19; // scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    }

    bb20: {
        unreachable;                     // scope 0 at ui/async-await/default-struct-update.rs:13:16: 19:2
    }
}

fn <impl at ui/async-await/default-struct-update.rs:21:10: 21:17>::default() -> Config {
    let mut _0: Config;                  // return place in scope 0 at ui/async-await/default-struct-update.rs:21:10: 21:17
    let mut _1: std::option::Option<std::boxed::Box<u8>>; // in scope 0 at ui/async-await/default-struct-update.rs:23:5: 23:30

    bb0: {
        _1 = <Option<Box<u8>> as Default>::default() -> bb1; // scope 0 at ui/async-await/default-struct-update.rs:23:5: 23:30
                                         // mir::Constant
                                         // + span: ui/async-await/default-struct-update.rs:23:5: 23:30
                                         // + literal: Const { ty: fn() -> Option<Box<u8>> {<Option<Box<u8>> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Config { nickname: move _1 }; // scope 0 at ui/async-await/default-struct-update.rs:21:10: 21:17
        return;                          // scope 0 at ui/async-await/default-struct-update.rs:21:17: 21:17
    }
}
