// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn take_u32(_1: u32) -> () {
    debug _x => _1;                      // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:6:13: 6:15
    let mut _0: ();                      // return place in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:6:22: 6:22

    bb0: {
        return;                          // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:6:24: 6:24
    }
}

fn make_u32() -> impl Future<Output = u32> {
    let mut _0: impl std::future::Future<Output = u32>; // return place in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:24: 8:27
    let mut _1: [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2]; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2

    bb0: {
        _1 = [generator@ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2 (#0)]; // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2
                                         // generator
                                         // + def_id: DefId(0:5 ~ suggest_missing_await_closure_fixed[8ec5]::make_u32::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     u32,
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<u32, [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2]>(move _1) -> bb1; // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2
                                         // mir::Constant
                                         // + span: ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2]) -> [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2] {identity_future::<u32, [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:10:2: 10:2
    }
}

fn make_u32::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2]>, _2: &mut Context<'_>) -> Poll<u32> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2
    let mut _0: std::task::Poll<u32>;    // return place in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2
    let mut _3: u32;                     // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2
    let mut _5: u32;                     // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2
    let mut _6: &mut [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2]; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2
    let mut _7: &mut [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2]; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2

    bb0: {
        _6 = deref_copy (_1.0: &mut [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2]); // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2
        _3 = const 22_u32;               // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:9:5: 9:7
        _0 = Poll::<u32>::Ready(move _3); // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:10:2: 10:2
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2]); // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:10:2: 10:2
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:10:2: 10:2
        return;                          // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:10:2: 10:2
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:8:28: 10:2
    }
}

fn suggest_await_in_async_closure() -> impl Future<Output = ()> {
    let mut _0: impl std::future::Future<Output = ()>; // return place in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 13:43
    let mut _1: [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2]; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2

    bb0: {
        _1 = [generator@ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2 (#0)]; // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2
                                         // generator
                                         // + def_id: DefId(0:7 ~ suggest_missing_await_closure_fixed[8ec5]::suggest_await_in_async_closure::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2]>(move _1) -> bb1; // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2
                                         // mir::Constant
                                         // + span: ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2
                                         // + literal: Const { ty: fn([async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2]) -> [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2] {identity_future::<(), [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:21:2: 21:2
    }
}

fn suggest_await_in_async_closure::{closure#0}(_1: Pin<&mut [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _4;           // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2
    let mut _3: ();                      // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2
    let mut _4: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2
    let mut _5: u32;                     // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2
    let mut _6: &mut [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2]; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2
    let mut _7: &mut [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2]; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2

    bb0: {
        _6 = deref_copy (_1.0: &mut [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2]); // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2
        _5 = discriminant((*_6));        // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2
        _3 = const ();                   // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2
        _0 = Poll::<()>::Ready(move _3); // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:21:2: 21:2
        _7 = deref_copy (_1.0: &mut [async fn body@ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2]); // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:21:2: 21:2
        discriminant((*_7)) = 1;         // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:21:2: 21:2
        return;                          // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:21:2: 21:2
    }

    bb2: {
        assert(const false, "`async fn` resumed after completion") -> bb2; // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2
    }

    bb3: {
        unreachable;                     // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:13:43: 21:2
    }
}

fn suggest_await_in_async_closure::{closure#0}::{closure#0}(_1: &[closure@ui/async-await/suggest-missing-await-closure_fixed.rs:14:5: 14:13]) -> [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6] {
    let mut _0: [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]; // return place in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:5: 14:13
    let mut _2: [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6

    bb0: {
        _2 = [generator@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6 (#0)]; // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
                                         // generator
                                         // + def_id: DefId(0:9 ~ suggest_missing_await_closure_fixed[8ec5]::suggest_await_in_async_closure::{closure#0}::{closure#1})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     (),
                                         //     {std::future::ResumeTy, impl std::future::Future<Output = u32>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<(), [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]>(move _2) -> bb1; // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:5: 14:13
                                         // mir::Constant
                                         // + span: ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
                                         // + literal: Const { ty: fn([async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]) -> [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6] {identity_future::<(), [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:20:6: 20:6
    }
}

fn suggest_await_in_async_closure::{closure#0}::{closure#1}(_1: Pin<&mut [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _18;          // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
    let mut _0: std::task::Poll<()>;     // return place in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
    let _3: impl std::future::Future<Output = u32>; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:15:13: 15:14
    let mut _4: u32;                     // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:18: 16:25
    let mut _5: impl std::future::Future<Output = u32>; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
    let mut _6: impl std::future::Future<Output = u32>; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:18: 16:19
    let mut _7: std::task::Poll<u32>;    // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
    let mut _8: std::pin::Pin<&mut impl std::future::Future<Output = u32>>; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
    let mut _9: &mut impl std::future::Future<Output = u32>; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
    let mut _10: &mut impl std::future::Future<Output = u32>; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:18: 16:25
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:18: 16:25
    let mut _13: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
    let mut _14: isize;                  // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
    let mut _16: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
    let mut _17: ();                     // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
    let mut _18: &mut std::task::Context<'_>; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
    let mut _19: u32;                    // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
    let mut _20: &mut [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
    let mut _21: &mut [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
    let mut _22: &mut [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
    let mut _23: &mut [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
    let mut _24: &mut [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
    let mut _25: &mut [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]; // in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/async-await/suggest-missing-await-closure_fixed.rs:15:13: 15:14
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6])) as variant#3).0: impl std::future::Future<Output = u32>); // in scope 2 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
            let _15: u32;                // in scope 2 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:18: 16:25
            scope 3 {
            }
            scope 4 {
                debug result => _15;     // in scope 4 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:18: 16:25
            }
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]); // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
        _19 = discriminant((*_20));      // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
        switchInt(move _19) -> [0: bb1, 1: bb14, 2: bb13, 3: bb12, otherwise: bb15]; // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
    }

    bb1: {
        _18 = move _2;                   // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
        _3 = make_u32() -> [return: bb2, unwind: bb11]; // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:15:17: 15:27
                                         // mir::Constant
                                         // + span: ui/async-await/suggest-missing-await-closure_fixed.rs:15:17: 15:25
                                         // + literal: Const { ty: fn() -> impl Future<Output = u32> {make_u32}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = move _3;                    // scope 1 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:18: 16:19
        _5 = <impl Future<Output = u32> as IntoFuture>::into_future(move _6) -> [return: bb3, unwind: bb11]; // scope 1 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
                                         // mir::Constant
                                         // + span: ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
                                         // + literal: Const { ty: fn(impl Future<Output = u32>) -> <impl Future<Output = u32> as IntoFuture>::IntoFuture {<impl Future<Output = u32> as IntoFuture>::into_future}, val: Value(<ZST>) }
    }

    bb3: {
        _21 = deref_copy (_1.0: &mut [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]); // scope 1 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
        (((*_21) as variant#3).0: impl std::future::Future<Output = u32>) = move _5; // scope 1 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
        goto -> bb4;                     // scope 2 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
    }

    bb4: {
        _22 = deref_copy (_1.0: &mut [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]); // scope 3 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
        _10 = &mut (((*_22) as variant#3).0: impl std::future::Future<Output = u32>); // scope 3 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
        _9 = &mut (*_10);                // scope 3 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
        _8 = Pin::<&mut impl Future<Output = u32>>::new_unchecked(move _9) -> [return: bb5, unwind: bb11]; // scope 3 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
                                         // mir::Constant
                                         // + span: ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = u32>) -> Pin<&mut impl Future<Output = u32>> {Pin::<&mut impl Future<Output = u32>>::new_unchecked}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = _18;                       // scope 3 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
        _12 = move _13;                  // scope 3 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:18: 16:25
        _11 = &mut (*_12);               // scope 3 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:18: 16:25
        _7 = <impl Future<Output = u32> as Future>::poll(move _8, move _11) -> [return: bb6, unwind: bb11]; // scope 3 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
                                         // mir::Constant
                                         // + span: ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = u32>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = u32> as Future>::Output> {<impl Future<Output = u32> as Future>::poll}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = discriminant(_7);          // scope 2 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
        switchInt(move _14) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 2 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
    }

    bb7: {
        _0 = Poll::<()>::Pending;        // scope 2 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
        _23 = deref_copy (_1.0: &mut [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]); // scope 2 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
        discriminant((*_23)) = 3;        // scope 2 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
        return;                          // scope 2 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
    }

    bb8: {
        unreachable;                     // scope 2 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
    }

    bb9: {
        _15 = ((_7 as Ready).0: u32);    // scope 2 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:18: 16:25
        _4 = _15;                        // scope 4 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:18: 16:25
        _17 = take_u32(move _4) -> [return: bb10, unwind: bb11]; // scope 1 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:9: 16:26
                                         // mir::Constant
                                         // + span: ui/async-await/suggest-missing-await-closure_fixed.rs:16:9: 16:17
                                         // + literal: Const { ty: fn(u32) {take_u32}, val: Value(<ZST>) }
    }

    bb10: {
        _0 = Poll::<()>::Ready(move _17); // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:20:6: 20:6
        _24 = deref_copy (_1.0: &mut [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]); // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:20:6: 20:6
        discriminant((*_24)) = 1;        // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:20:6: 20:6
        return;                          // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:20:6: 20:6
    }

    bb11 (cleanup): {
        _25 = deref_copy (_1.0: &mut [async closure body@ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6]); // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
        discriminant((*_25)) = 2;        // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
        resume;                          // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
    }

    bb12: {
        _16 = move _2;                   // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
        _18 = move _16;                  // scope 2 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
        goto -> bb4;                     // scope 2 at ui/async-await/suggest-missing-await-closure_fixed.rs:16:19: 16:25
    }

    bb13: {
        assert(const false, "`async fn` resumed after panicking") -> bb13; // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
    }

    bb14: {
        assert(const false, "`async fn` resumed after completion") -> bb14; // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
    }

    bb15: {
        unreachable;                     // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:14:14: 20:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:23:11: 23:11

    bb0: {
        return;                          // scope 0 at ui/async-await/suggest-missing-await-closure_fixed.rs:23:13: 23:13
    }
}
