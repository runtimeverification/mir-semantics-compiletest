// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: Refs;
    let mut _2: std::vec::Vec<isize>;
    let mut _4: &Refs;
    let _6: &[isize];
    let _7: &std::vec::Vec<isize>;
    let mut _8: (&usize, &usize);
    let mut _9: &usize;
    let _10: usize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug e => _1;
        let _3: [closure@ui/lambda-infer-unresolved.rs:12:14: 12:16];
        scope 2 {
            debug _f => _3;
            let _5: &[isize];
            scope 3 {
                debug x => _5;
                let _11: &usize;
                let _12: &usize;
                let mut _20: &usize;
                scope 4 {
                    debug left_val => _11;
                    debug right_val => _12;
                    let _17: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _17;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = Vec::<isize>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Refs { refs: move _2, n: const 0_isize };
        _4 = &_1;
        _3 = [closure@ui/lambda-infer-unresolved.rs:12:14: 12:16] { e: move _4 };
        _7 = &(_1.0: std::vec::Vec<isize>);
        _6 = <Vec<isize> as Deref>::deref(_7) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _5 = _6;
        _10 = Len((*_5));
        _9 = &_10;
        _20 = const _;
        _8 = (move _9, _20);
        _11 = (_8.0: &usize);
        _12 = (_8.1: &usize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<usize, usize>(move _17, _11, _12, move _19) -> bb6;
    }

    bb4: {
        drop(_1) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/lambda-infer-unresolved.rs:12:14: 12:16]) -> () {
    debug e => (*((*_1).0: &Refs));
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &isize;
    let mut _10: &[&str; 2];
    let mut _11: &Refs;

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (Pointer(Unsize));
        _11 = deref_copy ((*_1).0: &Refs);
        _9 = &((*_11).1: isize);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
