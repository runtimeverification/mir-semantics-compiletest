// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/try-block/try-block-in-match.rs:6:11: 6:11
    let mut _1: std::result::Result<(), ()>; // in scope 0 at ui/try-block/try-block-in-match.rs:7:11: 7:18
    let mut _2: ();                      // in scope 0 at ui/try-block/try-block-in-match.rs:7:17: 7:18
    let mut _3: isize;                   // in scope 0 at ui/try-block/try-block-in-match.rs:8:9: 8:16

    bb0: {
        _1 = <Result<(), ()> as Try>::from_output(move _2) -> bb1; // scope 0 at ui/try-block/try-block-in-match.rs:7:17: 7:18
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-in-match.rs:7:17: 7:18
                                         // + literal: Const { ty: fn(<Result<(), ()> as Try>::Output) -> Result<(), ()> {<Result<(), ()> as Try>::from_output}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = discriminant(_1);           // scope 0 at ui/try-block/try-block-in-match.rs:7:11: 7:18
        switchInt(move _3) -> [0: bb3, 1: bb3, otherwise: bb2]; // scope 0 at ui/try-block/try-block-in-match.rs:7:5: 7:18
    }

    bb2: {
        unreachable;                     // scope 0 at ui/try-block/try-block-in-match.rs:7:11: 7:18
    }

    bb3: {
        return;                          // scope 0 at ui/try-block/try-block-in-match.rs:11:2: 11:2
    }
}
