// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/try-block/try-block.rs:11:15: 11:15
    let _1: std::option::Option<i32>;    // in scope 0 at ui/try-block/try-block.rs:12:9: 12:21
    let _2: i32;                         // in scope 0 at ui/try-block/try-block.rs:13:13: 13:14
    let mut _3: i32;                     // in scope 0 at ui/try-block/try-block.rs:14:9: 14:10
    let mut _4: (&std::option::Option<i32>, &std::option::Option<i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _6: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &std::option::Option<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &std::option::Option<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: bool;                   // in scope 0 at ui/try-block/try-block.rs:19:11: 19:16
    let mut _23: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _24: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _25: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _33: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _34: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _35: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _36: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _37: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _38: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _40: bool;                   // in scope 0 at ui/try-block/try-block.rs:22:13: 22:45
    let mut _41: bool;                   // in scope 0 at ui/try-block/try-block.rs:22:16: 22:21
    let mut _42: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _43: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _44: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _48: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _49: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _52: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _53: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _54: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _55: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _56: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _57: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, i32>>; // in scope 0 at ui/try-block/try-block.rs:30:9: 30:17
    let mut _61: std::result::Result<(), i32>; // in scope 0 at ui/try-block/try-block.rs:30:9: 30:16
    let mut _62: isize;                  // in scope 0 at ui/try-block/try-block.rs:30:16: 30:17
    let mut _64: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at ui/try-block/try-block.rs:30:16: 30:17
    let mut _66: (&std::result::Result<i32, i32>, &std::result::Result<i32, i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _67: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _68: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _71: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _72: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _73: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _74: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _76: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _77: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _78: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _79: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _80: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _81: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, i32>>; // in scope 0 at ui/try-block/try-block.rs:37:9: 37:27
    let mut _87: std::result::Result<(), i32>; // in scope 0 at ui/try-block/try-block.rs:37:9: 37:26
    let mut _88: ();                     // in scope 0 at ui/try-block/try-block.rs:37:23: 37:25
    let mut _89: isize;                  // in scope 0 at ui/try-block/try-block.rs:37:26: 37:27
    let mut _91: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at ui/try-block/try-block.rs:37:26: 37:27
    let mut _93: (&std::result::Result<i32, i32>, &std::result::Result<i32, i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _94: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _95: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _98: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _99: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _100: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _101: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _103: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _104: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _105: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _106: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _107: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _108: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _109: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _111: std::ops::Range<i32>;  // in scope 0 at ui/try-block/try-block.rs:43:18: 43:23
    let mut _112: std::ops::Range<i32>;  // in scope 0 at ui/try-block/try-block.rs:43:18: 43:23
    let mut _114: std::option::Option<i32>; // in scope 0 at ui/try-block/try-block.rs:43:18: 43:23
    let mut _115: &mut std::ops::Range<i32>; // in scope 0 at ui/try-block/try-block.rs:43:18: 43:23
    let mut _116: &mut std::ops::Range<i32>; // in scope 0 at ui/try-block/try-block.rs:43:18: 43:23
    let mut _117: isize;                 // in scope 0 at ui/try-block/try-block.rs:43:9: 45:10
    let mut _119: bool;                  // in scope 0 at ui/try-block/try-block.rs:44:16: 44:21
    let mut _120: i32;                   // in scope 0 at ui/try-block/try-block.rs:44:16: 44:17
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, i32>, i32>; // in scope 0 at ui/try-block/try-block.rs:44:24: 44:42
    let mut _122: std::result::Result<i32, i32>; // in scope 0 at ui/try-block/try-block.rs:44:24: 44:41
    let mut _123: i32;                   // in scope 0 at ui/try-block/try-block.rs:44:39: 44:40
    let mut _124: isize;                 // in scope 0 at ui/try-block/try-block.rs:44:41: 44:42
    let mut _126: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at ui/try-block/try-block.rs:44:41: 44:42
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, i32>>; // in scope 0 at ui/try-block/try-block.rs:44:53: 44:60
    let mut _129: std::result::Result<(), i32>; // in scope 0 at ui/try-block/try-block.rs:44:53: 44:59
    let mut _130: i32;                   // in scope 0 at ui/try-block/try-block.rs:44:57: 44:58
    let mut _131: isize;                 // in scope 0 at ui/try-block/try-block.rs:44:59: 44:60
    let mut _133: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at ui/try-block/try-block.rs:44:59: 44:60
    let mut _135: (&std::result::Result<i32, i32>, &std::result::Result<i32, i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _136: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _137: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _140: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _141: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _142: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _143: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _145: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _146: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _147: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _148: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _149: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _150: &std::result::Result<i32, i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _151: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _154: ();                    // in scope 0 at ui/try-block/try-block.rs:53:5: 53:6
    let mut _155: (&i32, &i32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _156: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _157: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _160: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _161: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _162: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _163: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _165: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _166: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _167: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _168: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _169: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _170: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _171: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _174: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>>; // in scope 0 at ui/try-block/try-block.rs:59:9: 59:17
    let mut _175: std::result::Result<(), ()>; // in scope 0 at ui/try-block/try-block.rs:59:9: 59:16
    let mut _176: isize;                 // in scope 0 at ui/try-block/try-block.rs:59:16: 59:17
    let mut _178: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/try-block/try-block.rs:59:16: 59:17
    let mut _180: ();                    // in scope 0 at ui/try-block/try-block.rs:60:5: 60:6
    let mut _181: (&i32, &i32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _182: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _183: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _186: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _187: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _188: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _189: i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _191: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _192: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _193: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _194: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _195: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _196: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _197: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _199: &str;                  // in scope 0 at ui/try-block/try-block.rs:63:21: 63:39
    let _200: &str;                      // in scope 0 at ui/try-block/try-block.rs:63:21: 63:27
    let mut _202: &str;                  // in scope 0 at ui/try-block/try-block.rs:66:9: 66:23
    let _203: &str;                      // in scope 0 at ui/try-block/try-block.rs:66:10: 66:23
    let mut _204: &std::string::String;  // in scope 0 at ui/try-block/try-block.rs:66:10: 66:19
    let mut _205: std::ops::RangeFull;   // in scope 0 at ui/try-block/try-block.rs:66:20: 66:22
    let mut _206: (&std::result::Result<&str, ()>, &std::result::Result<&str, ()>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _207: &std::result::Result<&str, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _208: &std::result::Result<&str, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _211: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _212: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _213: &std::result::Result<&str, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _214: &std::result::Result<&str, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _216: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _217: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _218: &std::result::Result<&str, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _219: &std::result::Result<&str, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _220: &std::result::Result<&str, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _221: &std::result::Result<&str, ()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _222: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _224: ();                    // in scope 0 at ui/try-block/try-block.rs:70:35: 70:37
    let mut _225: (&std::option::Option<()>, &std::option::Option<()>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _226: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _227: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _230: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _231: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _232: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _233: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _235: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _236: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _237: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _238: &std::option::Option<()>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _239: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _240: &std::option::Option<()>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _241: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _243: ();                    // in scope 0 at ui/try-block/try-block.rs:73:35: 73:36
    let mut _244: (&std::option::Option<()>, &std::option::Option<()>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _245: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _246: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _249: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _250: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _251: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _252: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _254: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _255: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _256: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _257: &std::option::Option<()>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _258: &std::option::Option<()>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _259: &std::option::Option<()>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _260: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug catch_result => _1;        // in scope 1 at ui/try-block/try-block.rs:12:9: 12:21
        let _7: &std::option::Option<i32>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _8: &std::option::Option<i32>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _21: bool;               // in scope 1 at ui/try-block/try-block.rs:18:9: 18:18
        let mut _271: &std::option::Option<i32>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 3 {
            debug left_val => _7;        // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _8;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _13: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _13;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 5 {
            debug catch => _21;          // in scope 5 at ui/try-block/try-block.rs:18:9: 18:18
            let _26: &bool;              // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _27: &bool;              // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _45: &bool;              // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _46: &bool;              // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _59: std::result::Result<i32, i32>; // in scope 5 at ui/try-block/try-block.rs:29:9: 29:18
            let _63: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at ui/try-block/try-block.rs:30:16: 30:17
            let _65: ();                 // in scope 5 at ui/try-block/try-block.rs:30:9: 30:17
            let mut _269: &bool;         // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _270: &bool;         // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 6 {
                debug left_val => _26;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _27;  // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _32: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 7 {
                    debug kind => _32;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 8 {
                debug left_val => _45;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _46;  // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _51: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 9 {
                    debug kind => _51;   // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 10 {
                debug catch_err => _59;  // in scope 10 at ui/try-block/try-block.rs:29:9: 29:18
                let _69: &std::result::Result<i32, i32>; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _70: &std::result::Result<i32, i32>; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _83: std::result::Result<i32, i32>; // in scope 10 at ui/try-block/try-block.rs:35:9: 35:19
                let _84: std::result::Result<std::convert::Infallible, i32>; // in scope 10 at ui/try-block/try-block.rs:36:27: 36:28
                let _85: ();             // in scope 10 at ui/try-block/try-block.rs:36:20: 36:28
                let _90: std::result::Result<std::convert::Infallible, i32>; // in scope 10 at ui/try-block/try-block.rs:37:26: 37:27
                let _92: ();             // in scope 10 at ui/try-block/try-block.rs:37:9: 37:27
                let mut _268: &std::result::Result<i32, i32>; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 15 {
                    debug left_val => _69; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _70; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _75: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 16 {
                        debug kind => _75; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 17 {
                    debug catch_okay => _83; // in scope 17 at ui/try-block/try-block.rs:35:9: 35:19
                    let _96: &std::result::Result<i32, i32>; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _97: &std::result::Result<i32, i32>; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _110: std::result::Result<i32, i32>; // in scope 17 at ui/try-block/try-block.rs:42:9: 42:24
                    let mut _113: std::ops::Range<i32>; // in scope 17 at ui/try-block/try-block.rs:43:18: 43:23
                    let mut _267: &std::result::Result<i32, i32>; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 26 {
                        debug left_val => _96; // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _97; // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _102: core::panicking::AssertKind; // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 27 {
                            debug kind => _102; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 28 {
                        debug catch_from_loop => _110; // in scope 28 at ui/try-block/try-block.rs:42:9: 42:24
                        let _138: &std::result::Result<i32, i32>; // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _139: &std::result::Result<i32, i32>; // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _152: i32;   // in scope 28 at ui/try-block/try-block.rs:50:9: 50:17
                        let mut _266: &std::result::Result<i32, i32>; // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        scope 39 {
                            debug left_val => _138; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _139; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _144: core::panicking::AssertKind; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 40 {
                                debug kind => _144; // in scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                        scope 41 {
                            debug cfg_init => _152; // in scope 41 at ui/try-block/try-block.rs:50:9: 50:17
                            let _153: std::result::Result<(), ()>; // in scope 41 at ui/try-block/try-block.rs:51:9: 51:13
                            scope 42 {
                                debug _res => _153; // in scope 42 at ui/try-block/try-block.rs:51:9: 51:13
                                let _158: &i32; // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                let _159: &i32; // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _172: i32; // in scope 42 at ui/try-block/try-block.rs:56:9: 56:19
                                let mut _265: &i32; // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                scope 43 {
                                    debug left_val => _158; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    debug right_val => _159; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _164: core::panicking::AssertKind; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    scope 44 {
                                        debug kind => _164; // in scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    }
                                }
                                scope 45 {
                                    debug cfg_init_2 => _172; // in scope 45 at ui/try-block/try-block.rs:56:9: 56:19
                                    let _173: std::result::Result<(), ()>; // in scope 45 at ui/try-block/try-block.rs:57:9: 57:13
                                    let _177: std::result::Result<std::convert::Infallible, ()>; // in scope 45 at ui/try-block/try-block.rs:59:16: 59:17
                                    let _179: (); // in scope 45 at ui/try-block/try-block.rs:59:9: 59:17
                                    scope 46 {
                                        debug _res => _173; // in scope 46 at ui/try-block/try-block.rs:57:9: 57:13
                                        let _184: &i32; // in scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                        let _185: &i32; // in scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                        let _198: std::string::String; // in scope 46 at ui/try-block/try-block.rs:63:9: 63:18
                                        let mut _264: &i32; // in scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                        scope 51 {
                                            debug left_val => _184; // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                            debug right_val => _185; // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                            let _190: core::panicking::AssertKind; // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                            scope 52 {
                                                debug kind => _190; // in scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                            }
                                        }
                                        scope 53 {
                                            debug my_string => _198; // in scope 53 at ui/try-block/try-block.rs:63:9: 63:18
                                            let _201: std::result::Result<&str, ()>; // in scope 53 at ui/try-block/try-block.rs:64:9: 64:12
                                            scope 54 {
                                                debug res => _201; // in scope 54 at ui/try-block/try-block.rs:64:9: 64:12
                                                let _209: &std::result::Result<&str, ()>; // in scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                let _210: &std::result::Result<&str, ()>; // in scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                let _223: std::option::Option<()>; // in scope 54 at ui/try-block/try-block.rs:70:9: 70:15
                                                let mut _263: &std::result::Result<&str, ()>; // in scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                scope 55 {
                                                    debug left_val => _209; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                    debug right_val => _210; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                    let _215: core::panicking::AssertKind; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                    scope 56 {
                                                        debug kind => _215; // in scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                    }
                                                }
                                                scope 57 {
                                                    debug my_opt => _223; // in scope 57 at ui/try-block/try-block.rs:70:9: 70:15
                                                    let _228: &std::option::Option<()>; // in scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                    let _229: &std::option::Option<()>; // in scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                    let _242: std::option::Option<()>; // in scope 57 at ui/try-block/try-block.rs:73:9: 73:15
                                                    let mut _262: &std::option::Option<()>; // in scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                    scope 58 {
                                                        debug left_val => _228; // in scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                        debug right_val => _229; // in scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                        let _234: core::panicking::AssertKind; // in scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                        scope 59 {
                                                            debug kind => _234; // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                        }
                                                    }
                                                    scope 60 {
                                                        debug my_opt => _242; // in scope 60 at ui/try-block/try-block.rs:73:9: 73:15
                                                        let _247: &std::option::Option<()>; // in scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                        let _248: &std::option::Option<()>; // in scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                        let mut _261: &std::option::Option<()>; // in scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                        scope 61 {
                                                            debug left_val => _247; // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                            debug right_val => _248; // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                            let _253: core::panicking::AssertKind; // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            scope 62 {
                                                                debug kind => _253; // in scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    scope 47 {
                                        debug residual => _177; // in scope 47 at ui/try-block/try-block.rs:59:16: 59:17
                                        scope 48 {
                                        }
                                    }
                                    scope 49 {
                                        debug val => _179; // in scope 49 at ui/try-block/try-block.rs:59:9: 59:17
                                        scope 50 {
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 29 {
                        debug iter => _113; // in scope 29 at ui/try-block/try-block.rs:43:18: 43:23
                        let _118: i32;   // in scope 29 at ui/try-block/try-block.rs:43:13: 43:14
                        scope 30 {
                            debug i => _118; // in scope 30 at ui/try-block/try-block.rs:43:13: 43:14
                            let _125: std::result::Result<std::convert::Infallible, i32>; // in scope 30 at ui/try-block/try-block.rs:44:41: 44:42
                            let _127: i32; // in scope 30 at ui/try-block/try-block.rs:44:24: 44:42
                            let _132: std::result::Result<std::convert::Infallible, i32>; // in scope 30 at ui/try-block/try-block.rs:44:59: 44:60
                            let _134: (); // in scope 30 at ui/try-block/try-block.rs:44:53: 44:60
                            scope 31 {
                                debug residual => _125; // in scope 31 at ui/try-block/try-block.rs:44:41: 44:42
                                scope 32 {
                                }
                            }
                            scope 33 {
                                debug val => _127; // in scope 33 at ui/try-block/try-block.rs:44:24: 44:42
                                scope 34 {
                                }
                            }
                            scope 35 {
                                debug residual => _132; // in scope 35 at ui/try-block/try-block.rs:44:59: 44:60
                                scope 36 {
                                }
                            }
                            scope 37 {
                                debug val => _134; // in scope 37 at ui/try-block/try-block.rs:44:53: 44:60
                                scope 38 {
                                }
                            }
                        }
                    }
                }
                scope 18 {
                    debug residual => _84; // in scope 18 at ui/try-block/try-block.rs:36:27: 36:28
                    scope 19 {
                    }
                }
                scope 20 {
                    debug val => _85;    // in scope 20 at ui/try-block/try-block.rs:36:20: 36:28
                    scope 21 {
                    }
                }
                scope 22 {
                    debug residual => _90; // in scope 22 at ui/try-block/try-block.rs:37:26: 37:27
                    scope 23 {
                    }
                }
                scope 24 {
                    debug val => _92;    // in scope 24 at ui/try-block/try-block.rs:37:9: 37:27
                    scope 25 {
                    }
                }
            }
            scope 11 {
                debug residual => _63;   // in scope 11 at ui/try-block/try-block.rs:30:16: 30:17
                scope 12 {
                }
            }
            scope 13 {
                debug val => _65;        // in scope 13 at ui/try-block/try-block.rs:30:9: 30:17
                scope 14 {
                }
            }
        }
    }
    scope 2 {
        debug x => _2;                   // in scope 2 at ui/try-block/try-block.rs:13:13: 13:14
    }

    bb0: {
        _2 = const 5_i32;                // scope 0 at ui/try-block/try-block.rs:13:17: 13:18
        _3 = const 5_i32;                // scope 2 at ui/try-block/try-block.rs:14:9: 14:10
        _1 = <Option<i32> as Try>::from_output(move _3) -> bb1; // scope 2 at ui/try-block/try-block.rs:14:9: 14:10
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:14:9: 14:10
                                         // + literal: Const { ty: fn(<Option<i32> as Try>::Output) -> Option<i32> {<Option<i32> as Try>::from_output}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _271 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<i32>, val: Unevaluated(main, [], Some(promoted[10])) }
        _6 = _271;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _6);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_4.0: &std::option::Option<i32>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_4.1: &std::option::Option<i32>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = <Option<i32> as PartialEq>::eq(move _11, move _12) -> bb2; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> bool {<Option<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = Not(move _10);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _13 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _15, move _16, move _18, move _20); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<i32>, &'b Option<i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<i32>, Option<i32>>}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = const true;                // scope 1 at ui/try-block/try-block.rs:18:21: 18:25
        goto -> bb5;                     // scope 5 at ui/try-block/try-block.rs:19:5: 19:35
    }

    bb5: {
        _22 = _21;                       // scope 5 at ui/try-block/try-block.rs:19:11: 19:16
        switchInt(move _22) -> [0: bb7, otherwise: bb6]; // scope 5 at ui/try-block/try-block.rs:19:11: 19:16
    }

    bb6: {
        _21 = const false;               // scope 5 at ui/try-block/try-block.rs:19:19: 19:32
        goto -> bb5;                     // scope 5 at ui/try-block/try-block.rs:19:5: 19:35
    }

    bb7: {
        _24 = &_21;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _270 = const _;                  // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &bool, val: Unevaluated(main, [], Some(promoted[9])) }
        _25 = _270;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _23 = (move _24, move _25);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _26 = (_23.0: &bool);            // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _27 = (_23.1: &bool);            // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _30 = (*_26);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _31 = const false;               // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _29 = Eq(move _30, move _31);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _28 = Not(move _29);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _28) -> [0: bb9, otherwise: bb8]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _32 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _34 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = _26;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _36;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _27;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _37 = _38;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _33 = core::panicking::assert_failed::<bool, bool>(move _34, move _35, move _37, move _39); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb9: {
        _41 = _21;                       // scope 5 at ui/try-block/try-block.rs:22:16: 22:21
        switchInt(move _41) -> [0: bb11, otherwise: bb10]; // scope 5 at ui/try-block/try-block.rs:22:16: 22:21
    }

    bb10: {
        _40 = const false;               // scope 5 at ui/try-block/try-block.rs:22:24: 22:29
        goto -> bb12;                    // scope 5 at ui/try-block/try-block.rs:22:13: 22:45
    }

    bb11: {
        _40 = const true;                // scope 5 at ui/try-block/try-block.rs:22:39: 22:43
        goto -> bb12;                    // scope 5 at ui/try-block/try-block.rs:22:13: 22:45
    }

    bb12: {
        _21 = move _40;                  // scope 5 at ui/try-block/try-block.rs:22:5: 22:45
        _43 = &_21;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _269 = const _;                  // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &bool, val: Unevaluated(main, [], Some(promoted[8])) }
        _44 = _269;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _42 = (move _43, move _44);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _45 = (_42.0: &bool);            // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _46 = (_42.1: &bool);            // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _49 = (*_45);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _50 = const true;                // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _48 = Eq(move _49, move _50);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _47 = Not(move _48);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _47) -> [0: bb14, otherwise: bb13]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _51 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _53 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _55 = _45;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _54 = _55;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _46;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _56 = _57;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _52 = core::panicking::assert_failed::<bool, bool>(move _53, move _54, move _56, move _58); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb14: {
        _61 = Result::<(), i32>::Err(const 22_i32); // scope 5 at ui/try-block/try-block.rs:30:9: 30:16
        _60 = <Result<(), i32> as Try>::branch(move _61) -> bb15; // scope 5 at ui/try-block/try-block.rs:30:9: 30:17
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:30:9: 30:17
                                         // + literal: Const { ty: fn(Result<(), i32>) -> ControlFlow<<Result<(), i32> as Try>::Residual, <Result<(), i32> as Try>::Output> {<Result<(), i32> as Try>::branch}, val: Value(<ZST>) }
    }

    bb15: {
        _62 = discriminant(_60);         // scope 5 at ui/try-block/try-block.rs:30:9: 30:17
        switchInt(move _62) -> [0: bb16, 1: bb18, otherwise: bb17]; // scope 5 at ui/try-block/try-block.rs:30:9: 30:17
    }

    bb16: {
        _59 = <Result<i32, i32> as Try>::from_output(const 1_i32) -> bb19; // scope 5 at ui/try-block/try-block.rs:31:9: 31:10
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:31:9: 31:10
                                         // + literal: Const { ty: fn(<Result<i32, i32> as Try>::Output) -> Result<i32, i32> {<Result<i32, i32> as Try>::from_output}, val: Value(<ZST>) }
    }

    bb17: {
        unreachable;                     // scope 5 at ui/try-block/try-block.rs:30:9: 30:17
    }

    bb18: {
        _63 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 5 at ui/try-block/try-block.rs:30:16: 30:17
        _64 = _63;                       // scope 12 at ui/try-block/try-block.rs:30:16: 30:17
        _59 = <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual(move _64) -> bb19; // scope 12 at ui/try-block/try-block.rs:30:9: 30:17
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:30:16: 30:17
                                         // + literal: Const { ty: fn(Result<Infallible, i32>) -> Result<i32, i32> {<Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual}, val: Value(<ZST>) }
    }

    bb19: {
        _67 = &_59;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _268 = const _;                  // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Result<i32, i32>, val: Unevaluated(main, [], Some(promoted[7])) }
        _68 = _268;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _66 = (move _67, move _68);      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _69 = (_66.0: &std::result::Result<i32, i32>); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _70 = (_66.1: &std::result::Result<i32, i32>); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _73 = _69;                       // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _74 = _70;                       // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _72 = <Result<i32, i32> as PartialEq>::eq(move _73, move _74) -> bb20; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, i32>, &'b Result<i32, i32>) -> bool {<Result<i32, i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb20: {
        _71 = Not(move _72);             // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _71) -> [0: bb22, otherwise: bb21]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb21: {
        _75 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _77 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = _69;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _78 = _79;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _81 = _70;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _80 = _81;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _76 = core::panicking::assert_failed::<Result<i32, i32>, Result<i32, i32>>(move _77, move _78, move _80, move _82); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, i32>, &'b Result<i32, i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, i32>, Result<i32, i32>>}, val: Value(<ZST>) }
    }

    bb22: {
        _87 = Result::<(), i32>::Ok(move _88); // scope 10 at ui/try-block/try-block.rs:37:9: 37:26
        _86 = <Result<(), i32> as Try>::branch(move _87) -> bb23; // scope 10 at ui/try-block/try-block.rs:37:9: 37:27
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:37:9: 37:27
                                         // + literal: Const { ty: fn(Result<(), i32>) -> ControlFlow<<Result<(), i32> as Try>::Residual, <Result<(), i32> as Try>::Output> {<Result<(), i32> as Try>::branch}, val: Value(<ZST>) }
    }

    bb23: {
        _89 = discriminant(_86);         // scope 10 at ui/try-block/try-block.rs:37:9: 37:27
        switchInt(move _89) -> [0: bb24, 1: bb26, otherwise: bb25]; // scope 10 at ui/try-block/try-block.rs:37:9: 37:27
    }

    bb24: {
        _83 = <Result<i32, i32> as Try>::from_output(const 28_i32) -> bb27; // scope 10 at ui/try-block/try-block.rs:38:9: 38:11
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:38:9: 38:11
                                         // + literal: Const { ty: fn(<Result<i32, i32> as Try>::Output) -> Result<i32, i32> {<Result<i32, i32> as Try>::from_output}, val: Value(<ZST>) }
    }

    bb25: {
        unreachable;                     // scope 10 at ui/try-block/try-block.rs:37:9: 37:27
    }

    bb26: {
        _90 = ((_86 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 10 at ui/try-block/try-block.rs:37:26: 37:27
        _91 = _90;                       // scope 23 at ui/try-block/try-block.rs:37:26: 37:27
        _83 = <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual(move _91) -> bb27; // scope 23 at ui/try-block/try-block.rs:37:9: 37:27
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:37:26: 37:27
                                         // + literal: Const { ty: fn(Result<Infallible, i32>) -> Result<i32, i32> {<Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual}, val: Value(<ZST>) }
    }

    bb27: {
        _94 = &_83;                      // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _267 = const _;                  // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Result<i32, i32>, val: Unevaluated(main, [], Some(promoted[6])) }
        _95 = _267;                      // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _93 = (move _94, move _95);      // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _96 = (_93.0: &std::result::Result<i32, i32>); // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _97 = (_93.1: &std::result::Result<i32, i32>); // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _100 = _96;                      // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _101 = _97;                      // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _99 = <Result<i32, i32> as PartialEq>::eq(move _100, move _101) -> bb28; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, i32>, &'b Result<i32, i32>) -> bool {<Result<i32, i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb28: {
        _98 = Not(move _99);             // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _98) -> [0: bb30, otherwise: bb29]; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb29: {
        _102 = const core::panicking::AssertKind::Eq; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _104 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _106 = _96;                      // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _105 = _106;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _108 = _97;                      // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _107 = _108;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _109 = Option::<Arguments<'_>>::None; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _103 = core::panicking::assert_failed::<Result<i32, i32>, Result<i32, i32>>(move _104, move _105, move _107, move _109); // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, i32>, &'b Result<i32, i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, i32>, Result<i32, i32>>}, val: Value(<ZST>) }
    }

    bb30: {
        _112 = std::ops::Range::<i32> { start: const 0_i32, end: const 10_i32 }; // scope 17 at ui/try-block/try-block.rs:43:18: 43:23
        _111 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _112) -> bb31; // scope 17 at ui/try-block/try-block.rs:43:18: 43:23
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:43:18: 43:23
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb31: {
        _113 = move _111;                // scope 17 at ui/try-block/try-block.rs:43:18: 43:23
        goto -> bb32;                    // scope 29 at ui/try-block/try-block.rs:43:9: 45:10
    }

    bb32: {
        _116 = &mut _113;                // scope 29 at ui/try-block/try-block.rs:43:18: 43:23
        _115 = &mut (*_116);             // scope 29 at ui/try-block/try-block.rs:43:18: 43:23
        _114 = <std::ops::Range<i32> as Iterator>::next(move _115) -> bb33; // scope 29 at ui/try-block/try-block.rs:43:18: 43:23
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:43:18: 43:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb33: {
        _117 = discriminant(_114);       // scope 29 at ui/try-block/try-block.rs:43:18: 43:23
        switchInt(move _117) -> [0: bb36, 1: bb34, otherwise: bb35]; // scope 29 at ui/try-block/try-block.rs:43:18: 43:23
    }

    bb34: {
        _118 = ((_114 as Some).0: i32);  // scope 29 at ui/try-block/try-block.rs:43:13: 43:14
        _120 = _118;                     // scope 30 at ui/try-block/try-block.rs:44:16: 44:17
        _119 = Lt(move _120, const 5_i32); // scope 30 at ui/try-block/try-block.rs:44:16: 44:21
        switchInt(move _119) -> [0: bb42, otherwise: bb37]; // scope 30 at ui/try-block/try-block.rs:44:16: 44:21
    }

    bb35: {
        unreachable;                     // scope 29 at ui/try-block/try-block.rs:43:18: 43:23
    }

    bb36: {
        _110 = <Result<i32, i32> as Try>::from_output(const 22_i32) -> bb46; // scope 17 at ui/try-block/try-block.rs:46:9: 46:11
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:46:9: 46:11
                                         // + literal: Const { ty: fn(<Result<i32, i32> as Try>::Output) -> Result<i32, i32> {<Result<i32, i32> as Try>::from_output}, val: Value(<ZST>) }
    }

    bb37: {
        _123 = _118;                     // scope 30 at ui/try-block/try-block.rs:44:39: 44:40
        _122 = Result::<i32, i32>::Ok(move _123); // scope 30 at ui/try-block/try-block.rs:44:24: 44:41
        _121 = <Result<i32, i32> as Try>::branch(move _122) -> bb38; // scope 30 at ui/try-block/try-block.rs:44:24: 44:42
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:44:24: 44:42
                                         // + literal: Const { ty: fn(Result<i32, i32>) -> ControlFlow<<Result<i32, i32> as Try>::Residual, <Result<i32, i32> as Try>::Output> {<Result<i32, i32> as Try>::branch}, val: Value(<ZST>) }
    }

    bb38: {
        _124 = discriminant(_121);       // scope 30 at ui/try-block/try-block.rs:44:24: 44:42
        switchInt(move _124) -> [0: bb39, 1: bb41, otherwise: bb40]; // scope 30 at ui/try-block/try-block.rs:44:24: 44:42
    }

    bb39: {
        _127 = ((_121 as Continue).0: i32); // scope 30 at ui/try-block/try-block.rs:44:24: 44:42
        goto -> bb32;                    // scope 30 at ui/try-block/try-block.rs:44:13: 44:63
    }

    bb40: {
        unreachable;                     // scope 30 at ui/try-block/try-block.rs:44:24: 44:42
    }

    bb41: {
        _125 = ((_121 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 30 at ui/try-block/try-block.rs:44:41: 44:42
        _126 = _125;                     // scope 32 at ui/try-block/try-block.rs:44:41: 44:42
        _110 = <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual(move _126) -> bb46; // scope 32 at ui/try-block/try-block.rs:44:24: 44:42
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:44:41: 44:42
                                         // + literal: Const { ty: fn(Result<Infallible, i32>) -> Result<i32, i32> {<Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual}, val: Value(<ZST>) }
    }

    bb42: {
        _130 = _118;                     // scope 30 at ui/try-block/try-block.rs:44:57: 44:58
        _129 = Result::<(), i32>::Err(move _130); // scope 30 at ui/try-block/try-block.rs:44:53: 44:59
        _128 = <Result<(), i32> as Try>::branch(move _129) -> bb43; // scope 30 at ui/try-block/try-block.rs:44:53: 44:60
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:44:53: 44:60
                                         // + literal: Const { ty: fn(Result<(), i32>) -> ControlFlow<<Result<(), i32> as Try>::Residual, <Result<(), i32> as Try>::Output> {<Result<(), i32> as Try>::branch}, val: Value(<ZST>) }
    }

    bb43: {
        _131 = discriminant(_128);       // scope 30 at ui/try-block/try-block.rs:44:53: 44:60
        switchInt(move _131) -> [0: bb32, 1: bb45, otherwise: bb44]; // scope 30 at ui/try-block/try-block.rs:44:53: 44:60
    }

    bb44: {
        unreachable;                     // scope 30 at ui/try-block/try-block.rs:44:53: 44:60
    }

    bb45: {
        _132 = ((_128 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 30 at ui/try-block/try-block.rs:44:59: 44:60
        _133 = _132;                     // scope 36 at ui/try-block/try-block.rs:44:59: 44:60
        _110 = <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual(move _133) -> bb46; // scope 36 at ui/try-block/try-block.rs:44:53: 44:60
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:44:59: 44:60
                                         // + literal: Const { ty: fn(Result<Infallible, i32>) -> Result<i32, i32> {<Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual}, val: Value(<ZST>) }
    }

    bb46: {
        _136 = &_110;                    // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _266 = const _;                  // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Result<i32, i32>, val: Unevaluated(main, [], Some(promoted[5])) }
        _137 = _266;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _135 = (move _136, move _137);   // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _138 = (_135.0: &std::result::Result<i32, i32>); // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _139 = (_135.1: &std::result::Result<i32, i32>); // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _142 = _138;                     // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _143 = _139;                     // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _141 = <Result<i32, i32> as PartialEq>::eq(move _142, move _143) -> bb47; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, i32>, &'b Result<i32, i32>) -> bool {<Result<i32, i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb47: {
        _140 = Not(move _141);           // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _140) -> [0: bb49, otherwise: bb48]; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb48: {
        _144 = const core::panicking::AssertKind::Eq; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _146 = const core::panicking::AssertKind::Eq; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _148 = _138;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _147 = _148;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _150 = _139;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _149 = _150;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _151 = Option::<Arguments<'_>>::None; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _145 = core::panicking::assert_failed::<Result<i32, i32>, Result<i32, i32>>(move _146, move _147, move _149, move _151); // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, i32>, &'b Result<i32, i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, i32>, Result<i32, i32>>}, val: Value(<ZST>) }
    }

    bb49: {
        _152 = const 5_i32;              // scope 41 at ui/try-block/try-block.rs:52:9: 52:21
        _153 = <Result<(), ()> as Try>::from_output(move _154) -> bb50; // scope 41 at ui/try-block/try-block.rs:53:5: 53:6
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:53:5: 53:6
                                         // + literal: Const { ty: fn(<Result<(), ()> as Try>::Output) -> Result<(), ()> {<Result<(), ()> as Try>::from_output}, val: Value(<ZST>) }
    }

    bb50: {
        _156 = &_152;                    // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _265 = const _;                  // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[4])) }
        _157 = _265;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _155 = (move _156, move _157);   // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _158 = (_155.0: &i32);           // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _159 = (_155.1: &i32);           // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _162 = (*_158);                  // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _163 = const 5_i32;              // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _161 = Eq(move _162, move _163); // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _160 = Not(move _161);           // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _160) -> [0: bb52, otherwise: bb51]; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb51: {
        _164 = const core::panicking::AssertKind::Eq; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _166 = const core::panicking::AssertKind::Eq; // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _168 = _158;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _167 = _168;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _170 = _159;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _169 = _170;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _171 = Option::<Arguments<'_>>::None; // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _165 = core::panicking::assert_failed::<i32, i32>(move _166, move _167, move _169, move _171); // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb52: {
        _172 = const 6_i32;              // scope 45 at ui/try-block/try-block.rs:58:9: 58:23
        _175 = const Result::<(), ()>::Err(()); // scope 45 at ui/try-block/try-block.rs:59:9: 59:16
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:59:9: 59:16
                                         // + literal: Const { ty: Result<(), ()>, val: Value(Scalar(0x01)) }
        _174 = <Result<(), ()> as Try>::branch(move _175) -> bb53; // scope 45 at ui/try-block/try-block.rs:59:9: 59:17
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:59:9: 59:17
                                         // + literal: Const { ty: fn(Result<(), ()>) -> ControlFlow<<Result<(), ()> as Try>::Residual, <Result<(), ()> as Try>::Output> {<Result<(), ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb53: {
        _176 = discriminant(_174);       // scope 45 at ui/try-block/try-block.rs:59:9: 59:17
        switchInt(move _176) -> [0: bb54, 1: bb56, otherwise: bb55]; // scope 45 at ui/try-block/try-block.rs:59:9: 59:17
    }

    bb54: {
        _173 = <Result<(), ()> as Try>::from_output(move _180) -> bb57; // scope 45 at ui/try-block/try-block.rs:60:5: 60:6
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:60:5: 60:6
                                         // + literal: Const { ty: fn(<Result<(), ()> as Try>::Output) -> Result<(), ()> {<Result<(), ()> as Try>::from_output}, val: Value(<ZST>) }
    }

    bb55: {
        unreachable;                     // scope 45 at ui/try-block/try-block.rs:59:9: 59:17
    }

    bb56: {
        _173 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _178) -> bb57; // scope 48 at ui/try-block/try-block.rs:59:9: 59:17
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:59:16: 59:17
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb57: {
        _182 = &_172;                    // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _264 = const _;                  // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[3])) }
        _183 = _264;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _181 = (move _182, move _183);   // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _184 = (_181.0: &i32);           // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _185 = (_181.1: &i32);           // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _188 = (*_184);                  // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _189 = const 6_i32;              // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _187 = Eq(move _188, move _189); // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _186 = Not(move _187);           // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _186) -> [0: bb59, otherwise: bb58]; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb58: {
        _190 = const core::panicking::AssertKind::Eq; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _192 = const core::panicking::AssertKind::Eq; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _194 = _184;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _193 = _194;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _196 = _185;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _195 = _196;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _197 = Option::<Arguments<'_>>::None; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _191 = core::panicking::assert_failed::<i32, i32>(move _192, move _193, move _195, move _197); // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb59: {
        _200 = const "test";             // scope 46 at ui/try-block/try-block.rs:63:21: 63:27
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:63:21: 63:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _199 = _200;                     // scope 46 at ui/try-block/try-block.rs:63:21: 63:39
        _198 = <str as ToString>::to_string(move _199) -> bb60; // scope 46 at ui/try-block/try-block.rs:63:21: 63:39
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:63:28: 63:37
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb60: {
        _204 = &_198;                    // scope 53 at ui/try-block/try-block.rs:66:10: 66:19
        _203 = <String as Index<RangeFull>>::index(move _204, move _205) -> [return: bb61, unwind: bb75]; // scope 53 at ui/try-block/try-block.rs:66:10: 66:23
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:66:10: 66:23
                                         // + literal: Const { ty: for<'a> fn(&'a String, RangeFull) -> &'a <String as Index<RangeFull>>::Output {<String as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb61: {
        _202 = _203;                     // scope 53 at ui/try-block/try-block.rs:66:9: 66:23
        _201 = <Result<&str, ()> as Try>::from_output(move _202) -> [return: bb62, unwind: bb75]; // scope 53 at ui/try-block/try-block.rs:66:9: 66:23
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:66:9: 66:23
                                         // + literal: Const { ty: fn(<Result<&str, ()> as Try>::Output) -> Result<&str, ()> {<Result<&str, ()> as Try>::from_output}, val: Value(<ZST>) }
    }

    bb62: {
        _207 = &_201;                    // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _263 = const _;                  // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Result<&str, ()>, val: Unevaluated(main, [], Some(promoted[2])) }
        _208 = _263;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _206 = (move _207, move _208);   // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _209 = (_206.0: &std::result::Result<&str, ()>); // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _210 = (_206.1: &std::result::Result<&str, ()>); // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _213 = _209;                     // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _214 = _210;                     // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _212 = <Result<&str, ()> as PartialEq>::eq(move _213, move _214) -> [return: bb63, unwind: bb75]; // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<&str, ()>, &'b Result<&str, ()>) -> bool {<Result<&str, ()> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb63: {
        _211 = Not(move _212);           // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _211) -> [0: bb65, otherwise: bb64]; // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb64: {
        _215 = const core::panicking::AssertKind::Eq; // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _217 = const core::panicking::AssertKind::Eq; // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _219 = _209;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _218 = _219;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _221 = _210;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _220 = _221;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _222 = Option::<Arguments<'_>>::None; // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _216 = core::panicking::assert_failed::<Result<&str, ()>, Result<&str, ()>>(move _217, move _218, move _220, move _222) -> bb75; // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<&str, ()>, &'b Result<&str, ()>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<&str, ()>, Result<&str, ()>>}, val: Value(<ZST>) }
    }

    bb65: {
        _223 = <Option<()> as Try>::from_output(move _224) -> [return: bb66, unwind: bb75]; // scope 54 at ui/try-block/try-block.rs:70:35: 70:37
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:70:35: 70:37
                                         // + literal: Const { ty: fn(<Option<()> as Try>::Output) -> Option<()> {<Option<()> as Try>::from_output}, val: Value(<ZST>) }
    }

    bb66: {
        _226 = &_223;                    // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _262 = const _;                  // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<()>, val: Unevaluated(main, [], Some(promoted[1])) }
        _227 = _262;                     // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _225 = (move _226, move _227);   // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _228 = (_225.0: &std::option::Option<()>); // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _229 = (_225.1: &std::option::Option<()>); // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _232 = _228;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _233 = _229;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _231 = <Option<()> as PartialEq>::eq(move _232, move _233) -> [return: bb67, unwind: bb75]; // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<()>, &'b Option<()>) -> bool {<Option<()> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb67: {
        _230 = Not(move _231);           // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _230) -> [0: bb69, otherwise: bb68]; // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb68: {
        _234 = const core::panicking::AssertKind::Eq; // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _236 = const core::panicking::AssertKind::Eq; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _238 = _228;                     // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _237 = _238;                     // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _240 = _229;                     // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _239 = _240;                     // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _241 = Option::<Arguments<'_>>::None; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _235 = core::panicking::assert_failed::<Option<()>, Option<()>>(move _236, move _237, move _239, move _241) -> bb75; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<()>, &'b Option<()>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<()>, Option<()>>}, val: Value(<ZST>) }
    }

    bb69: {
        _242 = <Option<()> as Try>::from_output(move _243) -> [return: bb70, unwind: bb75]; // scope 57 at ui/try-block/try-block.rs:73:35: 73:36
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:73:35: 73:36
                                         // + literal: Const { ty: fn(<Option<()> as Try>::Output) -> Option<()> {<Option<()> as Try>::from_output}, val: Value(<ZST>) }
    }

    bb70: {
        _245 = &_242;                    // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _261 = const _;                  // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<()>, val: Unevaluated(main, [], Some(promoted[0])) }
        _246 = _261;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _244 = (move _245, move _246);   // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _247 = (_244.0: &std::option::Option<()>); // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _248 = (_244.1: &std::option::Option<()>); // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _251 = _247;                     // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _252 = _248;                     // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _250 = <Option<()> as PartialEq>::eq(move _251, move _252) -> [return: bb71, unwind: bb75]; // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<()>, &'b Option<()>) -> bool {<Option<()> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb71: {
        _249 = Not(move _250);           // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _249) -> [0: bb73, otherwise: bb72]; // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb72: {
        _253 = const core::panicking::AssertKind::Eq; // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _255 = const core::panicking::AssertKind::Eq; // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _257 = _247;                     // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _256 = _257;                     // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _259 = _248;                     // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _258 = _259;                     // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _260 = Option::<Arguments<'_>>::None; // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _254 = core::panicking::assert_failed::<Option<()>, Option<()>>(move _255, move _256, move _258, move _260) -> bb75; // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<()>, &'b Option<()>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<()>, Option<()>>}, val: Value(<ZST>) }
    }

    bb73: {
        drop(_198) -> bb74;              // scope 46 at ui/try-block/try-block.rs:75:1: 75:2
    }

    bb74: {
        return;                          // scope 0 at ui/try-block/try-block.rs:75:2: 75:2
    }

    bb75 (cleanup): {
        drop(_198) -> bb76;              // scope 46 at ui/try-block/try-block.rs:75:1: 75:2
    }

    bb76 (cleanup): {
        resume;                          // scope 0 at ui/try-block/try-block.rs:11:1: 75:2
    }
}

promoted[0] in main: &Option<()> = {
    let mut _0: &std::option::Option<()>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<()>; // in scope 0 at ui/try-block/try-block.rs:74:24: 74:32
    let mut _2: ();                      // in scope 0 at ui/try-block/try-block.rs:74:29: 74:31

    bb0: {
        _2 = ();                         // scope 0 at ui/try-block/try-block.rs:74:29: 74:31
        _1 = Option::<()>::Some(move _2); // scope 0 at ui/try-block/try-block.rs:74:24: 74:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &Option<()> = {
    let mut _0: &std::option::Option<()>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<()>; // in scope 0 at ui/try-block/try-block.rs:71:24: 71:32
    let mut _2: ();                      // in scope 0 at ui/try-block/try-block.rs:71:29: 71:31

    bb0: {
        _2 = ();                         // scope 0 at ui/try-block/try-block.rs:71:29: 71:31
        _1 = Option::<()>::Some(move _2); // scope 0 at ui/try-block/try-block.rs:71:24: 71:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &Result<&str, ()> = {
    let mut _0: &std::result::Result<&str, ()>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::result::Result<&str, ()>; // in scope 0 at ui/try-block/try-block.rs:68:21: 68:31

    bb0: {
        _1 = Result::<&str, ()>::Ok(const "test"); // scope 0 at ui/try-block/try-block.rs:68:21: 68:31
                                         // mir::Constant
                                         // + span: ui/try-block/try-block.rs:68:24: 68:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/try-block/try-block.rs:61:28: 61:29

    bb0: {
        _1 = const 6_i32;                // scope 0 at ui/try-block/try-block.rs:61:28: 61:29
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/try-block/try-block.rs:54:26: 54:27

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/try-block/try-block.rs:54:26: 54:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &Result<i32, i32> = {
    let mut _0: &std::result::Result<i32, i32>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::result::Result<i32, i32>; // in scope 0 at ui/try-block/try-block.rs:48:33: 48:39

    bb0: {
        _1 = Result::<i32, i32>::Err(const 5_i32); // scope 0 at ui/try-block/try-block.rs:48:33: 48:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[6] in main: &Result<i32, i32> = {
    let mut _0: &std::result::Result<i32, i32>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::result::Result<i32, i32>; // in scope 0 at ui/try-block/try-block.rs:40:28: 40:34

    bb0: {
        _1 = Result::<i32, i32>::Ok(const 28_i32); // scope 0 at ui/try-block/try-block.rs:40:28: 40:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[7] in main: &Result<i32, i32> = {
    let mut _0: &std::result::Result<i32, i32>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::result::Result<i32, i32>; // in scope 0 at ui/try-block/try-block.rs:33:27: 33:34

    bb0: {
        _1 = Result::<i32, i32>::Err(const 22_i32); // scope 0 at ui/try-block/try-block.rs:33:27: 33:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[8] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: bool;                    // in scope 0 at ui/try-block/try-block.rs:23:23: 23:27

    bb0: {
        _1 = const true;                 // scope 0 at ui/try-block/try-block.rs:23:23: 23:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[9] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: bool;                    // in scope 0 at ui/try-block/try-block.rs:20:23: 20:28

    bb0: {
        _1 = const false;                // scope 0 at ui/try-block/try-block.rs:20:23: 20:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[10] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<i32>; // in scope 0 at ui/try-block/try-block.rs:16:30: 16:37

    bb0: {
        _1 = Option::<i32>::Some(const 5_i32); // scope 0 at ui/try-block/try-block.rs:16:30: 16:37
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
