// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn consume(_1: Result<T, T>) -> T {
    let mut _0: T;                       // return place in scope 0 at ui/try-block/try-block-unused-delims.rs:8:35: 8:36
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_1) -> bb2;                 // scope 0 at ui/try-block/try-block-unused-delims.rs:8:47: 8:48
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/try-block/try-block-unused-delims.rs:8:1: 8:48
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/try-block/try-block-unused-delims.rs:10:11: 10:11
    let _1: ();                          // in scope 0 at ui/try-block/try-block-unused-delims.rs:11:5: 11:22
    let mut _2: std::result::Result<(), ()>; // in scope 0 at ui/try-block/try-block-unused-delims.rs:11:13: 11:21
    let mut _3: ();                      // in scope 0 at ui/try-block/try-block-unused-delims.rs:11:19: 11:20
    let _4: ();                          // in scope 0 at ui/try-block/try-block-unused-delims.rs:14:5: 14:24
    let mut _5: std::result::Result<(), ()>; // in scope 0 at ui/try-block/try-block-unused-delims.rs:14:13: 14:23
    let mut _6: ();                      // in scope 0 at ui/try-block/try-block-unused-delims.rs:14:20: 14:21
    let mut _7: std::result::Result<(), ()>; // in scope 0 at ui/try-block/try-block-unused-delims.rs:17:11: 17:19
    let mut _8: ();                      // in scope 0 at ui/try-block/try-block-unused-delims.rs:17:17: 17:18
    let mut _9: isize;                   // in scope 0 at ui/try-block/try-block-unused-delims.rs:19:9: 19:15
    let mut _10: std::result::Result<(), ()>; // in scope 0 at ui/try-block/try-block-unused-delims.rs:22:22: 22:30
    let mut _11: ();                     // in scope 0 at ui/try-block/try-block-unused-delims.rs:22:28: 22:29
    let mut _12: std::result::Result<(), ()>; // in scope 0 at ui/try-block/try-block-unused-delims.rs:25:11: 25:19
    let mut _13: ();                     // in scope 0 at ui/try-block/try-block-unused-delims.rs:25:17: 25:18
    let mut _14: isize;                  // in scope 0 at ui/try-block/try-block-unused-delims.rs:27:9: 27:15
    scope 1 {
    }

    bb0: {
        _2 = <Result<(), ()> as Try>::from_output(move _3) -> bb1; // scope 0 at ui/try-block/try-block-unused-delims.rs:11:19: 11:20
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unused-delims.rs:11:19: 11:20
                                         // + literal: Const { ty: fn(<Result<(), ()> as Try>::Output) -> Result<(), ()> {<Result<(), ()> as Try>::from_output}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = consume::<()>(move _2) -> bb2; // scope 0 at ui/try-block/try-block-unused-delims.rs:11:5: 11:22
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unused-delims.rs:11:5: 11:12
                                         // + literal: Const { ty: fn(Result<(), ()>) {consume::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = <Result<(), ()> as Try>::from_output(move _6) -> bb3; // scope 0 at ui/try-block/try-block-unused-delims.rs:14:20: 14:21
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unused-delims.rs:14:20: 14:21
                                         // + literal: Const { ty: fn(<Result<(), ()> as Try>::Output) -> Result<(), ()> {<Result<(), ()> as Try>::from_output}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = consume::<()>(move _5) -> bb4; // scope 0 at ui/try-block/try-block-unused-delims.rs:14:5: 14:24
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unused-delims.rs:14:5: 14:12
                                         // + literal: Const { ty: fn(Result<(), ()>) {consume::<()>}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = <Result<(), ()> as Try>::from_output(move _8) -> bb5; // scope 0 at ui/try-block/try-block-unused-delims.rs:17:17: 17:18
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unused-delims.rs:17:17: 17:18
                                         // + literal: Const { ty: fn(<Result<(), ()> as Try>::Output) -> Result<(), ()> {<Result<(), ()> as Try>::from_output}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = discriminant(_7);           // scope 0 at ui/try-block/try-block-unused-delims.rs:17:11: 17:19
        switchInt(move _9) -> [0: bb7, 1: bb7, otherwise: bb6]; // scope 0 at ui/try-block/try-block-unused-delims.rs:17:5: 17:19
    }

    bb6: {
        unreachable;                     // scope 0 at ui/try-block/try-block-unused-delims.rs:17:11: 17:19
    }

    bb7: {
        _10 = <Result<(), ()> as Try>::from_output(move _11) -> bb8; // scope 1 at ui/try-block/try-block-unused-delims.rs:22:28: 22:29
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unused-delims.rs:22:28: 22:29
                                         // + literal: Const { ty: fn(<Result<(), ()> as Try>::Output) -> Result<(), ()> {<Result<(), ()> as Try>::from_output}, val: Value(<ZST>) }
    }

    bb8: {
        _12 = <Result<(), ()> as Try>::from_output(move _13) -> bb9; // scope 0 at ui/try-block/try-block-unused-delims.rs:25:17: 25:18
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unused-delims.rs:25:17: 25:18
                                         // + literal: Const { ty: fn(<Result<(), ()> as Try>::Output) -> Result<(), ()> {<Result<(), ()> as Try>::from_output}, val: Value(<ZST>) }
    }

    bb9: {
        _14 = discriminant(_12);         // scope 0 at ui/try-block/try-block-unused-delims.rs:25:11: 25:19
        switchInt(move _14) -> [0: bb11, 1: bb11, otherwise: bb10]; // scope 0 at ui/try-block/try-block-unused-delims.rs:25:5: 25:19
    }

    bb10: {
        unreachable;                     // scope 0 at ui/try-block/try-block-unused-delims.rs:25:11: 25:19
    }

    bb11: {
        return;                          // scope 0 at ui/try-block/try-block-unused-delims.rs:29:2: 29:2
    }
}
