// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/try-block/issue-45124.rs:7:11: 7:11
    let mut _1: i32;                     // in scope 0 at ui/try-block/issue-45124.rs:8:9: 8:14
    let mut _2: std::result::Result<(), ()>; // in scope 0 at ui/try-block/issue-45124.rs:10:33: 13:10
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>>; // in scope 0 at ui/try-block/issue-45124.rs:11:21: 11:29
    let mut _4: std::result::Result<(), ()>; // in scope 0 at ui/try-block/issue-45124.rs:11:21: 11:28
    let mut _5: isize;                   // in scope 0 at ui/try-block/issue-45124.rs:11:28: 11:29
    let mut _7: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/try-block/issue-45124.rs:11:28: 11:29
    let mut _9: (i32, bool);             // in scope 0 at ui/try-block/issue-45124.rs:14:9: 14:15
    let mut _10: (i32, bool);            // in scope 0 at ui/try-block/issue-45124.rs:16:5: 16:11
    let mut _11: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _12: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _13: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _18: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _19: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _21: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _22: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _23: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _24: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _25: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _26: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/try-block/issue-45124.rs:8:9: 8:14
        let _6: std::result::Result<std::convert::Infallible, ()>; // in scope 1 at ui/try-block/issue-45124.rs:11:28: 11:29
        let _8: ();                      // in scope 1 at ui/try-block/issue-45124.rs:11:21: 11:29
        scope 2 {
            let _14: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _15: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _28: &i32;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 9 {
                debug left_val => _14;   // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _15;  // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _20: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 10 {
                    debug kind => _20;   // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
        scope 3 {
        }
        scope 4 {
        }
        scope 5 {
            debug residual => _6;        // in scope 5 at ui/try-block/issue-45124.rs:11:28: 11:29
            scope 6 {
            }
        }
        scope 7 {
            debug val => _8;             // in scope 7 at ui/try-block/issue-45124.rs:11:21: 11:29
            scope 8 {
            }
        }
    }

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/try-block/issue-45124.rs:8:17: 8:18
        _4 = const Result::<(), ()>::Err(()); // scope 1 at ui/try-block/issue-45124.rs:11:21: 11:28
                                         // mir::Constant
                                         // + span: ui/try-block/issue-45124.rs:11:21: 11:28
                                         // + literal: Const { ty: Result<(), ()>, val: Value(Scalar(0x01)) }
        _3 = <Result<(), ()> as Try>::branch(move _4) -> bb1; // scope 1 at ui/try-block/issue-45124.rs:11:21: 11:29
                                         // mir::Constant
                                         // + span: ui/try-block/issue-45124.rs:11:21: 11:29
                                         // + literal: Const { ty: fn(Result<(), ()>) -> ControlFlow<<Result<(), ()> as Try>::Residual, <Result<(), ()> as Try>::Output> {<Result<(), ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_3);           // scope 1 at ui/try-block/issue-45124.rs:11:21: 11:29
        switchInt(move _5) -> [0: bb8, 1: bb3, otherwise: bb2]; // scope 1 at ui/try-block/issue-45124.rs:11:21: 11:29
    }

    bb2: {
        unreachable;                     // scope 1 at ui/try-block/issue-45124.rs:11:21: 11:29
    }

    bb3: {
        _2 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _7) -> bb4; // scope 6 at ui/try-block/issue-45124.rs:11:21: 11:29
                                         // mir::Constant
                                         // + span: ui/try-block/issue-45124.rs:11:28: 11:29
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = CheckedAdd(_1, const 1_i32); // scope 3 at ui/try-block/issue-45124.rs:14:9: 14:15
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb5; // scope 3 at ui/try-block/issue-45124.rs:14:9: 14:15
    }

    bb5: {
        _1 = move (_9.0: i32);           // scope 3 at ui/try-block/issue-45124.rs:14:9: 14:15
        _10 = CheckedAdd(_1, const 2_i32); // scope 2 at ui/try-block/issue-45124.rs:16:5: 16:11
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 2_i32) -> bb6; // scope 2 at ui/try-block/issue-45124.rs:16:5: 16:11
    }

    bb6: {
        _1 = move (_10.0: i32);          // scope 2 at ui/try-block/issue-45124.rs:16:5: 16:11
        _12 = &_1;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _28 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _13 = _28;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _11 = (move _12, move _13);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _14 = (_11.0: &i32);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _15 = (_11.1: &i32);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _18 = (*_14);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _19 = const 3_i32;               // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _17 = Eq(move _18, move _19);    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _16 = Not(move _17);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _16) -> [0: bb8, otherwise: bb7]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _20 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = _14;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _24;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _15;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = _26;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _21 = core::panicking::assert_failed::<i32, i32>(move _22, move _23, move _25, move _27); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/try-block/issue-45124.rs:18:2: 18:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/try-block/issue-45124.rs:17:19: 17:20

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/try-block/issue-45124.rs:17:19: 17:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
