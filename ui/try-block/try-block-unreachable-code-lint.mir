// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn err() -> Result<u32, ()> {
    let mut _0: std::result::Result<u32, ()>; // return place in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:8:13: 8:28
    let mut _1: ();                      // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:9:9: 9:11

    bb0: {
        _0 = Result::<u32, ()>::Err(move _1); // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:9:5: 9:12
        return;                          // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:10:2: 10:2
    }
}

fn test_ok_wrapped_divergent_expr_1() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:14:39: 14:39
    let _1: std::result::Result<u32, ()>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:15:9: 15:12
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, u32>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:17:13: 17:19
    let mut _3: std::result::Result<u32, ()>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:17:13: 17:18
    let mut _4: isize;                   // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:17:18: 17:19
    let _5: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:17:18: 17:19
    let mut _6: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:17:18: 17:19
    let _7: u32;                         // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:17:13: 17:19
    let _8: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _9: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[&str];                // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:20:14: 20:25
    let mut _11: &[&str; 2];             // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:20:14: 20:25
    let _12: &[&str; 2];                 // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:20:14: 20:25
    let mut _13: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:20:27: 20:30
    let mut _18: &std::result::Result<u32, ()>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:20:27: 20:30
    let _19: &std::result::Result<u32, ()>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:20:27: 20:30
    scope 1 {
        debug res => _1;                 // in scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:15:9: 15:12
        let mut _20: &[&str; 2];         // in scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:20:14: 20:25
    }
    scope 2 {
        debug residual => _5;            // in scope 2 at ui/try-block/try-block-unreachable-code-lint.rs:17:18: 17:19
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;                 // in scope 4 at ui/try-block/try-block-unreachable-code-lint.rs:17:13: 17:19
        scope 5 {
        }
    }

    bb0: {
        goto -> bb1;                     // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:16:9: 18:10
    }

    bb1: {
        _3 = err() -> bb2;               // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:17:13: 17:18
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:17:13: 17:16
                                         // + literal: Const { ty: fn() -> Result<u32, ()> {err}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = <Result<u32, ()> as Try>::branch(move _3) -> bb3; // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:17:13: 17:19
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:17:13: 17:19
                                         // + literal: Const { ty: fn(Result<u32, ()>) -> ControlFlow<<Result<u32, ()> as Try>::Residual, <Result<u32, ()> as Try>::Output> {<Result<u32, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = discriminant(_2);           // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:17:13: 17:19
        switchInt(move _4) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:17:13: 17:19
    }

    bb4: {
        _7 = ((_2 as Continue).0: u32);  // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:17:13: 17:19
        goto -> bb1;                     // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:16:9: 18:10
    }

    bb5: {
        unreachable;                     // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:17:13: 17:19
    }

    bb6: {
        _1 = <Result<u32, ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _6) -> bb7; // scope 3 at ui/try-block/try-block-unreachable-code-lint.rs:17:13: 17:19
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:17:18: 17:19
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<u32, ()> {<Result<u32, ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb7: {
        _20 = const _;                   // scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:20:14: 20:25
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:20:14: 20:25
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(test_ok_wrapped_divergent_expr_1, [], Some(promoted[0])) }
        _12 = _20;                       // scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:20:14: 20:25
        _11 = _12;                       // scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:20:14: 20:25
        _10 = move _11 as &[&str] (Pointer(Unsize)); // scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:20:14: 20:25
        _19 = &_1;                       // scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:20:27: 20:30
        _18 = _19;                       // scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:20:27: 20:30
        _17 = core::fmt::ArgumentV1::<'_>::new_debug::<Result<u32, ()>>(move _18) -> bb8; // scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:20:27: 20:30
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:20:27: 20:30
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b Result<u32, ()>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Result<u32, ()>>}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = [move _17];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _15 = &_16;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = _15;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _13 = move _14 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> bb9; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _8 = _print(move _9) -> bb10;    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:21:2: 21:2
    }
}

promoted[0] in test_ok_wrapped_divergent_expr_1: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:20:14: 20:25
    let mut _1: [&str; 2];               // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:20:14: 20:25

    bb0: {
        _1 = [const "res: ", const "\n"]; // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:20:14: 20:25
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:20:14: 20:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:20:14: 20:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:20:14: 20:25
        return;                          // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:20:14: 20:25
    }
}

fn test_ok_wrapped_divergent_expr_2() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:23:39: 23:39
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:27:2: 27:2
    }
}

fn test_autogenerated_unit_after_divergent_expr() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:29:51: 29:51
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:33:2: 33:2
    }
}

fn test_try_block_after_divergent_stmt() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:37:42: 37:42
    let _1: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:43:22: 43:23
    let _2: u32;                         // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:43:17: 43:23
    scope 1 {
    }
    scope 2 {
        debug residual => _1;            // in scope 2 at ui/try-block/try-block-unreachable-code-lint.rs:43:22: 43:23
        scope 3 {
        }
    }
    scope 4 {
        debug val => _2;                 // in scope 4 at ui/try-block/try-block-unreachable-code-lint.rs:43:17: 43:23
        scope 5 {
        }
    }

    bb0: {
        return;                          // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:48:2: 48:2
    }
}

fn test_wrapped_divergent_expr() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:50:34: 50:34
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:55:2: 55:2
    }
}

fn test_expr_after_divergent_stmt_in_try_block() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:57:50: 57:50
    let _1: std::result::Result<u32, ()>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:58:9: 58:12
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, u32>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:60:13: 60:19
    let mut _3: std::result::Result<u32, ()>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:60:13: 60:18
    let mut _4: isize;                   // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:60:18: 60:19
    let _5: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:60:18: 60:19
    let mut _6: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:60:18: 60:19
    let _7: u32;                         // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:60:13: 60:19
    let _8: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _9: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[&str];                // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:66:14: 66:25
    let mut _11: &[&str; 2];             // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:66:14: 66:25
    let _12: &[&str; 2];                 // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:66:14: 66:25
    let mut _13: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:66:27: 66:30
    let mut _18: &std::result::Result<u32, ()>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:66:27: 66:30
    let _19: &std::result::Result<u32, ()>; // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:66:27: 66:30
    scope 1 {
        debug res => _1;                 // in scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:58:9: 58:12
        let mut _20: &[&str; 2];         // in scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:66:14: 66:25
    }
    scope 2 {
        debug residual => _5;            // in scope 2 at ui/try-block/try-block-unreachable-code-lint.rs:60:18: 60:19
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;                 // in scope 4 at ui/try-block/try-block-unreachable-code-lint.rs:60:13: 60:19
        scope 5 {
        }
    }

    bb0: {
        goto -> bb1;                     // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:59:9: 61:10
    }

    bb1: {
        _3 = err() -> bb2;               // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:60:13: 60:18
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:60:13: 60:16
                                         // + literal: Const { ty: fn() -> Result<u32, ()> {err}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = <Result<u32, ()> as Try>::branch(move _3) -> bb3; // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:60:13: 60:19
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:60:13: 60:19
                                         // + literal: Const { ty: fn(Result<u32, ()>) -> ControlFlow<<Result<u32, ()> as Try>::Residual, <Result<u32, ()> as Try>::Output> {<Result<u32, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = discriminant(_2);           // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:60:13: 60:19
        switchInt(move _4) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:60:13: 60:19
    }

    bb4: {
        _7 = ((_2 as Continue).0: u32);  // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:60:13: 60:19
        goto -> bb1;                     // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:59:9: 61:10
    }

    bb5: {
        unreachable;                     // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:60:13: 60:19
    }

    bb6: {
        _1 = <Result<u32, ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _6) -> bb7; // scope 3 at ui/try-block/try-block-unreachable-code-lint.rs:60:13: 60:19
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:60:18: 60:19
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<u32, ()> {<Result<u32, ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb7: {
        _20 = const _;                   // scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:66:14: 66:25
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:66:14: 66:25
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(test_expr_after_divergent_stmt_in_try_block, [], Some(promoted[0])) }
        _12 = _20;                       // scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:66:14: 66:25
        _11 = _12;                       // scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:66:14: 66:25
        _10 = move _11 as &[&str] (Pointer(Unsize)); // scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:66:14: 66:25
        _19 = &_1;                       // scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:66:27: 66:30
        _18 = _19;                       // scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:66:27: 66:30
        _17 = core::fmt::ArgumentV1::<'_>::new_debug::<Result<u32, ()>>(move _18) -> bb8; // scope 1 at ui/try-block/try-block-unreachable-code-lint.rs:66:27: 66:30
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:66:27: 66:30
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b Result<u32, ()>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Result<u32, ()>>}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = [move _17];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _15 = &_16;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = _15;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _13 = move _14 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> bb9; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _8 = _print(move _9) -> bb10;    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:67:2: 67:2
    }
}

promoted[0] in test_expr_after_divergent_stmt_in_try_block: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:66:14: 66:25
    let mut _1: [&str; 2];               // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:66:14: 66:25

    bb0: {
        _1 = [const "res: ", const "\n"]; // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:66:14: 66:25
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:66:14: 66:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:66:14: 66:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:66:14: 66:25
        return;                          // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:66:14: 66:25
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:69:11: 69:11
    let _1: ();                          // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:70:5: 70:39
    let _2: ();                          // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:71:5: 71:39
    let _3: ();                          // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:72:5: 72:51
    let _4: ();                          // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:73:5: 73:42
    let _5: ();                          // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:74:5: 74:34
    let _6: ();                          // in scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:75:5: 75:50

    bb0: {
        _1 = test_ok_wrapped_divergent_expr_1() -> bb1; // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:70:5: 70:39
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:70:5: 70:37
                                         // + literal: Const { ty: fn() {test_ok_wrapped_divergent_expr_1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = test_ok_wrapped_divergent_expr_2() -> bb2; // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:71:5: 71:39
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:71:5: 71:37
                                         // + literal: Const { ty: fn() {test_ok_wrapped_divergent_expr_2}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = test_autogenerated_unit_after_divergent_expr() -> bb3; // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:72:5: 72:51
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:72:5: 72:49
                                         // + literal: Const { ty: fn() {test_autogenerated_unit_after_divergent_expr}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = test_try_block_after_divergent_stmt() -> bb4; // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:73:5: 73:42
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:73:5: 73:40
                                         // + literal: Const { ty: fn() {test_try_block_after_divergent_stmt}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = test_wrapped_divergent_expr() -> bb5; // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:74:5: 74:34
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:74:5: 74:32
                                         // + literal: Const { ty: fn() {test_wrapped_divergent_expr}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = test_expr_after_divergent_stmt_in_try_block() -> bb6; // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:75:5: 75:50
                                         // mir::Constant
                                         // + span: ui/try-block/try-block-unreachable-code-lint.rs:75:5: 75:48
                                         // + literal: Const { ty: fn() {test_expr_after_divergent_stmt_in_try_block}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/try-block/try-block-unreachable-code-lint.rs:76:2: 76:2
    }
}
