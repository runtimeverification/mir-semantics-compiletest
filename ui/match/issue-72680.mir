// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/match/issue-72680.rs:3:11: 3:11
    let mut _1: bool;                    // in scope 0 at ui/match/issue-72680.rs:4:5: 4:22
    let mut _2: bool;                    // in scope 0 at ui/match/issue-72680.rs:4:13: 4:21
    let mut _3: &str;                    // in scope 0 at ui/match/issue-72680.rs:4:15: 4:17
    let _4: &str;                        // in scope 0 at ui/match/issue-72680.rs:4:15: 4:17
    let mut _5: !;                       // in scope 0 at ui/match/issue-72680.rs:4:5: 4:22
    let mut _6: bool;                    // in scope 0 at ui/match/issue-72680.rs:5:5: 5:23
    let mut _7: bool;                    // in scope 0 at ui/match/issue-72680.rs:5:13: 5:22
    let mut _8: &str;                    // in scope 0 at ui/match/issue-72680.rs:5:15: 5:18
    let _9: &str;                        // in scope 0 at ui/match/issue-72680.rs:5:15: 5:18
    let mut _10: !;                      // in scope 0 at ui/match/issue-72680.rs:5:5: 5:23
    let mut _11: bool;                   // in scope 0 at ui/match/issue-72680.rs:6:5: 6:23
    let mut _12: bool;                   // in scope 0 at ui/match/issue-72680.rs:6:13: 6:22
    let mut _13: &str;                   // in scope 0 at ui/match/issue-72680.rs:6:15: 6:18
    let _14: &str;                       // in scope 0 at ui/match/issue-72680.rs:6:15: 6:18
    let mut _15: !;                      // in scope 0 at ui/match/issue-72680.rs:6:5: 6:23
    let mut _16: bool;                   // in scope 0 at ui/match/issue-72680.rs:8:5: 8:23
    let mut _17: bool;                   // in scope 0 at ui/match/issue-72680.rs:8:13: 8:22
    let mut _18: bool;                   // in scope 0 at ui/match/issue-72680.rs:8:14: 8:22
    let mut _19: &str;                   // in scope 0 at ui/match/issue-72680.rs:8:16: 8:18
    let _20: &str;                       // in scope 0 at ui/match/issue-72680.rs:8:16: 8:18
    let mut _21: !;                      // in scope 0 at ui/match/issue-72680.rs:8:5: 8:23
    let mut _22: bool;                   // in scope 0 at ui/match/issue-72680.rs:9:5: 9:24
    let mut _23: bool;                   // in scope 0 at ui/match/issue-72680.rs:9:13: 9:23
    let mut _24: bool;                   // in scope 0 at ui/match/issue-72680.rs:9:14: 9:23
    let mut _25: &str;                   // in scope 0 at ui/match/issue-72680.rs:9:16: 9:19
    let _26: &str;                       // in scope 0 at ui/match/issue-72680.rs:9:16: 9:19
    let mut _27: !;                      // in scope 0 at ui/match/issue-72680.rs:9:5: 9:24
    let mut _28: bool;                   // in scope 0 at ui/match/issue-72680.rs:10:5: 10:24
    let mut _29: bool;                   // in scope 0 at ui/match/issue-72680.rs:10:13: 10:23
    let mut _30: bool;                   // in scope 0 at ui/match/issue-72680.rs:10:14: 10:23
    let mut _31: &str;                   // in scope 0 at ui/match/issue-72680.rs:10:16: 10:19
    let _32: &str;                       // in scope 0 at ui/match/issue-72680.rs:10:16: 10:19
    let mut _33: !;                      // in scope 0 at ui/match/issue-72680.rs:10:5: 10:24
    let mut _34: bool;                   // in scope 0 at ui/match/issue-72680.rs:12:5: 12:28
    let mut _35: bool;                   // in scope 0 at ui/match/issue-72680.rs:12:13: 12:27
    let mut _36: bool;                   // in scope 0 at ui/match/issue-72680.rs:12:14: 12:27
    let mut _37: &str;                   // in scope 0 at ui/match/issue-72680.rs:12:16: 12:22
    let _38: &str;                       // in scope 0 at ui/match/issue-72680.rs:12:16: 12:22
    let mut _39: !;                      // in scope 0 at ui/match/issue-72680.rs:12:5: 12:28
    let mut _40: bool;                   // in scope 0 at ui/match/issue-72680.rs:16:5: 16:34
    let mut _41: bool;                   // in scope 0 at ui/match/issue-72680.rs:16:13: 16:33
    let mut _42: bool;                   // in scope 0 at ui/match/issue-72680.rs:16:14: 16:33
    let mut _43: !;                      // in scope 0 at ui/match/issue-72680.rs:16:5: 16:34
    let mut _44: bool;                   // in scope 0 at ui/match/issue-72680.rs:17:5: 17:35
    let mut _45: bool;                   // in scope 0 at ui/match/issue-72680.rs:17:13: 17:34
    let mut _46: bool;                   // in scope 0 at ui/match/issue-72680.rs:17:14: 17:34
    let mut _47: !;                      // in scope 0 at ui/match/issue-72680.rs:17:5: 17:35
    let mut _48: bool;                   // in scope 0 at ui/match/issue-72680.rs:18:5: 18:35
    let mut _49: bool;                   // in scope 0 at ui/match/issue-72680.rs:18:13: 18:34
    let mut _50: bool;                   // in scope 0 at ui/match/issue-72680.rs:18:14: 18:34
    let mut _51: !;                      // in scope 0 at ui/match/issue-72680.rs:18:5: 18:35
    let mut _52: bool;                   // in scope 0 at ui/match/issue-72680.rs:19:5: 19:36
    let mut _53: bool;                   // in scope 0 at ui/match/issue-72680.rs:19:13: 19:35
    let mut _54: bool;                   // in scope 0 at ui/match/issue-72680.rs:19:14: 19:35
    let mut _55: !;                      // in scope 0 at ui/match/issue-72680.rs:19:5: 19:36
    let mut _56: bool;                   // in scope 0 at ui/match/issue-72680.rs:20:5: 20:35
    let mut _57: bool;                   // in scope 0 at ui/match/issue-72680.rs:20:13: 20:34
    let mut _58: bool;                   // in scope 0 at ui/match/issue-72680.rs:20:14: 20:34
    let mut _59: !;                      // in scope 0 at ui/match/issue-72680.rs:20:5: 20:35
    let mut _60: bool;                   // in scope 0 at ui/match/issue-72680.rs:22:5: 22:35
    let mut _61: bool;                   // in scope 0 at ui/match/issue-72680.rs:22:13: 22:34
    let mut _62: !;                      // in scope 0 at ui/match/issue-72680.rs:22:5: 22:35
    let mut _63: bool;                   // in scope 0 at ui/match/issue-72680.rs:23:5: 23:35
    let mut _64: bool;                   // in scope 0 at ui/match/issue-72680.rs:23:13: 23:34
    let mut _65: !;                      // in scope 0 at ui/match/issue-72680.rs:23:5: 23:35
    let mut _66: bool;                   // in scope 0 at ui/match/issue-72680.rs:24:5: 24:36
    let mut _67: bool;                   // in scope 0 at ui/match/issue-72680.rs:24:13: 24:35
    let mut _68: !;                      // in scope 0 at ui/match/issue-72680.rs:24:5: 24:36
    let mut _69: bool;                   // in scope 0 at ui/match/issue-72680.rs:28:5: 28:34
    let mut _70: bool;                   // in scope 0 at ui/match/issue-72680.rs:28:13: 28:33
    let mut _71: bool;                   // in scope 0 at ui/match/issue-72680.rs:28:14: 28:33
    let mut _72: !;                      // in scope 0 at ui/match/issue-72680.rs:28:5: 28:34
    let mut _73: bool;                   // in scope 0 at ui/match/issue-72680.rs:29:5: 29:35
    let mut _74: bool;                   // in scope 0 at ui/match/issue-72680.rs:29:13: 29:34
    let mut _75: bool;                   // in scope 0 at ui/match/issue-72680.rs:29:14: 29:34
    let mut _76: !;                      // in scope 0 at ui/match/issue-72680.rs:29:5: 29:35
    let mut _77: bool;                   // in scope 0 at ui/match/issue-72680.rs:30:5: 30:35
    let mut _78: bool;                   // in scope 0 at ui/match/issue-72680.rs:30:13: 30:34
    let mut _79: bool;                   // in scope 0 at ui/match/issue-72680.rs:30:14: 30:34
    let mut _80: !;                      // in scope 0 at ui/match/issue-72680.rs:30:5: 30:35
    let mut _81: bool;                   // in scope 0 at ui/match/issue-72680.rs:31:5: 31:36
    let mut _82: bool;                   // in scope 0 at ui/match/issue-72680.rs:31:13: 31:35
    let mut _83: bool;                   // in scope 0 at ui/match/issue-72680.rs:31:14: 31:35
    let mut _84: !;                      // in scope 0 at ui/match/issue-72680.rs:31:5: 31:36
    let mut _85: bool;                   // in scope 0 at ui/match/issue-72680.rs:32:5: 32:35
    let mut _86: bool;                   // in scope 0 at ui/match/issue-72680.rs:32:13: 32:34
    let mut _87: bool;                   // in scope 0 at ui/match/issue-72680.rs:32:14: 32:34
    let mut _88: !;                      // in scope 0 at ui/match/issue-72680.rs:32:5: 32:35
    let mut _89: bool;                   // in scope 0 at ui/match/issue-72680.rs:34:5: 34:35
    let mut _90: bool;                   // in scope 0 at ui/match/issue-72680.rs:34:13: 34:34
    let mut _91: !;                      // in scope 0 at ui/match/issue-72680.rs:34:5: 34:35
    let mut _92: bool;                   // in scope 0 at ui/match/issue-72680.rs:35:5: 35:35
    let mut _93: bool;                   // in scope 0 at ui/match/issue-72680.rs:35:13: 35:34
    let mut _94: !;                      // in scope 0 at ui/match/issue-72680.rs:35:5: 35:35
    let mut _95: bool;                   // in scope 0 at ui/match/issue-72680.rs:36:5: 36:36
    let mut _96: bool;                   // in scope 0 at ui/match/issue-72680.rs:36:13: 36:35
    let mut _97: !;                      // in scope 0 at ui/match/issue-72680.rs:36:5: 36:36

    bb0: {
        _4 = const "";                   // scope 0 at ui/match/issue-72680.rs:4:15: 4:17
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:4:15: 4:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/match/issue-72680.rs:4:15: 4:17
        _2 = f(move _3, const 0_usize) -> bb1; // scope 0 at ui/match/issue-72680.rs:4:13: 4:21
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:4:13: 4:14
                                         // + literal: Const { ty: for<'a> fn(&'a str, usize) -> bool {f}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Not(move _2);               // scope 0 at ui/match/issue-72680.rs:4:5: 4:22
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/match/issue-72680.rs:4:5: 4:22
    }

    bb2: {
        _5 = core::panicking::panic(const "assertion failed: f(\\\"\\\", 0)"); // scope 0 at ui/match/issue-72680.rs:4:5: 4:22
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:4:5: 4:22
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _9 = const "a";                  // scope 0 at ui/match/issue-72680.rs:5:15: 5:18
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:5:15: 5:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = _9;                         // scope 0 at ui/match/issue-72680.rs:5:15: 5:18
        _7 = f(move _8, const 1_usize) -> bb4; // scope 0 at ui/match/issue-72680.rs:5:13: 5:22
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:5:13: 5:14
                                         // + literal: Const { ty: for<'a> fn(&'a str, usize) -> bool {f}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = Not(move _7);               // scope 0 at ui/match/issue-72680.rs:5:5: 5:23
        switchInt(move _6) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/match/issue-72680.rs:5:5: 5:23
    }

    bb5: {
        _10 = core::panicking::panic(const "assertion failed: f(\\\"a\\\", 1)"); // scope 0 at ui/match/issue-72680.rs:5:5: 5:23
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:5:5: 5:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _14 = const "b";                 // scope 0 at ui/match/issue-72680.rs:6:15: 6:18
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:6:15: 6:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 0 at ui/match/issue-72680.rs:6:15: 6:18
        _12 = f(move _13, const 1_usize) -> bb7; // scope 0 at ui/match/issue-72680.rs:6:13: 6:22
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:6:13: 6:14
                                         // + literal: Const { ty: for<'a> fn(&'a str, usize) -> bool {f}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = Not(move _12);             // scope 0 at ui/match/issue-72680.rs:6:5: 6:23
        switchInt(move _11) -> [0: bb9, otherwise: bb8]; // scope 0 at ui/match/issue-72680.rs:6:5: 6:23
    }

    bb8: {
        _15 = core::panicking::panic(const "assertion failed: f(\\\"b\\\", 1)"); // scope 0 at ui/match/issue-72680.rs:6:5: 6:23
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:6:5: 6:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _20 = const "";                  // scope 0 at ui/match/issue-72680.rs:8:16: 8:18
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:8:16: 8:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = _20;                       // scope 0 at ui/match/issue-72680.rs:8:16: 8:18
        _18 = f(move _19, const 1_usize) -> bb10; // scope 0 at ui/match/issue-72680.rs:8:14: 8:22
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:8:14: 8:15
                                         // + literal: Const { ty: for<'a> fn(&'a str, usize) -> bool {f}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = Not(move _18);             // scope 0 at ui/match/issue-72680.rs:8:13: 8:22
        _16 = Not(move _17);             // scope 0 at ui/match/issue-72680.rs:8:5: 8:23
        switchInt(move _16) -> [0: bb12, otherwise: bb11]; // scope 0 at ui/match/issue-72680.rs:8:5: 8:23
    }

    bb11: {
        _21 = core::panicking::panic(const "assertion failed: !f(\\\"\\\", 1)"); // scope 0 at ui/match/issue-72680.rs:8:5: 8:23
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:8:5: 8:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _26 = const "a";                 // scope 0 at ui/match/issue-72680.rs:9:16: 9:19
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:9:16: 9:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _25 = _26;                       // scope 0 at ui/match/issue-72680.rs:9:16: 9:19
        _24 = f(move _25, const 0_usize) -> bb13; // scope 0 at ui/match/issue-72680.rs:9:14: 9:23
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:9:14: 9:15
                                         // + literal: Const { ty: for<'a> fn(&'a str, usize) -> bool {f}, val: Value(<ZST>) }
    }

    bb13: {
        _23 = Not(move _24);             // scope 0 at ui/match/issue-72680.rs:9:13: 9:23
        _22 = Not(move _23);             // scope 0 at ui/match/issue-72680.rs:9:5: 9:24
        switchInt(move _22) -> [0: bb15, otherwise: bb14]; // scope 0 at ui/match/issue-72680.rs:9:5: 9:24
    }

    bb14: {
        _27 = core::panicking::panic(const "assertion failed: !f(\\\"a\\\", 0)"); // scope 0 at ui/match/issue-72680.rs:9:5: 9:24
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:9:5: 9:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _32 = const "b";                 // scope 0 at ui/match/issue-72680.rs:10:16: 10:19
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:10:16: 10:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _31 = _32;                       // scope 0 at ui/match/issue-72680.rs:10:16: 10:19
        _30 = f(move _31, const 0_usize) -> bb16; // scope 0 at ui/match/issue-72680.rs:10:14: 10:23
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:10:14: 10:15
                                         // + literal: Const { ty: for<'a> fn(&'a str, usize) -> bool {f}, val: Value(<ZST>) }
    }

    bb16: {
        _29 = Not(move _30);             // scope 0 at ui/match/issue-72680.rs:10:13: 10:23
        _28 = Not(move _29);             // scope 0 at ui/match/issue-72680.rs:10:5: 10:24
        switchInt(move _28) -> [0: bb18, otherwise: bb17]; // scope 0 at ui/match/issue-72680.rs:10:5: 10:24
    }

    bb17: {
        _33 = core::panicking::panic(const "assertion failed: !f(\\\"b\\\", 0)"); // scope 0 at ui/match/issue-72680.rs:10:5: 10:24
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:10:5: 10:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _38 = const "asdf";              // scope 0 at ui/match/issue-72680.rs:12:16: 12:22
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:12:16: 12:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _37 = _38;                       // scope 0 at ui/match/issue-72680.rs:12:16: 12:22
        _36 = f(move _37, const 32_usize) -> bb19; // scope 0 at ui/match/issue-72680.rs:12:14: 12:27
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:12:14: 12:15
                                         // + literal: Const { ty: for<'a> fn(&'a str, usize) -> bool {f}, val: Value(<ZST>) }
    }

    bb19: {
        _35 = Not(move _36);             // scope 0 at ui/match/issue-72680.rs:12:13: 12:27
        _34 = Not(move _35);             // scope 0 at ui/match/issue-72680.rs:12:5: 12:28
        switchInt(move _34) -> [0: bb21, otherwise: bb20]; // scope 0 at ui/match/issue-72680.rs:12:5: 12:28
    }

    bb20: {
        _39 = core::panicking::panic(const "assertion failed: !f(\\\"asdf\\\", 32)"); // scope 0 at ui/match/issue-72680.rs:12:5: 12:28
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:12:5: 12:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _42 = g(const true, const true, const true) -> bb22; // scope 0 at ui/match/issue-72680.rs:16:14: 16:33
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:16:14: 16:15
                                         // + literal: Const { ty: fn(bool, bool, bool) -> bool {g}, val: Value(<ZST>) }
    }

    bb22: {
        _41 = Not(move _42);             // scope 0 at ui/match/issue-72680.rs:16:13: 16:33
        _40 = Not(move _41);             // scope 0 at ui/match/issue-72680.rs:16:5: 16:34
        switchInt(move _40) -> [0: bb24, otherwise: bb23]; // scope 0 at ui/match/issue-72680.rs:16:5: 16:34
    }

    bb23: {
        _43 = core::panicking::panic(const "assertion failed: !g(true, true, true)"); // scope 0 at ui/match/issue-72680.rs:16:5: 16:34
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:16:5: 16:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb24: {
        _46 = g(const false, const true, const true) -> bb25; // scope 0 at ui/match/issue-72680.rs:17:14: 17:34
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:17:14: 17:15
                                         // + literal: Const { ty: fn(bool, bool, bool) -> bool {g}, val: Value(<ZST>) }
    }

    bb25: {
        _45 = Not(move _46);             // scope 0 at ui/match/issue-72680.rs:17:13: 17:34
        _44 = Not(move _45);             // scope 0 at ui/match/issue-72680.rs:17:5: 17:35
        switchInt(move _44) -> [0: bb27, otherwise: bb26]; // scope 0 at ui/match/issue-72680.rs:17:5: 17:35
    }

    bb26: {
        _47 = core::panicking::panic(const "assertion failed: !g(false, true, true)"); // scope 0 at ui/match/issue-72680.rs:17:5: 17:35
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:17:5: 17:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        _50 = g(const true, const false, const true) -> bb28; // scope 0 at ui/match/issue-72680.rs:18:14: 18:34
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:18:14: 18:15
                                         // + literal: Const { ty: fn(bool, bool, bool) -> bool {g}, val: Value(<ZST>) }
    }

    bb28: {
        _49 = Not(move _50);             // scope 0 at ui/match/issue-72680.rs:18:13: 18:34
        _48 = Not(move _49);             // scope 0 at ui/match/issue-72680.rs:18:5: 18:35
        switchInt(move _48) -> [0: bb30, otherwise: bb29]; // scope 0 at ui/match/issue-72680.rs:18:5: 18:35
    }

    bb29: {
        _51 = core::panicking::panic(const "assertion failed: !g(true, false, true)"); // scope 0 at ui/match/issue-72680.rs:18:5: 18:35
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:18:5: 18:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        _54 = g(const false, const false, const true) -> bb31; // scope 0 at ui/match/issue-72680.rs:19:14: 19:35
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:19:14: 19:15
                                         // + literal: Const { ty: fn(bool, bool, bool) -> bool {g}, val: Value(<ZST>) }
    }

    bb31: {
        _53 = Not(move _54);             // scope 0 at ui/match/issue-72680.rs:19:13: 19:35
        _52 = Not(move _53);             // scope 0 at ui/match/issue-72680.rs:19:5: 19:36
        switchInt(move _52) -> [0: bb33, otherwise: bb32]; // scope 0 at ui/match/issue-72680.rs:19:5: 19:36
    }

    bb32: {
        _55 = core::panicking::panic(const "assertion failed: !g(false, false, true)"); // scope 0 at ui/match/issue-72680.rs:19:5: 19:36
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:19:5: 19:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb33: {
        _58 = g(const true, const true, const false) -> bb34; // scope 0 at ui/match/issue-72680.rs:20:14: 20:34
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:20:14: 20:15
                                         // + literal: Const { ty: fn(bool, bool, bool) -> bool {g}, val: Value(<ZST>) }
    }

    bb34: {
        _57 = Not(move _58);             // scope 0 at ui/match/issue-72680.rs:20:13: 20:34
        _56 = Not(move _57);             // scope 0 at ui/match/issue-72680.rs:20:5: 20:35
        switchInt(move _56) -> [0: bb36, otherwise: bb35]; // scope 0 at ui/match/issue-72680.rs:20:5: 20:35
    }

    bb35: {
        _59 = core::panicking::panic(const "assertion failed: !g(true, true, false)"); // scope 0 at ui/match/issue-72680.rs:20:5: 20:35
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:20:5: 20:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb36: {
        _61 = g(const false, const true, const false) -> bb37; // scope 0 at ui/match/issue-72680.rs:22:13: 22:34
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:22:13: 22:14
                                         // + literal: Const { ty: fn(bool, bool, bool) -> bool {g}, val: Value(<ZST>) }
    }

    bb37: {
        _60 = Not(move _61);             // scope 0 at ui/match/issue-72680.rs:22:5: 22:35
        switchInt(move _60) -> [0: bb39, otherwise: bb38]; // scope 0 at ui/match/issue-72680.rs:22:5: 22:35
    }

    bb38: {
        _62 = core::panicking::panic(const "assertion failed: g(false, true, false)"); // scope 0 at ui/match/issue-72680.rs:22:5: 22:35
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:22:5: 22:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb39: {
        _64 = g(const true, const false, const false) -> bb40; // scope 0 at ui/match/issue-72680.rs:23:13: 23:34
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:23:13: 23:14
                                         // + literal: Const { ty: fn(bool, bool, bool) -> bool {g}, val: Value(<ZST>) }
    }

    bb40: {
        _63 = Not(move _64);             // scope 0 at ui/match/issue-72680.rs:23:5: 23:35
        switchInt(move _63) -> [0: bb42, otherwise: bb41]; // scope 0 at ui/match/issue-72680.rs:23:5: 23:35
    }

    bb41: {
        _65 = core::panicking::panic(const "assertion failed: g(true, false, false)"); // scope 0 at ui/match/issue-72680.rs:23:5: 23:35
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:23:5: 23:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb42: {
        _67 = g(const false, const false, const false) -> bb43; // scope 0 at ui/match/issue-72680.rs:24:13: 24:35
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:24:13: 24:14
                                         // + literal: Const { ty: fn(bool, bool, bool) -> bool {g}, val: Value(<ZST>) }
    }

    bb43: {
        _66 = Not(move _67);             // scope 0 at ui/match/issue-72680.rs:24:5: 24:36
        switchInt(move _66) -> [0: bb45, otherwise: bb44]; // scope 0 at ui/match/issue-72680.rs:24:5: 24:36
    }

    bb44: {
        _68 = core::panicking::panic(const "assertion failed: g(false, false, false)"); // scope 0 at ui/match/issue-72680.rs:24:5: 24:36
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:24:5: 24:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb45: {
        _71 = h(const true, const true, const true) -> bb46; // scope 0 at ui/match/issue-72680.rs:28:14: 28:33
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:28:14: 28:15
                                         // + literal: Const { ty: fn(bool, bool, bool) -> bool {h}, val: Value(<ZST>) }
    }

    bb46: {
        _70 = Not(move _71);             // scope 0 at ui/match/issue-72680.rs:28:13: 28:33
        _69 = Not(move _70);             // scope 0 at ui/match/issue-72680.rs:28:5: 28:34
        switchInt(move _69) -> [0: bb48, otherwise: bb47]; // scope 0 at ui/match/issue-72680.rs:28:5: 28:34
    }

    bb47: {
        _72 = core::panicking::panic(const "assertion failed: !h(true, true, true)"); // scope 0 at ui/match/issue-72680.rs:28:5: 28:34
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:28:5: 28:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb48: {
        _75 = h(const false, const true, const true) -> bb49; // scope 0 at ui/match/issue-72680.rs:29:14: 29:34
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:29:14: 29:15
                                         // + literal: Const { ty: fn(bool, bool, bool) -> bool {h}, val: Value(<ZST>) }
    }

    bb49: {
        _74 = Not(move _75);             // scope 0 at ui/match/issue-72680.rs:29:13: 29:34
        _73 = Not(move _74);             // scope 0 at ui/match/issue-72680.rs:29:5: 29:35
        switchInt(move _73) -> [0: bb51, otherwise: bb50]; // scope 0 at ui/match/issue-72680.rs:29:5: 29:35
    }

    bb50: {
        _76 = core::panicking::panic(const "assertion failed: !h(false, true, true)"); // scope 0 at ui/match/issue-72680.rs:29:5: 29:35
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:29:5: 29:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb51: {
        _79 = h(const true, const false, const true) -> bb52; // scope 0 at ui/match/issue-72680.rs:30:14: 30:34
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:30:14: 30:15
                                         // + literal: Const { ty: fn(bool, bool, bool) -> bool {h}, val: Value(<ZST>) }
    }

    bb52: {
        _78 = Not(move _79);             // scope 0 at ui/match/issue-72680.rs:30:13: 30:34
        _77 = Not(move _78);             // scope 0 at ui/match/issue-72680.rs:30:5: 30:35
        switchInt(move _77) -> [0: bb54, otherwise: bb53]; // scope 0 at ui/match/issue-72680.rs:30:5: 30:35
    }

    bb53: {
        _80 = core::panicking::panic(const "assertion failed: !h(true, false, true)"); // scope 0 at ui/match/issue-72680.rs:30:5: 30:35
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:30:5: 30:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb54: {
        _83 = h(const false, const false, const true) -> bb55; // scope 0 at ui/match/issue-72680.rs:31:14: 31:35
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:31:14: 31:15
                                         // + literal: Const { ty: fn(bool, bool, bool) -> bool {h}, val: Value(<ZST>) }
    }

    bb55: {
        _82 = Not(move _83);             // scope 0 at ui/match/issue-72680.rs:31:13: 31:35
        _81 = Not(move _82);             // scope 0 at ui/match/issue-72680.rs:31:5: 31:36
        switchInt(move _81) -> [0: bb57, otherwise: bb56]; // scope 0 at ui/match/issue-72680.rs:31:5: 31:36
    }

    bb56: {
        _84 = core::panicking::panic(const "assertion failed: !h(false, false, true)"); // scope 0 at ui/match/issue-72680.rs:31:5: 31:36
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:31:5: 31:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb57: {
        _87 = h(const true, const true, const false) -> bb58; // scope 0 at ui/match/issue-72680.rs:32:14: 32:34
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:32:14: 32:15
                                         // + literal: Const { ty: fn(bool, bool, bool) -> bool {h}, val: Value(<ZST>) }
    }

    bb58: {
        _86 = Not(move _87);             // scope 0 at ui/match/issue-72680.rs:32:13: 32:34
        _85 = Not(move _86);             // scope 0 at ui/match/issue-72680.rs:32:5: 32:35
        switchInt(move _85) -> [0: bb60, otherwise: bb59]; // scope 0 at ui/match/issue-72680.rs:32:5: 32:35
    }

    bb59: {
        _88 = core::panicking::panic(const "assertion failed: !h(true, true, false)"); // scope 0 at ui/match/issue-72680.rs:32:5: 32:35
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:32:5: 32:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb60: {
        _90 = h(const false, const true, const false) -> bb61; // scope 0 at ui/match/issue-72680.rs:34:13: 34:34
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:34:13: 34:14
                                         // + literal: Const { ty: fn(bool, bool, bool) -> bool {h}, val: Value(<ZST>) }
    }

    bb61: {
        _89 = Not(move _90);             // scope 0 at ui/match/issue-72680.rs:34:5: 34:35
        switchInt(move _89) -> [0: bb63, otherwise: bb62]; // scope 0 at ui/match/issue-72680.rs:34:5: 34:35
    }

    bb62: {
        _91 = core::panicking::panic(const "assertion failed: h(false, true, false)"); // scope 0 at ui/match/issue-72680.rs:34:5: 34:35
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:34:5: 34:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb63: {
        _93 = h(const true, const false, const false) -> bb64; // scope 0 at ui/match/issue-72680.rs:35:13: 35:34
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:35:13: 35:14
                                         // + literal: Const { ty: fn(bool, bool, bool) -> bool {h}, val: Value(<ZST>) }
    }

    bb64: {
        _92 = Not(move _93);             // scope 0 at ui/match/issue-72680.rs:35:5: 35:35
        switchInt(move _92) -> [0: bb66, otherwise: bb65]; // scope 0 at ui/match/issue-72680.rs:35:5: 35:35
    }

    bb65: {
        _94 = core::panicking::panic(const "assertion failed: h(true, false, false)"); // scope 0 at ui/match/issue-72680.rs:35:5: 35:35
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:35:5: 35:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb66: {
        _96 = h(const false, const false, const false) -> bb67; // scope 0 at ui/match/issue-72680.rs:36:13: 36:35
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:36:13: 36:14
                                         // + literal: Const { ty: fn(bool, bool, bool) -> bool {h}, val: Value(<ZST>) }
    }

    bb67: {
        _95 = Not(move _96);             // scope 0 at ui/match/issue-72680.rs:36:5: 36:36
        switchInt(move _95) -> [0: bb69, otherwise: bb68]; // scope 0 at ui/match/issue-72680.rs:36:5: 36:36
    }

    bb68: {
        _97 = core::panicking::panic(const "assertion failed: h(false, false, false)"); // scope 0 at ui/match/issue-72680.rs:36:5: 36:36
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:36:5: 36:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb69: {
        return;                          // scope 0 at ui/match/issue-72680.rs:37:2: 37:2
    }
}

fn f(_1: &str, _2: usize) -> bool {
    debug s => _1;                       // in scope 0 at ui/match/issue-72680.rs:39:6: 39:7
    debug num => _2;                     // in scope 0 at ui/match/issue-72680.rs:39:15: 39:18
    let mut _0: bool;                    // return place in scope 0 at ui/match/issue-72680.rs:39:30: 39:34
    let mut _3: (&str, usize);           // in scope 0 at ui/match/issue-72680.rs:40:11: 40:19
    let mut _4: &str;                    // in scope 0 at ui/match/issue-72680.rs:40:12: 40:13
    let mut _5: usize;                   // in scope 0 at ui/match/issue-72680.rs:40:15: 40:18
    let mut _6: bool;                    // in scope 0 at ui/match/issue-72680.rs:41:10: 41:12
    let mut _7: bool;                    // in scope 0 at ui/match/issue-72680.rs:41:20: 41:23
    let mut _8: bool;                    // in scope 0 at ui/match/issue-72680.rs:41:26: 41:29

    bb0: {
        _4 = _1;                         // scope 0 at ui/match/issue-72680.rs:40:12: 40:13
        _5 = _2;                         // scope 0 at ui/match/issue-72680.rs:40:15: 40:18
        _3 = (move _4, move _5);         // scope 0 at ui/match/issue-72680.rs:40:11: 40:19
        _6 = <str as PartialEq>::eq((_3.0: &str), const "") -> bb1; // scope 0 at ui/match/issue-72680.rs:41:10: 41:12
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:41:10: 41:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:41:10: 41:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/match/issue-72680.rs:41:10: 41:12
    }

    bb2: {
        switchInt((_3.1: usize)) -> [0: bb9, otherwise: bb3]; // scope 0 at ui/match/issue-72680.rs:40:5: 40:19
    }

    bb3: {
        switchInt((_3.1: usize)) -> [1: bb4, otherwise: bb8]; // scope 0 at ui/match/issue-72680.rs:40:5: 40:19
    }

    bb4: {
        _7 = <str as PartialEq>::eq((_3.0: &str), const "a") -> bb5; // scope 0 at ui/match/issue-72680.rs:41:20: 41:23
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:41:20: 41:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:41:20: 41:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _7) -> [0: bb6, otherwise: bb9]; // scope 0 at ui/match/issue-72680.rs:41:20: 41:23
    }

    bb6: {
        _8 = <str as PartialEq>::eq((_3.0: &str), const "b") -> bb7; // scope 0 at ui/match/issue-72680.rs:41:26: 41:29
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:41:26: 41:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/match/issue-72680.rs:41:26: 41:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        switchInt(move _8) -> [0: bb8, otherwise: bb9]; // scope 0 at ui/match/issue-72680.rs:41:26: 41:29
    }

    bb8: {
        _0 = const false;                // scope 0 at ui/match/issue-72680.rs:43:14: 43:19
        goto -> bb10;                    // scope 0 at ui/match/issue-72680.rs:43:14: 43:19
    }

    bb9: {
        _0 = const true;                 // scope 0 at ui/match/issue-72680.rs:41:37: 41:41
        goto -> bb10;                    // scope 0 at ui/match/issue-72680.rs:41:37: 41:41
    }

    bb10: {
        return;                          // scope 0 at ui/match/issue-72680.rs:45:2: 45:2
    }
}

fn g(_1: bool, _2: bool, _3: bool) -> bool {
    debug x => _1;                       // in scope 0 at ui/match/issue-72680.rs:47:6: 47:7
    debug y => _2;                       // in scope 0 at ui/match/issue-72680.rs:47:15: 47:16
    debug z => _3;                       // in scope 0 at ui/match/issue-72680.rs:47:24: 47:25
    let mut _0: bool;                    // return place in scope 0 at ui/match/issue-72680.rs:47:36: 47:40
    let mut _4: (bool, bool, bool, bool); // in scope 0 at ui/match/issue-72680.rs:48:11: 48:23
    let mut _5: bool;                    // in scope 0 at ui/match/issue-72680.rs:48:12: 48:13
    let mut _6: bool;                    // in scope 0 at ui/match/issue-72680.rs:48:15: 48:16
    let mut _7: bool;                    // in scope 0 at ui/match/issue-72680.rs:48:18: 48:19
    let mut _8: bool;                    // in scope 0 at ui/match/issue-72680.rs:48:21: 48:22

    bb0: {
        _5 = _1;                         // scope 0 at ui/match/issue-72680.rs:48:12: 48:13
        _6 = _2;                         // scope 0 at ui/match/issue-72680.rs:48:15: 48:16
        _7 = _1;                         // scope 0 at ui/match/issue-72680.rs:48:18: 48:19
        _8 = _3;                         // scope 0 at ui/match/issue-72680.rs:48:21: 48:22
        _4 = (move _5, move _6, move _7, move _8); // scope 0 at ui/match/issue-72680.rs:48:11: 48:23
        switchInt((_4.1: bool)) -> [0: bb1, otherwise: bb4]; // scope 0 at ui/match/issue-72680.rs:48:5: 48:23
    }

    bb1: {
        switchInt((_4.2: bool)) -> [0: bb4, otherwise: bb2]; // scope 0 at ui/match/issue-72680.rs:48:5: 48:23
    }

    bb2: {
        switchInt((_4.3: bool)) -> [0: bb3, otherwise: bb4]; // scope 0 at ui/match/issue-72680.rs:48:5: 48:23
    }

    bb3: {
        _0 = const true;                 // scope 0 at ui/match/issue-72680.rs:49:47: 49:51
        goto -> bb12;                    // scope 0 at ui/match/issue-72680.rs:49:47: 49:51
    }

    bb4: {
        switchInt((_4.0: bool)) -> [0: bb5, otherwise: bb6]; // scope 0 at ui/match/issue-72680.rs:48:5: 48:23
    }

    bb5: {
        switchInt((_4.3: bool)) -> [0: bb10, otherwise: bb6]; // scope 0 at ui/match/issue-72680.rs:48:5: 48:23
    }

    bb6: {
        switchInt((_4.3: bool)) -> [0: bb8, otherwise: bb11]; // scope 0 at ui/match/issue-72680.rs:48:5: 48:23
    }

    bb7: {
        unreachable;                     // scope 0 at ui/match/issue-72680.rs:48:11: 48:23
    }

    bb8: {
        switchInt((_4.0: bool)) -> [0: bb7, otherwise: bb9]; // scope 0 at ui/match/issue-72680.rs:48:5: 48:23
    }

    bb9: {
        _0 = const false;                // scope 0 at ui/match/issue-72680.rs:52:54: 52:59
        goto -> bb12;                    // scope 0 at ui/match/issue-72680.rs:52:54: 52:59
    }

    bb10: {
        _0 = const true;                 // scope 0 at ui/match/issue-72680.rs:50:55: 50:59
        goto -> bb12;                    // scope 0 at ui/match/issue-72680.rs:50:55: 50:59
    }

    bb11: {
        _0 = const false;                // scope 0 at ui/match/issue-72680.rs:51:61: 51:66
        goto -> bb12;                    // scope 0 at ui/match/issue-72680.rs:51:61: 51:66
    }

    bb12: {
        return;                          // scope 0 at ui/match/issue-72680.rs:54:2: 54:2
    }
}

fn h(_1: bool, _2: bool, _3: bool) -> bool {
    debug x => _1;                       // in scope 0 at ui/match/issue-72680.rs:56:6: 56:7
    debug y => _2;                       // in scope 0 at ui/match/issue-72680.rs:56:15: 56:16
    debug z => _3;                       // in scope 0 at ui/match/issue-72680.rs:56:24: 56:25
    let mut _0: bool;                    // return place in scope 0 at ui/match/issue-72680.rs:56:36: 56:40
    let mut _4: (bool, (bool, (bool, (bool,)))); // in scope 0 at ui/match/issue-72680.rs:57:11: 57:30
    let mut _5: bool;                    // in scope 0 at ui/match/issue-72680.rs:57:12: 57:13
    let mut _6: (bool, (bool, (bool,))); // in scope 0 at ui/match/issue-72680.rs:57:15: 57:29
    let mut _7: bool;                    // in scope 0 at ui/match/issue-72680.rs:57:16: 57:17
    let mut _8: (bool, (bool,));         // in scope 0 at ui/match/issue-72680.rs:57:19: 57:28
    let mut _9: bool;                    // in scope 0 at ui/match/issue-72680.rs:57:20: 57:21
    let mut _10: (bool,);                // in scope 0 at ui/match/issue-72680.rs:57:23: 57:27
    let mut _11: bool;                   // in scope 0 at ui/match/issue-72680.rs:57:24: 57:25

    bb0: {
        _5 = _1;                         // scope 0 at ui/match/issue-72680.rs:57:12: 57:13
        _7 = _2;                         // scope 0 at ui/match/issue-72680.rs:57:16: 57:17
        _9 = _1;                         // scope 0 at ui/match/issue-72680.rs:57:20: 57:21
        _11 = _3;                        // scope 0 at ui/match/issue-72680.rs:57:24: 57:25
        _10 = (move _11,);               // scope 0 at ui/match/issue-72680.rs:57:23: 57:27
        _8 = (move _9, move _10);        // scope 0 at ui/match/issue-72680.rs:57:19: 57:28
        _6 = (move _7, move _8);         // scope 0 at ui/match/issue-72680.rs:57:15: 57:29
        _4 = (move _5, move _6);         // scope 0 at ui/match/issue-72680.rs:57:11: 57:30
        switchInt(((_4.1: (bool, (bool, (bool,)))).0: bool)) -> [0: bb1, otherwise: bb4]; // scope 0 at ui/match/issue-72680.rs:57:5: 57:30
    }

    bb1: {
        switchInt((((_4.1: (bool, (bool, (bool,)))).1: (bool, (bool,))).0: bool)) -> [0: bb4, otherwise: bb2]; // scope 0 at ui/match/issue-72680.rs:57:5: 57:30
    }

    bb2: {
        switchInt(((((_4.1: (bool, (bool, (bool,)))).1: (bool, (bool,))).1: (bool,)).0: bool)) -> [0: bb3, otherwise: bb4]; // scope 0 at ui/match/issue-72680.rs:57:5: 57:30
    }

    bb3: {
        _0 = const true;                 // scope 0 at ui/match/issue-72680.rs:58:54: 58:58
        goto -> bb12;                    // scope 0 at ui/match/issue-72680.rs:58:54: 58:58
    }

    bb4: {
        switchInt((_4.0: bool)) -> [0: bb5, otherwise: bb6]; // scope 0 at ui/match/issue-72680.rs:57:5: 57:30
    }

    bb5: {
        switchInt(((((_4.1: (bool, (bool, (bool,)))).1: (bool, (bool,))).1: (bool,)).0: bool)) -> [0: bb10, otherwise: bb6]; // scope 0 at ui/match/issue-72680.rs:57:5: 57:30
    }

    bb6: {
        switchInt(((((_4.1: (bool, (bool, (bool,)))).1: (bool, (bool,))).1: (bool,)).0: bool)) -> [0: bb8, otherwise: bb11]; // scope 0 at ui/match/issue-72680.rs:57:5: 57:30
    }

    bb7: {
        unreachable;                     // scope 0 at ui/match/issue-72680.rs:57:11: 57:30
    }

    bb8: {
        switchInt((_4.0: bool)) -> [0: bb7, otherwise: bb9]; // scope 0 at ui/match/issue-72680.rs:57:5: 57:30
    }

    bb9: {
        _0 = const false;                // scope 0 at ui/match/issue-72680.rs:61:61: 61:66
        goto -> bb12;                    // scope 0 at ui/match/issue-72680.rs:61:61: 61:66
    }

    bb10: {
        _0 = const true;                 // scope 0 at ui/match/issue-72680.rs:59:62: 59:66
        goto -> bb12;                    // scope 0 at ui/match/issue-72680.rs:59:62: 59:66
    }

    bb11: {
        _0 = const false;                // scope 0 at ui/match/issue-72680.rs:60:68: 60:73
        goto -> bb12;                    // scope 0 at ui/match/issue-72680.rs:60:68: 60:73
    }

    bb12: {
        return;                          // scope 0 at ui/match/issue-72680.rs:63:2: 63:2
    }
}
