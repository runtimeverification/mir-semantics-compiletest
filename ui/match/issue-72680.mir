// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let _3: &str;
    let mut _4: !;
    let mut _5: bool;
    let mut _6: bool;
    let _7: &str;
    let mut _8: !;
    let mut _9: bool;
    let mut _10: bool;
    let _11: &str;
    let mut _12: !;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let _16: &str;
    let mut _17: !;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let _21: &str;
    let mut _22: !;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let _26: &str;
    let mut _27: !;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let _31: &str;
    let mut _32: !;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: !;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: !;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: !;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: !;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: !;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: !;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: !;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: !;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: !;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: !;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: !;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: !;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: !;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: !;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: !;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: !;

    bb0: {
        _3 = const "";
        _2 = f(_3, const 0_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _4 = core::panicking::panic(const "assertion failed: f(\\\"\\\", 0)") -> unwind continue;
    }

    bb3: {
        _7 = const "a";
        _6 = f(_7, const 1_usize) -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _8 = core::panicking::panic(const "assertion failed: f(\\\"a\\\", 1)") -> unwind continue;
    }

    bb6: {
        _11 = const "b";
        _10 = f(_11, const 1_usize) -> [return: bb7, unwind continue];
    }

    bb7: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _12 = core::panicking::panic(const "assertion failed: f(\\\"b\\\", 1)") -> unwind continue;
    }

    bb9: {
        _16 = const "";
        _15 = f(_16, const 1_usize) -> [return: bb10, unwind continue];
    }

    bb10: {
        _14 = Not(move _15);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _17 = core::panicking::panic(const "assertion failed: !f(\\\"\\\", 1)") -> unwind continue;
    }

    bb12: {
        _21 = const "a";
        _20 = f(_21, const 0_usize) -> [return: bb13, unwind continue];
    }

    bb13: {
        _19 = Not(move _20);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _22 = core::panicking::panic(const "assertion failed: !f(\\\"a\\\", 0)") -> unwind continue;
    }

    bb15: {
        _26 = const "b";
        _25 = f(_26, const 0_usize) -> [return: bb16, unwind continue];
    }

    bb16: {
        _24 = Not(move _25);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _27 = core::panicking::panic(const "assertion failed: !f(\\\"b\\\", 0)") -> unwind continue;
    }

    bb18: {
        _31 = const "asdf";
        _30 = f(_31, const 32_usize) -> [return: bb19, unwind continue];
    }

    bb19: {
        _29 = Not(move _30);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _32 = core::panicking::panic(const "assertion failed: !f(\\\"asdf\\\", 32)") -> unwind continue;
    }

    bb21: {
        _35 = g(const true, const true, const true) -> [return: bb22, unwind continue];
    }

    bb22: {
        _34 = Not(move _35);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _36 = core::panicking::panic(const "assertion failed: !g(true, true, true)") -> unwind continue;
    }

    bb24: {
        _39 = g(const false, const true, const true) -> [return: bb25, unwind continue];
    }

    bb25: {
        _38 = Not(move _39);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _40 = core::panicking::panic(const "assertion failed: !g(false, true, true)") -> unwind continue;
    }

    bb27: {
        _43 = g(const true, const false, const true) -> [return: bb28, unwind continue];
    }

    bb28: {
        _42 = Not(move _43);
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _44 = core::panicking::panic(const "assertion failed: !g(true, false, true)") -> unwind continue;
    }

    bb30: {
        _47 = g(const false, const false, const true) -> [return: bb31, unwind continue];
    }

    bb31: {
        _46 = Not(move _47);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _48 = core::panicking::panic(const "assertion failed: !g(false, false, true)") -> unwind continue;
    }

    bb33: {
        _51 = g(const true, const true, const false) -> [return: bb34, unwind continue];
    }

    bb34: {
        _50 = Not(move _51);
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _52 = core::panicking::panic(const "assertion failed: !g(true, true, false)") -> unwind continue;
    }

    bb36: {
        _54 = g(const false, const true, const false) -> [return: bb37, unwind continue];
    }

    bb37: {
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _55 = core::panicking::panic(const "assertion failed: g(false, true, false)") -> unwind continue;
    }

    bb39: {
        _57 = g(const true, const false, const false) -> [return: bb40, unwind continue];
    }

    bb40: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _58 = core::panicking::panic(const "assertion failed: g(true, false, false)") -> unwind continue;
    }

    bb42: {
        _60 = g(const false, const false, const false) -> [return: bb43, unwind continue];
    }

    bb43: {
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _61 = core::panicking::panic(const "assertion failed: g(false, false, false)") -> unwind continue;
    }

    bb45: {
        _64 = h(const true, const true, const true) -> [return: bb46, unwind continue];
    }

    bb46: {
        _63 = Not(move _64);
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _65 = core::panicking::panic(const "assertion failed: !h(true, true, true)") -> unwind continue;
    }

    bb48: {
        _68 = h(const false, const true, const true) -> [return: bb49, unwind continue];
    }

    bb49: {
        _67 = Not(move _68);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _69 = core::panicking::panic(const "assertion failed: !h(false, true, true)") -> unwind continue;
    }

    bb51: {
        _72 = h(const true, const false, const true) -> [return: bb52, unwind continue];
    }

    bb52: {
        _71 = Not(move _72);
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _73 = core::panicking::panic(const "assertion failed: !h(true, false, true)") -> unwind continue;
    }

    bb54: {
        _76 = h(const false, const false, const true) -> [return: bb55, unwind continue];
    }

    bb55: {
        _75 = Not(move _76);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _77 = core::panicking::panic(const "assertion failed: !h(false, false, true)") -> unwind continue;
    }

    bb57: {
        _80 = h(const true, const true, const false) -> [return: bb58, unwind continue];
    }

    bb58: {
        _79 = Not(move _80);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _81 = core::panicking::panic(const "assertion failed: !h(true, true, false)") -> unwind continue;
    }

    bb60: {
        _83 = h(const false, const true, const false) -> [return: bb61, unwind continue];
    }

    bb61: {
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _84 = core::panicking::panic(const "assertion failed: h(false, true, false)") -> unwind continue;
    }

    bb63: {
        _86 = h(const true, const false, const false) -> [return: bb64, unwind continue];
    }

    bb64: {
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _87 = core::panicking::panic(const "assertion failed: h(true, false, false)") -> unwind continue;
    }

    bb66: {
        _89 = h(const false, const false, const false) -> [return: bb67, unwind continue];
    }

    bb67: {
        _88 = Not(move _89);
        switchInt(move _88) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _90 = core::panicking::panic(const "assertion failed: h(false, false, false)") -> unwind continue;
    }

    bb69: {
        return;
    }
}

fn f(_1: &str, _2: usize) -> bool {
    debug s => _1;
    debug num => _2;
    let mut _0: bool;
    let mut _3: (&str, usize);
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;

    bb0: {
        _3 = (_1, _2);
        _4 = <str as PartialEq>::eq((_3.0: &str), const "") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        switchInt((_3.1: usize)) -> [0: bb9, otherwise: bb3];
    }

    bb3: {
        switchInt((_3.1: usize)) -> [1: bb4, otherwise: bb8];
    }

    bb4: {
        _5 = <str as PartialEq>::eq((_3.0: &str), const "a") -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _5) -> [0: bb6, otherwise: bb9];
    }

    bb6: {
        _6 = <str as PartialEq>::eq((_3.0: &str), const "b") -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageLive(_7);
        _7 = move _6;
        _0 = _7;
        StorageDead(_7);
        goto -> bb10;
    }

    bb8: {
        _0 = const false;
        goto -> bb10;
    }

    bb9: {
        _0 = const true;
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn g(_1: bool, _2: bool, _3: bool) -> bool {
    debug x => _1;
    debug y => _2;
    debug z => _3;
    let mut _0: bool;
    let mut _4: (bool, bool, bool, bool);

    bb0: {
        _4 = (_1, _2, _1, _3);
        switchInt((_4.1: bool)) -> [0: bb1, otherwise: bb4];
    }

    bb1: {
        switchInt((_4.2: bool)) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        switchInt((_4.3: bool)) -> [0: bb3, otherwise: bb4];
    }

    bb3: {
        _0 = const true;
        goto -> bb12;
    }

    bb4: {
        switchInt((_4.0: bool)) -> [0: bb5, otherwise: bb6];
    }

    bb5: {
        switchInt((_4.3: bool)) -> [0: bb10, otherwise: bb6];
    }

    bb6: {
        switchInt((_4.3: bool)) -> [0: bb8, otherwise: bb11];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        switchInt((_4.0: bool)) -> [0: bb7, otherwise: bb9];
    }

    bb9: {
        _0 = const false;
        goto -> bb12;
    }

    bb10: {
        _0 = const true;
        goto -> bb12;
    }

    bb11: {
        _0 = const false;
        goto -> bb12;
    }

    bb12: {
        return;
    }
}

fn h(_1: bool, _2: bool, _3: bool) -> bool {
    debug x => _1;
    debug y => _2;
    debug z => _3;
    let mut _0: bool;
    let mut _4: (bool, (bool, (bool, (bool,))));
    let mut _5: (bool, (bool, (bool,)));
    let mut _6: (bool, (bool,));
    let mut _7: (bool,);

    bb0: {
        _7 = (_3,);
        _6 = (_1, move _7);
        _5 = (_2, move _6);
        _4 = (_1, move _5);
        switchInt(((_4.1: (bool, (bool, (bool,)))).0: bool)) -> [0: bb1, otherwise: bb4];
    }

    bb1: {
        switchInt((((_4.1: (bool, (bool, (bool,)))).1: (bool, (bool,))).0: bool)) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        switchInt(((((_4.1: (bool, (bool, (bool,)))).1: (bool, (bool,))).1: (bool,)).0: bool)) -> [0: bb3, otherwise: bb4];
    }

    bb3: {
        _0 = const true;
        goto -> bb12;
    }

    bb4: {
        switchInt((_4.0: bool)) -> [0: bb5, otherwise: bb6];
    }

    bb5: {
        switchInt(((((_4.1: (bool, (bool, (bool,)))).1: (bool, (bool,))).1: (bool,)).0: bool)) -> [0: bb10, otherwise: bb6];
    }

    bb6: {
        switchInt(((((_4.1: (bool, (bool, (bool,)))).1: (bool, (bool,))).1: (bool,)).0: bool)) -> [0: bb8, otherwise: bb11];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        switchInt((_4.0: bool)) -> [0: bb7, otherwise: bb9];
    }

    bb9: {
        _0 = const false;
        goto -> bb12;
    }

    bb10: {
        _0 = const true;
        goto -> bb12;
    }

    bb11: {
        _0 = const false;
        goto -> bb12;
    }

    bb12: {
        return;
    }
}
