// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> ! {
    let mut _0: !;                       // return place in scope 0 at ui/match/match-disc-bot.rs:5:11: 5:12
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _1 = begin_panic::<&str>(const "quux"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/match/match-disc-bot.rs:6:12: 6:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn g() -> isize {
    let mut _0: isize;                   // return place in scope 0 at ui/match/match-disc-bot.rs:8:11: 8:16
    let mut _1: !;                       // in scope 0 at ui/match/match-disc-bot.rs:9:11: 9:14

    bb0: {
        _1 = f();                        // scope 0 at ui/match/match-disc-bot.rs:9:11: 9:14
                                         // mir::Constant
                                         // + span: ui/match/match-disc-bot.rs:9:11: 9:12
                                         // + literal: Const { ty: fn() -> ! {f}, val: Value(<ZST>) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/match/match-disc-bot.rs:14:11: 14:11
    let _1: isize;                       // in scope 0 at ui/match/match-disc-bot.rs:15:5: 15:8

    bb0: {
        _1 = g() -> bb1;                 // scope 0 at ui/match/match-disc-bot.rs:15:5: 15:8
                                         // mir::Constant
                                         // + span: ui/match/match-disc-bot.rs:15:5: 15:6
                                         // + literal: Const { ty: fn() -> isize {g}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/match/match-disc-bot.rs:16:2: 16:2
    }
}
