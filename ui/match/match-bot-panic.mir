// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: String) -> () {
    debug s => _1;                       // in scope 0 at ui/match/match-bot-panic.rs:8:8: 8:9
    let mut _0: ();                      // return place in scope 0 at ui/match/match-bot-panic.rs:8:19: 8:19

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/match/match-bot-panic.rs:8:20: 8:21
    }

    bb1: {
        return;                          // scope 0 at ui/match/match-bot-panic.rs:8:21: 8:21
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/match/match-bot-panic.rs:10:11: 10:11
    let _1: std::string::String;         // in scope 0 at ui/match/match-bot-panic.rs:11:9: 11:10
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/match/match-bot-panic.rs:11:9: 11:10
    }

    bb0: {
        _2 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}
