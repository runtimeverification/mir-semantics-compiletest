// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const TEST_STR: &str = {
    let mut _0: &str;                    // return place in scope 0 at ui/match/issue-11940.rs:3:17: 3:29

    bb0: {
        _0 = const "abcd";               // scope 0 at ui/match/issue-11940.rs:3:32: 3:38
                                         // mir::Constant
                                         // + span: ui/match/issue-11940.rs:3:32: 3:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/match/issue-11940.rs:3:1: 3:39
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/match/issue-11940.rs:5:11: 5:11
    let _1: &str;                        // in scope 0 at ui/match/issue-11940.rs:6:9: 6:10
    let mut _2: bool;                    // in scope 0 at ui/match/issue-11940.rs:8:9: 8:17
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/match/issue-11940.rs:6:9: 6:10
    }

    bb0: {
        _1 = const "abcd";               // scope 0 at ui/match/issue-11940.rs:6:13: 6:19
                                         // mir::Constant
                                         // + span: ui/match/issue-11940.rs:6:13: 6:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = <str as PartialEq>::eq(_1, const "abcd") -> bb1; // scope 1 at ui/match/issue-11940.rs:8:9: 8:17
                                         // mir::Constant
                                         // + span: ui/match/issue-11940.rs:8:9: 8:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/match/issue-11940.rs:8:9: 8:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb2, otherwise: bb3]; // scope 1 at ui/match/issue-11940.rs:8:9: 8:17
    }

    bb2: {
        _3 = core::panicking::panic(const "internal error: entered unreachable code"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        return;                          // scope 0 at ui/match/issue-11940.rs:11:2: 11:2
    }
}
