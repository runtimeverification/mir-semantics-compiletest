// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let mut _4: (i32, i32);
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let _9: &i32;
    let _10: &i32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&i32, &i32);
    let mut _19: &i32;
    let _20: i32;
    let mut _21: (i32, i32);
    let mut _22: bool;
    let mut _23: bool;
    let _24: &i32;
    let _25: &i32;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: i32;
    let mut _29: i32;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&i32, &i32);
    let mut _34: &i32;
    let _35: i32;
    let mut _36: (i32, i32);
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let _41: &i32;
    let _42: &i32;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: i32;
    let mut _46: i32;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: &i32;
    let mut _51: &i32;
    let mut _52: &i32;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }
    scope 3 {
        debug left_val => _24;
        debug right_val => _25;
        let _30: core::panicking::AssertKind;
        scope 4 {
            debug kind => _30;
        }
    }
    scope 5 {
        debug left_val => _41;
        debug right_val => _42;
        let _47: core::panicking::AssertKind;
        scope 6 {
            debug kind => _47;
        }
    }

    bb0: {
        _52 = const _;
        _4 = (const 1_i32, const 3_i32);
        switchInt((_4.0: i32)) -> [0: bb1, 1: bb4, otherwise: bb3];
    }

    bb1: {
        _5 = Le(const 2_i32, (_4.1: i32));
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = Le((_4.1: i32), const 5_i32);
        switchInt(move _6) -> [0: bb3, otherwise: bb7];
    }

    bb3: {
        _7 = Le(const 2_i32, (_4.1: i32));
        switchInt(move _7) -> [0: bb6, otherwise: bb5];
    }

    bb4: {
        switchInt((_4.1: i32)) -> [3: bb8, otherwise: bb3];
    }

    bb5: {
        _8 = Le((_4.1: i32), const 5_i32);
        switchInt(move _8) -> [0: bb6, otherwise: bb9];
    }

    bb6: {
        _3 = const 4_i32;
        goto -> bb10;
    }

    bb7: {
        _3 = const 1_i32;
        goto -> bb10;
    }

    bb8: {
        _3 = const 2_i32;
        goto -> bb10;
    }

    bb9: {
        _3 = const 3_i32;
        goto -> bb10;
    }

    bb10: {
        _2 = &_3;
        _1 = (_52, move _2);
        _9 = (_1.0: &i32);
        _10 = (_1.1: &i32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i32, i32>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb12: {
        _51 = const _;
        _21 = (const 1_i32, const 3_i32);
        switchInt((_21.0: i32)) -> [1: bb13, otherwise: bb14];
    }

    bb13: {
        switchInt((_21.1: i32)) -> [3: bb17, otherwise: bb14];
    }

    bb14: {
        _22 = Le(const 2_i32, (_21.1: i32));
        switchInt(move _22) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _23 = Le((_21.1: i32), const 5_i32);
        switchInt(move _23) -> [0: bb16, otherwise: bb18];
    }

    bb16: {
        _20 = const 4_i32;
        goto -> bb19;
    }

    bb17: {
        _20 = const 2_i32;
        goto -> bb19;
    }

    bb18: {
        _20 = const 3_i32;
        goto -> bb19;
    }

    bb19: {
        _19 = &_20;
        _18 = (_51, move _19);
        _24 = (_18.0: &i32);
        _25 = (_18.1: &i32);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<i32, i32>(move _30, _24, _25, move _32) -> unwind continue;
    }

    bb21: {
        _50 = const _;
        _36 = (const 1_i32, const 7_i32);
        switchInt((_36.0: i32)) -> [0: bb22, 1: bb25, otherwise: bb24];
    }

    bb22: {
        _37 = Le(const 2_i32, (_36.1: i32));
        switchInt(move _37) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _38 = Le((_36.1: i32), const 5_i32);
        switchInt(move _38) -> [0: bb24, otherwise: bb28];
    }

    bb24: {
        _39 = Le(const 2_i32, (_36.1: i32));
        switchInt(move _39) -> [0: bb27, otherwise: bb26];
    }

    bb25: {
        switchInt((_36.1: i32)) -> [7: bb29, otherwise: bb24];
    }

    bb26: {
        _40 = Le((_36.1: i32), const 5_i32);
        switchInt(move _40) -> [0: bb27, otherwise: bb30];
    }

    bb27: {
        _35 = const 4_i32;
        goto -> bb31;
    }

    bb28: {
        _35 = const 1_i32;
        goto -> bb31;
    }

    bb29: {
        _35 = const 2_i32;
        goto -> bb31;
    }

    bb30: {
        _35 = const 3_i32;
        goto -> bb31;
    }

    bb31: {
        _34 = &_35;
        _33 = (_50, move _34);
        _41 = (_33.0: &i32);
        _42 = (_33.1: &i32);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<i32, i32>(move _47, _41, _42, move _49) -> unwind continue;
    }

    bb33: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}
