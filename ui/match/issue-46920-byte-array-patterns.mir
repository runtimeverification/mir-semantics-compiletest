// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const CURSOR_PARTITION_LABEL: &[u8] = {
    let mut _0: &[u8];
    let mut _1: &[u8; 9];
    let _2: &[u8; 9];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const b"partition";
        _1 = &(*_2);
        _0 = move _1 as &[u8] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc1 (size: 9, align: 1) {
    70 61 72 74 69 74 69 6f 6e                      │ partition
}

const CURSOR_EVENT_TYPE_LABEL: &[u8] = {
    let mut _0: &[u8];
    let mut _1: &[u8; 10];
    let _2: &[u8; 10];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const b"event_type";
        _1 = &(*_2);
        _0 = move _1 as &[u8] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc2 (size: 10, align: 1) {
    65 76 65 6e 74 5f 74 79 70 65                   │ event_type
}

const BYTE_PATTERN: &[u8; 5] = {
    let mut _0: &[u8; 5];

    bb0: {
        _0 = const b"hello";
        return;
    }
}

alloc3 (size: 5, align: 1) {
    68 65 6c 6c 6f                                  │ hello
}

BYTE_PATTERN::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

fn match_slice(_1: &[u8]) -> u32 {
    debug x => _1;
    let mut _0: u32;
    let mut _2: usize;
    let mut _3: usize;
    let mut _4: bool;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: bool;

    bb0: {
        _5 = Len((*_1));
        _6 = const 9_usize;
        _7 = Eq(move _5, move _6);
        switchInt(move _7) -> [0: bb11, otherwise: bb1];
    }

    bb1: {
        switchInt((*_1)[0 of 9]) -> [112: bb2, otherwise: bb10];
    }

    bb2: {
        switchInt((*_1)[1 of 9]) -> [97: bb3, otherwise: bb10];
    }

    bb3: {
        switchInt((*_1)[2 of 9]) -> [114: bb4, otherwise: bb10];
    }

    bb4: {
        switchInt((*_1)[3 of 9]) -> [116: bb5, otherwise: bb10];
    }

    bb5: {
        switchInt((*_1)[4 of 9]) -> [105: bb6, otherwise: bb10];
    }

    bb6: {
        switchInt((*_1)[5 of 9]) -> [116: bb7, otherwise: bb10];
    }

    bb7: {
        switchInt((*_1)[6 of 9]) -> [105: bb8, otherwise: bb10];
    }

    bb8: {
        switchInt((*_1)[7 of 9]) -> [111: bb9, otherwise: bb10];
    }

    bb9: {
        switchInt((*_1)[8 of 9]) -> [110: bb22, otherwise: bb10];
    }

    bb10: {
        _0 = const 2_u32;
        goto -> bb24;
    }

    bb11: {
        _2 = Len((*_1));
        _3 = const 10_usize;
        _4 = Eq(move _2, move _3);
        switchInt(move _4) -> [0: bb10, otherwise: bb12];
    }

    bb12: {
        switchInt((*_1)[0 of 10]) -> [101: bb13, otherwise: bb10];
    }

    bb13: {
        switchInt((*_1)[1 of 10]) -> [118: bb14, otherwise: bb10];
    }

    bb14: {
        switchInt((*_1)[2 of 10]) -> [101: bb15, otherwise: bb10];
    }

    bb15: {
        switchInt((*_1)[3 of 10]) -> [110: bb16, otherwise: bb10];
    }

    bb16: {
        switchInt((*_1)[4 of 10]) -> [116: bb17, otherwise: bb10];
    }

    bb17: {
        switchInt((*_1)[5 of 10]) -> [95: bb18, otherwise: bb10];
    }

    bb18: {
        switchInt((*_1)[6 of 10]) -> [116: bb19, otherwise: bb10];
    }

    bb19: {
        switchInt((*_1)[7 of 10]) -> [121: bb20, otherwise: bb10];
    }

    bb20: {
        switchInt((*_1)[8 of 10]) -> [112: bb21, otherwise: bb10];
    }

    bb21: {
        switchInt((*_1)[9 of 10]) -> [101: bb23, otherwise: bb10];
    }

    bb22: {
        _0 = const 0_u32;
        goto -> bb24;
    }

    bb23: {
        _0 = const 1_u32;
        goto -> bb24;
    }

    bb24: {
        return;
    }
}

fn match_array(_1: &[u8; 5]) -> bool {
    debug x => _1;
    let mut _0: bool;
    let mut _2: u8;

    bb0: {
        switchInt((*_1)[0 of 5]) -> [104: bb1, otherwise: bb5];
    }

    bb1: {
        switchInt((*_1)[1 of 5]) -> [101: bb2, otherwise: bb5];
    }

    bb2: {
        switchInt((*_1)[2 of 5]) -> [108: bb3, otherwise: bb5];
    }

    bb3: {
        switchInt((*_1)[3 of 5]) -> [108: bb4, otherwise: bb5];
    }

    bb4: {
        StorageLive(_2);
        _2 = (*_1)[4 of 5];
        _0 = Eq(_2, const 111_u8);
        StorageDead(_2);
        goto -> bb6;
    }

    bb5: {
        _0 = const false;
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

match_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: u32;
    let mut _4: &[u8];
    let _5: &[u8; 5];
    let _6: &u32;
    let _7: &u32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u32;
    let mut _11: u32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&u32, &u32);
    let mut _16: &u32;
    let _17: u32;
    let mut _18: &[u8];
    let _19: &[u8; 10];
    let _20: &u32;
    let _21: &u32;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u32;
    let mut _25: u32;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&u32, &u32);
    let mut _30: &u32;
    let _31: u32;
    let mut _32: &[u8];
    let _33: &[u8; 9];
    let _34: &u32;
    let _35: &u32;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: u32;
    let mut _39: u32;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&bool, &bool);
    let mut _44: &bool;
    let _45: bool;
    let _46: &[u8; 5];
    let _47: &bool;
    let _48: &bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _56: (&bool, &bool);
    let mut _57: &bool;
    let _58: bool;
    let _59: &[u8; 5];
    let _60: &bool;
    let _61: &bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let _67: !;
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _69: &bool;
    let mut _70: &bool;
    let mut _71: &u32;
    let mut _72: &u32;
    let mut _73: &u32;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 6 {
            debug kind => _40;
        }
    }
    scope 7 {
        debug left_val => _47;
        debug right_val => _48;
        let _53: core::panicking::AssertKind;
        scope 8 {
            debug kind => _53;
        }
    }
    scope 9 {
        debug left_val => _60;
        debug right_val => _61;
        let _66: core::panicking::AssertKind;
        scope 10 {
            debug kind => _66;
        }
    }

    bb0: {
        _5 = const b"abcde";
        _4 = _5 as &[u8] (Pointer(Unsize));
        _3 = match_slice(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _73 = const _;
        _1 = (move _2, _73);
        _6 = (_1.0: &u32);
        _7 = (_1.1: &u32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u32, u32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _19 = const b"event_type";
        _18 = _19 as &[u8] (Pointer(Unsize));
        _17 = match_slice(move _18) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = &_17;
        _72 = const _;
        _15 = (move _16, _72);
        _20 = (_15.0: &u32);
        _21 = (_15.1: &u32);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u32, u32>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb6: {
        _33 = const b"partition";
        _32 = _33 as &[u8] (Pointer(Unsize));
        _31 = match_slice(move _32) -> [return: bb7, unwind continue];
    }

    bb7: {
        _30 = &_31;
        _71 = const _;
        _29 = (move _30, _71);
        _34 = (_29.0: &u32);
        _35 = (_29.1: &u32);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<u32, u32>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb9: {
        _46 = const b"hello";
        _45 = match_array(_46) -> [return: bb10, unwind continue];
    }

    bb10: {
        _44 = &_45;
        _70 = const _;
        _43 = (move _44, _70);
        _47 = (_43.0: &bool);
        _48 = (_43.1: &bool);
        _51 = (*_47);
        _52 = (*_48);
        _50 = Eq(move _51, move _52);
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<bool, bool>(move _53, _47, _48, move _55) -> unwind continue;
    }

    bb12: {
        _59 = const b"hella";
        _58 = match_array(_59) -> [return: bb13, unwind continue];
    }

    bb13: {
        _57 = &_58;
        _69 = const _;
        _56 = (move _57, _69);
        _60 = (_56.0: &bool);
        _61 = (_56.1: &bool);
        _64 = (*_60);
        _65 = (*_61);
        _63 = Eq(move _64, move _65);
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _66 = core::panicking::AssertKind::Eq;
        _68 = Option::<Arguments<'_>>::None;
        _67 = core::panicking::assert_failed::<bool, bool>(move _66, _60, _61, move _68) -> unwind continue;
    }

    bb15: {
        return;
    }
}

alloc11 (size: 5, align: 1) {
    68 65 6c 6c 61                                  │ hella
}

alloc10 (size: 5, align: 1) {
    68 65 6c 6c 6f                                  │ hello
}

alloc9 (size: 9, align: 1) {
    70 61 72 74 69 74 69 6f 6e                      │ partition
}

alloc8 (size: 10, align: 1) {
    65 76 65 6e 74 5f 74 79 70 65                   │ event_type
}

alloc7 (size: 5, align: 1) {
    61 62 63 64 65                                  │ abcde
}

promoted[0] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 0_u32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2_u32;
        _0 = &_1;
        return;
    }
}
