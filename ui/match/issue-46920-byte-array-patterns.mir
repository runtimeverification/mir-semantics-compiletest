// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const CURSOR_PARTITION_LABEL: &[u8] = {
    let mut _0: &[u8];                   // return place in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:2:31: 2:44
    let mut _1: &[u8; 9];                // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:2:47: 2:59
    let _2: &[u8; 9];                    // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:2:47: 2:59

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:2:47: 2:59
        StorageLive(_2);                 // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:2:47: 2:59
        _2 = const b"partition";         // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:2:47: 2:59
                                         // mir::Constant
                                         // + span: ui/match/issue-46920-byte-array-patterns.rs:2:47: 2:59
                                         // + literal: Const { ty: &[u8; 9], val: Value(Scalar(alloc1)) }
        _1 = &(*_2);                     // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:2:47: 2:59
        _0 = move _1 as &[u8] (Pointer(Unsize)); // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:2:47: 2:59
        StorageDead(_2);                 // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:2:58: 2:59
        StorageDead(_1);                 // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:2:58: 2:59
        return;                          // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:2:1: 2:60
    }
}

alloc1 (size: 9, align: 1) {
    70 61 72 74 69 74 69 6f 6e                      │ partition
}

const CURSOR_EVENT_TYPE_LABEL: &[u8] = {
    let mut _0: &[u8];                   // return place in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:3:32: 3:45
    let mut _1: &[u8; 10];               // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:3:48: 3:61
    let _2: &[u8; 10];                   // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:3:48: 3:61

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:3:48: 3:61
        StorageLive(_2);                 // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:3:48: 3:61
        _2 = const b"event_type";        // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:3:48: 3:61
                                         // mir::Constant
                                         // + span: ui/match/issue-46920-byte-array-patterns.rs:3:48: 3:61
                                         // + literal: Const { ty: &[u8; 10], val: Value(Scalar(alloc5)) }
        _1 = &(*_2);                     // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:3:48: 3:61
        _0 = move _1 as &[u8] (Pointer(Unsize)); // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:3:48: 3:61
        StorageDead(_2);                 // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:3:60: 3:61
        StorageDead(_1);                 // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:3:60: 3:61
        return;                          // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:3:1: 3:62
    }
}

alloc5 (size: 10, align: 1) {
    65 76 65 6e 74 5f 74 79 70 65                   │ event_type
}

const BYTE_PATTERN: &[u8; 5] = {
    let mut _0: &[u8; 5];                // return place in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:4:21: 4:37

    bb0: {
        _0 = const b"hello";             // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:4:40: 4:48
                                         // mir::Constant
                                         // + span: ui/match/issue-46920-byte-array-patterns.rs:4:40: 4:48
                                         // + literal: Const { ty: &[u8; 5], val: Value(Scalar(alloc9)) }
        return;                          // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:4:1: 4:49
    }
}

alloc9 (size: 5, align: 1) {
    68 65 6c 6c 6f                                  │ hello
}

BYTE_PATTERN::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:4:35: 4:36

    bb0: {
        _0 = const 5_usize;              // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:4:35: 4:36
        return;                          // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:4:35: 4:36
    }
}

fn match_slice(_1: &[u8]) -> u32 {
    debug x => _1;                       // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:6:16: 6:17
    let mut _0: u32;                     // return place in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:6:29: 6:32
    let mut _2: usize;                   // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:9:9: 9:32
    let mut _3: usize;                   // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:9:9: 9:32
    let mut _4: bool;                    // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:9:9: 9:32
    let mut _5: usize;                   // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:8:9: 8:31
    let mut _6: usize;                   // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:8:9: 8:31
    let mut _7: bool;                    // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:8:9: 8:31

    bb0: {
        _5 = Len((*_1));                 // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:8:9: 8:31
        _6 = const 9_usize;              // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:8:9: 8:31
        _7 = Eq(move _5, move _6);       // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:8:9: 8:31
        switchInt(move _7) -> [0: bb11, otherwise: bb1]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:8:9: 8:31
    }

    bb1: {
        switchInt((*_1)[0 of 9]) -> [112: bb2, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb2: {
        switchInt((*_1)[1 of 9]) -> [97: bb3, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb3: {
        switchInt((*_1)[2 of 9]) -> [114: bb4, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb4: {
        switchInt((*_1)[3 of 9]) -> [116: bb5, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb5: {
        switchInt((*_1)[4 of 9]) -> [105: bb6, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb6: {
        switchInt((*_1)[5 of 9]) -> [116: bb7, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb7: {
        switchInt((*_1)[6 of 9]) -> [105: bb8, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb8: {
        switchInt((*_1)[7 of 9]) -> [111: bb9, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb9: {
        switchInt((*_1)[8 of 9]) -> [110: bb22, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb10: {
        _0 = const 2_u32;                // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:10:14: 10:15
        goto -> bb24;                    // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:10:14: 10:15
    }

    bb11: {
        _2 = Len((*_1));                 // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:9:9: 9:32
        _3 = const 10_usize;             // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:9:9: 9:32
        _4 = Eq(move _2, move _3);       // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:9:9: 9:32
        switchInt(move _4) -> [0: bb10, otherwise: bb12]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:9:9: 9:32
    }

    bb12: {
        switchInt((*_1)[0 of 10]) -> [101: bb13, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb13: {
        switchInt((*_1)[1 of 10]) -> [118: bb14, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb14: {
        switchInt((*_1)[2 of 10]) -> [101: bb15, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb15: {
        switchInt((*_1)[3 of 10]) -> [110: bb16, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb16: {
        switchInt((*_1)[4 of 10]) -> [116: bb17, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb17: {
        switchInt((*_1)[5 of 10]) -> [95: bb18, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb18: {
        switchInt((*_1)[6 of 10]) -> [116: bb19, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb19: {
        switchInt((*_1)[7 of 10]) -> [121: bb20, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb20: {
        switchInt((*_1)[8 of 10]) -> [112: bb21, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb21: {
        switchInt((*_1)[9 of 10]) -> [101: bb23, otherwise: bb10]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:7:5: 7:12
    }

    bb22: {
        _0 = const 0_u32;                // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:8:35: 8:36
        goto -> bb24;                    // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:8:35: 8:36
    }

    bb23: {
        _0 = const 1_u32;                // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:9:36: 9:37
        goto -> bb24;                    // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:9:36: 9:37
    }

    bb24: {
        return;                          // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:12:2: 12:2
    }
}

fn match_array(_1: &[u8; 5]) -> bool {
    debug x => _1;                       // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:14:16: 14:17
    let mut _0: bool;                    // return place in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:14:32: 14:36

    bb0: {
        switchInt((*_1)[0 of 5]) -> [104: bb1, otherwise: bb5]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:15:5: 15:12
    }

    bb1: {
        switchInt((*_1)[1 of 5]) -> [101: bb2, otherwise: bb5]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:15:5: 15:12
    }

    bb2: {
        switchInt((*_1)[2 of 5]) -> [108: bb3, otherwise: bb5]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:15:5: 15:12
    }

    bb3: {
        switchInt((*_1)[3 of 5]) -> [108: bb4, otherwise: bb5]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:15:5: 15:12
    }

    bb4: {
        switchInt((*_1)[4 of 5]) -> [111: bb6, otherwise: bb5]; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:15:5: 15:12
    }

    bb5: {
        _0 = const false;                // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:17:14: 17:19
        goto -> bb7;                     // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:17:14: 17:19
    }

    bb6: {
        _0 = const true;                 // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:16:25: 16:29
        goto -> bb7;                     // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:16:25: 16:29
    }

    bb7: {
        return;                          // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:19:2: 19:2
    }
}

match_array::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:14:25: 14:26

    bb0: {
        _0 = const 5_usize;              // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:14:25: 14:26
        return;                          // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:14:25: 14:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:21:11: 21:11
    let mut _1: (&u32, &u32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: u32;                         // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:22:16: 22:37
    let mut _4: &[u8];                   // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:22:28: 22:36
    let mut _5: &[u8; 5];                // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:22:28: 22:36
    let _6: &[u8; 5];                    // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:22:28: 22:36
    let mut _7: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _8: &u32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &u32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _24: u32;                        // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:23:16: 23:42
    let mut _25: &[u8];                  // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:23:28: 23:41
    let mut _26: &[u8; 10];              // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:23:28: 23:41
    let _27: &[u8; 10];                  // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:23:28: 23:41
    let mut _28: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _29: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _30: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _43: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _44: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _45: u32;                        // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:24:16: 24:41
    let mut _46: &[u8];                  // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:24:28: 24:40
    let mut _47: &[u8; 9];               // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:24:28: 24:40
    let _48: &[u8; 9];                   // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:24:28: 24:40
    let mut _49: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _50: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _51: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _52: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _54: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _55: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _57: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _58: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _59: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _60: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _61: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _62: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _64: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _65: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _66: bool;                       // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:26:16: 26:37
    let mut _67: &[u8; 5];               // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:26:28: 26:36
    let _68: &[u8; 5];                   // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:26:28: 26:36
    let mut _69: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _70: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _71: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _72: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _73: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _74: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _75: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _77: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _78: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _79: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _80: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _81: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _82: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _83: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _84: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _85: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _86: bool;                       // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:27:16: 27:37
    let mut _87: &[u8; 5];               // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:27:28: 27:36
    let _88: &[u8; 5];                   // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:27:28: 27:36
    let mut _89: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _90: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _91: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _92: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _93: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _94: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _95: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _97: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _98: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _99: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _100: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _101: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _102: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _103: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _104: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _105: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _106: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _107: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _108: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _29;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _30;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _35: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _35;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _50;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _51;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _56: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _56;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _70;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _71;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _76: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _76;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _90;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _91;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _96: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _96;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _6 = const b"abcde";             // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:22:28: 22:36
                                         // mir::Constant
                                         // + span: ui/match/issue-46920-byte-array-patterns.rs:22:28: 22:36
                                         // + literal: Const { ty: &[u8; 5], val: Value(Scalar(alloc12)) }
        _5 = _6;                         // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:22:28: 22:36
        _4 = move _5 as &[u8] (Pointer(Unsize)); // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:22:28: 22:36
        _3 = match_slice(move _4) -> bb1; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:22:16: 22:37
                                         // mir::Constant
                                         // + span: ui/match/issue-46920-byte-array-patterns.rs:22:16: 22:27
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> u32 {match_slice}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _108 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[4])) }
        _7 = _108;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _7);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_1.0: &u32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_1.1: &u32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 2_u32;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<u32, u32>(move _16, move _17, move _19, move _21); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb3: {
        _27 = const b"event_type";       // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:23:28: 23:41
                                         // mir::Constant
                                         // + span: ui/match/issue-46920-byte-array-patterns.rs:23:28: 23:41
                                         // + literal: Const { ty: &[u8; 10], val: Value(Scalar(alloc13)) }
        _26 = _27;                       // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:23:28: 23:41
        _25 = move _26 as &[u8] (Pointer(Unsize)); // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:23:28: 23:41
        _24 = match_slice(move _25) -> bb4; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:23:16: 23:42
                                         // mir::Constant
                                         // + span: ui/match/issue-46920-byte-array-patterns.rs:23:16: 23:27
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> u32 {match_slice}, val: Value(<ZST>) }
    }

    bb4: {
        _23 = &_24;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _107 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[3])) }
        _28 = _107;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _28);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_22.0: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_22.1: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = (*_29);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = const 1_u32;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = Eq(move _33, move _34);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _31 = Not(move _32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _35 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<u32, u32>(move _37, move _38, move _40, move _42); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb6: {
        _48 = const b"partition";        // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:24:28: 24:40
                                         // mir::Constant
                                         // + span: ui/match/issue-46920-byte-array-patterns.rs:24:28: 24:40
                                         // + literal: Const { ty: &[u8; 9], val: Value(Scalar(alloc14)) }
        _47 = _48;                       // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:24:28: 24:40
        _46 = move _47 as &[u8] (Pointer(Unsize)); // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:24:28: 24:40
        _45 = match_slice(move _46) -> bb7; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:24:16: 24:41
                                         // mir::Constant
                                         // + span: ui/match/issue-46920-byte-array-patterns.rs:24:16: 24:27
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> u32 {match_slice}, val: Value(<ZST>) }
    }

    bb7: {
        _44 = &_45;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _106 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[2])) }
        _49 = _106;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _43 = (move _44, move _49);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _50 = (_43.0: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _51 = (_43.1: &u32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _54 = (*_50);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _55 = const 0_u32;               // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _53 = Eq(move _54, move _55);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _52 = Not(move _53);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _52) -> [0: bb9, otherwise: bb8]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _56 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _60 = _50;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _59 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _51;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = _62;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _63 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _57 = core::panicking::assert_failed::<u32, u32>(move _58, move _59, move _61, move _63); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb9: {
        _68 = const b"hello";            // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:26:28: 26:36
                                         // mir::Constant
                                         // + span: ui/match/issue-46920-byte-array-patterns.rs:26:28: 26:36
                                         // + literal: Const { ty: &[u8; 5], val: Value(Scalar(alloc15)) }
        _67 = _68;                       // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:26:28: 26:36
        _66 = match_array(move _67) -> bb10; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:26:16: 26:37
                                         // mir::Constant
                                         // + span: ui/match/issue-46920-byte-array-patterns.rs:26:16: 26:27
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 5]) -> bool {match_array}, val: Value(<ZST>) }
    }

    bb10: {
        _65 = &_66;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _105 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &bool, val: Unevaluated(main, [], Some(promoted[1])) }
        _69 = _105;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _64 = (move _65, move _69);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _70 = (_64.0: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _71 = (_64.1: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _74 = (*_70);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _75 = const true;                // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _73 = Eq(move _74, move _75);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _72 = Not(move _73);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _72) -> [0: bb12, otherwise: bb11]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _76 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _78 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _80 = _70;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _79 = _80;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _82 = _71;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _81 = _82;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _83 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _77 = core::panicking::assert_failed::<bool, bool>(move _78, move _79, move _81, move _83); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb12: {
        _88 = const b"hella";            // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:27:28: 27:36
                                         // mir::Constant
                                         // + span: ui/match/issue-46920-byte-array-patterns.rs:27:28: 27:36
                                         // + literal: Const { ty: &[u8; 5], val: Value(Scalar(alloc16)) }
        _87 = _88;                       // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:27:28: 27:36
        _86 = match_array(move _87) -> bb13; // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:27:16: 27:37
                                         // mir::Constant
                                         // + span: ui/match/issue-46920-byte-array-patterns.rs:27:16: 27:27
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 5]) -> bool {match_array}, val: Value(<ZST>) }
    }

    bb13: {
        _85 = &_86;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _104 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &bool, val: Unevaluated(main, [], Some(promoted[0])) }
        _89 = _104;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _84 = (move _85, move _89);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _90 = (_84.0: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _91 = (_84.1: &bool);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _94 = (*_90);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _95 = const false;               // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _93 = Eq(move _94, move _95);    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _92 = Not(move _93);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _92) -> [0: bb15, otherwise: bb14]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _96 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _98 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _100 = _90;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _99 = _100;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _102 = _91;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _101 = _102;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _103 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _97 = core::panicking::assert_failed::<bool, bool>(move _98, move _99, move _101, move _103); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb15: {
        return;                          // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:28:2: 28:2
    }
}

alloc16 (size: 5, align: 1) {
    68 65 6c 6c 61                                  │ hella
}

alloc15 (size: 5, align: 1) {
    68 65 6c 6c 6f                                  │ hello
}

alloc14 (size: 9, align: 1) {
    70 61 72 74 69 74 69 6f 6e                      │ partition
}

alloc13 (size: 10, align: 1) {
    65 76 65 6e 74 5f 74 79 70 65                   │ event_type
}

alloc12 (size: 5, align: 1) {
    61 62 63 64 65                                  │ abcde
}

promoted[0] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: bool;                    // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:27:39: 27:44

    bb0: {
        _1 = const false;                // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:27:39: 27:44
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: bool;                    // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:26:39: 26:43

    bb0: {
        _1 = const true;                 // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:26:39: 26:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:24:43: 24:44

    bb0: {
        _1 = const 0_u32;                // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:24:43: 24:44
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:23:44: 23:45

    bb0: {
        _1 = const 1_u32;                // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:23:44: 23:45
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/match/issue-46920-byte-array-patterns.rs:22:39: 22:40

    bb0: {
        _1 = const 2_u32;                // scope 0 at ui/match/issue-46920-byte-array-patterns.rs:22:39: 22:40
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
