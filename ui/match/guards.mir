// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/match/guards.rs:5:16: 5:21>::clone(_1: &Pair) -> Pair {
    debug self => _1;
    let mut _0: Pair;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: isize;
    let mut _2: i32;
    let mut _3: bool;
    let mut _4: i32;
    let mut _5: bool;
    let mut _6: i32;
    let mut _7: (&isize, &isize);
    let mut _8: &isize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: Pair;
    let mut _20: bool;
    let mut _21: isize;
    let mut _22: bool;
    let mut _23: isize;
    let mut _28: isize;
    let mut _29: isize;
    let mut _32: (&isize, &isize);
    let mut _33: &isize;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: isize;
    let mut _39: isize;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _48: &i32;
    let mut _49: &i32;
    scope 1 {
        debug a => _1;
        let _9: &isize;
        let _10: &isize;
        let _18: isize;
        let _24: isize;
        let _25: &isize;
        let _26: isize;
        let _27: &isize;
        let _30: isize;
        let _31: isize;
        let mut _44: &Pair;
        let mut _45: &Pair;
        let mut _46: &Pair;
        let mut _47: &isize;
        scope 4 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 5 {
                debug kind => _15;
            }
        }
        scope 6 {
            debug b => _18;
            let _34: &isize;
            let _35: &isize;
            let mut _43: &isize;
            scope 10 {
                debug left_val => _34;
                debug right_val => _35;
                let _40: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _40;
                }
            }
        }
        scope 7 {
            debug x => _19;
            debug x => const _;
        }
        scope 8 {
            debug x => _24;
            debug x => _25;
            debug y => _26;
            debug y => _27;
        }
        scope 9 {
            debug _x => _30;
            debug _y => _31;
        }
    }
    scope 2 {
        debug x => const 10_i32;
        debug x => const _;
    }
    scope 3 {
        debug x => const 10_i32;
        debug x => const _;
    }

    bb0: {
        _2 = const 10_i32;
        _49 = const _;
        _4 = (*_49);
        _3 = Lt(move _4, const 7_i32);
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb1: {
        _1 = const 4_isize;
        goto -> bb7;
    }

    bb2: {
        _1 = const 1_isize;
        goto -> bb7;
    }

    bb3: {
        _48 = const _;
        _6 = (*_48);
        _5 = Lt(move _6, const 11_i32);
        switchInt(move _5) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _1 = const 2_isize;
        goto -> bb7;
    }

    bb5: {
        switchInt(_2) -> [10: bb6, otherwise: bb1];
    }

    bb6: {
        _1 = const 3_isize;
        goto -> bb7;
    }

    bb7: {
        _8 = &_1;
        _47 = const _;
        _7 = (move _8, _47);
        _9 = (_7.0: &isize);
        _10 = (_7.1: &isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<isize, isize>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb9: {
        _19 = Pair { x: const 10_isize, y: const 20_isize };
        _46 = const _;
        _21 = ((*_46).0: isize);
        _20 = Lt(move _21, const 5_isize);
        switchInt(move _20) -> [0: bb12, otherwise: bb10];
    }

    bb10: {
        _23 = ((*_46).1: isize);
        _22 = Lt(move _23, const 5_isize);
        switchInt(move _22) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _18 = const 1_isize;
        goto -> bb16;
    }

    bb12: {
        _45 = const _;
        _25 = &((*_45).0: isize);
        _44 = const _;
        _27 = &((*_44).1: isize);
        _28 = (*_25);
        switchInt(move _28) -> [10: bb13, otherwise: bb15];
    }

    bb13: {
        _29 = (*_27);
        switchInt(move _29) -> [20: bb14, otherwise: bb15];
    }

    bb14: {
        _24 = (_19.0: isize);
        _26 = (_19.1: isize);
        _18 = const 2_isize;
        goto -> bb16;
    }

    bb15: {
        _30 = (_19.0: isize);
        _31 = (_19.1: isize);
        _18 = const 3_isize;
        goto -> bb16;
    }

    bb16: {
        _33 = &_18;
        _43 = const _;
        _32 = (move _33, _43);
        _34 = (_32.0: &isize);
        _35 = (_32.1: &isize);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<isize, isize>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb18: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Pair = {
    let mut _0: &Pair;
    let mut _1: Pair;

    bb0: {
        _1 = Pair { x: const 10_isize, y: const 20_isize };
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Pair = {
    let mut _0: &Pair;
    let mut _1: Pair;

    bb0: {
        _1 = Pair { x: const 10_isize, y: const 20_isize };
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &Pair = {
    let mut _0: &Pair;
    let mut _1: Pair;

    bb0: {
        _1 = Pair { x: const 10_isize, y: const 20_isize };
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 10_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 10_i32;
        _0 = &_1;
        return;
    }
}
