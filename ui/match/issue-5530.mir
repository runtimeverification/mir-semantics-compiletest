// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn fun1(_1: &Enum, _2: &Enum) -> usize {
    debug e1 => _1;
    debug e2 => _2;
    let mut _0: usize;
    let mut _3: (&Enum, &Enum);
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: &Enum;
    let mut _8: &Enum;
    let mut _9: &Enum;

    bb0: {
        _3 = (_1, _2);
        _7 = deref_copy (_3.0: &Enum);
        _6 = discriminant((*_7));
        switchInt(move _6) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _8 = deref_copy (_3.1: &Enum);
        _4 = discriminant((*_8));
        switchInt(move _4) -> [0: bb5, 1: bb6, otherwise: bb2];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _9 = deref_copy (_3.1: &Enum);
        _5 = discriminant((*_9));
        switchInt(move _5) -> [0: bb4, 1: bb7, otherwise: bb2];
    }

    bb4: {
        _0 = const 3_usize;
        goto -> bb8;
    }

    bb5: {
        _0 = const 0_usize;
        goto -> bb8;
    }

    bb6: {
        _0 = const 1_usize;
        goto -> bb8;
    }

    bb7: {
        _0 = const 2_usize;
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn fun2(_1: &Enum, _2: &Enum) -> usize {
    debug e1 => _1;
    debug e2 => _2;
    let mut _0: usize;
    let mut _3: (&Enum, &Enum);
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: &Enum;
    let mut _8: &Enum;
    let mut _9: &Enum;

    bb0: {
        _3 = (_1, _2);
        _7 = deref_copy (_3.0: &Enum);
        _6 = discriminant((*_7));
        switchInt(move _6) -> [0: bb1, 1: bb2, otherwise: bb4];
    }

    bb1: {
        _8 = deref_copy (_3.1: &Enum);
        _4 = discriminant((*_8));
        switchInt(move _4) -> [0: bb5, otherwise: bb6];
    }

    bb2: {
        _9 = deref_copy (_3.1: &Enum);
        _5 = discriminant((*_9));
        switchInt(move _5) -> [1: bb7, otherwise: bb3];
    }

    bb3: {
        _0 = const 3_usize;
        goto -> bb8;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = const 0_usize;
        goto -> bb8;
    }

    bb6: {
        _0 = const 1_usize;
        goto -> bb8;
    }

    bb7: {
        _0 = const 2_usize;
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Enum;
    let mut _3: (&usize, &usize);
    let mut _4: &usize;
    let _5: usize;
    let _6: &Enum;
    let _7: &Enum;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&usize, &usize);
    let mut _18: &usize;
    let _19: usize;
    let _20: &Enum;
    let _21: &Enum;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: usize;
    let mut _27: usize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&usize, &usize);
    let mut _32: &usize;
    let _33: usize;
    let _34: &Enum;
    let _35: &Enum;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: usize;
    let mut _41: usize;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&usize, &usize);
    let mut _46: &usize;
    let _47: usize;
    let _48: &Enum;
    let _49: &Enum;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: usize;
    let mut _55: usize;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: (&usize, &usize);
    let mut _60: &usize;
    let _61: usize;
    let _62: &Enum;
    let _63: &Enum;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: usize;
    let mut _69: usize;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&usize, &usize);
    let mut _74: &usize;
    let _75: usize;
    let _76: &Enum;
    let _77: &Enum;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: usize;
    let mut _83: usize;
    let _85: !;
    let mut _86: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _87: (&usize, &usize);
    let mut _88: &usize;
    let _89: usize;
    let _90: &Enum;
    let _91: &Enum;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: usize;
    let mut _97: usize;
    let _99: !;
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _101: (&usize, &usize);
    let mut _102: &usize;
    let _103: usize;
    let _104: &Enum;
    let _105: &Enum;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: usize;
    let mut _111: usize;
    let _113: !;
    let mut _114: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo => _1;
        let _2: Enum;
        scope 2 {
            debug bar => _2;
            let _8: &usize;
            let _9: &usize;
            let _22: &usize;
            let _23: &usize;
            let _36: &usize;
            let _37: &usize;
            let _50: &usize;
            let _51: &usize;
            let _64: &usize;
            let _65: &usize;
            let _78: &usize;
            let _79: &usize;
            let _92: &usize;
            let _93: &usize;
            let _106: &usize;
            let _107: &usize;
            let mut _115: &usize;
            let mut _116: &usize;
            let mut _117: &usize;
            let mut _118: &usize;
            let mut _119: &usize;
            let mut _120: &usize;
            let mut _121: &usize;
            let mut _122: &usize;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
            scope 5 {
                debug left_val => _22;
                debug right_val => _23;
                let _28: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _28;
                }
            }
            scope 7 {
                debug left_val => _36;
                debug right_val => _37;
                let _42: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _42;
                }
            }
            scope 9 {
                debug left_val => _50;
                debug right_val => _51;
                let _56: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _56;
                }
            }
            scope 11 {
                debug left_val => _64;
                debug right_val => _65;
                let _70: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _70;
                }
            }
            scope 13 {
                debug left_val => _78;
                debug right_val => _79;
                let _84: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _84;
                }
            }
            scope 15 {
                debug left_val => _92;
                debug right_val => _93;
                let _98: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _98;
                }
            }
            scope 17 {
                debug left_val => _106;
                debug right_val => _107;
                let _112: core::panicking::AssertKind;
                scope 18 {
                    debug kind => _112;
                }
            }
        }
    }

    bb0: {
        _1 = Enum::Foo { foo: const 1_usize };
        _2 = Enum::Bar { bar: const 1_usize };
        _6 = &_1;
        _7 = &_1;
        _5 = fun1(_6, _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        _122 = const _;
        _3 = (move _4, _122);
        _8 = (_3.0: &usize);
        _9 = (_3.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb3: {
        _20 = &_1;
        _21 = &_2;
        _19 = fun1(_20, _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        _18 = &_19;
        _121 = const _;
        _17 = (move _18, _121);
        _22 = (_17.0: &usize);
        _23 = (_17.1: &usize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<usize, usize>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _34 = &_2;
        _35 = &_2;
        _33 = fun1(_34, _35) -> [return: bb7, unwind continue];
    }

    bb7: {
        _32 = &_33;
        _120 = const _;
        _31 = (move _32, _120);
        _36 = (_31.0: &usize);
        _37 = (_31.1: &usize);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<usize, usize>(move _42, _36, _37, move _44) -> unwind continue;
    }

    bb9: {
        _48 = &_2;
        _49 = &_1;
        _47 = fun1(_48, _49) -> [return: bb10, unwind continue];
    }

    bb10: {
        _46 = &_47;
        _119 = const _;
        _45 = (move _46, _119);
        _50 = (_45.0: &usize);
        _51 = (_45.1: &usize);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<usize, usize>(move _56, _50, _51, move _58) -> unwind continue;
    }

    bb12: {
        _62 = &_1;
        _63 = &_1;
        _61 = fun2(_62, _63) -> [return: bb13, unwind continue];
    }

    bb13: {
        _60 = &_61;
        _118 = const _;
        _59 = (move _60, _118);
        _64 = (_59.0: &usize);
        _65 = (_59.1: &usize);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<usize, usize>(move _70, _64, _65, move _72) -> unwind continue;
    }

    bb15: {
        _76 = &_1;
        _77 = &_2;
        _75 = fun2(_76, _77) -> [return: bb16, unwind continue];
    }

    bb16: {
        _74 = &_75;
        _117 = const _;
        _73 = (move _74, _117);
        _78 = (_73.0: &usize);
        _79 = (_73.1: &usize);
        _82 = (*_78);
        _83 = (*_79);
        _81 = Eq(move _82, move _83);
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _84 = core::panicking::AssertKind::Eq;
        _86 = Option::<Arguments<'_>>::None;
        _85 = core::panicking::assert_failed::<usize, usize>(move _84, _78, _79, move _86) -> unwind continue;
    }

    bb18: {
        _90 = &_2;
        _91 = &_2;
        _89 = fun2(_90, _91) -> [return: bb19, unwind continue];
    }

    bb19: {
        _88 = &_89;
        _116 = const _;
        _87 = (move _88, _116);
        _92 = (_87.0: &usize);
        _93 = (_87.1: &usize);
        _96 = (*_92);
        _97 = (*_93);
        _95 = Eq(move _96, move _97);
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _98 = core::panicking::AssertKind::Eq;
        _100 = Option::<Arguments<'_>>::None;
        _99 = core::panicking::assert_failed::<usize, usize>(move _98, _92, _93, move _100) -> unwind continue;
    }

    bb21: {
        _104 = &_2;
        _105 = &_1;
        _103 = fun2(_104, _105) -> [return: bb22, unwind continue];
    }

    bb22: {
        _102 = &_103;
        _115 = const _;
        _101 = (move _102, _115);
        _106 = (_101.0: &usize);
        _107 = (_101.1: &usize);
        _110 = (*_106);
        _111 = (*_107);
        _109 = Eq(move _110, move _111);
        _108 = Not(move _109);
        switchInt(move _108) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _112 = core::panicking::AssertKind::Eq;
        _114 = Option::<Arguments<'_>>::None;
        _113 = core::panicking::assert_failed::<usize, usize>(move _112, _106, _107, move _114) -> unwind continue;
    }

    bb24: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}
