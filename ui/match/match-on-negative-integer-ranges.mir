// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&bool, &bool);
    let mut _2: &bool;
    let _3: bool;
    let mut _4: i8;
    let mut _5: bool;
    let mut _6: bool;
    let _7: &bool;
    let _8: &bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&bool, &bool);
    let mut _17: &bool;
    let _18: bool;
    let mut _19: i8;
    let mut _20: bool;
    let mut _21: bool;
    let _22: &bool;
    let _23: &bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: &bool;
    let mut _32: &bool;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
    }
    scope 4 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 5 {
            debug kind => _28;
        }
    }

    bb0: {
        _32 = const _;
        _4 = const -50_i8;
        _5 = Le(const i8::MIN, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = Le(_4, const -101_i8);
        _3 = _6;
        goto -> bb3;
    }

    bb2: {
        _3 = const false;
        goto -> bb3;
    }

    bb3: {
        _2 = &_3;
        _1 = (_32, move _2);
        _7 = (_1.0: &bool);
        _8 = (_1.1: &bool);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<bool, bool>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb5: {
        _31 = const _;
        _19 = const -50_i8;
        _20 = Le(const i8::MIN, _19);
        switchInt(move _20) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _21 = Le(_19, const -101_i8);
        _18 = _21;
        goto -> bb8;
    }

    bb7: {
        _18 = const false;
        goto -> bb8;
    }

    bb8: {
        _17 = &_18;
        _16 = (_31, move _17);
        _22 = (_16.0: &bool);
        _23 = (_16.1: &bool);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<bool, bool>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb10: {
        return;
    }
}

promoted[0] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}
