// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/match/issue-42679.rs:4:10: 4:15>::fmt(_1: &Test, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &usize;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&usize;
    let _8: &isize;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&isize;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = &(((*_1) as Bar).0: isize);
        _9 = const "Bar";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Foo).0: usize);
        _5 = const "Foo";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn <impl at ui/match/issue-42679.rs:4:17: 4:26>::eq(_1: &Test, _2: &Test) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&Test, &Test);
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _17: isize;
    let mut _18: isize;
    let mut _19: &Test;
    let mut _20: &Test;
    let mut _21: &Test;
    let mut _22: &Test;
    let mut _23: &Test;
    let mut _24: &Test;
    let mut _25: &Test;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _11: &usize;
            let _12: &usize;
            let _15: &isize;
            let _16: &isize;
            scope 3 {
                debug __self_0 => _11;
                debug __arg1_0 => _12;
            }
            scope 4 {
                debug __self_0 => _15;
                debug __arg1_0 => _16;
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _19 = deref_copy (_7.0: &Test);
        _10 = discriminant((*_19));
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _20 = deref_copy (_7.1: &Test);
        _8 = discriminant((*_20));
        switchInt(move _8) -> [0: bb7, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _21 = deref_copy (_7.1: &Test);
        _9 = discriminant((*_21));
        switchInt(move _9) -> [1: bb8, otherwise: bb5];
    }

    bb7: {
        _22 = deref_copy (_7.0: &Test);
        _11 = &(((*_22) as Foo).0: usize);
        _23 = deref_copy (_7.1: &Test);
        _12 = &(((*_23) as Foo).0: usize);
        _13 = (*_11);
        _14 = (*_12);
        _6 = Eq(move _13, move _14);
        goto -> bb9;
    }

    bb8: {
        _24 = deref_copy (_7.0: &Test);
        _15 = &(((*_24) as Bar).0: isize);
        _25 = deref_copy (_7.1: &Test);
        _16 = &(((*_25) as Bar).0: isize);
        _17 = (*_15);
        _18 = (*_16);
        _6 = Eq(move _17, move _18);
        goto -> bb9;
    }

    bb9: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<Test>;
    let mut _2: Test;
    let mut _4: Test;
    let mut _5: (std::boxed::Box<Test>, std::boxed::Box<Test>);
    let mut _6: std::boxed::Box<Test>;
    let mut _7: std::boxed::Box<Test>;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: !;
    let mut _13: (&usize, &usize);
    let mut _14: &usize;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: usize;
    let mut _20: usize;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: (&std::boxed::Box<Test>, &std::boxed::Box<Test>);
    let mut _25: &std::boxed::Box<Test>;
    let mut _26: &std::boxed::Box<Test>;
    let _27: std::boxed::Box<Test>;
    let mut _28: Test;
    let mut _31: bool;
    let mut _32: bool;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: !;
    let mut _38: std::boxed::Box<Test>;
    let mut _39: std::boxed::Box<Test>;
    let mut _40: std::boxed::Box<Test>;
    let mut _41: bool;
    let mut _42: *const Test;
    let mut _43: *const Test;
    let mut _44: *const Test;
    scope 1 {
        debug a => _1;
        let _3: std::boxed::Box<Test>;
        scope 2 {
            debug b => _3;
            let _11: usize;
            let _12: std::boxed::Box<Test>;
            let mut _45: *const ();
            let mut _46: usize;
            let mut _47: usize;
            let mut _48: usize;
            let mut _49: usize;
            let mut _50: bool;
            let mut _51: *const ();
            let mut _52: usize;
            let mut _53: usize;
            let mut _54: usize;
            let mut _55: usize;
            let mut _56: bool;
            let mut _57: *const ();
            let mut _58: usize;
            let mut _59: usize;
            let mut _60: usize;
            let mut _61: usize;
            let mut _62: bool;
            scope 3 {
                debug x => _11;
                debug b => _12;
                let _15: &usize;
                let _16: &usize;
                let _29: &std::boxed::Box<Test>;
                let _30: &std::boxed::Box<Test>;
                let mut _37: &usize;
                scope 4 {
                    debug left_val => _15;
                    debug right_val => _16;
                    let _21: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _21;
                    }
                }
                scope 6 {
                    debug left_val => _29;
                    debug right_val => _30;
                    let _33: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _33;
                    }
                }
            }
        }
    }

    bb0: {
        _41 = const false;
        _2 = Test::Foo(const 10_usize);
        _1 = Box::<Test>::new(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Test::Bar(const -20_isize);
        _3 = Box::<Test>::new(move _4) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _6 = move _1;
        _7 = move _3;
        _41 = const true;
        _5 = (move _6, move _7);
        _38 = deref_copy (_5.1: std::boxed::Box<Test>);
        _42 = (((_38.0: std::ptr::Unique<Test>).0: std::ptr::NonNull<Test>).0: *const Test);
        _57 = _42 as *const () (PtrToPtr);
        _58 = _57 as usize (Transmute);
        _59 = AlignOf(Test);
        _60 = Sub(_59, const 1_usize);
        _61 = BitAnd(_58, _60);
        _62 = Eq(_61, const 0_usize);
        assert(_62, "misaligned pointer dereference: address must be a multiple of {} but is {}", _59, _58) -> [success: bb25, unwind unreachable];
    }

    bb3: {
        _39 = deref_copy (_5.0: std::boxed::Box<Test>);
        _43 = (((_39.0: std::ptr::Unique<Test>).0: std::ptr::NonNull<Test>).0: *const Test);
        _51 = _43 as *const () (PtrToPtr);
        _52 = _51 as usize (Transmute);
        _53 = AlignOf(Test);
        _54 = Sub(_53, const 1_usize);
        _55 = BitAnd(_52, _54);
        _56 = Eq(_55, const 0_usize);
        assert(_56, "misaligned pointer dereference: address must be a multiple of {} but is {}", _53, _52) -> [success: bb24, unwind unreachable];
    }

    bb4: {
        _36 = core::panicking::panic(const "internal error: entered unreachable code") -> bb22;
    }

    bb5: {
        _10 = core::panicking::panic(const "internal error: entered unreachable code") -> bb22;
    }

    bb6: {
        _41 = const false;
        _12 = move (_5.1: std::boxed::Box<Test>);
        _40 = deref_copy (_5.0: std::boxed::Box<Test>);
        _44 = (((_40.0: std::ptr::Unique<Test>).0: std::ptr::NonNull<Test>).0: *const Test);
        _45 = _44 as *const () (PtrToPtr);
        _46 = _45 as usize (Transmute);
        _47 = AlignOf(Test);
        _48 = Sub(_47, const 1_usize);
        _49 = BitAnd(_46, _48);
        _50 = Eq(_49, const 0_usize);
        assert(_50, "misaligned pointer dereference: address must be a multiple of {} but is {}", _47, _46) -> [success: bb23, unwind unreachable];
    }

    bb7: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<usize, usize>(move _21, _15, _16, move _23) -> bb16;
    }

    bb8: {
        _25 = &_12;
        _28 = Test::Bar(const -20_isize);
        _27 = Box::<Test>::new(move _28) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _26 = &_27;
        _24 = (move _25, move _26);
        _29 = (_24.0: &std::boxed::Box<Test>);
        _30 = (_24.1: &std::boxed::Box<Test>);
        _32 = <Box<Test> as PartialEq>::eq(_29, _30) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<Box<Test>, Box<Test>>(move _33, _29, _30, move _35) -> bb15;
    }

    bb12: {
        drop(_27) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        drop(_12) -> [return: bb14, unwind: bb22];
    }

    bb14: {
        drop((_5.0: std::boxed::Box<Test>)) -> [return: bb19, unwind continue];
    }

    bb15 (cleanup): {
        drop(_27) -> [return: bb16, unwind terminate];
    }

    bb16 (cleanup): {
        drop(_12) -> [return: bb22, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_1) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19: {
        _41 = const false;
        return;
    }

    bb20 (cleanup): {
        switchInt(_41) -> [0: bb18, otherwise: bb21];
    }

    bb21 (cleanup): {
        drop((_5.1: std::boxed::Box<Test>)) -> [return: bb18, unwind terminate];
    }

    bb22 (cleanup): {
        drop((_5.0: std::boxed::Box<Test>)) -> [return: bb20, unwind terminate];
    }

    bb23: {
        _11 = (((*_44) as Foo).0: usize);
        _14 = &_11;
        _37 = const _;
        _13 = (move _14, _37);
        _15 = (_13.0: &usize);
        _16 = (_13.1: &usize);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb8, otherwise: bb7];
    }

    bb24: {
        _8 = discriminant((*_43));
        switchInt(move _8) -> [0: bb6, otherwise: bb4];
    }

    bb25: {
        _9 = discriminant((*_42));
        switchInt(move _9) -> [0: bb5, otherwise: bb3];
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 10_usize;
        _0 = &_1;
        return;
    }
}

fn Test::Foo(_1: usize) -> Test {
    let mut _0: Test;

    bb0: {
        _0 = Test::Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Test::Foo(_1: usize) -> Test {
    let mut _0: Test;

    bb0: {
        _0 = Test::Foo(move _1);
        return;
    }
}

fn Test::Bar(_1: isize) -> Test {
    let mut _0: Test;

    bb0: {
        _0 = Test::Bar(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Test::Bar(_1: isize) -> Test {
    let mut _0: Test;

    bb0: {
        _0 = Test::Bar(move _1);
        return;
    }
}
