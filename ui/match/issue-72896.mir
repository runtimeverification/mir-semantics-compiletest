// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/match/issue-72896.rs:11:10: 11:19>::eq(_1: &EnumSet<T>, _2: &EnumSet<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/match/issue-72896.rs:11:10: 11:19
    debug other => _2;                   // in scope 0 at ui/match/issue-72896.rs:11:10: 11:19
    let mut _0: bool;                    // return place in scope 0 at ui/match/issue-72896.rs:11:10: 11:19
    let mut _3: &<T as EnumSetType>::Repr; // in scope 0 at ui/match/issue-72896.rs:13:5: 13:34
    let mut _4: &<T as EnumSetType>::Repr; // in scope 0 at ui/match/issue-72896.rs:13:5: 13:34

    bb0: {
        _3 = &((*_1).0: <T as EnumSetType>::Repr); // scope 0 at ui/match/issue-72896.rs:13:5: 13:34
        _4 = &((*_2).0: <T as EnumSetType>::Repr); // scope 0 at ui/match/issue-72896.rs:13:5: 13:34
        _0 = <<T as EnumSetType>::Repr as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/match/issue-72896.rs:13:5: 13:34
                                         // mir::Constant
                                         // + span: ui/match/issue-72896.rs:13:5: 13:34
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a <T as EnumSetType>::Repr, &'b <T as EnumSetType>::Repr) -> bool {<<T as EnumSetType>::Repr as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/match/issue-72896.rs:11:19: 11:19
    }
}

fn <impl at ui/match/issue-72896.rs:11:21: 11:23>::assert_receiver_is_total_eq(_1: &EnumSet<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/match/issue-72896.rs:11:21: 11:23
    let mut _0: ();                      // return place in scope 0 at ui/match/issue-72896.rs:11:21: 11:23
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/match/issue-72896.rs:11:23: 11:23
    }
}

const CONST_SET: EnumSet<Enum8> = {
    let mut _0: EnumSet<Enum8>;          // return place in scope 0 at ui/match/issue-72896.rs:16:18: 16:32

    bb0: {
        _0 = EnumSet::<Enum8> { __enumset_underlying: const 3_u8 }; // scope 0 at ui/match/issue-72896.rs:16:35: 16:70
        return;                          // scope 0 at ui/match/issue-72896.rs:16:1: 16:71
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/match/issue-72896.rs:18:11: 18:11

    bb0: {
        return;                          // scope 0 at ui/match/issue-72896.rs:23:2: 23:2
    }
}
