// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn assert_invalid_input(_1: &str, _2: Result<T, std::io::Error>) -> () {
    debug on => _1;
    debug result => _2;
    let mut _0: ();
    let mut _3: std::result::Result<(), std::io::Error>;

    bb0: {
        _3 = Result::<T, std::io::Error>::map::<(), fn(T) {std::mem::drop::<T>}>(move _2, std::mem::drop::<T>) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = inner(_1, move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn inner(_1: &str, _2: Result<(), std::io::Error>) -> () {
    debug on => _1;
    debug result => _2;
    let mut _0: ();
    let mut _3: isize;
    let _4: !;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &&str;
    let _12: std::io::Error;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: &std::io::ErrorKind;
    let _16: std::io::ErrorKind;
    let mut _17: &std::io::Error;
    let _18: !;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let _22: &[core::fmt::rt::Argument<'_>; 2];
    let _23: [core::fmt::rt::Argument<'_>; 2];
    let mut _24: core::fmt::rt::Argument<'_>;
    let _25: &&str;
    let mut _26: core::fmt::rt::Argument<'_>;
    let _27: &std::io::ErrorKind;
    let _28: std::io::ErrorKind;
    let mut _29: &std::io::Error;
    let mut _32: &[&str; 2];
    scope 1 {
        debug e => _12;
        let mut _30: &[&str; 3];
        let mut _31: &std::io::ErrorKind;
    }

    bb0: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _12 = move ((_2 as Err).0: std::io::Error);
        _17 = &_12;
        _16 = std::io::Error::kind(move _17) -> [return: bb6, unwind: bb15];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _32 = const _;
        _6 = _32 as &[&str] (Pointer(Unsize));
        _11 = &_1;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _4 = panic_fmt(move _5) -> unwind continue;
    }

    bb6: {
        _15 = &_16;
        _31 = const _;
        _14 = <ErrorKind as PartialEq>::eq(move _15, _31) -> [return: bb7, unwind: bb15];
    }

    bb7: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb13, otherwise: bb8];
    }

    bb8: {
        _30 = const _;
        _20 = _30 as &[&str] (Pointer(Unsize));
        _25 = &_1;
        _24 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_25) -> [return: bb9, unwind: bb15];
    }

    bb9: {
        _29 = &_12;
        _28 = std::io::Error::kind(move _29) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _27 = &_28;
        _26 = core::fmt::rt::Argument::<'_>::new_debug::<ErrorKind>(_27) -> [return: bb11, unwind: bb15];
    }

    bb11: {
        _23 = [move _24, move _26];
        _22 = &_23;
        _21 = _22 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _19 = Arguments::<'_>::new_v1(move _20, move _21) -> [return: bb12, unwind: bb15];
    }

    bb12: {
        _18 = panic_fmt(move _19) -> bb15;
    }

    bb13: {
        drop(_12) -> [return: bb14, unwind continue];
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop(_12) -> [return: bb16, unwind terminate];
    }

    bb16 (cleanup): {
        resume;
    }
}

promoted[0] in inner: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " returned a strange ", const " on a path with NUL"];
        _0 = &_1;
        return;
    }
}

promoted[1] in inner: &ErrorKind = {
    let mut _0: &std::io::ErrorKind;
    let mut _1: std::io::ErrorKind;

    bb0: {
        _1 = InvalidInput;
        _0 = &_1;
        return;
    }
}

promoted[2] in inner: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const " didn't return an error on a path with NUL"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: &str;
    let mut _3: std::result::Result<std::fs::File, std::io::Error>;
    let _4: ();
    let _5: &str;
    let mut _6: std::result::Result<std::fs::File, std::io::Error>;
    let _7: ();
    let _8: &str;
    let mut _9: std::result::Result<(), std::io::Error>;
    let _10: ();
    let _11: &str;
    let mut _12: std::result::Result<std::fs::Metadata, std::io::Error>;
    let _13: ();
    let _14: &str;
    let mut _15: std::result::Result<std::fs::Metadata, std::io::Error>;
    let _16: std::path::PathBuf;
    let mut _17: std::result::Result<std::path::PathBuf, std::io::Error>;
    let _18: ();
    let _19: &str;
    let mut _20: std::result::Result<(), std::io::Error>;
    let _21: ();
    let _22: &str;
    let mut _23: std::result::Result<(), std::io::Error>;
    let mut _24: &std::path::PathBuf;
    let _25: ();
    let _26: &str;
    let mut _27: std::result::Result<u64, std::io::Error>;
    let _28: ();
    let _29: &str;
    let mut _30: std::result::Result<u64, std::io::Error>;
    let mut _31: &std::path::PathBuf;
    let _32: ();
    let _33: &str;
    let mut _34: std::result::Result<(), std::io::Error>;
    let _35: ();
    let _36: &str;
    let mut _37: std::result::Result<(), std::io::Error>;
    let mut _38: &std::path::PathBuf;
    let _39: ();
    let _40: &str;
    let mut _41: std::result::Result<(), std::io::Error>;
    let _42: ();
    let _43: &str;
    let mut _44: std::result::Result<(), std::io::Error>;
    let mut _45: &std::path::PathBuf;
    let _46: ();
    let _47: &str;
    let mut _48: std::result::Result<std::path::PathBuf, std::io::Error>;
    let _49: ();
    let _50: &str;
    let mut _51: std::result::Result<std::path::PathBuf, std::io::Error>;
    let _52: ();
    let _53: &str;
    let mut _54: std::result::Result<(), std::io::Error>;
    let _55: ();
    let _56: &str;
    let mut _57: std::result::Result<(), std::io::Error>;
    let _58: ();
    let _59: &str;
    let mut _60: std::result::Result<(), std::io::Error>;
    let _61: ();
    let _62: &str;
    let mut _63: std::result::Result<(), std::io::Error>;
    let _64: ();
    let _65: &str;
    let mut _66: std::result::Result<std::fs::ReadDir, std::io::Error>;
    let _67: ();
    let _68: &str;
    let mut _69: std::result::Result<(), std::io::Error>;
    let mut _70: std::fs::Permissions;
    let mut _71: &std::fs::Metadata;
    let _72: std::fs::Metadata;
    let mut _73: std::result::Result<std::fs::Metadata, std::io::Error>;
    scope 1 {
        debug dummy_file => _16;
    }

    bb0: {
        _2 = const "File::open";
        _3 = File::open::<&str>(const "\0") -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = assert_invalid_input::<File>(_2, move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = const "File::create";
        _6 = File::create::<&str>(const "\0") -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = assert_invalid_input::<File>(_5, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = const "remove_file";
        _9 = remove_file::<&str>(const "\0") -> [return: bb5, unwind continue];
    }

    bb5: {
        _7 = assert_invalid_input::<()>(_8, move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        _11 = const "metadata";
        _12 = std::fs::metadata::<&str>(const "\0") -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = assert_invalid_input::<Metadata>(_11, move _12) -> [return: bb8, unwind continue];
    }

    bb8: {
        _14 = const "symlink_metadata";
        _15 = symlink_metadata::<&str>(const "\0") -> [return: bb9, unwind continue];
    }

    bb9: {
        _13 = assert_invalid_input::<Metadata>(_14, move _15) -> [return: bb10, unwind continue];
    }

    bb10: {
        _17 = current_exe() -> [return: bb11, unwind continue];
    }

    bb11: {
        _16 = Result::<PathBuf, std::io::Error>::unwrap(move _17) -> [return: bb12, unwind continue];
    }

    bb12: {
        _19 = const "rename1";
        _20 = rename::<&str, &str>(const "\0", const "a") -> [return: bb13, unwind: bb49];
    }

    bb13: {
        _18 = assert_invalid_input::<()>(_19, move _20) -> [return: bb14, unwind: bb49];
    }

    bb14: {
        _22 = const "rename2";
        _24 = &_16;
        _23 = rename::<&PathBuf, &str>(move _24, const "\0") -> [return: bb15, unwind: bb49];
    }

    bb15: {
        _21 = assert_invalid_input::<()>(_22, move _23) -> [return: bb16, unwind: bb49];
    }

    bb16: {
        _26 = const "copy1";
        _27 = std::fs::copy::<&str, &str>(const "\0", const "a") -> [return: bb17, unwind: bb49];
    }

    bb17: {
        _25 = assert_invalid_input::<u64>(_26, move _27) -> [return: bb18, unwind: bb49];
    }

    bb18: {
        _29 = const "copy2";
        _31 = &_16;
        _30 = std::fs::copy::<&PathBuf, &str>(move _31, const "\0") -> [return: bb19, unwind: bb49];
    }

    bb19: {
        _28 = assert_invalid_input::<u64>(_29, move _30) -> [return: bb20, unwind: bb49];
    }

    bb20: {
        _33 = const "hard_link1";
        _34 = hard_link::<&str, &str>(const "\0", const "a") -> [return: bb21, unwind: bb49];
    }

    bb21: {
        _32 = assert_invalid_input::<()>(_33, move _34) -> [return: bb22, unwind: bb49];
    }

    bb22: {
        _36 = const "hard_link2";
        _38 = &_16;
        _37 = hard_link::<&PathBuf, &str>(move _38, const "\0") -> [return: bb23, unwind: bb49];
    }

    bb23: {
        _35 = assert_invalid_input::<()>(_36, move _37) -> [return: bb24, unwind: bb49];
    }

    bb24: {
        _40 = const "soft_link1";
        _41 = soft_link::<&str, &str>(const "\0", const "a") -> [return: bb25, unwind: bb49];
    }

    bb25: {
        _39 = assert_invalid_input::<()>(_40, move _41) -> [return: bb26, unwind: bb49];
    }

    bb26: {
        _43 = const "soft_link2";
        _45 = &_16;
        _44 = soft_link::<&PathBuf, &str>(move _45, const "\0") -> [return: bb27, unwind: bb49];
    }

    bb27: {
        _42 = assert_invalid_input::<()>(_43, move _44) -> [return: bb28, unwind: bb49];
    }

    bb28: {
        _47 = const "read_link";
        _48 = read_link::<&str>(const "\0") -> [return: bb29, unwind: bb49];
    }

    bb29: {
        _46 = assert_invalid_input::<PathBuf>(_47, move _48) -> [return: bb30, unwind: bb49];
    }

    bb30: {
        _50 = const "canonicalize";
        _51 = canonicalize::<&str>(const "\0") -> [return: bb31, unwind: bb49];
    }

    bb31: {
        _49 = assert_invalid_input::<PathBuf>(_50, move _51) -> [return: bb32, unwind: bb49];
    }

    bb32: {
        _53 = const "create_dir";
        _54 = create_dir::<&str>(const "\0") -> [return: bb33, unwind: bb49];
    }

    bb33: {
        _52 = assert_invalid_input::<()>(_53, move _54) -> [return: bb34, unwind: bb49];
    }

    bb34: {
        _56 = const "create_dir_all";
        _57 = create_dir_all::<&str>(const "\0") -> [return: bb35, unwind: bb49];
    }

    bb35: {
        _55 = assert_invalid_input::<()>(_56, move _57) -> [return: bb36, unwind: bb49];
    }

    bb36: {
        _59 = const "remove_dir";
        _60 = remove_dir::<&str>(const "\0") -> [return: bb37, unwind: bb49];
    }

    bb37: {
        _58 = assert_invalid_input::<()>(_59, move _60) -> [return: bb38, unwind: bb49];
    }

    bb38: {
        _62 = const "remove_dir_all";
        _63 = remove_dir_all::<&str>(const "\0") -> [return: bb39, unwind: bb49];
    }

    bb39: {
        _61 = assert_invalid_input::<()>(_62, move _63) -> [return: bb40, unwind: bb49];
    }

    bb40: {
        _65 = const "read_dir";
        _66 = read_dir::<&str>(const "\0") -> [return: bb41, unwind: bb49];
    }

    bb41: {
        _64 = assert_invalid_input::<ReadDir>(_65, move _66) -> [return: bb42, unwind: bb49];
    }

    bb42: {
        _68 = const "set_permissions";
        _73 = std::fs::metadata::<&str>(const ".") -> [return: bb43, unwind: bb49];
    }

    bb43: {
        _72 = Result::<Metadata, std::io::Error>::unwrap(move _73) -> [return: bb44, unwind: bb49];
    }

    bb44: {
        _71 = &_72;
        _70 = Metadata::permissions(move _71) -> [return: bb45, unwind: bb49];
    }

    bb45: {
        _69 = set_permissions::<&str>(const "\0", move _70) -> [return: bb46, unwind: bb49];
    }

    bb46: {
        _67 = assert_invalid_input::<()>(_68, move _69) -> [return: bb47, unwind: bb49];
    }

    bb47: {
        drop(_16) -> [return: bb48, unwind continue];
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_16) -> [return: bb50, unwind terminate];
    }

    bb50 (cleanup): {
        resume;
    }
}
