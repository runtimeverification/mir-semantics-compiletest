// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn assert_invalid_input(_1: &str, _2: Result<T, std::io::Error>) -> () {
    debug on => _1;                      // in scope 0 at ui/paths-containing-nul.rs:11:28: 11:30
    debug result => _2;                  // in scope 0 at ui/paths-containing-nul.rs:11:38: 11:44
    let mut _0: ();                      // return place in scope 0 at ui/paths-containing-nul.rs:11:61: 11:61
    let mut _3: &str;                    // in scope 0 at ui/paths-containing-nul.rs:19:11: 19:13
    let mut _4: std::result::Result<(), std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:19:15: 19:31
    let mut _5: std::result::Result<T, std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:19:15: 19:21

    bb0: {
        _3 = _1;                         // scope 0 at ui/paths-containing-nul.rs:19:11: 19:13
        _5 = move _2;                    // scope 0 at ui/paths-containing-nul.rs:19:15: 19:21
        _4 = Result::<T, std::io::Error>::map::<(), fn(T) {std::mem::drop::<T>}>(move _5, std::mem::drop::<T>) -> bb1; // scope 0 at ui/paths-containing-nul.rs:19:15: 19:31
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:19:22: 19:25
                                         // + literal: Const { ty: fn(Result<T, std::io::Error>, fn(T) {std::mem::drop::<T>}) -> Result<(), std::io::Error> {Result::<T, std::io::Error>::map::<(), fn(T) {std::mem::drop::<T>}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:19:26: 19:30
                                         // + literal: Const { ty: fn(T) {std::mem::drop::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = inner(move _3, move _4) -> bb2; // scope 0 at ui/paths-containing-nul.rs:19:5: 19:32
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:19:5: 19:10
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<(), std::io::Error>) {inner}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/paths-containing-nul.rs:20:2: 20:2
    }
}

fn inner(_1: &str, _2: Result<(), std::io::Error>) -> () {
    debug on => _1;                      // in scope 0 at ui/paths-containing-nul.rs:12:14: 12:16
    debug result => _2;                  // in scope 0 at ui/paths-containing-nul.rs:12:24: 12:30
    let mut _0: ();                      // return place in scope 0 at ui/paths-containing-nul.rs:12:48: 12:48
    let mut _3: isize;                   // in scope 0 at ui/paths-containing-nul.rs:14:13: 14:19
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _6: &[&str];                 // in scope 0 at ui/paths-containing-nul.rs:14:30: 14:76
    let mut _7: &[&str; 2];              // in scope 0 at ui/paths-containing-nul.rs:14:30: 14:76
    let _8: &[&str; 2];                  // in scope 0 at ui/paths-containing-nul.rs:14:30: 14:76
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/paths-containing-nul.rs:14:78: 14:80
    let mut _14: &&str;                  // in scope 0 at ui/paths-containing-nul.rs:14:78: 14:80
    let _15: &&str;                      // in scope 0 at ui/paths-containing-nul.rs:14:78: 14:80
    let _16: std::io::Error;             // in scope 0 at ui/paths-containing-nul.rs:15:17: 15:18
    let mut _17: bool;                   // in scope 0 at ui/paths-containing-nul.rs:15:23: 16:93
    let mut _18: bool;                   // in scope 0 at ui/paths-containing-nul.rs:15:31: 15:70
    let mut _19: &std::io::ErrorKind;    // in scope 0 at ui/paths-containing-nul.rs:15:31: 15:39
    let _20: std::io::ErrorKind;         // in scope 0 at ui/paths-containing-nul.rs:15:31: 15:39
    let mut _21: &std::io::Error;        // in scope 0 at ui/paths-containing-nul.rs:15:31: 15:39
    let mut _22: &std::io::ErrorKind;    // in scope 0 at ui/paths-containing-nul.rs:15:43: 15:70
    let mut _23: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _24: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _25: &[&str];                // in scope 0 at ui/paths-containing-nul.rs:16:31: 16:78
    let mut _26: &[&str; 3];             // in scope 0 at ui/paths-containing-nul.rs:16:31: 16:78
    let _27: &[&str; 3];                 // in scope 0 at ui/paths-containing-nul.rs:16:31: 16:78
    let mut _28: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _29: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _30: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _31: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _32: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/paths-containing-nul.rs:16:80: 16:82
    let mut _33: &&str;                  // in scope 0 at ui/paths-containing-nul.rs:16:80: 16:82
    let _34: &&str;                      // in scope 0 at ui/paths-containing-nul.rs:16:80: 16:82
    let mut _35: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/paths-containing-nul.rs:16:84: 16:92
    let mut _36: &std::io::ErrorKind;    // in scope 0 at ui/paths-containing-nul.rs:16:84: 16:92
    let _37: &std::io::ErrorKind;        // in scope 0 at ui/paths-containing-nul.rs:16:84: 16:92
    let _38: std::io::ErrorKind;         // in scope 0 at ui/paths-containing-nul.rs:16:84: 16:92
    let mut _39: &std::io::Error;        // in scope 0 at ui/paths-containing-nul.rs:16:84: 16:92
    let mut _40: &[&str; 2];             // in scope 0 at ui/paths-containing-nul.rs:14:30: 14:76
    scope 1 {
        debug e => _16;                  // in scope 1 at ui/paths-containing-nul.rs:15:17: 15:18
        let mut _41: &[&str; 3];         // in scope 1 at ui/paths-containing-nul.rs:16:31: 16:78
        let mut _42: &std::io::ErrorKind; // in scope 1 at ui/paths-containing-nul.rs:15:43: 15:70
    }

    bb0: {
        _3 = discriminant(_2);           // scope 0 at ui/paths-containing-nul.rs:13:15: 13:21
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/paths-containing-nul.rs:13:9: 13:21
    }

    bb1: {
        _16 = move ((_2 as Err).0: std::io::Error); // scope 0 at ui/paths-containing-nul.rs:15:17: 15:18
        _21 = &_16;                      // scope 1 at ui/paths-containing-nul.rs:15:31: 15:39
        _20 = std::io::Error::kind(move _21) -> [return: bb6, unwind: bb15]; // scope 1 at ui/paths-containing-nul.rs:15:31: 15:39
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:15:33: 15:37
                                         // + literal: Const { ty: for<'a> fn(&'a std::io::Error) -> ErrorKind {std::io::Error::kind}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/paths-containing-nul.rs:13:15: 13:21
    }

    bb3: {
        _40 = const _;                   // scope 0 at ui/paths-containing-nul.rs:14:30: 14:76
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:14:30: 14:76
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(inner, [], Some(promoted[0])) }
        _8 = _40;                        // scope 0 at ui/paths-containing-nul.rs:14:30: 14:76
        _7 = _8;                         // scope 0 at ui/paths-containing-nul.rs:14:30: 14:76
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 0 at ui/paths-containing-nul.rs:14:30: 14:76
        _15 = &_1;                       // scope 0 at ui/paths-containing-nul.rs:14:78: 14:80
        _14 = _15;                       // scope 0 at ui/paths-containing-nul.rs:14:78: 14:80
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _14) -> bb4; // scope 0 at ui/paths-containing-nul.rs:14:78: 14:80
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:14:78: 14:80
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = [move _13];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _11 = &_12;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _10 = _11;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb5; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _4 = panic_fmt(move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb6: {
        _19 = &_20;                      // scope 1 at ui/paths-containing-nul.rs:15:31: 15:39
        _42 = const _;                   // scope 1 at ui/paths-containing-nul.rs:15:43: 15:70
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:15:43: 15:70
                                         // + literal: Const { ty: &ErrorKind, val: Unevaluated(inner, [], Some(promoted[2])) }
        _22 = _42;                       // scope 1 at ui/paths-containing-nul.rs:15:43: 15:70
        _18 = <ErrorKind as PartialEq>::eq(move _19, move _22) -> [return: bb7, unwind: bb15]; // scope 1 at ui/paths-containing-nul.rs:15:31: 15:70
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:15:31: 15:70
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ErrorKind, &'b ErrorKind) -> bool {<ErrorKind as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _17 = Not(move _18);             // scope 1 at ui/paths-containing-nul.rs:15:23: 16:93
        switchInt(move _17) -> [0: bb13, otherwise: bb8]; // scope 1 at ui/paths-containing-nul.rs:15:23: 16:93
    }

    bb8: {
        _41 = const _;                   // scope 1 at ui/paths-containing-nul.rs:16:31: 16:78
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:16:31: 16:78
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(inner, [], Some(promoted[1])) }
        _27 = _41;                       // scope 1 at ui/paths-containing-nul.rs:16:31: 16:78
        _26 = _27;                       // scope 1 at ui/paths-containing-nul.rs:16:31: 16:78
        _25 = move _26 as &[&str] (Pointer(Unsize)); // scope 1 at ui/paths-containing-nul.rs:16:31: 16:78
        _34 = &_1;                       // scope 1 at ui/paths-containing-nul.rs:16:80: 16:82
        _33 = _34;                       // scope 1 at ui/paths-containing-nul.rs:16:80: 16:82
        _32 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _33) -> [return: bb9, unwind: bb15]; // scope 1 at ui/paths-containing-nul.rs:16:80: 16:82
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:16:80: 16:82
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb9: {
        _39 = &_16;                      // scope 1 at ui/paths-containing-nul.rs:16:84: 16:92
        _38 = std::io::Error::kind(move _39) -> [return: bb10, unwind: bb15]; // scope 1 at ui/paths-containing-nul.rs:16:84: 16:92
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:16:86: 16:90
                                         // + literal: Const { ty: for<'a> fn(&'a std::io::Error) -> ErrorKind {std::io::Error::kind}, val: Value(<ZST>) }
    }

    bb10: {
        _37 = &_38;                      // scope 1 at ui/paths-containing-nul.rs:16:84: 16:92
        _36 = _37;                       // scope 1 at ui/paths-containing-nul.rs:16:84: 16:92
        _35 = core::fmt::ArgumentV1::<'_>::new_debug::<ErrorKind>(move _36) -> [return: bb11, unwind: bb15]; // scope 1 at ui/paths-containing-nul.rs:16:84: 16:92
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:16:84: 16:92
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b> fn(&'b ErrorKind) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<ErrorKind>}, val: Value(<ZST>) }
    }

    bb11: {
        _31 = [move _32, move _35];      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _30 = &_31;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _29 = _30;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _28 = move _29 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _24 = Arguments::<'_>::new_v1(move _25, move _28) -> [return: bb12, unwind: bb15]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb12: {
        _23 = panic_fmt(move _24) -> bb15; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb13: {
        drop(_16) -> bb14;               // scope 0 at ui/paths-containing-nul.rs:16:92: 16:93
    }

    bb14: {
        return;                          // scope 0 at ui/paths-containing-nul.rs:18:6: 18:6
    }

    bb15 (cleanup): {
        drop(_16) -> bb16;               // scope 0 at ui/paths-containing-nul.rs:16:92: 16:93
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at ui/paths-containing-nul.rs:12:5: 18:6
    }
}

promoted[0] in inner: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/paths-containing-nul.rs:14:30: 14:76
    let mut _1: [&str; 2];               // in scope 0 at ui/paths-containing-nul.rs:14:30: 14:76

    bb0: {
        _1 = [const "", const " didn't return an error on a path with NUL"]; // scope 0 at ui/paths-containing-nul.rs:14:30: 14:76
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:14:30: 14:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:14:30: 14:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/paths-containing-nul.rs:14:30: 14:76
        return;                          // scope 0 at ui/paths-containing-nul.rs:14:30: 14:76
    }
}

promoted[1] in inner: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/paths-containing-nul.rs:16:31: 16:78
    let mut _1: [&str; 3];               // in scope 0 at ui/paths-containing-nul.rs:16:31: 16:78

    bb0: {
        _1 = [const "", const " returned a strange ", const " on a path with NUL"]; // scope 0 at ui/paths-containing-nul.rs:16:31: 16:78
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:16:31: 16:78
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:16:31: 16:78
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:16:31: 16:78
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/paths-containing-nul.rs:16:31: 16:78
        return;                          // scope 0 at ui/paths-containing-nul.rs:16:31: 16:78
    }
}

promoted[2] in inner: &ErrorKind = {
    let mut _0: &std::io::ErrorKind;     // return place in scope 0 at ui/paths-containing-nul.rs:15:43: 15:70
    let mut _1: std::io::ErrorKind;      // in scope 0 at ui/paths-containing-nul.rs:15:43: 15:70

    bb0: {
        _1 = InvalidInput;               // scope 0 at ui/paths-containing-nul.rs:15:43: 15:70
        _0 = &_1;                        // scope 0 at ui/paths-containing-nul.rs:15:43: 15:70
        return;                          // scope 0 at ui/paths-containing-nul.rs:15:43: 15:70
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/paths-containing-nul.rs:22:11: 22:11
    let _1: ();                          // in scope 0 at ui/paths-containing-nul.rs:23:5: 23:61
    let mut _2: &str;                    // in scope 0 at ui/paths-containing-nul.rs:23:26: 23:38
    let _3: &str;                        // in scope 0 at ui/paths-containing-nul.rs:23:26: 23:38
    let mut _4: std::result::Result<std::fs::File, std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:23:40: 23:60
    let _5: ();                          // in scope 0 at ui/paths-containing-nul.rs:24:5: 24:65
    let mut _6: &str;                    // in scope 0 at ui/paths-containing-nul.rs:24:26: 24:40
    let _7: &str;                        // in scope 0 at ui/paths-containing-nul.rs:24:26: 24:40
    let mut _8: std::result::Result<std::fs::File, std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:24:42: 24:64
    let _9: ();                          // in scope 0 at ui/paths-containing-nul.rs:25:5: 25:63
    let mut _10: &str;                   // in scope 0 at ui/paths-containing-nul.rs:25:26: 25:39
    let _11: &str;                       // in scope 0 at ui/paths-containing-nul.rs:25:26: 25:39
    let mut _12: std::result::Result<(), std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:25:41: 25:62
    let _13: ();                         // in scope 0 at ui/paths-containing-nul.rs:26:5: 26:57
    let mut _14: &str;                   // in scope 0 at ui/paths-containing-nul.rs:26:26: 26:36
    let _15: &str;                       // in scope 0 at ui/paths-containing-nul.rs:26:26: 26:36
    let mut _16: std::result::Result<std::fs::Metadata, std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:26:38: 26:56
    let _17: ();                         // in scope 0 at ui/paths-containing-nul.rs:27:5: 27:73
    let mut _18: &str;                   // in scope 0 at ui/paths-containing-nul.rs:27:26: 27:44
    let _19: &str;                       // in scope 0 at ui/paths-containing-nul.rs:27:26: 27:44
    let mut _20: std::result::Result<std::fs::Metadata, std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:27:46: 27:72
    let _21: std::path::PathBuf;         // in scope 0 at ui/paths-containing-nul.rs:30:9: 30:19
    let mut _22: std::result::Result<std::path::PathBuf, std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:30:22: 30:45
    let _23: ();                         // in scope 0 at ui/paths-containing-nul.rs:32:5: 32:59
    let mut _24: &str;                   // in scope 0 at ui/paths-containing-nul.rs:32:26: 32:35
    let _25: &str;                       // in scope 0 at ui/paths-containing-nul.rs:32:26: 32:35
    let mut _26: std::result::Result<(), std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:32:37: 32:58
    let _27: ();                         // in scope 0 at ui/paths-containing-nul.rs:33:5: 33:67
    let mut _28: &str;                   // in scope 0 at ui/paths-containing-nul.rs:33:26: 33:35
    let _29: &str;                       // in scope 0 at ui/paths-containing-nul.rs:33:26: 33:35
    let mut _30: std::result::Result<(), std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:33:37: 33:66
    let mut _31: &std::path::PathBuf;    // in scope 0 at ui/paths-containing-nul.rs:33:48: 33:59
    let _32: ();                         // in scope 0 at ui/paths-containing-nul.rs:34:5: 34:55
    let mut _33: &str;                   // in scope 0 at ui/paths-containing-nul.rs:34:26: 34:33
    let _34: &str;                       // in scope 0 at ui/paths-containing-nul.rs:34:26: 34:33
    let mut _35: std::result::Result<u64, std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:34:35: 34:54
    let _36: ();                         // in scope 0 at ui/paths-containing-nul.rs:35:5: 35:63
    let mut _37: &str;                   // in scope 0 at ui/paths-containing-nul.rs:35:26: 35:33
    let _38: &str;                       // in scope 0 at ui/paths-containing-nul.rs:35:26: 35:33
    let mut _39: std::result::Result<u64, std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:35:35: 35:62
    let mut _40: &std::path::PathBuf;    // in scope 0 at ui/paths-containing-nul.rs:35:44: 35:55
    let _41: ();                         // in scope 0 at ui/paths-containing-nul.rs:36:5: 36:65
    let mut _42: &str;                   // in scope 0 at ui/paths-containing-nul.rs:36:26: 36:38
    let _43: &str;                       // in scope 0 at ui/paths-containing-nul.rs:36:26: 36:38
    let mut _44: std::result::Result<(), std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:36:40: 36:64
    let _45: ();                         // in scope 0 at ui/paths-containing-nul.rs:37:5: 37:73
    let mut _46: &str;                   // in scope 0 at ui/paths-containing-nul.rs:37:26: 37:38
    let _47: &str;                       // in scope 0 at ui/paths-containing-nul.rs:37:26: 37:38
    let mut _48: std::result::Result<(), std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:37:40: 37:72
    let mut _49: &std::path::PathBuf;    // in scope 0 at ui/paths-containing-nul.rs:37:54: 37:65
    let _50: ();                         // in scope 0 at ui/paths-containing-nul.rs:38:5: 38:65
    let mut _51: &str;                   // in scope 0 at ui/paths-containing-nul.rs:38:26: 38:38
    let _52: &str;                       // in scope 0 at ui/paths-containing-nul.rs:38:26: 38:38
    let mut _53: std::result::Result<(), std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:38:40: 38:64
    let _54: ();                         // in scope 0 at ui/paths-containing-nul.rs:39:5: 39:73
    let mut _55: &str;                   // in scope 0 at ui/paths-containing-nul.rs:39:26: 39:38
    let _56: &str;                       // in scope 0 at ui/paths-containing-nul.rs:39:26: 39:38
    let mut _57: std::result::Result<(), std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:39:40: 39:72
    let mut _58: &std::path::PathBuf;    // in scope 0 at ui/paths-containing-nul.rs:39:54: 39:65
    let _59: ();                         // in scope 0 at ui/paths-containing-nul.rs:40:5: 40:59
    let mut _60: &str;                   // in scope 0 at ui/paths-containing-nul.rs:40:26: 40:37
    let _61: &str;                       // in scope 0 at ui/paths-containing-nul.rs:40:26: 40:37
    let mut _62: std::result::Result<std::path::PathBuf, std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:40:39: 40:58
    let _63: ();                         // in scope 0 at ui/paths-containing-nul.rs:41:5: 41:65
    let mut _64: &str;                   // in scope 0 at ui/paths-containing-nul.rs:41:26: 41:40
    let _65: &str;                       // in scope 0 at ui/paths-containing-nul.rs:41:26: 41:40
    let mut _66: std::result::Result<std::path::PathBuf, std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:41:42: 41:64
    let _67: ();                         // in scope 0 at ui/paths-containing-nul.rs:42:5: 42:61
    let mut _68: &str;                   // in scope 0 at ui/paths-containing-nul.rs:42:26: 42:38
    let _69: &str;                       // in scope 0 at ui/paths-containing-nul.rs:42:26: 42:38
    let mut _70: std::result::Result<(), std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:42:40: 42:60
    let _71: ();                         // in scope 0 at ui/paths-containing-nul.rs:43:5: 43:69
    let mut _72: &str;                   // in scope 0 at ui/paths-containing-nul.rs:43:26: 43:42
    let _73: &str;                       // in scope 0 at ui/paths-containing-nul.rs:43:26: 43:42
    let mut _74: std::result::Result<(), std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:43:44: 43:68
    let _75: ();                         // in scope 0 at ui/paths-containing-nul.rs:44:5: 44:61
    let mut _76: &str;                   // in scope 0 at ui/paths-containing-nul.rs:44:26: 44:38
    let _77: &str;                       // in scope 0 at ui/paths-containing-nul.rs:44:26: 44:38
    let mut _78: std::result::Result<(), std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:44:40: 44:60
    let _79: ();                         // in scope 0 at ui/paths-containing-nul.rs:45:5: 45:69
    let mut _80: &str;                   // in scope 0 at ui/paths-containing-nul.rs:45:26: 45:42
    let _81: &str;                       // in scope 0 at ui/paths-containing-nul.rs:45:26: 45:42
    let mut _82: std::result::Result<(), std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:45:44: 45:68
    let _83: ();                         // in scope 0 at ui/paths-containing-nul.rs:46:5: 46:57
    let mut _84: &str;                   // in scope 0 at ui/paths-containing-nul.rs:46:26: 46:36
    let _85: &str;                       // in scope 0 at ui/paths-containing-nul.rs:46:26: 46:36
    let mut _86: std::result::Result<std::fs::ReadDir, std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:46:38: 46:56
    let _87: ();                         // in scope 0 at ui/paths-containing-nul.rs:47:5: 48:94
    let mut _88: &str;                   // in scope 0 at ui/paths-containing-nul.rs:47:26: 47:43
    let _89: &str;                       // in scope 0 at ui/paths-containing-nul.rs:47:26: 47:43
    let mut _90: std::result::Result<(), std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:48:26: 48:93
    let mut _91: std::fs::Permissions;   // in scope 0 at ui/paths-containing-nul.rs:48:52: 48:92
    let mut _92: &std::fs::Metadata;     // in scope 0 at ui/paths-containing-nul.rs:48:52: 48:92
    let _93: std::fs::Metadata;          // in scope 0 at ui/paths-containing-nul.rs:48:52: 48:78
    let mut _94: std::result::Result<std::fs::Metadata, std::io::Error>; // in scope 0 at ui/paths-containing-nul.rs:48:52: 48:69
    scope 1 {
        debug dummy_file => _21;         // in scope 1 at ui/paths-containing-nul.rs:30:9: 30:19
    }

    bb0: {
        _3 = const "File::open";         // scope 0 at ui/paths-containing-nul.rs:23:26: 23:38
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:23:26: 23:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/paths-containing-nul.rs:23:26: 23:38
        _4 = File::open::<&str>(const "\0") -> bb1; // scope 0 at ui/paths-containing-nul.rs:23:40: 23:60
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:23:40: 23:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> Result<File, std::io::Error> {File::open::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:23:55: 23:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _1 = assert_invalid_input::<File>(move _2, move _4) -> bb2; // scope 0 at ui/paths-containing-nul.rs:23:5: 23:61
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:23:5: 23:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<File, std::io::Error>) {assert_invalid_input::<File>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = const "File::create";       // scope 0 at ui/paths-containing-nul.rs:24:26: 24:40
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:24:26: 24:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/paths-containing-nul.rs:24:26: 24:40
        _8 = File::create::<&str>(const "\0") -> bb3; // scope 0 at ui/paths-containing-nul.rs:24:42: 24:64
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:24:42: 24:58
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str) -> Result<File, std::io::Error> {File::create::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:24:59: 24:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _5 = assert_invalid_input::<File>(move _6, move _8) -> bb4; // scope 0 at ui/paths-containing-nul.rs:24:5: 24:65
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:24:5: 24:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<File, std::io::Error>) {assert_invalid_input::<File>}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = const "remove_file";       // scope 0 at ui/paths-containing-nul.rs:25:26: 25:39
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:25:26: 25:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = _11;                       // scope 0 at ui/paths-containing-nul.rs:25:26: 25:39
        _12 = remove_file::<&str>(const "\0") -> bb5; // scope 0 at ui/paths-containing-nul.rs:25:41: 25:62
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:25:41: 25:56
                                         // + literal: Const { ty: fn(&str) -> Result<(), std::io::Error> {remove_file::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:25:57: 25:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _9 = assert_invalid_input::<()>(move _10, move _12) -> bb6; // scope 0 at ui/paths-containing-nul.rs:25:5: 25:63
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:25:5: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<(), std::io::Error>) {assert_invalid_input::<()>}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = const "metadata";          // scope 0 at ui/paths-containing-nul.rs:26:26: 26:36
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:26:26: 26:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = _15;                       // scope 0 at ui/paths-containing-nul.rs:26:26: 26:36
        _16 = std::fs::metadata::<&str>(const "\0") -> bb7; // scope 0 at ui/paths-containing-nul.rs:26:38: 26:56
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:26:38: 26:50
                                         // + literal: Const { ty: fn(&str) -> Result<Metadata, std::io::Error> {std::fs::metadata::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:26:51: 26:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _13 = assert_invalid_input::<Metadata>(move _14, move _16) -> bb8; // scope 0 at ui/paths-containing-nul.rs:26:5: 26:57
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:26:5: 26:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<Metadata, std::io::Error>) {assert_invalid_input::<Metadata>}, val: Value(<ZST>) }
    }

    bb8: {
        _19 = const "symlink_metadata";  // scope 0 at ui/paths-containing-nul.rs:27:26: 27:44
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:27:26: 27:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _18 = _19;                       // scope 0 at ui/paths-containing-nul.rs:27:26: 27:44
        _20 = symlink_metadata::<&str>(const "\0") -> bb9; // scope 0 at ui/paths-containing-nul.rs:27:46: 27:72
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:27:46: 27:66
                                         // + literal: Const { ty: fn(&str) -> Result<Metadata, std::io::Error> {symlink_metadata::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:27:67: 27:71
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _17 = assert_invalid_input::<Metadata>(move _18, move _20) -> bb10; // scope 0 at ui/paths-containing-nul.rs:27:5: 27:73
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:27:5: 27:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<Metadata, std::io::Error>) {assert_invalid_input::<Metadata>}, val: Value(<ZST>) }
    }

    bb10: {
        _22 = current_exe() -> bb11;     // scope 0 at ui/paths-containing-nul.rs:30:22: 30:45
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:30:22: 30:43
                                         // + literal: Const { ty: fn() -> Result<PathBuf, std::io::Error> {current_exe}, val: Value(<ZST>) }
    }

    bb11: {
        _21 = Result::<PathBuf, std::io::Error>::unwrap(move _22) -> bb12; // scope 0 at ui/paths-containing-nul.rs:30:22: 30:54
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:30:46: 30:52
                                         // + literal: Const { ty: fn(Result<PathBuf, std::io::Error>) -> PathBuf {Result::<PathBuf, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb12: {
        _25 = const "rename1";           // scope 1 at ui/paths-containing-nul.rs:32:26: 32:35
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:32:26: 32:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _24 = _25;                       // scope 1 at ui/paths-containing-nul.rs:32:26: 32:35
        _26 = rename::<&str, &str>(const "\0", const "a") -> [return: bb13, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:32:37: 32:58
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:32:37: 32:47
                                         // + literal: Const { ty: fn(&str, &str) -> Result<(), std::io::Error> {rename::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:32:48: 32:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:32:54: 32:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _23 = assert_invalid_input::<()>(move _24, move _26) -> [return: bb14, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:32:5: 32:59
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:32:5: 32:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<(), std::io::Error>) {assert_invalid_input::<()>}, val: Value(<ZST>) }
    }

    bb14: {
        _29 = const "rename2";           // scope 1 at ui/paths-containing-nul.rs:33:26: 33:35
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:33:26: 33:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _28 = _29;                       // scope 1 at ui/paths-containing-nul.rs:33:26: 33:35
        _31 = &_21;                      // scope 1 at ui/paths-containing-nul.rs:33:48: 33:59
        _30 = rename::<&PathBuf, &str>(move _31, const "\0") -> [return: bb15, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:33:37: 33:66
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:33:37: 33:47
                                         // + literal: Const { ty: fn(&PathBuf, &str) -> Result<(), std::io::Error> {rename::<&PathBuf, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:33:61: 33:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _27 = assert_invalid_input::<()>(move _28, move _30) -> [return: bb16, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:33:5: 33:67
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:33:5: 33:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<(), std::io::Error>) {assert_invalid_input::<()>}, val: Value(<ZST>) }
    }

    bb16: {
        _34 = const "copy1";             // scope 1 at ui/paths-containing-nul.rs:34:26: 34:33
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:34:26: 34:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _33 = _34;                       // scope 1 at ui/paths-containing-nul.rs:34:26: 34:33
        _35 = std::fs::copy::<&str, &str>(const "\0", const "a") -> [return: bb17, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:34:35: 34:54
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:34:35: 34:43
                                         // + literal: Const { ty: fn(&str, &str) -> Result<u64, std::io::Error> {std::fs::copy::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:34:44: 34:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:34:50: 34:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _32 = assert_invalid_input::<u64>(move _33, move _35) -> [return: bb18, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:34:5: 34:55
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:34:5: 34:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<u64, std::io::Error>) {assert_invalid_input::<u64>}, val: Value(<ZST>) }
    }

    bb18: {
        _38 = const "copy2";             // scope 1 at ui/paths-containing-nul.rs:35:26: 35:33
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:35:26: 35:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _37 = _38;                       // scope 1 at ui/paths-containing-nul.rs:35:26: 35:33
        _40 = &_21;                      // scope 1 at ui/paths-containing-nul.rs:35:44: 35:55
        _39 = std::fs::copy::<&PathBuf, &str>(move _40, const "\0") -> [return: bb19, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:35:35: 35:62
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:35:35: 35:43
                                         // + literal: Const { ty: fn(&PathBuf, &str) -> Result<u64, std::io::Error> {std::fs::copy::<&PathBuf, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:35:57: 35:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        _36 = assert_invalid_input::<u64>(move _37, move _39) -> [return: bb20, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:35:5: 35:63
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:35:5: 35:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<u64, std::io::Error>) {assert_invalid_input::<u64>}, val: Value(<ZST>) }
    }

    bb20: {
        _43 = const "hard_link1";        // scope 1 at ui/paths-containing-nul.rs:36:26: 36:38
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:36:26: 36:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _42 = _43;                       // scope 1 at ui/paths-containing-nul.rs:36:26: 36:38
        _44 = hard_link::<&str, &str>(const "\0", const "a") -> [return: bb21, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:36:40: 36:64
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:36:40: 36:53
                                         // + literal: Const { ty: fn(&str, &str) -> Result<(), std::io::Error> {hard_link::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:36:54: 36:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:36:60: 36:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _41 = assert_invalid_input::<()>(move _42, move _44) -> [return: bb22, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:36:5: 36:65
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:36:5: 36:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<(), std::io::Error>) {assert_invalid_input::<()>}, val: Value(<ZST>) }
    }

    bb22: {
        _47 = const "hard_link2";        // scope 1 at ui/paths-containing-nul.rs:37:26: 37:38
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:37:26: 37:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _46 = _47;                       // scope 1 at ui/paths-containing-nul.rs:37:26: 37:38
        _49 = &_21;                      // scope 1 at ui/paths-containing-nul.rs:37:54: 37:65
        _48 = hard_link::<&PathBuf, &str>(move _49, const "\0") -> [return: bb23, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:37:40: 37:72
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:37:40: 37:53
                                         // + literal: Const { ty: fn(&PathBuf, &str) -> Result<(), std::io::Error> {hard_link::<&PathBuf, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:37:67: 37:71
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb23: {
        _45 = assert_invalid_input::<()>(move _46, move _48) -> [return: bb24, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:37:5: 37:73
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:37:5: 37:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<(), std::io::Error>) {assert_invalid_input::<()>}, val: Value(<ZST>) }
    }

    bb24: {
        _52 = const "soft_link1";        // scope 1 at ui/paths-containing-nul.rs:38:26: 38:38
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:38:26: 38:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _51 = _52;                       // scope 1 at ui/paths-containing-nul.rs:38:26: 38:38
        _53 = soft_link::<&str, &str>(const "\0", const "a") -> [return: bb25, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:38:40: 38:64
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:38:40: 38:53
                                         // + literal: Const { ty: fn(&str, &str) -> Result<(), std::io::Error> {soft_link::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:38:54: 38:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:38:60: 38:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        _50 = assert_invalid_input::<()>(move _51, move _53) -> [return: bb26, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:38:5: 38:65
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:38:5: 38:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<(), std::io::Error>) {assert_invalid_input::<()>}, val: Value(<ZST>) }
    }

    bb26: {
        _56 = const "soft_link2";        // scope 1 at ui/paths-containing-nul.rs:39:26: 39:38
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:39:26: 39:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _55 = _56;                       // scope 1 at ui/paths-containing-nul.rs:39:26: 39:38
        _58 = &_21;                      // scope 1 at ui/paths-containing-nul.rs:39:54: 39:65
        _57 = soft_link::<&PathBuf, &str>(move _58, const "\0") -> [return: bb27, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:39:40: 39:72
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:39:40: 39:53
                                         // + literal: Const { ty: fn(&PathBuf, &str) -> Result<(), std::io::Error> {soft_link::<&PathBuf, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:39:67: 39:71
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        _54 = assert_invalid_input::<()>(move _55, move _57) -> [return: bb28, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:39:5: 39:73
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:39:5: 39:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<(), std::io::Error>) {assert_invalid_input::<()>}, val: Value(<ZST>) }
    }

    bb28: {
        _61 = const "read_link";         // scope 1 at ui/paths-containing-nul.rs:40:26: 40:37
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:40:26: 40:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _60 = _61;                       // scope 1 at ui/paths-containing-nul.rs:40:26: 40:37
        _62 = read_link::<&str>(const "\0") -> [return: bb29, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:40:39: 40:58
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:40:39: 40:52
                                         // + literal: Const { ty: fn(&str) -> Result<PathBuf, std::io::Error> {read_link::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:40:53: 40:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb29: {
        _59 = assert_invalid_input::<PathBuf>(move _60, move _62) -> [return: bb30, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:40:5: 40:59
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:40:5: 40:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<PathBuf, std::io::Error>) {assert_invalid_input::<PathBuf>}, val: Value(<ZST>) }
    }

    bb30: {
        _65 = const "canonicalize";      // scope 1 at ui/paths-containing-nul.rs:41:26: 41:40
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:41:26: 41:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _64 = _65;                       // scope 1 at ui/paths-containing-nul.rs:41:26: 41:40
        _66 = canonicalize::<&str>(const "\0") -> [return: bb31, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:41:42: 41:64
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:41:42: 41:58
                                         // + literal: Const { ty: fn(&str) -> Result<PathBuf, std::io::Error> {canonicalize::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:41:59: 41:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb31: {
        _63 = assert_invalid_input::<PathBuf>(move _64, move _66) -> [return: bb32, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:41:5: 41:65
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:41:5: 41:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<PathBuf, std::io::Error>) {assert_invalid_input::<PathBuf>}, val: Value(<ZST>) }
    }

    bb32: {
        _69 = const "create_dir";        // scope 1 at ui/paths-containing-nul.rs:42:26: 42:38
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:42:26: 42:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _68 = _69;                       // scope 1 at ui/paths-containing-nul.rs:42:26: 42:38
        _70 = create_dir::<&str>(const "\0") -> [return: bb33, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:42:40: 42:60
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:42:40: 42:54
                                         // + literal: Const { ty: fn(&str) -> Result<(), std::io::Error> {create_dir::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:42:55: 42:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb33: {
        _67 = assert_invalid_input::<()>(move _68, move _70) -> [return: bb34, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:42:5: 42:61
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:42:5: 42:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<(), std::io::Error>) {assert_invalid_input::<()>}, val: Value(<ZST>) }
    }

    bb34: {
        _73 = const "create_dir_all";    // scope 1 at ui/paths-containing-nul.rs:43:26: 43:42
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:43:26: 43:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _72 = _73;                       // scope 1 at ui/paths-containing-nul.rs:43:26: 43:42
        _74 = create_dir_all::<&str>(const "\0") -> [return: bb35, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:43:44: 43:68
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:43:44: 43:62
                                         // + literal: Const { ty: fn(&str) -> Result<(), std::io::Error> {create_dir_all::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:43:63: 43:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb35: {
        _71 = assert_invalid_input::<()>(move _72, move _74) -> [return: bb36, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:43:5: 43:69
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:43:5: 43:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<(), std::io::Error>) {assert_invalid_input::<()>}, val: Value(<ZST>) }
    }

    bb36: {
        _77 = const "remove_dir";        // scope 1 at ui/paths-containing-nul.rs:44:26: 44:38
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:44:26: 44:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _76 = _77;                       // scope 1 at ui/paths-containing-nul.rs:44:26: 44:38
        _78 = remove_dir::<&str>(const "\0") -> [return: bb37, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:44:40: 44:60
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:44:40: 44:54
                                         // + literal: Const { ty: fn(&str) -> Result<(), std::io::Error> {remove_dir::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:44:55: 44:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb37: {
        _75 = assert_invalid_input::<()>(move _76, move _78) -> [return: bb38, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:44:5: 44:61
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:44:5: 44:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<(), std::io::Error>) {assert_invalid_input::<()>}, val: Value(<ZST>) }
    }

    bb38: {
        _81 = const "remove_dir_all";    // scope 1 at ui/paths-containing-nul.rs:45:26: 45:42
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:45:26: 45:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _80 = _81;                       // scope 1 at ui/paths-containing-nul.rs:45:26: 45:42
        _82 = remove_dir_all::<&str>(const "\0") -> [return: bb39, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:45:44: 45:68
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:45:44: 45:62
                                         // + literal: Const { ty: fn(&str) -> Result<(), std::io::Error> {remove_dir_all::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:45:63: 45:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb39: {
        _79 = assert_invalid_input::<()>(move _80, move _82) -> [return: bb40, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:45:5: 45:69
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:45:5: 45:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<(), std::io::Error>) {assert_invalid_input::<()>}, val: Value(<ZST>) }
    }

    bb40: {
        _85 = const "read_dir";          // scope 1 at ui/paths-containing-nul.rs:46:26: 46:36
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:46:26: 46:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _84 = _85;                       // scope 1 at ui/paths-containing-nul.rs:46:26: 46:36
        _86 = read_dir::<&str>(const "\0") -> [return: bb41, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:46:38: 46:56
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:46:38: 46:50
                                         // + literal: Const { ty: fn(&str) -> Result<ReadDir, std::io::Error> {read_dir::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:46:51: 46:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb41: {
        _83 = assert_invalid_input::<ReadDir>(move _84, move _86) -> [return: bb42, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:46:5: 46:57
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:46:5: 46:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<ReadDir, std::io::Error>) {assert_invalid_input::<ReadDir>}, val: Value(<ZST>) }
    }

    bb42: {
        _89 = const "set_permissions";   // scope 1 at ui/paths-containing-nul.rs:47:26: 47:43
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:47:26: 47:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _88 = _89;                       // scope 1 at ui/paths-containing-nul.rs:47:26: 47:43
        _94 = std::fs::metadata::<&str>(const ".") -> [return: bb43, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:48:52: 48:69
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:48:52: 48:64
                                         // + literal: Const { ty: fn(&str) -> Result<Metadata, std::io::Error> {std::fs::metadata::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:48:65: 48:68
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb43: {
        _93 = Result::<Metadata, std::io::Error>::unwrap(move _94) -> [return: bb44, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:48:52: 48:78
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:48:70: 48:76
                                         // + literal: Const { ty: fn(Result<Metadata, std::io::Error>) -> Metadata {Result::<Metadata, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb44: {
        _92 = &_93;                      // scope 1 at ui/paths-containing-nul.rs:48:52: 48:92
        _91 = Metadata::permissions(move _92) -> [return: bb45, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:48:52: 48:92
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:48:79: 48:90
                                         // + literal: Const { ty: for<'a> fn(&'a Metadata) -> Permissions {Metadata::permissions}, val: Value(<ZST>) }
    }

    bb45: {
        _90 = set_permissions::<&str>(const "\0", move _91) -> [return: bb46, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:48:26: 48:93
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:48:26: 48:45
                                         // + literal: Const { ty: fn(&str, Permissions) -> Result<(), std::io::Error> {set_permissions::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:48:46: 48:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb46: {
        _87 = assert_invalid_input::<()>(move _88, move _90) -> [return: bb47, unwind: bb49]; // scope 1 at ui/paths-containing-nul.rs:47:5: 48:94
                                         // mir::Constant
                                         // + span: ui/paths-containing-nul.rs:47:5: 47:25
                                         // + literal: Const { ty: for<'a> fn(&'a str, Result<(), std::io::Error>) {assert_invalid_input::<()>}, val: Value(<ZST>) }
    }

    bb47: {
        drop(_21) -> bb48;               // scope 0 at ui/paths-containing-nul.rs:49:1: 49:2
    }

    bb48: {
        return;                          // scope 0 at ui/paths-containing-nul.rs:49:2: 49:2
    }

    bb49 (cleanup): {
        drop(_21) -> bb50;               // scope 0 at ui/paths-containing-nul.rs:49:1: 49:2
    }

    bb50 (cleanup): {
        resume;                          // scope 0 at ui/paths-containing-nul.rs:22:1: 49:2
    }
}
