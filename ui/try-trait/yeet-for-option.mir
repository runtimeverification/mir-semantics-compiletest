// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn always_yeet() -> Option<String> {
    let mut _0: std::option::Option<std::string::String>;

    bb0: {
        _0 = ops::try_trait::from_yeet::<Option<String>, ()>(const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::option::Option<std::string::String>, &std::option::Option<std::string::String>);
    let mut _2: &std::option::Option<std::string::String>;
    let _3: std::option::Option<std::string::String>;
    let _4: &std::option::Option<std::string::String>;
    let _5: &std::option::Option<std::string::String>;
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: &std::option::Option<std::string::String>;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }

    bb0: {
        _3 = always_yeet() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _11 = const _;
        _1 = (move _2, _11);
        _4 = (_1.0: &std::option::Option<std::string::String>);
        _5 = (_1.1: &std::option::Option<std::string::String>);
        _7 = <Option<String> as PartialEq>::eq(_4, _5) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<Option<String>, Option<String>>(move _8, _4, _5, move _10) -> bb6;
    }

    bb4: {
        drop(_3) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in main: &Option<String> = {
    let mut _0: &std::option::Option<std::string::String>;
    let mut _1: std::option::Option<std::string::String>;

    bb0: {
        _1 = Option::<String>::None;
        _0 = &_1;
        return;
    }
}
