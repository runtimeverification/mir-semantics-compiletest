// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/try-trait/try-operator-custom.rs:15:1: 15:34>::from_output(_1: U) -> MyResult<U, V> {
    debug u => _1;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:19:20: 19:21
    let mut _0: MyResult<U, V>;          // return place in scope 0 at ui/try-trait/try-operator-custom.rs:19:29: 19:43
    let mut _2: U;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:20:27: 20:28

    bb0: {
        _2 = move _1;                    // scope 0 at ui/try-trait/try-operator-custom.rs:20:27: 20:28
        _0 = MyResult::<U, V>::Awesome(move _2); // scope 0 at ui/try-trait/try-operator-custom.rs:20:9: 20:29
        return;                          // scope 0 at ui/try-trait/try-operator-custom.rs:21:6: 21:6
    }
}

fn <impl at ui/try-trait/try-operator-custom.rs:15:1: 15:34>::branch(_1: MyResult<U, V>) -> ControlFlow<MyResult<Never, V>, U> {
    debug self => _1;                    // in scope 0 at ui/try-trait/try-operator-custom.rs:23:15: 23:19
    let mut _0: std::ops::ControlFlow<MyResult<Never, V>, U>; // return place in scope 0 at ui/try-trait/try-operator-custom.rs:23:24: 23:65
    let mut _2: isize;                   // in scope 0 at ui/try-trait/try-operator-custom.rs:25:13: 25:33
    let _3: U;                           // in scope 0 at ui/try-trait/try-operator-custom.rs:25:31: 25:32
    let mut _4: U;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:25:59: 25:60
    let _5: V;                           // in scope 0 at ui/try-trait/try-operator-custom.rs:26:32: 26:33
    let mut _6: MyResult<Never, V>;      // in scope 0 at ui/try-trait/try-operator-custom.rs:26:57: 26:78
    let mut _7: V;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:26:76: 26:77
    scope 1 {
        debug u => _3;                   // in scope 1 at ui/try-trait/try-operator-custom.rs:25:31: 25:32
    }
    scope 2 {
        debug e => _5;                   // in scope 2 at ui/try-trait/try-operator-custom.rs:26:32: 26:33
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/try-trait/try-operator-custom.rs:24:15: 24:19
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/try-trait/try-operator-custom.rs:24:9: 24:19
    }

    bb1: {
        _5 = move ((_1 as Terrible).0: V); // scope 0 at ui/try-trait/try-operator-custom.rs:26:32: 26:33
        _7 = move _5;                    // scope 2 at ui/try-trait/try-operator-custom.rs:26:76: 26:77
        _6 = MyResult::<Never, V>::Terrible(move _7); // scope 2 at ui/try-trait/try-operator-custom.rs:26:57: 26:78
        _0 = ControlFlow::<MyResult<Never, V>, U>::Break(move _6); // scope 2 at ui/try-trait/try-operator-custom.rs:26:38: 26:79
        goto -> bb4;                     // scope 0 at ui/try-trait/try-operator-custom.rs:26:78: 26:79
    }

    bb2: {
        unreachable;                     // scope 0 at ui/try-trait/try-operator-custom.rs:24:15: 24:19
    }

    bb3: {
        _3 = move ((_1 as Awesome).0: U); // scope 0 at ui/try-trait/try-operator-custom.rs:25:31: 25:32
        _4 = move _3;                    // scope 1 at ui/try-trait/try-operator-custom.rs:25:59: 25:60
        _0 = ControlFlow::<MyResult<Never, V>, U>::Continue(move _4); // scope 1 at ui/try-trait/try-operator-custom.rs:25:37: 25:61
        goto -> bb4;                     // scope 0 at ui/try-trait/try-operator-custom.rs:25:60: 25:61
    }

    bb4: {
        return;                          // scope 0 at ui/try-trait/try-operator-custom.rs:28:6: 28:6
    }
}

fn <impl at ui/try-trait/try-operator-custom.rs:31:1: 31:66>::from_residual(_1: MyResult<Never, V>) -> MyResult<U, W> {
    debug x => _1;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:32:22: 32:23
    let mut _0: MyResult<U, W>;          // return place in scope 0 at ui/try-trait/try-operator-custom.rs:32:48: 32:52
    let mut _2: isize;                   // in scope 0 at ui/try-trait/try-operator-custom.rs:34:13: 34:33
    let _3: Never;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:34:31: 34:32
    let _4: V;                           // in scope 0 at ui/try-trait/try-operator-custom.rs:35:32: 35:33
    let mut _5: W;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:35:57: 35:65
    let mut _6: V;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:35:57: 35:58
    scope 1 {
        debug u => _3;                   // in scope 1 at ui/try-trait/try-operator-custom.rs:34:31: 34:32
    }
    scope 2 {
        debug e => _4;                   // in scope 2 at ui/try-trait/try-operator-custom.rs:35:32: 35:33
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/try-trait/try-operator-custom.rs:33:15: 33:16
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/try-trait/try-operator-custom.rs:33:9: 33:16
    }

    bb1: {
        _4 = move ((_1 as Terrible).0: V); // scope 0 at ui/try-trait/try-operator-custom.rs:35:32: 35:33
        _6 = move _4;                    // scope 2 at ui/try-trait/try-operator-custom.rs:35:57: 35:58
        _5 = <V as Into<W>>::into(move _6) -> bb4; // scope 2 at ui/try-trait/try-operator-custom.rs:35:57: 35:65
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:35:59: 35:63
                                         // + literal: Const { ty: fn(V) -> W {<V as Into<W>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/try-trait/try-operator-custom.rs:33:15: 33:16
    }

    bb3: {
        unreachable;                     // scope 1 at ui/try-trait/try-operator-custom.rs:34:43: 34:44
    }

    bb4: {
        _0 = MyResult::<U, W>::Terrible(move _5); // scope 2 at ui/try-trait/try-operator-custom.rs:35:38: 35:66
        return;                          // scope 0 at ui/try-trait/try-operator-custom.rs:37:6: 37:6
    }
}

fn <impl at ui/try-trait/try-operator-custom.rs:42:1: 42:65>::from_residual(_1: Result<Infallible, V>) -> MyResult<U, W> {
    debug x => _1;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:43:22: 43:23
    let mut _0: MyResult<U, W>;          // return place in scope 0 at ui/try-trait/try-operator-custom.rs:43:47: 43:51
    let mut _2: isize;                   // in scope 0 at ui/try-trait/try-operator-custom.rs:45:13: 45:18
    let _3: std::convert::Infallible;    // in scope 0 at ui/try-trait/try-operator-custom.rs:45:16: 45:17
    let _4: V;                           // in scope 0 at ui/try-trait/try-operator-custom.rs:46:17: 46:18
    let mut _5: W;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:46:42: 46:50
    let mut _6: V;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:46:42: 46:43
    scope 1 {
        debug v => _3;                   // in scope 1 at ui/try-trait/try-operator-custom.rs:45:16: 45:17
    }
    scope 2 {
        debug e => _4;                   // in scope 2 at ui/try-trait/try-operator-custom.rs:46:17: 46:18
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/try-trait/try-operator-custom.rs:44:15: 44:16
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/try-trait/try-operator-custom.rs:44:9: 44:16
    }

    bb1: {
        _4 = move ((_1 as Err).0: V);    // scope 0 at ui/try-trait/try-operator-custom.rs:46:17: 46:18
        _6 = move _4;                    // scope 2 at ui/try-trait/try-operator-custom.rs:46:42: 46:43
        _5 = <V as Into<W>>::into(move _6) -> bb4; // scope 2 at ui/try-trait/try-operator-custom.rs:46:42: 46:50
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:46:44: 46:48
                                         // + literal: Const { ty: fn(V) -> W {<V as Into<W>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/try-trait/try-operator-custom.rs:44:15: 44:16
    }

    bb3: {
        unreachable;                     // scope 1 at ui/try-trait/try-operator-custom.rs:45:28: 45:29
    }

    bb4: {
        _0 = MyResult::<U, W>::Terrible(move _5); // scope 2 at ui/try-trait/try-operator-custom.rs:46:23: 46:51
        return;                          // scope 0 at ui/try-trait/try-operator-custom.rs:48:6: 48:6
    }
}

fn <impl at ui/try-trait/try-operator-custom.rs:51:1: 51:64>::from_residual(_1: MyResult<Never, V>) -> Result<U, W> {
    debug x => _1;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:52:22: 52:23
    let mut _0: std::result::Result<U, W>; // return place in scope 0 at ui/try-trait/try-operator-custom.rs:52:48: 52:52
    let mut _2: isize;                   // in scope 0 at ui/try-trait/try-operator-custom.rs:54:13: 54:33
    let _3: Never;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:54:31: 54:32
    let _4: V;                           // in scope 0 at ui/try-trait/try-operator-custom.rs:55:32: 55:33
    let mut _5: W;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:55:42: 55:50
    let mut _6: V;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:55:42: 55:43
    scope 1 {
        debug u => _3;                   // in scope 1 at ui/try-trait/try-operator-custom.rs:54:31: 54:32
    }
    scope 2 {
        debug e => _4;                   // in scope 2 at ui/try-trait/try-operator-custom.rs:55:32: 55:33
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/try-trait/try-operator-custom.rs:53:15: 53:16
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/try-trait/try-operator-custom.rs:53:9: 53:16
    }

    bb1: {
        _4 = move ((_1 as Terrible).0: V); // scope 0 at ui/try-trait/try-operator-custom.rs:55:32: 55:33
        _6 = move _4;                    // scope 2 at ui/try-trait/try-operator-custom.rs:55:42: 55:43
        _5 = <V as Into<W>>::into(move _6) -> bb4; // scope 2 at ui/try-trait/try-operator-custom.rs:55:42: 55:50
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:55:44: 55:48
                                         // + literal: Const { ty: fn(V) -> W {<V as Into<W>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/try-trait/try-operator-custom.rs:53:15: 53:16
    }

    bb3: {
        unreachable;                     // scope 1 at ui/try-trait/try-operator-custom.rs:54:43: 54:44
    }

    bb4: {
        _0 = Result::<U, W>::Err(move _5); // scope 2 at ui/try-trait/try-operator-custom.rs:55:38: 55:51
        return;                          // scope 0 at ui/try-trait/try-operator-custom.rs:57:6: 57:6
    }
}

fn f(_1: i32) -> Result<i32, String> {
    debug x => _1;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:60:6: 60:7
    let mut _0: std::result::Result<i32, std::string::String>; // return place in scope 0 at ui/try-trait/try-operator-custom.rs:60:17: 60:36
    let mut _2: i32;                     // in scope 0 at ui/try-trait/try-operator-custom.rs:61:8: 61:9
    let _3: i32;                         // in scope 0 at ui/try-trait/try-operator-custom.rs:64:13: 64:14
    let mut _4: std::ops::ControlFlow<MyResult<Never, std::string::String>, i32>; // in scope 0 at ui/try-trait/try-operator-custom.rs:64:17: 64:22
    let mut _5: MyResult<i32, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:64:17: 64:21
    let mut _6: i32;                     // in scope 0 at ui/try-trait/try-operator-custom.rs:64:19: 64:20
    let mut _7: isize;                   // in scope 0 at ui/try-trait/try-operator-custom.rs:64:21: 64:22
    let _8: MyResult<Never, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:64:21: 64:22
    let mut _9: MyResult<Never, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:64:21: 64:22
    let _10: i32;                        // in scope 0 at ui/try-trait/try-operator-custom.rs:64:17: 64:22
    let mut _11: i32;                    // in scope 0 at ui/try-trait/try-operator-custom.rs:65:12: 65:13
    scope 1 {
        debug y => _3;                   // in scope 1 at ui/try-trait/try-operator-custom.rs:64:13: 64:14
    }
    scope 2 {
        debug residual => _8;            // in scope 2 at ui/try-trait/try-operator-custom.rs:64:21: 64:22
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;                // in scope 4 at ui/try-trait/try-operator-custom.rs:64:17: 64:22
        scope 5 {
        }
    }

    bb0: {
        _2 = _1;                         // scope 0 at ui/try-trait/try-operator-custom.rs:61:8: 61:9
        switchInt(move _2) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/try-trait/try-operator-custom.rs:61:8: 61:14
    }

    bb1: {
        _0 = Result::<i32, String>::Ok(const 42_i32); // scope 0 at ui/try-trait/try-operator-custom.rs:62:9: 62:15
        goto -> bb8;                     // scope 0 at ui/try-trait/try-operator-custom.rs:61:5: 66:6
    }

    bb2: {
        _6 = _1;                         // scope 0 at ui/try-trait/try-operator-custom.rs:64:19: 64:20
        _5 = g(move _6) -> bb3;          // scope 0 at ui/try-trait/try-operator-custom.rs:64:17: 64:21
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:64:17: 64:18
                                         // + literal: Const { ty: fn(i32) -> MyResult<i32, String> {g}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = <MyResult<i32, String> as Try>::branch(move _5) -> bb4; // scope 0 at ui/try-trait/try-operator-custom.rs:64:17: 64:22
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:64:17: 64:22
                                         // + literal: Const { ty: fn(MyResult<i32, String>) -> ControlFlow<<MyResult<i32, String> as Try>::Residual, <MyResult<i32, String> as Try>::Output> {<MyResult<i32, String> as Try>::branch}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = discriminant(_4);           // scope 0 at ui/try-trait/try-operator-custom.rs:64:17: 64:22
        switchInt(move _7) -> [0: bb5, 1: bb7, otherwise: bb6]; // scope 0 at ui/try-trait/try-operator-custom.rs:64:17: 64:22
    }

    bb5: {
        _10 = ((_4 as Continue).0: i32); // scope 0 at ui/try-trait/try-operator-custom.rs:64:17: 64:22
        _3 = _10;                        // scope 5 at ui/try-trait/try-operator-custom.rs:64:17: 64:22
        _11 = _3;                        // scope 1 at ui/try-trait/try-operator-custom.rs:65:12: 65:13
        _0 = Result::<i32, String>::Ok(move _11); // scope 1 at ui/try-trait/try-operator-custom.rs:65:9: 65:14
        goto -> bb8;                     // scope 0 at ui/try-trait/try-operator-custom.rs:61:5: 66:6
    }

    bb6: {
        unreachable;                     // scope 0 at ui/try-trait/try-operator-custom.rs:64:17: 64:22
    }

    bb7: {
        _8 = move ((_4 as Break).0: MyResult<Never, std::string::String>); // scope 0 at ui/try-trait/try-operator-custom.rs:64:21: 64:22
        _9 = move _8;                    // scope 3 at ui/try-trait/try-operator-custom.rs:64:21: 64:22
        _0 = <Result<i32, String> as FromResidual<MyResult<Never, String>>>::from_residual(move _9) -> bb8; // scope 3 at ui/try-trait/try-operator-custom.rs:64:17: 64:22
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:64:21: 64:22
                                         // + literal: Const { ty: fn(MyResult<Never, String>) -> Result<i32, String> {<Result<i32, String> as FromResidual<MyResult<Never, String>>>::from_residual}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/try-trait/try-operator-custom.rs:67:2: 67:2
    }
}

fn g(_1: i32) -> MyResult<i32, String> {
    debug x => _1;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:69:6: 69:7
    let mut _0: MyResult<i32, std::string::String>; // return place in scope 0 at ui/try-trait/try-operator-custom.rs:69:17: 69:38
    let _2: i32;                         // in scope 0 at ui/try-trait/try-operator-custom.rs:70:9: 70:11
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, i32>; // in scope 0 at ui/try-trait/try-operator-custom.rs:70:14: 70:23
    let mut _4: std::result::Result<i32, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:70:14: 70:22
    let mut _5: i32;                     // in scope 0 at ui/try-trait/try-operator-custom.rs:70:16: 70:21
    let mut _6: i32;                     // in scope 0 at ui/try-trait/try-operator-custom.rs:70:16: 70:17
    let mut _7: (i32, bool);             // in scope 0 at ui/try-trait/try-operator-custom.rs:70:16: 70:21
    let mut _8: isize;                   // in scope 0 at ui/try-trait/try-operator-custom.rs:70:22: 70:23
    let _9: std::result::Result<std::convert::Infallible, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:70:22: 70:23
    let mut _10: std::result::Result<std::convert::Infallible, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:70:22: 70:23
    let _11: i32;                        // in scope 0 at ui/try-trait/try-operator-custom.rs:70:14: 70:23
    let mut _12: std::string::String;    // in scope 0 at ui/try-trait/try-operator-custom.rs:71:24: 71:42
    let mut _13: &str;                   // in scope 0 at ui/try-trait/try-operator-custom.rs:71:24: 71:42
    let _14: &str;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:71:24: 71:31
    scope 1 {
        debug _y => _2;                  // in scope 1 at ui/try-trait/try-operator-custom.rs:70:9: 70:11
    }
    scope 2 {
        debug residual => _9;            // in scope 2 at ui/try-trait/try-operator-custom.rs:70:22: 70:23
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;                // in scope 4 at ui/try-trait/try-operator-custom.rs:70:14: 70:23
        scope 5 {
        }
    }

    bb0: {
        _6 = _1;                         // scope 0 at ui/try-trait/try-operator-custom.rs:70:16: 70:17
        _7 = CheckedSub(_6, const 1_i32); // scope 0 at ui/try-trait/try-operator-custom.rs:70:16: 70:21
        assert(!move (_7.1: bool), "attempt to compute `{} - {}`, which would overflow", move _6, const 1_i32) -> bb1; // scope 0 at ui/try-trait/try-operator-custom.rs:70:16: 70:21
    }

    bb1: {
        _5 = move (_7.0: i32);           // scope 0 at ui/try-trait/try-operator-custom.rs:70:16: 70:21
        _4 = f(move _5) -> bb2;          // scope 0 at ui/try-trait/try-operator-custom.rs:70:14: 70:22
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:70:14: 70:15
                                         // + literal: Const { ty: fn(i32) -> Result<i32, String> {f}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <Result<i32, String> as Try>::branch(move _4) -> bb3; // scope 0 at ui/try-trait/try-operator-custom.rs:70:14: 70:23
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:70:14: 70:23
                                         // + literal: Const { ty: fn(Result<i32, String>) -> ControlFlow<<Result<i32, String> as Try>::Residual, <Result<i32, String> as Try>::Output> {<Result<i32, String> as Try>::branch}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = discriminant(_3);           // scope 0 at ui/try-trait/try-operator-custom.rs:70:14: 70:23
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 0 at ui/try-trait/try-operator-custom.rs:70:14: 70:23
    }

    bb4: {
        _11 = ((_3 as Continue).0: i32); // scope 0 at ui/try-trait/try-operator-custom.rs:70:14: 70:23
        _2 = _11;                        // scope 5 at ui/try-trait/try-operator-custom.rs:70:14: 70:23
        _14 = const "Hello";             // scope 1 at ui/try-trait/try-operator-custom.rs:71:24: 71:31
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:71:24: 71:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 1 at ui/try-trait/try-operator-custom.rs:71:24: 71:42
        _12 = <str as ToOwned>::to_owned(move _13) -> bb7; // scope 1 at ui/try-trait/try-operator-custom.rs:71:24: 71:42
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:71:32: 71:40
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 0 at ui/try-trait/try-operator-custom.rs:70:14: 70:23
    }

    bb6: {
        _9 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>); // scope 0 at ui/try-trait/try-operator-custom.rs:70:22: 70:23
        _10 = move _9;                   // scope 3 at ui/try-trait/try-operator-custom.rs:70:22: 70:23
        _0 = <MyResult<i32, String> as FromResidual<Result<Infallible, String>>>::from_residual(move _10) -> bb8; // scope 3 at ui/try-trait/try-operator-custom.rs:70:14: 70:23
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:70:22: 70:23
                                         // + literal: Const { ty: fn(Result<Infallible, String>) -> MyResult<i32, String> {<MyResult<i32, String> as FromResidual<Result<Infallible, String>>>::from_residual}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = MyResult::<i32, String>::Terrible(move _12); // scope 1 at ui/try-trait/try-operator-custom.rs:71:5: 71:43
        goto -> bb8;                     // scope 0 at ui/try-trait/try-operator-custom.rs:72:2: 72:2
    }

    bb8: {
        return;                          // scope 0 at ui/try-trait/try-operator-custom.rs:72:2: 72:2
    }
}

fn h() -> MyResult<i32, String> {
    let mut _0: MyResult<i32, std::string::String>; // return place in scope 0 at ui/try-trait/try-operator-custom.rs:74:11: 74:32
    let _1: std::result::Result<i32, &str>; // in scope 0 at ui/try-trait/try-operator-custom.rs:75:9: 75:10
    let mut _2: &str;                    // in scope 0 at ui/try-trait/try-operator-custom.rs:75:44: 75:51
    let _3: &str;                        // in scope 0 at ui/try-trait/try-operator-custom.rs:75:44: 75:51
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, &str>, i32>; // in scope 0 at ui/try-trait/try-operator-custom.rs:76:13: 76:15
    let mut _6: std::result::Result<i32, &str>; // in scope 0 at ui/try-trait/try-operator-custom.rs:76:13: 76:14
    let mut _7: isize;                   // in scope 0 at ui/try-trait/try-operator-custom.rs:76:14: 76:15
    let mut _9: std::result::Result<std::convert::Infallible, &str>; // in scope 0 at ui/try-trait/try-operator-custom.rs:76:14: 76:15
    let mut _11: i32;                    // in scope 0 at ui/try-trait/try-operator-custom.rs:77:23: 77:24
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/try-trait/try-operator-custom.rs:75:9: 75:10
        let _4: i32;                     // in scope 1 at ui/try-trait/try-operator-custom.rs:76:9: 76:10
        let _8: std::result::Result<std::convert::Infallible, &str>; // in scope 1 at ui/try-trait/try-operator-custom.rs:76:14: 76:15
        let _10: i32;                    // in scope 1 at ui/try-trait/try-operator-custom.rs:76:13: 76:15
        scope 2 {
            debug b => _4;               // in scope 2 at ui/try-trait/try-operator-custom.rs:76:9: 76:10
        }
        scope 3 {
            debug residual => _8;        // in scope 3 at ui/try-trait/try-operator-custom.rs:76:14: 76:15
            scope 4 {
            }
        }
        scope 5 {
            debug val => _10;            // in scope 5 at ui/try-trait/try-operator-custom.rs:76:13: 76:15
            scope 6 {
            }
        }
    }

    bb0: {
        _3 = const "Hello";              // scope 0 at ui/try-trait/try-operator-custom.rs:75:44: 75:51
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:75:44: 75:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/try-trait/try-operator-custom.rs:75:44: 75:51
        _1 = Result::<i32, &str>::Err(move _2); // scope 0 at ui/try-trait/try-operator-custom.rs:75:40: 75:52
        _6 = _1;                         // scope 1 at ui/try-trait/try-operator-custom.rs:76:13: 76:14
        _5 = <Result<i32, &str> as Try>::branch(move _6) -> bb1; // scope 1 at ui/try-trait/try-operator-custom.rs:76:13: 76:15
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:76:13: 76:15
                                         // + literal: Const { ty: fn(Result<i32, &str>) -> ControlFlow<<Result<i32, &str> as Try>::Residual, <Result<i32, &str> as Try>::Output> {<Result<i32, &str> as Try>::branch}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_5);           // scope 1 at ui/try-trait/try-operator-custom.rs:76:13: 76:15
        switchInt(move _7) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 1 at ui/try-trait/try-operator-custom.rs:76:13: 76:15
    }

    bb2: {
        _10 = ((_5 as Continue).0: i32); // scope 1 at ui/try-trait/try-operator-custom.rs:76:13: 76:15
        _4 = _10;                        // scope 6 at ui/try-trait/try-operator-custom.rs:76:13: 76:15
        _11 = _4;                        // scope 2 at ui/try-trait/try-operator-custom.rs:77:23: 77:24
        _0 = MyResult::<i32, String>::Awesome(move _11); // scope 2 at ui/try-trait/try-operator-custom.rs:77:5: 77:25
        goto -> bb5;                     // scope 0 at ui/try-trait/try-operator-custom.rs:78:2: 78:2
    }

    bb3: {
        unreachable;                     // scope 1 at ui/try-trait/try-operator-custom.rs:76:13: 76:15
    }

    bb4: {
        _8 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, &str>); // scope 1 at ui/try-trait/try-operator-custom.rs:76:14: 76:15
        _9 = _8;                         // scope 4 at ui/try-trait/try-operator-custom.rs:76:14: 76:15
        _0 = <MyResult<i32, String> as FromResidual<Result<Infallible, &str>>>::from_residual(move _9) -> bb5; // scope 4 at ui/try-trait/try-operator-custom.rs:76:13: 76:15
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:76:14: 76:15
                                         // + literal: Const { ty: fn(Result<Infallible, &str>) -> MyResult<i32, String> {<MyResult<i32, String> as FromResidual<Result<Infallible, &str>>>::from_residual}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/try-trait/try-operator-custom.rs:78:2: 78:2
    }
}

fn i() -> MyResult<i32, String> {
    let mut _0: MyResult<i32, std::string::String>; // return place in scope 0 at ui/try-trait/try-operator-custom.rs:80:11: 80:32
    let _1: MyResult<i32, &str>;         // in scope 0 at ui/try-trait/try-operator-custom.rs:81:9: 81:10
    let mut _2: &str;                    // in scope 0 at ui/try-trait/try-operator-custom.rs:81:61: 81:68
    let _3: &str;                        // in scope 0 at ui/try-trait/try-operator-custom.rs:81:61: 81:68
    let mut _5: std::ops::ControlFlow<MyResult<Never, &str>, i32>; // in scope 0 at ui/try-trait/try-operator-custom.rs:82:13: 82:15
    let mut _6: MyResult<i32, &str>;     // in scope 0 at ui/try-trait/try-operator-custom.rs:82:13: 82:14
    let mut _7: isize;                   // in scope 0 at ui/try-trait/try-operator-custom.rs:82:14: 82:15
    let mut _9: MyResult<Never, &str>;   // in scope 0 at ui/try-trait/try-operator-custom.rs:82:14: 82:15
    let mut _11: i32;                    // in scope 0 at ui/try-trait/try-operator-custom.rs:83:23: 83:24
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/try-trait/try-operator-custom.rs:81:9: 81:10
        let _4: i32;                     // in scope 1 at ui/try-trait/try-operator-custom.rs:82:9: 82:10
        let _8: MyResult<Never, &str>;   // in scope 1 at ui/try-trait/try-operator-custom.rs:82:14: 82:15
        let _10: i32;                    // in scope 1 at ui/try-trait/try-operator-custom.rs:82:13: 82:15
        scope 2 {
            debug b => _4;               // in scope 2 at ui/try-trait/try-operator-custom.rs:82:9: 82:10
        }
        scope 3 {
            debug residual => _8;        // in scope 3 at ui/try-trait/try-operator-custom.rs:82:14: 82:15
            scope 4 {
            }
        }
        scope 5 {
            debug val => _10;            // in scope 5 at ui/try-trait/try-operator-custom.rs:82:13: 82:15
            scope 6 {
            }
        }
    }

    bb0: {
        _3 = const "Hello";              // scope 0 at ui/try-trait/try-operator-custom.rs:81:61: 81:68
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:81:61: 81:68
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/try-trait/try-operator-custom.rs:81:61: 81:68
        _1 = MyResult::<i32, &str>::Terrible(move _2); // scope 0 at ui/try-trait/try-operator-custom.rs:81:42: 81:69
        _6 = move _1;                    // scope 1 at ui/try-trait/try-operator-custom.rs:82:13: 82:14
        _5 = <MyResult<i32, &str> as Try>::branch(move _6) -> bb1; // scope 1 at ui/try-trait/try-operator-custom.rs:82:13: 82:15
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:82:13: 82:15
                                         // + literal: Const { ty: fn(MyResult<i32, &str>) -> ControlFlow<<MyResult<i32, &str> as Try>::Residual, <MyResult<i32, &str> as Try>::Output> {<MyResult<i32, &str> as Try>::branch}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = discriminant(_5);           // scope 1 at ui/try-trait/try-operator-custom.rs:82:13: 82:15
        switchInt(move _7) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 1 at ui/try-trait/try-operator-custom.rs:82:13: 82:15
    }

    bb2: {
        _10 = ((_5 as Continue).0: i32); // scope 1 at ui/try-trait/try-operator-custom.rs:82:13: 82:15
        _4 = _10;                        // scope 6 at ui/try-trait/try-operator-custom.rs:82:13: 82:15
        _11 = _4;                        // scope 2 at ui/try-trait/try-operator-custom.rs:83:23: 83:24
        _0 = MyResult::<i32, String>::Awesome(move _11); // scope 2 at ui/try-trait/try-operator-custom.rs:83:5: 83:25
        goto -> bb5;                     // scope 0 at ui/try-trait/try-operator-custom.rs:84:2: 84:2
    }

    bb3: {
        unreachable;                     // scope 1 at ui/try-trait/try-operator-custom.rs:82:13: 82:15
    }

    bb4: {
        _8 = move ((_5 as Break).0: MyResult<Never, &str>); // scope 1 at ui/try-trait/try-operator-custom.rs:82:14: 82:15
        _9 = move _8;                    // scope 4 at ui/try-trait/try-operator-custom.rs:82:14: 82:15
        _0 = <MyResult<i32, String> as FromResidual<MyResult<Never, &str>>>::from_residual(move _9) -> bb5; // scope 4 at ui/try-trait/try-operator-custom.rs:82:13: 82:15
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:82:14: 82:15
                                         // + literal: Const { ty: fn(MyResult<Never, &str>) -> MyResult<i32, String> {<MyResult<i32, String> as FromResidual<MyResult<Never, &str>>>::from_residual}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/try-trait/try-operator-custom.rs:84:2: 84:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/try-trait/try-operator-custom.rs:86:11: 86:11
    let mut _1: bool;                    // in scope 0 at ui/try-trait/try-operator-custom.rs:87:5: 87:28
    let mut _2: bool;                    // in scope 0 at ui/try-trait/try-operator-custom.rs:87:13: 87:27
    let mut _3: &std::result::Result<i32, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:87:13: 87:17
    let _4: std::result::Result<i32, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:87:13: 87:17
    let mut _5: &std::result::Result<i32, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:87:21: 87:27
    let mut _6: !;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:87:5: 87:28
    let mut _7: bool;                    // in scope 0 at ui/try-trait/try-operator-custom.rs:88:5: 88:46
    let mut _8: bool;                    // in scope 0 at ui/try-trait/try-operator-custom.rs:88:13: 88:45
    let mut _9: &std::result::Result<i32, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:88:13: 88:18
    let _10: std::result::Result<i32, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:88:13: 88:18
    let mut _11: &std::result::Result<i32, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:88:22: 88:45
    let _12: std::result::Result<i32, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:88:22: 88:45
    let mut _13: std::string::String;    // in scope 0 at ui/try-trait/try-operator-custom.rs:88:26: 88:44
    let mut _14: &str;                   // in scope 0 at ui/try-trait/try-operator-custom.rs:88:26: 88:44
    let _15: &str;                       // in scope 0 at ui/try-trait/try-operator-custom.rs:88:26: 88:33
    let mut _16: !;                      // in scope 0 at ui/try-trait/try-operator-custom.rs:88:5: 88:46
    let mut _17: MyResult<i32, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:89:13: 89:16
    let mut _18: MyResult<i32, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:90:13: 90:16
    let mut _19: &std::result::Result<i32, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:87:21: 87:27
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _4 = f(const 0_i32) -> bb1;      // scope 0 at ui/try-trait/try-operator-custom.rs:87:13: 87:17
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:87:13: 87:14
                                         // + literal: Const { ty: fn(i32) -> Result<i32, String> {f}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at ui/try-trait/try-operator-custom.rs:87:13: 87:17
        _19 = const _;                   // scope 0 at ui/try-trait/try-operator-custom.rs:87:21: 87:27
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:87:21: 87:27
                                         // + literal: Const { ty: &Result<i32, String>, val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _19;                        // scope 0 at ui/try-trait/try-operator-custom.rs:87:21: 87:27
        _2 = <Result<i32, String> as PartialEq>::eq(move _3, move _5) -> [return: bb2, unwind: bb19]; // scope 0 at ui/try-trait/try-operator-custom.rs:87:13: 87:27
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:87:13: 87:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, String>, &'b Result<i32, String>) -> bool {<Result<i32, String> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = Not(move _2);               // scope 0 at ui/try-trait/try-operator-custom.rs:87:5: 87:28
        drop(_4) -> bb3;                 // scope 0 at ui/try-trait/try-operator-custom.rs:87:27: 87:28
    }

    bb3: {
        switchInt(move _1) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/try-trait/try-operator-custom.rs:87:5: 87:28
    }

    bb4: {
        _6 = core::panicking::panic(const "assertion failed: f(0) == Ok(42)"); // scope 0 at ui/try-trait/try-operator-custom.rs:87:5: 87:28
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:87:5: 87:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _10 = f(const 10_i32) -> bb6;    // scope 0 at ui/try-trait/try-operator-custom.rs:88:13: 88:18
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:88:13: 88:14
                                         // + literal: Const { ty: fn(i32) -> Result<i32, String> {f}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = &_10;                       // scope 0 at ui/try-trait/try-operator-custom.rs:88:13: 88:18
        _15 = const "Hello";             // scope 0 at ui/try-trait/try-operator-custom.rs:88:26: 88:33
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:88:26: 88:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = _15;                       // scope 0 at ui/try-trait/try-operator-custom.rs:88:26: 88:44
        _13 = <str as ToOwned>::to_owned(move _14) -> [return: bb7, unwind: bb18]; // scope 0 at ui/try-trait/try-operator-custom.rs:88:26: 88:44
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:88:34: 88:42
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb7: {
        _12 = Result::<i32, String>::Err(move _13); // scope 0 at ui/try-trait/try-operator-custom.rs:88:22: 88:45
        _11 = &_12;                      // scope 0 at ui/try-trait/try-operator-custom.rs:88:22: 88:45
        _8 = <Result<i32, String> as PartialEq>::eq(move _9, move _11) -> [return: bb8, unwind: bb17]; // scope 0 at ui/try-trait/try-operator-custom.rs:88:13: 88:45
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:88:13: 88:45
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, String>, &'b Result<i32, String>) -> bool {<Result<i32, String> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _7 = Not(move _8);               // scope 0 at ui/try-trait/try-operator-custom.rs:88:5: 88:46
        drop(_12) -> [return: bb9, unwind: bb18]; // scope 0 at ui/try-trait/try-operator-custom.rs:88:45: 88:46
    }

    bb9: {
        drop(_10) -> bb10;               // scope 0 at ui/try-trait/try-operator-custom.rs:88:45: 88:46
    }

    bb10: {
        switchInt(move _7) -> [0: bb12, otherwise: bb11]; // scope 0 at ui/try-trait/try-operator-custom.rs:88:5: 88:46
    }

    bb11: {
        _16 = core::panicking::panic(const "assertion failed: f(10) == Err(\\\"Hello\\\".to_owned())"); // scope 0 at ui/try-trait/try-operator-custom.rs:88:5: 88:46
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:88:5: 88:46
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _17 = h() -> bb13;               // scope 0 at ui/try-trait/try-operator-custom.rs:89:13: 89:16
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:89:13: 89:14
                                         // + literal: Const { ty: fn() -> MyResult<i32, String> {h}, val: Value(<ZST>) }
    }

    bb13: {
        drop(_17) -> bb14;               // scope 0 at ui/try-trait/try-operator-custom.rs:89:16: 89:17
    }

    bb14: {
        _18 = i() -> bb15;               // scope 1 at ui/try-trait/try-operator-custom.rs:90:13: 90:16
                                         // mir::Constant
                                         // + span: ui/try-trait/try-operator-custom.rs:90:13: 90:14
                                         // + literal: Const { ty: fn() -> MyResult<i32, String> {i}, val: Value(<ZST>) }
    }

    bb15: {
        drop(_18) -> bb16;               // scope 1 at ui/try-trait/try-operator-custom.rs:90:16: 90:17
    }

    bb16: {
        return;                          // scope 0 at ui/try-trait/try-operator-custom.rs:91:2: 91:2
    }

    bb17 (cleanup): {
        drop(_12) -> bb18;               // scope 0 at ui/try-trait/try-operator-custom.rs:88:45: 88:46
    }

    bb18 (cleanup): {
        drop(_10) -> bb20;               // scope 0 at ui/try-trait/try-operator-custom.rs:88:45: 88:46
    }

    bb19 (cleanup): {
        drop(_4) -> bb20;                // scope 0 at ui/try-trait/try-operator-custom.rs:87:27: 87:28
    }

    bb20 (cleanup): {
        resume;                          // scope 0 at ui/try-trait/try-operator-custom.rs:86:1: 91:2
    }
}

promoted[0] in main: &Result<i32, String> = {
    let mut _0: &std::result::Result<i32, std::string::String>; // return place in scope 0 at ui/try-trait/try-operator-custom.rs:87:21: 87:27
    let mut _1: std::result::Result<i32, std::string::String>; // in scope 0 at ui/try-trait/try-operator-custom.rs:87:21: 87:27

    bb0: {
        _1 = Result::<i32, String>::Ok(const 42_i32); // scope 0 at ui/try-trait/try-operator-custom.rs:87:21: 87:27
        _0 = &_1;                        // scope 0 at ui/try-trait/try-operator-custom.rs:87:21: 87:27
        return;                          // scope 0 at ui/try-trait/try-operator-custom.rs:87:21: 87:27
    }
}

fn MyResult::Awesome(_1: T) -> MyResult<T, U> {
    let mut _0: MyResult<T, U>;          // return place in scope 0 at ui/try-trait/try-operator-custom.rs:9:5: 9:12

    bb0: {
        _0 = MyResult::<T, U>::Awesome(move _1); // scope 0 at ui/try-trait/try-operator-custom.rs:9:5: 9:12
        return;                          // scope 0 at ui/try-trait/try-operator-custom.rs:9:5: 9:12
    }
}

// MIR FOR CTFE
fn MyResult::Awesome(_1: T) -> MyResult<T, U> {
    let mut _0: MyResult<T, U>;          // return place in scope 0 at ui/try-trait/try-operator-custom.rs:9:5: 9:12

    bb0: {
        _0 = MyResult::<T, U>::Awesome(move _1); // scope 0 at ui/try-trait/try-operator-custom.rs:9:5: 9:12
        return;                          // scope 0 at ui/try-trait/try-operator-custom.rs:9:5: 9:12
    }
}

fn MyResult::Terrible(_1: U) -> MyResult<T, U> {
    let mut _0: MyResult<T, U>;          // return place in scope 0 at ui/try-trait/try-operator-custom.rs:10:5: 10:13

    bb0: {
        _0 = MyResult::<T, U>::Terrible(move _1); // scope 0 at ui/try-trait/try-operator-custom.rs:10:5: 10:13
        return;                          // scope 0 at ui/try-trait/try-operator-custom.rs:10:5: 10:13
    }
}

// MIR FOR CTFE
fn MyResult::Terrible(_1: U) -> MyResult<T, U> {
    let mut _0: MyResult<T, U>;          // return place in scope 0 at ui/try-trait/try-operator-custom.rs:10:5: 10:13

    bb0: {
        _0 = MyResult::<T, U>::Terrible(move _1); // scope 0 at ui/try-trait/try-operator-custom.rs:10:5: 10:13
        return;                          // scope 0 at ui/try-trait/try-operator-custom.rs:10:5: 10:13
    }
}
