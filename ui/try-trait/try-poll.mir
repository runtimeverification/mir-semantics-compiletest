// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn as_result() -> Result<(), E> {
    let mut _0: std::result::Result<(), E>; // return place in scope 0 at ui/try-trait/try-poll.rs:10:19: 10:32
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, K>; // in scope 0 at ui/try-trait/try-poll.rs:12:13: 12:27
    let mut _2: std::result::Result<K, E>; // in scope 0 at ui/try-trait/try-poll.rs:12:13: 12:26
    let mut _3: isize;                   // in scope 0 at ui/try-trait/try-poll.rs:12:26: 12:27
    let _4: std::result::Result<std::convert::Infallible, E>; // in scope 0 at ui/try-trait/try-poll.rs:12:26: 12:27
    let mut _5: std::result::Result<std::convert::Infallible, E>; // in scope 0 at ui/try-trait/try-poll.rs:12:26: 12:27
    let _6: K;                           // in scope 0 at ui/try-trait/try-poll.rs:12:13: 12:27
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, std::task::Poll<K>>; // in scope 0 at ui/try-trait/try-poll.rs:15:22: 15:57
    let mut _8: std::task::Poll<std::result::Result<K, E>>; // in scope 0 at ui/try-trait/try-poll.rs:15:22: 15:56
    let mut _9: isize;                   // in scope 0 at ui/try-trait/try-poll.rs:15:56: 15:57
    let mut _11: std::result::Result<std::convert::Infallible, E>; // in scope 0 at ui/try-trait/try-poll.rs:15:56: 15:57
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, std::task::Poll<std::option::Option<K>>>; // in scope 0 at ui/try-trait/try-poll.rs:18:30: 18:72
    let mut _14: std::task::Poll<std::option::Option<std::result::Result<K, E>>>; // in scope 0 at ui/try-trait/try-poll.rs:18:30: 18:71
    let mut _15: isize;                  // in scope 0 at ui/try-trait/try-poll.rs:18:71: 18:72
    let mut _17: std::result::Result<std::convert::Infallible, E>; // in scope 0 at ui/try-trait/try-poll.rs:18:71: 18:72
    scope 1 {
        let _10: std::result::Result<std::convert::Infallible, E>; // in scope 1 at ui/try-trait/try-poll.rs:15:56: 15:57
        let _12: std::task::Poll<K>;     // in scope 1 at ui/try-trait/try-poll.rs:15:22: 15:57
        scope 6 {
            let _16: std::result::Result<std::convert::Infallible, E>; // in scope 6 at ui/try-trait/try-poll.rs:18:71: 18:72
            let _18: std::task::Poll<std::option::Option<K>>; // in scope 6 at ui/try-trait/try-poll.rs:18:30: 18:72
            scope 11 {
            }
            scope 12 {
                debug residual => _16;   // in scope 12 at ui/try-trait/try-poll.rs:18:71: 18:72
                scope 13 {
                }
            }
            scope 14 {
                debug val => _18;        // in scope 14 at ui/try-trait/try-poll.rs:18:30: 18:72
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _10;       // in scope 7 at ui/try-trait/try-poll.rs:15:56: 15:57
            scope 8 {
            }
        }
        scope 9 {
            debug val => _12;            // in scope 9 at ui/try-trait/try-poll.rs:15:22: 15:57
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _4;            // in scope 2 at ui/try-trait/try-poll.rs:12:26: 12:27
        scope 3 {
        }
    }
    scope 4 {
        debug val => _6;                 // in scope 4 at ui/try-trait/try-poll.rs:12:13: 12:27
        scope 5 {
        }
    }

    bb0: {
        _2 = const Result::<K, E>::Ok(K); // scope 0 at ui/try-trait/try-poll.rs:12:13: 12:26
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:12:13: 12:26
                                         // + literal: Const { ty: Result<K, E>, val: Value(Scalar(0x00)) }
        _1 = <Result<K, E> as Try>::branch(move _2) -> bb1; // scope 0 at ui/try-trait/try-poll.rs:12:13: 12:27
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:12:13: 12:27
                                         // + literal: Const { ty: fn(Result<K, E>) -> ControlFlow<<Result<K, E> as Try>::Residual, <Result<K, E> as Try>::Output> {<Result<K, E> as Try>::branch}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = discriminant(_1);           // scope 0 at ui/try-trait/try-poll.rs:12:13: 12:27
        switchInt(move _3) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at ui/try-trait/try-poll.rs:12:13: 12:27
    }

    bb2: {
        _8 = const Poll::<Result<K, E>>::Ready(Result::<K, E>::Ok(K)); // scope 1 at ui/try-trait/try-poll.rs:15:22: 15:56
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:15:22: 15:56
                                         // + literal: Const { ty: Poll<Result<K, E>>, val: Value(Scalar(0x00)) }
        _7 = <Poll<Result<K, E>> as Try>::branch(move _8) -> bb5; // scope 1 at ui/try-trait/try-poll.rs:15:22: 15:57
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:15:22: 15:57
                                         // + literal: Const { ty: fn(Poll<Result<K, E>>) -> ControlFlow<<Poll<Result<K, E>> as Try>::Residual, <Poll<Result<K, E>> as Try>::Output> {<Poll<Result<K, E>> as Try>::branch}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at ui/try-trait/try-poll.rs:12:13: 12:27
    }

    bb4: {
        _0 = <Result<(), E> as FromResidual<Result<Infallible, E>>>::from_residual(move _5) -> bb13; // scope 3 at ui/try-trait/try-poll.rs:12:13: 12:27
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:12:26: 12:27
                                         // + literal: Const { ty: fn(Result<Infallible, E>) -> Result<(), E> {<Result<(), E> as FromResidual<Result<Infallible, E>>>::from_residual}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = discriminant(_7);           // scope 1 at ui/try-trait/try-poll.rs:15:22: 15:57
        switchInt(move _9) -> [0: bb6, 1: bb8, otherwise: bb7]; // scope 1 at ui/try-trait/try-poll.rs:15:22: 15:57
    }

    bb6: {
        _12 = move ((_7 as Continue).0: std::task::Poll<K>); // scope 1 at ui/try-trait/try-poll.rs:15:22: 15:57
        _14 = const Poll::<Option<Result<K, E>>>::Ready(Option::<Result<K, E>>::None); // scope 6 at ui/try-trait/try-poll.rs:18:30: 18:71
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:18:30: 18:71
                                         // + literal: Const { ty: Poll<Option<Result<K, E>>>, val: Value(Scalar(0x02)) }
        _13 = <Poll<Option<Result<K, E>>> as Try>::branch(move _14) -> bb9; // scope 6 at ui/try-trait/try-poll.rs:18:30: 18:72
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:18:30: 18:72
                                         // + literal: Const { ty: fn(Poll<Option<Result<K, E>>>) -> ControlFlow<<Poll<Option<Result<K, E>>> as Try>::Residual, <Poll<Option<Result<K, E>>> as Try>::Output> {<Poll<Option<Result<K, E>>> as Try>::branch}, val: Value(<ZST>) }
    }

    bb7: {
        unreachable;                     // scope 1 at ui/try-trait/try-poll.rs:15:22: 15:57
    }

    bb8: {
        _0 = <Result<(), E> as FromResidual<Result<Infallible, E>>>::from_residual(move _11) -> bb13; // scope 8 at ui/try-trait/try-poll.rs:15:22: 15:57
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:15:56: 15:57
                                         // + literal: Const { ty: fn(Result<Infallible, E>) -> Result<(), E> {<Result<(), E> as FromResidual<Result<Infallible, E>>>::from_residual}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = discriminant(_13);         // scope 6 at ui/try-trait/try-poll.rs:18:30: 18:72
        switchInt(move _15) -> [0: bb10, 1: bb12, otherwise: bb11]; // scope 6 at ui/try-trait/try-poll.rs:18:30: 18:72
    }

    bb10: {
        _18 = move ((_13 as Continue).0: std::task::Poll<std::option::Option<K>>); // scope 6 at ui/try-trait/try-poll.rs:18:30: 18:72
        _0 = const Result::<(), E>::Ok(()); // scope 11 at ui/try-trait/try-poll.rs:20:5: 20:11
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:20:5: 20:11
                                         // + literal: Const { ty: Result<(), E>, val: Value(Scalar(0x00)) }
        goto -> bb13;                    // scope 0 at ui/try-trait/try-poll.rs:21:2: 21:2
    }

    bb11: {
        unreachable;                     // scope 6 at ui/try-trait/try-poll.rs:18:30: 18:72
    }

    bb12: {
        _0 = <Result<(), E> as FromResidual<Result<Infallible, E>>>::from_residual(move _17) -> bb13; // scope 13 at ui/try-trait/try-poll.rs:18:30: 18:72
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:18:71: 18:72
                                         // + literal: Const { ty: fn(Result<Infallible, E>) -> Result<(), E> {<Result<(), E> as FromResidual<Result<Infallible, E>>>::from_residual}, val: Value(<ZST>) }
    }

    bb13: {
        return;                          // scope 0 at ui/try-trait/try-poll.rs:21:2: 21:2
    }
}

fn as_poll_result() -> Poll<Result<(), E>> {
    let mut _0: std::task::Poll<std::result::Result<(), E>>; // return place in scope 0 at ui/try-trait/try-poll.rs:23:24: 23:43
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, K>; // in scope 0 at ui/try-trait/try-poll.rs:25:13: 25:27
    let mut _2: std::result::Result<K, E>; // in scope 0 at ui/try-trait/try-poll.rs:25:13: 25:26
    let mut _3: isize;                   // in scope 0 at ui/try-trait/try-poll.rs:25:26: 25:27
    let _4: std::result::Result<std::convert::Infallible, E>; // in scope 0 at ui/try-trait/try-poll.rs:25:26: 25:27
    let mut _5: std::result::Result<std::convert::Infallible, E>; // in scope 0 at ui/try-trait/try-poll.rs:25:26: 25:27
    let _6: K;                           // in scope 0 at ui/try-trait/try-poll.rs:25:13: 25:27
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, std::task::Poll<K>>; // in scope 0 at ui/try-trait/try-poll.rs:28:22: 28:57
    let mut _8: std::task::Poll<std::result::Result<K, E>>; // in scope 0 at ui/try-trait/try-poll.rs:28:22: 28:56
    let mut _9: isize;                   // in scope 0 at ui/try-trait/try-poll.rs:28:56: 28:57
    let mut _11: std::result::Result<std::convert::Infallible, E>; // in scope 0 at ui/try-trait/try-poll.rs:28:56: 28:57
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, std::task::Poll<std::option::Option<K>>>; // in scope 0 at ui/try-trait/try-poll.rs:31:30: 31:72
    let mut _14: std::task::Poll<std::option::Option<std::result::Result<K, E>>>; // in scope 0 at ui/try-trait/try-poll.rs:31:30: 31:71
    let mut _15: isize;                  // in scope 0 at ui/try-trait/try-poll.rs:31:71: 31:72
    let mut _17: std::result::Result<std::convert::Infallible, E>; // in scope 0 at ui/try-trait/try-poll.rs:31:71: 31:72
    scope 1 {
        let _10: std::result::Result<std::convert::Infallible, E>; // in scope 1 at ui/try-trait/try-poll.rs:28:56: 28:57
        let _12: std::task::Poll<K>;     // in scope 1 at ui/try-trait/try-poll.rs:28:22: 28:57
        scope 6 {
            let _16: std::result::Result<std::convert::Infallible, E>; // in scope 6 at ui/try-trait/try-poll.rs:31:71: 31:72
            let _18: std::task::Poll<std::option::Option<K>>; // in scope 6 at ui/try-trait/try-poll.rs:31:30: 31:72
            scope 11 {
            }
            scope 12 {
                debug residual => _16;   // in scope 12 at ui/try-trait/try-poll.rs:31:71: 31:72
                scope 13 {
                }
            }
            scope 14 {
                debug val => _18;        // in scope 14 at ui/try-trait/try-poll.rs:31:30: 31:72
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _10;       // in scope 7 at ui/try-trait/try-poll.rs:28:56: 28:57
            scope 8 {
            }
        }
        scope 9 {
            debug val => _12;            // in scope 9 at ui/try-trait/try-poll.rs:28:22: 28:57
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _4;            // in scope 2 at ui/try-trait/try-poll.rs:25:26: 25:27
        scope 3 {
        }
    }
    scope 4 {
        debug val => _6;                 // in scope 4 at ui/try-trait/try-poll.rs:25:13: 25:27
        scope 5 {
        }
    }

    bb0: {
        _2 = const Result::<K, E>::Ok(K); // scope 0 at ui/try-trait/try-poll.rs:25:13: 25:26
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:25:13: 25:26
                                         // + literal: Const { ty: Result<K, E>, val: Value(Scalar(0x00)) }
        _1 = <Result<K, E> as Try>::branch(move _2) -> bb1; // scope 0 at ui/try-trait/try-poll.rs:25:13: 25:27
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:25:13: 25:27
                                         // + literal: Const { ty: fn(Result<K, E>) -> ControlFlow<<Result<K, E> as Try>::Residual, <Result<K, E> as Try>::Output> {<Result<K, E> as Try>::branch}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = discriminant(_1);           // scope 0 at ui/try-trait/try-poll.rs:25:13: 25:27
        switchInt(move _3) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at ui/try-trait/try-poll.rs:25:13: 25:27
    }

    bb2: {
        _8 = const Poll::<Result<K, E>>::Ready(Result::<K, E>::Ok(K)); // scope 1 at ui/try-trait/try-poll.rs:28:22: 28:56
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:28:22: 28:56
                                         // + literal: Const { ty: Poll<Result<K, E>>, val: Value(Scalar(0x00)) }
        _7 = <Poll<Result<K, E>> as Try>::branch(move _8) -> bb5; // scope 1 at ui/try-trait/try-poll.rs:28:22: 28:57
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:28:22: 28:57
                                         // + literal: Const { ty: fn(Poll<Result<K, E>>) -> ControlFlow<<Poll<Result<K, E>> as Try>::Residual, <Poll<Result<K, E>> as Try>::Output> {<Poll<Result<K, E>> as Try>::branch}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at ui/try-trait/try-poll.rs:25:13: 25:27
    }

    bb4: {
        _0 = <Poll<Result<(), E>> as FromResidual<Result<Infallible, E>>>::from_residual(move _5) -> bb13; // scope 3 at ui/try-trait/try-poll.rs:25:13: 25:27
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:25:26: 25:27
                                         // + literal: Const { ty: fn(Result<Infallible, E>) -> Poll<Result<(), E>> {<Poll<Result<(), E>> as FromResidual<Result<Infallible, E>>>::from_residual}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = discriminant(_7);           // scope 1 at ui/try-trait/try-poll.rs:28:22: 28:57
        switchInt(move _9) -> [0: bb6, 1: bb8, otherwise: bb7]; // scope 1 at ui/try-trait/try-poll.rs:28:22: 28:57
    }

    bb6: {
        _12 = move ((_7 as Continue).0: std::task::Poll<K>); // scope 1 at ui/try-trait/try-poll.rs:28:22: 28:57
        _14 = const Poll::<Option<Result<K, E>>>::Ready(Option::<Result<K, E>>::None); // scope 6 at ui/try-trait/try-poll.rs:31:30: 31:71
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:31:30: 31:71
                                         // + literal: Const { ty: Poll<Option<Result<K, E>>>, val: Value(Scalar(0x02)) }
        _13 = <Poll<Option<Result<K, E>>> as Try>::branch(move _14) -> bb9; // scope 6 at ui/try-trait/try-poll.rs:31:30: 31:72
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:31:30: 31:72
                                         // + literal: Const { ty: fn(Poll<Option<Result<K, E>>>) -> ControlFlow<<Poll<Option<Result<K, E>>> as Try>::Residual, <Poll<Option<Result<K, E>>> as Try>::Output> {<Poll<Option<Result<K, E>>> as Try>::branch}, val: Value(<ZST>) }
    }

    bb7: {
        unreachable;                     // scope 1 at ui/try-trait/try-poll.rs:28:22: 28:57
    }

    bb8: {
        _0 = <Poll<Result<(), E>> as FromResidual<Result<Infallible, E>>>::from_residual(move _11) -> bb13; // scope 8 at ui/try-trait/try-poll.rs:28:22: 28:57
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:28:56: 28:57
                                         // + literal: Const { ty: fn(Result<Infallible, E>) -> Poll<Result<(), E>> {<Poll<Result<(), E>> as FromResidual<Result<Infallible, E>>>::from_residual}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = discriminant(_13);         // scope 6 at ui/try-trait/try-poll.rs:31:30: 31:72
        switchInt(move _15) -> [0: bb10, 1: bb12, otherwise: bb11]; // scope 6 at ui/try-trait/try-poll.rs:31:30: 31:72
    }

    bb10: {
        _18 = move ((_13 as Continue).0: std::task::Poll<std::option::Option<K>>); // scope 6 at ui/try-trait/try-poll.rs:31:30: 31:72
        _0 = const Poll::<Result<(), E>>::Ready(Result::<(), E>::Ok(())); // scope 11 at ui/try-trait/try-poll.rs:33:5: 33:24
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:33:5: 33:24
                                         // + literal: Const { ty: Poll<Result<(), E>>, val: Value(Scalar(0x00)) }
        goto -> bb13;                    // scope 0 at ui/try-trait/try-poll.rs:34:2: 34:2
    }

    bb11: {
        unreachable;                     // scope 6 at ui/try-trait/try-poll.rs:31:30: 31:72
    }

    bb12: {
        _0 = <Poll<Result<(), E>> as FromResidual<Result<Infallible, E>>>::from_residual(move _17) -> bb13; // scope 13 at ui/try-trait/try-poll.rs:31:30: 31:72
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:31:71: 31:72
                                         // + literal: Const { ty: fn(Result<Infallible, E>) -> Poll<Result<(), E>> {<Poll<Result<(), E>> as FromResidual<Result<Infallible, E>>>::from_residual}, val: Value(<ZST>) }
    }

    bb13: {
        return;                          // scope 0 at ui/try-trait/try-poll.rs:34:2: 34:2
    }
}

fn as_poll_option_result() -> Poll<Option<Result<(), E>>> {
    let mut _0: std::task::Poll<std::option::Option<std::result::Result<(), E>>>; // return place in scope 0 at ui/try-trait/try-poll.rs:36:31: 36:58
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, K>; // in scope 0 at ui/try-trait/try-poll.rs:38:13: 38:27
    let mut _2: std::result::Result<K, E>; // in scope 0 at ui/try-trait/try-poll.rs:38:13: 38:26
    let mut _3: isize;                   // in scope 0 at ui/try-trait/try-poll.rs:38:26: 38:27
    let _4: std::result::Result<std::convert::Infallible, E>; // in scope 0 at ui/try-trait/try-poll.rs:38:26: 38:27
    let mut _5: std::result::Result<std::convert::Infallible, E>; // in scope 0 at ui/try-trait/try-poll.rs:38:26: 38:27
    let _6: K;                           // in scope 0 at ui/try-trait/try-poll.rs:38:13: 38:27
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, std::task::Poll<K>>; // in scope 0 at ui/try-trait/try-poll.rs:41:22: 41:57
    let mut _8: std::task::Poll<std::result::Result<K, E>>; // in scope 0 at ui/try-trait/try-poll.rs:41:22: 41:56
    let mut _9: isize;                   // in scope 0 at ui/try-trait/try-poll.rs:41:56: 41:57
    let mut _11: std::result::Result<std::convert::Infallible, E>; // in scope 0 at ui/try-trait/try-poll.rs:41:56: 41:57
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E>, std::task::Poll<std::option::Option<K>>>; // in scope 0 at ui/try-trait/try-poll.rs:44:30: 44:72
    let mut _14: std::task::Poll<std::option::Option<std::result::Result<K, E>>>; // in scope 0 at ui/try-trait/try-poll.rs:44:30: 44:71
    let mut _15: isize;                  // in scope 0 at ui/try-trait/try-poll.rs:44:71: 44:72
    let mut _17: std::result::Result<std::convert::Infallible, E>; // in scope 0 at ui/try-trait/try-poll.rs:44:71: 44:72
    scope 1 {
        let _10: std::result::Result<std::convert::Infallible, E>; // in scope 1 at ui/try-trait/try-poll.rs:41:56: 41:57
        let _12: std::task::Poll<K>;     // in scope 1 at ui/try-trait/try-poll.rs:41:22: 41:57
        scope 6 {
            let _16: std::result::Result<std::convert::Infallible, E>; // in scope 6 at ui/try-trait/try-poll.rs:44:71: 44:72
            let _18: std::task::Poll<std::option::Option<K>>; // in scope 6 at ui/try-trait/try-poll.rs:44:30: 44:72
            scope 11 {
            }
            scope 12 {
                debug residual => _16;   // in scope 12 at ui/try-trait/try-poll.rs:44:71: 44:72
                scope 13 {
                }
            }
            scope 14 {
                debug val => _18;        // in scope 14 at ui/try-trait/try-poll.rs:44:30: 44:72
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _10;       // in scope 7 at ui/try-trait/try-poll.rs:41:56: 41:57
            scope 8 {
            }
        }
        scope 9 {
            debug val => _12;            // in scope 9 at ui/try-trait/try-poll.rs:41:22: 41:57
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _4;            // in scope 2 at ui/try-trait/try-poll.rs:38:26: 38:27
        scope 3 {
        }
    }
    scope 4 {
        debug val => _6;                 // in scope 4 at ui/try-trait/try-poll.rs:38:13: 38:27
        scope 5 {
        }
    }

    bb0: {
        _2 = const Result::<K, E>::Ok(K); // scope 0 at ui/try-trait/try-poll.rs:38:13: 38:26
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:38:13: 38:26
                                         // + literal: Const { ty: Result<K, E>, val: Value(Scalar(0x00)) }
        _1 = <Result<K, E> as Try>::branch(move _2) -> bb1; // scope 0 at ui/try-trait/try-poll.rs:38:13: 38:27
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:38:13: 38:27
                                         // + literal: Const { ty: fn(Result<K, E>) -> ControlFlow<<Result<K, E> as Try>::Residual, <Result<K, E> as Try>::Output> {<Result<K, E> as Try>::branch}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = discriminant(_1);           // scope 0 at ui/try-trait/try-poll.rs:38:13: 38:27
        switchInt(move _3) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at ui/try-trait/try-poll.rs:38:13: 38:27
    }

    bb2: {
        _8 = const Poll::<Result<K, E>>::Ready(Result::<K, E>::Ok(K)); // scope 1 at ui/try-trait/try-poll.rs:41:22: 41:56
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:41:22: 41:56
                                         // + literal: Const { ty: Poll<Result<K, E>>, val: Value(Scalar(0x00)) }
        _7 = <Poll<Result<K, E>> as Try>::branch(move _8) -> bb5; // scope 1 at ui/try-trait/try-poll.rs:41:22: 41:57
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:41:22: 41:57
                                         // + literal: Const { ty: fn(Poll<Result<K, E>>) -> ControlFlow<<Poll<Result<K, E>> as Try>::Residual, <Poll<Result<K, E>> as Try>::Output> {<Poll<Result<K, E>> as Try>::branch}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at ui/try-trait/try-poll.rs:38:13: 38:27
    }

    bb4: {
        _0 = <Poll<Option<Result<(), E>>> as FromResidual<Result<Infallible, E>>>::from_residual(move _5) -> bb13; // scope 3 at ui/try-trait/try-poll.rs:38:13: 38:27
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:38:26: 38:27
                                         // + literal: Const { ty: fn(Result<Infallible, E>) -> Poll<Option<Result<(), E>>> {<Poll<Option<Result<(), E>>> as FromResidual<Result<Infallible, E>>>::from_residual}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = discriminant(_7);           // scope 1 at ui/try-trait/try-poll.rs:41:22: 41:57
        switchInt(move _9) -> [0: bb6, 1: bb8, otherwise: bb7]; // scope 1 at ui/try-trait/try-poll.rs:41:22: 41:57
    }

    bb6: {
        _12 = move ((_7 as Continue).0: std::task::Poll<K>); // scope 1 at ui/try-trait/try-poll.rs:41:22: 41:57
        _14 = const Poll::<Option<Result<K, E>>>::Ready(Option::<Result<K, E>>::None); // scope 6 at ui/try-trait/try-poll.rs:44:30: 44:71
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:44:30: 44:71
                                         // + literal: Const { ty: Poll<Option<Result<K, E>>>, val: Value(Scalar(0x02)) }
        _13 = <Poll<Option<Result<K, E>>> as Try>::branch(move _14) -> bb9; // scope 6 at ui/try-trait/try-poll.rs:44:30: 44:72
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:44:30: 44:72
                                         // + literal: Const { ty: fn(Poll<Option<Result<K, E>>>) -> ControlFlow<<Poll<Option<Result<K, E>>> as Try>::Residual, <Poll<Option<Result<K, E>>> as Try>::Output> {<Poll<Option<Result<K, E>>> as Try>::branch}, val: Value(<ZST>) }
    }

    bb7: {
        unreachable;                     // scope 1 at ui/try-trait/try-poll.rs:41:22: 41:57
    }

    bb8: {
        _0 = <Poll<Option<Result<(), E>>> as FromResidual<Result<Infallible, E>>>::from_residual(move _11) -> bb13; // scope 8 at ui/try-trait/try-poll.rs:41:22: 41:57
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:41:56: 41:57
                                         // + literal: Const { ty: fn(Result<Infallible, E>) -> Poll<Option<Result<(), E>>> {<Poll<Option<Result<(), E>>> as FromResidual<Result<Infallible, E>>>::from_residual}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = discriminant(_13);         // scope 6 at ui/try-trait/try-poll.rs:44:30: 44:72
        switchInt(move _15) -> [0: bb10, 1: bb12, otherwise: bb11]; // scope 6 at ui/try-trait/try-poll.rs:44:30: 44:72
    }

    bb10: {
        _18 = move ((_13 as Continue).0: std::task::Poll<std::option::Option<K>>); // scope 6 at ui/try-trait/try-poll.rs:44:30: 44:72
        _0 = const Poll::<Option<Result<(), E>>>::Ready(Option::<Result<(), E>>::Some(Result::<(), E>::Ok(()))); // scope 11 at ui/try-trait/try-poll.rs:46:5: 46:30
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:46:5: 46:30
                                         // + literal: Const { ty: Poll<Option<Result<(), E>>>, val: Value(Scalar(0x00)) }
        goto -> bb13;                    // scope 0 at ui/try-trait/try-poll.rs:47:2: 47:2
    }

    bb11: {
        unreachable;                     // scope 6 at ui/try-trait/try-poll.rs:44:30: 44:72
    }

    bb12: {
        _0 = <Poll<Option<Result<(), E>>> as FromResidual<Result<Infallible, E>>>::from_residual(move _17) -> bb13; // scope 13 at ui/try-trait/try-poll.rs:44:30: 44:72
                                         // mir::Constant
                                         // + span: ui/try-trait/try-poll.rs:44:71: 44:72
                                         // + literal: Const { ty: fn(Result<Infallible, E>) -> Poll<Option<Result<(), E>>> {<Poll<Option<Result<(), E>>> as FromResidual<Result<Infallible, E>>>::from_residual}, val: Value(<ZST>) }
    }

    bb13: {
        return;                          // scope 0 at ui/try-trait/try-poll.rs:47:2: 47:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/try-trait/try-poll.rs:49:11: 49:11

    bb0: {
        return;                          // scope 0 at ui/try-trait/try-poll.rs:50:2: 50:2
    }
}
