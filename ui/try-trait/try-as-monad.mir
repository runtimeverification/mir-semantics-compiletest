// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn monad_unit(_1: <T as Try>::Output) -> T {
    debug x => _1;
    let mut _0: T;

    bb0: {
        _0 = <T as Try>::from_output(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn monad_bind(_1: T1, _2: impl FnOnce(<T1 as Try>::Output) -> T2) -> T2 {
    debug mx => _1;
    debug f => _2;
    let mut _0: T2;
    let _3: <T1 as std::ops::Try>::Output;
    let mut _4: std::ops::ControlFlow<R, <T1 as std::ops::Try>::Output>;
    let mut _5: isize;
    let _6: R;
    let _7: <T1 as std::ops::Try>::Output;
    let mut _8: impl FnOnce(<T1 as Try>::Output) -> T2;
    let mut _9: (<T1 as std::ops::Try>::Output,);
    let mut _10: <T1 as std::ops::Try>::Output;
    let mut _11: bool;
    let mut _12: bool;
    scope 1 {
        debug x => _3;
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _12 = const false;
        _11 = const false;
        _12 = const true;
        _4 = <T1 as Try>::branch(move _1) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        _5 = discriminant(_4);
        switchInt(move _5) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_4 as Continue).0: <T1 as std::ops::Try>::Output);
        _11 = const true;
        _3 = move _7;
        _12 = const false;
        _8 = move _2;
        _11 = const false;
        _10 = move _3;
        _9 = (move _10,);
        _0 = <impl FnOnce(<T1 as Try>::Output) -> T2 as FnOnce<(<T1 as Try>::Output,)>>::call_once(move _8, move _9) -> [return: bb6, unwind: bb10];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = move ((_4 as Break).0: R);
        _0 = <T2 as FromResidual<R>>::from_residual(move _6) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        _11 = const false;
        drop(_2) -> [return: bb7, unwind continue];
    }

    bb6: {
        _11 = const false;
        goto -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate];
    }

    bb10 (cleanup): {
        switchInt(_11) -> [0: bb12, otherwise: bb9];
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate];
    }

    bb12 (cleanup): {
        switchInt(_12) -> [0: bb8, otherwise: bb11];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::option::Option<i32>;
    let mut _3: std::option::Option<i32>;
    let mut _5: std::option::Option<i32>;
    let mut _6: (&std::option::Option<i32>, &std::option::Option<i32>);
    let mut _7: &std::option::Option<i32>;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug mx => _1;
        let _2: std::option::Option<i32>;
        scope 2 {
            debug my => _2;
            let _4: std::option::Option<i32>;
            scope 3 {
                debug mz => _4;
                let _8: &std::option::Option<i32>;
                let _9: &std::option::Option<i32>;
                let mut _15: &std::option::Option<i32>;
                scope 4 {
                    debug left_val => _8;
                    debug right_val => _9;
                    let _12: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _12;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = monad_unit::<Option<i32>>(const 1_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = _1;
        _2 = monad_bind::<Option<i32>, Option<i32>, Option<Infallible>, [closure@ui/try-trait/try-as-monad.rs:21:29: 21:32]>(move _3, const ZeroSized: [closure@ui/try-trait/try-as-monad.rs:21:29: 21:32]) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = _2;
        _4 = monad_bind::<Option<i32>, Option<i32>, Option<Infallible>, [closure@ui/try-trait/try-as-monad.rs:22:29: 22:32]>(move _5, const ZeroSized: [closure@ui/try-trait/try-as-monad.rs:22:29: 22:32]) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = &_4;
        _15 = const _;
        _6 = (move _7, _15);
        _8 = (_6.0: &std::option::Option<i32>);
        _9 = (_6.1: &std::option::Option<i32>);
        _11 = <Option<i32> as PartialEq>::eq(_8, _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _12, _8, _9, move _14) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>;
    let mut _1: std::option::Option<i32>;

    bb0: {
        _1 = Option::<i32>::Some(const -2_i32);
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/try-trait/try-as-monad.rs:21:29: 21:32], _2: i32) -> Option<i32> {
    debug x => _2;
    let mut _0: std::option::Option<i32>;
    let mut _3: i32;

    bb0: {
        _3 = Add(_2, const 1_i32);
        _0 = Option::<i32>::Some(move _3);
        return;
    }
}

fn main::{closure#1}(_1: [closure@ui/try-trait/try-as-monad.rs:22:29: 22:32], _2: i32) -> Option<i32> {
    debug x => _2;
    let mut _0: std::option::Option<i32>;
    let mut _3: i32;

    bb0: {
        _3 = Neg(_2);
        _0 = Option::<i32>::Some(move _3);
        return;
    }
}
