// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn monad_unit(_1: <T as Try>::Output) -> T {
    debug x => _1;                       // in scope 0 at ui/try-trait/try-as-monad.rs:7:23: 7:24
    let mut _0: T;                       // return place in scope 0 at ui/try-trait/try-as-monad.rs:7:49: 7:50
    let mut _2: <T as std::ops::Try>::Output; // in scope 0 at ui/try-trait/try-as-monad.rs:8:20: 8:21

    bb0: {
        _2 = move _1;                    // scope 0 at ui/try-trait/try-as-monad.rs:8:20: 8:21
        _0 = <T as Try>::from_output(move _2) -> bb1; // scope 0 at ui/try-trait/try-as-monad.rs:8:5: 8:22
                                         // mir::Constant
                                         // + span: ui/try-trait/try-as-monad.rs:8:5: 8:19
                                         // + literal: Const { ty: fn(<T as Try>::Output) -> T {<T as Try>::from_output}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/try-trait/try-as-monad.rs:9:2: 9:2
    }
}

fn monad_bind(_1: T1, _2: impl FnOnce(<T1 as Try>::Output) -> T2) -> T2 {
    debug mx => _1;                      // in scope 0 at ui/try-trait/try-as-monad.rs:12:5: 12:7
    debug f => _2;                       // in scope 0 at ui/try-trait/try-as-monad.rs:13:5: 13:6
    let mut _0: T2;                      // return place in scope 0 at ui/try-trait/try-as-monad.rs:14:4: 14:6
    let _3: <T1 as std::ops::Try>::Output; // in scope 0 at ui/try-trait/try-as-monad.rs:15:9: 15:10
    let mut _4: std::ops::ControlFlow<R, <T1 as std::ops::Try>::Output>; // in scope 0 at ui/try-trait/try-as-monad.rs:15:13: 15:16
    let mut _5: T1;                      // in scope 0 at ui/try-trait/try-as-monad.rs:15:13: 15:15
    let mut _6: isize;                   // in scope 0 at ui/try-trait/try-as-monad.rs:15:15: 15:16
    let _7: R;                           // in scope 0 at ui/try-trait/try-as-monad.rs:15:15: 15:16
    let mut _8: R;                       // in scope 0 at ui/try-trait/try-as-monad.rs:15:15: 15:16
    let _9: <T1 as std::ops::Try>::Output; // in scope 0 at ui/try-trait/try-as-monad.rs:15:13: 15:16
    let mut _10: impl FnOnce(<T1 as Try>::Output) -> T2; // in scope 0 at ui/try-trait/try-as-monad.rs:16:5: 16:6
    let mut _11: (<T1 as std::ops::Try>::Output,); // in scope 0 at ui/try-trait/try-as-monad.rs:16:5: 16:9
    let mut _12: <T1 as std::ops::Try>::Output; // in scope 0 at ui/try-trait/try-as-monad.rs:16:7: 16:8
    let mut _13: bool;                   // in scope 0 at ui/try-trait/try-as-monad.rs:17:1: 17:2
    let mut _14: bool;                   // in scope 0 at ui/try-trait/try-as-monad.rs:17:1: 17:2
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/try-trait/try-as-monad.rs:15:9: 15:10
    }
    scope 2 {
        debug residual => _7;            // in scope 2 at ui/try-trait/try-as-monad.rs:15:15: 15:16
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;                 // in scope 4 at ui/try-trait/try-as-monad.rs:15:13: 15:16
        scope 5 {
        }
    }

    bb0: {
        _14 = const false;               // scope 0 at ui/try-trait/try-as-monad.rs:15:9: 15:10
        _13 = const false;               // scope 0 at ui/try-trait/try-as-monad.rs:15:9: 15:10
        _14 = const true;                // scope 0 at ui/try-trait/try-as-monad.rs:15:9: 15:10
        _5 = move _1;                    // scope 0 at ui/try-trait/try-as-monad.rs:15:13: 15:15
        _4 = <T1 as Try>::branch(move _5) -> [return: bb1, unwind: bb12]; // scope 0 at ui/try-trait/try-as-monad.rs:15:13: 15:16
                                         // mir::Constant
                                         // + span: ui/try-trait/try-as-monad.rs:15:13: 15:16
                                         // + literal: Const { ty: fn(T1) -> ControlFlow<<T1 as Try>::Residual, <T1 as Try>::Output> {<T1 as Try>::branch}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = discriminant(_4);           // scope 0 at ui/try-trait/try-as-monad.rs:15:13: 15:16
        switchInt(move _6) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at ui/try-trait/try-as-monad.rs:15:13: 15:16
    }

    bb2: {
        _9 = move ((_4 as Continue).0: <T1 as std::ops::Try>::Output); // scope 0 at ui/try-trait/try-as-monad.rs:15:13: 15:16
        _13 = const true;                // scope 5 at ui/try-trait/try-as-monad.rs:15:13: 15:16
        _3 = move _9;                    // scope 5 at ui/try-trait/try-as-monad.rs:15:13: 15:16
        _14 = const false;               // scope 1 at ui/try-trait/try-as-monad.rs:16:5: 16:6
        _10 = move _2;                   // scope 1 at ui/try-trait/try-as-monad.rs:16:5: 16:6
        _13 = const false;               // scope 1 at ui/try-trait/try-as-monad.rs:16:7: 16:8
        _12 = move _3;                   // scope 1 at ui/try-trait/try-as-monad.rs:16:7: 16:8
        _11 = (move _12,);               // scope 1 at ui/try-trait/try-as-monad.rs:16:5: 16:9
        _0 = <impl FnOnce(<T1 as Try>::Output) -> T2 as FnOnce<(<T1 as Try>::Output,)>>::call_once(move _10, move _11) -> [return: bb6, unwind: bb10]; // scope 1 at ui/try-trait/try-as-monad.rs:16:5: 16:9
                                         // mir::Constant
                                         // + span: ui/try-trait/try-as-monad.rs:16:5: 16:6
                                         // + literal: Const { ty: extern "rust-call" fn(impl FnOnce(<T1 as Try>::Output) -> T2, (<T1 as Try>::Output,)) -> <impl FnOnce(<T1 as Try>::Output) -> T2 as FnOnce<(<T1 as Try>::Output,)>>::Output {<impl FnOnce(<T1 as Try>::Output) -> T2 as FnOnce<(<T1 as Try>::Output,)>>::call_once}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at ui/try-trait/try-as-monad.rs:15:13: 15:16
    }

    bb4: {
        _7 = move ((_4 as Break).0: R);  // scope 0 at ui/try-trait/try-as-monad.rs:15:15: 15:16
        _8 = move _7;                    // scope 3 at ui/try-trait/try-as-monad.rs:15:15: 15:16
        _0 = <T2 as FromResidual<R>>::from_residual(move _8) -> [return: bb5, unwind: bb12]; // scope 3 at ui/try-trait/try-as-monad.rs:15:13: 15:16
                                         // mir::Constant
                                         // + span: ui/try-trait/try-as-monad.rs:15:15: 15:16
                                         // + literal: Const { ty: fn(R) -> T2 {<T2 as FromResidual<R>>::from_residual}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = const false;               // scope 0 at ui/try-trait/try-as-monad.rs:17:1: 17:2
        drop(_2) -> bb7;                 // scope 0 at ui/try-trait/try-as-monad.rs:17:1: 17:2
    }

    bb6: {
        _13 = const false;               // scope 0 at ui/try-trait/try-as-monad.rs:17:1: 17:2
        goto -> bb7;                     // scope 0 at ui/try-trait/try-as-monad.rs:17:1: 17:2
    }

    bb7: {
        return;                          // scope 0 at ui/try-trait/try-as-monad.rs:17:2: 17:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/try-trait/try-as-monad.rs:11:1: 17:2
    }

    bb9 (cleanup): {
        drop(_3) -> bb12;                // scope 0 at ui/try-trait/try-as-monad.rs:17:1: 17:2
    }

    bb10 (cleanup): {
        switchInt(_13) -> [0: bb12, otherwise: bb9]; // scope 0 at ui/try-trait/try-as-monad.rs:17:1: 17:2
    }

    bb11 (cleanup): {
        drop(_2) -> bb8;                 // scope 0 at ui/try-trait/try-as-monad.rs:17:1: 17:2
    }

    bb12 (cleanup): {
        switchInt(_14) -> [0: bb8, otherwise: bb11]; // scope 0 at ui/try-trait/try-as-monad.rs:17:1: 17:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/try-trait/try-as-monad.rs:19:11: 19:11
    let _1: std::option::Option<i32>;    // in scope 0 at ui/try-trait/try-as-monad.rs:20:9: 20:11
    let mut _3: std::option::Option<i32>; // in scope 0 at ui/try-trait/try-as-monad.rs:21:25: 21:27
    let mut _4: [closure@ui/try-trait/try-as-monad.rs:21:29: 21:32]; // in scope 0 at ui/try-trait/try-as-monad.rs:21:29: 21:44
    let mut _6: std::option::Option<i32>; // in scope 0 at ui/try-trait/try-as-monad.rs:22:25: 22:27
    let mut _7: [closure@ui/try-trait/try-as-monad.rs:22:29: 22:32]; // in scope 0 at ui/try-trait/try-as-monad.rs:22:29: 22:41
    let mut _8: (&std::option::Option<i32>, &std::option::Option<i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _10: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &std::option::Option<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &std::option::Option<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug mx => _1;                  // in scope 1 at ui/try-trait/try-as-monad.rs:20:9: 20:11
        let _2: std::option::Option<i32>; // in scope 1 at ui/try-trait/try-as-monad.rs:21:9: 21:11
        scope 2 {
            debug my => _2;              // in scope 2 at ui/try-trait/try-as-monad.rs:21:9: 21:11
            let _5: std::option::Option<i32>; // in scope 2 at ui/try-trait/try-as-monad.rs:22:9: 22:11
            scope 3 {
                debug mz => _5;          // in scope 3 at ui/try-trait/try-as-monad.rs:22:9: 22:11
                let _11: &std::option::Option<i32>; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _12: &std::option::Option<i32>; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _25: &std::option::Option<i32>; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 4 {
                    debug left_val => _11; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _12; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _17: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _17; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _1 = monad_unit::<Option<i32>>(const 1_i32) -> bb1; // scope 0 at ui/try-trait/try-as-monad.rs:20:27: 20:40
                                         // mir::Constant
                                         // + span: ui/try-trait/try-as-monad.rs:20:27: 20:37
                                         // + literal: Const { ty: fn(<Option<i32> as Try>::Output) -> Option<i32> {monad_unit::<Option<i32>>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _1;                         // scope 1 at ui/try-trait/try-as-monad.rs:21:25: 21:27
        _2 = monad_bind::<Option<i32>, Option<i32>, Option<Infallible>, [closure@ui/try-trait/try-as-monad.rs:21:29: 21:32]>(move _3, move _4) -> bb2; // scope 1 at ui/try-trait/try-as-monad.rs:21:14: 21:45
                                         // mir::Constant
                                         // + span: ui/try-trait/try-as-monad.rs:21:14: 21:24
                                         // + literal: Const { ty: fn(Option<i32>, [closure@ui/try-trait/try-as-monad.rs:21:29: 21:32]) -> Option<i32> {monad_bind::<Option<i32>, Option<i32>, Option<Infallible>, [closure@ui/try-trait/try-as-monad.rs:21:29: 21:32]>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = _2;                         // scope 2 at ui/try-trait/try-as-monad.rs:22:25: 22:27
        _5 = monad_bind::<Option<i32>, Option<i32>, Option<Infallible>, [closure@ui/try-trait/try-as-monad.rs:22:29: 22:32]>(move _6, move _7) -> bb3; // scope 2 at ui/try-trait/try-as-monad.rs:22:14: 22:42
                                         // mir::Constant
                                         // + span: ui/try-trait/try-as-monad.rs:22:14: 22:24
                                         // + literal: Const { ty: fn(Option<i32>, [closure@ui/try-trait/try-as-monad.rs:22:29: 22:32]) -> Option<i32> {monad_bind::<Option<i32>, Option<i32>, Option<Infallible>, [closure@ui/try-trait/try-as-monad.rs:22:29: 22:32]>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &_5;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _25 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<i32>, val: Unevaluated(main, [], Some(promoted[0])) }
        _10 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _10);        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_8.0: &std::option::Option<i32>); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_8.1: &std::option::Option<i32>); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = <Option<i32> as PartialEq>::eq(move _15, move _16) -> bb4; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> bool {<Option<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = Not(move _14);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb6, otherwise: bb5]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _17 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _19, move _20, move _22, move _24); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<i32>, &'b Option<i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<i32>, Option<i32>>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/try-trait/try-as-monad.rs:24:2: 24:2
    }
}

promoted[0] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<i32>; // in scope 0 at ui/try-trait/try-as-monad.rs:23:20: 23:28

    bb0: {
        _1 = Option::<i32>::Some(const -2_i32); // scope 0 at ui/try-trait/try-as-monad.rs:23:20: 23:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: [closure@ui/try-trait/try-as-monad.rs:21:29: 21:32], _2: i32) -> Option<i32> {
    debug x => _2;                       // in scope 0 at ui/try-trait/try-as-monad.rs:21:30: 21:31
    let mut _0: std::option::Option<i32>; // return place in scope 0 at ui/try-trait/try-as-monad.rs:21:33: 21:33
    let mut _3: i32;                     // in scope 0 at ui/try-trait/try-as-monad.rs:21:38: 21:43
    let mut _4: i32;                     // in scope 0 at ui/try-trait/try-as-monad.rs:21:38: 21:39
    let mut _5: (i32, bool);             // in scope 0 at ui/try-trait/try-as-monad.rs:21:38: 21:43

    bb0: {
        _4 = _2;                         // scope 0 at ui/try-trait/try-as-monad.rs:21:38: 21:39
        _5 = CheckedAdd(_4, const 1_i32); // scope 0 at ui/try-trait/try-as-monad.rs:21:38: 21:43
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, const 1_i32) -> bb1; // scope 0 at ui/try-trait/try-as-monad.rs:21:38: 21:43
    }

    bb1: {
        _3 = move (_5.0: i32);           // scope 0 at ui/try-trait/try-as-monad.rs:21:38: 21:43
        _0 = Option::<i32>::Some(move _3); // scope 0 at ui/try-trait/try-as-monad.rs:21:33: 21:44
        return;                          // scope 0 at ui/try-trait/try-as-monad.rs:21:44: 21:44
    }
}

fn main::{closure#1}(_1: [closure@ui/try-trait/try-as-monad.rs:22:29: 22:32], _2: i32) -> Option<i32> {
    debug x => _2;                       // in scope 0 at ui/try-trait/try-as-monad.rs:22:30: 22:31
    let mut _0: std::option::Option<i32>; // return place in scope 0 at ui/try-trait/try-as-monad.rs:22:33: 22:33
    let mut _3: i32;                     // in scope 0 at ui/try-trait/try-as-monad.rs:22:38: 22:40
    let mut _4: i32;                     // in scope 0 at ui/try-trait/try-as-monad.rs:22:39: 22:40
    let mut _5: bool;                    // in scope 0 at ui/try-trait/try-as-monad.rs:22:38: 22:40

    bb0: {
        _4 = _2;                         // scope 0 at ui/try-trait/try-as-monad.rs:22:39: 22:40
        _5 = Eq(_4, const i32::MIN);     // scope 0 at ui/try-trait/try-as-monad.rs:22:38: 22:40
        assert(!move _5, "attempt to negate `{}`, which would overflow", _4) -> bb1; // scope 0 at ui/try-trait/try-as-monad.rs:22:38: 22:40
    }

    bb1: {
        _3 = Neg(move _4);               // scope 0 at ui/try-trait/try-as-monad.rs:22:38: 22:40
        _0 = Option::<i32>::Some(move _3); // scope 0 at ui/try-trait/try-as-monad.rs:22:33: 22:41
        return;                          // scope 0 at ui/try-trait/try-as-monad.rs:22:41: 22:41
    }
}
