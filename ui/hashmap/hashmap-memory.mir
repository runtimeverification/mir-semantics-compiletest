// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn map(_1: String, _2: Box<dyn FnMut(String, String)>) -> () {
    debug filename => _1;                // in scope 0 at ui/hashmap/hashmap-memory.rs:14:12: 14:20
    debug emit => _2;                    // in scope 0 at ui/hashmap/hashmap-memory.rs:14:30: 14:38
    let mut _0: ();                      // return place in scope 0 at ui/hashmap/hashmap-memory.rs:14:60: 14:60
    let _3: ();                          // in scope 0 at ui/hashmap/hashmap-memory.rs:15:5: 15:36
    let mut _4: &mut std::boxed::Box<dyn std::ops::FnMut(std::string::String, std::string::String)>; // in scope 0 at ui/hashmap/hashmap-memory.rs:15:5: 15:9
    let mut _5: (std::string::String, std::string::String); // in scope 0 at ui/hashmap/hashmap-memory.rs:15:5: 15:36
    let mut _6: std::string::String;     // in scope 0 at ui/hashmap/hashmap-memory.rs:15:10: 15:18
    let mut _7: std::string::String;     // in scope 0 at ui/hashmap/hashmap-memory.rs:15:20: 15:35
    let mut _8: &str;                    // in scope 0 at ui/hashmap/hashmap-memory.rs:15:20: 15:35
    let _9: &str;                        // in scope 0 at ui/hashmap/hashmap-memory.rs:15:20: 15:23
    let mut _10: bool;                   // in scope 0 at ui/hashmap/hashmap-memory.rs:15:35: 15:36

    bb0: {
        _10 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:15:5: 15:36
        _4 = &mut _2;                    // scope 0 at ui/hashmap/hashmap-memory.rs:15:5: 15:9
        _10 = const true;                // scope 0 at ui/hashmap/hashmap-memory.rs:15:10: 15:18
        _6 = move _1;                    // scope 0 at ui/hashmap/hashmap-memory.rs:15:10: 15:18
        _9 = const "1";                  // scope 0 at ui/hashmap/hashmap-memory.rs:15:20: 15:23
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:15:20: 15:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = _9;                         // scope 0 at ui/hashmap/hashmap-memory.rs:15:20: 15:35
        _7 = <str as ToString>::to_string(move _8) -> [return: bb1, unwind: bb7]; // scope 0 at ui/hashmap/hashmap-memory.rs:15:20: 15:35
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:15:24: 15:33
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:15:5: 15:36
        _5 = (move _6, move _7);         // scope 0 at ui/hashmap/hashmap-memory.rs:15:5: 15:36
        _3 = <Box<dyn FnMut(String, String)> as FnMut<(String, String)>>::call_mut(move _4, move _5) -> [return: bb2, unwind: bb7]; // scope 0 at ui/hashmap/hashmap-memory.rs:15:5: 15:36
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:15:5: 15:9
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut Box<dyn FnMut(String, String)>, (String, String)) -> <Box<dyn FnMut(String, String)> as FnOnce<(String, String)>>::Output {<Box<dyn FnMut(String, String)> as FnMut<(String, String)>>::call_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:15:35: 15:36
        drop(_2) -> bb3;                 // scope 0 at ui/hashmap/hashmap-memory.rs:16:1: 16:2
    }

    bb3: {
        return;                          // scope 0 at ui/hashmap/hashmap-memory.rs:16:2: 16:2
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/hashmap/hashmap-memory.rs:16:1: 16:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/hashmap/hashmap-memory.rs:14:1: 16:2
    }

    bb6 (cleanup): {
        drop(_6) -> bb4;                 // scope 0 at ui/hashmap/hashmap-memory.rs:15:35: 15:36
    }

    bb7 (cleanup): {
        switchInt(_10) -> [0: bb4, otherwise: bb6]; // scope 0 at ui/hashmap/hashmap-memory.rs:15:35: 15:36
    }
}

fn start_mappers(_1: Sender<ctrl_proto>, _2: Vec<String>) -> () {
    debug ctrl => _1;                    // in scope 0 at ui/hashmap/hashmap-memory.rs:30:22: 30:26
    debug inputs => _2;                  // in scope 0 at ui/hashmap/hashmap-memory.rs:30:48: 30:54
    let mut _0: ();                      // return place in scope 0 at ui/hashmap/hashmap-memory.rs:30:69: 30:69
    let mut _3: std::slice::Iter<'_, std::string::String>; // in scope 0 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
    let mut _4: &std::vec::Vec<std::string::String>; // in scope 0 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
    let mut _5: std::slice::Iter<'_, std::string::String>; // in scope 0 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
    let mut _6: std::option::Option<&std::string::String>; // in scope 0 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
    let mut _7: &mut std::slice::Iter<'_, std::string::String>; // in scope 0 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
    let mut _8: &mut std::slice::Iter<'_, std::string::String>; // in scope 0 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
    let mut _9: isize;                   // in scope 0 at ui/hashmap/hashmap-memory.rs:31:9: 35:10
    let mut _12: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>; // in scope 0 at ui/hashmap/hashmap-memory.rs:32:24: 32:36
    let mut _14: &std::string::String;   // in scope 0 at ui/hashmap/hashmap-memory.rs:33:21: 33:30
    let _15: std::thread::JoinHandle<()>; // in scope 0 at ui/hashmap/hashmap-memory.rs:34:13: 34:69
    let mut _16: [closure@ui/hashmap/hashmap-memory.rs:34:27: 34:33]; // in scope 0 at ui/hashmap/hashmap-memory.rs:34:27: 34:67
    let mut _17: bool;                   // in scope 0 at ui/hashmap/hashmap-memory.rs:35:9: 35:10
    scope 1 {
        debug iter => _5;                // in scope 1 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
        let _10: &std::string::String;   // in scope 1 at ui/hashmap/hashmap-memory.rs:31:13: 31:14
        scope 2 {
            debug i => _10;              // in scope 2 at ui/hashmap/hashmap-memory.rs:31:13: 31:14
            let _11: std::sync::mpsc::Sender<map_reduce::ctrl_proto>; // in scope 2 at ui/hashmap/hashmap-memory.rs:32:17: 32:21
            scope 3 {
                debug ctrl => _11;       // in scope 3 at ui/hashmap/hashmap-memory.rs:32:17: 32:21
                let _13: std::string::String; // in scope 3 at ui/hashmap/hashmap-memory.rs:33:17: 33:18
                scope 4 {
                    debug i => _13;      // in scope 4 at ui/hashmap/hashmap-memory.rs:33:17: 33:18
                }
            }
        }
    }

    bb0: {
        _17 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
        _4 = &_2;                        // scope 0 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
        _3 = <&Vec<String> as IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb13]; // scope 0 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:31:18: 31:25
                                         // + literal: Const { ty: fn(&Vec<String>) -> <&Vec<String> as IntoIterator>::IntoIter {<&Vec<String> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _3;                    // scope 0 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
        goto -> bb2;                     // scope 1 at ui/hashmap/hashmap-memory.rs:31:9: 35:10
    }

    bb2: {
        _8 = &mut _5;                    // scope 1 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
        _7 = &mut (*_8);                 // scope 1 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
        _6 = <std::slice::Iter<'_, String> as Iterator>::next(move _7) -> [return: bb3, unwind: bb13]; // scope 1 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:31:18: 31:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, String>) -> Option<<std::slice::Iter<'_, String> as Iterator>::Item> {<std::slice::Iter<'_, String> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = discriminant(_6);           // scope 1 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
        switchInt(move _9) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
    }

    bb4: {
        _10 = ((_6 as Some).0: &std::string::String); // scope 1 at ui/hashmap/hashmap-memory.rs:31:13: 31:14
        _12 = &_1;                       // scope 2 at ui/hashmap/hashmap-memory.rs:32:24: 32:36
        _11 = <Sender<ctrl_proto> as Clone>::clone(move _12) -> [return: bb7, unwind: bb13]; // scope 2 at ui/hashmap/hashmap-memory.rs:32:24: 32:36
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:32:29: 32:34
                                         // + literal: Const { ty: for<'a> fn(&'a Sender<ctrl_proto>) -> Sender<ctrl_proto> {<Sender<ctrl_proto> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at ui/hashmap/hashmap-memory.rs:31:18: 31:25
    }

    bb6: {
        drop(_2) -> [return: bb11, unwind: bb14]; // scope 0 at ui/hashmap/hashmap-memory.rs:36:5: 36:6
    }

    bb7: {
        _17 = const true;                // scope 2 at ui/hashmap/hashmap-memory.rs:32:35: 32:36
        _14 = _10;                       // scope 3 at ui/hashmap/hashmap-memory.rs:33:21: 33:30
        _13 = <String as Clone>::clone(move _14) -> [return: bb8, unwind: bb17]; // scope 3 at ui/hashmap/hashmap-memory.rs:33:21: 33:30
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:33:23: 33:28
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> String {<String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = const false;               // scope 4 at ui/hashmap/hashmap-memory.rs:34:27: 34:67
        _16 = [closure@ui/hashmap/hashmap-memory.rs:34:27: 34:33] { ctrl: move _11, i: move _13 }; // scope 4 at ui/hashmap/hashmap-memory.rs:34:27: 34:67
                                         // closure
                                         // + def_id: DefId(0:22 ~ hashmap_memory[fef3]::map_reduce::start_mappers::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (std::sync::mpsc::Sender<map_reduce::ctrl_proto>, std::string::String),
                                         // ]
        _15 = spawn::<[closure@ui/hashmap/hashmap-memory.rs:34:27: 34:33], ()>(move _16) -> [return: bb9, unwind: bb17]; // scope 4 at ui/hashmap/hashmap-memory.rs:34:13: 34:69
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:34:13: 34:26
                                         // + literal: Const { ty: fn([closure@ui/hashmap/hashmap-memory.rs:34:27: 34:33]) -> JoinHandle<()> {spawn::<[closure@ui/hashmap/hashmap-memory.rs:34:27: 34:33], ()>}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_15) -> [return: bb10, unwind: bb17]; // scope 4 at ui/hashmap/hashmap-memory.rs:34:69: 34:70
    }

    bb10: {
        _17 = const false;               // scope 2 at ui/hashmap/hashmap-memory.rs:35:9: 35:10
        goto -> bb2;                     // scope 1 at ui/hashmap/hashmap-memory.rs:31:9: 35:10
    }

    bb11: {
        drop(_1) -> bb12;                // scope 0 at ui/hashmap/hashmap-memory.rs:36:5: 36:6
    }

    bb12: {
        return;                          // scope 0 at ui/hashmap/hashmap-memory.rs:36:6: 36:6
    }

    bb13 (cleanup): {
        drop(_2) -> bb14;                // scope 0 at ui/hashmap/hashmap-memory.rs:36:5: 36:6
    }

    bb14 (cleanup): {
        drop(_1) -> bb15;                // scope 0 at ui/hashmap/hashmap-memory.rs:36:5: 36:6
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/hashmap/hashmap-memory.rs:30:5: 36:6
    }

    bb16 (cleanup): {
        drop(_11) -> bb13;               // scope 2 at ui/hashmap/hashmap-memory.rs:35:9: 35:10
    }

    bb17 (cleanup): {
        switchInt(_17) -> [0: bb13, otherwise: bb16]; // scope 2 at ui/hashmap/hashmap-memory.rs:35:9: 35:10
    }
}

fn start_mappers::{closure#0}(_1: [closure@ui/hashmap/hashmap-memory.rs:34:27: 34:33]) -> () {
    debug ctrl => (_1.0: std::sync::mpsc::Sender<map_reduce::ctrl_proto>); // in scope 0 at ui/hashmap/hashmap-memory.rs:32:17: 32:21
    debug i => (_1.1: std::string::String); // in scope 0 at ui/hashmap/hashmap-memory.rs:33:17: 33:18
    let mut _0: ();                      // return place in scope 0 at ui/hashmap/hashmap-memory.rs:34:34: 34:34
    let mut _2: std::sync::mpsc::Sender<map_reduce::ctrl_proto>; // in scope 0 at ui/hashmap/hashmap-memory.rs:34:43: 34:55
    let mut _3: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>; // in scope 0 at ui/hashmap/hashmap-memory.rs:34:43: 34:55
    let mut _4: std::string::String;     // in scope 0 at ui/hashmap/hashmap-memory.rs:34:57: 34:66
    let mut _5: &std::string::String;    // in scope 0 at ui/hashmap/hashmap-memory.rs:34:57: 34:66
    let mut _6: bool;                    // in scope 0 at ui/hashmap/hashmap-memory.rs:34:66: 34:67

    bb0: {
        _6 = const false;                // scope 0 at ui/hashmap/hashmap-memory.rs:34:43: 34:55
        _3 = &(_1.0: std::sync::mpsc::Sender<map_reduce::ctrl_proto>); // scope 0 at ui/hashmap/hashmap-memory.rs:34:43: 34:55
        _2 = <Sender<ctrl_proto> as Clone>::clone(move _3) -> [return: bb1, unwind: bb5]; // scope 0 at ui/hashmap/hashmap-memory.rs:34:43: 34:55
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:34:48: 34:53
                                         // + literal: Const { ty: for<'a> fn(&'a Sender<ctrl_proto>) -> Sender<ctrl_proto> {<Sender<ctrl_proto> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = const true;                 // scope 0 at ui/hashmap/hashmap-memory.rs:34:54: 34:55
        _5 = &(_1.1: std::string::String); // scope 0 at ui/hashmap/hashmap-memory.rs:34:57: 34:66
        _4 = <String as Clone>::clone(move _5) -> [return: bb2, unwind: bb8]; // scope 0 at ui/hashmap/hashmap-memory.rs:34:57: 34:66
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:34:59: 34:64
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> String {<String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = const false;                // scope 0 at ui/hashmap/hashmap-memory.rs:34:34: 34:67
        _0 = map_task(move _2, move _4) -> [return: bb3, unwind: bb8]; // scope 0 at ui/hashmap/hashmap-memory.rs:34:34: 34:67
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:34:34: 34:42
                                         // + literal: Const { ty: fn(Sender<ctrl_proto>, String) {map_task}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = const false;                // scope 0 at ui/hashmap/hashmap-memory.rs:34:66: 34:67
        drop(_1) -> bb4;                 // scope 0 at ui/hashmap/hashmap-memory.rs:34:66: 34:67
    }

    bb4: {
        return;                          // scope 0 at ui/hashmap/hashmap-memory.rs:34:67: 34:67
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/hashmap/hashmap-memory.rs:34:66: 34:67
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/hashmap/hashmap-memory.rs:34:27: 34:67
    }

    bb7 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/hashmap/hashmap-memory.rs:34:66: 34:67
    }

    bb8 (cleanup): {
        switchInt(_6) -> [0: bb5, otherwise: bb7]; // scope 0 at ui/hashmap/hashmap-memory.rs:34:66: 34:67
    }
}

fn map_task(_1: Sender<ctrl_proto>, _2: String) -> () {
    debug ctrl => _1;                    // in scope 0 at ui/hashmap/hashmap-memory.rs:38:17: 38:21
    debug input => _2;                   // in scope 0 at ui/hashmap/hashmap-memory.rs:38:43: 38:48
    let mut _0: ();                      // return place in scope 0 at ui/hashmap/hashmap-memory.rs:38:58: 38:58
    let mut _3: std::collections::HashMap<std::string::String, isize>; // in scope 0 at ui/hashmap/hashmap-memory.rs:39:13: 39:30
    let mut _5: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>; // in scope 0 at ui/hashmap/hashmap-memory.rs:56:26: 56:38
    let _6: ();                          // in scope 0 at ui/hashmap/hashmap-memory.rs:57:9: 57:83
    let mut _7: std::string::String;     // in scope 0 at ui/hashmap/hashmap-memory.rs:57:15: 57:20
    let mut _8: std::boxed::Box<dyn std::ops::FnMut(std::string::String, std::string::String)>; // in scope 0 at ui/hashmap/hashmap-memory.rs:57:22: 57:82
    let mut _9: std::boxed::Box<[closure@ui/hashmap/hashmap-memory.rs:57:31: 57:36]>; // in scope 0 at ui/hashmap/hashmap-memory.rs:57:22: 57:82
    let mut _10: [closure@ui/hashmap/hashmap-memory.rs:57:31: 57:36]; // in scope 0 at ui/hashmap/hashmap-memory.rs:57:31: 57:81
    let mut _11: &mut std::collections::HashMap<std::string::String, isize>; // in scope 0 at ui/hashmap/hashmap-memory.rs:57:31: 57:81
    let mut _12: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>; // in scope 0 at ui/hashmap/hashmap-memory.rs:57:31: 57:81
    let _13: ();                         // in scope 0 at ui/hashmap/hashmap-memory.rs:58:9: 58:58
    let mut _14: std::result::Result<(), std::sync::mpsc::SendError<map_reduce::ctrl_proto>>; // in scope 0 at ui/hashmap/hashmap-memory.rs:58:9: 58:49
    let mut _15: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>; // in scope 0 at ui/hashmap/hashmap-memory.rs:58:9: 58:49
    let mut _16: map_reduce::ctrl_proto; // in scope 0 at ui/hashmap/hashmap-memory.rs:58:25: 58:48
    let mut _17: bool;                   // in scope 0 at ui/hashmap/hashmap-memory.rs:57:82: 57:83
    let mut _18: bool;                   // in scope 0 at ui/hashmap/hashmap-memory.rs:59:5: 59:6
    scope 1 {
        debug intermediates => _3;       // in scope 1 at ui/hashmap/hashmap-memory.rs:39:13: 39:30
        let _4: std::sync::mpsc::Sender<map_reduce::ctrl_proto>; // in scope 1 at ui/hashmap/hashmap-memory.rs:56:13: 56:23
        scope 2 {
            debug ctrl_clone => _4;      // in scope 2 at ui/hashmap/hashmap-memory.rs:56:13: 56:23
        }
    }

    bb0: {
        _18 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:39:13: 39:30
        _17 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:39:13: 39:30
        _18 = const true;                // scope 0 at ui/hashmap/hashmap-memory.rs:39:13: 39:30
        _3 = HashMap::<String, isize>::new() -> [return: bb1, unwind: bb17]; // scope 0 at ui/hashmap/hashmap-memory.rs:39:33: 39:47
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:39:33: 39:45
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> HashMap<String, isize> {HashMap::<String, isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_1;                        // scope 1 at ui/hashmap/hashmap-memory.rs:56:26: 56:38
        _4 = <Sender<ctrl_proto> as Clone>::clone(move _5) -> [return: bb2, unwind: bb11]; // scope 1 at ui/hashmap/hashmap-memory.rs:56:26: 56:38
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:56:31: 56:36
                                         // + literal: Const { ty: for<'a> fn(&'a Sender<ctrl_proto>) -> Sender<ctrl_proto> {<Sender<ctrl_proto> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _18 = const false;               // scope 2 at ui/hashmap/hashmap-memory.rs:57:15: 57:20
        _17 = const true;                // scope 2 at ui/hashmap/hashmap-memory.rs:57:15: 57:20
        _7 = move _2;                    // scope 2 at ui/hashmap/hashmap-memory.rs:57:15: 57:20
        _11 = &mut _3;                   // scope 2 at ui/hashmap/hashmap-memory.rs:57:31: 57:81
        _12 = &_1;                       // scope 2 at ui/hashmap/hashmap-memory.rs:57:31: 57:81
        _10 = [closure@ui/hashmap/hashmap-memory.rs:57:31: 57:36] { intermediates: move _11, ctrl: move _12 }; // scope 2 at ui/hashmap/hashmap-memory.rs:57:31: 57:81
                                         // closure
                                         // + def_id: DefId(0:25 ~ hashmap_memory[fef3]::map_reduce::map_task::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((std::string::String, std::string::String)),
                                         //     (&mut std::collections::HashMap<std::string::String, isize>, &std::sync::mpsc::Sender<map_reduce::ctrl_proto>),
                                         // ]
        _9 = Box::<[closure@ui/hashmap/hashmap-memory.rs:57:31: 57:36]>::new(move _10) -> [return: bb3, unwind: bb15]; // scope 2 at ui/hashmap/hashmap-memory.rs:57:22: 57:82
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:57:22: 57:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn([closure@ui/hashmap/hashmap-memory.rs:57:31: 57:36]) -> Box<[closure@ui/hashmap/hashmap-memory.rs:57:31: 57:36]> {Box::<[closure@ui/hashmap/hashmap-memory.rs:57:31: 57:36]>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = move _9 as std::boxed::Box<dyn std::ops::FnMut(std::string::String, std::string::String)> (Pointer(Unsize)); // scope 2 at ui/hashmap/hashmap-memory.rs:57:22: 57:82
        _17 = const false;               // scope 2 at ui/hashmap/hashmap-memory.rs:57:9: 57:83
        _6 = map(move _7, move _8) -> [return: bb4, unwind: bb15]; // scope 2 at ui/hashmap/hashmap-memory.rs:57:9: 57:83
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:57:9: 57:14
                                         // + literal: Const { ty: for<'a> fn(String, Box<(dyn FnMut(String, String) + 'a)>) {map}, val: Value(<ZST>) }
    }

    bb4: {
        _17 = const false;               // scope 2 at ui/hashmap/hashmap-memory.rs:57:82: 57:83
        _15 = &_4;                       // scope 2 at ui/hashmap/hashmap-memory.rs:58:9: 58:49
        _16 = ctrl_proto::mapper_done;   // scope 2 at ui/hashmap/hashmap-memory.rs:58:25: 58:48
        _14 = Sender::<ctrl_proto>::send(move _15, move _16) -> [return: bb5, unwind: bb10]; // scope 2 at ui/hashmap/hashmap-memory.rs:58:9: 58:49
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:58:20: 58:24
                                         // + literal: Const { ty: for<'a> fn(&'a Sender<ctrl_proto>, ctrl_proto) -> Result<(), SendError<ctrl_proto>> {Sender::<ctrl_proto>::send}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = Result::<(), SendError<ctrl_proto>>::unwrap(move _14) -> [return: bb6, unwind: bb10]; // scope 2 at ui/hashmap/hashmap-memory.rs:58:9: 58:58
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:58:50: 58:56
                                         // + literal: Const { ty: fn(Result<(), SendError<ctrl_proto>>) {Result::<(), SendError<ctrl_proto>>::unwrap}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_4) -> [return: bb7, unwind: bb11]; // scope 1 at ui/hashmap/hashmap-memory.rs:59:5: 59:6
    }

    bb7: {
        drop(_3) -> [return: bb8, unwind: bb17]; // scope 0 at ui/hashmap/hashmap-memory.rs:59:5: 59:6
    }

    bb8: {
        drop(_1) -> bb9;                 // scope 0 at ui/hashmap/hashmap-memory.rs:59:5: 59:6
    }

    bb9: {
        return;                          // scope 0 at ui/hashmap/hashmap-memory.rs:59:6: 59:6
    }

    bb10 (cleanup): {
        drop(_4) -> bb11;                // scope 1 at ui/hashmap/hashmap-memory.rs:59:5: 59:6
    }

    bb11 (cleanup): {
        drop(_3) -> bb17;                // scope 0 at ui/hashmap/hashmap-memory.rs:59:5: 59:6
    }

    bb12 (cleanup): {
        drop(_1) -> bb13;                // scope 0 at ui/hashmap/hashmap-memory.rs:59:5: 59:6
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/hashmap/hashmap-memory.rs:38:5: 59:6
    }

    bb14 (cleanup): {
        drop(_7) -> bb10;                // scope 2 at ui/hashmap/hashmap-memory.rs:57:82: 57:83
    }

    bb15 (cleanup): {
        switchInt(_17) -> [0: bb10, otherwise: bb14]; // scope 2 at ui/hashmap/hashmap-memory.rs:57:82: 57:83
    }

    bb16 (cleanup): {
        drop(_2) -> bb12;                // scope 0 at ui/hashmap/hashmap-memory.rs:59:5: 59:6
    }

    bb17 (cleanup): {
        switchInt(_18) -> [0: bb12, otherwise: bb16]; // scope 0 at ui/hashmap/hashmap-memory.rs:59:5: 59:6
    }
}

fn emit(_1: &mut HashMap<String, isize>, _2: Sender<ctrl_proto>, _3: String, _4: String) -> () {
    debug im => _1;                      // in scope 0 at ui/hashmap/hashmap-memory.rs:41:17: 41:19
    debug ctrl => _2;                    // in scope 0 at ui/hashmap/hashmap-memory.rs:42:17: 42:21
    debug key => _3;                     // in scope 0 at ui/hashmap/hashmap-memory.rs:42:43: 42:46
    debug _val => _4;                    // in scope 0 at ui/hashmap/hashmap-memory.rs:43:17: 43:21
    let mut _0: ();                      // return place in scope 0 at ui/hashmap/hashmap-memory.rs:43:31: 43:31
    let mut _5: bool;                    // in scope 0 at ui/hashmap/hashmap-memory.rs:44:16: 44:37
    let mut _6: &std::collections::HashMap<std::string::String, isize>; // in scope 0 at ui/hashmap/hashmap-memory.rs:44:16: 44:37
    let mut _7: &std::string::String;    // in scope 0 at ui/hashmap/hashmap-memory.rs:44:32: 44:36
    let _8: &std::string::String;        // in scope 0 at ui/hashmap/hashmap-memory.rs:44:32: 44:36
    let _9: std::sync::mpsc::Sender<isize>; // in scope 0 at ui/hashmap/hashmap-memory.rs:47:18: 47:20
    let _10: std::sync::mpsc::Receiver<isize>; // in scope 0 at ui/hashmap/hashmap-memory.rs:47:22: 47:24
    let mut _11: (std::sync::mpsc::Sender<isize>, std::sync::mpsc::Receiver<isize>); // in scope 0 at ui/hashmap/hashmap-memory.rs:47:28: 47:37
    let _12: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _13: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: &[&str];                // in scope 0 at ui/hashmap/hashmap-memory.rs:48:22: 48:44
    let mut _15: &[&str; 1];             // in scope 0 at ui/hashmap/hashmap-memory.rs:48:22: 48:44
    let _16: &[&str; 1];                 // in scope 0 at ui/hashmap/hashmap-memory.rs:48:22: 48:44
    let mut _17: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _18: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _19: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _20: ();                         // in scope 0 at ui/hashmap/hashmap-memory.rs:49:13: 49:86
    let mut _21: std::result::Result<(), std::sync::mpsc::SendError<map_reduce::ctrl_proto>>; // in scope 0 at ui/hashmap/hashmap-memory.rs:49:13: 49:77
    let mut _22: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>; // in scope 0 at ui/hashmap/hashmap-memory.rs:49:13: 49:77
    let mut _23: map_reduce::ctrl_proto; // in scope 0 at ui/hashmap/hashmap-memory.rs:49:23: 49:76
    let mut _24: std::vec::Vec<u8>;      // in scope 0 at ui/hashmap/hashmap-memory.rs:49:48: 49:71
    let mut _25: &[u8];                  // in scope 0 at ui/hashmap/hashmap-memory.rs:49:48: 49:71
    let _26: &[u8];                      // in scope 0 at ui/hashmap/hashmap-memory.rs:49:48: 49:62
    let mut _27: &std::string::String;   // in scope 0 at ui/hashmap/hashmap-memory.rs:49:48: 49:62
    let mut _28: std::sync::mpsc::Sender<isize>; // in scope 0 at ui/hashmap/hashmap-memory.rs:49:73: 49:75
    let _29: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _30: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _31: &[&str];                // in scope 0 at ui/hashmap/hashmap-memory.rs:50:22: 50:33
    let mut _32: &[&str; 1];             // in scope 0 at ui/hashmap/hashmap-memory.rs:50:22: 50:33
    let _33: &[&str; 1];                 // in scope 0 at ui/hashmap/hashmap-memory.rs:50:22: 50:33
    let mut _34: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _35: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _36: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _38: std::result::Result<isize, std::sync::mpsc::RecvError>; // in scope 0 at ui/hashmap/hashmap-memory.rs:51:21: 51:30
    let mut _39: &std::sync::mpsc::Receiver<isize>; // in scope 0 at ui/hashmap/hashmap-memory.rs:51:21: 51:30
    let _40: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _41: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _42: &[&str];                // in scope 0 at ui/hashmap/hashmap-memory.rs:52:22: 52:26
    let mut _43: &[&str; 2];             // in scope 0 at ui/hashmap/hashmap-memory.rs:52:22: 52:26
    let _44: &[&str; 2];                 // in scope 0 at ui/hashmap/hashmap-memory.rs:52:22: 52:26
    let mut _45: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _46: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _47: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _48: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _49: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/hashmap/hashmap-memory.rs:52:28: 52:29
    let mut _50: &isize;                 // in scope 0 at ui/hashmap/hashmap-memory.rs:52:28: 52:29
    let _51: &isize;                     // in scope 0 at ui/hashmap/hashmap-memory.rs:52:28: 52:29
    let _52: std::option::Option<isize>; // in scope 0 at ui/hashmap/hashmap-memory.rs:53:13: 53:30
    let mut _53: &mut std::collections::HashMap<std::string::String, isize>; // in scope 0 at ui/hashmap/hashmap-memory.rs:53:13: 53:30
    let mut _54: std::string::String;    // in scope 0 at ui/hashmap/hashmap-memory.rs:53:23: 53:26
    let mut _55: isize;                  // in scope 0 at ui/hashmap/hashmap-memory.rs:53:28: 53:29
    let mut _61: bool;                   // in scope 0 at ui/hashmap/hashmap-memory.rs:54:9: 54:10
    let mut _62: bool;                   // in scope 0 at ui/hashmap/hashmap-memory.rs:54:9: 54:10
    scope 1 {
        debug tx => _9;                  // in scope 1 at ui/hashmap/hashmap-memory.rs:47:18: 47:20
        debug rx => _10;                 // in scope 1 at ui/hashmap/hashmap-memory.rs:47:22: 47:24
        let _37: isize;                  // in scope 1 at ui/hashmap/hashmap-memory.rs:51:17: 51:18
        let mut _57: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        let mut _58: &[&str; 1];         // in scope 1 at ui/hashmap/hashmap-memory.rs:50:22: 50:33
        let mut _59: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        let mut _60: &[&str; 1];         // in scope 1 at ui/hashmap/hashmap-memory.rs:48:22: 48:44
        scope 2 {
            debug c => _37;              // in scope 2 at ui/hashmap/hashmap-memory.rs:51:17: 51:18
            let mut _56: &[&str; 2];     // in scope 2 at ui/hashmap/hashmap-memory.rs:52:22: 52:26
        }
    }

    bb0: {
        _62 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:44:13: 46:14
        _61 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:44:13: 46:14
        _62 = const true;                // scope 0 at ui/hashmap/hashmap-memory.rs:44:13: 46:14
        _6 = &(*_1);                     // scope 0 at ui/hashmap/hashmap-memory.rs:44:16: 44:37
        _8 = &_3;                        // scope 0 at ui/hashmap/hashmap-memory.rs:44:32: 44:36
        _7 = _8;                         // scope 0 at ui/hashmap/hashmap-memory.rs:44:32: 44:36
        _5 = HashMap::<String, isize>::contains_key::<String>(move _6, move _7) -> [return: bb1, unwind: bb25]; // scope 0 at ui/hashmap/hashmap-memory.rs:44:16: 44:37
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:44:19: 44:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a HashMap<String, isize>, &'b String) -> bool {HashMap::<String, isize>::contains_key::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/hashmap/hashmap-memory.rs:44:16: 44:37
    }

    bb2: {
        drop(_4) -> [return: bb21, unwind: bb31]; // scope 0 at ui/hashmap/hashmap-memory.rs:54:9: 54:10
    }

    bb3: {
        _11 = channel::<isize>() -> [return: bb4, unwind: bb25]; // scope 0 at ui/hashmap/hashmap-memory.rs:47:28: 47:37
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:47:28: 47:35
                                         // + literal: Const { ty: fn() -> (Sender<isize>, std::sync::mpsc::Receiver<isize>) {channel::<isize>}, val: Value(<ZST>) }
    }

    bb4: {
        _61 = const true;                // scope 0 at ui/hashmap/hashmap-memory.rs:47:18: 47:20
        _9 = move (_11.0: std::sync::mpsc::Sender<isize>); // scope 0 at ui/hashmap/hashmap-memory.rs:47:18: 47:20
        _10 = move (_11.1: std::sync::mpsc::Receiver<isize>); // scope 0 at ui/hashmap/hashmap-memory.rs:47:22: 47:24
        _60 = const _;                   // scope 1 at ui/hashmap/hashmap-memory.rs:48:22: 48:44
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:48:22: 48:44
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(emit, [], Some(promoted[4])) }
        _16 = _60;                       // scope 1 at ui/hashmap/hashmap-memory.rs:48:22: 48:44
        _15 = _16;                       // scope 1 at ui/hashmap/hashmap-memory.rs:48:22: 48:44
        _14 = move _15 as &[&str] (Pointer(Unsize)); // scope 1 at ui/hashmap/hashmap-memory.rs:48:22: 48:44
        _59 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(emit, [], Some(promoted[3])) }
        _19 = _59;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _18 = _19;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _17 = move _18 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _13 = Arguments::<'_>::new_v1(move _14, move _17) -> [return: bb5, unwind: bb24]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = _print(move _13) -> [return: bb6, unwind: bb24]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb6: {
        _22 = &_2;                       // scope 1 at ui/hashmap/hashmap-memory.rs:49:13: 49:77
        _27 = &_3;                       // scope 1 at ui/hashmap/hashmap-memory.rs:49:48: 49:62
        _26 = String::as_bytes(move _27) -> [return: bb7, unwind: bb24]; // scope 1 at ui/hashmap/hashmap-memory.rs:49:48: 49:62
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:49:52: 49:60
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a [u8] {String::as_bytes}, val: Value(<ZST>) }
    }

    bb7: {
        _25 = _26;                       // scope 1 at ui/hashmap/hashmap-memory.rs:49:48: 49:71
        _24 = slice::<impl [u8]>::to_vec(move _25) -> [return: bb8, unwind: bb24]; // scope 1 at ui/hashmap/hashmap-memory.rs:49:48: 49:71
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:49:63: 49:69
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb8: {
        _61 = const false;               // scope 1 at ui/hashmap/hashmap-memory.rs:49:73: 49:75
        _28 = move _9;                   // scope 1 at ui/hashmap/hashmap-memory.rs:49:73: 49:75
        _23 = ctrl_proto::find_reducer(move _24, move _28); // scope 1 at ui/hashmap/hashmap-memory.rs:49:23: 49:76
        _21 = Sender::<ctrl_proto>::send(move _22, move _23) -> [return: bb9, unwind: bb24]; // scope 1 at ui/hashmap/hashmap-memory.rs:49:13: 49:77
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:49:18: 49:22
                                         // + literal: Const { ty: for<'a> fn(&'a Sender<ctrl_proto>, ctrl_proto) -> Result<(), SendError<ctrl_proto>> {Sender::<ctrl_proto>::send}, val: Value(<ZST>) }
    }

    bb9: {
        _20 = Result::<(), SendError<ctrl_proto>>::unwrap(move _21) -> [return: bb10, unwind: bb24]; // scope 1 at ui/hashmap/hashmap-memory.rs:49:13: 49:86
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:49:78: 49:84
                                         // + literal: Const { ty: fn(Result<(), SendError<ctrl_proto>>) {Result::<(), SendError<ctrl_proto>>::unwrap}, val: Value(<ZST>) }
    }

    bb10: {
        _58 = const _;                   // scope 1 at ui/hashmap/hashmap-memory.rs:50:22: 50:33
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:50:22: 50:33
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(emit, [], Some(promoted[2])) }
        _33 = _58;                       // scope 1 at ui/hashmap/hashmap-memory.rs:50:22: 50:33
        _32 = _33;                       // scope 1 at ui/hashmap/hashmap-memory.rs:50:22: 50:33
        _31 = move _32 as &[&str] (Pointer(Unsize)); // scope 1 at ui/hashmap/hashmap-memory.rs:50:22: 50:33
        _57 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(emit, [], Some(promoted[1])) }
        _36 = _57;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _35 = _36;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _34 = move _35 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _30 = Arguments::<'_>::new_v1(move _31, move _34) -> [return: bb11, unwind: bb24]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb11: {
        _29 = _print(move _30) -> [return: bb12, unwind: bb24]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb12: {
        _39 = &_10;                      // scope 1 at ui/hashmap/hashmap-memory.rs:51:21: 51:30
        _38 = std::sync::mpsc::Receiver::<isize>::recv(move _39) -> [return: bb13, unwind: bb24]; // scope 1 at ui/hashmap/hashmap-memory.rs:51:21: 51:30
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:51:24: 51:28
                                         // + literal: Const { ty: for<'a> fn(&'a std::sync::mpsc::Receiver<isize>) -> Result<isize, RecvError> {std::sync::mpsc::Receiver::<isize>::recv}, val: Value(<ZST>) }
    }

    bb13: {
        _37 = Result::<isize, RecvError>::unwrap(move _38) -> [return: bb14, unwind: bb24]; // scope 1 at ui/hashmap/hashmap-memory.rs:51:21: 51:39
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:51:31: 51:37
                                         // + literal: Const { ty: fn(Result<isize, RecvError>) -> isize {Result::<isize, RecvError>::unwrap}, val: Value(<ZST>) }
    }

    bb14: {
        _56 = const _;                   // scope 2 at ui/hashmap/hashmap-memory.rs:52:22: 52:26
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:52:22: 52:26
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(emit, [], Some(promoted[0])) }
        _44 = _56;                       // scope 2 at ui/hashmap/hashmap-memory.rs:52:22: 52:26
        _43 = _44;                       // scope 2 at ui/hashmap/hashmap-memory.rs:52:22: 52:26
        _42 = move _43 as &[&str] (Pointer(Unsize)); // scope 2 at ui/hashmap/hashmap-memory.rs:52:22: 52:26
        _51 = &_37;                      // scope 2 at ui/hashmap/hashmap-memory.rs:52:28: 52:29
        _50 = _51;                       // scope 2 at ui/hashmap/hashmap-memory.rs:52:28: 52:29
        _49 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _50) -> [return: bb15, unwind: bb24]; // scope 2 at ui/hashmap/hashmap-memory.rs:52:28: 52:29
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:52:28: 52:29
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb15: {
        _48 = [move _49];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _47 = &_48;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _46 = _47;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _45 = move _46 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _41 = Arguments::<'_>::new_v1(move _42, move _45) -> [return: bb16, unwind: bb24]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb16: {
        _40 = _print(move _41) -> [return: bb17, unwind: bb24]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb17: {
        _53 = &mut (*_1);                // scope 2 at ui/hashmap/hashmap-memory.rs:53:13: 53:30
        _62 = const false;               // scope 2 at ui/hashmap/hashmap-memory.rs:53:23: 53:26
        _54 = move _3;                   // scope 2 at ui/hashmap/hashmap-memory.rs:53:23: 53:26
        _55 = _37;                       // scope 2 at ui/hashmap/hashmap-memory.rs:53:28: 53:29
        _52 = HashMap::<String, isize>::insert(move _53, move _54, move _55) -> [return: bb18, unwind: bb24]; // scope 2 at ui/hashmap/hashmap-memory.rs:53:13: 53:30
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:53:16: 53:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<String, isize>, String, isize) -> Option<isize> {HashMap::<String, isize>::insert}, val: Value(<ZST>) }
    }

    bb18: {
        drop(_10) -> [return: bb19, unwind: bb29]; // scope 0 at ui/hashmap/hashmap-memory.rs:54:9: 54:10
    }

    bb19: {
        _61 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:54:9: 54:10
        drop(_4) -> [return: bb20, unwind: bb31]; // scope 0 at ui/hashmap/hashmap-memory.rs:54:9: 54:10
    }

    bb20: {
        drop(_2) -> bb23;                // scope 0 at ui/hashmap/hashmap-memory.rs:54:9: 54:10
    }

    bb21: {
        drop(_3) -> [return: bb22, unwind: bb26]; // scope 0 at ui/hashmap/hashmap-memory.rs:54:9: 54:10
    }

    bb22: {
        drop(_2) -> bb23;                // scope 0 at ui/hashmap/hashmap-memory.rs:54:9: 54:10
    }

    bb23: {
        return;                          // scope 0 at ui/hashmap/hashmap-memory.rs:54:10: 54:10
    }

    bb24 (cleanup): {
        drop(_10) -> bb29;               // scope 0 at ui/hashmap/hashmap-memory.rs:54:9: 54:10
    }

    bb25 (cleanup): {
        drop(_4) -> bb31;                // scope 0 at ui/hashmap/hashmap-memory.rs:54:9: 54:10
    }

    bb26 (cleanup): {
        drop(_2) -> bb27;                // scope 0 at ui/hashmap/hashmap-memory.rs:54:9: 54:10
    }

    bb27 (cleanup): {
        resume;                          // scope 0 at ui/hashmap/hashmap-memory.rs:41:9: 54:10
    }

    bb28 (cleanup): {
        drop(_9) -> bb25;                // scope 0 at ui/hashmap/hashmap-memory.rs:54:9: 54:10
    }

    bb29 (cleanup): {
        switchInt(_61) -> [0: bb25, otherwise: bb28]; // scope 0 at ui/hashmap/hashmap-memory.rs:54:9: 54:10
    }

    bb30 (cleanup): {
        drop(_3) -> bb26;                // scope 0 at ui/hashmap/hashmap-memory.rs:54:9: 54:10
    }

    bb31 (cleanup): {
        switchInt(_62) -> [0: bb26, otherwise: bb30]; // scope 0 at ui/hashmap/hashmap-memory.rs:54:9: 54:10
    }
}

promoted[0] in emit: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/hashmap/hashmap-memory.rs:52:22: 52:26
    let mut _1: [&str; 2];               // in scope 0 at ui/hashmap/hashmap-memory.rs:52:22: 52:26

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/hashmap/hashmap-memory.rs:52:22: 52:26
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:52:22: 52:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:52:22: 52:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/hashmap/hashmap-memory.rs:52:22: 52:26
        return;                          // scope 0 at ui/hashmap/hashmap-memory.rs:52:22: 52:26
    }
}

promoted[1] in emit: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[2] in emit: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/hashmap/hashmap-memory.rs:50:22: 50:33
    let mut _1: [&str; 1];               // in scope 0 at ui/hashmap/hashmap-memory.rs:50:22: 50:33

    bb0: {
        _1 = [const "receiving\n"];      // scope 0 at ui/hashmap/hashmap-memory.rs:50:22: 50:33
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:50:22: 50:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/hashmap/hashmap-memory.rs:50:22: 50:33
        return;                          // scope 0 at ui/hashmap/hashmap-memory.rs:50:22: 50:33
    }
}

promoted[3] in emit: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[4] in emit: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/hashmap/hashmap-memory.rs:48:22: 48:44
    let mut _1: [&str; 1];               // in scope 0 at ui/hashmap/hashmap-memory.rs:48:22: 48:44

    bb0: {
        _1 = [const "sending find_reducer\n"]; // scope 0 at ui/hashmap/hashmap-memory.rs:48:22: 48:44
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:48:22: 48:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/hashmap/hashmap-memory.rs:48:22: 48:44
        return;                          // scope 0 at ui/hashmap/hashmap-memory.rs:48:22: 48:44
    }
}

fn map_task::{closure#0}(_1: &mut [closure@ui/hashmap/hashmap-memory.rs:57:31: 57:36], _2: String, _3: String) -> () {
    debug a => _2;                       // in scope 0 at ui/hashmap/hashmap-memory.rs:57:32: 57:33
    debug b => _3;                       // in scope 0 at ui/hashmap/hashmap-memory.rs:57:34: 57:35
    debug intermediates => (*((*_1).0: &mut std::collections::HashMap<std::string::String, isize>)); // in scope 0 at ui/hashmap/hashmap-memory.rs:39:13: 39:30
    debug ctrl => (*((*_1).1: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>)); // in scope 0 at ui/hashmap/hashmap-memory.rs:38:17: 38:21
    let mut _0: ();                      // return place in scope 0 at ui/hashmap/hashmap-memory.rs:57:37: 57:37
    let mut _4: &mut std::collections::HashMap<std::string::String, isize>; // in scope 0 at ui/hashmap/hashmap-memory.rs:57:42: 57:60
    let mut _5: &mut std::collections::HashMap<std::string::String, isize>; // in scope 0 at ui/hashmap/hashmap-memory.rs:57:42: 57:60
    let mut _6: std::sync::mpsc::Sender<map_reduce::ctrl_proto>; // in scope 0 at ui/hashmap/hashmap-memory.rs:57:62: 57:74
    let mut _7: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>; // in scope 0 at ui/hashmap/hashmap-memory.rs:57:62: 57:74
    let mut _8: std::string::String;     // in scope 0 at ui/hashmap/hashmap-memory.rs:57:76: 57:77
    let mut _9: std::string::String;     // in scope 0 at ui/hashmap/hashmap-memory.rs:57:79: 57:80
    let mut _10: &mut std::collections::HashMap<std::string::String, isize>; // in scope 0 at ui/hashmap/hashmap-memory.rs:57:31: 57:81
    let mut _11: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>; // in scope 0 at ui/hashmap/hashmap-memory.rs:57:31: 57:81
    let mut _12: bool;                   // in scope 0 at ui/hashmap/hashmap-memory.rs:57:80: 57:81
    let mut _13: bool;                   // in scope 0 at ui/hashmap/hashmap-memory.rs:57:80: 57:81

    bb0: {
        _13 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:57:42: 57:60
        _12 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:57:42: 57:60
        _13 = const true;                // scope 0 at ui/hashmap/hashmap-memory.rs:57:42: 57:60
        _12 = const true;                // scope 0 at ui/hashmap/hashmap-memory.rs:57:42: 57:60
        _10 = deref_copy ((*_1).0: &mut std::collections::HashMap<std::string::String, isize>); // scope 0 at ui/hashmap/hashmap-memory.rs:57:42: 57:60
        _5 = &mut (*_10);                // scope 0 at ui/hashmap/hashmap-memory.rs:57:42: 57:60
        _4 = &mut (*_5);                 // scope 0 at ui/hashmap/hashmap-memory.rs:57:42: 57:60
        _11 = deref_copy ((*_1).1: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>); // scope 0 at ui/hashmap/hashmap-memory.rs:57:62: 57:74
        _7 = _11;                        // scope 0 at ui/hashmap/hashmap-memory.rs:57:62: 57:74
        _6 = <Sender<ctrl_proto> as Clone>::clone(move _7) -> [return: bb1, unwind: bb6]; // scope 0 at ui/hashmap/hashmap-memory.rs:57:62: 57:74
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:57:67: 57:72
                                         // + literal: Const { ty: for<'a> fn(&'a Sender<ctrl_proto>) -> Sender<ctrl_proto> {<Sender<ctrl_proto> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _13 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:57:76: 57:77
        _8 = move _2;                    // scope 0 at ui/hashmap/hashmap-memory.rs:57:76: 57:77
        _12 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:57:79: 57:80
        _9 = move _3;                    // scope 0 at ui/hashmap/hashmap-memory.rs:57:79: 57:80
        _0 = emit(move _4, move _6, move _8, move _9) -> [return: bb2, unwind: bb6]; // scope 0 at ui/hashmap/hashmap-memory.rs:57:37: 57:81
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:57:37: 57:41
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<String, isize>, Sender<ctrl_proto>, String, String) {emit}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/hashmap/hashmap-memory.rs:57:81: 57:81
    }

    bb3 (cleanup): {
        switchInt(_13) -> [0: bb4, otherwise: bb7]; // scope 0 at ui/hashmap/hashmap-memory.rs:57:80: 57:81
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/hashmap/hashmap-memory.rs:57:31: 57:81
    }

    bb5 (cleanup): {
        drop(_3) -> bb3;                 // scope 0 at ui/hashmap/hashmap-memory.rs:57:80: 57:81
    }

    bb6 (cleanup): {
        switchInt(_12) -> [0: bb3, otherwise: bb5]; // scope 0 at ui/hashmap/hashmap-memory.rs:57:80: 57:81
    }

    bb7 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/hashmap/hashmap-memory.rs:57:80: 57:81
    }
}

fn map_reduce(_1: Vec<String>) -> () {
    debug inputs => _1;                  // in scope 0 at ui/hashmap/hashmap-memory.rs:61:23: 61:29
    let mut _0: ();                      // return place in scope 0 at ui/hashmap/hashmap-memory.rs:61:44: 61:44
    let _2: std::sync::mpsc::Sender<map_reduce::ctrl_proto>; // in scope 0 at ui/hashmap/hashmap-memory.rs:62:14: 62:16
    let _3: std::sync::mpsc::Receiver<map_reduce::ctrl_proto>; // in scope 0 at ui/hashmap/hashmap-memory.rs:62:18: 62:20
    let mut _4: (std::sync::mpsc::Sender<map_reduce::ctrl_proto>, std::sync::mpsc::Receiver<map_reduce::ctrl_proto>); // in scope 0 at ui/hashmap/hashmap-memory.rs:62:24: 62:33
    let mut _6: std::collections::HashMap<std::string::String, isize>; // in scope 0 at ui/hashmap/hashmap-memory.rs:69:20: 69:34
    let _7: ();                          // in scope 0 at ui/hashmap/hashmap-memory.rs:71:9: 71:42
    let mut _8: std::sync::mpsc::Sender<map_reduce::ctrl_proto>; // in scope 0 at ui/hashmap/hashmap-memory.rs:71:23: 71:25
    let mut _9: std::vec::Vec<std::string::String>; // in scope 0 at ui/hashmap/hashmap-memory.rs:71:27: 71:41
    let mut _10: &std::vec::Vec<std::string::String>; // in scope 0 at ui/hashmap/hashmap-memory.rs:71:27: 71:41
    let mut _12: usize;                  // in scope 0 at ui/hashmap/hashmap-memory.rs:73:31: 73:43
    let mut _13: &std::vec::Vec<std::string::String>; // in scope 0 at ui/hashmap/hashmap-memory.rs:73:31: 73:43
    let mut _14: bool;                   // in scope 0 at ui/hashmap/hashmap-memory.rs:75:15: 75:30
    let mut _15: isize;                  // in scope 0 at ui/hashmap/hashmap-memory.rs:75:15: 75:26
    let mut _16: map_reduce::ctrl_proto; // in scope 0 at ui/hashmap/hashmap-memory.rs:76:19: 76:37
    let mut _17: std::result::Result<map_reduce::ctrl_proto, std::sync::mpsc::RecvError>; // in scope 0 at ui/hashmap/hashmap-memory.rs:76:19: 76:28
    let mut _18: &std::sync::mpsc::Receiver<map_reduce::ctrl_proto>; // in scope 0 at ui/hashmap/hashmap-memory.rs:76:19: 76:28
    let mut _19: isize;                  // in scope 0 at ui/hashmap/hashmap-memory.rs:77:15: 77:38
    let mut _20: (isize, bool);          // in scope 0 at ui/hashmap/hashmap-memory.rs:77:44: 77:60
    let mut _24: std::option::Option<&isize>; // in scope 0 at ui/hashmap/hashmap-memory.rs:80:23: 80:77
    let mut _25: &std::collections::HashMap<std::string::String, isize>; // in scope 0 at ui/hashmap/hashmap-memory.rs:80:23: 80:77
    let mut _26: &std::string::String;   // in scope 0 at ui/hashmap/hashmap-memory.rs:80:36: 80:76
    let _27: &std::string::String;       // in scope 0 at ui/hashmap/hashmap-memory.rs:80:36: 80:76
    let _28: std::string::String;        // in scope 0 at ui/hashmap/hashmap-memory.rs:80:37: 80:76
    let mut _29: &str;                   // in scope 0 at ui/hashmap/hashmap-memory.rs:80:37: 80:76
    let _30: &str;                       // in scope 0 at ui/hashmap/hashmap-memory.rs:80:37: 80:64
    let mut _31: std::result::Result<&str, std::str::Utf8Error>; // in scope 0 at ui/hashmap/hashmap-memory.rs:80:37: 80:55
    let mut _32: &[u8];                  // in scope 0 at ui/hashmap/hashmap-memory.rs:80:52: 80:54
    let _33: &[u8];                      // in scope 0 at ui/hashmap/hashmap-memory.rs:80:52: 80:54
    let mut _34: &std::vec::Vec<u8>;     // in scope 0 at ui/hashmap/hashmap-memory.rs:80:52: 80:54
    let _35: &std::vec::Vec<u8>;         // in scope 0 at ui/hashmap/hashmap-memory.rs:80:52: 80:54
    let mut _36: isize;                  // in scope 0 at ui/hashmap/hashmap-memory.rs:81:19: 81:28
    let mut _38: isize;                  // in scope 0 at ui/hashmap/hashmap-memory.rs:81:38: 81:40
    let _39: ();                         // in scope 0 at ui/hashmap/hashmap-memory.rs:84:17: 84:36
    let mut _40: std::result::Result<(), std::sync::mpsc::SendError<isize>>; // in scope 0 at ui/hashmap/hashmap-memory.rs:84:17: 84:27
    let mut _41: &std::sync::mpsc::Sender<isize>; // in scope 0 at ui/hashmap/hashmap-memory.rs:84:17: 84:27
    let mut _42: isize;                  // in scope 0 at ui/hashmap/hashmap-memory.rs:84:25: 84:26
    let mut _43: &isize;                 // in scope 0 at ui/hashmap/hashmap-memory.rs:80:23: 80:77
    let mut _44: bool;                   // in scope 0 at ui/hashmap/hashmap-memory.rs:71:41: 71:42
    let mut _45: bool;                   // in scope 0 at ui/hashmap/hashmap-memory.rs:88:5: 88:6
    let mut _46: bool;                   // in scope 0 at ui/hashmap/hashmap-memory.rs:88:5: 88:6
    scope 1 {
        debug tx => _2;                  // in scope 1 at ui/hashmap/hashmap-memory.rs:62:14: 62:16
        debug rx => _3;                  // in scope 1 at ui/hashmap/hashmap-memory.rs:62:18: 62:20
        let mut _5: std::collections::HashMap<std::string::String, isize>; // in scope 1 at ui/hashmap/hashmap-memory.rs:67:13: 67:25
        scope 2 {
            debug reducers => _5;        // in scope 2 at ui/hashmap/hashmap-memory.rs:67:13: 67:25
            let mut _11: isize;          // in scope 2 at ui/hashmap/hashmap-memory.rs:73:13: 73:28
            scope 3 {
                debug num_mappers => _11; // in scope 3 at ui/hashmap/hashmap-memory.rs:73:13: 73:28
                let _21: std::vec::Vec<u8>; // in scope 3 at ui/hashmap/hashmap-memory.rs:78:40: 78:41
                let _22: std::sync::mpsc::Sender<isize>; // in scope 3 at ui/hashmap/hashmap-memory.rs:78:43: 78:45
                scope 4 {
                    debug k => _21;      // in scope 4 at ui/hashmap/hashmap-memory.rs:78:40: 78:41
                    debug cc => _22;     // in scope 4 at ui/hashmap/hashmap-memory.rs:78:43: 78:45
                    let mut _23: isize;  // in scope 4 at ui/hashmap/hashmap-memory.rs:79:21: 79:26
                    scope 5 {
                        debug c => _23;  // in scope 5 at ui/hashmap/hashmap-memory.rs:79:21: 79:26
                        let _37: isize;  // in scope 5 at ui/hashmap/hashmap-memory.rs:81:25: 81:27
                        scope 6 {
                            debug _c => _37; // in scope 6 at ui/hashmap/hashmap-memory.rs:81:25: 81:27
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _44 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:62:24: 62:33
        _45 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:62:24: 62:33
        _46 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:62:24: 62:33
        _4 = channel::<ctrl_proto>() -> [return: bb1, unwind: bb35]; // scope 0 at ui/hashmap/hashmap-memory.rs:62:24: 62:33
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:62:24: 62:31
                                         // + literal: Const { ty: fn() -> (Sender<ctrl_proto>, std::sync::mpsc::Receiver<ctrl_proto>) {channel::<ctrl_proto>}, val: Value(<ZST>) }
    }

    bb1: {
        _46 = const true;                // scope 0 at ui/hashmap/hashmap-memory.rs:62:14: 62:16
        _2 = move (_4.0: std::sync::mpsc::Sender<map_reduce::ctrl_proto>); // scope 0 at ui/hashmap/hashmap-memory.rs:62:14: 62:16
        _3 = move (_4.1: std::sync::mpsc::Receiver<map_reduce::ctrl_proto>); // scope 0 at ui/hashmap/hashmap-memory.rs:62:18: 62:20
        _6 = HashMap::<String, isize>::new() -> [return: bb2, unwind: bb40]; // scope 2 at ui/hashmap/hashmap-memory.rs:69:20: 69:34
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:69:20: 69:32
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> HashMap<String, isize> {HashMap::<String, isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _45 = const true;                // scope 2 at ui/hashmap/hashmap-memory.rs:69:9: 69:17
        _5 = move _6;                    // scope 2 at ui/hashmap/hashmap-memory.rs:69:9: 69:17
        _46 = const false;               // scope 2 at ui/hashmap/hashmap-memory.rs:71:23: 71:25
        _44 = const true;                // scope 2 at ui/hashmap/hashmap-memory.rs:71:23: 71:25
        _8 = move _2;                    // scope 2 at ui/hashmap/hashmap-memory.rs:71:23: 71:25
        _10 = &_1;                       // scope 2 at ui/hashmap/hashmap-memory.rs:71:27: 71:41
        _9 = <Vec<String> as Clone>::clone(move _10) -> [return: bb3, unwind: bb38]; // scope 2 at ui/hashmap/hashmap-memory.rs:71:27: 71:41
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:71:34: 71:39
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> Vec<String> {<Vec<String> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _44 = const false;               // scope 2 at ui/hashmap/hashmap-memory.rs:71:9: 71:42
        _7 = start_mappers(move _8, move _9) -> [return: bb4, unwind: bb38]; // scope 2 at ui/hashmap/hashmap-memory.rs:71:9: 71:42
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:71:9: 71:22
                                         // + literal: Const { ty: fn(Sender<ctrl_proto>, Vec<String>) {start_mappers}, val: Value(<ZST>) }
    }

    bb4: {
        _44 = const false;               // scope 2 at ui/hashmap/hashmap-memory.rs:71:41: 71:42
        _13 = &_1;                       // scope 2 at ui/hashmap/hashmap-memory.rs:73:31: 73:43
        _12 = Vec::<String>::len(move _13) -> [return: bb5, unwind: bb40]; // scope 2 at ui/hashmap/hashmap-memory.rs:73:31: 73:43
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:73:38: 73:41
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> usize {Vec::<String>::len}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = move _12 as isize (IntToInt); // scope 2 at ui/hashmap/hashmap-memory.rs:73:31: 73:52
        goto -> bb6;                     // scope 3 at ui/hashmap/hashmap-memory.rs:75:9: 87:10
    }

    bb6: {
        _15 = _11;                       // scope 3 at ui/hashmap/hashmap-memory.rs:75:15: 75:26
        _14 = Gt(move _15, const 0_isize); // scope 3 at ui/hashmap/hashmap-memory.rs:75:15: 75:30
        switchInt(move _14) -> [0: bb27, otherwise: bb7]; // scope 3 at ui/hashmap/hashmap-memory.rs:75:15: 75:30
    }

    bb7: {
        _18 = &_3;                       // scope 3 at ui/hashmap/hashmap-memory.rs:76:19: 76:28
        _17 = std::sync::mpsc::Receiver::<ctrl_proto>::recv(move _18) -> [return: bb8, unwind: bb40]; // scope 3 at ui/hashmap/hashmap-memory.rs:76:19: 76:28
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:76:22: 76:26
                                         // + literal: Const { ty: for<'a> fn(&'a std::sync::mpsc::Receiver<ctrl_proto>) -> Result<ctrl_proto, RecvError> {std::sync::mpsc::Receiver::<ctrl_proto>::recv}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = Result::<ctrl_proto, RecvError>::unwrap(move _17) -> [return: bb9, unwind: bb40]; // scope 3 at ui/hashmap/hashmap-memory.rs:76:19: 76:37
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:76:29: 76:35
                                         // + literal: Const { ty: fn(Result<ctrl_proto, RecvError>) -> ctrl_proto {Result::<ctrl_proto, RecvError>::unwrap}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = discriminant(_16);         // scope 3 at ui/hashmap/hashmap-memory.rs:76:19: 76:37
        switchInt(move _19) -> [0: bb10, 1: bb12, otherwise: bb11]; // scope 3 at ui/hashmap/hashmap-memory.rs:76:13: 76:37
    }

    bb10: {
        _21 = move ((_16 as find_reducer).0: std::vec::Vec<u8>); // scope 3 at ui/hashmap/hashmap-memory.rs:78:40: 78:41
        _22 = move ((_16 as find_reducer).1: std::sync::mpsc::Sender<isize>); // scope 3 at ui/hashmap/hashmap-memory.rs:78:43: 78:45
        _25 = &_5;                       // scope 5 at ui/hashmap/hashmap-memory.rs:80:23: 80:77
        _35 = &_21;                      // scope 5 at ui/hashmap/hashmap-memory.rs:80:52: 80:54
        _34 = _35;                       // scope 5 at ui/hashmap/hashmap-memory.rs:80:52: 80:54
        _33 = <Vec<u8> as Deref>::deref(move _34) -> [return: bb14, unwind: bb32]; // scope 5 at ui/hashmap/hashmap-memory.rs:80:52: 80:54
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:80:52: 80:54
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb11: {
        unreachable;                     // scope 3 at ui/hashmap/hashmap-memory.rs:76:19: 76:37
    }

    bb12: {
        _20 = CheckedSub(_11, const 1_isize); // scope 3 at ui/hashmap/hashmap-memory.rs:77:44: 77:60
        assert(!move (_20.1: bool), "attempt to compute `{} - {}`, which would overflow", _11, const 1_isize) -> [success: bb13, unwind: bb40]; // scope 3 at ui/hashmap/hashmap-memory.rs:77:44: 77:60
    }

    bb13: {
        _11 = move (_20.0: isize);       // scope 3 at ui/hashmap/hashmap-memory.rs:77:44: 77:60
        goto -> bb6;                     // scope 3 at ui/hashmap/hashmap-memory.rs:77:42: 77:63
    }

    bb14: {
        _32 = _33;                       // scope 5 at ui/hashmap/hashmap-memory.rs:80:52: 80:54
        _31 = from_utf8(move _32) -> [return: bb15, unwind: bb32]; // scope 5 at ui/hashmap/hashmap-memory.rs:80:37: 80:55
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:80:37: 80:51
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Result<&'a str, Utf8Error> {from_utf8}, val: Value(<ZST>) }
    }

    bb15: {
        _30 = Result::<&str, Utf8Error>::unwrap(move _31) -> [return: bb16, unwind: bb32]; // scope 5 at ui/hashmap/hashmap-memory.rs:80:37: 80:64
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:80:56: 80:62
                                         // + literal: Const { ty: fn(Result<&str, Utf8Error>) -> &str {Result::<&str, Utf8Error>::unwrap}, val: Value(<ZST>) }
    }

    bb16: {
        _29 = _30;                       // scope 5 at ui/hashmap/hashmap-memory.rs:80:37: 80:76
        _28 = <str as ToString>::to_string(move _29) -> [return: bb17, unwind: bb32]; // scope 5 at ui/hashmap/hashmap-memory.rs:80:37: 80:76
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:80:65: 80:74
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb17: {
        _27 = &_28;                      // scope 5 at ui/hashmap/hashmap-memory.rs:80:36: 80:76
        _26 = _27;                       // scope 5 at ui/hashmap/hashmap-memory.rs:80:36: 80:76
        _24 = HashMap::<String, isize>::get::<String>(move _25, move _26) -> [return: bb18, unwind: bb31]; // scope 5 at ui/hashmap/hashmap-memory.rs:80:23: 80:77
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:80:32: 80:35
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a HashMap<String, isize>, &'b String) -> Option<&'a isize> {HashMap::<String, isize>::get::<String>}, val: Value(<ZST>) }
    }

    bb18: {
        _36 = discriminant(_24);         // scope 5 at ui/hashmap/hashmap-memory.rs:80:23: 80:77
        switchInt(move _36) -> [0: bb19, 1: bb21, otherwise: bb20]; // scope 5 at ui/hashmap/hashmap-memory.rs:80:17: 80:77
    }

    bb19: {
        _23 = const 0_isize;             // scope 5 at ui/hashmap/hashmap-memory.rs:82:29: 82:34
        goto -> bb22;                    // scope 5 at ui/hashmap/hashmap-memory.rs:82:27: 82:37
    }

    bb20: {
        unreachable;                     // scope 5 at ui/hashmap/hashmap-memory.rs:80:23: 80:77
    }

    bb21: {
        _43 = deref_copy ((_24 as Some).0: &isize); // scope 5 at ui/hashmap/hashmap-memory.rs:81:25: 81:27
        _37 = (*_43);                    // scope 5 at ui/hashmap/hashmap-memory.rs:81:25: 81:27
        _38 = _37;                       // scope 6 at ui/hashmap/hashmap-memory.rs:81:38: 81:40
        _23 = move _38;                  // scope 6 at ui/hashmap/hashmap-memory.rs:81:34: 81:40
        goto -> bb22;                    // scope 5 at ui/hashmap/hashmap-memory.rs:81:42: 81:43
    }

    bb22: {
        drop(_28) -> [return: bb23, unwind: bb32]; // scope 5 at ui/hashmap/hashmap-memory.rs:83:17: 83:18
    }

    bb23: {
        _41 = &_22;                      // scope 5 at ui/hashmap/hashmap-memory.rs:84:17: 84:27
        _42 = _23;                       // scope 5 at ui/hashmap/hashmap-memory.rs:84:25: 84:26
        _40 = Sender::<isize>::send(move _41, move _42) -> [return: bb24, unwind: bb32]; // scope 5 at ui/hashmap/hashmap-memory.rs:84:17: 84:27
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:84:20: 84:24
                                         // + literal: Const { ty: for<'a> fn(&'a Sender<isize>, isize) -> Result<(), SendError<isize>> {Sender::<isize>::send}, val: Value(<ZST>) }
    }

    bb24: {
        _39 = Result::<(), SendError<isize>>::unwrap(move _40) -> [return: bb25, unwind: bb32]; // scope 5 at ui/hashmap/hashmap-memory.rs:84:17: 84:36
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:84:28: 84:34
                                         // + literal: Const { ty: fn(Result<(), SendError<isize>>) {Result::<(), SendError<isize>>::unwrap}, val: Value(<ZST>) }
    }

    bb25: {
        drop(_22) -> [return: bb26, unwind: bb33]; // scope 3 at ui/hashmap/hashmap-memory.rs:85:15: 85:16
    }

    bb26: {
        drop(_21) -> [return: bb6, unwind: bb40]; // scope 3 at ui/hashmap/hashmap-memory.rs:85:15: 85:16
    }

    bb27: {
        drop(_5) -> [return: bb28, unwind: bb34]; // scope 1 at ui/hashmap/hashmap-memory.rs:88:5: 88:6
    }

    bb28: {
        _45 = const false;               // scope 1 at ui/hashmap/hashmap-memory.rs:88:5: 88:6
        drop(_3) -> [return: bb29, unwind: bb42]; // scope 0 at ui/hashmap/hashmap-memory.rs:88:5: 88:6
    }

    bb29: {
        _46 = const false;               // scope 0 at ui/hashmap/hashmap-memory.rs:88:5: 88:6
        drop(_1) -> bb30;                // scope 0 at ui/hashmap/hashmap-memory.rs:88:5: 88:6
    }

    bb30: {
        return;                          // scope 0 at ui/hashmap/hashmap-memory.rs:88:6: 88:6
    }

    bb31 (cleanup): {
        drop(_28) -> bb32;               // scope 5 at ui/hashmap/hashmap-memory.rs:83:17: 83:18
    }

    bb32 (cleanup): {
        drop(_22) -> bb33;               // scope 3 at ui/hashmap/hashmap-memory.rs:85:15: 85:16
    }

    bb33 (cleanup): {
        drop(_21) -> bb40;               // scope 3 at ui/hashmap/hashmap-memory.rs:85:15: 85:16
    }

    bb34 (cleanup): {
        drop(_3) -> bb42;                // scope 0 at ui/hashmap/hashmap-memory.rs:88:5: 88:6
    }

    bb35 (cleanup): {
        drop(_1) -> bb36;                // scope 0 at ui/hashmap/hashmap-memory.rs:88:5: 88:6
    }

    bb36 (cleanup): {
        resume;                          // scope 0 at ui/hashmap/hashmap-memory.rs:61:5: 88:6
    }

    bb37 (cleanup): {
        drop(_8) -> bb40;                // scope 2 at ui/hashmap/hashmap-memory.rs:71:41: 71:42
    }

    bb38 (cleanup): {
        switchInt(_44) -> [0: bb40, otherwise: bb37]; // scope 2 at ui/hashmap/hashmap-memory.rs:71:41: 71:42
    }

    bb39 (cleanup): {
        drop(_5) -> bb34;                // scope 1 at ui/hashmap/hashmap-memory.rs:88:5: 88:6
    }

    bb40 (cleanup): {
        switchInt(_45) -> [0: bb34, otherwise: bb39]; // scope 1 at ui/hashmap/hashmap-memory.rs:88:5: 88:6
    }

    bb41 (cleanup): {
        drop(_2) -> bb35;                // scope 0 at ui/hashmap/hashmap-memory.rs:88:5: 88:6
    }

    bb42 (cleanup): {
        switchInt(_46) -> [0: bb35, otherwise: bb41]; // scope 0 at ui/hashmap/hashmap-memory.rs:88:5: 88:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/hashmap/hashmap-memory.rs:91:15: 91:15
    let _1: ();                          // in scope 0 at ui/hashmap/hashmap-memory.rs:92:5: 93:65
    let mut _2: std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _3: std::boxed::Box<[std::string::String]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[std::string::String; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[std::string::String; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: std::string::String;     // in scope 0 at ui/hashmap/hashmap-memory.rs:93:14: 93:63
    let mut _10: &str;                   // in scope 0 at ui/hashmap/hashmap-memory.rs:93:14: 93:63
    let _11: &str;                       // in scope 0 at ui/hashmap/hashmap-memory.rs:93:14: 93:51
    let mut _12: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _13: *const [std::string::String; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }

    bb0: {
        _5 = const 24_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 8_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [std::string::String; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _11 = const "../tests/run-pass/hashmap-memory.rs"; // scope 0 at ui/hashmap/hashmap-memory.rs:93:14: 93:51
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:93:14: 93:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = _11;                       // scope 0 at ui/hashmap/hashmap-memory.rs:93:14: 93:63
        _9 = <str as ToString>::to_string(move _10) -> [return: bb2, unwind: bb6]; // scope 0 at ui/hashmap/hashmap-memory.rs:93:14: 93:63
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:93:52: 93:61
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = (((_8.0: std::ptr::Unique<[std::string::String; 1]>).0: std::ptr::NonNull<[std::string::String; 1]>).0: *const [std::string::String; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_13) = [move _9];              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[std::string::String]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = slice::<impl [String]>::into_vec::<std::alloc::Global>(move _3) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[String]>) -> Vec<String> {slice::<impl [String]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = map_reduce(move _2) -> bb4; // scope 0 at ui/hashmap/hashmap-memory.rs:92:5: 93:65
                                         // mir::Constant
                                         // + span: ui/hashmap/hashmap-memory.rs:92:5: 92:27
                                         // + literal: Const { ty: fn(Vec<String>) {map_reduce}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/hashmap/hashmap-memory.rs:94:2: 94:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/hashmap/hashmap-memory.rs:91:1: 94:2
    }

    bb6 (cleanup): {
        _12 = alloc::alloc::box_free::<[String; 1], std::alloc::Global>(move (_8.0: std::ptr::Unique<[std::string::String; 1]>), move (_8.1: std::alloc::Global)) -> bb5; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[String; 1]>, std::alloc::Global) {alloc::alloc::box_free::<[String; 1], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

fn ctrl_proto::find_reducer(_1: Vec<u8>, _2: Sender<isize>) -> ctrl_proto {
    let mut _0: map_reduce::ctrl_proto;  // return place in scope 0 at ui/hashmap/hashmap-memory.rs:28:23: 28:35

    bb0: {
        _0 = ctrl_proto::find_reducer(move _1, move _2); // scope 0 at ui/hashmap/hashmap-memory.rs:28:23: 28:35
        return;                          // scope 0 at ui/hashmap/hashmap-memory.rs:28:23: 28:35
    }
}

// MIR FOR CTFE
fn ctrl_proto::find_reducer(_1: Vec<u8>, _2: Sender<isize>) -> ctrl_proto {
    let mut _0: map_reduce::ctrl_proto;  // return place in scope 0 at ui/hashmap/hashmap-memory.rs:28:23: 28:35

    bb0: {
        _0 = ctrl_proto::find_reducer(move _1, move _2); // scope 0 at ui/hashmap/hashmap-memory.rs:28:23: 28:35
        return;                          // scope 0 at ui/hashmap/hashmap-memory.rs:28:23: 28:35
    }
}
