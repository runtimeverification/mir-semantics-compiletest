// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn map(_1: String, _2: Box<dyn FnMut(String, String)>) -> () {
    debug filename => _1;
    debug emit => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: &mut std::boxed::Box<dyn std::ops::FnMut(std::string::String, std::string::String)>;
    let mut _5: (std::string::String, std::string::String);
    let mut _6: std::string::String;
    let mut _7: std::string::String;
    let _8: &str;
    let mut _9: bool;

    bb0: {
        _9 = const false;
        _4 = &mut _2;
        _9 = const true;
        _6 = move _1;
        _8 = const "1";
        _7 = <str as ToString>::to_string(_8) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        _9 = const false;
        _5 = (move _6, move _7);
        _3 = <Box<dyn FnMut(String, String)> as FnMut<(String, String)>>::call_mut(move _4, move _5) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _9 = const false;
        drop(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_6) -> [return: bb4, unwind terminate];
    }

    bb7 (cleanup): {
        switchInt(_9) -> [0: bb4, otherwise: bb6];
    }
}

fn start_mappers(_1: Sender<ctrl_proto>, _2: Vec<String>) -> () {
    debug ctrl => _1;
    debug inputs => _2;
    let mut _0: ();
    let mut _3: std::slice::Iter<'_, std::string::String>;
    let mut _4: &std::vec::Vec<std::string::String>;
    let mut _5: std::slice::Iter<'_, std::string::String>;
    let mut _6: std::option::Option<&std::string::String>;
    let mut _7: &mut std::slice::Iter<'_, std::string::String>;
    let mut _8: isize;
    let mut _11: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>;
    let _13: std::thread::JoinHandle<()>;
    let mut _14: [closure@ui/hashmap/hashmap-memory.rs:35:27: 35:33];
    let mut _15: bool;
    scope 1 {
        debug iter => _5;
        let _9: &std::string::String;
        scope 2 {
            debug i => _9;
            let _10: std::sync::mpsc::Sender<map_reduce::ctrl_proto>;
            scope 3 {
                debug ctrl => _10;
                let _12: std::string::String;
                scope 4 {
                    debug i => _12;
                }
            }
        }
    }

    bb0: {
        _15 = const false;
        _4 = &_2;
        _3 = <&Vec<String> as IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb13];
    }

    bb1: {
        _5 = move _3;
        goto -> bb2;
    }

    bb2: {
        _7 = &mut _5;
        _6 = <std::slice::Iter<'_, String> as Iterator>::next(_7) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _9 = ((_6 as Some).0: &std::string::String);
        _11 = &_1;
        _10 = <Sender<ctrl_proto> as Clone>::clone(move _11) -> [return: bb7, unwind: bb13];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        drop(_2) -> [return: bb11, unwind: bb14];
    }

    bb7: {
        _15 = const true;
        _12 = <String as Clone>::clone(_9) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        _15 = const false;
        _14 = [closure@ui/hashmap/hashmap-memory.rs:35:27: 35:33] { ctrl: move _10, i: move _12 };
        _13 = spawn::<[closure@ui/hashmap/hashmap-memory.rs:35:27: 35:33], ()>(move _14) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        drop(_13) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _15 = const false;
        goto -> bb2;
    }

    bb11: {
        drop(_1) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_2) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16 (cleanup): {
        drop(_10) -> [return: bb13, unwind terminate];
    }

    bb17 (cleanup): {
        switchInt(_15) -> [0: bb13, otherwise: bb16];
    }
}

fn start_mappers::{closure#0}(_1: [closure@ui/hashmap/hashmap-memory.rs:35:27: 35:33]) -> () {
    debug ctrl => (_1.0: std::sync::mpsc::Sender<map_reduce::ctrl_proto>);
    debug i => (_1.1: std::string::String);
    let mut _0: ();
    let mut _2: std::sync::mpsc::Sender<map_reduce::ctrl_proto>;
    let mut _3: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>;
    let mut _4: std::string::String;
    let mut _5: &std::string::String;
    let mut _6: bool;

    bb0: {
        _6 = const false;
        _3 = &(_1.0: std::sync::mpsc::Sender<map_reduce::ctrl_proto>);
        _2 = <Sender<ctrl_proto> as Clone>::clone(move _3) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = const true;
        _5 = &(_1.1: std::string::String);
        _4 = <String as Clone>::clone(move _5) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _6 = const false;
        _0 = map_task(move _2, move _4) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _6 = const false;
        drop(_1) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate];
    }

    bb8 (cleanup): {
        switchInt(_6) -> [0: bb5, otherwise: bb7];
    }
}

fn map_task(_1: Sender<ctrl_proto>, _2: String) -> () {
    debug ctrl => _1;
    debug input => _2;
    let mut _0: ();
    let mut _3: std::collections::HashMap<std::string::String, isize>;
    let mut _5: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>;
    let _6: ();
    let mut _7: std::string::String;
    let mut _8: std::boxed::Box<dyn std::ops::FnMut(std::string::String, std::string::String)>;
    let mut _9: std::boxed::Box<[closure@ui/hashmap/hashmap-memory.rs:58:31: 58:36]>;
    let mut _10: [closure@ui/hashmap/hashmap-memory.rs:58:31: 58:36];
    let mut _11: &mut std::collections::HashMap<std::string::String, isize>;
    let mut _12: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>;
    let _13: ();
    let mut _14: std::result::Result<(), std::sync::mpsc::SendError<map_reduce::ctrl_proto>>;
    let mut _15: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>;
    let mut _16: map_reduce::ctrl_proto;
    let mut _17: bool;
    let mut _18: bool;
    scope 1 {
        debug intermediates => _3;
        let _4: std::sync::mpsc::Sender<map_reduce::ctrl_proto>;
        scope 2 {
            debug ctrl_clone => _4;
        }
    }

    bb0: {
        _18 = const false;
        _17 = const false;
        _18 = const true;
        _3 = HashMap::<String, isize>::new() -> [return: bb1, unwind: bb17];
    }

    bb1: {
        _5 = &_1;
        _4 = <Sender<ctrl_proto> as Clone>::clone(move _5) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _18 = const false;
        _17 = const true;
        _7 = move _2;
        _11 = &mut _3;
        _12 = &_1;
        _10 = [closure@ui/hashmap/hashmap-memory.rs:58:31: 58:36] { intermediates: move _11, ctrl: move _12 };
        _9 = Box::<[closure@ui/hashmap/hashmap-memory.rs:58:31: 58:36]>::new(move _10) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _8 = move _9 as std::boxed::Box<dyn std::ops::FnMut(std::string::String, std::string::String)> (Pointer(Unsize));
        _17 = const false;
        _6 = map(move _7, move _8) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _17 = const false;
        _15 = &_4;
        _16 = ctrl_proto::mapper_done;
        _14 = Sender::<ctrl_proto>::send(move _15, move _16) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _13 = Result::<(), SendError<ctrl_proto>>::unwrap(move _14) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        drop(_4) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        drop(_3) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        drop(_1) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_4) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        drop(_3) -> [return: bb17, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        drop(_7) -> [return: bb10, unwind terminate];
    }

    bb15 (cleanup): {
        switchInt(_17) -> [0: bb10, otherwise: bb14];
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate];
    }

    bb17 (cleanup): {
        switchInt(_18) -> [0: bb12, otherwise: bb16];
    }
}

fn emit(_1: &mut HashMap<String, isize>, _2: Sender<ctrl_proto>, _3: String, _4: String) -> () {
    debug im => _1;
    debug ctrl => _2;
    debug key => _3;
    debug _val => _4;
    let mut _0: ();
    let mut _5: bool;
    let mut _6: &std::collections::HashMap<std::string::String, isize>;
    let _7: &std::string::String;
    let _8: std::sync::mpsc::Sender<isize>;
    let _9: std::sync::mpsc::Receiver<isize>;
    let mut _10: (std::sync::mpsc::Sender<isize>, std::sync::mpsc::Receiver<isize>);
    let _11: ();
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let _14: ();
    let mut _15: std::result::Result<(), std::sync::mpsc::SendError<map_reduce::ctrl_proto>>;
    let mut _16: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>;
    let mut _17: map_reduce::ctrl_proto;
    let mut _18: std::vec::Vec<u8>;
    let mut _19: &[u8];
    let _20: &[u8];
    let mut _21: &std::string::String;
    let mut _22: std::sync::mpsc::Sender<isize>;
    let _23: ();
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _27: std::result::Result<isize, std::sync::mpsc::RecvError>;
    let mut _28: &std::sync::mpsc::Receiver<isize>;
    let _29: ();
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &isize;
    let _37: std::option::Option<isize>;
    let mut _38: std::string::String;
    let mut _39: isize;
    let mut _43: bool;
    let mut _44: bool;
    scope 1 {
        debug tx => _8;
        debug rx => _9;
        let _26: isize;
        let mut _41: &[&str; 1];
        let mut _42: &[&str; 1];
        scope 2 {
            debug c => _26;
            let mut _40: &[&str; 2];
        }
    }

    bb0: {
        _44 = const false;
        _43 = const false;
        _44 = const true;
        _6 = &(*_1);
        _7 = &_3;
        _5 = HashMap::<String, isize>::contains_key::<String>(move _6, _7) -> [return: bb1, unwind: bb25];
    }

    bb1: {
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        drop(_4) -> [return: bb21, unwind: bb31];
    }

    bb3: {
        _10 = channel::<isize>() -> [return: bb4, unwind: bb25];
    }

    bb4: {
        _43 = const true;
        _8 = move (_10.0: std::sync::mpsc::Sender<isize>);
        _9 = move (_10.1: std::sync::mpsc::Receiver<isize>);
        _42 = const _;
        _13 = _42 as &[&str] (Pointer(Unsize));
        _12 = Arguments::<'_>::new_const(move _13) -> [return: bb5, unwind: bb24];
    }

    bb5: {
        _11 = _print(move _12) -> [return: bb6, unwind: bb24];
    }

    bb6: {
        _16 = &_2;
        _21 = &_3;
        _20 = String::as_bytes(move _21) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        _19 = _20;
        _18 = slice::<impl [u8]>::to_vec(move _19) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        _43 = const false;
        _22 = move _8;
        _17 = ctrl_proto::find_reducer(move _18, move _22);
        _15 = Sender::<ctrl_proto>::send(move _16, move _17) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        _14 = Result::<(), SendError<ctrl_proto>>::unwrap(move _15) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        _41 = const _;
        _25 = _41 as &[&str] (Pointer(Unsize));
        _24 = Arguments::<'_>::new_const(move _25) -> [return: bb11, unwind: bb24];
    }

    bb11: {
        _23 = _print(move _24) -> [return: bb12, unwind: bb24];
    }

    bb12: {
        _28 = &_9;
        _27 = std::sync::mpsc::Receiver::<isize>::recv(move _28) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        _26 = Result::<isize, RecvError>::unwrap(move _27) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _40 = const _;
        _31 = _40 as &[&str] (Pointer(Unsize));
        _36 = &_26;
        _35 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_36) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        _34 = [move _35];
        _33 = &_34;
        _32 = _33 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _30 = Arguments::<'_>::new_v1(move _31, move _32) -> [return: bb16, unwind: bb24];
    }

    bb16: {
        _29 = _print(move _30) -> [return: bb17, unwind: bb24];
    }

    bb17: {
        _44 = const false;
        _38 = move _3;
        _39 = _26;
        _37 = HashMap::<String, isize>::insert(_1, move _38, move _39) -> [return: bb18, unwind: bb24];
    }

    bb18: {
        drop(_9) -> [return: bb19, unwind: bb29];
    }

    bb19: {
        _43 = const false;
        drop(_4) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb21: {
        drop(_3) -> [return: bb22, unwind: bb26];
    }

    bb22: {
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_9) -> [return: bb29, unwind terminate];
    }

    bb25 (cleanup): {
        drop(_4) -> [return: bb31, unwind terminate];
    }

    bb26 (cleanup): {
        drop(_2) -> [return: bb27, unwind terminate];
    }

    bb27 (cleanup): {
        resume;
    }

    bb28 (cleanup): {
        drop(_8) -> [return: bb25, unwind terminate];
    }

    bb29 (cleanup): {
        switchInt(_43) -> [0: bb25, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_3) -> [return: bb26, unwind terminate];
    }

    bb31 (cleanup): {
        switchInt(_44) -> [0: bb26, otherwise: bb30];
    }
}

promoted[0] in emit: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in emit: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "receiving\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in emit: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "sending find_reducer\n"];
        _0 = &_1;
        return;
    }
}

fn map_task::{closure#0}(_1: &mut [closure@ui/hashmap/hashmap-memory.rs:58:31: 58:36], _2: String, _3: String) -> () {
    debug a => _2;
    debug b => _3;
    debug intermediates => (*((*_1).0: &mut std::collections::HashMap<std::string::String, isize>));
    debug ctrl => (*((*_1).1: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>));
    let mut _0: ();
    let mut _4: std::sync::mpsc::Sender<map_reduce::ctrl_proto>;
    let mut _5: std::string::String;
    let mut _6: std::string::String;
    let mut _7: &mut std::collections::HashMap<std::string::String, isize>;
    let mut _8: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>;
    let mut _9: bool;
    let mut _10: bool;

    bb0: {
        _10 = const false;
        _9 = const false;
        _10 = const true;
        _9 = const true;
        _7 = deref_copy ((*_1).0: &mut std::collections::HashMap<std::string::String, isize>);
        _8 = deref_copy ((*_1).1: &std::sync::mpsc::Sender<map_reduce::ctrl_proto>);
        _4 = <Sender<ctrl_proto> as Clone>::clone(_8) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _10 = const false;
        _5 = move _2;
        _9 = const false;
        _6 = move _3;
        _0 = emit(_7, move _4, move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        switchInt(_10) -> [0: bb4, otherwise: bb7];
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb3, unwind terminate];
    }

    bb6 (cleanup): {
        switchInt(_9) -> [0: bb3, otherwise: bb5];
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }
}

fn map_reduce(_1: Vec<String>) -> () {
    debug inputs => _1;
    let mut _0: ();
    let _2: std::sync::mpsc::Sender<map_reduce::ctrl_proto>;
    let _3: std::sync::mpsc::Receiver<map_reduce::ctrl_proto>;
    let mut _4: (std::sync::mpsc::Sender<map_reduce::ctrl_proto>, std::sync::mpsc::Receiver<map_reduce::ctrl_proto>);
    let mut _6: std::collections::HashMap<std::string::String, isize>;
    let _7: ();
    let mut _8: std::sync::mpsc::Sender<map_reduce::ctrl_proto>;
    let mut _9: std::vec::Vec<std::string::String>;
    let mut _10: &std::vec::Vec<std::string::String>;
    let mut _12: usize;
    let mut _13: &std::vec::Vec<std::string::String>;
    let mut _14: bool;
    let mut _15: isize;
    let mut _16: map_reduce::ctrl_proto;
    let mut _17: std::result::Result<map_reduce::ctrl_proto, std::sync::mpsc::RecvError>;
    let mut _18: &std::sync::mpsc::Receiver<map_reduce::ctrl_proto>;
    let mut _19: isize;
    let mut _23: std::option::Option<&isize>;
    let mut _24: &std::collections::HashMap<std::string::String, isize>;
    let _25: &std::string::String;
    let _26: std::string::String;
    let mut _27: &str;
    let _28: &str;
    let mut _29: std::result::Result<&str, std::str::Utf8Error>;
    let mut _30: &[u8];
    let _31: &[u8];
    let _32: &std::vec::Vec<u8>;
    let mut _33: isize;
    let _35: ();
    let mut _36: std::result::Result<(), std::sync::mpsc::SendError<isize>>;
    let mut _37: &std::sync::mpsc::Sender<isize>;
    let mut _38: isize;
    let mut _39: &isize;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    scope 1 {
        debug tx => _2;
        debug rx => _3;
        let mut _5: std::collections::HashMap<std::string::String, isize>;
        scope 2 {
            debug reducers => _5;
            let mut _11: isize;
            scope 3 {
                debug num_mappers => _11;
                let _20: std::vec::Vec<u8>;
                let _21: std::sync::mpsc::Sender<isize>;
                scope 4 {
                    debug k => _20;
                    debug cc => _21;
                    let mut _22: isize;
                    scope 5 {
                        debug c => _22;
                        let _34: isize;
                        scope 6 {
                            debug _c => _34;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _4 = channel::<ctrl_proto>() -> [return: bb1, unwind: bb33];
    }

    bb1: {
        _42 = const true;
        _2 = move (_4.0: std::sync::mpsc::Sender<map_reduce::ctrl_proto>);
        _3 = move (_4.1: std::sync::mpsc::Receiver<map_reduce::ctrl_proto>);
        _6 = HashMap::<String, isize>::new() -> [return: bb2, unwind: bb38];
    }

    bb2: {
        _41 = const true;
        _5 = move _6;
        _42 = const false;
        _40 = const true;
        _8 = move _2;
        _10 = &_1;
        _9 = <Vec<String> as Clone>::clone(move _10) -> [return: bb3, unwind: bb36];
    }

    bb3: {
        _40 = const false;
        _7 = start_mappers(move _8, move _9) -> [return: bb4, unwind: bb36];
    }

    bb4: {
        _40 = const false;
        _13 = &_1;
        _12 = Vec::<String>::len(move _13) -> [return: bb5, unwind: bb38];
    }

    bb5: {
        _11 = move _12 as isize (IntToInt);
        goto -> bb6;
    }

    bb6: {
        _15 = _11;
        _14 = Gt(move _15, const 0_isize);
        switchInt(move _14) -> [0: bb25, otherwise: bb7];
    }

    bb7: {
        _18 = &_3;
        _17 = std::sync::mpsc::Receiver::<ctrl_proto>::recv(move _18) -> [return: bb8, unwind: bb38];
    }

    bb8: {
        _16 = Result::<ctrl_proto, RecvError>::unwrap(move _17) -> [return: bb9, unwind: bb38];
    }

    bb9: {
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        _20 = move ((_16 as find_reducer).0: std::vec::Vec<u8>);
        _21 = move ((_16 as find_reducer).1: std::sync::mpsc::Sender<isize>);
        _24 = &_5;
        _32 = &_20;
        _31 = <Vec<u8> as Deref>::deref(_32) -> [return: bb13, unwind: bb30];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        _11 = Sub(_11, const 1_isize);
        goto -> bb6;
    }

    bb13: {
        _30 = _31;
        _29 = from_utf8(move _30) -> [return: bb14, unwind: bb30];
    }

    bb14: {
        _28 = Result::<&str, Utf8Error>::unwrap(move _29) -> [return: bb15, unwind: bb30];
    }

    bb15: {
        _27 = _28;
        _26 = <str as ToString>::to_string(move _27) -> [return: bb16, unwind: bb30];
    }

    bb16: {
        _25 = &_26;
        _23 = HashMap::<String, isize>::get::<String>(move _24, _25) -> [return: bb17, unwind: bb29];
    }

    bb17: {
        _33 = discriminant(_23);
        switchInt(move _33) -> [0: bb18, 1: bb19, otherwise: bb11];
    }

    bb18: {
        _22 = const 0_isize;
        goto -> bb20;
    }

    bb19: {
        _39 = deref_copy ((_23 as Some).0: &isize);
        _34 = (*_39);
        _22 = _34;
        goto -> bb20;
    }

    bb20: {
        drop(_26) -> [return: bb21, unwind: bb30];
    }

    bb21: {
        _37 = &_21;
        _38 = _22;
        _36 = Sender::<isize>::send(move _37, move _38) -> [return: bb22, unwind: bb30];
    }

    bb22: {
        _35 = Result::<(), SendError<isize>>::unwrap(move _36) -> [return: bb23, unwind: bb30];
    }

    bb23: {
        drop(_21) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        drop(_20) -> [return: bb6, unwind: bb38];
    }

    bb25: {
        drop(_5) -> [return: bb26, unwind: bb32];
    }

    bb26: {
        _41 = const false;
        drop(_3) -> [return: bb27, unwind: bb40];
    }

    bb27: {
        _42 = const false;
        drop(_1) -> [return: bb28, unwind continue];
    }

    bb28: {
        return;
    }

    bb29 (cleanup): {
        drop(_26) -> [return: bb30, unwind terminate];
    }

    bb30 (cleanup): {
        drop(_21) -> [return: bb31, unwind terminate];
    }

    bb31 (cleanup): {
        drop(_20) -> [return: bb38, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_3) -> [return: bb40, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_1) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        resume;
    }

    bb35 (cleanup): {
        drop(_8) -> [return: bb38, unwind terminate];
    }

    bb36 (cleanup): {
        switchInt(_40) -> [0: bb38, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_5) -> [return: bb32, unwind terminate];
    }

    bb38 (cleanup): {
        switchInt(_41) -> [0: bb32, otherwise: bb37];
    }

    bb39 (cleanup): {
        drop(_2) -> [return: bb33, unwind terminate];
    }

    bb40 (cleanup): {
        switchInt(_42) -> [0: bb33, otherwise: bb39];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::vec::Vec<std::string::String>;
    let mut _3: std::boxed::Box<[std::string::String]>;
    let mut _4: std::boxed::Box<[std::string::String; 1]>;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: *mut u8;
    let mut _8: std::boxed::Box<[std::string::String; 1]>;
    let mut _9: std::string::String;
    let _10: &str;
    let mut _11: &mut std::boxed::Box<[std::string::String; 1]>;
    let mut _12: ();
    let mut _13: *const [std::string::String; 1];
    let mut _14: *const ();
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    scope 1 {
    }

    bb0: {
        _5 = SizeOf([std::string::String; 1]);
        _6 = AlignOf([std::string::String; 1]);
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [std::string::String; 1]);
        _10 = const "../tests/run-pass/hashmap-memory.rs";
        _9 = <str as ToString>::to_string(_10) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _13 = (((_8.0: std::ptr::Unique<[std::string::String; 1]>).0: std::ptr::NonNull<[std::string::String; 1]>).0: *const [std::string::String; 1]);
        _14 = _13 as *const () (PtrToPtr);
        _15 = _14 as usize (Transmute);
        _16 = AlignOf(std::string::String);
        _17 = Sub(_16, const 1_usize);
        _18 = BitAnd(_15, _17);
        _19 = Eq(_18, const 0_usize);
        assert(_19, "misaligned pointer dereference: address must be a multiple of {} but is {}", _16, _15) -> [success: bb7, unwind unreachable];
    }

    bb3: {
        _1 = map_reduce(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        _11 = &mut _8;
        _12 = <Box<[String; 1]> as Drop>::drop(move _11) -> [return: bb5, unwind terminate];
    }

    bb7: {
        (*_13) = [move _9];
        _4 = move _8;
        _3 = move _4 as std::boxed::Box<[std::string::String]> (Pointer(Unsize));
        _2 = slice::<impl [String]>::into_vec::<std::alloc::Global>(move _3) -> [return: bb3, unwind continue];
    }
}

fn ctrl_proto::find_reducer(_1: Vec<u8>, _2: Sender<isize>) -> ctrl_proto {
    let mut _0: map_reduce::ctrl_proto;

    bb0: {
        _0 = ctrl_proto::find_reducer(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn ctrl_proto::find_reducer(_1: Vec<u8>, _2: Sender<isize>) -> ctrl_proto {
    let mut _0: map_reduce::ctrl_proto;

    bb0: {
        _0 = ctrl_proto::find_reducer(move _1, move _2);
        return;
    }
}
