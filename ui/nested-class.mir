// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: main::b;
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: isize;
    let mut _9: isize;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&isize, &isize);
    let mut _14: &isize;
    let _15: isize;
    let mut _16: &main::b;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: isize;
    let mut _22: isize;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug z => _1;
        let _4: &isize;
        let _5: &isize;
        let _17: &isize;
        let _18: &isize;
        let mut _26: &isize;
        let mut _27: &isize;
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
        scope 4 {
            debug left_val => _17;
            debug right_val => _18;
            let _23: core::panicking::AssertKind;
            scope 5 {
                debug kind => _23;
            }
        }
    }

    bb0: {
        _1 = b(const 42_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &(_1.0: isize);
        _27 = const _;
        _2 = (move _3, _27);
        _4 = (_2.0: &isize);
        _5 = (_2.1: &isize);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<isize, isize>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _16 = &_1;
        _15 = b::do_stuff(move _16) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        _26 = const _;
        _13 = (move _14, _26);
        _17 = (_13.0: &isize);
        _18 = (_13.1: &isize);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<isize, isize>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 37_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 42_isize;
        _0 = &_1;
        return;
    }
}

fn main::<impl at ui/nested-class.rs:10:5: 10:11>::do_stuff(_1: &b) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 37_isize;
        return;
    }
}

fn b(_1: isize) -> b {
    debug i => _1;
    let mut _0: main::b;

    bb0: {
        _0 = b { i: _1 };
        return;
    }
}
