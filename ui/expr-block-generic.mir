// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_generic(_1: T, _2: F) -> () {
    debug expected => _1;                // in scope 0 at ui/expr-block-generic.rs:4:30: 4:38
    debug eq => _2;                      // in scope 0 at ui/expr-block-generic.rs:4:43: 4:45
    let mut _0: ();                      // return place in scope 0 at ui/expr-block-generic.rs:4:50: 4:50
    let _3: T;                           // in scope 0 at ui/expr-block-generic.rs:5:9: 5:15
    let mut _4: &T;                      // in scope 0 at ui/expr-block-generic.rs:5:23: 5:39
    let mut _5: bool;                    // in scope 0 at ui/expr-block-generic.rs:6:5: 6:34
    let mut _6: bool;                    // in scope 0 at ui/expr-block-generic.rs:6:13: 6:33
    let mut _7: F;                       // in scope 0 at ui/expr-block-generic.rs:6:13: 6:15
    let mut _8: (T, T);                  // in scope 0 at ui/expr-block-generic.rs:6:13: 6:33
    let mut _9: T;                       // in scope 0 at ui/expr-block-generic.rs:6:16: 6:24
    let mut _10: T;                      // in scope 0 at ui/expr-block-generic.rs:6:26: 6:32
    let mut _11: !;                      // in scope 0 at ui/expr-block-generic.rs:6:5: 6:34
    let mut _12: bool;                   // in scope 0 at ui/expr-block-generic.rs:7:1: 7:2
    let mut _13: bool;                   // in scope 0 at ui/expr-block-generic.rs:7:1: 7:2
    scope 1 {
        debug actual => _3;              // in scope 1 at ui/expr-block-generic.rs:5:9: 5:15
    }

    bb0: {
        _13 = const false;               // scope 0 at ui/expr-block-generic.rs:5:9: 5:15
        _12 = const false;               // scope 0 at ui/expr-block-generic.rs:5:9: 5:15
        _13 = const true;                // scope 0 at ui/expr-block-generic.rs:5:9: 5:15
        _12 = const true;                // scope 0 at ui/expr-block-generic.rs:5:9: 5:15
        _4 = &_1;                        // scope 0 at ui/expr-block-generic.rs:5:23: 5:39
        _3 = <T as Clone>::clone(move _4) -> [return: bb1, unwind: bb8]; // scope 0 at ui/expr-block-generic.rs:5:23: 5:39
                                         // mir::Constant
                                         // + span: ui/expr-block-generic.rs:5:32: 5:37
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = const false;               // scope 1 at ui/expr-block-generic.rs:6:13: 6:15
        _7 = move _2;                    // scope 1 at ui/expr-block-generic.rs:6:13: 6:15
        _13 = const false;               // scope 1 at ui/expr-block-generic.rs:6:16: 6:24
        _9 = move _1;                    // scope 1 at ui/expr-block-generic.rs:6:16: 6:24
        _10 = move _3;                   // scope 1 at ui/expr-block-generic.rs:6:26: 6:32
        _8 = (move _9, move _10);        // scope 1 at ui/expr-block-generic.rs:6:13: 6:33
        _6 = <F as FnOnce<(T, T)>>::call_once(move _7, move _8) -> [return: bb2, unwind: bb8]; // scope 1 at ui/expr-block-generic.rs:6:13: 6:33
                                         // mir::Constant
                                         // + span: ui/expr-block-generic.rs:6:13: 6:15
                                         // + literal: Const { ty: extern "rust-call" fn(F, (T, T)) -> <F as FnOnce<(T, T)>>::Output {<F as FnOnce<(T, T)>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Not(move _6);               // scope 1 at ui/expr-block-generic.rs:6:5: 6:34
        switchInt(move _5) -> [0: bb4, otherwise: bb3]; // scope 1 at ui/expr-block-generic.rs:6:5: 6:34
    }

    bb3: {
        _11 = core::panicking::panic(const "assertion failed: eq(expected, actual)") -> bb8; // scope 1 at ui/expr-block-generic.rs:6:5: 6:34
                                         // mir::Constant
                                         // + span: ui/expr-block-generic.rs:6:5: 6:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        return;                          // scope 0 at ui/expr-block-generic.rs:7:2: 7:2
    }

    bb5 (cleanup): {
        switchInt(_13) -> [0: bb6, otherwise: bb9]; // scope 0 at ui/expr-block-generic.rs:7:1: 7:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/expr-block-generic.rs:4:1: 7:2
    }

    bb7 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/expr-block-generic.rs:7:1: 7:2
    }

    bb8 (cleanup): {
        switchInt(_12) -> [0: bb5, otherwise: bb7]; // scope 0 at ui/expr-block-generic.rs:7:1: 7:2
    }

    bb9 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/expr-block-generic.rs:7:1: 7:2
    }
}

fn test_bool() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr-block-generic.rs:9:16: 9:16
    let _1: ();                          // in scope 0 at ui/expr-block-generic.rs:11:5: 11:48

    bb0: {
        _1 = test_generic::<bool, fn(bool, bool) -> bool {compare_bool}>(const true, compare_bool) -> bb1; // scope 0 at ui/expr-block-generic.rs:11:5: 11:48
                                         // mir::Constant
                                         // + span: ui/expr-block-generic.rs:11:5: 11:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(bool, fn(bool, bool) -> bool {compare_bool}) {test_generic::<bool, fn(bool, bool) -> bool {compare_bool}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/expr-block-generic.rs:11:35: 11:47
                                         // + literal: Const { ty: fn(bool, bool) -> bool {compare_bool}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/expr-block-generic.rs:12:2: 12:2
    }
}

fn compare_bool(_1: bool, _2: bool) -> bool {
    debug b1 => _1;                      // in scope 0 at ui/expr-block-generic.rs:10:21: 10:23
    debug b2 => _2;                      // in scope 0 at ui/expr-block-generic.rs:10:31: 10:33
    let mut _0: bool;                    // return place in scope 0 at ui/expr-block-generic.rs:10:44: 10:48
    let mut _3: bool;                    // in scope 0 at ui/expr-block-generic.rs:10:58: 10:60
    let mut _4: bool;                    // in scope 0 at ui/expr-block-generic.rs:10:64: 10:66

    bb0: {
        _3 = _1;                         // scope 0 at ui/expr-block-generic.rs:10:58: 10:60
        _4 = _2;                         // scope 0 at ui/expr-block-generic.rs:10:64: 10:66
        _0 = Eq(move _3, move _4);       // scope 0 at ui/expr-block-generic.rs:10:58: 10:66
        return;                          // scope 0 at ui/expr-block-generic.rs:10:69: 10:69
    }
}

fn <impl at ui/expr-block-generic.rs:14:10: 14:15>::clone(_1: &Pair) -> Pair {
    debug self => _1;                    // in scope 0 at ui/expr-block-generic.rs:14:10: 14:15
    let mut _0: Pair;                    // return place in scope 0 at ui/expr-block-generic.rs:14:10: 14:15
    let mut _2: isize;                   // in scope 0 at ui/expr-block-generic.rs:16:5: 16:13
    let mut _3: &isize;                  // in scope 0 at ui/expr-block-generic.rs:16:5: 16:13
    let _4: &isize;                      // in scope 0 at ui/expr-block-generic.rs:16:5: 16:13
    let mut _5: isize;                   // in scope 0 at ui/expr-block-generic.rs:17:5: 17:13
    let mut _6: &isize;                  // in scope 0 at ui/expr-block-generic.rs:17:5: 17:13
    let _7: &isize;                      // in scope 0 at ui/expr-block-generic.rs:17:5: 17:13

    bb0: {
        _4 = &((*_1).0: isize);          // scope 0 at ui/expr-block-generic.rs:16:5: 16:13
        _3 = _4;                         // scope 0 at ui/expr-block-generic.rs:16:5: 16:13
        _2 = (*_3);                      // scope 0 at ui/expr-block-generic.rs:16:5: 16:13
        _7 = &((*_1).1: isize);          // scope 0 at ui/expr-block-generic.rs:17:5: 17:13
        _6 = _7;                         // scope 0 at ui/expr-block-generic.rs:17:5: 17:13
        _5 = (*_6);                      // scope 0 at ui/expr-block-generic.rs:17:5: 17:13
        _0 = Pair { a: move _2, b: move _5 }; // scope 0 at ui/expr-block-generic.rs:14:10: 14:15
        return;                          // scope 0 at ui/expr-block-generic.rs:14:15: 14:15
    }
}

fn test_rec() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr-block-generic.rs:20:15: 20:15
    let _1: ();                          // in scope 0 at ui/expr-block-generic.rs:24:5: 24:60
    let mut _2: Pair;                    // in scope 0 at ui/expr-block-generic.rs:24:29: 24:46

    bb0: {
        _2 = Pair { a: const 1_isize, b: const 2_isize }; // scope 0 at ui/expr-block-generic.rs:24:29: 24:46
        _1 = test_generic::<Pair, fn(Pair, Pair) -> bool {compare_rec}>(move _2, compare_rec) -> bb1; // scope 0 at ui/expr-block-generic.rs:24:5: 24:60
                                         // mir::Constant
                                         // + span: ui/expr-block-generic.rs:24:5: 24:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Pair, fn(Pair, Pair) -> bool {compare_rec}) {test_generic::<Pair, fn(Pair, Pair) -> bool {compare_rec}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/expr-block-generic.rs:24:48: 24:59
                                         // + literal: Const { ty: fn(Pair, Pair) -> bool {compare_rec}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/expr-block-generic.rs:25:2: 25:2
    }
}

fn compare_rec(_1: Pair, _2: Pair) -> bool {
    debug t1 => _1;                      // in scope 0 at ui/expr-block-generic.rs:21:20: 21:22
    debug t2 => _2;                      // in scope 0 at ui/expr-block-generic.rs:21:30: 21:32
    let mut _0: bool;                    // return place in scope 0 at ui/expr-block-generic.rs:21:43: 21:47
    let mut _3: bool;                    // in scope 0 at ui/expr-block-generic.rs:22:9: 22:21
    let mut _4: isize;                   // in scope 0 at ui/expr-block-generic.rs:22:9: 22:13
    let mut _5: isize;                   // in scope 0 at ui/expr-block-generic.rs:22:17: 22:21
    let mut _6: bool;                    // in scope 0 at ui/expr-block-generic.rs:22:25: 22:37
    let mut _7: isize;                   // in scope 0 at ui/expr-block-generic.rs:22:25: 22:29
    let mut _8: isize;                   // in scope 0 at ui/expr-block-generic.rs:22:33: 22:37

    bb0: {
        _4 = (_1.0: isize);              // scope 0 at ui/expr-block-generic.rs:22:9: 22:13
        _5 = (_2.0: isize);              // scope 0 at ui/expr-block-generic.rs:22:17: 22:21
        _3 = Eq(move _4, move _5);       // scope 0 at ui/expr-block-generic.rs:22:9: 22:21
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/expr-block-generic.rs:22:9: 22:37
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/expr-block-generic.rs:22:9: 22:37
        goto -> bb3;                     // scope 0 at ui/expr-block-generic.rs:22:9: 22:37
    }

    bb2: {
        _7 = (_1.1: isize);              // scope 0 at ui/expr-block-generic.rs:22:25: 22:29
        _8 = (_2.1: isize);              // scope 0 at ui/expr-block-generic.rs:22:33: 22:37
        _6 = Eq(move _7, move _8);       // scope 0 at ui/expr-block-generic.rs:22:25: 22:37
        _0 = move _6;                    // scope 0 at ui/expr-block-generic.rs:22:9: 22:37
        goto -> bb3;                     // scope 0 at ui/expr-block-generic.rs:22:9: 22:37
    }

    bb3: {
        return;                          // scope 0 at ui/expr-block-generic.rs:23:6: 23:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr-block-generic.rs:27:15: 27:15
    let _1: ();                          // in scope 0 at ui/expr-block-generic.rs:27:17: 27:28
    let _2: ();                          // in scope 0 at ui/expr-block-generic.rs:27:30: 27:40

    bb0: {
        _1 = test_bool() -> bb1;         // scope 0 at ui/expr-block-generic.rs:27:17: 27:28
                                         // mir::Constant
                                         // + span: ui/expr-block-generic.rs:27:17: 27:26
                                         // + literal: Const { ty: fn() {test_bool}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = test_rec() -> bb2;          // scope 0 at ui/expr-block-generic.rs:27:30: 27:40
                                         // mir::Constant
                                         // + span: ui/expr-block-generic.rs:27:30: 27:38
                                         // + literal: Const { ty: fn() {test_rec}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/expr-block-generic.rs:27:43: 27:43
    }
}
