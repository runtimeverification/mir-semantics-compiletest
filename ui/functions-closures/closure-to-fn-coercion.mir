// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const FOO: fn(u8) -> u8 = {
    let mut _0: fn(u8) -> u8;
    let mut _1: [closure@ui/functions-closures/closure-to-fn-coercion.rs:4:27: 4:34];

    bb0: {
        StorageLive(_1);
        _1 = [closure@ui/functions-closures/closure-to-fn-coercion.rs:4:27: 4:34];
        _0 = move _1 as fn(u8) -> u8 (Pointer(ClosureFnPointer(Normal)));
        StorageDead(_1);
        return;
    }
}

fn FOO::{closure#0}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:4:27: 4:34], _2: u8) -> u8 {
    debug v => _2;
    let mut _0: u8;

    bb0: {
        _0 = _2;
        return;
    }
}

const BAR: [for<'a> fn(&'a mut u32); 5] = {
    let mut _0: [for<'a> fn(&'a mut u32); 5];
    let mut _1: for<'a> fn(&'a mut u32);
    let mut _2: [closure@ui/functions-closures/closure-to-fn-coercion.rs:7:5: 7:18];
    let mut _3: for<'a> fn(&'a mut u32);
    let mut _4: [closure@ui/functions-closures/closure-to-fn-coercion.rs:8:5: 8:18];
    let mut _5: for<'a> fn(&'a mut u32);
    let mut _6: [closure@ui/functions-closures/closure-to-fn-coercion.rs:9:5: 9:18];
    let mut _7: for<'a> fn(&'a mut u32);
    let mut _8: [closure@ui/functions-closures/closure-to-fn-coercion.rs:10:5: 10:18];
    let mut _9: for<'a> fn(&'a mut u32);
    let mut _10: [closure@ui/functions-closures/closure-to-fn-coercion.rs:11:5: 11:18];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = [closure@ui/functions-closures/closure-to-fn-coercion.rs:7:5: 7:18];
        _1 = move _2 as for<'a> fn(&'a mut u32) (Pointer(ClosureFnPointer(Normal)));
        StorageDead(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = [closure@ui/functions-closures/closure-to-fn-coercion.rs:8:5: 8:18];
        _3 = move _4 as for<'a> fn(&'a mut u32) (Pointer(ClosureFnPointer(Normal)));
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = [closure@ui/functions-closures/closure-to-fn-coercion.rs:9:5: 9:18];
        _5 = move _6 as for<'a> fn(&'a mut u32) (Pointer(ClosureFnPointer(Normal)));
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = [closure@ui/functions-closures/closure-to-fn-coercion.rs:10:5: 10:18];
        _7 = move _8 as for<'a> fn(&'a mut u32) (Pointer(ClosureFnPointer(Normal)));
        StorageDead(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = [closure@ui/functions-closures/closure-to-fn-coercion.rs:11:5: 11:18];
        _9 = move _10 as for<'a> fn(&'a mut u32) (Pointer(ClosureFnPointer(Normal)));
        StorageDead(_10);
        _0 = [move _1, move _3, move _5, move _7, move _9];
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        StorageDead(_1);
        return;
    }
}

BAR::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

fn BAR::{closure#0}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:7:5: 7:18], _2: &mut u32) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn BAR::{closure#1}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:8:5: 8:18], _2: &mut u32) -> () {
    debug v => _2;
    let mut _0: ();

    bb0: {
        (*_2) = Add((*_2), const 1_u32);
        return;
    }
}

fn BAR::{closure#2}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:9:5: 9:18], _2: &mut u32) -> () {
    debug v => _2;
    let mut _0: ();

    bb0: {
        (*_2) = Add((*_2), const 2_u32);
        return;
    }
}

fn BAR::{closure#3}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:10:5: 10:18], _2: &mut u32) -> () {
    debug v => _2;
    let mut _0: ();

    bb0: {
        (*_2) = Add((*_2), const 3_u32);
        return;
    }
}

fn BAR::{closure#4}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:11:5: 11:18], _2: &mut u32) -> () {
    debug v => _2;
    let mut _0: ();

    bb0: {
        (*_2) = Add((*_2), const 4_u32);
        return;
    }
}

fn func_specific() -> fn() -> u32 {
    let mut _0: fn() -> u32;

    bb0: {
        _0 = const ZeroSized: [closure@ui/functions-closures/closure-to-fn-coercion.rs:14:5: 14:7] as fn() -> u32 (Pointer(ClosureFnPointer(Normal)));
        return;
    }
}

fn func_specific::{closure#0}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:14:5: 14:7]) -> u32 {
    let mut _0: u32;

    bb0: {
        _0 = const 42_u32;
        return;
    }
}

fn generic(_1: T) -> fn() -> usize {
    let mut _0: fn() -> usize;

    bb0: {
        _0 = const ZeroSized: [closure@ui/functions-closures/closure-to-fn-coercion.rs:18:5: 18:7] as fn() -> usize (Pointer(ClosureFnPointer(Normal)));
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn generic::{closure#0}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:18:5: 18:7]) -> usize {
    let mut _0: usize;

    bb0: {
        _0 = std::mem::size_of::<T>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: u32;
    let mut _4: fn() -> u32;
    let _5: &u32;
    let _6: &u32;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: u32;
    let mut _10: u32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let _14: fn(u8) -> u8;
    let mut _15: (&u8, &u8);
    let mut _16: &u8;
    let _17: u8;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: u8;
    let mut _23: u8;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&u8, &u8);
    let mut _28: &u8;
    let _29: u8;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: u8;
    let mut _35: u8;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&u32, &u32);
    let mut _41: &u32;
    let _42: u32;
    let _43: ();
    let mut _44: for<'a> fn(&'a mut u32);
    let mut _45: [for<'a> fn(&'a mut u32); 5];
    let _46: usize;
    let mut _47: usize;
    let mut _48: bool;
    let mut _49: &mut u32;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: u32;
    let mut _55: u32;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: (&u32, &u32);
    let mut _60: &u32;
    let _61: u32;
    let _62: ();
    let mut _63: for<'a> fn(&'a mut u32);
    let mut _64: [for<'a> fn(&'a mut u32); 5];
    let _65: usize;
    let mut _66: usize;
    let mut _67: bool;
    let mut _68: &mut u32;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: u32;
    let mut _74: u32;
    let _76: !;
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _78: (&u32, &u32);
    let mut _79: &u32;
    let _80: u32;
    let _81: ();
    let mut _82: for<'a> fn(&'a mut u32);
    let mut _83: [for<'a> fn(&'a mut u32); 5];
    let _84: usize;
    let mut _85: usize;
    let mut _86: bool;
    let mut _87: &mut u32;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: u32;
    let mut _93: u32;
    let _95: !;
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _97: (&u32, &u32);
    let mut _98: &u32;
    let _99: u32;
    let _100: ();
    let mut _101: for<'a> fn(&'a mut u32);
    let mut _102: [for<'a> fn(&'a mut u32); 5];
    let _103: usize;
    let mut _104: usize;
    let mut _105: bool;
    let mut _106: &mut u32;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: u32;
    let mut _112: u32;
    let _114: !;
    let mut _115: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _116: (&u32, &u32);
    let mut _117: &u32;
    let _118: u32;
    let _119: ();
    let mut _120: for<'a> fn(&'a mut u32);
    let mut _121: [for<'a> fn(&'a mut u32); 5];
    let _122: usize;
    let mut _123: usize;
    let mut _124: bool;
    let mut _125: &mut u32;
    let mut _128: bool;
    let mut _129: bool;
    let mut _130: u32;
    let mut _131: u32;
    let _133: !;
    let mut _134: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _135: (&usize, &usize);
    let mut _136: &usize;
    let _137: usize;
    let mut _138: fn() -> usize;
    let mut _141: bool;
    let mut _142: bool;
    let mut _143: usize;
    let mut _144: usize;
    let _146: !;
    let mut _147: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _156: &u32;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug foo => _14;
        let _18: &u8;
        let _19: &u8;
        let _30: &u8;
        let _31: &u8;
        let mut _39: u32;
        let mut _154: &u8;
        let mut _155: &u8;
        scope 4 {
            debug left_val => _18;
            debug right_val => _19;
            let _24: core::panicking::AssertKind;
            scope 5 {
                debug kind => _24;
            }
        }
        scope 6 {
            debug left_val => _30;
            debug right_val => _31;
            let _36: core::panicking::AssertKind;
            scope 7 {
                debug kind => _36;
            }
        }
        scope 8 {
            debug a => _39;
            let _50: &u32;
            let _51: &u32;
            let _69: &u32;
            let _70: &u32;
            let _88: &u32;
            let _89: &u32;
            let _107: &u32;
            let _108: &u32;
            let _126: &u32;
            let _127: &u32;
            let _139: &usize;
            let _140: &usize;
            let mut _148: &usize;
            let mut _149: &u32;
            let mut _150: &u32;
            let mut _151: &u32;
            let mut _152: &u32;
            let mut _153: &u32;
            scope 9 {
                debug left_val => _50;
                debug right_val => _51;
                let _56: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _56;
                }
            }
            scope 11 {
                debug left_val => _69;
                debug right_val => _70;
                let _75: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _75;
                }
            }
            scope 13 {
                debug left_val => _88;
                debug right_val => _89;
                let _94: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _94;
                }
            }
            scope 15 {
                debug left_val => _107;
                debug right_val => _108;
                let _113: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _113;
                }
            }
            scope 17 {
                debug left_val => _126;
                debug right_val => _127;
                let _132: core::panicking::AssertKind;
                scope 18 {
                    debug kind => _132;
                }
            }
            scope 19 {
                debug left_val => _139;
                debug right_val => _140;
                let _145: core::panicking::AssertKind;
                scope 20 {
                    debug kind => _145;
                }
            }
        }
    }

    bb0: {
        _4 = func_specific() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = move _4() -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = &_3;
        _156 = const _;
        _1 = (move _2, _156);
        _5 = (_1.0: &u32);
        _6 = (_1.1: &u32);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<u32, u32>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb4: {
        _14 = const ZeroSized: [closure@ui/functions-closures/closure-to-fn-coercion.rs:24:29: 24:36] as fn(u8) -> u8 (Pointer(ClosureFnPointer(Normal)));
        _17 = _14(const 31_u8) -> [return: bb5, unwind continue];
    }

    bb5: {
        _16 = &_17;
        _155 = const _;
        _15 = (move _16, _155);
        _18 = (_15.0: &u8);
        _19 = (_15.1: &u8);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<u8, u8>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb7: {
        _29 = const _(const 31_u8) -> [return: bb8, unwind continue];
    }

    bb8: {
        _28 = &_29;
        _154 = const _;
        _27 = (move _28, _154);
        _30 = (_27.0: &u8);
        _31 = (_27.1: &u8);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<u8, u8>(move _36, _30, _31, move _38) -> unwind continue;
    }

    bb10: {
        _39 = const 0_u32;
        _45 = const _;
        _46 = const 0_usize;
        _47 = const 5_usize;
        _48 = Lt(_46, _47);
        assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> [success: bb11, unwind continue];
    }

    bb11: {
        _44 = _45[_46];
        _49 = &mut _39;
        _43 = move _44(_49) -> [return: bb12, unwind continue];
    }

    bb12: {
        _42 = _39;
        _41 = &_42;
        _153 = const _;
        _40 = (move _41, _153);
        _50 = (_40.0: &u32);
        _51 = (_40.1: &u32);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<u32, u32>(move _56, _50, _51, move _58) -> unwind continue;
    }

    bb14: {
        _64 = const _;
        _65 = const 1_usize;
        _66 = const 5_usize;
        _67 = Lt(_65, _66);
        assert(move _67, "index out of bounds: the length is {} but the index is {}", move _66, _65) -> [success: bb15, unwind continue];
    }

    bb15: {
        _63 = _64[_65];
        _68 = &mut _39;
        _62 = move _63(_68) -> [return: bb16, unwind continue];
    }

    bb16: {
        _61 = _39;
        _60 = &_61;
        _152 = const _;
        _59 = (move _60, _152);
        _69 = (_59.0: &u32);
        _70 = (_59.1: &u32);
        _73 = (*_69);
        _74 = (*_70);
        _72 = Eq(move _73, move _74);
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _75 = core::panicking::AssertKind::Eq;
        _77 = Option::<Arguments<'_>>::None;
        _76 = core::panicking::assert_failed::<u32, u32>(move _75, _69, _70, move _77) -> unwind continue;
    }

    bb18: {
        _83 = const _;
        _84 = const 2_usize;
        _85 = const 5_usize;
        _86 = Lt(_84, _85);
        assert(move _86, "index out of bounds: the length is {} but the index is {}", move _85, _84) -> [success: bb19, unwind continue];
    }

    bb19: {
        _82 = _83[_84];
        _87 = &mut _39;
        _81 = move _82(_87) -> [return: bb20, unwind continue];
    }

    bb20: {
        _80 = _39;
        _79 = &_80;
        _151 = const _;
        _78 = (move _79, _151);
        _88 = (_78.0: &u32);
        _89 = (_78.1: &u32);
        _92 = (*_88);
        _93 = (*_89);
        _91 = Eq(move _92, move _93);
        _90 = Not(move _91);
        switchInt(move _90) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _94 = core::panicking::AssertKind::Eq;
        _96 = Option::<Arguments<'_>>::None;
        _95 = core::panicking::assert_failed::<u32, u32>(move _94, _88, _89, move _96) -> unwind continue;
    }

    bb22: {
        _102 = const _;
        _103 = const 3_usize;
        _104 = const 5_usize;
        _105 = Lt(_103, _104);
        assert(move _105, "index out of bounds: the length is {} but the index is {}", move _104, _103) -> [success: bb23, unwind continue];
    }

    bb23: {
        _101 = _102[_103];
        _106 = &mut _39;
        _100 = move _101(_106) -> [return: bb24, unwind continue];
    }

    bb24: {
        _99 = _39;
        _98 = &_99;
        _150 = const _;
        _97 = (move _98, _150);
        _107 = (_97.0: &u32);
        _108 = (_97.1: &u32);
        _111 = (*_107);
        _112 = (*_108);
        _110 = Eq(move _111, move _112);
        _109 = Not(move _110);
        switchInt(move _109) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _113 = core::panicking::AssertKind::Eq;
        _115 = Option::<Arguments<'_>>::None;
        _114 = core::panicking::assert_failed::<u32, u32>(move _113, _107, _108, move _115) -> unwind continue;
    }

    bb26: {
        _121 = const _;
        _122 = const 4_usize;
        _123 = const 5_usize;
        _124 = Lt(_122, _123);
        assert(move _124, "index out of bounds: the length is {} but the index is {}", move _123, _122) -> [success: bb27, unwind continue];
    }

    bb27: {
        _120 = _121[_122];
        _125 = &mut _39;
        _119 = move _120(_125) -> [return: bb28, unwind continue];
    }

    bb28: {
        _118 = _39;
        _117 = &_118;
        _149 = const _;
        _116 = (move _117, _149);
        _126 = (_116.0: &u32);
        _127 = (_116.1: &u32);
        _130 = (*_126);
        _131 = (*_127);
        _129 = Eq(move _130, move _131);
        _128 = Not(move _129);
        switchInt(move _128) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _132 = core::panicking::AssertKind::Eq;
        _134 = Option::<Arguments<'_>>::None;
        _133 = core::panicking::assert_failed::<u32, u32>(move _132, _126, _127, move _134) -> unwind continue;
    }

    bb30: {
        _138 = generic::<i8>(const 0_i8) -> [return: bb31, unwind continue];
    }

    bb31: {
        _137 = move _138() -> [return: bb32, unwind continue];
    }

    bb32: {
        _136 = &_137;
        _148 = const _;
        _135 = (move _136, _148);
        _139 = (_135.0: &usize);
        _140 = (_135.1: &usize);
        _143 = (*_139);
        _144 = (*_140);
        _142 = Eq(move _143, move _144);
        _141 = Not(move _142);
        switchInt(move _141) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _145 = core::panicking::AssertKind::Eq;
        _147 = Option::<Arguments<'_>>::None;
        _146 = core::panicking::assert_failed::<usize, usize>(move _145, _139, _140, move _147) -> unwind continue;
    }

    bb34: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 10_u32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 6_u32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 3_u32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 0_u32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 31_u8;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 31_u8;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 42_u32;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:24:29: 24:36], _2: u8) -> u8 {
    debug v => _2;
    let mut _0: u8;

    bb0: {
        _0 = _2;
        return;
    }
}
