// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const FOO: fn(u8) -> u8 = {
    let mut _0: fn(u8) -> u8;            // return place in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:4:12: 4:24
    let mut _1: [closure@ui/functions-closures/closure-to-fn-coercion.rs:4:27: 4:34]; // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:4:27: 4:40

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:4:27: 4:40
        _1 = [closure@ui/functions-closures/closure-to-fn-coercion.rs:4:27: 4:34]; // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:4:27: 4:40
                                         // closure
                                         // + def_id: DefId(0:5 ~ closure_to_fn_coercion[dc33]::FOO::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn((u8,)) -> u8,
                                         //     (),
                                         // ]
        _0 = move _1 as fn(u8) -> u8 (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:4:27: 4:40
        StorageDead(_1);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:4:33: 4:34
        return;                          // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:4:1: 4:41
    }
}

fn FOO::{closure#0}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:4:27: 4:34], _2: u8) -> u8 {
    debug v => _2;                       // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:4:28: 4:29
    let mut _0: u8;                      // return place in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:4:35: 4:35

    bb0: {
        _0 = _2;                         // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:4:37: 4:38
        return;                          // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:4:40: 4:40
    }
}

const BAR: [for<'a> fn(&'a mut u32); 5] = {
    let mut _0: [for<'a> fn(&'a mut u32); 5]; // return place in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:6:12: 6:29
    let mut _1: for<'a> fn(&'a mut u32); // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:7:5: 7:21
    let mut _2: [closure@ui/functions-closures/closure-to-fn-coercion.rs:7:5: 7:18]; // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:7:5: 7:21
    let mut _3: for<'a> fn(&'a mut u32); // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:8:5: 8:26
    let mut _4: [closure@ui/functions-closures/closure-to-fn-coercion.rs:8:5: 8:18]; // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:8:5: 8:26
    let mut _5: for<'a> fn(&'a mut u32); // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:9:5: 9:26
    let mut _6: [closure@ui/functions-closures/closure-to-fn-coercion.rs:9:5: 9:18]; // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:9:5: 9:26
    let mut _7: for<'a> fn(&'a mut u32); // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:10:5: 10:26
    let mut _8: [closure@ui/functions-closures/closure-to-fn-coercion.rs:10:5: 10:18]; // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:10:5: 10:26
    let mut _9: for<'a> fn(&'a mut u32); // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:11:5: 11:26
    let mut _10: [closure@ui/functions-closures/closure-to-fn-coercion.rs:11:5: 11:18]; // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:11:5: 11:26

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:7:5: 7:21
        StorageLive(_2);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:7:5: 7:21
        _2 = [closure@ui/functions-closures/closure-to-fn-coercion.rs:7:5: 7:18]; // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:7:5: 7:21
                                         // closure
                                         // + def_id: DefId(0:8 ~ closure_to_fn_coercion[dc33]::BAR::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     for<'a> extern "rust-call" fn((&'a mut u32,)),
                                         //     (),
                                         // ]
        _1 = move _2 as for<'a> fn(&'a mut u32) (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:7:5: 7:21
        StorageDead(_2);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:7:17: 7:18
        StorageLive(_3);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:8:5: 8:26
        StorageLive(_4);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:8:5: 8:26
        _4 = [closure@ui/functions-closures/closure-to-fn-coercion.rs:8:5: 8:18]; // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:8:5: 8:26
                                         // closure
                                         // + def_id: DefId(0:9 ~ closure_to_fn_coercion[dc33]::BAR::{closure#1})
                                         // + substs: [
                                         //     i8,
                                         //     for<'a> extern "rust-call" fn((&'a mut u32,)),
                                         //     (),
                                         // ]
        _3 = move _4 as for<'a> fn(&'a mut u32) (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:8:5: 8:26
        StorageDead(_4);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:8:17: 8:18
        StorageLive(_5);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:9:5: 9:26
        StorageLive(_6);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:9:5: 9:26
        _6 = [closure@ui/functions-closures/closure-to-fn-coercion.rs:9:5: 9:18]; // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:9:5: 9:26
                                         // closure
                                         // + def_id: DefId(0:10 ~ closure_to_fn_coercion[dc33]::BAR::{closure#2})
                                         // + substs: [
                                         //     i8,
                                         //     for<'a> extern "rust-call" fn((&'a mut u32,)),
                                         //     (),
                                         // ]
        _5 = move _6 as for<'a> fn(&'a mut u32) (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:9:5: 9:26
        StorageDead(_6);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:9:17: 9:18
        StorageLive(_7);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:10:5: 10:26
        StorageLive(_8);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:10:5: 10:26
        _8 = [closure@ui/functions-closures/closure-to-fn-coercion.rs:10:5: 10:18]; // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:10:5: 10:26
                                         // closure
                                         // + def_id: DefId(0:11 ~ closure_to_fn_coercion[dc33]::BAR::{closure#3})
                                         // + substs: [
                                         //     i8,
                                         //     for<'a> extern "rust-call" fn((&'a mut u32,)),
                                         //     (),
                                         // ]
        _7 = move _8 as for<'a> fn(&'a mut u32) (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:10:5: 10:26
        StorageDead(_8);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:10:17: 10:18
        StorageLive(_9);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:11:5: 11:26
        StorageLive(_10);                // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:11:5: 11:26
        _10 = [closure@ui/functions-closures/closure-to-fn-coercion.rs:11:5: 11:18]; // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:11:5: 11:26
                                         // closure
                                         // + def_id: DefId(0:12 ~ closure_to_fn_coercion[dc33]::BAR::{closure#4})
                                         // + substs: [
                                         //     i8,
                                         //     for<'a> extern "rust-call" fn((&'a mut u32,)),
                                         //     (),
                                         // ]
        _9 = move _10 as for<'a> fn(&'a mut u32) (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:11:5: 11:26
        StorageDead(_10);                // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:11:17: 11:18
        _0 = [move _1, move _3, move _5, move _7, move _9]; // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:6:32: 12:2
        StorageDead(_9);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:12:1: 12:2
        StorageDead(_7);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:12:1: 12:2
        StorageDead(_5);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:12:1: 12:2
        StorageDead(_3);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:12:1: 12:2
        StorageDead(_1);                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:12:1: 12:2
        return;                          // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:6:1: 12:3
    }
}

BAR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:6:27: 6:28

    bb0: {
        _0 = const 5_usize;              // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:6:27: 6:28
        return;                          // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:6:27: 6:28
    }
}

fn BAR::{closure#0}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:7:5: 7:18], _2: &mut u32) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:7:19: 7:19

    bb0: {
        return;                          // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:7:21: 7:21
    }
}

fn BAR::{closure#1}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:8:5: 8:18], _2: &mut u32) -> () {
    debug v => _2;                       // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:8:6: 8:7
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:8:19: 8:19
    let mut _3: (u32, bool);             // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:8:19: 8:26

    bb0: {
        _3 = CheckedAdd((*_2), const 1_u32); // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:8:19: 8:26
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_2), const 1_u32) -> bb1; // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:8:19: 8:26
    }

    bb1: {
        (*_2) = move (_3.0: u32);        // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:8:19: 8:26
        return;                          // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:8:26: 8:26
    }
}

fn BAR::{closure#2}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:9:5: 9:18], _2: &mut u32) -> () {
    debug v => _2;                       // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:9:6: 9:7
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:9:19: 9:19
    let mut _3: (u32, bool);             // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:9:19: 9:26

    bb0: {
        _3 = CheckedAdd((*_2), const 2_u32); // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:9:19: 9:26
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_2), const 2_u32) -> bb1; // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:9:19: 9:26
    }

    bb1: {
        (*_2) = move (_3.0: u32);        // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:9:19: 9:26
        return;                          // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:9:26: 9:26
    }
}

fn BAR::{closure#3}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:10:5: 10:18], _2: &mut u32) -> () {
    debug v => _2;                       // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:10:6: 10:7
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:10:19: 10:19
    let mut _3: (u32, bool);             // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:10:19: 10:26

    bb0: {
        _3 = CheckedAdd((*_2), const 3_u32); // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:10:19: 10:26
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_2), const 3_u32) -> bb1; // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:10:19: 10:26
    }

    bb1: {
        (*_2) = move (_3.0: u32);        // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:10:19: 10:26
        return;                          // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:10:26: 10:26
    }
}

fn BAR::{closure#4}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:11:5: 11:18], _2: &mut u32) -> () {
    debug v => _2;                       // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:11:6: 11:7
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:11:19: 11:19
    let mut _3: (u32, bool);             // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:11:19: 11:26

    bb0: {
        _3 = CheckedAdd((*_2), const 4_u32); // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:11:19: 11:26
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_2), const 4_u32) -> bb1; // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:11:19: 11:26
    }

    bb1: {
        (*_2) = move (_3.0: u32);        // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:11:19: 11:26
        return;                          // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:11:26: 11:26
    }
}

fn func_specific() -> fn() -> u32 {
    let mut _0: fn() -> u32;             // return place in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:13:23: 13:34
    let mut _1: [closure@ui/functions-closures/closure-to-fn-coercion.rs:14:5: 14:7]; // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:14:5: 14:17

    bb0: {
        _0 = move _1 as fn() -> u32 (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:14:5: 14:17
        return;                          // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:15:2: 15:2
    }
}

fn func_specific::{closure#0}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:14:5: 14:7]) -> u32 {
    let mut _0: u32;                     // return place in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:14:8: 14:8

    bb0: {
        _0 = const 42_u32;               // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:14:15: 14:17
        return;                          // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:14:17: 14:17
    }
}

fn generic(_1: T) -> fn() -> usize {
    let mut _0: fn() -> usize;           // return place in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:17:24: 17:37
    let mut _2: [closure@ui/functions-closures/closure-to-fn-coercion.rs:18:5: 18:7]; // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:18:5: 18:27

    bb0: {
        _0 = move _2 as fn() -> usize (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:18:5: 18:27
        drop(_1) -> bb1;                 // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:19:1: 19:2
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:19:2: 19:2
    }
}

fn generic::{closure#0}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:18:5: 18:7]) -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:18:8: 18:8

    bb0: {
        _0 = std::mem::size_of::<T>() -> bb1; // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:18:8: 18:27
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-to-fn-coercion.rs:18:8: 18:25
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:18:27: 18:27
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:21:11: 21:11
    let mut _1: (&u32, &u32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: u32;                         // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:23:16: 23:33
    let mut _4: fn() -> u32;             // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:23:16: 23:31
    let mut _5: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: &u32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &u32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _20: fn(u8) -> u8;               // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:24:9: 24:12
    let mut _21: [closure@ui/functions-closures/closure-to-fn-coercion.rs:24:29: 24:36]; // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:24:29: 24:42
    let mut _22: (&u8, &u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _24: u8;                         // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:25:16: 25:23
    let mut _25: fn(u8) -> u8;           // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:25:16: 25:19
    let mut _26: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _31: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _32: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _34: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _35: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _36: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _37: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _38: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _39: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _41: (&u8, &u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _42: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _43: u8;                         // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:27:16: 27:23
    let mut _44: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _48: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _49: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _50: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _52: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _53: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _54: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _55: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _56: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _57: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _60: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _61: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _62: u32;                        // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:29:16: 29:37
    let _63: ();                         // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:29:18: 29:32
    let mut _64: for<'a> fn(&'a mut u32); // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:29:18: 29:24
    let mut _65: [for<'a> fn(&'a mut u32); 5]; // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:29:18: 29:21
    let _66: usize;                      // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:29:22: 29:23
    let mut _67: &mut u32;               // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:29:25: 29:31
    let mut _68: &mut u32;               // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:29:25: 29:31
    let mut _69: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _72: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _73: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _74: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _75: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _77: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _78: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _79: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _80: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _81: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _82: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _83: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _84: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _85: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _86: u32;                        // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:30:16: 30:37
    let _87: ();                         // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:30:18: 30:32
    let mut _88: for<'a> fn(&'a mut u32); // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:30:18: 30:24
    let mut _89: [for<'a> fn(&'a mut u32); 5]; // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:30:18: 30:21
    let _90: usize;                      // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:30:22: 30:23
    let mut _91: &mut u32;               // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:30:25: 30:31
    let mut _92: &mut u32;               // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:30:25: 30:31
    let mut _93: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _96: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _97: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _98: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _99: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _101: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _102: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _103: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _104: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _105: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _106: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _107: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _108: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _109: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _110: u32;                       // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:31:16: 31:37
    let _111: ();                        // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:31:18: 31:32
    let mut _112: for<'a> fn(&'a mut u32); // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:31:18: 31:24
    let mut _113: [for<'a> fn(&'a mut u32); 5]; // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:31:18: 31:21
    let _114: usize;                     // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:31:22: 31:23
    let mut _115: &mut u32;              // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:31:25: 31:31
    let mut _116: &mut u32;              // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:31:25: 31:31
    let mut _117: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _120: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _121: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _122: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _123: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _125: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _126: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _127: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _128: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _129: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _130: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _131: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _132: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _133: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _134: u32;                       // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:32:16: 32:37
    let _135: ();                        // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:32:18: 32:32
    let mut _136: for<'a> fn(&'a mut u32); // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:32:18: 32:24
    let mut _137: [for<'a> fn(&'a mut u32); 5]; // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:32:18: 32:21
    let _138: usize;                     // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:32:22: 32:23
    let mut _139: &mut u32;              // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:32:25: 32:31
    let mut _140: &mut u32;              // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:32:25: 32:31
    let mut _141: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _144: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _145: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _146: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _147: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _149: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _150: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _151: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _152: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _153: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _154: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _155: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _156: (&u32, &u32);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _157: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _158: u32;                       // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:33:16: 33:37
    let _159: ();                        // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:33:18: 33:32
    let mut _160: for<'a> fn(&'a mut u32); // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:33:18: 33:24
    let mut _161: [for<'a> fn(&'a mut u32); 5]; // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:33:18: 33:21
    let _162: usize;                     // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:33:22: 33:23
    let mut _163: &mut u32;              // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:33:25: 33:31
    let mut _164: &mut u32;              // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:33:25: 33:31
    let mut _165: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _168: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _169: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _170: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _171: u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _173: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _174: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _175: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _176: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _177: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _178: &u32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _179: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _180: (&usize, &usize);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _181: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _182: usize;                     // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:34:16: 34:30
    let mut _183: fn() -> usize;         // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:34:16: 34:28
    let mut _184: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _187: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _188: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _189: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _190: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _192: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _193: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _194: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _195: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _196: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _197: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _198: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _207: &u32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug foo => _20;                // in scope 3 at ui/functions-closures/closure-to-fn-coercion.rs:24:9: 24:12
        let _27: &u8;                    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _28: &u8;                    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _45: &u8;                    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _46: &u8;                    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _59: u32;                // in scope 3 at ui/functions-closures/closure-to-fn-coercion.rs:28:9: 28:14
        let mut _205: &u8;               // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _206: &u8;               // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 4 {
            debug left_val => _27;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _28;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _33: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _33;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug left_val => _45;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _46;      // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _51: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 7 {
                debug kind => _51;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 8 {
            debug a => _59;              // in scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:28:9: 28:14
            let _70: &u32;               // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _71: &u32;               // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _94: &u32;               // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _95: &u32;               // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _118: &u32;              // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _119: &u32;              // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _142: &u32;              // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _143: &u32;              // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _166: &u32;              // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _167: &u32;              // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _185: &usize;            // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _186: &usize;            // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _199: &usize;        // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _200: &u32;          // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _201: &u32;          // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _202: &u32;          // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _203: &u32;          // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _204: &u32;          // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 9 {
                debug left_val => _70;   // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _71;  // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _76: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 10 {
                    debug kind => _76;   // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 11 {
                debug left_val => _94;   // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _95;  // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _100: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 12 {
                    debug kind => _100;  // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 13 {
                debug left_val => _118;  // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _119; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _124: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 14 {
                    debug kind => _124;  // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 15 {
                debug left_val => _142;  // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _143; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _148: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 16 {
                    debug kind => _148;  // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 17 {
                debug left_val => _166;  // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _167; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _172: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 18 {
                    debug kind => _172;  // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 19 {
                debug left_val => _185;  // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _186; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _191: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 20 {
                    debug kind => _191;  // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _4 = func_specific() -> bb1;     // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:23:16: 23:31
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-to-fn-coercion.rs:23:16: 23:29
                                         // + literal: Const { ty: fn() -> fn() -> u32 {func_specific}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _4() -> bb2;           // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:23:16: 23:33
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _207 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[8])) }
        _5 = _207;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_1.0: &u32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_1.1: &u32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = (*_6);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = const 42_u32;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = Eq(move _10, move _11);     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<u32, u32>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = move _21 as fn(u8) -> u8 (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:24:29: 24:42
        _25 = _20;                       // scope 3 at ui/functions-closures/closure-to-fn-coercion.rs:25:16: 25:19
        _24 = move _25(const 31_u8) -> bb5; // scope 3 at ui/functions-closures/closure-to-fn-coercion.rs:25:16: 25:23
    }

    bb5: {
        _23 = &_24;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _206 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[7])) }
        _26 = _206;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _26);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _27 = (_22.0: &u8);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _28 = (_22.1: &u8);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _31 = (*_27);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _32 = const 31_u8;               // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _30 = Eq(move _31, move _32);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _29 = Not(move _30);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _29) -> [0: bb7, otherwise: bb6]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _33 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = _27;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _37;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = _39;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _34 = core::panicking::assert_failed::<u8, u8>(move _35, move _36, move _38, move _40); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb7: {
        _43 = const _(const 31_u8) -> bb8; // scope 3 at ui/functions-closures/closure-to-fn-coercion.rs:27:16: 27:23
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-to-fn-coercion.rs:27:16: 27:19
                                         // + literal: Const { ty: fn(u8) -> u8, val: Unevaluated(FOO, [], None) }
    }

    bb8: {
        _42 = &_43;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _205 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[6])) }
        _44 = _205;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _41 = (move _42, move _44);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _45 = (_41.0: &u8);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _46 = (_41.1: &u8);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _49 = (*_45);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _50 = const 31_u8;               // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _48 = Eq(move _49, move _50);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _47 = Not(move _48);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _47) -> [0: bb10, otherwise: bb9]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _51 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _53 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _55 = _45;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _54 = _55;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _46;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _56 = _57;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _52 = core::panicking::assert_failed::<u8, u8>(move _53, move _54, move _56, move _58); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb10: {
        _59 = const 0_u32;               // scope 3 at ui/functions-closures/closure-to-fn-coercion.rs:28:22: 28:23
        _65 = const _;                   // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:29:18: 29:21
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-to-fn-coercion.rs:29:18: 29:21
                                         // + literal: Const { ty: [for<'a> fn(&'a mut u32); 5], val: Unevaluated(BAR, [], None) }
        _66 = const 0_usize;             // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:29:22: 29:23
        _64 = _65[_66];                  // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:29:18: 29:24
        _68 = &mut _59;                  // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:29:25: 29:31
        _67 = &mut (*_68);               // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:29:25: 29:31
        _63 = move _64(move _67) -> bb11; // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:29:18: 29:32
    }

    bb11: {
        _62 = _59;                       // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:29:34: 29:35
        _61 = &_62;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _204 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[5])) }
        _69 = _204;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _60 = (move _61, move _69);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _70 = (_60.0: &u32);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _71 = (_60.1: &u32);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _74 = (*_70);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _75 = const 0_u32;               // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _73 = Eq(move _74, move _75);    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _72 = Not(move _73);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _72) -> [0: bb13, otherwise: bb12]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _76 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _78 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _80 = _70;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _79 = _80;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _82 = _71;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _81 = _82;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _83 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _77 = core::panicking::assert_failed::<u32, u32>(move _78, move _79, move _81, move _83); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb13: {
        _89 = const _;                   // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:30:18: 30:21
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-to-fn-coercion.rs:30:18: 30:21
                                         // + literal: Const { ty: [for<'a> fn(&'a mut u32); 5], val: Unevaluated(BAR, [], None) }
        _90 = const 1_usize;             // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:30:22: 30:23
        _88 = _89[_90];                  // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:30:18: 30:24
        _92 = &mut _59;                  // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:30:25: 30:31
        _91 = &mut (*_92);               // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:30:25: 30:31
        _87 = move _88(move _91) -> bb14; // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:30:18: 30:32
    }

    bb14: {
        _86 = _59;                       // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:30:34: 30:35
        _85 = &_86;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _203 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[4])) }
        _93 = _203;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _84 = (move _85, move _93);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _94 = (_84.0: &u32);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _95 = (_84.1: &u32);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _98 = (*_94);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _99 = const 1_u32;               // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _97 = Eq(move _98, move _99);    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _96 = Not(move _97);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _96) -> [0: bb16, otherwise: bb15]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _100 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _102 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _104 = _94;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _103 = _104;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _106 = _95;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _105 = _106;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _107 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _101 = core::panicking::assert_failed::<u32, u32>(move _102, move _103, move _105, move _107); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb16: {
        _113 = const _;                  // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:31:18: 31:21
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-to-fn-coercion.rs:31:18: 31:21
                                         // + literal: Const { ty: [for<'a> fn(&'a mut u32); 5], val: Unevaluated(BAR, [], None) }
        _114 = const 2_usize;            // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:31:22: 31:23
        _112 = _113[_114];               // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:31:18: 31:24
        _116 = &mut _59;                 // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:31:25: 31:31
        _115 = &mut (*_116);             // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:31:25: 31:31
        _111 = move _112(move _115) -> bb17; // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:31:18: 31:32
    }

    bb17: {
        _110 = _59;                      // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:31:34: 31:35
        _109 = &_110;                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _202 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[3])) }
        _117 = _202;                     // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _108 = (move _109, move _117);   // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _118 = (_108.0: &u32);           // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _119 = (_108.1: &u32);           // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _122 = (*_118);                  // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _123 = const 3_u32;              // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _121 = Eq(move _122, move _123); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _120 = Not(move _121);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _120) -> [0: bb19, otherwise: bb18]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb18: {
        _124 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _126 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _128 = _118;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _127 = _128;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _130 = _119;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _129 = _130;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _131 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _125 = core::panicking::assert_failed::<u32, u32>(move _126, move _127, move _129, move _131); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb19: {
        _137 = const _;                  // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:32:18: 32:21
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-to-fn-coercion.rs:32:18: 32:21
                                         // + literal: Const { ty: [for<'a> fn(&'a mut u32); 5], val: Unevaluated(BAR, [], None) }
        _138 = const 3_usize;            // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:32:22: 32:23
        _136 = _137[_138];               // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:32:18: 32:24
        _140 = &mut _59;                 // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:32:25: 32:31
        _139 = &mut (*_140);             // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:32:25: 32:31
        _135 = move _136(move _139) -> bb20; // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:32:18: 32:32
    }

    bb20: {
        _134 = _59;                      // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:32:34: 32:35
        _133 = &_134;                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _201 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[2])) }
        _141 = _201;                     // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _132 = (move _133, move _141);   // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _142 = (_132.0: &u32);           // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _143 = (_132.1: &u32);           // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _146 = (*_142);                  // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _147 = const 6_u32;              // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _145 = Eq(move _146, move _147); // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _144 = Not(move _145);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _144) -> [0: bb22, otherwise: bb21]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb21: {
        _148 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _150 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _152 = _142;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _151 = _152;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _154 = _143;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _153 = _154;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _155 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _149 = core::panicking::assert_failed::<u32, u32>(move _150, move _151, move _153, move _155); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb22: {
        _161 = const _;                  // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:33:18: 33:21
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-to-fn-coercion.rs:33:18: 33:21
                                         // + literal: Const { ty: [for<'a> fn(&'a mut u32); 5], val: Unevaluated(BAR, [], None) }
        _162 = const 4_usize;            // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:33:22: 33:23
        _160 = _161[_162];               // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:33:18: 33:24
        _164 = &mut _59;                 // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:33:25: 33:31
        _163 = &mut (*_164);             // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:33:25: 33:31
        _159 = move _160(move _163) -> bb23; // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:33:18: 33:32
    }

    bb23: {
        _158 = _59;                      // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:33:34: 33:35
        _157 = &_158;                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _200 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[1])) }
        _165 = _200;                     // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _156 = (move _157, move _165);   // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _166 = (_156.0: &u32);           // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _167 = (_156.1: &u32);           // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _170 = (*_166);                  // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _171 = const 10_u32;             // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _169 = Eq(move _170, move _171); // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _168 = Not(move _169);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _168) -> [0: bb25, otherwise: bb24]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb24: {
        _172 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _174 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _176 = _166;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _175 = _176;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _178 = _167;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _177 = _178;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _179 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _173 = core::panicking::assert_failed::<u32, u32>(move _174, move _175, move _177, move _179); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb25: {
        _183 = generic::<i8>(const 0_i8) -> bb26; // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:34:16: 34:28
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-to-fn-coercion.rs:34:16: 34:23
                                         // + literal: Const { ty: fn(i8) -> fn() -> usize {generic::<i8>}, val: Value(<ZST>) }
    }

    bb26: {
        _182 = move _183() -> bb27;      // scope 8 at ui/functions-closures/closure-to-fn-coercion.rs:34:16: 34:30
    }

    bb27: {
        _181 = &_182;                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _199 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _184 = _199;                     // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _180 = (move _181, move _184);   // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _185 = (_180.0: &usize);         // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _186 = (_180.1: &usize);         // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _189 = (*_185);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _190 = const 1_usize;            // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _188 = Eq(move _189, move _190); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _187 = Not(move _188);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _187) -> [0: bb29, otherwise: bb28]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb28: {
        _191 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _193 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _195 = _185;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _194 = _195;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _197 = _186;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _196 = _197;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _198 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _192 = core::panicking::assert_failed::<usize, usize>(move _193, move _194, move _196, move _198); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb29: {
        return;                          // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:35:2: 35:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:34:32: 34:33

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:34:32: 34:33
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:33:39: 33:41

    bb0: {
        _1 = const 10_u32;               // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:33:39: 33:41
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:32:39: 32:40

    bb0: {
        _1 = const 6_u32;                // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:32:39: 32:40
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:31:39: 31:40

    bb0: {
        _1 = const 3_u32;                // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:31:39: 31:40
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:30:39: 30:40

    bb0: {
        _1 = const 1_u32;                // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:30:39: 30:40
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:29:39: 29:40

    bb0: {
        _1 = const 0_u32;                // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:29:39: 29:40
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[6] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u8;                      // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:27:25: 27:27

    bb0: {
        _1 = const 31_u8;                // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:27:25: 27:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[7] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u8;                      // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:25:25: 25:27

    bb0: {
        _1 = const 31_u8;                // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:25:25: 25:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[8] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:23:35: 23:37

    bb0: {
        _1 = const 42_u32;               // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:23:35: 23:37
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: &[closure@ui/functions-closures/closure-to-fn-coercion.rs:24:29: 24:36], _2: u8) -> u8 {
    debug v => _2;                       // in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:24:30: 24:31
    let mut _0: u8;                      // return place in scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:24:37: 24:37

    bb0: {
        _0 = _2;                         // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:24:39: 24:40
        return;                          // scope 0 at ui/functions-closures/closure-to-fn-coercion.rs:24:42: 24:42
    }
}
