// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:5:16: 5:21>::clone(_1: &MyCx<'_, '_>) -> MyCx<'_, '_> {
    debug self => _1;                    // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:5:16: 5:21
    let mut _0: MyCx<'_, '_>;            // return place in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:5:16: 5:21
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:5:16: 5:21
        return;                          // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:5:21: 5:21
    }
}

fn <impl at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:11:1: 11:40>::short(_1: MyCx<'_, '_>) -> &u32 {
    debug self => _1;                    // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:12:14: 12:18
    let mut _0: &u32;                    // return place in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:12:23: 12:34

    bb0: {
        _0 = (_1.0: &u32);               // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:12:37: 12:47
        return;                          // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:12:49: 12:49
    }
}

fn <impl at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:11:1: 11:40>::long(_1: MyCx<'_, '_>) -> &u32 {
    debug self => _1;                    // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:13:13: 13:17
    let mut _0: &u32;                    // return place in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:13:22: 13:32

    bb0: {
        _0 = (_1.1: &u32);               // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:13:35: 13:44
        return;                          // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:13:46: 13:46
    }
}

fn <impl at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:11:1: 11:40>::set_short(_1: &mut MyCx<'_, '_>, _2: &u32) -> () {
    debug self => _1;                    // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:14:18: 14:27
    debug v => _2;                       // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:14:29: 14:30
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:14:45: 14:45
    let mut _3: &u32;                    // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:14:60: 14:61

    bb0: {
        _3 = _2;                         // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:14:60: 14:61
        ((*_1).0: &u32) = move _3;       // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:14:47: 14:61
        return;                          // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:14:64: 14:64
    }
}

fn with(_1: F) -> R {
    debug op => _1;                      // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:17:15: 17:17
    let mut _0: R;                       // return place in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:17:25: 17:26
    let mut _2: F;                       // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:21:5: 21:7
    let mut _3: (MyCx<'_, '_>,);         // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:21:5: 24:7
    let mut _4: MyCx<'_, '_>;            // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:21:8: 24:6
    let mut _5: &u32;                    // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:22:16: 22:19
    let _6: &u32;                        // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:22:16: 22:19
    let mut _7: &u32;                    // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:23:15: 23:18
    let _8: &u32;                        // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:23:15: 23:18
    let mut _9: &u32;                    // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:23:15: 23:18
    let mut _10: &u32;                   // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:22:16: 22:19

    bb0: {
        _2 = move _1;                    // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:21:5: 21:7
        _10 = const _;                   // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:22:16: 22:19
                                         // mir::Constant
                                         // + span: ui/functions-closures/implied-bounds-closure-arg-outlives.rs:22:16: 22:19
                                         // + literal: Const { ty: &u32, val: Unevaluated(with, [F, R], Some(promoted[1])) }
        _6 = _10;                        // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:22:16: 22:19
        _5 = _6;                         // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:22:16: 22:19
        _9 = const _;                    // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:23:15: 23:18
                                         // mir::Constant
                                         // + span: ui/functions-closures/implied-bounds-closure-arg-outlives.rs:23:15: 23:18
                                         // + literal: Const { ty: &u32, val: Unevaluated(with, [F, R], Some(promoted[0])) }
        _8 = _9;                         // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:23:15: 23:18
        _7 = _8;                         // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:23:15: 23:18
        _4 = MyCx::<'_, '_> { short: move _5, long: move _7 }; // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:21:8: 24:6
        _3 = (move _4,);                 // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:21:5: 24:7
        _0 = <F as FnOnce<(MyCx<'_, '_>,)>>::call_once(move _2, move _3) -> bb1; // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:21:5: 24:7
                                         // mir::Constant
                                         // + span: ui/functions-closures/implied-bounds-closure-arg-outlives.rs:21:5: 21:7
                                         // + literal: Const { ty: extern "rust-call" fn(F, (MyCx<'_, '_>,)) -> <F as FnOnce<(MyCx<'_, '_>,)>>::Output {<F as FnOnce<(MyCx<'_, '_>,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:25:2: 25:2
    }
}

promoted[0] in with: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:23:15: 23:18
    let mut _1: u32;                     // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:23:16: 23:18

    bb0: {
        _1 = const 22_u32;               // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:23:16: 23:18
        _0 = &_1;                        // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:23:15: 23:18
        return;                          // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:23:15: 23:18
    }
}

promoted[1] in with: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:22:16: 22:19
    let mut _1: u32;                     // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:22:17: 22:19

    bb0: {
        _1 = const 22_u32;               // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:22:17: 22:19
        _0 = &_1;                        // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:22:16: 22:19
        return;                          // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:22:16: 22:19
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:27:11: 27:11
    let _1: ();                          // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:28:5: 34:7
    let mut _2: [closure@ui/functions-closures/implied-bounds-closure-arg-outlives.rs:28:10: 28:18]; // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:28:10: 34:6

    bb0: {
        _1 = with::<[closure@ui/functions-closures/implied-bounds-closure-arg-outlives.rs:28:10: 28:18], ()>(move _2) -> bb1; // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:28:5: 34:7
                                         // mir::Constant
                                         // + span: ui/functions-closures/implied-bounds-closure-arg-outlives.rs:28:5: 28:9
                                         // + literal: Const { ty: fn([closure@ui/functions-closures/implied-bounds-closure-arg-outlives.rs:28:10: 28:18]) {with::<[closure@ui/functions-closures/implied-bounds-closure-arg-outlives.rs:28:10: 28:18], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:35:2: 35:2
    }
}

fn main::{closure#0}(_1: [closure@ui/functions-closures/implied-bounds-closure-arg-outlives.rs:28:10: 28:18], _2: MyCx<'_, '_>) -> () {
    debug cx => _2;                      // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:28:11: 28:17
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:28:19: 28:19
    let _3: &u32;                        // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:32:13: 32:14
    let mut _4: MyCx<'_, '_>;            // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:32:27: 32:29
    let _5: ();                          // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:33:9: 33:24
    let mut _6: &mut MyCx<'_, '_>;       // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:33:9: 33:24
    let mut _7: &u32;                    // in scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:33:22: 33:23
    scope 1 {
        debug l => _3;                   // in scope 1 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:32:13: 32:14
    }

    bb0: {
        _4 = _2;                         // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:32:27: 32:29
        _3 = MyCx::<'_, '_>::long(move _4) -> bb1; // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:32:27: 32:36
                                         // mir::Constant
                                         // + span: ui/functions-closures/implied-bounds-closure-arg-outlives.rs:32:30: 32:34
                                         // + literal: Const { ty: fn(MyCx<'_, '_>) -> &u32 {MyCx::<'_, '_>::long}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &mut _2;                    // scope 1 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:33:9: 33:24
        _7 = _3;                         // scope 1 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:33:22: 33:23
        _5 = MyCx::<'_, '_>::set_short(move _6, move _7) -> bb2; // scope 1 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:33:9: 33:24
                                         // mir::Constant
                                         // + span: ui/functions-closures/implied-bounds-closure-arg-outlives.rs:33:12: 33:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut MyCx<'_, '_>, &u32) {MyCx::<'_, '_>::set_short}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/functions-closures/implied-bounds-closure-arg-outlives.rs:34:6: 34:6
    }
}
