// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn with_closure(_1: F) -> Result<char, R> {
    debug f => _1;
    let mut _0: std::result::Result<char, R>;
    let mut _2: (&char,);
    let mut _3: &char;

    bb0: {
        _3 = const _;
        _2 = (_3,);
        _0 = <F as FnOnce<(&char,)>>::call_once(move _1, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in with_closure: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'a';
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::result::Result<char, ()>;
    let mut _2: (&char, &char);
    let mut _3: &char;
    let _4: char;
    let mut _5: std::result::Result<char, ()>;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: char;
    let mut _11: char;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&char, &char);
    let mut _17: &char;
    let _18: char;
    let mut _19: std::result::Result<char, ()>;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: char;
    let mut _25: char;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&char, &char);
    let mut _31: &char;
    let _32: char;
    let mut _33: std::result::Result<char, ()>;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: char;
    let mut _39: char;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug z => _1;
        let _6: &char;
        let _7: &char;
        let _15: std::result::Result<char, ()>;
        let mut _45: &char;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug z => _15;
            let _20: &char;
            let _21: &char;
            let _29: std::result::Result<char, ()>;
            let mut _44: &char;
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _26: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _26;
                }
            }
            scope 7 {
                debug z => _29;
                let _34: &char;
                let _35: &char;
                let mut _43: &char;
                scope 8 {
                    debug left_val => _34;
                    debug right_val => _35;
                    let _40: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _40;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = with_closure::<[closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:26: 16:49], ()>(const ZeroSized: [closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:26: 16:49]) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = _1;
        _4 = Result::<char, ()>::unwrap(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &_4;
        _45 = const _;
        _2 = (move _3, _45);
        _6 = (_2.0: &char);
        _7 = (_2.1: &char);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<char, char>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb4: {
        _15 = with_closure::<[closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:26: 20:52], ()>(const ZeroSized: [closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:26: 20:52]) -> [return: bb5, unwind continue];
    }

    bb5: {
        _19 = _15;
        _18 = Result::<char, ()>::unwrap(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        _17 = &_18;
        _44 = const _;
        _16 = (move _17, _44);
        _20 = (_16.0: &char);
        _21 = (_16.1: &char);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<char, char>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb8: {
        _29 = with_closure::<[closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:26: 24:53], ()>(const ZeroSized: [closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:26: 24:53]) -> [return: bb9, unwind continue];
    }

    bb9: {
        _33 = _29;
        _32 = Result::<char, ()>::unwrap(move _33) -> [return: bb10, unwind continue];
    }

    bb10: {
        _31 = &_32;
        _43 = const _;
        _30 = (move _31, _43);
        _34 = (_30.0: &char);
        _35 = (_30.1: &char);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<char, char>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb12: {
        return;
    }
}

promoted[0] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'a';
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'a';
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'a';
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:26: 16:49], _2: &char) -> Result<char, ()> {
    debug x => _2;
    let mut _0: std::result::Result<char, ()>;
    let mut _3: char;

    bb0: {
        _3 = (*_2);
        _0 = Result::<char, ()>::Ok(move _3);
        return;
    }
}

fn main::{closure#1}(_1: [closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:26: 20:52], _2: &char) -> Result<char, ()> {
    debug x => _2;
    let mut _0: std::result::Result<char, ()>;
    let mut _3: char;

    bb0: {
        _3 = (*_2);
        _0 = Result::<char, ()>::Ok(move _3);
        return;
    }
}

fn main::{closure#2}(_1: [closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:26: 24:53], _2: &char) -> Result<char, ()> {
    debug x => _2;
    let mut _0: std::result::Result<char, ()>;
    let mut _3: char;

    bb0: {
        _3 = (*_2);
        _0 = Result::<char, ()>::Ok(move _3);
        return;
    }
}
