// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn with_closure(_1: F) -> Result<char, R> {
    debug f => _1;                       // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:2:23: 2:24
    let mut _0: std::result::Result<char, R>; // return place in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:2:32: 2:47
    let mut _2: F;                       // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:5: 5:6
    let mut _3: (&char,);                // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:5: 5:12
    let mut _4: &char;                   // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:7: 5:11
    let _5: &char;                       // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:7: 5:11
    let mut _6: &char;                   // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:7: 5:11

    bb0: {
        _2 = move _1;                    // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:5: 5:6
        _6 = const _;                    // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:7: 5:11
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:7: 5:11
                                         // + literal: Const { ty: &char, val: Unevaluated(with_closure, [F, R], Some(promoted[0])) }
        _5 = _6;                         // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:7: 5:11
        _4 = _5;                         // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:7: 5:11
        _3 = (move _4,);                 // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:5: 5:12
        _0 = <F as FnOnce<(&char,)>>::call_once(move _2, move _3) -> bb1; // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:5: 5:12
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:5: 5:6
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&char,)) -> <F as FnOnce<(&char,)>>::Output {<F as FnOnce<(&char,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:6:2: 6:2
    }
}

promoted[0] in with_closure: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:7: 5:11
    let mut _1: char;                    // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:8: 5:11

    bb0: {
        _1 = const 'a';                  // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:8: 5:11
        _0 = &_1;                        // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:7: 5:11
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:5:7: 5:11
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:8:11: 8:11
    let _1: std::result::Result<char, ()>; // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:9: 16:10
    let mut _2: [closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:26: 16:49]; // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:26: 16:60
    let mut _3: (&char, &char);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &char;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: char;                        // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:17:16: 17:26
    let mut _6: std::result::Result<char, ()>; // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:17:16: 17:17
    let mut _7: &char;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: char;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: char;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &char;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &char;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _23: [closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:26: 20:52]; // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:26: 20:63
    let mut _24: (&char, &char);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _25: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _26: char;                       // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:21:16: 21:26
    let mut _27: std::result::Result<char, ()>; // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:21:16: 21:17
    let mut _28: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: char;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: char;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &char;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &char;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _44: [closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:26: 24:53]; // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:26: 24:64
    let mut _45: (&char, &char);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _46: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _47: char;                       // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:25:16: 25:26
    let mut _48: std::result::Result<char, ()>; // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:25:16: 25:17
    let mut _49: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _52: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _54: char;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _55: char;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _57: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _58: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _59: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _60: &char;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _61: &char;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _62: &char;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug z => _1;                   // in scope 1 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:9: 16:10
        let _8: &char;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _9: &char;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _22: std::result::Result<char, ()>; // in scope 1 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:9: 20:10
        let mut _66: &char;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _8;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _9;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _14: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _14;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug z => _22;              // in scope 4 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:9: 20:10
            let _29: &char;              // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _30: &char;              // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _43: std::result::Result<char, ()>; // in scope 4 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:9: 24:10
            let mut _65: &char;          // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 5 {
                debug left_val => _29;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _30;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _35: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _35;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 7 {
                debug z => _43;          // in scope 7 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:9: 24:10
                let _50: &char;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _51: &char;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _64: &char;      // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 8 {
                    debug left_val => _50; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _51; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _56: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 9 {
                        debug kind => _56; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _1 = with_closure::<[closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:26: 16:49], ()>(move _2) -> bb1; // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:13: 16:61
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:13: 16:25
                                         // + literal: Const { ty: fn([closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:26: 16:49]) -> Result<char, ()> {with_closure::<[closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:26: 16:49], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _1;                         // scope 1 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:17:16: 17:17
        _5 = Result::<char, ()>::unwrap(move _6) -> bb2; // scope 1 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:17:16: 17:26
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/supply-just-return-type.rs:17:18: 17:24
                                         // + literal: Const { ty: fn(Result<char, ()>) -> char {Result::<char, ()>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &_5;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _66 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &char, val: Unevaluated(main, [], Some(promoted[2])) }
        _7 = _66;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _7);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_3.0: &char);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_3.1: &char);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 'a';                 // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<char, char>(move _16, move _17, move _19, move _21); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a char, &'b char, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<char, char>}, val: Value(<ZST>) }
    }

    bb4: {
        _22 = with_closure::<[closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:26: 20:52], ()>(move _23) -> bb5; // scope 1 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:13: 20:64
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:13: 20:25
                                         // + literal: Const { ty: fn([closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:26: 20:52]) -> Result<char, ()> {with_closure::<[closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:26: 20:52], ()>}, val: Value(<ZST>) }
    }

    bb5: {
        _27 = _22;                       // scope 4 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:21:16: 21:17
        _26 = Result::<char, ()>::unwrap(move _27) -> bb6; // scope 4 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:21:16: 21:26
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/supply-just-return-type.rs:21:18: 21:24
                                         // + literal: Const { ty: fn(Result<char, ()>) -> char {Result::<char, ()>::unwrap}, val: Value(<ZST>) }
    }

    bb6: {
        _25 = &_26;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _65 = const _;                   // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &char, val: Unevaluated(main, [], Some(promoted[1])) }
        _28 = _65;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _24 = (move _25, move _28);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_24.0: &char);            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_24.1: &char);            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = (*_29);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = const 'a';                 // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = Eq(move _33, move _34);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _31 = Not(move _32);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb8, otherwise: bb7]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _35 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<char, char>(move _37, move _38, move _40, move _42); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a char, &'b char, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<char, char>}, val: Value(<ZST>) }
    }

    bb8: {
        _43 = with_closure::<[closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:26: 24:53], ()>(move _44) -> bb9; // scope 4 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:13: 24:65
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:13: 24:25
                                         // + literal: Const { ty: fn([closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:26: 24:53]) -> Result<char, ()> {with_closure::<[closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:26: 24:53], ()>}, val: Value(<ZST>) }
    }

    bb9: {
        _48 = _43;                       // scope 7 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:25:16: 25:17
        _47 = Result::<char, ()>::unwrap(move _48) -> bb10; // scope 7 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:25:16: 25:26
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/supply-just-return-type.rs:25:18: 25:24
                                         // + literal: Const { ty: fn(Result<char, ()>) -> char {Result::<char, ()>::unwrap}, val: Value(<ZST>) }
    }

    bb10: {
        _46 = &_47;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _64 = const _;                   // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &char, val: Unevaluated(main, [], Some(promoted[0])) }
        _49 = _64;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _45 = (move _46, move _49);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _50 = (_45.0: &char);            // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _51 = (_45.1: &char);            // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _54 = (*_50);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _55 = const 'a';                 // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _53 = Eq(move _54, move _55);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _52 = Not(move _53);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _52) -> [0: bb12, otherwise: bb11]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _56 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _60 = _50;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _59 = _60;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _51;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = _62;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _63 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _57 = core::panicking::assert_failed::<char, char>(move _58, move _59, move _61, move _63); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a char, &'b char, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<char, char>}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:26:2: 26:2
    }
}

promoted[0] in main: &char = {
    let mut _0: &char;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: char;                    // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:25:28: 25:31

    bb0: {
        _1 = const 'a';                  // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:25:28: 25:31
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &char = {
    let mut _0: &char;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: char;                    // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:21:28: 21:31

    bb0: {
        _1 = const 'a';                  // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:21:28: 21:31
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &char = {
    let mut _0: &char;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: char;                    // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:17:28: 17:31

    bb0: {
        _1 = const 'a';                  // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:17:28: 17:31
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: [closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:26: 16:49], _2: &char) -> Result<char, ()> {
    debug x => _2;                       // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:27: 16:28
    let mut _0: std::result::Result<char, ()>; // return place in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:33: 16:49
    let mut _3: char;                    // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:55: 16:57

    bb0: {
        _3 = (*_2);                      // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:55: 16:57
        _0 = Result::<char, ()>::Ok(move _3); // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:52: 16:58
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:16:60: 16:60
    }
}

fn main::{closure#1}(_1: [closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:26: 20:52], _2: &char) -> Result<char, ()> {
    debug x => _2;                       // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:27: 20:28
    let mut _0: std::result::Result<char, ()>; // return place in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:36: 20:52
    let mut _3: char;                    // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:58: 20:60

    bb0: {
        _3 = (*_2);                      // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:58: 20:60
        _0 = Result::<char, ()>::Ok(move _3); // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:55: 20:61
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:20:63: 20:63
    }
}

fn main::{closure#2}(_1: [closure@ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:26: 24:53], _2: &char) -> Result<char, ()> {
    debug x => _2;                       // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:27: 24:28
    let mut _0: std::result::Result<char, ()>; // return place in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:37: 24:53
    let mut _3: char;                    // in scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:59: 24:61

    bb0: {
        _3 = (*_2);                      // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:59: 24:61
        _0 = Result::<char, ()>::Ok(move _3); // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:56: 24:62
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/supply-just-return-type.rs:24:64: 24:64
    }
}
