// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn with_closure(_1: F) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:5:5: 5:5

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:7:1: 7:2
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:7:2: 7:2
    }
}

fn expect_free_supply_free(_1: &u32) -> () {
    debug x => _1;                       // in scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:9:32: 9:33
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:9:44: 9:44
    let _2: ();                          // in scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:10:5: 16:7
    let mut _3: [closure@ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:10:18: 10:36]; // in scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:10:18: 16:6

    bb0: {
        _2 = with_closure::<u32, [closure@ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:10:18: 10:36]>(move _3) -> bb1; // scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:10:5: 16:7
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:10:5: 10:17
                                         // + literal: Const { ty: fn([closure@ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:10:18: 10:36]) {with_closure::<u32, [closure@ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:10:18: 10:36]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:17:2: 17:2
    }
}

fn expect_free_supply_free::{closure#0}(_1: [closure@ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:10:18: 10:36], _2: Vec<u32>, _3: u32) -> () {
    debug x => _2;                       // in scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:10:19: 10:24
    debug y => _3;                       // in scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:10:34: 10:35
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:10:37: 10:37
    let _4: ();                          // in scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:12:9: 12:23
    let mut _5: &mut std::vec::Vec<u32>; // in scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:12:9: 12:23
    let mut _6: u32;                     // in scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:15:17: 15:34
    let mut _7: u32;                     // in scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:15:17: 15:18
    scope 1 {
    }

    bb0: {
        _5 = &mut _2;                    // scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:12:9: 12:23
        _4 = Vec::<u32>::push(move _5, const 22_u32) -> [return: bb1, unwind: bb4]; // scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:12:9: 12:23
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:12:11: 12:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u32>, u32) {Vec::<u32>::push}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _3;                         // scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:15:17: 15:18
        _6 = core::num::<impl u32>::wrapping_add(move _7, const 1_u32) -> [return: bb2, unwind: bb4]; // scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:15:17: 15:34
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:15:19: 15:31
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {core::num::<impl u32>::wrapping_add}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:16:5: 16:6
    }

    bb3: {
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:16:6: 16:6
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:16:5: 16:6
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:10:18: 16:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:19:11: 19:11

    bb0: {
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/expect-infer-supply-two-infers.rs:19:14: 19:14
    }
}
