// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn with_closure(_1: F) -> u32 {
    debug f => _1;                       // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:2:20: 2:21
    let mut _0: u32;                     // return place in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:2:29: 2:32
    let mut _2: F;                       // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:5: 5:6
    let mut _3: (&u32, &u32);            // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:5: 5:16
    let mut _4: &u32;                    // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:7: 5:10
    let _5: &u32;                        // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:7: 5:10
    let mut _6: &u32;                    // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:12: 5:15
    let _7: &u32;                        // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:12: 5:15
    let mut _8: &u32;                    // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:12: 5:15
    let mut _9: &u32;                    // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:7: 5:10

    bb0: {
        _2 = move _1;                    // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:5: 5:6
        _9 = const _;                    // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:7: 5:10
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/supply-nothing.rs:5:7: 5:10
                                         // + literal: Const { ty: &u32, val: Unevaluated(with_closure, [F], Some(promoted[1])) }
        _5 = _9;                         // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:7: 5:10
        _4 = _5;                         // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:7: 5:10
        _8 = const _;                    // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:12: 5:15
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/supply-nothing.rs:5:12: 5:15
                                         // + literal: Const { ty: &u32, val: Unevaluated(with_closure, [F], Some(promoted[0])) }
        _7 = _8;                         // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:12: 5:15
        _6 = _7;                         // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:12: 5:15
        _3 = (move _4, move _6);         // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:5: 5:16
        _0 = <F as FnOnce<(&u32, &u32)>>::call_once(move _2, move _3) -> bb1; // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:5: 5:16
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/supply-nothing.rs:5:5: 5:6
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&u32, &u32)) -> <F as FnOnce<(&u32, &u32)>>::Output {<F as FnOnce<(&u32, &u32)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:6:2: 6:2
    }
}

promoted[0] in with_closure: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:12: 5:15
    let mut _1: u32;                     // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:13: 5:15

    bb0: {
        _1 = const 44_u32;               // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:13: 5:15
        _0 = &_1;                        // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:12: 5:15
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:12: 5:15
    }
}

promoted[1] in with_closure: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:7: 5:10
    let mut _1: u32;                     // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:8: 5:10

    bb0: {
        _1 = const 22_u32;               // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:8: 5:10
        _0 = &_1;                        // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:7: 5:10
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:5:7: 5:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:8:11: 8:11
    let _1: u32;                         // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:9:9: 9:10
    let mut _2: u32;                     // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:9:13: 9:39
    let mut _3: [closure@ui/functions-closures/closure-expected-type/supply-nothing.rs:9:26: 9:32]; // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:9:26: 9:38
    let mut _4: (&u32, &u32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _6: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug z => _1;                   // in scope 1 at ui/functions-closures/closure-expected-type/supply-nothing.rs:9:9: 9:10
        let _7: &u32;                    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _8: &u32;                    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _21: &u32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _7;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _8;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _13: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _13;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = with_closure::<[closure@ui/functions-closures/closure-expected-type/supply-nothing.rs:9:26: 9:32]>(move _3) -> bb1; // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:9:13: 9:39
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/supply-nothing.rs:9:13: 9:25
                                         // + literal: Const { ty: fn([closure@ui/functions-closures/closure-expected-type/supply-nothing.rs:9:26: 9:32]) -> u32 {with_closure::<[closure@ui/functions-closures/closure-expected-type/supply-nothing.rs:9:26: 9:32]>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = core::num::<impl u32>::wrapping_add(move _2, const 1_u32) -> bb2; // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:9:13: 9:55
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/supply-nothing.rs:9:40: 9:52
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {core::num::<impl u32>::wrapping_add}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _21;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _6);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_4.0: &u32);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_4.1: &u32);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 67_u32;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<u32, u32>(move _15, move _16, move _18, move _20); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:11:2: 11:2
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:10:19: 10:30
    let mut _2: (u32, bool);             // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:10:19: 10:30
    let mut _3: u32;                     // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:10:19: 10:26
    let mut _4: (u32, bool);             // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:10:19: 10:26

    bb0: {
        _4 = CheckedAdd(const 22_u32, const 44_u32); // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:10:19: 10:26
        _3 = move (_4.0: u32);           // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:10:19: 10:26
        _2 = CheckedAdd(_3, const 1_u32); // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:10:19: 10:30
        _1 = move (_2.0: u32);           // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:10:19: 10:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: [closure@ui/functions-closures/closure-expected-type/supply-nothing.rs:9:26: 9:32], _2: &u32, _3: &u32) -> u32 {
    debug x => _2;                       // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:9:27: 9:28
    debug y => _3;                       // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:9:30: 9:31
    let mut _0: u32;                     // return place in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:9:33: 9:33
    let mut _4: &u32;                    // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:9:33: 9:34
    let mut _5: &u32;                    // in scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:9:37: 9:38

    bb0: {
        _4 = _2;                         // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:9:33: 9:34
        _5 = _3;                         // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:9:37: 9:38
        _0 = <&u32 as Add>::add(move _4, move _5) -> bb1; // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:9:33: 9:38
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/supply-nothing.rs:9:33: 9:38
                                         // + literal: Const { ty: fn(&u32, &u32) -> <&u32 as Add>::Output {<&u32 as Add>::add}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/supply-nothing.rs:9:38: 9:38
    }
}
