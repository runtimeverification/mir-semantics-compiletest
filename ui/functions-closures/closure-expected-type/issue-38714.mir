// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn ref_to(_1: &Vec<usize>) -> UsizeRef<'_> {
    debug vec => _1;                     // in scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:10:15: 10:18
    let mut _0: UsizeRef<'_>;            // return place in scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:10:39: 10:51
    let mut _2: &usize;                  // in scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:11:18: 11:25
    let _3: &usize;                      // in scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:11:18: 11:25
    let _4: &usize;                      // in scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:11:19: 11:25
    let mut _5: &std::vec::Vec<usize>;   // in scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:11:19: 11:22

    bb0: {
        _5 = _1;                         // scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:11:19: 11:22
        _4 = <Vec<usize> as Index<usize>>::index(move _5, const 0_usize) -> bb1; // scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:11:19: 11:25
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/issue-38714.rs:11:19: 11:25
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<usize>, usize) -> &'a <Vec<usize> as Index<usize>>::Output {<Vec<usize> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:11:18: 11:25
        _2 = _3;                         // scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:11:18: 11:25
        _0 = UsizeRef::<'_> { a: move _2 }; // scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:11:5: 11:26
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:12:2: 12:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:14:11: 14:11
    let _1: std::boxed::Box<dyn for<'r> std::ops::Fn(&'r std::vec::Vec<usize>) -> UsizeRef<'r>>; // in scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:16:9: 16:10
    let mut _2: std::boxed::Box<[closure@ui/functions-closures/closure-expected-type/issue-38714.rs:16:29: 16:47]>; // in scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:16:20: 18:7
    let mut _3: [closure@ui/functions-closures/closure-expected-type/issue-38714.rs:16:29: 16:47]; // in scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:16:29: 18:6
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/functions-closures/closure-expected-type/issue-38714.rs:16:9: 16:10
    }

    bb0: {
        _2 = Box::<[closure@ui/functions-closures/closure-expected-type/issue-38714.rs:16:29: 16:47]>::new(move _3) -> bb1; // scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:16:20: 18:7
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/issue-38714.rs:16:20: 16:28
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn([closure@ui/functions-closures/closure-expected-type/issue-38714.rs:16:29: 16:47]) -> Box<[closure@ui/functions-closures/closure-expected-type/issue-38714.rs:16:29: 16:47]> {Box::<[closure@ui/functions-closures/closure-expected-type/issue-38714.rs:16:29: 16:47]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = move _2 as std::boxed::Box<dyn for<'r> std::ops::Fn(&'r std::vec::Vec<usize>) -> UsizeRef<'r>> (Pointer(Unsize)); // scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:16:20: 18:7
        drop(_1) -> bb2;                 // scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:19:1: 19:2
    }

    bb2: {
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:19:2: 19:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/functions-closures/closure-expected-type/issue-38714.rs:16:29: 16:47], _2: &Vec<usize>) -> UsizeRef<'_> {
    debug vec => _2;                     // in scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:16:30: 16:33
    let mut _0: UsizeRef<'_>;            // return place in scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:16:48: 16:48
    let mut _3: &usize;                  // in scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:17:22: 17:29
    let _4: &usize;                      // in scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:17:22: 17:29
    let _5: &usize;                      // in scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:17:23: 17:29
    let mut _6: &std::vec::Vec<usize>;   // in scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:17:23: 17:26

    bb0: {
        _6 = _2;                         // scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:17:23: 17:26
        _5 = <Vec<usize> as Index<usize>>::index(move _6, const 0_usize) -> bb1; // scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:17:23: 17:29
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-expected-type/issue-38714.rs:17:23: 17:29
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<usize>, usize) -> &'a <Vec<usize> as Index<usize>>::Output {<Vec<usize> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:17:22: 17:29
        _3 = _4;                         // scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:17:22: 17:29
        _0 = UsizeRef::<'_> { a: move _3 }; // scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:17:9: 17:31
        return;                          // scope 0 at ui/functions-closures/closure-expected-type/issue-38714.rs:18:6: 18:6
    }
}
