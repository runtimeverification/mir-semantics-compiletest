// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:14:14: 14:14
    let _1: [&str; 3];                   // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:15:13: 15:14
    let mut _2: &str;                    // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:15:23: 15:28
    let _3: &str;                        // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:15:23: 15:28
    let mut _4: &str;                    // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:15:30: 15:33
    let _5: &str;                        // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:15:30: 15:33
    let mut _7: std::iter::Map<std::slice::Iter<'_, &str>, [closure@ui/functions-closures/parallel-codegen-closures.rs:16:39: 16:42]>; // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:16:26: 16:51
    let mut _8: std::slice::Iter<'_, &str>; // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:16:26: 16:34
    let mut _9: &[&str];                 // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:16:26: 16:34
    let mut _10: &[&str; 3];             // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:16:26: 16:34
    let mut _11: [closure@ui/functions-closures/parallel-codegen-closures.rs:16:39: 16:42]; // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:16:39: 16:50
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/functions-closures/parallel-codegen-closures.rs:15:13: 15:14
        let _6: usize;                   // in scope 1 at ui/functions-closures/parallel-codegen-closures.rs:16:13: 16:16
        scope 2 {
            debug len => _6;             // in scope 2 at ui/functions-closures/parallel-codegen-closures.rs:16:13: 16:16
        }
    }

    bb0: {
        _3 = const "bob";                // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:15:23: 15:28
                                         // mir::Constant
                                         // + span: ui/functions-closures/parallel-codegen-closures.rs:15:23: 15:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:15:23: 15:28
        _5 = const "c";                  // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:15:30: 15:33
                                         // mir::Constant
                                         // + span: ui/functions-closures/parallel-codegen-closures.rs:15:30: 15:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:15:30: 15:33
        _1 = [const "a", move _2, move _4]; // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:15:17: 15:34
                                         // mir::Constant
                                         // + span: ui/functions-closures/parallel-codegen-closures.rs:15:18: 15:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &_1;                       // scope 1 at ui/functions-closures/parallel-codegen-closures.rs:16:26: 16:34
        _9 = move _10 as &[&str] (Pointer(Unsize)); // scope 1 at ui/functions-closures/parallel-codegen-closures.rs:16:26: 16:34
        _8 = core::slice::<impl [&str]>::iter(move _9) -> bb1; // scope 1 at ui/functions-closures/parallel-codegen-closures.rs:16:26: 16:34
                                         // mir::Constant
                                         // + span: ui/functions-closures/parallel-codegen-closures.rs:16:28: 16:32
                                         // + literal: Const { ty: for<'a> fn(&'a [&str]) -> std::slice::Iter<'a, &str> {core::slice::<impl [&str]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = <std::slice::Iter<'_, &str> as Iterator>::map::<usize, [closure@ui/functions-closures/parallel-codegen-closures.rs:16:39: 16:42]>(move _8, move _11) -> bb2; // scope 1 at ui/functions-closures/parallel-codegen-closures.rs:16:26: 16:51
                                         // mir::Constant
                                         // + span: ui/functions-closures/parallel-codegen-closures.rs:16:35: 16:38
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, &str>, [closure@ui/functions-closures/parallel-codegen-closures.rs:16:39: 16:42]) -> Map<std::slice::Iter<'_, &str>, [closure@ui/functions-closures/parallel-codegen-closures.rs:16:39: 16:42]> {<std::slice::Iter<'_, &str> as Iterator>::map::<usize, [closure@ui/functions-closures/parallel-codegen-closures.rs:16:39: 16:42]>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = <Map<std::slice::Iter<'_, &str>, [closure@ui/functions-closures/parallel-codegen-closures.rs:16:39: 16:42]> as Iterator>::sum::<usize>(move _7) -> bb3; // scope 1 at ui/functions-closures/parallel-codegen-closures.rs:16:26: 16:57
                                         // mir::Constant
                                         // + span: ui/functions-closures/parallel-codegen-closures.rs:16:52: 16:55
                                         // + literal: Const { ty: fn(Map<std::slice::Iter<'_, &str>, [closure@ui/functions-closures/parallel-codegen-closures.rs:16:39: 16:42]>) -> usize {<Map<std::slice::Iter<'_, &str>, [closure@ui/functions-closures/parallel-codegen-closures.rs:16:39: 16:42]> as Iterator>::sum::<usize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:17:6: 17:6
    }
}

fn foo::{closure#0}(_1: &mut [closure@ui/functions-closures/parallel-codegen-closures.rs:16:39: 16:42], _2: &&str) -> usize {
    debug s => _2;                       // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:16:40: 16:41
    let mut _0: usize;                   // return place in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:16:43: 16:43
    let mut _3: &str;                    // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:16:43: 16:50
    let mut _4: &str;                    // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:16:40: 16:41

    bb0: {
        _4 = deref_copy (*_2);           // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:16:43: 16:50
        _3 = _4;                         // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:16:43: 16:50
        _0 = core::str::<impl str>::len(move _3) -> bb1; // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:16:43: 16:50
                                         // mir::Constant
                                         // + span: ui/functions-closures/parallel-codegen-closures.rs:16:45: 16:48
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> usize {core::str::<impl str>::len}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:16:50: 16:50
    }
}

fn bar() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:21:14: 21:14
    let _1: [&str; 3];                   // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:22:13: 22:14
    let mut _2: &str;                    // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:22:23: 22:28
    let _3: &str;                        // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:22:23: 22:28
    let mut _4: &str;                    // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:22:30: 22:33
    let _5: &str;                        // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:22:30: 22:33
    let mut _7: std::iter::Map<std::slice::Iter<'_, &str>, [closure@ui/functions-closures/parallel-codegen-closures.rs:23:39: 23:42]>; // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:23:26: 23:51
    let mut _8: std::slice::Iter<'_, &str>; // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:23:26: 23:34
    let mut _9: &[&str];                 // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:23:26: 23:34
    let mut _10: &[&str; 3];             // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:23:26: 23:34
    let mut _11: [closure@ui/functions-closures/parallel-codegen-closures.rs:23:39: 23:42]; // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:23:39: 23:50
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/functions-closures/parallel-codegen-closures.rs:22:13: 22:14
        let _6: usize;                   // in scope 1 at ui/functions-closures/parallel-codegen-closures.rs:23:13: 23:16
        scope 2 {
            debug len => _6;             // in scope 2 at ui/functions-closures/parallel-codegen-closures.rs:23:13: 23:16
        }
    }

    bb0: {
        _3 = const "bob";                // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:22:23: 22:28
                                         // mir::Constant
                                         // + span: ui/functions-closures/parallel-codegen-closures.rs:22:23: 22:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:22:23: 22:28
        _5 = const "c";                  // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:22:30: 22:33
                                         // mir::Constant
                                         // + span: ui/functions-closures/parallel-codegen-closures.rs:22:30: 22:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:22:30: 22:33
        _1 = [const "a", move _2, move _4]; // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:22:17: 22:34
                                         // mir::Constant
                                         // + span: ui/functions-closures/parallel-codegen-closures.rs:22:18: 22:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &_1;                       // scope 1 at ui/functions-closures/parallel-codegen-closures.rs:23:26: 23:34
        _9 = move _10 as &[&str] (Pointer(Unsize)); // scope 1 at ui/functions-closures/parallel-codegen-closures.rs:23:26: 23:34
        _8 = core::slice::<impl [&str]>::iter(move _9) -> bb1; // scope 1 at ui/functions-closures/parallel-codegen-closures.rs:23:26: 23:34
                                         // mir::Constant
                                         // + span: ui/functions-closures/parallel-codegen-closures.rs:23:28: 23:32
                                         // + literal: Const { ty: for<'a> fn(&'a [&str]) -> std::slice::Iter<'a, &str> {core::slice::<impl [&str]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = <std::slice::Iter<'_, &str> as Iterator>::map::<usize, [closure@ui/functions-closures/parallel-codegen-closures.rs:23:39: 23:42]>(move _8, move _11) -> bb2; // scope 1 at ui/functions-closures/parallel-codegen-closures.rs:23:26: 23:51
                                         // mir::Constant
                                         // + span: ui/functions-closures/parallel-codegen-closures.rs:23:35: 23:38
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, &str>, [closure@ui/functions-closures/parallel-codegen-closures.rs:23:39: 23:42]) -> Map<std::slice::Iter<'_, &str>, [closure@ui/functions-closures/parallel-codegen-closures.rs:23:39: 23:42]> {<std::slice::Iter<'_, &str> as Iterator>::map::<usize, [closure@ui/functions-closures/parallel-codegen-closures.rs:23:39: 23:42]>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = <Map<std::slice::Iter<'_, &str>, [closure@ui/functions-closures/parallel-codegen-closures.rs:23:39: 23:42]> as Iterator>::sum::<usize>(move _7) -> bb3; // scope 1 at ui/functions-closures/parallel-codegen-closures.rs:23:26: 23:57
                                         // mir::Constant
                                         // + span: ui/functions-closures/parallel-codegen-closures.rs:23:52: 23:55
                                         // + literal: Const { ty: fn(Map<std::slice::Iter<'_, &str>, [closure@ui/functions-closures/parallel-codegen-closures.rs:23:39: 23:42]>) -> usize {<Map<std::slice::Iter<'_, &str>, [closure@ui/functions-closures/parallel-codegen-closures.rs:23:39: 23:42]> as Iterator>::sum::<usize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:24:6: 24:6
    }
}

fn bar::{closure#0}(_1: &mut [closure@ui/functions-closures/parallel-codegen-closures.rs:23:39: 23:42], _2: &&str) -> usize {
    debug s => _2;                       // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:23:40: 23:41
    let mut _0: usize;                   // return place in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:23:43: 23:43
    let mut _3: &str;                    // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:23:43: 23:50
    let mut _4: &str;                    // in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:23:40: 23:41

    bb0: {
        _4 = deref_copy (*_2);           // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:23:43: 23:50
        _3 = _4;                         // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:23:43: 23:50
        _0 = core::str::<impl str>::len(move _3) -> bb1; // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:23:43: 23:50
                                         // mir::Constant
                                         // + span: ui/functions-closures/parallel-codegen-closures.rs:23:45: 23:48
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> usize {core::str::<impl str>::len}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:23:50: 23:50
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/parallel-codegen-closures.rs:27:11: 27:11

    bb0: {
        return;                          // scope 0 at ui/functions-closures/parallel-codegen-closures.rs:28:2: 28:2
    }
}
