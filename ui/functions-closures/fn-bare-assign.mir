// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: isize, _2: &mut bool) -> () {
    debug i => _1;
    debug called => _2;
    let mut _0: ();
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let _5: &isize;
    let _6: &isize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: isize;
    let mut _10: isize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: &isize;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }

    bb0: {
        _4 = &_1;
        _14 = const _;
        _3 = (move _4, _14);
        _5 = (_3.0: &isize);
        _6 = (_3.1: &isize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<isize, isize>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        (*_2) = const true;
        return;
    }
}

promoted[0] in f: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

fn g(_1: for<'a> fn(isize, &'a mut bool), _2: &mut bool) -> () {
    debug f => _1;
    debug called => _2;
    let mut _0: ();
    let _3: ();

    bb0: {
        _3 = _1(const 10_isize, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let _2: ();
    let mut _3: for<'a> fn(isize, &'a mut bool);
    let mut _4: &mut bool;
    let mut _5: (&bool, &bool);
    let mut _6: &bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug called => _1;
        scope 2 {
            debug h => f;
            let _7: &bool;
            let _8: &bool;
            let mut _16: &bool;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
        }
    }

    bb0: {
        _1 = const false;
        _3 = f as for<'a> fn(isize, &'a mut bool) (Pointer(ReifyFnPointer));
        _4 = &mut _1;
        _2 = g(move _3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_1;
        _16 = const _;
        _5 = (move _6, _16);
        _7 = (_5.0: &bool);
        _8 = (_5.1: &bool);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<bool, bool>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}
