// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/functions-closures/clone-closure.rs:4:10: 4:15>::clone(_1: &S) -> S {
    debug self => _1;
    let mut _0: S;
    let mut _2: i32;
    let _3: &i32;

    bb0: {
        _3 = &((*_1).0: i32);
        _2 = (*_3);
        _0 = S(move _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: S;
    let mut _4: &[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28];
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let _7: i32;
    let mut _8: &mut [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28];
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&i32, &i32);
    let mut _19: &i32;
    let _20: i32;
    let mut _21: &mut [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28];
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let mut _2: [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28];
        scope 2 {
            debug hello => _2;
            let mut _3: [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28];
            scope 3 {
                debug hello2 => _3;
                let _9: &i32;
                let _10: &i32;
                let _22: &i32;
                let _23: &i32;
                let mut _31: &i32;
                let mut _32: &i32;
                scope 4 {
                    debug left_val => _9;
                    debug right_val => _10;
                    let _15: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _15;
                    }
                }
                scope 6 {
                    debug left_val => _22;
                    debug right_val => _23;
                    let _28: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _28;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = S(const 5_i32);
        _2 = [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] { a: move _1 };
        _4 = &_2;
        _3 = <[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] as Clone>::clone(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _32 = const _;
        _8 = &mut _3;
        _7 = <[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] as FnMut<()>>::call_mut(move _8, const ()) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_7;
        _5 = (_32, move _6);
        _9 = (_5.0: &i32);
        _10 = (_5.1: &i32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i32, i32>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb4: {
        _31 = const _;
        _21 = &mut _2;
        _20 = <[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] as FnMut<()>>::call_mut(move _21, const ()) -> [return: bb5, unwind continue];
    }

    bb5: {
        _19 = &_20;
        _18 = (_31, move _19);
        _22 = (_18.0: &i32);
        _23 = (_18.1: &i32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<i32, i32>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb7: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 6_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 6_i32;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28]) -> i32 {
    debug a => ((*_1).0: S);
    let mut _0: i32;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &i32;
    let mut _10: &[&str; 2];

    bb0: {
        (((*_1).0: S).0: i32) = Add((((*_1).0: S).0: i32), const 1_i32);
        _10 = const _;
        _4 = _10 as &[&str] (Pointer(Unsize));
        _9 = &(((*_1).0: S).0: i32);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = (((*_1).0: S).0: i32);
        return;
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Hello ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn S(_1: i32) -> S {
    let mut _0: S;

    bb0: {
        _0 = S(move _1);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: i32) -> S {
    let mut _0: S;

    bb0: {
        _0 = S(move _1);
        return;
    }
}
