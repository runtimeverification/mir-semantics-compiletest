// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/functions-closures/clone-closure.rs:4:10: 4:15>::clone(_1: &S) -> S {
    debug self => _1;                    // in scope 0 at ui/functions-closures/clone-closure.rs:4:10: 4:15
    let mut _0: S;                       // return place in scope 0 at ui/functions-closures/clone-closure.rs:4:10: 4:15
    let mut _2: i32;                     // in scope 0 at ui/functions-closures/clone-closure.rs:5:10: 5:13
    let mut _3: &i32;                    // in scope 0 at ui/functions-closures/clone-closure.rs:5:10: 5:13
    let _4: &i32;                        // in scope 0 at ui/functions-closures/clone-closure.rs:5:10: 5:13

    bb0: {
        _4 = &((*_1).0: i32);            // scope 0 at ui/functions-closures/clone-closure.rs:5:10: 5:13
        _3 = _4;                         // scope 0 at ui/functions-closures/clone-closure.rs:5:10: 5:13
        _2 = (*_3);                      // scope 0 at ui/functions-closures/clone-closure.rs:5:10: 5:13
        _0 = S(move _2);                 // scope 0 at ui/functions-closures/clone-closure.rs:4:10: 4:15
        return;                          // scope 0 at ui/functions-closures/clone-closure.rs:4:15: 4:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/clone-closure.rs:7:11: 7:11
    let mut _1: S;                       // in scope 0 at ui/functions-closures/clone-closure.rs:8:9: 8:14
    let mut _4: &[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28]; // in scope 0 at ui/functions-closures/clone-closure.rs:15:22: 15:35
    let mut _5: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _7: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _8: i32;                         // in scope 0 at ui/functions-closures/clone-closure.rs:16:19: 16:27
    let mut _9: &mut [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28]; // in scope 0 at ui/functions-closures/clone-closure.rs:16:19: 16:25
    let mut _10: ();                     // in scope 0 at ui/functions-closures/clone-closure.rs:16:19: 16:27
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _25: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _27: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _28: i32;                        // in scope 0 at ui/functions-closures/clone-closure.rs:17:19: 17:26
    let mut _29: &mut [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28]; // in scope 0 at ui/functions-closures/clone-closure.rs:17:19: 17:24
    let mut _30: ();                     // in scope 0 at ui/functions-closures/clone-closure.rs:17:19: 17:26
    let mut _33: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _34: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _35: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _36: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _38: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _39: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _40: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _41: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _42: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _43: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/functions-closures/clone-closure.rs:8:9: 8:14
        let mut _2: [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28]; // in scope 1 at ui/functions-closures/clone-closure.rs:9:9: 9:18
        scope 2 {
            debug hello => _2;           // in scope 2 at ui/functions-closures/clone-closure.rs:9:9: 9:18
            let mut _3: [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28]; // in scope 2 at ui/functions-closures/clone-closure.rs:15:9: 15:19
            scope 3 {
                debug hello2 => _3;      // in scope 3 at ui/functions-closures/clone-closure.rs:15:9: 15:19
                let _11: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _12: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _31: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _32: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _45: &i32;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                let mut _46: &i32;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                scope 4 {
                    debug left_val => _11; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _12; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _17: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _17; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 6 {
                    debug left_val => _31; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _32; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _37: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _37; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const S(5_i32);             // scope 0 at ui/functions-closures/clone-closure.rs:8:17: 8:21
                                         // mir::Constant
                                         // + span: ui/functions-closures/clone-closure.rs:8:17: 8:21
                                         // + literal: Const { ty: S, val: Value(Scalar(0x00000005)) }
        _2 = [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] { a: move _1 }; // scope 1 at ui/functions-closures/clone-closure.rs:9:21: 13:6
                                         // closure
                                         // + def_id: DefId(0:4 ~ clone_closure[876f]::main::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()) -> i32,
                                         //     (S,),
                                         // ]
        _4 = &_2;                        // scope 2 at ui/functions-closures/clone-closure.rs:15:22: 15:35
        _3 = <[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] as Clone>::clone(move _4) -> bb1; // scope 2 at ui/functions-closures/clone-closure.rs:15:22: 15:35
                                         // mir::Constant
                                         // + span: ui/functions-closures/clone-closure.rs:15:28: 15:33
                                         // + literal: Const { ty: for<'a> fn(&'a [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28]) -> [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] {<[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _46 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _6 = _46;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _9 = &mut _3;                    // scope 3 at ui/functions-closures/clone-closure.rs:16:19: 16:25
        _8 = <[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] as FnMut<()>>::call_mut(move _9, move _10) -> bb2; // scope 3 at ui/functions-closures/clone-closure.rs:16:19: 16:27
                                         // mir::Constant
                                         // + span: ui/functions-closures/clone-closure.rs:16:19: 16:25
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28], ()) -> <[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] as FnOnce<()>>::Output {<[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &_8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _7);         // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_5.0: &i32);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_5.1: &i32);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = const 6_i32;               // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = (*_12);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = Eq(move _15, move _16);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _13 = Not(move _14);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb4, otherwise: bb3]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _17 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<i32, i32>(move _19, move _20, move _22, move _24); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb4: {
        _45 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _26 = _45;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _29 = &mut _2;                   // scope 3 at ui/functions-closures/clone-closure.rs:17:19: 17:24
        _28 = <[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] as FnMut<()>>::call_mut(move _29, move _30) -> bb5; // scope 3 at ui/functions-closures/clone-closure.rs:17:19: 17:26
                                         // mir::Constant
                                         // + span: ui/functions-closures/clone-closure.rs:17:19: 17:24
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28], ()) -> <[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] as FnOnce<()>>::Output {<[closure@ui/functions-closures/clone-closure.rs:9:21: 9:28] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb5: {
        _27 = &_28;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _27);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _31 = (_25.0: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _32 = (_25.1: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _35 = const 6_i32;               // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _36 = (*_32);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _34 = Eq(move _35, move _36);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _33 = Not(move _34);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _33) -> [0: bb7, otherwise: bb6]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _37 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = _31;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _41;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _32;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = _43;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _38 = core::panicking::assert_failed::<i32, i32>(move _39, move _40, move _42, move _44); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/functions-closures/clone-closure.rs:18:2: 18:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: i32;                     // in scope 0 at ui/functions-closures/clone-closure.rs:17:16: 17:17

    bb0: {
        _1 = const 6_i32;                // scope 0 at ui/functions-closures/clone-closure.rs:17:16: 17:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: i32;                     // in scope 0 at ui/functions-closures/clone-closure.rs:16:16: 16:17

    bb0: {
        _1 = const 6_i32;                // scope 0 at ui/functions-closures/clone-closure.rs:16:16: 16:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/functions-closures/clone-closure.rs:9:21: 9:28]) -> i32 {
    debug a => ((*_1).0: S);             // in scope 0 at ui/functions-closures/clone-closure.rs:8:9: 8:14
    let mut _0: i32;                     // return place in scope 0 at ui/functions-closures/clone-closure.rs:9:29: 9:29
    let mut _2: (i32, bool);             // in scope 0 at ui/functions-closures/clone-closure.rs:10:9: 10:17
    let _3: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _5: &[&str];                 // in scope 0 at ui/functions-closures/clone-closure.rs:11:18: 11:28
    let mut _6: &[&str; 2];              // in scope 0 at ui/functions-closures/clone-closure.rs:11:18: 11:28
    let _7: &[&str; 2];                  // in scope 0 at ui/functions-closures/clone-closure.rs:11:18: 11:28
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/functions-closures/clone-closure.rs:11:30: 11:33
    let mut _13: &i32;                   // in scope 0 at ui/functions-closures/clone-closure.rs:11:30: 11:33
    let _14: &i32;                       // in scope 0 at ui/functions-closures/clone-closure.rs:11:30: 11:33
    let mut _15: &[&str; 2];             // in scope 0 at ui/functions-closures/clone-closure.rs:11:18: 11:28

    bb0: {
        _2 = CheckedAdd((((*_1).0: S).0: i32), const 1_i32); // scope 0 at ui/functions-closures/clone-closure.rs:10:9: 10:17
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", (((*_1).0: S).0: i32), const 1_i32) -> bb1; // scope 0 at ui/functions-closures/clone-closure.rs:10:9: 10:17
    }

    bb1: {
        (((*_1).0: S).0: i32) = move (_2.0: i32); // scope 0 at ui/functions-closures/clone-closure.rs:10:9: 10:17
        _15 = const _;                   // scope 0 at ui/functions-closures/clone-closure.rs:11:18: 11:28
                                         // mir::Constant
                                         // + span: ui/functions-closures/clone-closure.rs:11:18: 11:28
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _7 = _15;                        // scope 0 at ui/functions-closures/clone-closure.rs:11:18: 11:28
        _6 = _7;                         // scope 0 at ui/functions-closures/clone-closure.rs:11:18: 11:28
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/functions-closures/clone-closure.rs:11:18: 11:28
        _14 = &(((*_1).0: S).0: i32);    // scope 0 at ui/functions-closures/clone-closure.rs:11:30: 11:33
        _13 = _14;                       // scope 0 at ui/functions-closures/clone-closure.rs:11:30: 11:33
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _13) -> bb2; // scope 0 at ui/functions-closures/clone-closure.rs:11:30: 11:33
                                         // mir::Constant
                                         // + span: ui/functions-closures/clone-closure.rs:11:30: 11:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = [move _12];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = _print(move _4) -> bb4;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = (((*_1).0: S).0: i32);      // scope 0 at ui/functions-closures/clone-closure.rs:12:9: 12:12
        return;                          // scope 0 at ui/functions-closures/clone-closure.rs:13:6: 13:6
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/functions-closures/clone-closure.rs:11:18: 11:28
    let mut _1: [&str; 2];               // in scope 0 at ui/functions-closures/clone-closure.rs:11:18: 11:28

    bb0: {
        _1 = [const "Hello ", const "\n"]; // scope 0 at ui/functions-closures/clone-closure.rs:11:18: 11:28
                                         // mir::Constant
                                         // + span: ui/functions-closures/clone-closure.rs:11:18: 11:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/functions-closures/clone-closure.rs:11:18: 11:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/functions-closures/clone-closure.rs:11:18: 11:28
        return;                          // scope 0 at ui/functions-closures/clone-closure.rs:11:18: 11:28
    }
}

fn S(_1: i32) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/functions-closures/clone-closure.rs:5:1: 5:9

    bb0: {
        _0 = S(move _1);                 // scope 0 at ui/functions-closures/clone-closure.rs:5:1: 5:9
        return;                          // scope 0 at ui/functions-closures/clone-closure.rs:5:1: 5:9
    }
}

// MIR FOR CTFE
fn S(_1: i32) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/functions-closures/clone-closure.rs:5:1: 5:9

    bb0: {
        _0 = S(move _1);                 // scope 0 at ui/functions-closures/clone-closure.rs:5:1: 5:9
        return;                          // scope 0 at ui/functions-closures/clone-closure.rs:5:1: 5:9
    }
}
