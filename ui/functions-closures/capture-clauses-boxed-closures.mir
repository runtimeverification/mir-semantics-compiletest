// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn each(_1: &[T], _2: F) -> () {
    debug x => _1;                       // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:3:15: 3:16
    debug f => _2;                       // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:3:24: 3:29
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:3:34: 3:34
    let mut _3: std::slice::Iter<'_, T>; // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
    let mut _4: &[T];                    // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
    let mut _5: std::slice::Iter<'_, T>; // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
    let _6: ();                          // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
    let mut _7: std::option::Option<&T>; // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
    let mut _8: &mut std::slice::Iter<'_, T>; // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
    let mut _9: &mut std::slice::Iter<'_, T>; // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
    let mut _10: isize;                  // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:5: 6:6
    let mut _12: &mut F;                 // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:5:9: 5:10
    let mut _13: (&T,);                  // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:5:9: 5:15
    let mut _14: &T;                     // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:5:11: 5:14
    scope 1 {
        debug iter => _5;                // in scope 1 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
        let _11: &T;                     // in scope 1 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:9: 4:12
        scope 2 {
            debug val => _11;            // in scope 2 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:9: 4:12
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
        _3 = <&[T] as IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb8]; // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
                                         // mir::Constant
                                         // + span: ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
                                         // + literal: Const { ty: fn(&[T]) -> <&[T] as IntoIterator>::IntoIter {<&[T] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _3;                    // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
        goto -> bb2;                     // scope 1 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:5: 6:6
    }

    bb2: {
        _9 = &mut _5;                    // scope 1 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
        _8 = &mut (*_9);                 // scope 1 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
        _7 = <std::slice::Iter<'_, T> as Iterator>::next(move _8) -> [return: bb3, unwind: bb8]; // scope 1 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
                                         // mir::Constant
                                         // + span: ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = discriminant(_7);          // scope 1 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
        switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
    }

    bb4: {
        _11 = ((_7 as Some).0: &T);      // scope 1 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:9: 4:12
        _12 = &mut _2;                   // scope 2 at ui/functions-closures/capture-clauses-boxed-closures.rs:5:9: 5:10
        _14 = _11;                       // scope 2 at ui/functions-closures/capture-clauses-boxed-closures.rs:5:11: 5:14
        _13 = (move _14,);               // scope 2 at ui/functions-closures/capture-clauses-boxed-closures.rs:5:9: 5:15
        _6 = <F as FnMut<(&T,)>>::call_mut(move _12, move _13) -> [return: bb10, unwind: bb8]; // scope 2 at ui/functions-closures/capture-clauses-boxed-closures.rs:5:9: 5:15
                                         // mir::Constant
                                         // + span: ui/functions-closures/capture-clauses-boxed-closures.rs:5:9: 5:10
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (&T,)) -> <F as FnOnce<(&T,)>>::Output {<F as FnMut<(&T,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at ui/functions-closures/capture-clauses-boxed-closures.rs:4:16: 4:17
    }

    bb6: {
        drop(_2) -> bb7;                 // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:7:1: 7:2
    }

    bb7: {
        return;                          // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:7:2: 7:2
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:7:1: 7:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:3:1: 7:2
    }

    bb10: {
        goto -> bb2;                     // scope 2 at ui/functions-closures/capture-clauses-boxed-closures.rs:5:9: 5:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:9:11: 9:11
    let mut _1: usize;                   // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:10:9: 10:16
    let _3: ();                          // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:5: 12:36
    let mut _4: &[usize];                // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:10: 12:16
    let mut _5: &[usize; 5];             // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:10: 12:16
    let _6: &[usize; 5];                 // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:10: 12:16
    let mut _7: [closure@ui/functions-closures/capture-clauses-boxed-closures.rs:12:18: 12:23]; // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:18: 12:35
    let mut _8: &mut usize;              // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:18: 12:35
    let mut _9: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _10: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _11: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug sum => _1;                 // in scope 1 at ui/functions-closures/capture-clauses-boxed-closures.rs:10:9: 10:16
        let _2: [usize; 5];              // in scope 1 at ui/functions-closures/capture-clauses-boxed-closures.rs:11:9: 11:14
        scope 2 {
            debug elems => _2;           // in scope 2 at ui/functions-closures/capture-clauses-boxed-closures.rs:11:9: 11:14
            let _12: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _13: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _26: &usize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _12;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _13;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _18: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _18;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:10:19: 10:26
        _2 = [const 1_usize, const 2_usize, const 3_usize, const 4_usize, const 5_usize]; // scope 1 at ui/functions-closures/capture-clauses-boxed-closures.rs:11:17: 11:40
        _6 = &_2;                        // scope 2 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:10: 12:16
        _5 = _6;                         // scope 2 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:10: 12:16
        _4 = move _5 as &[usize] (Pointer(Unsize)); // scope 2 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:10: 12:16
        _8 = &mut _1;                    // scope 2 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:18: 12:35
        _7 = [closure@ui/functions-closures/capture-clauses-boxed-closures.rs:12:18: 12:23] { sum: move _8 }; // scope 2 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:18: 12:35
                                         // closure
                                         // + def_id: DefId(0:7 ~ capture_clauses_boxed_closures[9b8c]::main::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     for<'a> extern "rust-call" fn((&'a usize,)),
                                         //     (&mut usize,),
                                         // ]
        _3 = each::<usize, [closure@ui/functions-closures/capture-clauses-boxed-closures.rs:12:18: 12:23]>(move _4, move _7) -> bb1; // scope 2 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:5: 12:36
                                         // mir::Constant
                                         // + span: ui/functions-closures/capture-clauses-boxed-closures.rs:12:5: 12:9
                                         // + literal: Const { ty: for<'a> fn(&'a [usize], [closure@ui/functions-closures/capture-clauses-boxed-closures.rs:12:18: 12:23]) {each::<usize, [closure@ui/functions-closures/capture-clauses-boxed-closures.rs:12:18: 12:23]>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = &_1;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _26 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _11 = _26;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _9 = (move _10, move _11);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_9.0: &usize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_9.1: &usize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = (*_12);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = const 15_usize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = Eq(move _16, move _17);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _14 = Not(move _15);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<usize, usize>(move _20, move _21, move _23, move _25); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:14:2: 14:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:13:21: 13:23

    bb0: {
        _1 = const 15_usize;             // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:13:21: 13:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/functions-closures/capture-clauses-boxed-closures.rs:12:18: 12:23], _2: &usize) -> () {
    debug val => _2;                     // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:19: 12:22
    debug sum => (*((*_1).0: &mut usize)); // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:10:9: 10:16
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:24: 12:24
    let mut _3: usize;                   // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:31: 12:35
    let mut _4: (usize, bool);           // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:24: 12:35
    let mut _5: &mut usize;              // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:18: 12:35
    let mut _6: &mut usize;              // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:18: 12:35
    let mut _7: &mut usize;              // in scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:18: 12:35

    bb0: {
        _3 = (*_2);                      // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:31: 12:35
        _5 = deref_copy ((*_1).0: &mut usize); // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:24: 12:35
        _4 = CheckedAdd((*_5), _3);      // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:24: 12:35
        _6 = deref_copy ((*_1).0: &mut usize); // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:24: 12:35
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_6), move _3) -> bb1; // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:24: 12:35
    }

    bb1: {
        _7 = deref_copy ((*_1).0: &mut usize); // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:24: 12:35
        (*_7) = move (_4.0: usize);      // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:24: 12:35
        return;                          // scope 0 at ui/functions-closures/capture-clauses-boxed-closures.rs:12:35: 12:35
    }
}
