// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16];
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: i32;
    let mut _5: &[closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22];
    let _6: [closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22];
    let mut _7: &[closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16];
    let mut _8: (i32, i32);
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug f => const ZeroSized: [closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16];
        let _9: &i32;
        let _10: &i32;
        let mut _18: &i32;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
    }

    bb0: {
        _7 = &_1;
        _6 = <[closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16] as Fn<((),)>>::call(move _7, const ((),)) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _8 = (const 1_i32, const 2_i32);
        _4 = <[closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22] as Fn<(i32, i32)>>::call(move _5, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &_4;
        _18 = const _;
        _2 = (move _3, _18);
        _9 = (_2.0: &i32);
        _10 = (_2.1: &i32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i32, i32>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16], _2: ()) -> [closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22] {
    let mut _0: [closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22];

    bb0: {
        return;
    }
}

fn main::{closure#0}::{closure#0}(_1: &[closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22], _2: i32, _3: i32) -> i32 {
    debug x => _2;
    debug y => _3;
    let mut _0: i32;

    bb0: {
        _0 = Add(_2, _3);
        return;
    }
}
