// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-returning-closure.rs:2:11: 2:11
    let _1: [closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16]; // in scope 0 at ui/functions-closures/closure-returning-closure.rs:3:9: 3:10
    let mut _2: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: i32;                         // in scope 0 at ui/functions-closures/closure-returning-closure.rs:4:16: 4:27
    let mut _5: &[closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22]; // in scope 0 at ui/functions-closures/closure-returning-closure.rs:4:16: 4:21
    let _6: [closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22]; // in scope 0 at ui/functions-closures/closure-returning-closure.rs:4:16: 4:21
    let mut _7: &[closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16]; // in scope 0 at ui/functions-closures/closure-returning-closure.rs:4:16: 4:17
    let mut _8: ((),);                   // in scope 0 at ui/functions-closures/closure-returning-closure.rs:4:16: 4:21
    let mut _9: (i32, i32);              // in scope 0 at ui/functions-closures/closure-returning-closure.rs:4:16: 4:27
    let mut _10: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/functions-closures/closure-returning-closure.rs:3:9: 3:10
        let _11: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _12: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _25: &i32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _11;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _12;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _17: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _17;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _7 = &_1;                        // scope 1 at ui/functions-closures/closure-returning-closure.rs:4:16: 4:17
        _6 = <[closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16] as Fn<((),)>>::call(move _7, move _8) -> bb1; // scope 1 at ui/functions-closures/closure-returning-closure.rs:4:16: 4:21
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-returning-closure.rs:4:16: 4:17
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16], ((),)) -> <[closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16] as FnOnce<((),)>>::Output {<[closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16] as Fn<((),)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_6;                        // scope 1 at ui/functions-closures/closure-returning-closure.rs:4:16: 4:21
        _9 = const (1_i32, 2_i32);       // scope 1 at ui/functions-closures/closure-returning-closure.rs:4:16: 4:27
        _4 = <[closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22] as Fn<(i32, i32)>>::call(move _5, move _9) -> bb2; // scope 1 at ui/functions-closures/closure-returning-closure.rs:4:16: 4:27
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-returning-closure.rs:4:16: 4:21
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22], (i32, i32)) -> <[closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22] as FnOnce<(i32, i32)>>::Output {<[closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22] as Fn<(i32, i32)>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _25 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _10 = _25;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _10);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_2.0: &i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_2.1: &i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = (*_11);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = const 3_i32;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = Eq(move _15, move _16);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _13 = Not(move _14);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _17 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<i32, i32>(move _19, move _20, move _22, move _24); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/functions-closures/closure-returning-closure.rs:5:2: 5:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/functions-closures/closure-returning-closure.rs:4:29: 4:30

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/functions-closures/closure-returning-closure.rs:4:29: 4:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: &[closure@ui/functions-closures/closure-returning-closure.rs:3:13: 3:16], _2: ()) -> [closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22] {
    let mut _0: [closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22]; // return place in scope 0 at ui/functions-closures/closure-returning-closure.rs:3:16: 3:16

    bb0: {
        return;                          // scope 0 at ui/functions-closures/closure-returning-closure.rs:3:26: 3:26
    }
}

fn main::{closure#0}::{closure#0}(_1: &[closure@ui/functions-closures/closure-returning-closure.rs:3:16: 3:22], _2: i32, _3: i32) -> i32 {
    debug x => _2;                       // in scope 0 at ui/functions-closures/closure-returning-closure.rs:3:17: 3:18
    debug y => _3;                       // in scope 0 at ui/functions-closures/closure-returning-closure.rs:3:20: 3:21
    let mut _0: i32;                     // return place in scope 0 at ui/functions-closures/closure-returning-closure.rs:3:23: 3:23
    let mut _4: i32;                     // in scope 0 at ui/functions-closures/closure-returning-closure.rs:3:23: 3:24
    let mut _5: i32;                     // in scope 0 at ui/functions-closures/closure-returning-closure.rs:3:25: 3:26
    let mut _6: (i32, bool);             // in scope 0 at ui/functions-closures/closure-returning-closure.rs:3:23: 3:26

    bb0: {
        _4 = _2;                         // scope 0 at ui/functions-closures/closure-returning-closure.rs:3:23: 3:24
        _5 = _3;                         // scope 0 at ui/functions-closures/closure-returning-closure.rs:3:25: 3:26
        _6 = CheckedAdd(_4, _5);         // scope 0 at ui/functions-closures/closure-returning-closure.rs:3:23: 3:26
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/functions-closures/closure-returning-closure.rs:3:23: 3:26
    }

    bb1: {
        _0 = move (_6.0: i32);           // scope 0 at ui/functions-closures/closure-returning-closure.rs:3:23: 3:26
        return;                          // scope 0 at ui/functions-closures/closure-returning-closure.rs:3:26: 3:26
    }
}
