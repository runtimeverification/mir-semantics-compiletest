// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/fn-coerce-field.rs:10:15: 10:15
    let _1: r<fn()>;                     // in scope 0 at ui/functions-closures/fn-coerce-field.rs:12:9: 12:11
    let mut _2: fn();                    // in scope 0 at ui/functions-closures/fn-coerce-field.rs:12:33: 12:42
    scope 1 {
        debug _i => _1;                  // in scope 1 at ui/functions-closures/fn-coerce-field.rs:12:9: 12:11
    }

    bb0: {
        _2 = f as fn() (Pointer(ReifyFnPointer)); // scope 0 at ui/functions-closures/fn-coerce-field.rs:12:33: 12:34
                                         // mir::Constant
                                         // + span: ui/functions-closures/fn-coerce-field.rs:12:33: 12:34
                                         // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }
        _1 = r::<fn()> { field: move _2 }; // scope 0 at ui/functions-closures/fn-coerce-field.rs:12:23: 12:43
        return;                          // scope 0 at ui/functions-closures/fn-coerce-field.rs:13:2: 13:2
    }
}

fn f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/fn-coerce-field.rs:11:12: 11:12

    bb0: {
        return;                          // scope 0 at ui/functions-closures/fn-coerce-field.rs:11:14: 11:14
    }
}
