// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn call_it(_1: F) -> () {
    debug f => _1;                       // in scope 0 at ui/functions-closures/closure-reform.rs:6:15: 6:16
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-reform.rs:7:5: 7:5
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/functions-closures/closure-reform.rs:9:14: 9:18
    let mut _5: &[&str; 2];              // in scope 0 at ui/functions-closures/closure-reform.rs:9:14: 9:18
    let _6: &[&str; 2];                  // in scope 0 at ui/functions-closures/closure-reform.rs:9:14: 9:18
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/functions-closures/closure-reform.rs:9:20: 9:41
    let mut _12: &std::string::String;   // in scope 0 at ui/functions-closures/closure-reform.rs:9:20: 9:41
    let _13: &std::string::String;       // in scope 0 at ui/functions-closures/closure-reform.rs:9:20: 9:41
    let _14: std::string::String;        // in scope 0 at ui/functions-closures/closure-reform.rs:9:20: 9:41
    let mut _15: F;                      // in scope 0 at ui/functions-closures/closure-reform.rs:9:20: 9:21
    let mut _16: (std::string::String,); // in scope 0 at ui/functions-closures/closure-reform.rs:9:20: 9:41
    let mut _17: std::string::String;    // in scope 0 at ui/functions-closures/closure-reform.rs:9:22: 9:40
    let mut _18: &str;                   // in scope 0 at ui/functions-closures/closure-reform.rs:9:22: 9:40
    let _19: &str;                       // in scope 0 at ui/functions-closures/closure-reform.rs:9:22: 9:28
    let mut _20: &[&str; 2];             // in scope 0 at ui/functions-closures/closure-reform.rs:9:14: 9:18
    let mut _21: bool;                   // in scope 0 at ui/functions-closures/closure-reform.rs:9:40: 9:41

    bb0: {
        _21 = const false;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
        _20 = const _;                   // scope 0 at ui/functions-closures/closure-reform.rs:9:14: 9:18
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:9:14: 9:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(call_it, [F], Some(promoted[0])) }
        _6 = _20;                        // scope 0 at ui/functions-closures/closure-reform.rs:9:14: 9:18
        _5 = _6;                         // scope 0 at ui/functions-closures/closure-reform.rs:9:14: 9:18
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/functions-closures/closure-reform.rs:9:14: 9:18
        _21 = const true;                // scope 0 at ui/functions-closures/closure-reform.rs:9:20: 9:21
        _15 = move _1;                   // scope 0 at ui/functions-closures/closure-reform.rs:9:20: 9:21
        _19 = const "Fred";              // scope 0 at ui/functions-closures/closure-reform.rs:9:22: 9:28
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:9:22: 9:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _18 = _19;                       // scope 0 at ui/functions-closures/closure-reform.rs:9:22: 9:40
        _17 = <str as ToString>::to_string(move _18) -> [return: bb1, unwind: bb10]; // scope 0 at ui/functions-closures/closure-reform.rs:9:22: 9:40
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:9:29: 9:38
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _16 = (move _17,);               // scope 0 at ui/functions-closures/closure-reform.rs:9:20: 9:41
        _21 = const false;               // scope 0 at ui/functions-closures/closure-reform.rs:9:20: 9:41
        _14 = <F as FnOnce<(String,)>>::call_once(move _15, move _16) -> [return: bb2, unwind: bb10]; // scope 0 at ui/functions-closures/closure-reform.rs:9:20: 9:41
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:9:20: 9:21
                                         // + literal: Const { ty: extern "rust-call" fn(F, (String,)) -> <F as FnOnce<(String,)>>::Output {<F as FnOnce<(String,)>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        _21 = const false;               // scope 0 at ui/functions-closures/closure-reform.rs:9:40: 9:41
        _13 = &_14;                      // scope 0 at ui/functions-closures/closure-reform.rs:9:20: 9:41
        _12 = _13;                       // scope 0 at ui/functions-closures/closure-reform.rs:9:20: 9:41
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _12) -> [return: bb3, unwind: bb7]; // scope 0 at ui/functions-closures/closure-reform.rs:9:20: 9:41
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:9:20: 9:41
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb4, unwind: bb7]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = _print(move _3) -> [return: bb5, unwind: bb7]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_14) -> bb6;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb6: {
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:10:2: 10:2
    }

    bb7 (cleanup): {
        drop(_14) -> bb8;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/functions-closures/closure-reform.rs:6:1: 10:2
    }

    bb9 (cleanup): {
        drop(_15) -> bb8;                // scope 0 at ui/functions-closures/closure-reform.rs:9:40: 9:41
    }

    bb10 (cleanup): {
        switchInt(_21) -> [0: bb8, otherwise: bb9]; // scope 0 at ui/functions-closures/closure-reform.rs:9:40: 9:41
    }
}

promoted[0] in call_it: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/functions-closures/closure-reform.rs:9:14: 9:18
    let mut _1: [&str; 2];               // in scope 0 at ui/functions-closures/closure-reform.rs:9:14: 9:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/functions-closures/closure-reform.rs:9:14: 9:18
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:9:14: 9:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:9:14: 9:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/functions-closures/closure-reform.rs:9:14: 9:18
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:9:14: 9:18
    }
}

fn call_a_thunk(_1: F) -> () {
    debug f => _1;                       // in scope 0 at ui/functions-closures/closure-reform.rs:12:20: 12:21
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-reform.rs:12:26: 12:26
    let _2: ();                          // in scope 0 at ui/functions-closures/closure-reform.rs:13:5: 13:8
    let mut _3: F;                       // in scope 0 at ui/functions-closures/closure-reform.rs:13:5: 13:6
    let mut _4: ();                      // in scope 0 at ui/functions-closures/closure-reform.rs:13:5: 13:8

    bb0: {
        _3 = move _1;                    // scope 0 at ui/functions-closures/closure-reform.rs:13:5: 13:6
        _2 = <F as FnOnce<()>>::call_once(move _3, move _4) -> bb1; // scope 0 at ui/functions-closures/closure-reform.rs:13:5: 13:8
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:13:5: 13:6
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:14:2: 14:2
    }
}

fn call_this(_1: F) -> () {
    debug f => _1;                       // in scope 0 at ui/functions-closures/closure-reform.rs:16:17: 16:18
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-reform.rs:16:23: 16:23
    let _2: ();                          // in scope 0 at ui/functions-closures/closure-reform.rs:17:5: 17:16
    let mut _3: F;                       // in scope 0 at ui/functions-closures/closure-reform.rs:17:5: 17:6
    let mut _4: (&str,);                 // in scope 0 at ui/functions-closures/closure-reform.rs:17:5: 17:16
    let mut _5: &str;                    // in scope 0 at ui/functions-closures/closure-reform.rs:17:7: 17:15
    let _6: &str;                        // in scope 0 at ui/functions-closures/closure-reform.rs:17:7: 17:15

    bb0: {
        _3 = move _1;                    // scope 0 at ui/functions-closures/closure-reform.rs:17:5: 17:6
        _6 = const "Hello!";             // scope 0 at ui/functions-closures/closure-reform.rs:17:7: 17:15
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:17:7: 17:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 0 at ui/functions-closures/closure-reform.rs:17:7: 17:15
        _4 = (move _5,);                 // scope 0 at ui/functions-closures/closure-reform.rs:17:5: 17:16
        _2 = <F as FnOnce<(&str,)>>::call_once(move _3, move _4) -> bb1; // scope 0 at ui/functions-closures/closure-reform.rs:17:5: 17:16
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:17:5: 17:6
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&str,)) -> <F as FnOnce<(&str,)>>::Output {<F as FnOnce<(&str,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:18:2: 18:2
    }
}

fn call_bare(_1: for<'a> fn(&'a str)) -> () {
    debug f => _1;                       // in scope 0 at ui/functions-closures/closure-reform.rs:20:14: 20:15
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-reform.rs:20:27: 20:27
    let mut _2: for<'a> fn(&'a str);     // in scope 0 at ui/functions-closures/closure-reform.rs:21:5: 21:6
    let mut _3: &str;                    // in scope 0 at ui/functions-closures/closure-reform.rs:21:7: 21:21
    let _4: &str;                        // in scope 0 at ui/functions-closures/closure-reform.rs:21:7: 21:21

    bb0: {
        _2 = _1;                         // scope 0 at ui/functions-closures/closure-reform.rs:21:5: 21:6
        _4 = const "Hello world!";       // scope 0 at ui/functions-closures/closure-reform.rs:21:7: 21:21
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:21:7: 21:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/functions-closures/closure-reform.rs:21:7: 21:21
        _0 = move _2(move _3) -> bb1;    // scope 0 at ui/functions-closures/closure-reform.rs:21:5: 21:22
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:22:2: 22:2
    }
}

fn call_bare_again(_1: for<'a> fn(&'a str)) -> () {
    debug f => _1;                       // in scope 0 at ui/functions-closures/closure-reform.rs:24:20: 24:21
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-reform.rs:24:47: 24:47
    let mut _2: for<'a> fn(&'a str);     // in scope 0 at ui/functions-closures/closure-reform.rs:25:5: 25:6
    let mut _3: &str;                    // in scope 0 at ui/functions-closures/closure-reform.rs:25:7: 25:23
    let _4: &str;                        // in scope 0 at ui/functions-closures/closure-reform.rs:25:7: 25:23

    bb0: {
        _2 = _1;                         // scope 0 at ui/functions-closures/closure-reform.rs:25:5: 25:6
        _4 = const "Goodbye world!";     // scope 0 at ui/functions-closures/closure-reform.rs:25:7: 25:23
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:25:7: 25:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/functions-closures/closure-reform.rs:25:7: 25:23
        _0 = move _2(move _3) -> bb1;    // scope 0 at ui/functions-closures/closure-reform.rs:25:5: 25:24
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:26:2: 26:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-reform.rs:28:15: 28:15
    let _1: std::string::String;         // in scope 0 at ui/functions-closures/closure-reform.rs:31:9: 31:17
    let mut _2: &str;                    // in scope 0 at ui/functions-closures/closure-reform.rs:31:20: 31:40
    let _3: &str;                        // in scope 0 at ui/functions-closures/closure-reform.rs:31:20: 31:28
    let _4: ();                          // in scope 0 at ui/functions-closures/closure-reform.rs:32:5: 34:7
    let mut _5: [closure@ui/functions-closures/closure-reform.rs:32:13: 32:16]; // in scope 0 at ui/functions-closures/closure-reform.rs:32:13: 34:6
    let mut _6: &std::string::String;    // in scope 0 at ui/functions-closures/closure-reform.rs:32:13: 34:6
    let mut _8: &str;                    // in scope 0 at ui/functions-closures/closure-reform.rs:36:20: 36:42
    let _9: &str;                        // in scope 0 at ui/functions-closures/closure-reform.rs:36:20: 36:30
    let _10: ();                         // in scope 0 at ui/functions-closures/closure-reform.rs:37:5: 37:46
    let mut _11: [closure@ui/functions-closures/closure-reform.rs:37:13: 37:16]; // in scope 0 at ui/functions-closures/closure-reform.rs:37:13: 37:45
    let mut _12: &std::string::String;   // in scope 0 at ui/functions-closures/closure-reform.rs:37:13: 37:45
    let mut _14: &str;                   // in scope 0 at ui/functions-closures/closure-reform.rs:39:20: 39:46
    let _15: &str;                       // in scope 0 at ui/functions-closures/closure-reform.rs:39:20: 39:34
    let _16: ();                         // in scope 0 at ui/functions-closures/closure-reform.rs:40:5: 42:7
    let mut _17: [closure@ui/functions-closures/closure-reform.rs:40:13: 40:34]; // in scope 0 at ui/functions-closures/closure-reform.rs:40:13: 42:6
    let mut _18: &std::string::String;   // in scope 0 at ui/functions-closures/closure-reform.rs:40:13: 42:6
    let _19: ();                         // in scope 0 at ui/functions-closures/closure-reform.rs:46:5: 46:46
    let mut _20: [closure@ui/functions-closures/closure-reform.rs:46:18: 46:20]; // in scope 0 at ui/functions-closures/closure-reform.rs:46:18: 46:45
    let _21: ();                         // in scope 0 at ui/functions-closures/closure-reform.rs:48:5: 48:37
    let mut _22: [closure@ui/functions-closures/closure-reform.rs:48:15: 48:18]; // in scope 0 at ui/functions-closures/closure-reform.rs:48:15: 48:36
    let _23: ();                         // in scope 0 at ui/functions-closures/closure-reform.rs:53:5: 53:19
    let mut _24: for<'a> fn(&'a str);    // in scope 0 at ui/functions-closures/closure-reform.rs:53:15: 53:18
    let _25: ();                         // in scope 0 at ui/functions-closures/closure-reform.rs:55:5: 55:25
    let mut _26: for<'a> fn(&'a str);    // in scope 0 at ui/functions-closures/closure-reform.rs:55:21: 55:24
    scope 1 {
        debug greeting => _1;            // in scope 1 at ui/functions-closures/closure-reform.rs:31:9: 31:17
        let _7: std::string::String;     // in scope 1 at ui/functions-closures/closure-reform.rs:36:9: 36:17
        scope 2 {
            debug greeting => _7;        // in scope 2 at ui/functions-closures/closure-reform.rs:36:9: 36:17
            let _13: std::string::String; // in scope 2 at ui/functions-closures/closure-reform.rs:39:9: 39:17
            scope 3 {
                debug greeting => _13;   // in scope 3 at ui/functions-closures/closure-reform.rs:39:9: 39:17
            }
        }
    }

    bb0: {
        _3 = const "Hello ";             // scope 0 at ui/functions-closures/closure-reform.rs:31:20: 31:28
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:31:20: 31:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/functions-closures/closure-reform.rs:31:20: 31:40
        _1 = <str as ToString>::to_string(move _2) -> bb1; // scope 0 at ui/functions-closures/closure-reform.rs:31:20: 31:40
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:31:29: 31:38
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_1;                        // scope 1 at ui/functions-closures/closure-reform.rs:32:13: 34:6
        _5 = [closure@ui/functions-closures/closure-reform.rs:32:13: 32:16] { greeting: move _6 }; // scope 1 at ui/functions-closures/closure-reform.rs:32:13: 34:6
                                         // closure
                                         // + def_id: DefId(0:12 ~ closure_reform[d7a9]::main::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::string::String,)) -> std::string::String,
                                         //     (&std::string::String,),
                                         // ]
        _4 = call_it::<[closure@ui/functions-closures/closure-reform.rs:32:13: 32:16]>(move _5) -> [return: bb2, unwind: bb16]; // scope 1 at ui/functions-closures/closure-reform.rs:32:5: 34:7
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:32:5: 32:12
                                         // + literal: Const { ty: fn([closure@ui/functions-closures/closure-reform.rs:32:13: 32:16]) {call_it::<[closure@ui/functions-closures/closure-reform.rs:32:13: 32:16]>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = const "Goodbye ";           // scope 1 at ui/functions-closures/closure-reform.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:36:20: 36:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = _9;                         // scope 1 at ui/functions-closures/closure-reform.rs:36:20: 36:42
        _7 = <str as ToString>::to_string(move _8) -> [return: bb3, unwind: bb16]; // scope 1 at ui/functions-closures/closure-reform.rs:36:20: 36:42
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:36:31: 36:40
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = &_7;                       // scope 2 at ui/functions-closures/closure-reform.rs:37:13: 37:45
        _11 = [closure@ui/functions-closures/closure-reform.rs:37:13: 37:16] { greeting: move _12 }; // scope 2 at ui/functions-closures/closure-reform.rs:37:13: 37:45
                                         // closure
                                         // + def_id: DefId(0:13 ~ closure_reform[d7a9]::main::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::string::String,)) -> std::string::String,
                                         //     (&std::string::String,),
                                         // ]
        _10 = call_it::<[closure@ui/functions-closures/closure-reform.rs:37:13: 37:16]>(move _11) -> [return: bb4, unwind: bb15]; // scope 2 at ui/functions-closures/closure-reform.rs:37:5: 37:46
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:37:5: 37:12
                                         // + literal: Const { ty: fn([closure@ui/functions-closures/closure-reform.rs:37:13: 37:16]) {call_it::<[closure@ui/functions-closures/closure-reform.rs:37:13: 37:16]>}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = const "How's life, ";      // scope 2 at ui/functions-closures/closure-reform.rs:39:20: 39:34
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:39:20: 39:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = _15;                       // scope 2 at ui/functions-closures/closure-reform.rs:39:20: 39:46
        _13 = <str as ToString>::to_string(move _14) -> [return: bb5, unwind: bb15]; // scope 2 at ui/functions-closures/closure-reform.rs:39:20: 39:46
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:39:35: 39:44
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = &_13;                      // scope 3 at ui/functions-closures/closure-reform.rs:40:13: 42:6
        _17 = [closure@ui/functions-closures/closure-reform.rs:40:13: 40:34] { greeting: move _18 }; // scope 3 at ui/functions-closures/closure-reform.rs:40:13: 42:6
                                         // closure
                                         // + def_id: DefId(0:14 ~ closure_reform[d7a9]::main::{closure#2})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::string::String,)) -> std::string::String,
                                         //     (&std::string::String,),
                                         // ]
        _16 = call_it::<[closure@ui/functions-closures/closure-reform.rs:40:13: 40:34]>(move _17) -> [return: bb6, unwind: bb14]; // scope 3 at ui/functions-closures/closure-reform.rs:40:5: 42:7
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:40:5: 40:12
                                         // + literal: Const { ty: fn([closure@ui/functions-closures/closure-reform.rs:40:13: 40:34]) {call_it::<[closure@ui/functions-closures/closure-reform.rs:40:13: 40:34]>}, val: Value(<ZST>) }
    }

    bb6: {
        _19 = call_a_thunk::<[closure@ui/functions-closures/closure-reform.rs:46:18: 46:20]>(move _20) -> [return: bb7, unwind: bb14]; // scope 3 at ui/functions-closures/closure-reform.rs:46:5: 46:46
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:46:5: 46:17
                                         // + literal: Const { ty: fn([closure@ui/functions-closures/closure-reform.rs:46:18: 46:20]) {call_a_thunk::<[closure@ui/functions-closures/closure-reform.rs:46:18: 46:20]>}, val: Value(<ZST>) }
    }

    bb7: {
        _21 = call_this::<[closure@ui/functions-closures/closure-reform.rs:48:15: 48:18]>(move _22) -> [return: bb8, unwind: bb14]; // scope 3 at ui/functions-closures/closure-reform.rs:48:5: 48:37
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:48:5: 48:14
                                         // + literal: Const { ty: fn([closure@ui/functions-closures/closure-reform.rs:48:15: 48:18]) {call_this::<[closure@ui/functions-closures/closure-reform.rs:48:15: 48:18]>}, val: Value(<ZST>) }
    }

    bb8: {
        _24 = foo as for<'a> fn(&'a str) (Pointer(ReifyFnPointer)); // scope 3 at ui/functions-closures/closure-reform.rs:53:15: 53:18
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:53:15: 53:18
                                         // + literal: Const { ty: for<'a> fn(&'a str) {foo}, val: Value(<ZST>) }
        _23 = call_bare(move _24) -> [return: bb9, unwind: bb14]; // scope 3 at ui/functions-closures/closure-reform.rs:53:5: 53:19
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:53:5: 53:14
                                         // + literal: Const { ty: fn(for<'a> fn(&'a str)) {call_bare}, val: Value(<ZST>) }
    }

    bb9: {
        _26 = foo as for<'a> fn(&'a str) (Pointer(ReifyFnPointer)); // scope 3 at ui/functions-closures/closure-reform.rs:55:21: 55:24
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:55:21: 55:24
                                         // + literal: Const { ty: for<'a> fn(&'a str) {foo}, val: Value(<ZST>) }
        _25 = call_bare_again(move _26) -> [return: bb10, unwind: bb14]; // scope 3 at ui/functions-closures/closure-reform.rs:55:5: 55:25
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:55:5: 55:20
                                         // + literal: Const { ty: fn(for<'a> fn(&'a str)) {call_bare_again}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_13) -> [return: bb11, unwind: bb15]; // scope 2 at ui/functions-closures/closure-reform.rs:56:1: 56:2
    }

    bb11: {
        drop(_7) -> [return: bb12, unwind: bb16]; // scope 1 at ui/functions-closures/closure-reform.rs:56:1: 56:2
    }

    bb12: {
        drop(_1) -> bb13;                // scope 0 at ui/functions-closures/closure-reform.rs:56:1: 56:2
    }

    bb13: {
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:56:2: 56:2
    }

    bb14 (cleanup): {
        drop(_13) -> bb15;               // scope 2 at ui/functions-closures/closure-reform.rs:56:1: 56:2
    }

    bb15 (cleanup): {
        drop(_7) -> bb16;                // scope 1 at ui/functions-closures/closure-reform.rs:56:1: 56:2
    }

    bb16 (cleanup): {
        drop(_1) -> bb17;                // scope 0 at ui/functions-closures/closure-reform.rs:56:1: 56:2
    }

    bb17 (cleanup): {
        resume;                          // scope 0 at ui/functions-closures/closure-reform.rs:28:1: 56:2
    }
}

fn main::{closure#0}(_1: [closure@ui/functions-closures/closure-reform.rs:32:13: 32:16], _2: String) -> String {
    debug s => _2;                       // in scope 0 at ui/functions-closures/closure-reform.rs:32:14: 32:15
    debug greeting => (*(_1.0: &std::string::String)); // in scope 0 at ui/functions-closures/closure-reform.rs:31:9: 31:17
    let mut _0: std::string::String;     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _4: &[&str];                 // in scope 0 at ui/functions-closures/closure-reform.rs:33:17: 33:23
    let mut _5: &[&str; 2];              // in scope 0 at ui/functions-closures/closure-reform.rs:33:17: 33:23
    let _6: &[&str; 2];                  // in scope 0 at ui/functions-closures/closure-reform.rs:33:17: 33:23
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _8: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _9: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _10: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/functions-closures/closure-reform.rs:33:25: 33:33
    let mut _12: &std::string::String;   // in scope 0 at ui/functions-closures/closure-reform.rs:33:25: 33:33
    let _13: &std::string::String;       // in scope 0 at ui/functions-closures/closure-reform.rs:33:25: 33:33
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/functions-closures/closure-reform.rs:33:35: 33:36
    let mut _15: &std::string::String;   // in scope 0 at ui/functions-closures/closure-reform.rs:33:35: 33:36
    let _16: &std::string::String;       // in scope 0 at ui/functions-closures/closure-reform.rs:33:35: 33:36
    let mut _17: &[&str; 2];             // in scope 0 at ui/functions-closures/closure-reform.rs:33:17: 33:23
    let mut _18: &std::string::String;   // in scope 0 at ui/functions-closures/closure-reform.rs:32:13: 34:6
    scope 1 {
        debug res => _0;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }

    bb0: {
        _17 = const _;                   // scope 0 at ui/functions-closures/closure-reform.rs:33:17: 33:23
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:33:17: 33:23
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _6 = _17;                        // scope 0 at ui/functions-closures/closure-reform.rs:33:17: 33:23
        _5 = _6;                         // scope 0 at ui/functions-closures/closure-reform.rs:33:17: 33:23
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/functions-closures/closure-reform.rs:33:17: 33:23
        _18 = deref_copy (_1.0: &std::string::String); // scope 0 at ui/functions-closures/closure-reform.rs:33:25: 33:33
        _13 = _18;                       // scope 0 at ui/functions-closures/closure-reform.rs:33:25: 33:33
        _12 = _13;                       // scope 0 at ui/functions-closures/closure-reform.rs:33:25: 33:33
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _12) -> [return: bb1, unwind: bb6]; // scope 0 at ui/functions-closures/closure-reform.rs:33:25: 33:33
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:33:25: 33:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        _16 = &_2;                       // scope 0 at ui/functions-closures/closure-reform.rs:33:35: 33:36
        _15 = _16;                       // scope 0 at ui/functions-closures/closure-reform.rs:33:35: 33:36
        _14 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _15) -> [return: bb2, unwind: bb6]; // scope 0 at ui/functions-closures/closure-reform.rs:33:35: 33:36
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:33:35: 33:36
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = [move _11, move _14];      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb3, unwind: bb6]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = format(move _3) -> [return: bb4, unwind: bb6]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_2) -> bb5;                 // scope 0 at ui/functions-closures/closure-reform.rs:34:5: 34:6
    }

    bb5: {
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:34:6: 34:6
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/functions-closures/closure-reform.rs:34:5: 34:6
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/functions-closures/closure-reform.rs:32:13: 34:6
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/functions-closures/closure-reform.rs:33:17: 33:23
    let mut _1: [&str; 2];               // in scope 0 at ui/functions-closures/closure-reform.rs:33:17: 33:23

    bb0: {
        _1 = [const "", const ""];       // scope 0 at ui/functions-closures/closure-reform.rs:33:17: 33:23
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:33:17: 33:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:33:17: 33:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/functions-closures/closure-reform.rs:33:17: 33:23
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:33:17: 33:23
    }
}

fn main::{closure#1}(_1: [closure@ui/functions-closures/closure-reform.rs:37:13: 37:16], _2: String) -> String {
    debug s => _2;                       // in scope 0 at ui/functions-closures/closure-reform.rs:37:14: 37:15
    debug greeting => (*(_1.0: &std::string::String)); // in scope 0 at ui/functions-closures/closure-reform.rs:36:9: 36:17
    let mut _0: std::string::String;     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _4: &[&str];                 // in scope 0 at ui/functions-closures/closure-reform.rs:37:25: 37:31
    let mut _5: &[&str; 2];              // in scope 0 at ui/functions-closures/closure-reform.rs:37:25: 37:31
    let _6: &[&str; 2];                  // in scope 0 at ui/functions-closures/closure-reform.rs:37:25: 37:31
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _8: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _9: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _10: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/functions-closures/closure-reform.rs:37:33: 37:41
    let mut _12: &std::string::String;   // in scope 0 at ui/functions-closures/closure-reform.rs:37:33: 37:41
    let _13: &std::string::String;       // in scope 0 at ui/functions-closures/closure-reform.rs:37:33: 37:41
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/functions-closures/closure-reform.rs:37:43: 37:44
    let mut _15: &std::string::String;   // in scope 0 at ui/functions-closures/closure-reform.rs:37:43: 37:44
    let _16: &std::string::String;       // in scope 0 at ui/functions-closures/closure-reform.rs:37:43: 37:44
    let mut _17: &[&str; 2];             // in scope 0 at ui/functions-closures/closure-reform.rs:37:25: 37:31
    let mut _18: &std::string::String;   // in scope 0 at ui/functions-closures/closure-reform.rs:37:13: 37:45
    scope 1 {
        debug res => _0;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }

    bb0: {
        _17 = const _;                   // scope 0 at ui/functions-closures/closure-reform.rs:37:25: 37:31
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:37:25: 37:31
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _6 = _17;                        // scope 0 at ui/functions-closures/closure-reform.rs:37:25: 37:31
        _5 = _6;                         // scope 0 at ui/functions-closures/closure-reform.rs:37:25: 37:31
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/functions-closures/closure-reform.rs:37:25: 37:31
        _18 = deref_copy (_1.0: &std::string::String); // scope 0 at ui/functions-closures/closure-reform.rs:37:33: 37:41
        _13 = _18;                       // scope 0 at ui/functions-closures/closure-reform.rs:37:33: 37:41
        _12 = _13;                       // scope 0 at ui/functions-closures/closure-reform.rs:37:33: 37:41
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _12) -> [return: bb1, unwind: bb6]; // scope 0 at ui/functions-closures/closure-reform.rs:37:33: 37:41
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:37:33: 37:41
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        _16 = &_2;                       // scope 0 at ui/functions-closures/closure-reform.rs:37:43: 37:44
        _15 = _16;                       // scope 0 at ui/functions-closures/closure-reform.rs:37:43: 37:44
        _14 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _15) -> [return: bb2, unwind: bb6]; // scope 0 at ui/functions-closures/closure-reform.rs:37:43: 37:44
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:37:43: 37:44
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = [move _11, move _14];      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb3, unwind: bb6]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = format(move _3) -> [return: bb4, unwind: bb6]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_2) -> bb5;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:120:5: 120:6
    }

    bb5: {
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:37:45: 37:45
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:120:5: 120:6
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/functions-closures/closure-reform.rs:37:13: 37:45
    }
}

promoted[0] in main::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/functions-closures/closure-reform.rs:37:25: 37:31
    let mut _1: [&str; 2];               // in scope 0 at ui/functions-closures/closure-reform.rs:37:25: 37:31

    bb0: {
        _1 = [const "", const ""];       // scope 0 at ui/functions-closures/closure-reform.rs:37:25: 37:31
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:37:25: 37:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:37:25: 37:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/functions-closures/closure-reform.rs:37:25: 37:31
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:37:25: 37:31
    }
}

fn main::{closure#2}(_1: [closure@ui/functions-closures/closure-reform.rs:40:13: 40:34], _2: String) -> String {
    debug s => _2;                       // in scope 0 at ui/functions-closures/closure-reform.rs:40:14: 40:15
    debug greeting => (*(_1.0: &std::string::String)); // in scope 0 at ui/functions-closures/closure-reform.rs:39:9: 39:17
    let mut _0: std::string::String;     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _4: &[&str];                 // in scope 0 at ui/functions-closures/closure-reform.rs:41:17: 41:23
    let mut _5: &[&str; 2];              // in scope 0 at ui/functions-closures/closure-reform.rs:41:17: 41:23
    let _6: &[&str; 2];                  // in scope 0 at ui/functions-closures/closure-reform.rs:41:17: 41:23
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _8: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _9: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _10: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/functions-closures/closure-reform.rs:41:25: 41:33
    let mut _12: &std::string::String;   // in scope 0 at ui/functions-closures/closure-reform.rs:41:25: 41:33
    let _13: &std::string::String;       // in scope 0 at ui/functions-closures/closure-reform.rs:41:25: 41:33
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/functions-closures/closure-reform.rs:41:35: 41:36
    let mut _15: &std::string::String;   // in scope 0 at ui/functions-closures/closure-reform.rs:41:35: 41:36
    let _16: &std::string::String;       // in scope 0 at ui/functions-closures/closure-reform.rs:41:35: 41:36
    let mut _17: &[&str; 2];             // in scope 0 at ui/functions-closures/closure-reform.rs:41:17: 41:23
    let mut _18: &std::string::String;   // in scope 0 at ui/functions-closures/closure-reform.rs:40:13: 42:6
    scope 1 {
        debug res => _0;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }

    bb0: {
        _17 = const _;                   // scope 0 at ui/functions-closures/closure-reform.rs:41:17: 41:23
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:41:17: 41:23
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _6 = _17;                        // scope 0 at ui/functions-closures/closure-reform.rs:41:17: 41:23
        _5 = _6;                         // scope 0 at ui/functions-closures/closure-reform.rs:41:17: 41:23
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/functions-closures/closure-reform.rs:41:17: 41:23
        _18 = deref_copy (_1.0: &std::string::String); // scope 0 at ui/functions-closures/closure-reform.rs:41:25: 41:33
        _13 = _18;                       // scope 0 at ui/functions-closures/closure-reform.rs:41:25: 41:33
        _12 = _13;                       // scope 0 at ui/functions-closures/closure-reform.rs:41:25: 41:33
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _12) -> [return: bb1, unwind: bb6]; // scope 0 at ui/functions-closures/closure-reform.rs:41:25: 41:33
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:41:25: 41:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        _16 = &_2;                       // scope 0 at ui/functions-closures/closure-reform.rs:41:35: 41:36
        _15 = _16;                       // scope 0 at ui/functions-closures/closure-reform.rs:41:35: 41:36
        _14 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _15) -> [return: bb2, unwind: bb6]; // scope 0 at ui/functions-closures/closure-reform.rs:41:35: 41:36
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:41:35: 41:36
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = [move _11, move _14];      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb3, unwind: bb6]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = format(move _3) -> [return: bb4, unwind: bb6]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_2) -> bb5;                 // scope 0 at ui/functions-closures/closure-reform.rs:42:5: 42:6
    }

    bb5: {
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:42:6: 42:6
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/functions-closures/closure-reform.rs:42:5: 42:6
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/functions-closures/closure-reform.rs:40:13: 42:6
    }
}

promoted[0] in main::{closure#2}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/functions-closures/closure-reform.rs:41:17: 41:23
    let mut _1: [&str; 2];               // in scope 0 at ui/functions-closures/closure-reform.rs:41:17: 41:23

    bb0: {
        _1 = [const "", const ""];       // scope 0 at ui/functions-closures/closure-reform.rs:41:17: 41:23
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:41:17: 41:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:41:17: 41:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/functions-closures/closure-reform.rs:41:17: 41:23
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:41:17: 41:23
    }
}

fn main::{closure#3}(_1: [closure@ui/functions-closures/closure-reform.rs:46:18: 46:20]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-reform.rs:46:21: 46:21
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/functions-closures/closure-reform.rs:46:30: 46:44
    let mut _5: &[&str; 1];              // in scope 0 at ui/functions-closures/closure-reform.rs:46:30: 46:44
    let _6: &[&str; 1];                  // in scope 0 at ui/functions-closures/closure-reform.rs:46:30: 46:44
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[&str; 1];             // in scope 0 at ui/functions-closures/closure-reform.rs:46:30: 46:44

    bb0: {
        _11 = const _;                   // scope 0 at ui/functions-closures/closure-reform.rs:46:30: 46:44
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:46:30: 46:44
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main::{closure#3}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _6 = _11;                        // scope 0 at ui/functions-closures/closure-reform.rs:46:30: 46:44
        _5 = _6;                         // scope 0 at ui/functions-closures/closure-reform.rs:46:30: 46:44
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/functions-closures/closure-reform.rs:46:30: 46:44
        _10 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main::{closure#3}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _print(move _3) -> bb2;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:46:45: 46:45
    }
}

promoted[0] in main::{closure#3}: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in main::{closure#3}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/functions-closures/closure-reform.rs:46:30: 46:44
    let mut _1: [&str; 1];               // in scope 0 at ui/functions-closures/closure-reform.rs:46:30: 46:44

    bb0: {
        _1 = [const "Hello world!\n"];   // scope 0 at ui/functions-closures/closure-reform.rs:46:30: 46:44
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:46:30: 46:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/functions-closures/closure-reform.rs:46:30: 46:44
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:46:30: 46:44
    }
}

fn main::{closure#4}(_1: [closure@ui/functions-closures/closure-reform.rs:48:15: 48:18], _2: &str) -> () {
    debug s => _2;                       // in scope 0 at ui/functions-closures/closure-reform.rs:48:16: 48:17
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-reform.rs:48:19: 48:19
    let _3: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _5: &[&str];                 // in scope 0 at ui/functions-closures/closure-reform.rs:48:28: 48:32
    let mut _6: &[&str; 2];              // in scope 0 at ui/functions-closures/closure-reform.rs:48:28: 48:32
    let _7: &[&str; 2];                  // in scope 0 at ui/functions-closures/closure-reform.rs:48:28: 48:32
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/functions-closures/closure-reform.rs:48:34: 48:35
    let mut _13: &&str;                  // in scope 0 at ui/functions-closures/closure-reform.rs:48:34: 48:35
    let _14: &&str;                      // in scope 0 at ui/functions-closures/closure-reform.rs:48:34: 48:35
    let mut _15: &[&str; 2];             // in scope 0 at ui/functions-closures/closure-reform.rs:48:28: 48:32

    bb0: {
        _15 = const _;                   // scope 0 at ui/functions-closures/closure-reform.rs:48:28: 48:32
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:48:28: 48:32
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#4}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _7 = _15;                        // scope 0 at ui/functions-closures/closure-reform.rs:48:28: 48:32
        _6 = _7;                         // scope 0 at ui/functions-closures/closure-reform.rs:48:28: 48:32
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/functions-closures/closure-reform.rs:48:28: 48:32
        _14 = &_2;                       // scope 0 at ui/functions-closures/closure-reform.rs:48:34: 48:35
        _13 = _14;                       // scope 0 at ui/functions-closures/closure-reform.rs:48:34: 48:35
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _13) -> bb1; // scope 0 at ui/functions-closures/closure-reform.rs:48:34: 48:35
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:48:34: 48:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _print(move _4) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:48:36: 48:36
    }
}

promoted[0] in main::{closure#4}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/functions-closures/closure-reform.rs:48:28: 48:32
    let mut _1: [&str; 2];               // in scope 0 at ui/functions-closures/closure-reform.rs:48:28: 48:32

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/functions-closures/closure-reform.rs:48:28: 48:32
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:48:28: 48:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-reform.rs:48:28: 48:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/functions-closures/closure-reform.rs:48:28: 48:32
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:48:28: 48:32
    }
}

fn foo(_1: &str) -> () {
    debug s => _1;                       // in scope 0 at ui/functions-closures/closure-reform.rs:52:12: 52:13
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-reform.rs:52:21: 52:21

    bb0: {
        return;                          // scope 0 at ui/functions-closures/closure-reform.rs:52:23: 52:23
    }
}
