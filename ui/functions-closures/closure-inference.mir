// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: isize) -> isize {
    debug i => _1;                       // in scope 0 at ui/functions-closures/closure-inference.rs:4:8: 4:9
    let mut _0: isize;                   // return place in scope 0 at ui/functions-closures/closure-inference.rs:4:21: 4:26
    let mut _2: isize;                   // in scope 0 at ui/functions-closures/closure-inference.rs:4:29: 4:30
    let mut _3: (isize, bool);           // in scope 0 at ui/functions-closures/closure-inference.rs:4:29: 4:34

    bb0: {
        _2 = _1;                         // scope 0 at ui/functions-closures/closure-inference.rs:4:29: 4:30
        _3 = CheckedAdd(_2, const 1_isize); // scope 0 at ui/functions-closures/closure-inference.rs:4:29: 4:34
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, const 1_isize) -> bb1; // scope 0 at ui/functions-closures/closure-inference.rs:4:29: 4:34
    }

    bb1: {
        _0 = move (_3.0: isize);         // scope 0 at ui/functions-closures/closure-inference.rs:4:29: 4:34
        return;                          // scope 0 at ui/functions-closures/closure-inference.rs:4:36: 4:36
    }
}

fn apply(_1: F, _2: A) -> A {
    debug f => _1;                       // in scope 0 at ui/functions-closures/closure-inference.rs:6:16: 6:17
    debug v => _2;                       // in scope 0 at ui/functions-closures/closure-inference.rs:6:22: 6:23
    let mut _0: A;                       // return place in scope 0 at ui/functions-closures/closure-inference.rs:6:31: 6:32
    let mut _3: F;                       // in scope 0 at ui/functions-closures/closure-inference.rs:6:59: 6:60
    let mut _4: (A,);                    // in scope 0 at ui/functions-closures/closure-inference.rs:6:59: 6:63
    let mut _5: A;                       // in scope 0 at ui/functions-closures/closure-inference.rs:6:61: 6:62

    bb0: {
        _3 = move _1;                    // scope 0 at ui/functions-closures/closure-inference.rs:6:59: 6:60
        _5 = move _2;                    // scope 0 at ui/functions-closures/closure-inference.rs:6:61: 6:62
        _4 = (move _5,);                 // scope 0 at ui/functions-closures/closure-inference.rs:6:59: 6:63
        _0 = <F as FnOnce<(A,)>>::call_once(move _3, move _4) -> bb1; // scope 0 at ui/functions-closures/closure-inference.rs:6:59: 6:63
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-inference.rs:6:59: 6:60
                                         // + literal: Const { ty: extern "rust-call" fn(F, (A,)) -> <F as FnOnce<(A,)>>::Output {<F as FnOnce<(A,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/closure-inference.rs:6:65: 6:65
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/closure-inference.rs:8:15: 8:15
    let _1: [closure@ui/functions-closures/closure-inference.rs:9:14: 9:17]; // in scope 0 at ui/functions-closures/closure-inference.rs:9:9: 9:10
    let mut _2: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: isize;                       // in scope 0 at ui/functions-closures/closure-inference.rs:10:16: 10:27
    let mut _5: [closure@ui/functions-closures/closure-inference.rs:9:14: 9:17]; // in scope 0 at ui/functions-closures/closure-inference.rs:10:22: 10:23
    let mut _6: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/functions-closures/closure-inference.rs:9:9: 9:10
        let _7: &isize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _8: &isize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _21: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _7;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _8;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _13: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _13;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _4 = apply::<isize, [closure@ui/functions-closures/closure-inference.rs:9:14: 9:17]>(move _5, const 2_isize) -> bb1; // scope 1 at ui/functions-closures/closure-inference.rs:10:16: 10:27
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-inference.rs:10:16: 10:21
                                         // + literal: Const { ty: fn([closure@ui/functions-closures/closure-inference.rs:9:14: 9:17], isize) -> isize {apply::<isize, [closure@ui/functions-closures/closure-inference.rs:9:14: 9:17]>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _21;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _6);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_2.0: &isize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_2.1: &isize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 3_isize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<isize, isize>(move _15, move _16, move _18, move _20); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/functions-closures/closure-inference.rs:11:2: 11:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/functions-closures/closure-inference.rs:10:29: 10:30

    bb0: {
        _1 = const 3_isize;              // scope 0 at ui/functions-closures/closure-inference.rs:10:29: 10:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: &[closure@ui/functions-closures/closure-inference.rs:9:14: 9:17], _2: isize) -> isize {
    debug i => _2;                       // in scope 0 at ui/functions-closures/closure-inference.rs:9:15: 9:16
    let mut _0: isize;                   // return place in scope 0 at ui/functions-closures/closure-inference.rs:9:18: 9:18
    let mut _3: isize;                   // in scope 0 at ui/functions-closures/closure-inference.rs:9:22: 9:23

    bb0: {
        _3 = _2;                         // scope 0 at ui/functions-closures/closure-inference.rs:9:22: 9:23
        _0 = foo(move _3) -> bb1;        // scope 0 at ui/functions-closures/closure-inference.rs:9:18: 9:24
                                         // mir::Constant
                                         // + span: ui/functions-closures/closure-inference.rs:9:18: 9:21
                                         // + literal: Const { ty: fn(isize) -> isize {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/functions-closures/closure-inference.rs:9:24: 9:24
    }
}
