// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/fn-type-infer.rs:6:15: 6:15
    let _1: [closure@ui/functions-closures/fn-type-infer.rs:8:14: 8:16]; // in scope 0 at ui/functions-closures/fn-type-infer.rs:8:9: 8:11
    scope 1 {
        debug _f => _1;                  // in scope 1 at ui/functions-closures/fn-type-infer.rs:8:9: 8:11
    }

    bb0: {
        return;                          // scope 0 at ui/functions-closures/fn-type-infer.rs:11:2: 11:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/functions-closures/fn-type-infer.rs:8:14: 8:16]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/fn-type-infer.rs:8:17: 8:17
    let _2: i32;                         // in scope 0 at ui/functions-closures/fn-type-infer.rs:9:13: 9:14
    scope 1 {
        debug i => _2;                   // in scope 1 at ui/functions-closures/fn-type-infer.rs:9:13: 9:14
    }

    bb0: {
        _2 = const 10_i32;               // scope 0 at ui/functions-closures/fn-type-infer.rs:9:17: 9:19
        return;                          // scope 0 at ui/functions-closures/fn-type-infer.rs:10:6: 10:6
    }
}
