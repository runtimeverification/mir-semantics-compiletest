// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: [closure@ui/functions-closures/nullable-pointer-opt-closures.rs:8:18: 8:20];
    let mut _4: &i32;
    let mut _5: (&usize, &usize);
    let mut _6: &usize;
    let _7: usize;
    let _8: &std::option::Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:8:18: 8:20]>;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: [closure@ui/functions-closures/nullable-pointer-opt-closures.rs:16:18: 16:25];
    let mut _21: (&usize, &usize);
    let mut _22: &usize;
    let _23: usize;
    let _24: &std::option::Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:16:18: 16:25]>;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: usize;
    let mut _30: usize;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let _35: &str;
    let mut _37: [closure@ui/functions-closures/nullable-pointer-opt-closures.rs:23:18: 23:25];
    let mut _38: (&usize, &usize);
    let mut _39: &usize;
    let _40: usize;
    let _41: &std::option::Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:23:18: 23:25]>;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: usize;
    let mut _47: usize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: [closure@ui/functions-closures/nullable-pointer-opt-closures.rs:30:18: 30:25];
    let mut _54: (&usize, &usize);
    let mut _55: &usize;
    let _56: usize;
    let _57: &std::option::Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:30:18: 30:25]>;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: usize;
    let mut _63: usize;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => const 10_i32;
        let _2: std::option::Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:8:18: 8:20]>;
        scope 2 {
            debug b => _2;
            let _9: &usize;
            let _10: &usize;
            let _18: std::boxed::Box<i32>;
            let mut _70: &usize;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
            scope 5 {
                debug a => _18;
                let _19: std::option::Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:16:18: 16:25]>;
                scope 6 {
                    debug b => _19;
                    let _25: &usize;
                    let _26: &usize;
                    let _34: std::string::String;
                    let mut _69: &usize;
                    scope 7 {
                        debug left_val => _25;
                        debug right_val => _26;
                        let _31: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _31;
                        }
                    }
                    scope 9 {
                        debug a => _34;
                        let _36: std::option::Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:23:18: 23:25]>;
                        scope 10 {
                            debug b => _36;
                            let _42: &usize;
                            let _43: &usize;
                            let _51: i32;
                            let mut _68: &usize;
                            scope 11 {
                                debug left_val => _42;
                                debug right_val => _43;
                                let _48: core::panicking::AssertKind;
                                scope 12 {
                                    debug kind => _48;
                                }
                            }
                            scope 13 {
                                debug a => const 14_i32;
                                let _52: std::option::Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:30:18: 30:25]>;
                                scope 14 {
                                    debug b => _52;
                                    let _58: &usize;
                                    let _59: &usize;
                                    let mut _67: &usize;
                                    scope 15 {
                                        debug left_val => _58;
                                        debug right_val => _59;
                                        let _64: core::panicking::AssertKind;
                                        scope 16 {
                                            debug kind => _64;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 10_i32;
        _4 = &_1;
        _3 = [closure@ui/functions-closures/nullable-pointer-opt-closures.rs:8:18: 8:20] { a: move _4 };
        _2 = Option::<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:8:18: 8:20]>::Some(move _3);
        _8 = &_2;
        _7 = std::mem::size_of_val::<Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:8:18: 8:20]>>(_8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_7;
        _70 = const _;
        _5 = (move _6, _70);
        _9 = (_5.0: &usize);
        _10 = (_5.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb3: {
        _18 = Box::<i32>::new(const 12_i32) -> [return: bb4, unwind continue];
    }

    bb4: {
        _20 = [closure@ui/functions-closures/nullable-pointer-opt-closures.rs:16:18: 16:25] { a: move _18 };
        _19 = Option::<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:16:18: 16:25]>::Some(move _20);
        _24 = &_19;
        _23 = std::mem::size_of_val::<Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:16:18: 16:25]>>(_24) -> [return: bb5, unwind: bb18];
    }

    bb5: {
        _22 = &_23;
        _69 = const _;
        _21 = (move _22, _69);
        _25 = (_21.0: &usize);
        _26 = (_21.1: &usize);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<usize, usize>(move _31, _25, _26, move _33) -> bb18;
    }

    bb7: {
        _35 = const "Hello";
        _34 = <str as ToString>::to_string(_35) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        _37 = [closure@ui/functions-closures/nullable-pointer-opt-closures.rs:23:18: 23:25] { a: move _34 };
        _36 = Option::<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:23:18: 23:25]>::Some(move _37);
        _41 = &_36;
        _40 = std::mem::size_of_val::<Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:23:18: 23:25]>>(_41) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        _39 = &_40;
        _68 = const _;
        _38 = (move _39, _68);
        _42 = (_38.0: &usize);
        _43 = (_38.1: &usize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<usize, usize>(move _48, _42, _43, move _50) -> bb17;
    }

    bb11: {
        _51 = const 14_i32;
        _53 = [closure@ui/functions-closures/nullable-pointer-opt-closures.rs:30:18: 30:25] { a: _51 };
        _52 = Option::<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:30:18: 30:25]>::Some(move _53);
        _57 = &_52;
        _56 = std::mem::size_of_val::<Option<[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:30:18: 30:25]>>(_57) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _55 = &_56;
        _67 = const _;
        _54 = (move _55, _67);
        _58 = (_54.0: &usize);
        _59 = (_54.1: &usize);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<usize, usize>(move _64, _58, _59, move _66) -> bb17;
    }

    bb14: {
        drop(_36) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        drop(_19) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_36) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_19) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        resume;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<(i32, i32)>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<String>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<Box<i32>>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<usize>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:8:18: 8:20]) -> () {
    debug a => (*((*_1).0: &i32));
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let mut _9: &[&str; 2];
    let mut _10: &i32;

    bb0: {
        _9 = const _;
        _4 = _9 as &[&str] (Pointer(Unsize));
        _10 = deref_copy ((*_1).0: &i32);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main::{closure#1}(_1: &[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:16:18: 16:25]) -> () {
    debug a => ((*_1).0: std::boxed::Box<i32>);
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::boxed::Box<i32>;
    let mut _10: &[&str; 2];

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (Pointer(Unsize));
        _9 = &((*_1).0: std::boxed::Box<i32>);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<Box<i32>>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in main::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main::{closure#2}(_1: &[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:23:18: 23:25]) -> () {
    debug a => ((*_1).0: std::string::String);
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &std::string::String;
    let mut _10: &[&str; 2];

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (Pointer(Unsize));
        _9 = &((*_1).0: std::string::String);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<String>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in main::{closure#2}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main::{closure#3}(_1: &[closure@ui/functions-closures/nullable-pointer-opt-closures.rs:30:18: 30:25]) -> () {
    debug a => ((*_1).0: i32);
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &i32;
    let mut _10: &[&str; 2];

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (Pointer(Unsize));
        _9 = &((*_1).0: i32);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in main::{closure#3}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
