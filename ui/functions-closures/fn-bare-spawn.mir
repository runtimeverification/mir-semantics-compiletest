// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn spawn(_1: T, _2: fn(T)) -> () {
    debug val => _1;
    debug f => _2;
    let mut _0: ();
    let _3: ();

    bb0: {
        _3 = _2(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn f(_1: isize) -> () {
    debug i => _1;
    let mut _0: ();
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let _4: &isize;
    let _5: &isize;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: isize;
    let mut _9: isize;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: &isize;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _3 = &_1;
        _13 = const _;
        _2 = (move _3, _13);
        _4 = (_2.0: &isize);
        _5 = (_2.1: &isize);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<isize, isize>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb2: {
        return;
    }
}

promoted[0] in f: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 100_isize;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: fn(isize);

    bb0: {
        _2 = f as fn(isize) (Pointer(ReifyFnPointer));
        _1 = spawn::<isize>(const 100_isize, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
