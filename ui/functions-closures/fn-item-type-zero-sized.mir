// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let _4: &usize;
    let _5: &usize;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: usize;
    let mut _9: usize;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let _13: fn() -> usize {std::mem::size_of::<u8>};
    let _14: fn() -> usize {std::mem::size_of::<u16>};
    let mut _15: (&usize, &usize);
    let mut _16: &usize;
    let _17: usize;
    let _18: &fn() -> usize {std::mem::size_of::<u8>};
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: usize;
    let mut _24: usize;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&usize, &usize);
    let mut _29: &usize;
    let _30: usize;
    let _31: &fn() -> usize {std::mem::size_of::<u16>};
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: usize;
    let mut _37: usize;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&(usize, usize), &(usize, usize));
    let mut _42: &(usize, usize);
    let _43: (usize, usize);
    let mut _44: usize;
    let mut _45: usize;
    let mut _48: bool;
    let mut _49: bool;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _56: &usize;
    let mut _57: &fn() {main};
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug a => std::mem::size_of::<u8>;
        debug b => std::mem::size_of::<u16>;
        let _19: &usize;
        let _20: &usize;
        let _32: &usize;
        let _33: &usize;
        let _46: &(usize, usize);
        let _47: &(usize, usize);
        let mut _53: &(usize, usize);
        let mut _54: &usize;
        let mut _55: &usize;
        scope 4 {
            debug left_val => _19;
            debug right_val => _20;
            let _25: core::panicking::AssertKind;
            scope 5 {
                debug kind => _25;
            }
        }
        scope 6 {
            debug left_val => _32;
            debug right_val => _33;
            let _38: core::panicking::AssertKind;
            scope 7 {
                debug kind => _38;
            }
        }
        scope 8 {
            debug left_val => _46;
            debug right_val => _47;
            let _50: core::panicking::AssertKind;
            scope 9 {
                debug kind => _50;
            }
        }
    }

    bb0: {
        _57 = const _;
        _3 = std::mem::size_of_val::<fn() {main}>(_57) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _56 = const _;
        _1 = (move _2, _56);
        _4 = (_1.0: &usize);
        _5 = (_1.1: &usize);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<usize, usize>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _18 = &_13;
        _17 = std::mem::size_of_val::<fn() -> usize {std::mem::size_of::<u8>}>(_18) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = &_17;
        _55 = const _;
        _15 = (move _16, _55);
        _19 = (_15.0: &usize);
        _20 = (_15.1: &usize);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<usize, usize>(move _25, _19, _20, move _27) -> unwind continue;
    }

    bb6: {
        _31 = &_14;
        _30 = std::mem::size_of_val::<fn() -> usize {std::mem::size_of::<u16>}>(_31) -> [return: bb7, unwind continue];
    }

    bb7: {
        _29 = &_30;
        _54 = const _;
        _28 = (move _29, _54);
        _32 = (_28.0: &usize);
        _33 = (_28.1: &usize);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<usize, usize>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb9: {
        _44 = std::mem::size_of::<u8>() -> [return: bb10, unwind continue];
    }

    bb10: {
        _45 = std::mem::size_of::<u16>() -> [return: bb11, unwind continue];
    }

    bb11: {
        _43 = (move _44, move _45);
        _42 = &_43;
        _53 = const _;
        _41 = (move _42, _53);
        _46 = (_41.0: &(usize, usize));
        _47 = (_41.1: &(usize, usize));
        _49 = <(usize, usize) as PartialEq>::eq(_46, _47) -> [return: bb12, unwind continue];
    }

    bb12: {
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<(usize, usize), (usize, usize)>(move _50, _46, _47, move _52) -> unwind continue;
    }

    bb14: {
        return;
    }
}

promoted[0] in main: &(usize, usize) = {
    let mut _0: &(usize, usize);
    let mut _1: (usize, usize);

    bb0: {
        _1 = (const 1_usize, const 2_usize);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &fn() {main} = {
    let mut _0: &fn() {main};
    let mut _1: fn() {main};

    bb0: {
        _1 = main;
        _0 = &_1;
        return;
    }
}
