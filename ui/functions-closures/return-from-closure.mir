// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut calls: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/functions-closures/return-from-closure.rs:6:19: 6:24

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/functions-closures/return-from-closure.rs:6:27: 6:28
        return;                          // scope 0 at ui/functions-closures/return-from-closure.rs:6:1: 6:29
    }
}

fn surrounding() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/return-from-closure.rs:8:18: 8:18
    let _1: [closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34]; // in scope 0 at ui/functions-closures/return-from-closure.rs:9:9: 9:21
    let _2: ();                          // in scope 0 at ui/functions-closures/return-from-closure.rs:16:5: 16:21
    let mut _3: &[closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34]; // in scope 0 at ui/functions-closures/return-from-closure.rs:16:5: 16:17
    let mut _4: (isize,);                // in scope 0 at ui/functions-closures/return-from-closure.rs:16:5: 16:21
    let _5: ();                          // in scope 0 at ui/functions-closures/return-from-closure.rs:17:5: 17:21
    let mut _6: &[closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34]; // in scope 0 at ui/functions-closures/return-from-closure.rs:17:5: 17:17
    let mut _7: (isize,);                // in scope 0 at ui/functions-closures/return-from-closure.rs:17:5: 17:21
    let _9: ();                          // in scope 0 at ui/functions-closures/return-from-closure.rs:26:5: 26:26
    let mut _10: &[closure@ui/functions-closures/return-from-closure.rs:19:29: 19:39]; // in scope 0 at ui/functions-closures/return-from-closure.rs:26:5: 26:22
    let mut _11: (isize,);               // in scope 0 at ui/functions-closures/return-from-closure.rs:26:5: 26:26
    scope 1 {
        debug return_works => _1;        // in scope 1 at ui/functions-closures/return-from-closure.rs:9:9: 9:21
        let _8: [closure@ui/functions-closures/return-from-closure.rs:19:29: 19:39]; // in scope 1 at ui/functions-closures/return-from-closure.rs:19:9: 19:26
        scope 2 {
            debug return_works_proc => _8; // in scope 2 at ui/functions-closures/return-from-closure.rs:19:9: 19:26
        }
    }

    bb0: {
        _3 = &_1;                        // scope 1 at ui/functions-closures/return-from-closure.rs:16:5: 16:17
        _4 = const (10_isize,);          // scope 1 at ui/functions-closures/return-from-closure.rs:16:5: 16:21
        _2 = <[closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34] as Fn<(isize,)>>::call(move _3, move _4) -> bb1; // scope 1 at ui/functions-closures/return-from-closure.rs:16:5: 16:21
                                         // mir::Constant
                                         // + span: ui/functions-closures/return-from-closure.rs:16:5: 16:17
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34], (isize,)) -> <[closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34] as FnOnce<(isize,)>>::Output {<[closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34] as Fn<(isize,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_1;                        // scope 1 at ui/functions-closures/return-from-closure.rs:17:5: 17:17
        _7 = const (20_isize,);          // scope 1 at ui/functions-closures/return-from-closure.rs:17:5: 17:21
        _5 = <[closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34] as Fn<(isize,)>>::call(move _6, move _7) -> bb2; // scope 1 at ui/functions-closures/return-from-closure.rs:17:5: 17:21
                                         // mir::Constant
                                         // + span: ui/functions-closures/return-from-closure.rs:17:5: 17:17
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34], (isize,)) -> <[closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34] as FnOnce<(isize,)>>::Output {<[closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34] as Fn<(isize,)>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = &_8;                       // scope 2 at ui/functions-closures/return-from-closure.rs:26:5: 26:22
        _11 = const (10_isize,);         // scope 2 at ui/functions-closures/return-from-closure.rs:26:5: 26:26
        _9 = <[closure@ui/functions-closures/return-from-closure.rs:19:29: 19:39] as Fn<(isize,)>>::call(move _10, move _11) -> bb3; // scope 2 at ui/functions-closures/return-from-closure.rs:26:5: 26:26
                                         // mir::Constant
                                         // + span: ui/functions-closures/return-from-closure.rs:26:5: 26:22
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/functions-closures/return-from-closure.rs:19:29: 19:39], (isize,)) -> <[closure@ui/functions-closures/return-from-closure.rs:19:29: 19:39] as FnOnce<(isize,)>>::Output {<[closure@ui/functions-closures/return-from-closure.rs:19:29: 19:39] as Fn<(isize,)>>::call}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/functions-closures/return-from-closure.rs:27:2: 27:2
    }
}

fn surrounding::{closure#0}(_1: &[closure@ui/functions-closures/return-from-closure.rs:9:24: 9:34], _2: isize) -> () {
    debug n => _2;                       // in scope 0 at ui/functions-closures/return-from-closure.rs:9:25: 9:26
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/return-from-closure.rs:9:35: 9:35
    let mut _3: *mut usize;              // in scope 0 at ui/functions-closures/return-from-closure.rs:10:18: 10:23
    let mut _4: (usize, bool);           // in scope 0 at ui/functions-closures/return-from-closure.rs:10:18: 10:28
    let mut _5: bool;                    // in scope 0 at ui/functions-closures/return-from-closure.rs:12:12: 12:18
    let mut _6: isize;                   // in scope 0 at ui/functions-closures/return-from-closure.rs:12:12: 12:13
    let mut _7: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    scope 1 {
    }

    bb0: {
        _3 = const {alloc1: *mut usize}; // scope 1 at ui/functions-closures/return-from-closure.rs:10:18: 10:23
                                         // mir::Constant
                                         // + span: ui/functions-closures/return-from-closure.rs:10:18: 10:23
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc1)) }
        _4 = CheckedAdd((*_3), const 1_usize); // scope 1 at ui/functions-closures/return-from-closure.rs:10:18: 10:28
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_3), const 1_usize) -> bb1; // scope 1 at ui/functions-closures/return-from-closure.rs:10:18: 10:28
    }

    bb1: {
        (*_3) = move (_4.0: usize);      // scope 1 at ui/functions-closures/return-from-closure.rs:10:18: 10:28
        _6 = _2;                         // scope 0 at ui/functions-closures/return-from-closure.rs:12:12: 12:13
        _5 = Ge(move _6, const 0_isize); // scope 0 at ui/functions-closures/return-from-closure.rs:12:12: 12:18
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/functions-closures/return-from-closure.rs:12:12: 12:18
    }

    bb2: {
        return;                          // scope 0 at ui/functions-closures/return-from-closure.rs:14:6: 14:6
    }

    bb3: {
        _7 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

alloc1 (static: calls, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn surrounding::{closure#1}(_1: &[closure@ui/functions-closures/return-from-closure.rs:19:29: 19:39], _2: isize) -> () {
    debug n => _2;                       // in scope 0 at ui/functions-closures/return-from-closure.rs:19:30: 19:31
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/return-from-closure.rs:19:40: 19:40
    let mut _3: *mut usize;              // in scope 0 at ui/functions-closures/return-from-closure.rs:20:18: 20:23
    let mut _4: (usize, bool);           // in scope 0 at ui/functions-closures/return-from-closure.rs:20:18: 20:28
    let mut _5: bool;                    // in scope 0 at ui/functions-closures/return-from-closure.rs:22:12: 22:18
    let mut _6: isize;                   // in scope 0 at ui/functions-closures/return-from-closure.rs:22:12: 22:13
    let mut _7: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    scope 1 {
    }

    bb0: {
        _3 = const {alloc1: *mut usize}; // scope 1 at ui/functions-closures/return-from-closure.rs:20:18: 20:23
                                         // mir::Constant
                                         // + span: ui/functions-closures/return-from-closure.rs:20:18: 20:23
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc1)) }
        _4 = CheckedAdd((*_3), const 1_usize); // scope 1 at ui/functions-closures/return-from-closure.rs:20:18: 20:28
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_3), const 1_usize) -> bb1; // scope 1 at ui/functions-closures/return-from-closure.rs:20:18: 20:28
    }

    bb1: {
        (*_3) = move (_4.0: usize);      // scope 1 at ui/functions-closures/return-from-closure.rs:20:18: 20:28
        _6 = _2;                         // scope 0 at ui/functions-closures/return-from-closure.rs:22:12: 22:13
        _5 = Ge(move _6, const 0_isize); // scope 0 at ui/functions-closures/return-from-closure.rs:22:12: 22:18
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/functions-closures/return-from-closure.rs:22:12: 22:18
    }

    bb2: {
        return;                          // scope 0 at ui/functions-closures/return-from-closure.rs:24:6: 24:6
    }

    bb3: {
        _7 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

alloc1 (static: calls, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/return-from-closure.rs:29:15: 29:15
    let _1: ();                          // in scope 0 at ui/functions-closures/return-from-closure.rs:30:5: 30:18
    let mut _2: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: usize;                       // in scope 0 at ui/functions-closures/return-from-closure.rs:32:16: 32:30
    let mut _5: *mut usize;              // in scope 0 at ui/functions-closures/return-from-closure.rs:32:24: 32:29
    let mut _6: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _8: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
    }
    scope 2 {
        debug left_val => _7;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 3 {
            debug kind => _13;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _1 = surrounding() -> bb1;       // scope 0 at ui/functions-closures/return-from-closure.rs:30:5: 30:18
                                         // mir::Constant
                                         // + span: ui/functions-closures/return-from-closure.rs:30:5: 30:16
                                         // + literal: Const { ty: fn() {surrounding}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const {alloc1: *mut usize}; // scope 1 at ui/functions-closures/return-from-closure.rs:32:24: 32:29
                                         // mir::Constant
                                         // + span: ui/functions-closures/return-from-closure.rs:32:24: 32:29
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc1)) }
        _4 = (*_5);                      // scope 1 at ui/functions-closures/return-from-closure.rs:32:24: 32:29
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _21;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_2.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_2.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 3_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<usize, usize>(move _15, move _16, move _18, move _20); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/functions-closures/return-from-closure.rs:33:2: 33:2
    }
}

alloc1 (static: calls, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/functions-closures/return-from-closure.rs:32:32: 32:33

    bb0: {
        _1 = const 3_usize;              // scope 0 at ui/functions-closures/return-from-closure.rs:32:32: 32:33
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
