// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> isize {
    let mut _0: isize;                   // return place in scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:3:13: 3:18

    bb0: {
        _0 = const 22_isize;             // scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:3:21: 3:23
        return;                          // scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:3:25: 3:25
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:5:15: 5:15
    let mut _1: std::vec::Vec<fn() -> isize>; // in scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:6:9: 6:14
    let _2: ();                          // in scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:7:5: 7:16
    let mut _3: &mut std::vec::Vec<fn() -> isize>; // in scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:7:5: 7:16
    let mut _4: fn() -> isize;           // in scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:7:12: 7:15
    let mut _5: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _7: isize;                       // in scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:8:16: 8:24
    let mut _8: fn() -> isize;           // in scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:8:16: 8:22
    let mut _9: &fn() -> isize;          // in scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:8:16: 8:22
    let mut _10: &std::vec::Vec<fn() -> isize>; // in scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:8:17: 8:18
    let mut _11: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/functions-closures/call-closure-from-overloaded-op.rs:6:9: 6:14
        let _12: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _13: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _26: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _12;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _13;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _18: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _18;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = Vec::<fn() -> isize>::new() -> bb1; // scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:6:51: 6:61
                                         // mir::Constant
                                         // + span: ui/functions-closures/call-closure-from-overloaded-op.rs:6:51: 6:59
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<fn() -> isize> {Vec::<fn() -> isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut _1;                    // scope 1 at ui/functions-closures/call-closure-from-overloaded-op.rs:7:5: 7:16
        _4 = foo as fn() -> isize (Pointer(ReifyFnPointer)); // scope 1 at ui/functions-closures/call-closure-from-overloaded-op.rs:7:12: 7:15
                                         // mir::Constant
                                         // + span: ui/functions-closures/call-closure-from-overloaded-op.rs:7:12: 7:15
                                         // + literal: Const { ty: fn() -> isize {foo}, val: Value(<ZST>) }
        _2 = Vec::<fn() -> isize>::push(move _3, move _4) -> [return: bb2, unwind: bb8]; // scope 1 at ui/functions-closures/call-closure-from-overloaded-op.rs:7:5: 7:16
                                         // mir::Constant
                                         // + span: ui/functions-closures/call-closure-from-overloaded-op.rs:7:7: 7:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<fn() -> isize>, fn() -> isize) {Vec::<fn() -> isize>::push}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = &_1;                       // scope 1 at ui/functions-closures/call-closure-from-overloaded-op.rs:8:17: 8:18
        _9 = <Vec<fn() -> isize> as Index<usize>>::index(move _10, const 0_usize) -> [return: bb3, unwind: bb8]; // scope 1 at ui/functions-closures/call-closure-from-overloaded-op.rs:8:16: 8:22
                                         // mir::Constant
                                         // + span: ui/functions-closures/call-closure-from-overloaded-op.rs:8:16: 8:22
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<fn() -> isize>, usize) -> &'a <Vec<fn() -> isize> as Index<usize>>::Output {<Vec<fn() -> isize> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = (*_9);                      // scope 1 at ui/functions-closures/call-closure-from-overloaded-op.rs:8:16: 8:22
        _7 = move _8() -> [return: bb4, unwind: bb8]; // scope 1 at ui/functions-closures/call-closure-from-overloaded-op.rs:8:16: 8:24
    }

    bb4: {
        _6 = &_7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _26 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _11 = _26;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _11);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_5.0: &isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_5.1: &isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = (*_12);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = const 22_isize;            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = Eq(move _16, move _17);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _14 = Not(move _15);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<isize, isize>(move _20, move _21, move _23, move _25) -> bb8; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:9:1: 9:2
    }

    bb7: {
        return;                          // scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:9:2: 9:2
    }

    bb8 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:9:1: 9:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:5:1: 9:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:8:26: 8:28

    bb0: {
        _1 = const 22_isize;             // scope 0 at ui/functions-closures/call-closure-from-overloaded-op.rs:8:26: 8:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
