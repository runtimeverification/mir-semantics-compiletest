// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 22_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<fn() -> isize>;
    let _2: ();
    let mut _3: &mut std::vec::Vec<fn() -> isize>;
    let mut _4: fn() -> isize;
    let mut _5: (&isize, &isize);
    let mut _6: &isize;
    let _7: isize;
    let mut _8: fn() -> isize;
    let mut _9: &fn() -> isize;
    let mut _10: &std::vec::Vec<fn() -> isize>;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: isize;
    let mut _16: isize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _11: &isize;
        let _12: &isize;
        let mut _20: &isize;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
    }

    bb0: {
        _1 = Vec::<fn() -> isize>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _1;
        _4 = foo as fn() -> isize (Pointer(ReifyFnPointer));
        _2 = Vec::<fn() -> isize>::push(move _3, move _4) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _10 = &_1;
        _9 = <Vec<fn() -> isize> as Index<usize>>::index(move _10, const 0_usize) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _8 = (*_9);
        _7 = move _8() -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _6 = &_7;
        _20 = const _;
        _5 = (move _6, _20);
        _11 = (_5.0: &isize);
        _12 = (_5.1: &isize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<isize, isize>(move _17, _11, _12, move _19) -> bb8;
    }

    bb6: {
        drop(_1) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 22_isize;
        _0 = &_1;
        return;
    }
}
