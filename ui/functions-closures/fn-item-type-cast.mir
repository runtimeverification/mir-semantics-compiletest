// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: isize) -> isize {
    debug x => _1;
    let mut _0: isize;

    bb0: {
        _0 = Mul(_1, const 2_isize);
        return;
    }
}

fn bar(_1: isize) -> isize {
    debug x => _1;
    let mut _0: isize;

    bb0: {
        _0 = Mul(_1, const 4_isize);
        return;
    }
}

fn eq(_1: T, _2: T) -> () {
    debug x => _1;
    debug y => _2;
    let mut _0: ();

    bb0: {
        drop(_2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

static TEST: Option<fn(isize) -> isize> = {
    let mut _0: std::option::Option<fn(isize) -> isize>;
    let mut _1: fn(isize) -> isize;

    bb0: {
        StorageLive(_1);
        _1 = foo as fn(isize) -> isize (Pointer(ReifyFnPointer));
        _0 = Option::<fn(isize) -> isize>::Some(move _1);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: fn(isize) -> isize;
    let mut _3: bool;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let _6: isize;
    let mut _7: fn(isize) -> isize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let _17: ();
    let mut _18: fn(isize) -> isize;
    let mut _19: fn(isize) -> isize;
    scope 1 {
        debug f => _1;
        let _2: fn(isize) -> isize;
        scope 2 {
            debug f => _2;
            let _8: &isize;
            let _9: &isize;
            let mut _20: &isize;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
        }
    }

    bb0: {
        _1 = foo as fn(isize) -> isize (Pointer(ReifyFnPointer));
        _3 = const true;
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _2 = foo as fn(isize) -> isize (Pointer(ReifyFnPointer));
        goto -> bb3;
    }

    bb2: {
        _2 = bar as fn(isize) -> isize (Pointer(ReifyFnPointer));
        goto -> bb3;
    }

    bb3: {
        _7 = _2;
        _6 = move _7(const 4_isize) -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = &_6;
        _20 = const _;
        _4 = (move _5, _20);
        _8 = (_4.0: &isize);
        _9 = (_4.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb6: {
        _18 = foo as fn(isize) -> isize (Pointer(ReifyFnPointer));
        _19 = bar as fn(isize) -> isize (Pointer(ReifyFnPointer));
        _17 = eq::<fn(isize) -> isize>(move _18, move _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 8_isize;
        _0 = &_1;
        return;
    }
}
