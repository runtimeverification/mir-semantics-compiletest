// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [closure@ui/functions-closures/closure-immediate.rs:7:13: 7:35];
    let _2: ();
    let mut _3: &[closure@ui/functions-closures/closure-immediate.rs:7:13: 7:35];
    let mut _4: (u8, u16, u8);
    scope 1 {
        debug c => const ZeroSized: [closure@ui/functions-closures/closure-immediate.rs:7:13: 7:35];
    }

    bb0: {
        _3 = &_1;
        _4 = (const 1_u8, const 2_u16, const 3_u8);
        _2 = <[closure@ui/functions-closures/closure-immediate.rs:7:13: 7:35] as Fn<(u8, u16, u8)>>::call(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/functions-closures/closure-immediate.rs:7:13: 7:35], _2: u8, _3: u16, _4: u8) -> () {
    debug a => _2;
    debug b => _3;
    debug c => _4;
    let mut _0: ();
    let mut _5: (&u8, &u8);
    let mut _6: &u8;
    let _7: &u8;
    let _8: &u8;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: u8;
    let mut _12: u8;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&u16, &u16);
    let mut _17: &u16;
    let _18: &u16;
    let _19: &u16;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: u16;
    let mut _23: u16;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&u8, &u8);
    let mut _28: &u8;
    let _29: &u8;
    let _30: &u8;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: u8;
    let mut _34: u8;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: &u8;
    let mut _39: &u16;
    let mut _40: &u8;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _29;
        debug right_val => _30;
        let _35: core::panicking::AssertKind;
        scope 6 {
            debug kind => _35;
        }
    }

    bb0: {
        _6 = &_2;
        _40 = const _;
        _5 = (move _6, _40);
        _7 = (_5.0: &u8);
        _8 = (_5.1: &u8);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<u8, u8>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb2: {
        _17 = &_3;
        _39 = const _;
        _16 = (move _17, _39);
        _18 = (_16.0: &u16);
        _19 = (_16.1: &u16);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<u16, u16>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb4: {
        _28 = &_4;
        _38 = const _;
        _27 = (move _28, _38);
        _29 = (_27.0: &u8);
        _30 = (_27.1: &u8);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<u8, u8>(move _35, _29, _30, move _37) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main::{closure#0}: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 3_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main::{closure#0}: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 2_u16;
        _0 = &_1;
        return;
    }
}

promoted[2] in main::{closure#0}: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}
