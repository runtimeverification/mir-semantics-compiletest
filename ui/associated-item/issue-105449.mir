// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn problematic_function() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-item/issue-105449.rs:6:1: 6:1
    let _1: Edge2dElement;               // in scope 0 at ui/associated-item/issue-105449.rs:9:9: 9:10
    let mut _2: Point;                   // in scope 0 at ui/associated-item/issue-105449.rs:10:13: 10:58
    let mut _3: (Ure, R1, <DefaultAlloc as Allocator<Ure, R1>>::Buffer); // in scope 0 at ui/associated-item/issue-105449.rs:10:33: 10:57
    let mut _4: &Edge2dElement;          // in scope 0 at ui/associated-item/issue-105449.rs:10:33: 10:57
    scope 1 {
        debug e => _1;                   // in scope 1 at ui/associated-item/issue-105449.rs:9:9: 9:10
        scope 2 {
        }
    }

    bb0: {
        _4 = &_1;                        // scope 1 at ui/associated-item/issue-105449.rs:10:33: 10:57
        _3 = <Edge2dElement as FiniteElement<R1>>::map_reference_coords(move _4) -> bb1; // scope 1 at ui/associated-item/issue-105449.rs:10:33: 10:57
                                         // mir::Constant
                                         // + span: ui/associated-item/issue-105449.rs:10:35: 10:55
                                         // + literal: Const { ty: for<'a> fn(&'a Edge2dElement) -> (Ure, R1, <DefaultAlloc as Allocator<Ure, R1>>::Buffer) {<Edge2dElement as FiniteElement<R1>>::map_reference_coords}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <(Ure, R1, <DefaultAlloc as Allocator<Ure, R1>>::Buffer) as Into<Point>>::into(move _3) -> bb2; // scope 1 at ui/associated-item/issue-105449.rs:10:13: 10:58
                                         // mir::Constant
                                         // + span: ui/associated-item/issue-105449.rs:10:13: 10:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn((Ure, R1, <DefaultAlloc as Allocator<Ure, R1>>::Buffer)) -> Point {<(Ure, R1, <DefaultAlloc as Allocator<Ure, R1>>::Buffer) as Into<Point>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/associated-item/issue-105449.rs:11:2: 11:2
    }
}

fn <impl at ui/associated-item/issue-105449.rs:18:1: 18:41>::from(_1: (N, D, <DefaultAlloc as Allocator<N, D>>::Buffer)) -> Point {
    let mut _0: Point;                   // return place in scope 0 at ui/associated-item/issue-105449.rs:22:34: 22:38
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _2 = core::panicking::panic(const "not implemented") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_1) -> bb2;                 // scope 0 at ui/associated-item/issue-105449.rs:24:5: 24:6
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/associated-item/issue-105449.rs:22:5: 24:6
    }
}

fn <impl at ui/associated-item/issue-105449.rs:32:1: 32:41>::map_reference_coords(_1: &Edge2dElement) -> (Ure, R1, MStorage) {
    debug self => _1;                    // in scope 0 at ui/associated-item/issue-105449.rs:33:29: 33:34
    let mut _0: (Ure, R1, MStorage);     // return place in scope 0 at ui/associated-item/issue-105449.rs:33:39: 33:55
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _2 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-item/issue-105449.rs:59:11: 59:11

    bb0: {
        return;                          // scope 0 at ui/associated-item/issue-105449.rs:59:13: 59:13
    }
}
