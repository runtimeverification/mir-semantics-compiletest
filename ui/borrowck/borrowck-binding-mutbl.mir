// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn impure(_1: &[isize]) -> () {
    debug _v => _1;                      // in scope 0 at ui/borrowck/borrowck-binding-mutbl.rs:5:11: 5:13
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-binding-mutbl.rs:5:25: 5:25

    bb0: {
        return;                          // scope 0 at ui/borrowck/borrowck-binding-mutbl.rs:6:2: 6:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-binding-mutbl.rs:8:15: 8:15
    let mut _1: F;                       // in scope 0 at ui/borrowck/borrowck-binding-mutbl.rs:9:9: 9:14
    let mut _2: std::vec::Vec<isize>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _3: std::boxed::Box<[isize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[isize; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[isize; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let _10: ();                         // in scope 0 at ui/borrowck/borrowck-binding-mutbl.rs:13:9: 13:18
    let mut _11: &[isize];               // in scope 0 at ui/borrowck/borrowck-binding-mutbl.rs:13:16: 13:17
    let _12: &[isize];                   // in scope 0 at ui/borrowck/borrowck-binding-mutbl.rs:13:16: 13:17
    let mut _13: &std::vec::Vec<isize>;  // in scope 0 at ui/borrowck/borrowck-binding-mutbl.rs:13:16: 13:17
    let mut _14: *const [isize; 1];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-binding-mutbl.rs:9:9: 9:14
        let _9: &mut std::vec::Vec<isize>; // in scope 1 at ui/borrowck/borrowck-binding-mutbl.rs:12:13: 12:22
        scope 3 {
            debug v => _9;               // in scope 3 at ui/borrowck/borrowck-binding-mutbl.rs:12:13: 12:22
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [isize; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _14 = (((_8.0: std::ptr::Unique<[isize; 1]>).0: std::ptr::NonNull<[isize; 1]>).0: *const [isize; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_14) = [const 3_isize];        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[isize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _3) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[isize]>) -> Vec<isize> {slice::<impl [isize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = F { f: move _2 };           // scope 0 at ui/borrowck/borrowck-binding-mutbl.rs:9:17: 9:31
        _9 = &mut (_1.0: std::vec::Vec<isize>); // scope 1 at ui/borrowck/borrowck-binding-mutbl.rs:12:13: 12:22
        _13 = &(*_9);                    // scope 3 at ui/borrowck/borrowck-binding-mutbl.rs:13:16: 13:17
        _12 = <Vec<isize> as Deref>::deref(move _13) -> [return: bb3, unwind: bb6]; // scope 3 at ui/borrowck/borrowck-binding-mutbl.rs:13:16: 13:17
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-binding-mutbl.rs:13:16: 13:17
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>) -> &'a <Vec<isize> as Deref>::Target {<Vec<isize> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = _12;                       // scope 3 at ui/borrowck/borrowck-binding-mutbl.rs:13:16: 13:17
        _10 = impure(move _11) -> [return: bb4, unwind: bb6]; // scope 3 at ui/borrowck/borrowck-binding-mutbl.rs:13:9: 13:18
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-binding-mutbl.rs:13:9: 13:15
                                         // + literal: Const { ty: for<'a> fn(&'a [isize]) {impure}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/borrowck/borrowck-binding-mutbl.rs:16:1: 16:2
    }

    bb5: {
        return;                          // scope 0 at ui/borrowck/borrowck-binding-mutbl.rs:16:2: 16:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/borrowck/borrowck-binding-mutbl.rs:16:1: 16:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-binding-mutbl.rs:8:1: 16:2
    }
}
