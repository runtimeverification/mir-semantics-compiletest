// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-local-borrow.rs:5:11: 5:11
    let _1: i32;                         // in scope 0 at ui/borrowck/borrowck-local-borrow.rs:6:9: 6:10
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-local-borrow.rs:6:9: 6:10
        let _2: &i32;                    // in scope 1 at ui/borrowck/borrowck-local-borrow.rs:7:9: 7:10
        scope 2 {
            debug y => _2;               // in scope 2 at ui/borrowck/borrowck-local-borrow.rs:7:9: 7:10
        }
    }

    bb0: {
        _1 = const 2_i32;                // scope 0 at ui/borrowck/borrowck-local-borrow.rs:6:13: 6:14
        _2 = &_1;                        // scope 1 at ui/borrowck/borrowck-local-borrow.rs:7:13: 7:15
        _3 = begin_panic::<&str>(const "panic 1"); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-local-borrow.rs:8:12: 8:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}
