// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn serialize_as_csv(_1: &V) -> Result<String, &str> {
    debug value => _1;                   // in scope 0 at ui/borrowck/issue-71546.rs:7:28: 7:33
    let mut _0: std::result::Result<std::string::String, &str>; // return place in scope 0 at ui/borrowck/issue-71546.rs:7:42: 7:62
    let _2: std::string::String;         // in scope 0 at ui/borrowck/issue-71546.rs:13:9: 13:16
    let mut _3: std::iter::Map<<&V as std::iter::IntoIterator>::IntoIter, [closure@ui/borrowck/issue-71546.rs:13:49: 13:55]>; // in scope 0 at ui/borrowck/issue-71546.rs:13:27: 13:73
    let mut _4: <&V as std::iter::IntoIterator>::IntoIter; // in scope 0 at ui/borrowck/issue-71546.rs:13:27: 13:44
    let mut _5: &V;                      // in scope 0 at ui/borrowck/issue-71546.rs:13:27: 13:44
    let mut _6: [closure@ui/borrowck/issue-71546.rs:13:49: 13:55]; // in scope 0 at ui/borrowck/issue-71546.rs:13:49: 13:72
    let mut _7: std::string::String;     // in scope 0 at ui/borrowck/issue-71546.rs:14:8: 14:15
    scope 1 {
        debug csv_str => _2;             // in scope 1 at ui/borrowck/issue-71546.rs:13:9: 13:16
    }

    bb0: {
        _5 = _1;                         // scope 0 at ui/borrowck/issue-71546.rs:13:27: 13:44
        _4 = <&V as IntoIterator>::into_iter(move _5) -> bb1; // scope 0 at ui/borrowck/issue-71546.rs:13:27: 13:44
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-71546.rs:13:33: 13:42
                                         // + literal: Const { ty: fn(&V) -> <&V as IntoIterator>::IntoIter {<&V as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <<&V as IntoIterator>::IntoIter as Iterator>::map::<String, [closure@ui/borrowck/issue-71546.rs:13:49: 13:55]>(move _4, move _6) -> bb2; // scope 0 at ui/borrowck/issue-71546.rs:13:27: 13:73
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-71546.rs:13:45: 13:48
                                         // + literal: Const { ty: fn(<&V as IntoIterator>::IntoIter, [closure@ui/borrowck/issue-71546.rs:13:49: 13:55]) -> Map<<&V as IntoIterator>::IntoIter, [closure@ui/borrowck/issue-71546.rs:13:49: 13:55]> {<<&V as IntoIterator>::IntoIter as Iterator>::map::<String, [closure@ui/borrowck/issue-71546.rs:13:49: 13:55]>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = <Map<<&V as IntoIterator>::IntoIter, [closure@ui/borrowck/issue-71546.rs:13:49: 13:55]> as Iterator>::collect::<String>(move _3) -> bb3; // scope 0 at ui/borrowck/issue-71546.rs:13:27: 13:93
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-71546.rs:13:74: 13:81
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Map<<&V as IntoIterator>::IntoIter, [closure@ui/borrowck/issue-71546.rs:13:49: 13:55]>) -> String {<Map<<&V as IntoIterator>::IntoIter, [closure@ui/borrowck/issue-71546.rs:13:49: 13:55]> as Iterator>::collect::<String>}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = move _2;                    // scope 1 at ui/borrowck/issue-71546.rs:14:8: 14:15
        _0 = Result::<String, &str>::Ok(move _7); // scope 1 at ui/borrowck/issue-71546.rs:14:5: 14:16
        return;                          // scope 0 at ui/borrowck/issue-71546.rs:15:2: 15:2
    }
}

fn serialize_as_csv::{closure#0}(_1: &mut [closure@ui/borrowck/issue-71546.rs:13:49: 13:55], _2: <&V as IntoIterator>::Item) -> String {
    debug elem => _2;                    // in scope 0 at ui/borrowck/issue-71546.rs:13:50: 13:54
    let mut _0: std::string::String;     // return place in scope 0 at ui/borrowck/issue-71546.rs:13:56: 13:56
    let mut _3: &<&V as std::iter::IntoIterator>::Item; // in scope 0 at ui/borrowck/issue-71546.rs:13:56: 13:72

    bb0: {
        _3 = &_2;                        // scope 0 at ui/borrowck/issue-71546.rs:13:56: 13:72
        _0 = <<&V as IntoIterator>::Item as ToString>::to_string(move _3) -> [return: bb1, unwind: bb3]; // scope 0 at ui/borrowck/issue-71546.rs:13:56: 13:72
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-71546.rs:13:61: 13:70
                                         // + literal: Const { ty: for<'a> fn(&'a <&V as IntoIterator>::Item) -> String {<<&V as IntoIterator>::Item as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at ui/borrowck/issue-71546.rs:13:71: 13:72
    }

    bb2: {
        return;                          // scope 0 at ui/borrowck/issue-71546.rs:13:72: 13:72
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/borrowck/issue-71546.rs:13:71: 13:72
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/issue-71546.rs:13:49: 13:72
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/issue-71546.rs:17:11: 17:11

    bb0: {
        return;                          // scope 0 at ui/borrowck/issue-71546.rs:17:13: 17:13
    }
}
