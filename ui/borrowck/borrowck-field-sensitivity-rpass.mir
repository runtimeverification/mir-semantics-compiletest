// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn move_after_copy() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:9:22: 9:22
    let _1: A;                           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:10:9: 10:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:10:26: 10:37
    let _3: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:11:5: 11:14
    let mut _4: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:11:10: 11:13
    let _5: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:12:5: 12:14
    let mut _6: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:12:10: 12:13
    let mut _7: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:13:1: 13:2
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:10:9: 10:10
    }

    bb0: {
        _7 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:10:9: 10:10
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:10:26: 10:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:10:26: 10:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = const true;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:10:13: 10:39
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:10:13: 10:39
        _4 = const 1_isize;              // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:11:10: 11:13
        _3 = std::mem::drop::<isize>(move _4) -> [return: bb2, unwind: bb6]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:11:5: 11:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:11:5: 11:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = const false;                // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:12:10: 12:13
        _6 = move (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:12:10: 12:13
        _5 = std::mem::drop::<Box<isize>>(move _6) -> [return: bb3, unwind: bb6]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:12:5: 12:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:12:5: 12:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:13:1: 13:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:13:2: 13:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:9:1: 13:2
    }

    bb5 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb4; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:13:1: 13:2
    }

    bb6 (cleanup): {
        switchInt(_7) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:13:1: 13:2
    }
}

fn move_after_fu_copy() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:15:25: 15:25
    let _1: A;                           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:16:9: 16:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:16:26: 16:37
    let mut _4: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:17:21: 17:32
    let _5: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:18:5: 18:14
    let mut _6: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:18:10: 18:13
    let mut _7: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:19:1: 19:2
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:16:9: 16:10
        let _3: A;                       // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:17:9: 17:11
        scope 2 {
            debug _y => _3;              // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:17:9: 17:11
        }
    }

    bb0: {
        _7 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:16:9: 16:10
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:16:26: 16:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:16:26: 16:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = const true;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:16:13: 16:39
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:16:13: 16:39
        _4 = Box::<isize>::new(const 3_isize) -> [return: bb2, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:17:21: 17:32
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:17:21: 17:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = A { a: (_1.0: isize), b: move _4 }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:17:14: 17:40
        _7 = const false;                // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:18:10: 18:13
        _6 = move (_1.1: std::boxed::Box<isize>); // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:18:10: 18:13
        _5 = std::mem::drop::<Box<isize>>(move _6) -> [return: bb3, unwind: bb5]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:18:5: 18:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:18:5: 18:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_3) -> [return: bb4, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:19:1: 19:2
    }

    bb4: {
        _7 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:19:1: 19:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:19:2: 19:2
    }

    bb5 (cleanup): {
        drop(_3) -> bb8;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:19:1: 19:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:15:1: 19:2
    }

    bb7 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb6; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:19:1: 19:2
    }

    bb8 (cleanup): {
        switchInt(_7) -> [0: bb6, otherwise: bb7]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:19:1: 19:2
    }
}

fn fu_move_after_copy() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:21:25: 21:25
    let _1: A;                           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:22:9: 22:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:22:26: 22:37
    let _3: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:23:5: 23:14
    let mut _4: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:23:10: 23:13
    let mut _6: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:25:1: 25:2
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:22:9: 22:10
        let _5: A;                       // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:24:9: 24:11
        scope 2 {
            debug _y => _5;              // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:24:9: 24:11
        }
    }

    bb0: {
        _6 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:22:9: 22:10
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:22:26: 22:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:22:26: 22:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = const true;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:22:13: 22:39
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:22:13: 22:39
        _4 = const 1_isize;              // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:23:10: 23:13
        _3 = std::mem::drop::<isize>(move _4) -> [return: bb2, unwind: bb6]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:23:5: 23:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:23:5: 23:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = const false;                // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:24:14: 24:30
        _5 = A { a: const 3_isize, b: move (_1.1: std::boxed::Box<isize>) }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:24:14: 24:30
        drop(_5) -> [return: bb3, unwind: bb6]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:25:1: 25:2
    }

    bb3: {
        _6 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:25:1: 25:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:25:2: 25:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:21:1: 25:2
    }

    bb5 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb4; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:25:1: 25:2
    }

    bb6 (cleanup): {
        switchInt(_6) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:25:1: 25:2
    }
}

fn fu_move_after_fu_copy() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:27:28: 27:28
    let _1: A;                           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:28:9: 28:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:28:26: 28:37
    let mut _4: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:29:21: 29:32
    let mut _6: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:31:1: 31:2
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:28:9: 28:10
        let _3: A;                       // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:29:9: 29:11
        scope 2 {
            debug _y => _3;              // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:29:9: 29:11
            let _5: A;                   // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:30:9: 30:11
            scope 3 {
                debug _z => _5;          // in scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:30:9: 30:11
            }
        }
    }

    bb0: {
        _6 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:28:9: 28:10
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:28:26: 28:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:28:26: 28:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = const true;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:28:13: 28:39
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:28:13: 28:39
        _4 = Box::<isize>::new(const 3_isize) -> [return: bb2, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:29:21: 29:32
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:29:21: 29:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = A { a: (_1.0: isize), b: move _4 }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:29:14: 29:40
        _6 = const false;                // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:30:14: 30:30
        _5 = A { a: const 4_isize, b: move (_1.1: std::boxed::Box<isize>) }; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:30:14: 30:30
        drop(_5) -> [return: bb3, unwind: bb5]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:31:1: 31:2
    }

    bb3: {
        drop(_3) -> [return: bb4, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:31:1: 31:2
    }

    bb4: {
        _6 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:31:1: 31:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:31:2: 31:2
    }

    bb5 (cleanup): {
        drop(_3) -> bb8;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:31:1: 31:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:27:1: 31:2
    }

    bb7 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb6; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:31:1: 31:2
    }

    bb8 (cleanup): {
        switchInt(_6) -> [0: bb6, otherwise: bb7]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:31:1: 31:2
    }
}

fn copy_after_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:33:22: 33:22
    let _1: A;                           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:34:9: 34:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:34:26: 34:37
    let _3: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:35:5: 35:14
    let mut _4: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:35:10: 35:13
    let _5: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:36:5: 36:14
    let mut _6: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:36:10: 36:13
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:34:9: 34:10
    }

    bb0: {
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:34:26: 34:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:34:26: 34:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:34:13: 34:39
        _4 = move (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:35:10: 35:13
        _3 = std::mem::drop::<Box<isize>>(move _4) -> bb2; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:35:5: 35:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:35:5: 35:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = (_1.0: isize);              // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:36:10: 36:13
        _5 = std::mem::drop::<isize>(move _6) -> bb3; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:36:5: 36:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:36:5: 36:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:37:2: 37:2
    }
}

fn copy_after_fu_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:39:25: 39:25
    let _1: A;                           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:40:9: 40:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:40:26: 40:37
    let _4: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:42:5: 42:14
    let mut _5: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:42:10: 42:13
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:40:9: 40:10
        let _3: A;                       // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:41:9: 41:10
        scope 2 {
            debug y => _3;               // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:41:9: 41:10
        }
    }

    bb0: {
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:40:26: 40:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:40:26: 40:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:40:13: 40:39
        _3 = A { a: const 3_isize, b: move (_1.1: std::boxed::Box<isize>) }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:41:13: 41:29
        _5 = const 1_isize;              // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:42:10: 42:13
        _4 = std::mem::drop::<isize>(move _5) -> [return: bb2, unwind: bb4]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:42:5: 42:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:42:5: 42:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_3) -> bb3;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:43:1: 43:2
    }

    bb3: {
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:43:2: 43:2
    }

    bb4 (cleanup): {
        drop(_3) -> bb5;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:43:1: 43:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:39:1: 43:2
    }
}

fn fu_copy_after_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:45:25: 45:25
    let _1: A;                           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:46:9: 46:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:46:26: 46:37
    let _3: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:47:5: 47:14
    let mut _4: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:47:10: 47:13
    let mut _6: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:48:21: 48:32
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:46:9: 46:10
        let _5: A;                       // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:48:9: 48:11
        scope 2 {
            debug _y => _5;              // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:48:9: 48:11
        }
    }

    bb0: {
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:46:26: 46:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:46:26: 46:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:46:13: 46:39
        _4 = move (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:47:10: 47:13
        _3 = std::mem::drop::<Box<isize>>(move _4) -> bb2; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:47:5: 47:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:47:5: 47:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = Box::<isize>::new(const 3_isize) -> bb3; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:48:21: 48:32
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:48:21: 48:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = A { a: (_1.0: isize), b: move _6 }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:48:14: 48:40
        drop(_5) -> bb4;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:49:1: 49:2
    }

    bb4: {
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:49:2: 49:2
    }
}

fn fu_copy_after_fu_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:51:28: 51:28
    let _1: A;                           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:52:9: 52:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:52:26: 52:37
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:54:21: 54:32
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:52:9: 52:10
        let _3: A;                       // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:53:9: 53:11
        scope 2 {
            debug _y => _3;              // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:53:9: 53:11
            let _4: A;                   // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:54:9: 54:11
            scope 3 {
                debug _z => _4;          // in scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:54:9: 54:11
            }
        }
    }

    bb0: {
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:52:26: 52:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:52:26: 52:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:52:13: 52:39
        _3 = A { a: const 3_isize, b: move (_1.1: std::boxed::Box<isize>) }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:53:14: 53:30
        _5 = Box::<isize>::new(const 3_isize) -> [return: bb2, unwind: bb5]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:54:21: 54:32
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:54:21: 54:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = A { a: (_1.0: isize), b: move _5 }; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:54:14: 54:40
        drop(_4) -> [return: bb3, unwind: bb5]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:55:1: 55:2
    }

    bb3: {
        drop(_3) -> bb4;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:55:1: 55:2
    }

    bb4: {
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:55:2: 55:2
    }

    bb5 (cleanup): {
        drop(_3) -> bb6;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:55:1: 55:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:51:1: 55:2
    }
}

fn borrow_after_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:57:24: 57:24
    let _1: A;                           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:58:9: 58:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:58:26: 58:37
    let _3: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:59:5: 59:14
    let mut _4: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:59:10: 59:13
    let _6: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:61:5: 61:13
    let mut _7: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:61:10: 61:12
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:58:9: 58:10
        let _5: &isize;                  // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:60:9: 60:10
        scope 2 {
            debug p => _5;               // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:60:9: 60:10
        }
    }

    bb0: {
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:58:26: 58:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:58:26: 58:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:58:13: 58:39
        _4 = move (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:59:10: 59:13
        _3 = std::mem::drop::<Box<isize>>(move _4) -> bb2; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:59:5: 59:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:59:5: 59:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &(_1.0: isize);             // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:60:13: 60:17
        _7 = (*_5);                      // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:61:10: 61:12
        _6 = std::mem::drop::<isize>(move _7) -> bb3; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:61:5: 61:13
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:61:5: 61:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:62:2: 62:2
    }
}

fn borrow_after_fu_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:64:27: 64:27
    let _1: A;                           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:65:9: 65:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:65:26: 65:37
    let _5: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:68:5: 68:13
    let mut _6: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:68:10: 68:12
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:65:9: 65:10
        let _3: A;                       // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:66:9: 66:11
        scope 2 {
            debug _y => _3;              // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:66:9: 66:11
            let _4: &isize;              // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:67:9: 67:10
            scope 3 {
                debug p => _4;           // in scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:67:9: 67:10
            }
        }
    }

    bb0: {
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:65:26: 65:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:65:26: 65:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:65:13: 65:39
        _3 = A { a: const 3_isize, b: move (_1.1: std::boxed::Box<isize>) }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:66:14: 66:30
        _4 = &(_1.0: isize);             // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:67:13: 67:17
        _6 = (*_4);                      // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:68:10: 68:12
        _5 = std::mem::drop::<isize>(move _6) -> [return: bb2, unwind: bb4]; // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:68:5: 68:13
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:68:5: 68:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_3) -> bb3;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:69:1: 69:2
    }

    bb3: {
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:69:2: 69:2
    }

    bb4 (cleanup): {
        drop(_3) -> bb5;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:69:1: 69:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:64:1: 69:2
    }
}

fn move_after_borrow() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:71:24: 71:24
    let _1: A;                           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:72:9: 72:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:72:26: 72:37
    let _4: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:74:5: 74:14
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:74:10: 74:13
    let _6: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:75:5: 75:13
    let mut _7: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:75:10: 75:12
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:72:9: 72:10
        let _3: &isize;                  // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:73:9: 73:10
        scope 2 {
            debug p => _3;               // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:73:9: 73:10
        }
    }

    bb0: {
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:72:26: 72:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:72:26: 72:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:72:13: 72:39
        _3 = &(_1.0: isize);             // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:73:13: 73:17
        _5 = move (_1.1: std::boxed::Box<isize>); // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:74:10: 74:13
        _4 = std::mem::drop::<Box<isize>>(move _5) -> bb2; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:74:5: 74:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:74:5: 74:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = (*_3);                      // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:75:10: 75:12
        _6 = std::mem::drop::<isize>(move _7) -> bb3; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:75:5: 75:13
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:75:5: 75:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:76:2: 76:2
    }
}

fn fu_move_after_borrow() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:78:27: 78:27
    let _1: A;                           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:79:9: 79:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:79:26: 79:37
    let _5: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:82:5: 82:13
    let mut _6: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:82:10: 82:12
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:79:9: 79:10
        let _3: &isize;                  // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:80:9: 80:10
        scope 2 {
            debug p => _3;               // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:80:9: 80:10
            let _4: A;                   // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:81:9: 81:11
            scope 3 {
                debug _y => _4;          // in scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:81:9: 81:11
            }
        }
    }

    bb0: {
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:79:26: 79:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:79:26: 79:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:79:13: 79:39
        _3 = &(_1.0: isize);             // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:80:13: 80:17
        _4 = A { a: const 3_isize, b: move (_1.1: std::boxed::Box<isize>) }; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:81:14: 81:30
        _6 = (*_3);                      // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:82:10: 82:12
        _5 = std::mem::drop::<isize>(move _6) -> [return: bb2, unwind: bb4]; // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:82:5: 82:13
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:82:5: 82:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_4) -> bb3;                 // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:83:1: 83:2
    }

    bb3: {
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:83:2: 83:2
    }

    bb4 (cleanup): {
        drop(_4) -> bb5;                 // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:83:1: 83:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:78:1: 83:2
    }
}

fn mut_borrow_after_mut_borrow() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:85:34: 85:34
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:86:9: 86:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:86:30: 86:41
    let _5: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:89:5: 89:13
    let mut _6: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:89:10: 89:12
    let _7: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:90:5: 90:14
    let mut _8: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:90:10: 90:13
    let mut _9: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:88:9: 88:10
    let mut _10: *const isize;           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:88:9: 88:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:86:9: 86:14
        let _3: &mut isize;              // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:87:9: 87:10
        scope 2 {
            debug p => _3;               // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:87:9: 87:10
            let _4: &mut std::boxed::Box<isize>; // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:88:9: 88:10
            scope 3 {
                debug q => _4;           // in scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:88:9: 88:10
            }
        }
    }

    bb0: {
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:86:30: 86:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:86:30: 86:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:86:17: 86:43
        _3 = &mut (_1.0: isize);         // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:87:13: 87:21
        _4 = &mut (_1.1: std::boxed::Box<isize>); // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:88:13: 88:21
        _6 = (*_3);                      // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:89:10: 89:12
        _5 = std::mem::drop::<isize>(move _6) -> [return: bb2, unwind: bb5]; // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:89:5: 89:13
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:89:5: 89:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = deref_copy (*_4);           // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:90:10: 90:13
        _10 = (((_9.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:90:10: 90:13
        _8 = (*_10);                     // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:90:10: 90:13
        _7 = std::mem::drop::<isize>(move _8) -> [return: bb3, unwind: bb5]; // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:90:5: 90:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:90:5: 90:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:91:1: 91:2
    }

    bb4: {
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:91:2: 91:2
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:91:1: 91:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:85:1: 91:2
    }
}

fn move_after_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:93:22: 93:22
    let _1: B;                           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:94:9: 94:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:94:20: 94:31
    let mut _3: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:94:36: 94:47
    let _4: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:95:5: 95:14
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:95:10: 95:13
    let _6: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:96:5: 96:14
    let mut _7: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:96:10: 96:13
    let mut _8: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:97:1: 97:2
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:94:9: 94:10
    }

    bb0: {
        _8 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:94:9: 94:10
        _2 = Box::<isize>::new(const 1_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:94:20: 94:31
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:94:20: 94:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Box::<isize>::new(const 2_isize) -> [return: bb2, unwind: bb5]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:94:36: 94:47
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:94:36: 94:44
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const true;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:94:13: 94:49
        _1 = B { a: move _2, b: move _3 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:94:13: 94:49
        _5 = move (_1.0: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:95:10: 95:13
        _4 = std::mem::drop::<Box<isize>>(move _5) -> [return: bb3, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:95:5: 95:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:95:5: 95:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = const false;                // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:96:10: 96:13
        _7 = move (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:96:10: 96:13
        _6 = std::mem::drop::<Box<isize>>(move _7) -> [return: bb4, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:96:5: 96:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:96:5: 96:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:97:1: 97:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:97:2: 97:2
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:94:48: 94:49
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:93:1: 97:2
    }

    bb7 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb6; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:97:1: 97:2
    }

    bb8 (cleanup): {
        switchInt(_8) -> [0: bb6, otherwise: bb7]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:97:1: 97:2
    }
}

fn move_after_fu_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:99:25: 99:25
    let _1: B;                           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:100:9: 100:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:100:20: 100:31
    let mut _3: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:100:36: 100:47
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:101:20: 101:31
    let _6: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:102:5: 102:14
    let mut _7: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:102:10: 102:13
    let mut _8: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:103:1: 103:2
    let mut _9: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:103:1: 103:2
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:100:9: 100:10
        let _4: B;                       // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:101:9: 101:10
        scope 2 {
            debug y => _4;               // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:101:9: 101:10
        }
    }

    bb0: {
        _9 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:100:9: 100:10
        _8 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:100:9: 100:10
        _2 = Box::<isize>::new(const 1_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:100:20: 100:31
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:100:20: 100:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Box::<isize>::new(const 2_isize) -> [return: bb2, unwind: bb7]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:100:36: 100:47
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:100:36: 100:44
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const true;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:100:13: 100:49
        _9 = const true;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:100:13: 100:49
        _1 = B { a: move _2, b: move _3 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:100:13: 100:49
        _5 = Box::<isize>::new(const 3_isize) -> [return: bb3, unwind: bb12]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:101:20: 101:31
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:101:20: 101:28
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = const false;                // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:101:13: 101:39
        _4 = B { a: move _5, b: move (_1.1: std::boxed::Box<isize>) }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:101:13: 101:39
        _8 = const false;                // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:102:10: 102:13
        _7 = move (_1.0: std::boxed::Box<isize>); // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:102:10: 102:13
        _6 = std::mem::drop::<Box<isize>>(move _7) -> [return: bb4, unwind: bb6]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:102:5: 102:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:102:5: 102:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_4) -> [return: bb5, unwind: bb12]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:103:1: 103:2
    }

    bb5: {
        _8 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:103:1: 103:2
        _9 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:103:1: 103:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:103:2: 103:2
    }

    bb6 (cleanup): {
        drop(_4) -> bb12;                // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:103:1: 103:2
    }

    bb7 (cleanup): {
        drop(_2) -> bb8;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:100:48: 100:49
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:99:1: 103:2
    }

    bb9 (cleanup): {
        switchInt(_9) -> [0: bb8, otherwise: bb10]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:103:1: 103:2
    }

    bb10 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb8; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:103:1: 103:2
    }

    bb11 (cleanup): {
        drop((_1.0: std::boxed::Box<isize>)) -> bb9; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:103:1: 103:2
    }

    bb12 (cleanup): {
        switchInt(_8) -> [0: bb9, otherwise: bb11]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:103:1: 103:2
    }
}

fn fu_move_after_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:105:25: 105:25
    let _1: B;                           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:106:9: 106:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:106:20: 106:31
    let mut _3: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:106:36: 106:47
    let _4: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:107:5: 107:14
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:107:10: 107:13
    let mut _7: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:108:20: 108:31
    let _8: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:109:5: 109:14
    let mut _9: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:109:10: 109:13
    let mut _10: bool;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:110:1: 110:2
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:106:9: 106:10
        let _6: B;                       // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:108:9: 108:10
        scope 2 {
            debug z => _6;               // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:108:9: 108:10
        }
    }

    bb0: {
        _10 = const false;               // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:106:9: 106:10
        _2 = Box::<isize>::new(const 1_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:106:20: 106:31
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:106:20: 106:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Box::<isize>::new(const 2_isize) -> [return: bb2, unwind: bb7]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:106:36: 106:47
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:106:36: 106:44
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = const true;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:106:13: 106:49
        _1 = B { a: move _2, b: move _3 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:106:13: 106:49
        _5 = move (_1.0: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:107:10: 107:13
        _4 = std::mem::drop::<Box<isize>>(move _5) -> [return: bb3, unwind: bb11]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:107:5: 107:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:107:5: 107:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = Box::<isize>::new(const 3_isize) -> [return: bb4, unwind: bb11]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:108:20: 108:31
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:108:20: 108:28
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = const false;               // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:108:13: 108:39
        _6 = B { a: move _7, b: move (_1.1: std::boxed::Box<isize>) }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:108:13: 108:39
        _9 = move (_6.1: std::boxed::Box<isize>); // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:109:10: 109:13
        _8 = std::mem::drop::<Box<isize>>(move _9) -> [return: bb5, unwind: bb6]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:109:5: 109:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:109:5: 109:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb5: {
        drop((_6.0: std::boxed::Box<isize>)) -> [return: bb9, unwind: bb11]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:110:1: 110:2
    }

    bb6 (cleanup): {
        drop((_6.0: std::boxed::Box<isize>)) -> bb11; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:110:1: 110:2
    }

    bb7 (cleanup): {
        drop(_2) -> bb8;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:106:48: 106:49
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:105:1: 110:2
    }

    bb9: {
        _10 = const false;               // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:110:1: 110:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:110:2: 110:2
    }

    bb10 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb8; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:110:1: 110:2
    }

    bb11 (cleanup): {
        switchInt(_10) -> [0: bb8, otherwise: bb10]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:110:1: 110:2
    }
}

fn fu_move_after_fu_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:112:28: 112:28
    let _1: B;                           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:113:9: 113:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:113:20: 113:31
    let mut _3: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:113:36: 113:47
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:114:21: 114:32
    let mut _7: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:115:21: 115:32
    let mut _8: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:116:1: 116:2
    let mut _9: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:116:1: 116:2
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:113:9: 113:10
        let _4: B;                       // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:114:9: 114:11
        scope 2 {
            debug _y => _4;              // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:114:9: 114:11
            let _6: B;                   // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:115:9: 115:11
            scope 3 {
                debug _z => _6;          // in scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:115:9: 115:11
            }
        }
    }

    bb0: {
        _9 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:113:9: 113:10
        _8 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:113:9: 113:10
        _2 = Box::<isize>::new(const 1_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:113:20: 113:31
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:113:20: 113:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Box::<isize>::new(const 2_isize) -> [return: bb2, unwind: bb8]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:113:36: 113:47
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:113:36: 113:44
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const true;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:113:13: 113:49
        _9 = const true;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:113:13: 113:49
        _1 = B { a: move _2, b: move _3 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:113:13: 113:49
        _5 = Box::<isize>::new(const 3_isize) -> [return: bb3, unwind: bb13]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:114:21: 114:32
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:114:21: 114:29
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = const false;                // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:114:14: 114:40
        _4 = B { a: move (_1.0: std::boxed::Box<isize>), b: move _5 }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:114:14: 114:40
        _7 = Box::<isize>::new(const 4_isize) -> [return: bb4, unwind: bb7]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:115:21: 115:32
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:115:21: 115:29
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = const false;                // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:115:14: 115:40
        _6 = B { a: move _7, b: move (_1.1: std::boxed::Box<isize>) }; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:115:14: 115:40
        drop(_6) -> [return: bb5, unwind: bb7]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:116:1: 116:2
    }

    bb5: {
        drop(_4) -> [return: bb6, unwind: bb13]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:116:1: 116:2
    }

    bb6: {
        _8 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:116:1: 116:2
        _9 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:116:1: 116:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:116:2: 116:2
    }

    bb7 (cleanup): {
        drop(_4) -> bb13;                // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:116:1: 116:2
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:113:48: 113:49
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:112:1: 116:2
    }

    bb10 (cleanup): {
        switchInt(_8) -> [0: bb9, otherwise: bb11]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:116:1: 116:2
    }

    bb11 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb9; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:116:1: 116:2
    }

    bb12 (cleanup): {
        drop((_1.0: std::boxed::Box<isize>)) -> bb10; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:116:1: 116:2
    }

    bb13 (cleanup): {
        switchInt(_9) -> [0: bb10, otherwise: bb12]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:116:1: 116:2
    }
}

fn copy_after_assign_after_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:118:35: 118:35
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:119:9: 119:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:119:30: 119:41
    let _3: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:120:5: 120:14
    let mut _4: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:120:10: 120:13
    let mut _5: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:121:9: 121:35
    let mut _6: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:121:22: 121:33
    let _7: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:122:5: 122:15
    let mut _8: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:122:10: 122:14
    let mut _9: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:119:9: 119:14
    let mut _10: bool;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:123:1: 123:2
    let mut _11: *const isize;           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:119:9: 119:14
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:119:9: 119:14
    }

    bb0: {
        _10 = const false;               // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:119:9: 119:14
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:119:30: 119:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:119:30: 119:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = const true;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:119:17: 119:43
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:119:17: 119:43
        _10 = const false;               // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:120:10: 120:13
        _4 = move (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:120:10: 120:13
        _3 = std::mem::drop::<Box<isize>>(move _4) -> [return: bb2, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:120:5: 120:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:120:5: 120:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = Box::<isize>::new(const 4_isize) -> [return: bb3, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:121:22: 121:33
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:121:22: 121:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = A { a: const 3_isize, b: move _6 }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:121:9: 121:35
        _10 = const true;                // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:121:5: 121:6
        _1 = move _5;                    // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:121:5: 121:6
        _9 = deref_copy (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:122:10: 122:14
        _11 = (((_9.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:122:10: 122:14
        _8 = (*_11);                     // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:122:10: 122:14
        _7 = std::mem::drop::<isize>(move _8) -> [return: bb4, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:122:5: 122:15
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:122:5: 122:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:123:1: 123:2
    }

    bb5: {
        _10 = const false;               // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:123:1: 123:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:123:2: 123:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:118:1: 123:2
    }

    bb7 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb6; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:123:1: 123:2
    }

    bb8 (cleanup): {
        switchInt(_10) -> [0: bb6, otherwise: bb7]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:123:1: 123:2
    }
}

fn copy_after_assign_after_fu_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:125:38: 125:38
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:126:9: 126:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:126:30: 126:41
    let mut _4: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:128:9: 128:35
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:128:22: 128:33
    let _6: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:129:5: 129:15
    let mut _7: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:129:10: 129:14
    let mut _8: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:126:9: 126:14
    let mut _9: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:130:1: 130:2
    let mut _10: *const isize;           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:126:9: 126:14
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:126:9: 126:14
        let _3: A;                       // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:127:9: 127:11
        scope 2 {
            debug _y => _3;              // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:127:9: 127:11
        }
    }

    bb0: {
        _9 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:126:9: 126:14
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:126:30: 126:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:126:30: 126:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = const true;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:126:17: 126:43
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:126:17: 126:43
        _9 = const false;                // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:127:14: 127:30
        _3 = A { a: const 3_isize, b: move (_1.1: std::boxed::Box<isize>) }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:127:14: 127:30
        _5 = Box::<isize>::new(const 4_isize) -> [return: bb2, unwind: bb6]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:128:22: 128:33
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:128:22: 128:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = A { a: const 3_isize, b: move _5 }; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:128:9: 128:35
        _9 = const true;                 // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:128:5: 128:6
        _1 = move _4;                    // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:128:5: 128:6
        _8 = deref_copy (_1.1: std::boxed::Box<isize>); // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:129:10: 129:14
        _10 = (((_8.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:129:10: 129:14
        _7 = (*_10);                     // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:129:10: 129:14
        _6 = std::mem::drop::<isize>(move _7) -> [return: bb3, unwind: bb6]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:129:5: 129:15
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:129:5: 129:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_3) -> [return: bb4, unwind: bb9]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:130:1: 130:2
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:130:1: 130:2
    }

    bb5: {
        _9 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:130:1: 130:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:130:2: 130:2
    }

    bb6 (cleanup): {
        drop(_3) -> bb9;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:130:1: 130:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:125:1: 130:2
    }

    bb8 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb7; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:130:1: 130:2
    }

    bb9 (cleanup): {
        switchInt(_9) -> [0: bb7, otherwise: bb8]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:130:1: 130:2
    }
}

fn copy_after_field_assign_after_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:132:41: 132:41
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:133:9: 133:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:133:30: 133:41
    let _3: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:134:5: 134:14
    let mut _4: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:134:10: 134:13
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:135:11: 135:22
    let _6: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:136:5: 136:15
    let mut _7: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:136:10: 136:14
    let mut _8: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:133:9: 133:14
    let mut _9: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:137:1: 137:2
    let mut _10: *const isize;           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:133:9: 133:14
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:133:9: 133:14
    }

    bb0: {
        _9 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:133:9: 133:14
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:133:30: 133:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:133:30: 133:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = const true;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:133:17: 133:43
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:133:17: 133:43
        _9 = const false;                // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:134:10: 134:13
        _4 = move (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:134:10: 134:13
        _3 = std::mem::drop::<Box<isize>>(move _4) -> [return: bb2, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:134:5: 134:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:134:5: 134:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Box::<isize>::new(const 3_isize) -> [return: bb6, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:135:11: 135:22
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:135:11: 135:19
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:137:1: 137:2
    }

    bb4: {
        _9 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:137:1: 137:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:137:2: 137:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:132:1: 137:2
    }

    bb6: {
        _9 = const true;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:135:5: 135:8
        (_1.1: std::boxed::Box<isize>) = move _5; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:135:5: 135:8
        _8 = deref_copy (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:136:10: 136:14
        _10 = (((_8.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:136:10: 136:14
        _7 = (*_10);                     // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:136:10: 136:14
        _6 = std::mem::drop::<isize>(move _7) -> [return: bb3, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:136:5: 136:15
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:136:5: 136:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb7 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb5; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:137:1: 137:2
    }

    bb8 (cleanup): {
        switchInt(_9) -> [0: bb5, otherwise: bb7]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:137:1: 137:2
    }
}

fn copy_after_field_assign_after_fu_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:139:44: 139:44
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:140:9: 140:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:140:30: 140:41
    let mut _4: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:142:11: 142:22
    let _5: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:143:5: 143:15
    let mut _6: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:143:10: 143:14
    let mut _7: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:140:9: 140:14
    let mut _8: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:144:1: 144:2
    let mut _9: *const isize;            // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:140:9: 140:14
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:140:9: 140:14
        let _3: A;                       // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:141:9: 141:11
        scope 2 {
            debug _y => _3;              // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:141:9: 141:11
        }
    }

    bb0: {
        _8 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:140:9: 140:14
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:140:30: 140:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:140:30: 140:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = const true;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:140:17: 140:43
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:140:17: 140:43
        _8 = const false;                // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:141:14: 141:30
        _3 = A { a: const 3_isize, b: move (_1.1: std::boxed::Box<isize>) }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:141:14: 141:30
        _4 = Box::<isize>::new(const 3_isize) -> [return: bb2, unwind: bb6]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:142:11: 142:22
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:142:11: 142:19
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const true;                 // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:142:5: 142:8
        (_1.1: std::boxed::Box<isize>) = move _4; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:142:5: 142:8
        _7 = deref_copy (_1.1: std::boxed::Box<isize>); // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:143:10: 143:14
        _9 = (((_7.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:143:10: 143:14
        _6 = (*_9);                      // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:143:10: 143:14
        _5 = std::mem::drop::<isize>(move _6) -> [return: bb3, unwind: bb6]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:143:5: 143:15
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:143:5: 143:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_3) -> [return: bb4, unwind: bb9]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:144:1: 144:2
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:144:1: 144:2
    }

    bb5: {
        _8 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:144:1: 144:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:144:2: 144:2
    }

    bb6 (cleanup): {
        drop(_3) -> bb9;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:144:1: 144:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:139:1: 144:2
    }

    bb8 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb7; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:144:1: 144:2
    }

    bb9 (cleanup): {
        switchInt(_8) -> [0: bb7, otherwise: bb8]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:144:1: 144:2
    }
}

fn borrow_after_assign_after_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:146:37: 146:37
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:147:9: 147:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:147:30: 147:41
    let _3: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:148:5: 148:14
    let mut _4: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:148:10: 148:13
    let mut _5: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:149:9: 149:35
    let mut _6: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:149:22: 149:33
    let _8: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:151:5: 151:14
    let mut _9: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:151:10: 151:13
    let mut _10: std::boxed::Box<isize>; // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:150:9: 150:10
    let mut _11: bool;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:152:1: 152:2
    let mut _12: *const isize;           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:150:9: 150:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:147:9: 147:14
        let _7: &std::boxed::Box<isize>; // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:150:9: 150:10
        scope 2 {
            debug p => _7;               // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:150:9: 150:10
        }
    }

    bb0: {
        _11 = const false;               // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:147:9: 147:14
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:147:30: 147:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:147:30: 147:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = const true;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:147:17: 147:43
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:147:17: 147:43
        _11 = const false;               // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:148:10: 148:13
        _4 = move (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:148:10: 148:13
        _3 = std::mem::drop::<Box<isize>>(move _4) -> [return: bb2, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:148:5: 148:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:148:5: 148:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = Box::<isize>::new(const 4_isize) -> [return: bb3, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:149:22: 149:33
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:149:22: 149:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = A { a: const 3_isize, b: move _6 }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:149:9: 149:35
        _11 = const true;                // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:149:5: 149:6
        _1 = move _5;                    // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:149:5: 149:6
        _7 = &(_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:150:13: 150:17
        _10 = deref_copy (*_7);          // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:151:10: 151:13
        _12 = (((_10.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:151:10: 151:13
        _9 = (*_12);                     // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:151:10: 151:13
        _8 = std::mem::drop::<isize>(move _9) -> [return: bb4, unwind: bb8]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:151:5: 151:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:151:5: 151:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:152:1: 152:2
    }

    bb5: {
        _11 = const false;               // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:152:1: 152:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:152:2: 152:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:146:1: 152:2
    }

    bb7 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb6; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:152:1: 152:2
    }

    bb8 (cleanup): {
        switchInt(_11) -> [0: bb6, otherwise: bb7]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:152:1: 152:2
    }
}

fn borrow_after_assign_after_fu_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:154:40: 154:40
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:155:9: 155:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:155:30: 155:41
    let mut _4: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:157:9: 157:35
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:157:22: 157:33
    let _7: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:159:5: 159:14
    let mut _8: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:159:10: 159:13
    let mut _9: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:158:9: 158:10
    let mut _10: bool;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:160:1: 160:2
    let mut _11: *const isize;           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:158:9: 158:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:155:9: 155:14
        let _3: A;                       // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:156:9: 156:11
        scope 2 {
            debug _y => _3;              // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:156:9: 156:11
            let _6: &std::boxed::Box<isize>; // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:158:9: 158:10
            scope 3 {
                debug p => _6;           // in scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:158:9: 158:10
            }
        }
    }

    bb0: {
        _10 = const false;               // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:155:9: 155:14
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:155:30: 155:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:155:30: 155:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = const true;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:155:17: 155:43
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:155:17: 155:43
        _10 = const false;               // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:156:14: 156:30
        _3 = A { a: const 3_isize, b: move (_1.1: std::boxed::Box<isize>) }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:156:14: 156:30
        _5 = Box::<isize>::new(const 4_isize) -> [return: bb2, unwind: bb6]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:157:22: 157:33
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:157:22: 157:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = A { a: const 3_isize, b: move _5 }; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:157:9: 157:35
        _10 = const true;                // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:157:5: 157:6
        _1 = move _4;                    // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:157:5: 157:6
        _6 = &(_1.1: std::boxed::Box<isize>); // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:158:13: 158:17
        _9 = deref_copy (*_6);           // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:159:10: 159:13
        _11 = (((_9.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:159:10: 159:13
        _8 = (*_11);                     // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:159:10: 159:13
        _7 = std::mem::drop::<isize>(move _8) -> [return: bb3, unwind: bb6]; // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:159:5: 159:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:159:5: 159:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_3) -> [return: bb4, unwind: bb9]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:160:1: 160:2
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:160:1: 160:2
    }

    bb5: {
        _10 = const false;               // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:160:1: 160:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:160:2: 160:2
    }

    bb6 (cleanup): {
        drop(_3) -> bb9;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:160:1: 160:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:154:1: 160:2
    }

    bb8 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb7; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:160:1: 160:2
    }

    bb9 (cleanup): {
        switchInt(_10) -> [0: bb7, otherwise: bb8]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:160:1: 160:2
    }
}

fn borrow_after_field_assign_after_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:162:43: 162:43
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:163:9: 163:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:163:30: 163:41
    let _3: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:164:5: 164:14
    let mut _4: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:164:10: 164:13
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:165:11: 165:22
    let _7: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:167:5: 167:14
    let mut _8: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:167:10: 167:13
    let mut _9: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:166:9: 166:10
    let mut _10: bool;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:168:1: 168:2
    let mut _11: *const isize;           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:166:9: 166:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:163:9: 163:14
        let _6: &std::boxed::Box<isize>; // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:166:9: 166:10
        scope 2 {
            debug p => _6;               // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:166:9: 166:10
        }
    }

    bb0: {
        _10 = const false;               // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:163:9: 163:14
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:163:30: 163:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:163:30: 163:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = const true;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:163:17: 163:43
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:163:17: 163:43
        _10 = const false;               // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:164:10: 164:13
        _4 = move (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:164:10: 164:13
        _3 = std::mem::drop::<Box<isize>>(move _4) -> [return: bb2, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:164:5: 164:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:164:5: 164:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Box::<isize>::new(const 3_isize) -> [return: bb6, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:165:11: 165:22
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:165:11: 165:19
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:168:1: 168:2
    }

    bb4: {
        _10 = const false;               // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:168:1: 168:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:168:2: 168:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:162:1: 168:2
    }

    bb6: {
        _10 = const true;                // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:165:5: 165:8
        (_1.1: std::boxed::Box<isize>) = move _5; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:165:5: 165:8
        _6 = &(_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:166:13: 166:17
        _9 = deref_copy (*_6);           // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:167:10: 167:13
        _11 = (((_9.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:167:10: 167:13
        _8 = (*_11);                     // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:167:10: 167:13
        _7 = std::mem::drop::<isize>(move _8) -> [return: bb3, unwind: bb8]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:167:5: 167:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:167:5: 167:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb7 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb5; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:168:1: 168:2
    }

    bb8 (cleanup): {
        switchInt(_10) -> [0: bb5, otherwise: bb7]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:168:1: 168:2
    }
}

fn borrow_after_field_assign_after_fu_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:170:46: 170:46
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:171:9: 171:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:171:30: 171:41
    let mut _4: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:173:11: 173:22
    let _6: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:175:5: 175:14
    let mut _7: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:175:10: 175:13
    let mut _8: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:174:9: 174:10
    let mut _9: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:176:1: 176:2
    let mut _10: *const isize;           // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:174:9: 174:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:171:9: 171:14
        let _3: A;                       // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:172:9: 172:11
        scope 2 {
            debug _y => _3;              // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:172:9: 172:11
            let _5: &std::boxed::Box<isize>; // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:174:9: 174:10
            scope 3 {
                debug p => _5;           // in scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:174:9: 174:10
            }
        }
    }

    bb0: {
        _9 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:171:9: 171:14
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:171:30: 171:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:171:30: 171:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = const true;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:171:17: 171:43
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:171:17: 171:43
        _9 = const false;                // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:172:14: 172:30
        _3 = A { a: const 3_isize, b: move (_1.1: std::boxed::Box<isize>) }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:172:14: 172:30
        _4 = Box::<isize>::new(const 3_isize) -> [return: bb2, unwind: bb6]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:173:11: 173:22
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:173:11: 173:19
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = const true;                 // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:173:5: 173:8
        (_1.1: std::boxed::Box<isize>) = move _4; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:173:5: 173:8
        _5 = &(_1.1: std::boxed::Box<isize>); // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:174:13: 174:17
        _8 = deref_copy (*_5);           // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:175:10: 175:13
        _10 = (((_8.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:175:10: 175:13
        _7 = (*_10);                     // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:175:10: 175:13
        _6 = std::mem::drop::<isize>(move _7) -> [return: bb3, unwind: bb6]; // scope 3 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:175:5: 175:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:175:5: 175:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_3) -> [return: bb4, unwind: bb9]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:176:1: 176:2
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:176:1: 176:2
    }

    bb5: {
        _9 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:176:1: 176:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:176:2: 176:2
    }

    bb6 (cleanup): {
        drop(_3) -> bb9;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:176:1: 176:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:170:1: 176:2
    }

    bb8 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb7; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:176:1: 176:2
    }

    bb9 (cleanup): {
        switchInt(_9) -> [0: bb7, otherwise: bb8]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:176:1: 176:2
    }
}

fn move_after_assign_after_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:178:35: 178:35
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:179:9: 179:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:179:30: 179:41
    let mut _4: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:181:9: 181:35
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:181:22: 181:33
    let _6: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:182:5: 182:14
    let mut _7: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:182:10: 182:13
    let mut _8: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:183:1: 183:2
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:179:9: 179:14
        let _3: std::boxed::Box<isize>;  // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:180:9: 180:11
        scope 2 {
            debug _y => _3;              // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:180:9: 180:11
        }
    }

    bb0: {
        _8 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:179:9: 179:14
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:179:30: 179:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:179:30: 179:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = const true;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:179:17: 179:43
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:179:17: 179:43
        _8 = const false;                // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:180:14: 180:17
        _3 = move (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:180:14: 180:17
        _5 = Box::<isize>::new(const 4_isize) -> [return: bb2, unwind: bb5]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:181:22: 181:33
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:181:22: 181:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = A { a: const 3_isize, b: move _5 }; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:181:9: 181:35
        _8 = const true;                 // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:181:5: 181:6
        _1 = move _4;                    // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:181:5: 181:6
        _8 = const false;                // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:182:10: 182:13
        _7 = move (_1.1: std::boxed::Box<isize>); // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:182:10: 182:13
        _6 = std::mem::drop::<Box<isize>>(move _7) -> [return: bb3, unwind: bb5]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:182:5: 182:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:182:5: 182:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_3) -> [return: bb4, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:183:1: 183:2
    }

    bb4: {
        _8 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:183:1: 183:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:183:2: 183:2
    }

    bb5 (cleanup): {
        drop(_3) -> bb8;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:183:1: 183:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:178:1: 183:2
    }

    bb7 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb6; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:183:1: 183:2
    }

    bb8 (cleanup): {
        switchInt(_8) -> [0: bb6, otherwise: bb7]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:183:1: 183:2
    }
}

fn move_after_assign_after_fu_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:185:38: 185:38
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:186:9: 186:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:186:30: 186:41
    let mut _4: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:188:9: 188:35
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:188:22: 188:33
    let _6: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:189:5: 189:14
    let mut _7: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:189:10: 189:13
    let mut _8: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:190:1: 190:2
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:186:9: 186:14
        let _3: A;                       // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:187:9: 187:11
        scope 2 {
            debug _y => _3;              // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:187:9: 187:11
        }
    }

    bb0: {
        _8 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:186:9: 186:14
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:186:30: 186:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:186:30: 186:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = const true;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:186:17: 186:43
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:186:17: 186:43
        _8 = const false;                // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:187:14: 187:30
        _3 = A { a: const 3_isize, b: move (_1.1: std::boxed::Box<isize>) }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:187:14: 187:30
        _5 = Box::<isize>::new(const 4_isize) -> [return: bb2, unwind: bb5]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:188:22: 188:33
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:188:22: 188:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = A { a: const 3_isize, b: move _5 }; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:188:9: 188:35
        _8 = const true;                 // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:188:5: 188:6
        _1 = move _4;                    // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:188:5: 188:6
        _8 = const false;                // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:189:10: 189:13
        _7 = move (_1.1: std::boxed::Box<isize>); // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:189:10: 189:13
        _6 = std::mem::drop::<Box<isize>>(move _7) -> [return: bb3, unwind: bb5]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:189:5: 189:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:189:5: 189:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_3) -> [return: bb4, unwind: bb8]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:190:1: 190:2
    }

    bb4: {
        _8 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:190:1: 190:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:190:2: 190:2
    }

    bb5 (cleanup): {
        drop(_3) -> bb8;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:190:1: 190:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:185:1: 190:2
    }

    bb7 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> bb6; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:190:1: 190:2
    }

    bb8 (cleanup): {
        switchInt(_8) -> [0: bb6, otherwise: bb7]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:190:1: 190:2
    }
}

fn move_after_field_assign_after_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:192:41: 192:41
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:193:9: 193:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:193:30: 193:41
    let _3: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:194:5: 194:14
    let mut _4: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:194:10: 194:13
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:195:11: 195:22
    let _6: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:196:5: 196:14
    let mut _7: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:196:10: 196:13
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:193:9: 193:14
    }

    bb0: {
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:193:30: 193:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:193:30: 193:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:193:17: 193:43
        _4 = move (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:194:10: 194:13
        _3 = std::mem::drop::<Box<isize>>(move _4) -> bb2; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:194:5: 194:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:194:5: 194:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Box::<isize>::new(const 3_isize) -> bb4; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:195:11: 195:22
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:195:11: 195:19
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:197:2: 197:2
    }

    bb4: {
        (_1.1: std::boxed::Box<isize>) = move _5; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:195:5: 195:8
        _7 = move (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:196:10: 196:13
        _6 = std::mem::drop::<Box<isize>>(move _7) -> bb3; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:196:5: 196:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:196:5: 196:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }
}

fn move_after_field_assign_after_fu_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:199:44: 199:44
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:200:9: 200:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:200:30: 200:41
    let mut _4: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:202:11: 202:22
    let _5: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:203:5: 203:14
    let mut _6: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:203:10: 203:13
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:200:9: 200:14
        let _3: A;                       // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:201:9: 201:11
        scope 2 {
            debug _y => _3;              // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:201:9: 201:11
        }
    }

    bb0: {
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:200:30: 200:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:200:30: 200:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:200:17: 200:43
        _3 = A { a: const 3_isize, b: move (_1.1: std::boxed::Box<isize>) }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:201:14: 201:30
        _4 = Box::<isize>::new(const 3_isize) -> [return: bb2, unwind: bb5]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:202:11: 202:22
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:202:11: 202:19
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        (_1.1: std::boxed::Box<isize>) = move _4; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:202:5: 202:8
        _6 = move (_1.1: std::boxed::Box<isize>); // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:203:10: 203:13
        _5 = std::mem::drop::<Box<isize>>(move _6) -> [return: bb3, unwind: bb5]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:203:5: 203:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:203:5: 203:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_3) -> bb4;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:204:1: 204:2
    }

    bb4: {
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:204:2: 204:2
    }

    bb5 (cleanup): {
        drop(_3) -> bb6;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:204:1: 204:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:199:1: 204:2
    }
}

fn copy_after_assign_after_uninit() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:206:37: 206:37
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:207:9: 207:14
    let mut _2: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:208:9: 208:35
    let mut _3: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:208:22: 208:33
    let _4: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:209:5: 209:14
    let mut _5: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:209:10: 209:13
    let mut _6: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:210:1: 210:2
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:207:9: 207:14
    }

    bb0: {
        _6 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:207:9: 207:14
        _3 = Box::<isize>::new(const 2_isize) -> [return: bb1, unwind: bb6]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:208:22: 208:33
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:208:22: 208:30
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = A { a: const 1_isize, b: move _3 }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:208:9: 208:35
        _6 = const true;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:208:5: 208:6
        _1 = move _2;                    // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:208:5: 208:6
        _5 = (_1.0: isize);              // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:209:10: 209:13
        _4 = std::mem::drop::<isize>(move _5) -> [return: bb2, unwind: bb6]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:209:5: 209:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:209:5: 209:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:210:1: 210:2
    }

    bb3: {
        _6 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:210:1: 210:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:210:2: 210:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:206:1: 210:2
    }

    bb5 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:210:1: 210:2
    }

    bb6 (cleanup): {
        switchInt(_6) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:210:1: 210:2
    }
}

fn borrow_after_assign_after_uninit() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:212:39: 212:39
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:213:9: 213:14
    let mut _2: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:214:9: 214:35
    let mut _3: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:214:22: 214:33
    let _5: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:216:5: 216:13
    let mut _6: isize;                   // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:216:10: 216:12
    let mut _7: bool;                    // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:217:1: 217:2
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:213:9: 213:14
        let _4: &isize;                  // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:215:9: 215:10
        scope 2 {
            debug p => _4;               // in scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:215:9: 215:10
        }
    }

    bb0: {
        _7 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:213:9: 213:14
        _3 = Box::<isize>::new(const 2_isize) -> [return: bb1, unwind: bb6]; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:214:22: 214:33
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:214:22: 214:30
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = A { a: const 1_isize, b: move _3 }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:214:9: 214:35
        _7 = const true;                 // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:214:5: 214:6
        _1 = move _2;                    // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:214:5: 214:6
        _4 = &(_1.0: isize);             // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:215:13: 215:17
        _6 = (*_4);                      // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:216:10: 216:12
        _5 = std::mem::drop::<isize>(move _6) -> [return: bb2, unwind: bb6]; // scope 2 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:216:5: 216:13
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:216:5: 216:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:217:1: 217:2
    }

    bb3: {
        _7 = const false;                // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:217:1: 217:2
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:217:2: 217:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:212:1: 217:2
    }

    bb5 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:217:1: 217:2
    }

    bb6 (cleanup): {
        switchInt(_7) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:217:1: 217:2
    }
}

fn move_after_assign_after_uninit() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:219:37: 219:37
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:220:9: 220:14
    let mut _2: A;                       // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:221:9: 221:35
    let mut _3: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:221:22: 221:33
    let _4: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:222:5: 222:14
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:222:10: 222:13
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:220:9: 220:14
    }

    bb0: {
        _3 = Box::<isize>::new(const 2_isize) -> bb1; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:221:22: 221:33
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:221:22: 221:30
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = A { a: const 1_isize, b: move _3 }; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:221:9: 221:35
        _1 = move _2;                    // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:221:5: 221:6
        _5 = move (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:222:10: 222:13
        _4 = std::mem::drop::<Box<isize>>(move _5) -> bb2; // scope 1 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:222:5: 222:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:222:5: 222:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:223:2: 223:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:225:11: 225:11
    let _1: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:226:5: 226:22
    let _2: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:227:5: 227:25
    let _3: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:228:5: 228:25
    let _4: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:229:5: 229:28
    let _5: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:230:5: 230:22
    let _6: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:231:5: 231:25
    let _7: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:232:5: 232:25
    let _8: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:233:5: 233:28
    let _9: ();                          // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:235:5: 235:24
    let _10: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:236:5: 236:27
    let _11: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:237:5: 237:24
    let _12: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:238:5: 238:27
    let _13: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:239:5: 239:34
    let _14: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:241:5: 241:22
    let _15: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:242:5: 242:25
    let _16: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:243:5: 243:25
    let _17: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:244:5: 244:28
    let _18: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:246:5: 246:35
    let _19: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:247:5: 247:38
    let _20: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:248:5: 248:41
    let _21: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:249:5: 249:44
    let _22: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:251:5: 251:37
    let _23: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:252:5: 252:40
    let _24: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:253:5: 253:43
    let _25: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:254:5: 254:46
    let _26: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:256:5: 256:35
    let _27: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:257:5: 257:38
    let _28: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:258:5: 258:41
    let _29: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:259:5: 259:44
    let _30: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:261:5: 261:37
    let _31: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:262:5: 262:39
    let _32: ();                         // in scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:263:5: 263:37

    bb0: {
        _1 = move_after_copy() -> bb1;   // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:226:5: 226:22
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:226:5: 226:20
                                         // + literal: Const { ty: fn() {move_after_copy}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = move_after_fu_copy() -> bb2; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:227:5: 227:25
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:227:5: 227:23
                                         // + literal: Const { ty: fn() {move_after_fu_copy}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = fu_move_after_copy() -> bb3; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:228:5: 228:25
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:228:5: 228:23
                                         // + literal: Const { ty: fn() {fu_move_after_copy}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = fu_move_after_fu_copy() -> bb4; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:229:5: 229:28
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:229:5: 229:26
                                         // + literal: Const { ty: fn() {fu_move_after_fu_copy}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = copy_after_move() -> bb5;   // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:230:5: 230:22
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:230:5: 230:20
                                         // + literal: Const { ty: fn() {copy_after_move}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = copy_after_fu_move() -> bb6; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:231:5: 231:25
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:231:5: 231:23
                                         // + literal: Const { ty: fn() {copy_after_fu_move}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = fu_copy_after_move() -> bb7; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:232:5: 232:25
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:232:5: 232:23
                                         // + literal: Const { ty: fn() {fu_copy_after_move}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = fu_copy_after_fu_move() -> bb8; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:233:5: 233:28
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:233:5: 233:26
                                         // + literal: Const { ty: fn() {fu_copy_after_fu_move}, val: Value(<ZST>) }
    }

    bb8: {
        _9 = borrow_after_move() -> bb9; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:235:5: 235:24
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:235:5: 235:22
                                         // + literal: Const { ty: fn() {borrow_after_move}, val: Value(<ZST>) }
    }

    bb9: {
        _10 = borrow_after_fu_move() -> bb10; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:236:5: 236:27
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:236:5: 236:25
                                         // + literal: Const { ty: fn() {borrow_after_fu_move}, val: Value(<ZST>) }
    }

    bb10: {
        _11 = move_after_borrow() -> bb11; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:237:5: 237:24
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:237:5: 237:22
                                         // + literal: Const { ty: fn() {move_after_borrow}, val: Value(<ZST>) }
    }

    bb11: {
        _12 = fu_move_after_borrow() -> bb12; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:238:5: 238:27
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:238:5: 238:25
                                         // + literal: Const { ty: fn() {fu_move_after_borrow}, val: Value(<ZST>) }
    }

    bb12: {
        _13 = mut_borrow_after_mut_borrow() -> bb13; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:239:5: 239:34
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:239:5: 239:32
                                         // + literal: Const { ty: fn() {mut_borrow_after_mut_borrow}, val: Value(<ZST>) }
    }

    bb13: {
        _14 = move_after_move() -> bb14; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:241:5: 241:22
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:241:5: 241:20
                                         // + literal: Const { ty: fn() {move_after_move}, val: Value(<ZST>) }
    }

    bb14: {
        _15 = move_after_fu_move() -> bb15; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:242:5: 242:25
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:242:5: 242:23
                                         // + literal: Const { ty: fn() {move_after_fu_move}, val: Value(<ZST>) }
    }

    bb15: {
        _16 = fu_move_after_move() -> bb16; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:243:5: 243:25
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:243:5: 243:23
                                         // + literal: Const { ty: fn() {fu_move_after_move}, val: Value(<ZST>) }
    }

    bb16: {
        _17 = fu_move_after_fu_move() -> bb17; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:244:5: 244:28
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:244:5: 244:26
                                         // + literal: Const { ty: fn() {fu_move_after_fu_move}, val: Value(<ZST>) }
    }

    bb17: {
        _18 = copy_after_assign_after_move() -> bb18; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:246:5: 246:35
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:246:5: 246:33
                                         // + literal: Const { ty: fn() {copy_after_assign_after_move}, val: Value(<ZST>) }
    }

    bb18: {
        _19 = copy_after_assign_after_fu_move() -> bb19; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:247:5: 247:38
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:247:5: 247:36
                                         // + literal: Const { ty: fn() {copy_after_assign_after_fu_move}, val: Value(<ZST>) }
    }

    bb19: {
        _20 = copy_after_field_assign_after_move() -> bb20; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:248:5: 248:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:248:5: 248:39
                                         // + literal: Const { ty: fn() {copy_after_field_assign_after_move}, val: Value(<ZST>) }
    }

    bb20: {
        _21 = copy_after_field_assign_after_fu_move() -> bb21; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:249:5: 249:44
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:249:5: 249:42
                                         // + literal: Const { ty: fn() {copy_after_field_assign_after_fu_move}, val: Value(<ZST>) }
    }

    bb21: {
        _22 = borrow_after_assign_after_move() -> bb22; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:251:5: 251:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:251:5: 251:35
                                         // + literal: Const { ty: fn() {borrow_after_assign_after_move}, val: Value(<ZST>) }
    }

    bb22: {
        _23 = borrow_after_assign_after_fu_move() -> bb23; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:252:5: 252:40
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:252:5: 252:38
                                         // + literal: Const { ty: fn() {borrow_after_assign_after_fu_move}, val: Value(<ZST>) }
    }

    bb23: {
        _24 = borrow_after_field_assign_after_move() -> bb24; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:253:5: 253:43
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:253:5: 253:41
                                         // + literal: Const { ty: fn() {borrow_after_field_assign_after_move}, val: Value(<ZST>) }
    }

    bb24: {
        _25 = borrow_after_field_assign_after_fu_move() -> bb25; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:254:5: 254:46
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:254:5: 254:44
                                         // + literal: Const { ty: fn() {borrow_after_field_assign_after_fu_move}, val: Value(<ZST>) }
    }

    bb25: {
        _26 = move_after_assign_after_move() -> bb26; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:256:5: 256:35
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:256:5: 256:33
                                         // + literal: Const { ty: fn() {move_after_assign_after_move}, val: Value(<ZST>) }
    }

    bb26: {
        _27 = move_after_assign_after_fu_move() -> bb27; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:257:5: 257:38
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:257:5: 257:36
                                         // + literal: Const { ty: fn() {move_after_assign_after_fu_move}, val: Value(<ZST>) }
    }

    bb27: {
        _28 = move_after_field_assign_after_move() -> bb28; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:258:5: 258:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:258:5: 258:39
                                         // + literal: Const { ty: fn() {move_after_field_assign_after_move}, val: Value(<ZST>) }
    }

    bb28: {
        _29 = move_after_field_assign_after_fu_move() -> bb29; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:259:5: 259:44
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:259:5: 259:42
                                         // + literal: Const { ty: fn() {move_after_field_assign_after_fu_move}, val: Value(<ZST>) }
    }

    bb29: {
        _30 = copy_after_assign_after_uninit() -> bb30; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:261:5: 261:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:261:5: 261:35
                                         // + literal: Const { ty: fn() {copy_after_assign_after_uninit}, val: Value(<ZST>) }
    }

    bb30: {
        _31 = borrow_after_assign_after_uninit() -> bb31; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:262:5: 262:39
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:262:5: 262:37
                                         // + literal: Const { ty: fn() {borrow_after_assign_after_uninit}, val: Value(<ZST>) }
    }

    bb31: {
        _32 = move_after_assign_after_uninit() -> bb32; // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:263:5: 263:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-field-sensitivity-rpass.rs:263:5: 263:35
                                         // + literal: Const { ty: fn() {move_after_assign_after_uninit}, val: Value(<ZST>) }
    }

    bb32: {
        return;                          // scope 0 at ui/borrowck/borrowck-field-sensitivity-rpass.rs:264:2: 264:2
    }
}
