// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &mut isize, _2: &mut isize) -> () {
    debug t0 => _1;                      // in scope 0 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:12:12: 12:18
    debug t1 => _2;                      // in scope 0 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:13:12: 13:18
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:13:35: 13:35
    let _3: &isize;                      // in scope 0 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:14:9: 14:10
    let _4: &isize;                      // in scope 0 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:14:21: 14:25
    let _7: &isize;                      // in scope 0 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:16:21: 16:26
    let _9: &isize;                      // in scope 0 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:17:21: 17:25
    let mut _10: &mut isize;             // in scope 0 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:15:9: 15:15
    scope 1 {
        debug p => _3;                   // in scope 1 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:14:9: 14:10
        let mut _5: &&mut isize;         // in scope 1 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:15:9: 15:15
        scope 2 {
            debug t2 => _5;              // in scope 2 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:15:9: 15:15
            let _6: &isize;              // in scope 2 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:16:9: 16:10
            scope 3 {
                debug q => _6;           // in scope 3 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:16:9: 16:10
                let _8: &isize;          // in scope 3 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:17:9: 17:10
                scope 4 {
                    debug r => _8;       // in scope 4 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:17:9: 17:10
                }
            }
        }
    }

    bb0: {
        _4 = &(*_1);                     // scope 0 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:14:21: 14:25
        _3 = _4;                         // scope 0 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:14:21: 14:25
        _5 = &_1;                        // scope 1 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:15:18: 15:21
        _10 = deref_copy (*_5);          // scope 2 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:16:21: 16:26
        _7 = &(*_10);                    // scope 2 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:16:21: 16:26
        _6 = _7;                         // scope 2 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:16:21: 16:26
        _9 = &(*_1);                     // scope 3 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:17:21: 17:25
        _8 = _9;                         // scope 3 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:17:21: 17:25
        return;                          // scope 0 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:18:2: 18:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:20:15: 20:15

    bb0: {
        return;                          // scope 0 at ui/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs:21:2: 21:2
    }
}
