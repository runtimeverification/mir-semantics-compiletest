// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn want_slice(_1: &[isize]) -> isize {
    debug v => _1;                       // in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:4:15: 4:16
    let mut _0: isize;                   // return place in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:5:9: 5:16
    let mut _2: std::slice::Iter<'_, isize>; // in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
    let mut _3: &[isize];                // in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
    let mut _5: std::option::Option<&isize>; // in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
    let mut _6: &mut std::slice::Iter<'_, isize>; // in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
    let mut _7: &mut std::slice::Iter<'_, isize>; // in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
    let mut _8: isize;                   // in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:5: 6:30
    let mut _10: isize;                  // in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:25: 6:27
    let mut _11: (isize, bool);          // in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:18: 6:27
    scope 1 {
        debug sum => _0;                 // in scope 1 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:5:9: 5:16
        let mut _4: std::slice::Iter<'_, isize>; // in scope 1 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
        scope 2 {
            debug iter => _4;            // in scope 2 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
            let _9: &isize;              // in scope 2 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:9: 6:10
            scope 3 {
                debug i => _9;           // in scope 3 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:9: 6:10
            }
        }
    }

    bb0: {
        _0 = const 0_isize;              // scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:5:19: 5:20
        _3 = _1;                         // scope 1 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
        _2 = <&[isize] as IntoIterator>::into_iter(move _3) -> bb1; // scope 1 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
                                         // + literal: Const { ty: fn(&[isize]) -> <&[isize] as IntoIterator>::IntoIter {<&[isize] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _2;                    // scope 1 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
        goto -> bb2;                     // scope 2 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:5: 6:30
    }

    bb2: {
        _7 = &mut _4;                    // scope 2 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
        _6 = &mut (*_7);                 // scope 2 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
        _5 = <std::slice::Iter<'_, isize> as Iterator>::next(move _6) -> bb3; // scope 2 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, isize>) -> Option<<std::slice::Iter<'_, isize> as Iterator>::Item> {<std::slice::Iter<'_, isize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = discriminant(_5);           // scope 2 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 2 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
    }

    bb4: {
        _9 = ((_5 as Some).0: &isize);   // scope 2 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:9: 6:10
        _10 = (*_9);                     // scope 3 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:25: 6:27
        _11 = CheckedAdd(_0, _10);       // scope 3 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:18: 6:27
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, move _10) -> bb7; // scope 3 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:18: 6:27
    }

    bb5: {
        unreachable;                     // scope 2 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:14: 6:15
    }

    bb6: {
        return;                          // scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:8:2: 8:2
    }

    bb7: {
        _0 = move (_11.0: isize);        // scope 3 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:18: 6:27
        goto -> bb2;                     // scope 2 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:6:5: 6:30
    }
}

fn has_mut_vec(_1: Vec<isize>) -> isize {
    debug v => _1;                       // in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:10:16: 10:17
    let mut _0: isize;                   // return place in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:10:35: 10:40
    let mut _2: &[isize];                // in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:11:16: 11:18
    let _3: &[isize];                    // in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:11:16: 11:18
    let mut _4: &std::vec::Vec<isize>;   // in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:11:16: 11:18
    let _5: &std::vec::Vec<isize>;       // in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:11:16: 11:18

    bb0: {
        _5 = &_1;                        // scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:11:16: 11:18
        _4 = _5;                         // scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:11:16: 11:18
        _3 = <Vec<isize> as Deref>::deref(move _4) -> [return: bb1, unwind: bb4]; // scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:11:16: 11:18
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:11:16: 11:18
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>) -> &'a <Vec<isize> as Deref>::Target {<Vec<isize> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _3;                         // scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:11:16: 11:18
        _0 = want_slice(move _2) -> [return: bb2, unwind: bb4]; // scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:11:5: 11:19
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:11:5: 11:15
                                         // + literal: Const { ty: for<'a> fn(&'a [isize]) -> isize {want_slice}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:12:1: 12:2
    }

    bb3: {
        return;                          // scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:12:2: 12:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:12:1: 12:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:10:1: 12:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:14:15: 14:15
    let mut _1: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: isize;                       // in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:15:16: 15:42
    let mut _4: std::vec::Vec<isize>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _5: std::boxed::Box<[isize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: std::boxed::Box<[isize; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: std::boxed::Box<[isize; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _12: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _13: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _27: *const [isize; 3];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }
    scope 2 {
        debug left_val => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _13;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _18: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 3 {
            debug kind => _18;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _7 = const 24_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = const 8_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = alloc::alloc::exchange_malloc(move _7, move _8) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = ShallowInitBox(move _9, [isize; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _27 = (((_10.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_27) = [const 1_isize, const 2_isize, const 3_isize]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _6 = move _10;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = move _6 as std::boxed::Box<[isize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _4 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _5) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[isize]>) -> Vec<isize> {slice::<impl [isize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = has_mut_vec(move _4) -> bb3; // scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:15:16: 15:42
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:15:16: 15:27
                                         // + literal: Const { ty: fn(Vec<isize>) -> isize {has_mut_vec}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _26 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _11 = _26;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _11);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_1.0: &isize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_1.1: &isize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = (*_12);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = const 6_isize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = Eq(move _16, move _17);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _14 = Not(move _15);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb5, otherwise: bb4]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<isize, isize>(move _20, move _21, move _23, move _25); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:16:2: 16:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:15:44: 15:45

    bb0: {
        _1 = const 6_isize;              // scope 0 at ui/borrowck/borrowck-mut-vec-as-imm-slice.rs:15:44: 15:45
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
