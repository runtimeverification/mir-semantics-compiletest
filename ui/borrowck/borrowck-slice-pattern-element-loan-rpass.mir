// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn mut_head_tail(_1: &mut [A]) -> Option<(&mut A, &mut [A])> {
    debug v => _1;                       // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:3:25: 3:26
    let mut _0: std::option::Option<(&mut A, &mut [A])>; // return place in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:3:44: 3:76
    let mut _2: usize;                   // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:8:9: 8:11
    let mut _3: usize;                   // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:8:9: 8:11
    let mut _4: bool;                    // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:8:9: 8:11
    let mut _5: usize;                   // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:5:9: 5:42
    let mut _6: usize;                   // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:5:9: 5:42
    let mut _7: bool;                    // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:5:9: 5:42
    let _8: &mut A;                      // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:5:10: 5:22
    let _9: &mut [A];                    // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:5:24: 5:36
    let mut _10: (&mut A, &mut [A]);     // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:6:18: 6:30
    let mut _11: &mut A;                 // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:6:19: 6:23
    let mut _12: &mut [A];               // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:6:25: 6:29
    scope 1 {
        debug head => _8;                // in scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:5:10: 5:22
        debug tail => _9;                // in scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:5:24: 5:36
    }

    bb0: {
        _5 = Len((*_1));                 // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:5:9: 5:42
        _6 = const 1_usize;              // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:5:9: 5:42
        _7 = Ge(move _5, move _6);       // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:5:9: 5:42
        switchInt(move _7) -> [0: bb1, otherwise: bb4]; // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:5:9: 5:42
    }

    bb1: {
        _2 = Len((*_1));                 // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:8:9: 8:11
        _3 = const 0_usize;              // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:8:9: 8:11
        _4 = Eq(move _2, move _3);       // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:8:9: 8:11
        switchInt(move _4) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:8:9: 8:11
    }

    bb2: {
        _0 = Option::<(&mut A, &mut [A])>::None; // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:8:15: 8:19
        goto -> bb5;                     // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:8:15: 8:19
    }

    bb3: {
        unreachable;                     // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:4:11: 4:13
    }

    bb4: {
        _8 = &mut (*_1)[0 of 1];         // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:5:10: 5:22
        _9 = &mut (*_1)[1:];             // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:5:24: 5:36
        _11 = &mut (*_8);                // scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:6:19: 6:23
        _12 = &mut (*_9);                // scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:6:25: 6:29
        _10 = (move _11, move _12);      // scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:6:18: 6:30
        _0 = Option::<(&mut A, &mut [A])>::Some(move _10); // scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:6:13: 6:31
        goto -> bb5;                     // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:7:9: 7:10
    }

    bb5: {
        return;                          // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:10:2: 10:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:12:11: 12:11
    let mut _1: [i32; 4];                // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:13:9: 13:14
    let mut _2: std::option::Option<(&mut i32, &mut [i32])>; // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:14:11: 14:32
    let mut _3: &mut [i32];              // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:14:25: 14:31
    let mut _4: &mut [i32; 4];           // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:14:25: 14:31
    let mut _5: &mut [i32; 4];           // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:14:25: 14:31
    let mut _6: isize;                   // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:15:9: 15:13
    let _9: ();                          // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:18:13: 18:24
    let mut _10: &mut [i32];             // in scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:18:13: 18:24
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:13:9: 13:14
        let _7: &mut i32;                // in scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:16:15: 16:16
        let _8: &mut [i32];              // in scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:16:17: 16:18
        scope 2 {
            debug h => _7;               // in scope 2 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:16:15: 16:16
            debug t => _8;               // in scope 2 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:16:17: 16:18
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]; // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:13:17: 13:26
        _5 = &mut _1;                    // scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:14:25: 14:31
        _4 = &mut (*_5);                 // scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:14:25: 14:31
        _3 = move _4 as &mut [i32] (Pointer(Unsize)); // scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:14:25: 14:31
        _2 = mut_head_tail::<i32>(move _3) -> bb1; // scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:14:11: 14:32
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:14:11: 14:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut [i32]) -> Option<(&'a mut i32, &'a mut [i32])> {mut_head_tail::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = discriminant(_2);           // scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:14:11: 14:32
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:14:5: 14:32
    }

    bb2: {
        _7 = move (((_2 as Some).0: (&mut i32, &mut [i32])).0: &mut i32); // scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:16:15: 16:16
        _8 = move (((_2 as Some).0: (&mut i32, &mut [i32])).1: &mut [i32]); // scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:16:17: 16:18
        (*_7) = const 1000_i32;          // scope 2 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:17:13: 17:22
        _10 = &mut (*_8);                // scope 2 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:18:13: 18:24
        _9 = core::slice::<impl [i32]>::reverse(move _10) -> bb4; // scope 2 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:18:13: 18:24
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:18:15: 18:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut [i32]) {core::slice::<impl [i32]>::reverse}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 1 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:14:11: 14:32
    }

    bb4: {
        return;                          // scope 0 at ui/borrowck/borrowck-slice-pattern-element-loan-rpass.rs:21:2: 21:2
    }
}
