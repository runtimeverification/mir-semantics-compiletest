// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn borrow(_1: &isize) -> () {
    debug _v => _1;                      // in scope 0 at ui/borrowck/borrowck-lend-args.rs:6:11: 6:13
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-lend-args.rs:6:23: 6:23

    bb0: {
        return;                          // scope 0 at ui/borrowck/borrowck-lend-args.rs:6:25: 6:25
    }
}

fn borrow_from_arg_imm_ref(_1: Box<isize>) -> () {
    debug v => _1;                       // in scope 0 at ui/borrowck/borrowck-lend-args.rs:8:28: 8:29
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-lend-args.rs:8:43: 8:43
    let _2: ();                          // in scope 0 at ui/borrowck/borrowck-lend-args.rs:9:5: 9:16
    let mut _3: &isize;                  // in scope 0 at ui/borrowck/borrowck-lend-args.rs:9:12: 9:15
    let _4: &isize;                      // in scope 0 at ui/borrowck/borrowck-lend-args.rs:9:12: 9:15
    let mut _5: *const isize;            // in scope 0 at ui/borrowck/borrowck-lend-args.rs:8:28: 8:29

    bb0: {
        _5 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 0 at ui/borrowck/borrowck-lend-args.rs:9:12: 9:15
        _4 = &(*_5);                     // scope 0 at ui/borrowck/borrowck-lend-args.rs:9:12: 9:15
        _3 = _4;                         // scope 0 at ui/borrowck/borrowck-lend-args.rs:9:12: 9:15
        _2 = borrow(move _3) -> [return: bb1, unwind: bb3]; // scope 0 at ui/borrowck/borrowck-lend-args.rs:9:5: 9:16
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-lend-args.rs:9:5: 9:11
                                         // + literal: Const { ty: for<'a> fn(&'a isize) {borrow}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/borrowck/borrowck-lend-args.rs:10:1: 10:2
    }

    bb2: {
        return;                          // scope 0 at ui/borrowck/borrowck-lend-args.rs:10:2: 10:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/borrowck/borrowck-lend-args.rs:10:1: 10:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-lend-args.rs:8:1: 10:2
    }
}

fn borrow_from_arg_mut_ref(_1: &mut Box<isize>) -> () {
    debug v => _1;                       // in scope 0 at ui/borrowck/borrowck-lend-args.rs:12:28: 12:29
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-lend-args.rs:12:48: 12:48
    let _2: ();                          // in scope 0 at ui/borrowck/borrowck-lend-args.rs:13:5: 13:17
    let mut _3: &isize;                  // in scope 0 at ui/borrowck/borrowck-lend-args.rs:13:12: 13:16
    let _4: &isize;                      // in scope 0 at ui/borrowck/borrowck-lend-args.rs:13:12: 13:16
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-lend-args.rs:12:28: 12:29
    let mut _6: *const isize;            // in scope 0 at ui/borrowck/borrowck-lend-args.rs:12:28: 12:29

    bb0: {
        _5 = deref_copy (*_1);           // scope 0 at ui/borrowck/borrowck-lend-args.rs:13:12: 13:16
        _6 = (((_5.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 0 at ui/borrowck/borrowck-lend-args.rs:13:12: 13:16
        _4 = &(*_6);                     // scope 0 at ui/borrowck/borrowck-lend-args.rs:13:12: 13:16
        _3 = _4;                         // scope 0 at ui/borrowck/borrowck-lend-args.rs:13:12: 13:16
        _2 = borrow(move _3) -> bb1;     // scope 0 at ui/borrowck/borrowck-lend-args.rs:13:5: 13:17
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-lend-args.rs:13:5: 13:11
                                         // + literal: Const { ty: for<'a> fn(&'a isize) {borrow}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrowck-lend-args.rs:14:2: 14:2
    }
}

fn borrow_from_arg_copy(_1: Box<isize>) -> () {
    debug v => _1;                       // in scope 0 at ui/borrowck/borrowck-lend-args.rs:16:25: 16:26
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-lend-args.rs:16:40: 16:40
    let _2: ();                          // in scope 0 at ui/borrowck/borrowck-lend-args.rs:17:5: 17:16
    let mut _3: &isize;                  // in scope 0 at ui/borrowck/borrowck-lend-args.rs:17:12: 17:15
    let _4: &isize;                      // in scope 0 at ui/borrowck/borrowck-lend-args.rs:17:12: 17:15
    let mut _5: *const isize;            // in scope 0 at ui/borrowck/borrowck-lend-args.rs:16:25: 16:26

    bb0: {
        _5 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 0 at ui/borrowck/borrowck-lend-args.rs:17:12: 17:15
        _4 = &(*_5);                     // scope 0 at ui/borrowck/borrowck-lend-args.rs:17:12: 17:15
        _3 = _4;                         // scope 0 at ui/borrowck/borrowck-lend-args.rs:17:12: 17:15
        _2 = borrow(move _3) -> [return: bb1, unwind: bb3]; // scope 0 at ui/borrowck/borrowck-lend-args.rs:17:5: 17:16
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-lend-args.rs:17:5: 17:11
                                         // + literal: Const { ty: for<'a> fn(&'a isize) {borrow}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/borrowck/borrowck-lend-args.rs:18:1: 18:2
    }

    bb2: {
        return;                          // scope 0 at ui/borrowck/borrowck-lend-args.rs:18:2: 18:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/borrowck/borrowck-lend-args.rs:18:1: 18:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-lend-args.rs:16:1: 18:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-lend-args.rs:20:15: 20:15

    bb0: {
        return;                          // scope 0 at ui/borrowck/borrowck-lend-args.rs:21:2: 21:2
    }
}
