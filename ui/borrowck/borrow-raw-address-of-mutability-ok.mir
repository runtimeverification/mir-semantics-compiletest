// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn mutable_address_of() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:5:25: 5:25
    let mut _1: i32;                     // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:6:9: 6:14
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:6:9: 6:14
        let _2: *mut i32;                // in scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:7:9: 7:10
        scope 2 {
            debug y => _2;               // in scope 2 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:7:9: 7:10
        }
    }

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:6:17: 6:18
        _2 = &raw mut _1;                // scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:7:13: 7:23
        return;                          // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:8:2: 8:2
    }
}

fn mutable_address_of_closure() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:10:33: 10:33
    let mut _1: i32;                     // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:11:9: 11:14
    let mut _3: &mut i32;                // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 14:6
    let _4: ();                          // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:15:5: 15:8
    let mut _5: &mut [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 12:19]; // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:15:5: 15:6
    let mut _6: ();                      // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:15:5: 15:8
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:11:9: 11:14
        let mut _2: [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 12:19]; // in scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:9: 12:14
        scope 2 {
            debug f => _2;               // in scope 2 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:9: 12:14
        }
    }

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:11:17: 11:18
        _3 = &mut _1;                    // scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 14:6
        _2 = [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 12:19] { x: move _3 }; // scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 14:6
                                         // closure
                                         // + def_id: DefId(0:5 ~ borrow_raw_address_of_mutability_ok[253d]::mutable_address_of_closure::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()),
                                         //     (&mut i32,),
                                         // ]
        _5 = &mut _2;                    // scope 2 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:15:5: 15:6
        _4 = <[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 12:19] as FnMut<()>>::call_mut(move _5, move _6) -> bb1; // scope 2 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:15:5: 15:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrow-raw-address-of-mutability-ok.rs:15:5: 15:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 12:19], ()) -> <[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 12:19] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 12:19] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:16:2: 16:2
    }
}

fn mutable_address_of_closure::{closure#0}(_1: &mut [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 12:19]) -> () {
    debug x => (*((*_1).0: &mut i32));   // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:11:9: 11:14
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:20: 12:20
    let _2: *mut i32;                    // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:13:13: 13:14
    let mut _3: &mut i32;                // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:12:17: 14:6
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:13:13: 13:14
    }

    bb0: {
        _3 = deref_copy ((*_1).0: &mut i32); // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:13:17: 13:27
        _2 = &raw mut (*_3);             // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:13:17: 13:27
        return;                          // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:14:6: 14:6
    }
}

fn const_address_of_closure() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:18:31: 18:31
    let _1: i32;                         // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:19:9: 19:10
    let mut _3: &i32;                    // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 22:6
    let _4: ();                          // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:23:5: 23:8
    let mut _5: &[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 20:15]; // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:23:5: 23:6
    let mut _6: ();                      // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:23:5: 23:8
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:19:9: 19:10
        let _2: [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 20:15]; // in scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:9: 20:10
        scope 2 {
            debug f => _2;               // in scope 2 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:9: 20:10
        }
    }

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:19:13: 19:14
        _3 = &_1;                        // scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 22:6
        _2 = [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 20:15] { x: move _3 }; // scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 22:6
                                         // closure
                                         // + def_id: DefId(0:7 ~ borrow_raw_address_of_mutability_ok[253d]::const_address_of_closure::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()),
                                         //     (&i32,),
                                         // ]
        _5 = &_2;                        // scope 2 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:23:5: 23:6
        _4 = <[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 20:15] as Fn<()>>::call(move _5, move _6) -> bb1; // scope 2 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:23:5: 23:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrow-raw-address-of-mutability-ok.rs:23:5: 23:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 20:15], ()) -> <[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 20:15] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 20:15] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:24:2: 24:2
    }
}

fn const_address_of_closure::{closure#0}(_1: &[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 20:15]) -> () {
    debug x => (*((*_1).0: &i32));       // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:19:9: 19:10
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:16: 20:16
    let _2: *const i32;                  // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:21:13: 21:14
    let mut _3: &i32;                    // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:20:13: 22:6
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:21:13: 21:14
    }

    bb0: {
        _3 = deref_copy ((*_1).0: &i32); // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:21:17: 21:29
        _2 = &raw const (*_3);           // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:21:17: 21:29
        return;                          // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:22:6: 22:6
    }
}

fn make_fn(_1: F) -> F {
    debug f => _1;                       // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:26:21: 26:22
    let mut _0: F;                       // return place in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:26:30: 26:31

    bb0: {
        _0 = move _1;                    // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:26:34: 26:35
        return;                          // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:26:37: 26:37
    }
}

fn const_address_of_fn_closure() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:28:34: 28:34
    let _1: i32;                         // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:29:9: 29:10
    let mut _3: [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23]; // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 32:6
    let mut _4: &i32;                    // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 32:6
    let _5: ();                          // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:33:5: 33:8
    let mut _6: &[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23]; // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:33:5: 33:6
    let mut _7: ();                      // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:33:5: 33:8
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:29:9: 29:10
        let _2: [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23]; // in scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:9: 30:10
        scope 2 {
            debug f => _2;               // in scope 2 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:9: 30:10
        }
    }

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:29:13: 29:14
        _4 = &_1;                        // scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 32:6
        _3 = [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23] { x: move _4 }; // scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 32:6
                                         // closure
                                         // + def_id: DefId(0:11 ~ borrow_raw_address_of_mutability_ok[253d]::const_address_of_fn_closure::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()),
                                         //     (&i32,),
                                         // ]
        _2 = make_fn::<[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23]>(move _3) -> bb1; // scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:13: 32:7
                                         // mir::Constant
                                         // + span: ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:13: 30:20
                                         // + literal: Const { ty: fn([closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23]) -> [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23] {make_fn::<[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23]>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_2;                        // scope 2 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:33:5: 33:6
        _5 = <[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23] as Fn<()>>::call(move _6, move _7) -> bb2; // scope 2 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:33:5: 33:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrow-raw-address-of-mutability-ok.rs:33:5: 33:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23], ()) -> <[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:34:2: 34:2
    }
}

fn const_address_of_fn_closure::{closure#0}(_1: &[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 30:23]) -> () {
    debug x => (*((*_1).0: &i32));       // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:29:9: 29:10
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:24: 30:24
    let _2: *const i32;                  // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:31:13: 31:14
    let mut _3: &i32;                    // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:30:21: 32:6
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:31:13: 31:14
    }

    bb0: {
        _3 = deref_copy ((*_1).0: &i32); // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:31:17: 31:29
        _2 = &raw const (*_3);           // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:31:17: 31:29
        return;                          // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:32:6: 32:6
    }
}

fn const_address_of_fn_closure_move() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:36:39: 36:39
    let _1: i32;                         // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:37:9: 37:10
    let mut _3: [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28]; // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 40:6
    let _4: ();                          // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:41:5: 41:8
    let mut _5: &[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28]; // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:41:5: 41:6
    let mut _6: ();                      // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:41:5: 41:8
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:37:9: 37:10
        let _2: [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28]; // in scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:9: 38:10
        scope 2 {
            debug f => _2;               // in scope 2 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:9: 38:10
        }
    }

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:37:13: 37:14
        _3 = const {transmute(0x00000000): [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28]}; // scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 40:6
                                         // mir::Constant
                                         // + span: ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 40:6
                                         // + literal: Const { ty: [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28], val: Value(Scalar(0x00000000)) }
        _2 = make_fn::<[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28]>(move _3) -> bb1; // scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:13: 40:7
                                         // mir::Constant
                                         // + span: ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:13: 38:20
                                         // + literal: Const { ty: fn([closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28]) -> [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28] {make_fn::<[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28]>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_2;                        // scope 2 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:41:5: 41:6
        _4 = <[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28] as Fn<()>>::call(move _5, move _6) -> bb2; // scope 2 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:41:5: 41:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrow-raw-address-of-mutability-ok.rs:41:5: 41:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28], ()) -> <[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:42:2: 42:2
    }
}

fn const_address_of_fn_closure_move::{closure#0}(_1: &[closure@ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:21: 38:28]) -> () {
    debug x => ((*_1).0: i32);           // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:37:9: 37:10
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:38:29: 38:29
    let _2: *const i32;                  // in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:39:13: 39:14
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:39:13: 39:14
    }

    bb0: {
        _2 = &raw const ((*_1).0: i32);  // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:39:17: 39:29
        return;                          // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:40:6: 40:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:44:11: 44:11

    bb0: {
        return;                          // scope 0 at ui/borrowck/borrow-raw-address-of-mutability-ok.rs:44:13: 44:13
    }
}
