// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a() -> i32 {
    let mut _0: i32;
    let mut _1: i32;
    let mut _3: &i32;
    let mut _5: &i32;
    let mut _6: i32;
    let mut _7: i32;
    let mut _8: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:16];
    let mut _9: i32;
    let mut _10: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:16];
    let mut _11: i32;
    scope 1 {
        debug x => _1;
        let _2: [closure@ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:16];
        scope 2 {
            debug c1 => _2;
            let _4: [closure@ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:16];
            scope 3 {
                debug c2 => _4;
            }
        }
    }

    bb0: {
        _1 = const 3_i32;
        _1 = Add(_1, const 1_i32);
        _3 = &_1;
        _2 = [closure@ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:16] { x: move _3 };
        _5 = &_1;
        _4 = [closure@ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:16] { x: move _5 };
        _8 = &_2;
        _7 = <[closure@ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:16] as Fn<()>>::call(move _8, const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = &_4;
        _9 = <[closure@ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:16] as Fn<()>>::call(move _10, const ()) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Mul(move _7, move _9);
        _11 = _1;
        _0 = Mul(move _6, move _11);
        return;
    }
}

fn a::{closure#0}(_1: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:16]) -> i32 {
    debug x => (*((*_1).0: &i32));
    let mut _0: i32;
    let mut _2: i32;
    let mut _3: &i32;

    bb0: {
        _3 = deref_copy ((*_1).0: &i32);
        _2 = (*_3);
        _0 = Mul(move _2, const 4_i32);
        return;
    }
}

fn a::{closure#1}(_1: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:16]) -> i32 {
    debug x => (*((*_1).0: &i32));
    let mut _0: i32;
    let mut _2: i32;
    let mut _3: &i32;

    bb0: {
        _3 = deref_copy ((*_1).0: &i32);
        _2 = (*_3);
        _0 = Mul(move _2, const 5_i32);
        return;
    }
}

fn get(_1: &i32) -> i32 {
    debug x => _1;
    let mut _0: i32;
    let mut _2: i32;

    bb0: {
        _2 = (*_1);
        _0 = Mul(move _2, const 4_i32);
        return;
    }
}

fn b() -> i32 {
    let mut _0: i32;
    let mut _1: i32;
    let mut _3: &i32;
    let mut _5: &i32;
    let mut _6: i32;
    let mut _7: i32;
    let mut _8: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:16];
    let mut _9: i32;
    let mut _10: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:16];
    let mut _11: i32;
    scope 1 {
        debug x => _1;
        let _2: [closure@ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:16];
        scope 2 {
            debug c1 => _2;
            let _4: [closure@ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:16];
            scope 3 {
                debug c2 => _4;
            }
        }
    }

    bb0: {
        _1 = const 3_i32;
        _1 = Add(_1, const 1_i32);
        _3 = &_1;
        _2 = [closure@ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:16] { x: move _3 };
        _5 = &_1;
        _4 = [closure@ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:16] { x: move _5 };
        _8 = &_2;
        _7 = <[closure@ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:16] as Fn<()>>::call(move _8, const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = &_4;
        _9 = <[closure@ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:16] as Fn<()>>::call(move _10, const ()) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Mul(move _7, move _9);
        _11 = _1;
        _0 = Mul(move _6, move _11);
        return;
    }
}

fn b::{closure#0}(_1: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:16]) -> i32 {
    debug x => (*((*_1).0: &i32));
    let mut _0: i32;
    let mut _2: &i32;

    bb0: {
        _2 = deref_copy ((*_1).0: &i32);
        _0 = get(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn b::{closure#1}(_1: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:16]) -> i32 {
    debug x => (*((*_1).0: &i32));
    let mut _0: i32;
    let mut _2: &i32;

    bb0: {
        _2 = deref_copy ((*_1).0: &i32);
        _0 = get(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn c() -> i32 {
    let mut _0: i32;
    let mut _1: i32;
    let mut _3: &i32;
    let mut _5: &i32;
    let mut _6: i32;
    let mut _7: i32;
    let mut _8: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:16];
    let mut _9: i32;
    let mut _10: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:16];
    let mut _11: i32;
    scope 1 {
        debug x => _1;
        let _2: [closure@ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:16];
        scope 2 {
            debug c1 => _2;
            let _4: [closure@ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:16];
            scope 3 {
                debug c2 => _4;
            }
        }
    }

    bb0: {
        _1 = const 3_i32;
        _1 = Add(_1, const 1_i32);
        _3 = &_1;
        _2 = [closure@ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:16] { x: move _3 };
        _5 = &_1;
        _4 = [closure@ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:16] { x: move _5 };
        _8 = &_2;
        _7 = <[closure@ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:16] as Fn<()>>::call(move _8, const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = &_4;
        _9 = <[closure@ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:16] as Fn<()>>::call(move _10, const ()) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Mul(move _7, move _9);
        _11 = _1;
        _0 = Mul(move _6, move _11);
        return;
    }
}

fn c::{closure#0}(_1: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:16]) -> i32 {
    debug x => (*((*_1).0: &i32));
    let mut _0: i32;
    let mut _2: i32;
    let mut _3: &i32;

    bb0: {
        _3 = deref_copy ((*_1).0: &i32);
        _2 = (*_3);
        _0 = Mul(move _2, const 5_i32);
        return;
    }
}

fn c::{closure#1}(_1: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:16]) -> i32 {
    debug x => (*((*_1).0: &i32));
    let mut _0: i32;
    let mut _2: &i32;

    bb0: {
        _2 = deref_copy ((*_1).0: &i32);
        _0 = get(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let _4: &i32;
    let _5: &i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: i32;
    let mut _9: i32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&i32, &i32);
    let mut _14: &i32;
    let _15: i32;
    let _16: &i32;
    let _17: &i32;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: i32;
    let mut _21: i32;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&i32, &i32);
    let mut _26: &i32;
    let _27: i32;
    let _28: &i32;
    let _29: &i32;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: i32;
    let mut _33: i32;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: &i32;
    let mut _38: &i32;
    let mut _39: &i32;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _28;
        debug right_val => _29;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }

    bb0: {
        _3 = a() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _39 = const _;
        _1 = (move _2, _39);
        _4 = (_1.0: &i32);
        _5 = (_1.1: &i32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<i32, i32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _15 = b() -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        _38 = const _;
        _13 = (move _14, _38);
        _16 = (_13.0: &i32);
        _17 = (_13.1: &i32);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<i32, i32>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb6: {
        _27 = c() -> [return: bb7, unwind continue];
    }

    bb7: {
        _26 = &_27;
        _37 = const _;
        _25 = (move _26, _37);
        _28 = (_25.0: &i32);
        _29 = (_25.1: &i32);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<i32, i32>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb9: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1280_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1024_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1280_i32;
        _0 = &_1;
        return;
    }
}
