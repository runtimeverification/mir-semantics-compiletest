// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:9:11: 9:14
    let mut _1: i32;                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:10:9: 10:14
    let mut _2: (i32, bool);             // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:11:5: 11:11
    let mut _4: &i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:22
    let mut _6: &i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:22
    let mut _7: i32;                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:14:5: 14:16
    let mut _8: i32;                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:14:5: 14:9
    let mut _9: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:16]; // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:14:5: 14:7
    let mut _10: ();                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:14:5: 14:9
    let mut _11: i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:14:12: 14:16
    let mut _12: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:16]; // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:14:12: 14:14
    let mut _13: ();                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:14:12: 14:16
    let mut _14: (i32, bool);            // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:14:5: 14:16
    let mut _15: i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:14:19: 14:20
    let mut _16: (i32, bool);            // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:14:5: 14:20
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:10:9: 10:14
        let _3: [closure@ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:16]; // in scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:12:9: 12:11
        scope 2 {
            debug c1 => _3;              // in scope 2 at ui/borrowck/borrowck-closures-two-imm.rs:12:9: 12:11
            let _5: [closure@ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:16]; // in scope 2 at ui/borrowck/borrowck-closures-two-imm.rs:13:9: 13:11
            scope 3 {
                debug c2 => _5;          // in scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:13:9: 13:11
            }
        }
    }

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:10:17: 10:18
        _2 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:11:5: 11:11
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb1; // scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:11:5: 11:11
    }

    bb1: {
        _1 = move (_2.0: i32);           // scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:11:5: 11:11
        _4 = &_1;                        // scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:22
        _3 = [closure@ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:16] { x: move _4 }; // scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:22
                                         // closure
                                         // + def_id: DefId(0:4 ~ borrowck_closures_two_imm[87a3]::a::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> i32,
                                         //     (&i32,),
                                         // ]
        _6 = &_1;                        // scope 2 at ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:22
        _5 = [closure@ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:16] { x: move _6 }; // scope 2 at ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:22
                                         // closure
                                         // + def_id: DefId(0:5 ~ borrowck_closures_two_imm[87a3]::a::{closure#1})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> i32,
                                         //     (&i32,),
                                         // ]
        _9 = &_3;                        // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:14:5: 14:7
        _8 = <[closure@ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:16] as Fn<()>>::call(move _9, move _10) -> bb2; // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:14:5: 14:9
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-two-imm.rs:14:5: 14:7
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:16], ()) -> <[closure@ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:16] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:16] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = &_5;                       // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:14:12: 14:14
        _11 = <[closure@ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:16] as Fn<()>>::call(move _12, move _13) -> bb3; // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:14:12: 14:16
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-two-imm.rs:14:12: 14:14
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:16], ()) -> <[closure@ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:16] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:16] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = CheckedMul(_8, _11);       // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:14:5: 14:16
        assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", move _8, move _11) -> bb4; // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:14:5: 14:16
    }

    bb4: {
        _7 = move (_14.0: i32);          // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:14:5: 14:16
        _15 = _1;                        // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:14:19: 14:20
        _16 = CheckedMul(_7, _15);       // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:14:5: 14:20
        assert(!move (_16.1: bool), "attempt to compute `{} * {}`, which would overflow", move _7, move _15) -> bb5; // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:14:5: 14:20
    }

    bb5: {
        _0 = move (_16.0: i32);          // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:14:5: 14:20
        return;                          // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:15:2: 15:2
    }
}

fn a::{closure#0}(_1: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:16]) -> i32 {
    debug x => (*((*_1).0: &i32));       // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:10:9: 10:14
    let mut _0: i32;                     // return place in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:12:17: 12:17
    let mut _2: i32;                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:12:17: 12:18
    let mut _3: (i32, bool);             // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:12:17: 12:22
    let mut _4: &i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:12:14: 12:22

    bb0: {
        _4 = deref_copy ((*_1).0: &i32); // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:12:17: 12:18
        _2 = (*_4);                      // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:12:17: 12:18
        _3 = CheckedMul(_2, const 4_i32); // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:12:17: 12:22
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const 4_i32) -> bb1; // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:12:17: 12:22
    }

    bb1: {
        _0 = move (_3.0: i32);           // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:12:17: 12:22
        return;                          // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:12:22: 12:22
    }
}

fn a::{closure#1}(_1: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:16]) -> i32 {
    debug x => (*((*_1).0: &i32));       // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:10:9: 10:14
    let mut _0: i32;                     // return place in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:13:17: 13:17
    let mut _2: i32;                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:13:17: 13:18
    let mut _3: (i32, bool);             // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:13:17: 13:22
    let mut _4: &i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:13:14: 13:22

    bb0: {
        _4 = deref_copy ((*_1).0: &i32); // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:13:17: 13:18
        _2 = (*_4);                      // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:13:17: 13:18
        _3 = CheckedMul(_2, const 5_i32); // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:13:17: 13:22
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const 5_i32) -> bb1; // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:13:17: 13:22
    }

    bb1: {
        _0 = move (_3.0: i32);           // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:13:17: 13:22
        return;                          // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:13:22: 13:22
    }
}

fn get(_1: &i32) -> i32 {
    debug x => _1;                       // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:17:8: 17:9
    let mut _0: i32;                     // return place in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:17:20: 17:23
    let mut _2: i32;                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:18:5: 18:7
    let mut _3: (i32, bool);             // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:18:5: 18:11

    bb0: {
        _2 = (*_1);                      // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:18:5: 18:7
        _3 = CheckedMul(_2, const 4_i32); // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:18:5: 18:11
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const 4_i32) -> bb1; // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:18:5: 18:11
    }

    bb1: {
        _0 = move (_3.0: i32);           // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:18:5: 18:11
        return;                          // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:19:2: 19:2
    }
}

fn b() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:21:11: 21:14
    let mut _1: i32;                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:22:9: 22:14
    let mut _2: (i32, bool);             // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:23:5: 23:11
    let mut _4: &i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:24
    let mut _6: &i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:24
    let mut _7: i32;                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:26:5: 26:16
    let mut _8: i32;                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:26:5: 26:9
    let mut _9: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:16]; // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:26:5: 26:7
    let mut _10: ();                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:26:5: 26:9
    let mut _11: i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:26:12: 26:16
    let mut _12: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:16]; // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:26:12: 26:14
    let mut _13: ();                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:26:12: 26:16
    let mut _14: (i32, bool);            // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:26:5: 26:16
    let mut _15: i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:26:19: 26:20
    let mut _16: (i32, bool);            // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:26:5: 26:20
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:22:9: 22:14
        let _3: [closure@ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:16]; // in scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:24:9: 24:11
        scope 2 {
            debug c1 => _3;              // in scope 2 at ui/borrowck/borrowck-closures-two-imm.rs:24:9: 24:11
            let _5: [closure@ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:16]; // in scope 2 at ui/borrowck/borrowck-closures-two-imm.rs:25:9: 25:11
            scope 3 {
                debug c2 => _5;          // in scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:25:9: 25:11
            }
        }
    }

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:22:17: 22:18
        _2 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:23:5: 23:11
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb1; // scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:23:5: 23:11
    }

    bb1: {
        _1 = move (_2.0: i32);           // scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:23:5: 23:11
        _4 = &_1;                        // scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:24
        _3 = [closure@ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:16] { x: move _4 }; // scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:24
                                         // closure
                                         // + def_id: DefId(0:8 ~ borrowck_closures_two_imm[87a3]::b::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> i32,
                                         //     (&i32,),
                                         // ]
        _6 = &_1;                        // scope 2 at ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:24
        _5 = [closure@ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:16] { x: move _6 }; // scope 2 at ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:24
                                         // closure
                                         // + def_id: DefId(0:9 ~ borrowck_closures_two_imm[87a3]::b::{closure#1})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> i32,
                                         //     (&i32,),
                                         // ]
        _9 = &_3;                        // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:26:5: 26:7
        _8 = <[closure@ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:16] as Fn<()>>::call(move _9, move _10) -> bb2; // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:26:5: 26:9
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-two-imm.rs:26:5: 26:7
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:16], ()) -> <[closure@ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:16] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:16] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = &_5;                       // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:26:12: 26:14
        _11 = <[closure@ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:16] as Fn<()>>::call(move _12, move _13) -> bb3; // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:26:12: 26:16
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-two-imm.rs:26:12: 26:14
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:16], ()) -> <[closure@ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:16] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:16] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = CheckedMul(_8, _11);       // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:26:5: 26:16
        assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", move _8, move _11) -> bb4; // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:26:5: 26:16
    }

    bb4: {
        _7 = move (_14.0: i32);          // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:26:5: 26:16
        _15 = _1;                        // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:26:19: 26:20
        _16 = CheckedMul(_7, _15);       // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:26:5: 26:20
        assert(!move (_16.1: bool), "attempt to compute `{} * {}`, which would overflow", move _7, move _15) -> bb5; // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:26:5: 26:20
    }

    bb5: {
        _0 = move (_16.0: i32);          // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:26:5: 26:20
        return;                          // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:27:2: 27:2
    }
}

fn b::{closure#0}(_1: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:16]) -> i32 {
    debug x => (*((*_1).0: &i32));       // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:22:9: 22:14
    let mut _0: i32;                     // return place in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:24:17: 24:17
    let mut _2: &i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:24:21: 24:23
    let _3: &i32;                        // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:24:21: 24:23
    let mut _4: &i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:24:14: 24:24

    bb0: {
        _4 = deref_copy ((*_1).0: &i32); // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:24:21: 24:23
        _3 = _4;                         // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:24:21: 24:23
        _2 = _3;                         // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:24:21: 24:23
        _0 = get(move _2) -> bb1;        // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:24:17: 24:24
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-two-imm.rs:24:17: 24:20
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32 {get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:24:24: 24:24
    }
}

fn b::{closure#1}(_1: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:16]) -> i32 {
    debug x => (*((*_1).0: &i32));       // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:22:9: 22:14
    let mut _0: i32;                     // return place in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:25:17: 25:17
    let mut _2: &i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:25:21: 25:23
    let _3: &i32;                        // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:25:21: 25:23
    let mut _4: &i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:25:14: 25:24

    bb0: {
        _4 = deref_copy ((*_1).0: &i32); // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:25:21: 25:23
        _3 = _4;                         // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:25:21: 25:23
        _2 = _3;                         // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:25:21: 25:23
        _0 = get(move _2) -> bb1;        // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:25:17: 25:24
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-two-imm.rs:25:17: 25:20
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32 {get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:25:24: 25:24
    }
}

fn c() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:29:11: 29:14
    let mut _1: i32;                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:30:9: 30:14
    let mut _2: (i32, bool);             // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:31:5: 31:11
    let mut _4: &i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:22
    let mut _6: &i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:24
    let mut _7: i32;                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:34:5: 34:16
    let mut _8: i32;                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:34:5: 34:9
    let mut _9: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:16]; // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:34:5: 34:7
    let mut _10: ();                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:34:5: 34:9
    let mut _11: i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:34:12: 34:16
    let mut _12: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:16]; // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:34:12: 34:14
    let mut _13: ();                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:34:12: 34:16
    let mut _14: (i32, bool);            // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:34:5: 34:16
    let mut _15: i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:34:19: 34:20
    let mut _16: (i32, bool);            // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:34:5: 34:20
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:30:9: 30:14
        let _3: [closure@ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:16]; // in scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:32:9: 32:11
        scope 2 {
            debug c1 => _3;              // in scope 2 at ui/borrowck/borrowck-closures-two-imm.rs:32:9: 32:11
            let _5: [closure@ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:16]; // in scope 2 at ui/borrowck/borrowck-closures-two-imm.rs:33:9: 33:11
            scope 3 {
                debug c2 => _5;          // in scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:33:9: 33:11
            }
        }
    }

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:30:17: 30:18
        _2 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:31:5: 31:11
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb1; // scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:31:5: 31:11
    }

    bb1: {
        _1 = move (_2.0: i32);           // scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:31:5: 31:11
        _4 = &_1;                        // scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:22
        _3 = [closure@ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:16] { x: move _4 }; // scope 1 at ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:22
                                         // closure
                                         // + def_id: DefId(0:11 ~ borrowck_closures_two_imm[87a3]::c::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> i32,
                                         //     (&i32,),
                                         // ]
        _6 = &_1;                        // scope 2 at ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:24
        _5 = [closure@ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:16] { x: move _6 }; // scope 2 at ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:24
                                         // closure
                                         // + def_id: DefId(0:12 ~ borrowck_closures_two_imm[87a3]::c::{closure#1})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> i32,
                                         //     (&i32,),
                                         // ]
        _9 = &_3;                        // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:34:5: 34:7
        _8 = <[closure@ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:16] as Fn<()>>::call(move _9, move _10) -> bb2; // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:34:5: 34:9
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-two-imm.rs:34:5: 34:7
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:16], ()) -> <[closure@ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:16] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:16] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = &_5;                       // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:34:12: 34:14
        _11 = <[closure@ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:16] as Fn<()>>::call(move _12, move _13) -> bb3; // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:34:12: 34:16
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-two-imm.rs:34:12: 34:14
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:16], ()) -> <[closure@ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:16] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:16] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = CheckedMul(_8, _11);       // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:34:5: 34:16
        assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", move _8, move _11) -> bb4; // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:34:5: 34:16
    }

    bb4: {
        _7 = move (_14.0: i32);          // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:34:5: 34:16
        _15 = _1;                        // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:34:19: 34:20
        _16 = CheckedMul(_7, _15);       // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:34:5: 34:20
        assert(!move (_16.1: bool), "attempt to compute `{} * {}`, which would overflow", move _7, move _15) -> bb5; // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:34:5: 34:20
    }

    bb5: {
        _0 = move (_16.0: i32);          // scope 3 at ui/borrowck/borrowck-closures-two-imm.rs:34:5: 34:20
        return;                          // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:35:2: 35:2
    }
}

fn c::{closure#0}(_1: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:16]) -> i32 {
    debug x => (*((*_1).0: &i32));       // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:30:9: 30:14
    let mut _0: i32;                     // return place in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:32:17: 32:17
    let mut _2: i32;                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:32:17: 32:18
    let mut _3: (i32, bool);             // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:32:17: 32:22
    let mut _4: &i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:32:14: 32:22

    bb0: {
        _4 = deref_copy ((*_1).0: &i32); // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:32:17: 32:18
        _2 = (*_4);                      // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:32:17: 32:18
        _3 = CheckedMul(_2, const 5_i32); // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:32:17: 32:22
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const 5_i32) -> bb1; // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:32:17: 32:22
    }

    bb1: {
        _0 = move (_3.0: i32);           // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:32:17: 32:22
        return;                          // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:32:22: 32:22
    }
}

fn c::{closure#1}(_1: &[closure@ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:16]) -> i32 {
    debug x => (*((*_1).0: &i32));       // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:30:9: 30:14
    let mut _0: i32;                     // return place in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:33:17: 33:17
    let mut _2: &i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:33:21: 33:23
    let _3: &i32;                        // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:33:21: 33:23
    let mut _4: &i32;                    // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:33:14: 33:24

    bb0: {
        _4 = deref_copy ((*_1).0: &i32); // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:33:21: 33:23
        _3 = _4;                         // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:33:21: 33:23
        _2 = _3;                         // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:33:21: 33:23
        _0 = get(move _2) -> bb1;        // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:33:17: 33:24
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-two-imm.rs:33:17: 33:20
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32 {get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:33:24: 33:24
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:37:15: 37:15
    let mut _1: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: i32;                         // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:38:16: 38:19
    let mut _4: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: i32;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _21: i32;                        // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:39:16: 39:19
    let mut _22: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _23: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _24: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _27: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _28: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _30: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _31: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _32: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _33: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _34: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _35: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _37: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _38: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _39: i32;                        // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:40:16: 40:19
    let mut _40: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _41: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _42: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _44: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _45: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _46: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _48: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _49: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _50: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _51: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _52: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _53: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _55: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _56: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _57: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _23;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _24;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _29: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _29;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _41;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _42;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _47: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _47;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = a() -> bb1;                 // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:38:16: 38:19
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-two-imm.rs:38:16: 38:17
                                         // + literal: Const { ty: fn() -> i32 {a}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _57 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[2])) }
        _4 = _57;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = (*_5);                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = const 1280_i32;            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = Eq(move _9, move _10);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<i32, i32>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb3: {
        _21 = b() -> bb4;                // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:39:16: 39:19
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-two-imm.rs:39:16: 39:17
                                         // + literal: Const { ty: fn() -> i32 {b}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = &_21;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _56 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _22 = _56;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _22);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _23 = (_19.0: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _24 = (_19.1: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _27 = (*_23);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _28 = const 1024_i32;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _26 = Eq(move _27, move _28);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _25 = Not(move _26);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _25) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _29 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _33;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _30 = core::panicking::assert_failed::<i32, i32>(move _31, move _32, move _34, move _36); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb6: {
        _39 = c() -> bb7;                // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:40:16: 40:19
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-two-imm.rs:40:16: 40:17
                                         // + literal: Const { ty: fn() -> i32 {c}, val: Value(<ZST>) }
    }

    bb7: {
        _38 = &_39;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _55 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _40 = _55;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _37 = (move _38, move _40);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _41 = (_37.0: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _42 = (_37.1: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _45 = (*_41);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _46 = const 1280_i32;            // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _44 = Eq(move _45, move _46);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _43 = Not(move _44);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _43) -> [0: bb9, otherwise: bb8]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _47 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _49 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _51 = _41;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _50 = _51;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _53 = _42;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _52 = _53;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _54 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _48 = core::panicking::assert_failed::<i32, i32>(move _49, move _50, move _52, move _54); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:41:2: 41:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:40:21: 40:25

    bb0: {
        _1 = const 1280_i32;             // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:40:21: 40:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:39:21: 39:25

    bb0: {
        _1 = const 1024_i32;             // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:39:21: 39:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:38:21: 38:25

    bb0: {
        _1 = const 1280_i32;             // scope 0 at ui/borrowck/borrowck-closures-two-imm.rs:38:21: 38:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
