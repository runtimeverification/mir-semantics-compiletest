// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/issue-17263.rs:5:11: 5:11
    let mut _1: std::boxed::Box<Foo>;    // in scope 0 at ui/borrowck/issue-17263.rs:6:9: 6:14
    let mut _2: Foo;                     // in scope 0 at ui/borrowck/issue-17263.rs:6:34: 6:52
    let mut _5: (&mut isize, &mut isize); // in scope 0 at ui/borrowck/issue-17263.rs:7:18: 7:38
    let mut _6: &mut isize;              // in scope 0 at ui/borrowck/issue-17263.rs:7:19: 7:27
    let mut _7: &mut isize;              // in scope 0 at ui/borrowck/issue-17263.rs:7:29: 7:37
    let mut _9: Foo;                     // in scope 0 at ui/borrowck/issue-17263.rs:9:36: 9:54
    let mut _12: (&mut isize, &isize);   // in scope 0 at ui/borrowck/issue-17263.rs:10:18: 10:38
    let mut _13: &mut isize;             // in scope 0 at ui/borrowck/issue-17263.rs:10:19: 10:29
    let mut _14: &isize;                 // in scope 0 at ui/borrowck/issue-17263.rs:10:31: 10:37
    let _15: ();                         // in scope 0 at ui/borrowck/issue-17263.rs:16:5: 16:15
    let mut _16: &isize;                 // in scope 0 at ui/borrowck/issue-17263.rs:16:13: 16:14
    let _17: ();                         // in scope 0 at ui/borrowck/issue-17263.rs:17:5: 17:15
    let mut _18: &mut isize;             // in scope 0 at ui/borrowck/issue-17263.rs:17:13: 17:14
    let _19: ();                         // in scope 0 at ui/borrowck/issue-17263.rs:18:5: 18:15
    let mut _20: &mut isize;             // in scope 0 at ui/borrowck/issue-17263.rs:18:13: 18:14
    let _21: ();                         // in scope 0 at ui/borrowck/issue-17263.rs:19:5: 19:15
    let mut _22: &mut isize;             // in scope 0 at ui/borrowck/issue-17263.rs:19:13: 19:14
    let mut _23: *const Foo;             // in scope 0 at ui/borrowck/issue-17263.rs:6:9: 6:14
    let mut _24: *const Foo;             // in scope 0 at ui/borrowck/issue-17263.rs:6:9: 6:14
    let mut _25: *const Foo;             // in scope 0 at ui/borrowck/issue-17263.rs:9:9: 9:16
    let mut _26: *const Foo;             // in scope 0 at ui/borrowck/issue-17263.rs:9:9: 9:16
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/issue-17263.rs:6:9: 6:14
        let _3: &mut isize;              // in scope 1 at ui/borrowck/issue-17263.rs:7:10: 7:11
        let _4: &mut isize;              // in scope 1 at ui/borrowck/issue-17263.rs:7:13: 7:14
        scope 2 {
            debug a => _3;               // in scope 2 at ui/borrowck/issue-17263.rs:7:10: 7:11
            debug b => _4;               // in scope 2 at ui/borrowck/issue-17263.rs:7:13: 7:14
            let mut _8: std::boxed::Box<Foo>; // in scope 2 at ui/borrowck/issue-17263.rs:9:9: 9:16
            scope 3 {
                debug foo => _8;         // in scope 3 at ui/borrowck/issue-17263.rs:9:9: 9:16
                let _10: &mut isize;     // in scope 3 at ui/borrowck/issue-17263.rs:10:10: 10:11
                let _11: &isize;         // in scope 3 at ui/borrowck/issue-17263.rs:10:13: 10:14
                scope 4 {
                    debug c => _10;      // in scope 4 at ui/borrowck/issue-17263.rs:10:10: 10:11
                    debug d => _11;      // in scope 4 at ui/borrowck/issue-17263.rs:10:13: 10:14
                }
            }
        }
    }

    bb0: {
        _2 = Foo { a: const 1_isize, b: const 2_isize }; // scope 0 at ui/borrowck/issue-17263.rs:6:34: 6:52
        _1 = Box::<Foo>::new(move _2) -> bb1; // scope 0 at ui/borrowck/issue-17263.rs:6:25: 6:53
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-17263.rs:6:25: 6:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Foo) -> Box<Foo> {Box::<Foo>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _23 = (((_1.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 1 at ui/borrowck/issue-17263.rs:7:19: 7:27
        _6 = &mut ((*_23).0: isize);     // scope 1 at ui/borrowck/issue-17263.rs:7:19: 7:27
        _24 = (((_1.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 1 at ui/borrowck/issue-17263.rs:7:29: 7:37
        _7 = &mut ((*_24).1: isize);     // scope 1 at ui/borrowck/issue-17263.rs:7:29: 7:37
        _5 = (move _6, move _7);         // scope 1 at ui/borrowck/issue-17263.rs:7:18: 7:38
        _3 = move (_5.0: &mut isize);    // scope 1 at ui/borrowck/issue-17263.rs:7:10: 7:11
        _4 = move (_5.1: &mut isize);    // scope 1 at ui/borrowck/issue-17263.rs:7:13: 7:14
        _9 = Foo { a: const 1_isize, b: const 2_isize }; // scope 2 at ui/borrowck/issue-17263.rs:9:36: 9:54
        _8 = Box::<Foo>::new(move _9) -> [return: bb2, unwind: bb10]; // scope 2 at ui/borrowck/issue-17263.rs:9:27: 9:55
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-17263.rs:9:27: 9:35
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(Foo) -> Box<Foo> {Box::<Foo>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _25 = (((_8.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 3 at ui/borrowck/issue-17263.rs:10:19: 10:29
        _13 = &mut ((*_25).0: isize);    // scope 3 at ui/borrowck/issue-17263.rs:10:19: 10:29
        _26 = (((_8.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 3 at ui/borrowck/issue-17263.rs:10:31: 10:37
        _14 = &((*_26).1: isize);        // scope 3 at ui/borrowck/issue-17263.rs:10:31: 10:37
        _12 = (move _13, move _14);      // scope 3 at ui/borrowck/issue-17263.rs:10:18: 10:38
        _10 = move (_12.0: &mut isize);  // scope 3 at ui/borrowck/issue-17263.rs:10:10: 10:11
        _11 = (_12.1: &isize);           // scope 3 at ui/borrowck/issue-17263.rs:10:13: 10:14
        _16 = _11;                       // scope 4 at ui/borrowck/issue-17263.rs:16:13: 16:14
        _15 = use_imm::<isize>(move _16) -> [return: bb3, unwind: bb9]; // scope 4 at ui/borrowck/issue-17263.rs:16:5: 16:15
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-17263.rs:16:5: 16:12
                                         // + literal: Const { ty: for<'a> fn(&'a isize) {use_imm::<isize>}, val: Value(<ZST>) }
    }

    bb3: {
        _18 = &mut (*_10);               // scope 4 at ui/borrowck/issue-17263.rs:17:13: 17:14
        _17 = use_mut::<isize>(move _18) -> [return: bb4, unwind: bb9]; // scope 4 at ui/borrowck/issue-17263.rs:17:5: 17:15
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-17263.rs:17:5: 17:12
                                         // + literal: Const { ty: for<'a> fn(&'a mut isize) {use_mut::<isize>}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = &mut (*_4);                // scope 4 at ui/borrowck/issue-17263.rs:18:13: 18:14
        _19 = use_mut::<isize>(move _20) -> [return: bb5, unwind: bb9]; // scope 4 at ui/borrowck/issue-17263.rs:18:5: 18:15
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-17263.rs:18:5: 18:12
                                         // + literal: Const { ty: for<'a> fn(&'a mut isize) {use_mut::<isize>}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = &mut (*_3);                // scope 4 at ui/borrowck/issue-17263.rs:19:13: 19:14
        _21 = use_mut::<isize>(move _22) -> [return: bb6, unwind: bb9]; // scope 4 at ui/borrowck/issue-17263.rs:19:5: 19:15
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-17263.rs:19:5: 19:12
                                         // + literal: Const { ty: for<'a> fn(&'a mut isize) {use_mut::<isize>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_8) -> [return: bb7, unwind: bb10]; // scope 2 at ui/borrowck/issue-17263.rs:20:1: 20:2
    }

    bb7: {
        drop(_1) -> bb8;                 // scope 0 at ui/borrowck/issue-17263.rs:20:1: 20:2
    }

    bb8: {
        return;                          // scope 0 at ui/borrowck/issue-17263.rs:20:2: 20:2
    }

    bb9 (cleanup): {
        drop(_8) -> bb10;                // scope 2 at ui/borrowck/issue-17263.rs:20:1: 20:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/borrowck/issue-17263.rs:20:1: 20:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/issue-17263.rs:5:1: 20:2
    }
}

fn use_mut(_1: &mut T) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/issue-17263.rs:22:26: 22:26

    bb0: {
        return;                          // scope 0 at ui/borrowck/issue-17263.rs:22:29: 22:29
    }
}

fn use_imm(_1: &T) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/issue-17263.rs:23:22: 23:22

    bb0: {
        return;                          // scope 0 at ui/borrowck/issue-17263.rs:23:25: 23:25
    }
}
