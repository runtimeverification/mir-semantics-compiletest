// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:4:1: 4:16>::drop(_1: &mut S) -> () {
    debug self => _1;                    // in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:5:13: 5:22
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:5:24: 5:24

    bb0: {
        return;                          // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:5:27: 5:27
    }
}

fn move_in_match() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:8:20: 8:20
    let mut _1: S;                       // in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:9:11: 9:31
    let mut _2: std::string::String;     // in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:9:13: 9:30
    let mut _3: &str;                    // in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:9:13: 9:30
    let _4: &str;                        // in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:9:13: 9:18
    let _5: &std::string::String;        // in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:11:11: 11:17
    scope 1 {
        debug _s => _5;                  // in scope 1 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:11:11: 11:17
    }

    bb0: {
        _4 = const "foo";                // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:9:13: 9:18
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:9:13: 9:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:9:13: 9:30
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:9:13: 9:30
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:9:19: 9:28
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = S(move _2);                 // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:9:11: 9:31
        _5 = &(_1.0: std::string::String); // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:11:11: 11:17
        drop(_1) -> bb2;                 // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:13:1: 13:2
    }

    bb2: {
        return;                          // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:13:2: 13:2
    }
}

fn move_in_let() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:15:18: 15:18
    let _1: &std::string::String;        // in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:16:11: 16:17
    let mut _2: S;                       // in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:16:21: 16:41
    let mut _3: std::string::String;     // in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:16:23: 16:40
    let mut _4: &str;                    // in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:16:23: 16:40
    let _5: &str;                        // in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:16:23: 16:28
    scope 1 {
        debug _s => _1;                  // in scope 1 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:16:11: 16:17
    }

    bb0: {
        _5 = const "foo";                // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:16:23: 16:28
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:16:23: 16:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:16:23: 16:40
        _3 = <str as ToString>::to_string(move _4) -> bb1; // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:16:23: 16:40
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:16:29: 16:38
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = S(move _3);                 // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:16:21: 16:41
        _1 = &(_2.0: std::string::String); // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:16:11: 16:17
        drop(_2) -> bb2;                 // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:18:1: 18:2
    }

    bb2: {
        return;                          // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:18:2: 18:2
    }
}

fn move_in_fn_arg(_1: S) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:20:33: 20:33
    let _2: &std::string::String;        // in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:20:21: 20:27
    scope 1 {
        debug _s => _2;                  // in scope 1 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:20:21: 20:27
    }

    bb0: {
        _2 = &(_1.0: std::string::String); // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:20:21: 20:27
        drop(_1) -> bb1;                 // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:22:1: 22:2
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:22:2: 22:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:24:11: 24:11

    bb0: {
        return;                          // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:24:13: 24:13
    }
}

fn S(_1: String) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:3:1: 3:9

    bb0: {
        _0 = S(move _1);                 // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:3:1: 3:9
        return;                          // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:3:1: 3:9
    }
}

// MIR FOR CTFE
fn S(_1: String) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:3:1: 3:9

    bb0: {
        _0 = S(move _1);                 // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:3:1: 3:9
        return;                          // scope 0 at ui/borrowck/borrowck-move-out-of-tuple-struct-with-dtor_fixed.rs:3:1: 3:9
    }
}
