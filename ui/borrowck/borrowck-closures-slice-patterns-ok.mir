// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn arr_by_ref(_1: [String; 3]) -> () {
    debug x => _1;                       // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:7:15: 7:16
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:7:31: 7:31
    let _2: &[std::string::String; 3];   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:8:9: 8:10
    let mut _4: &[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 11:6
    let _5: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:12:5: 12:8
    let mut _6: &[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 9:15]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:12:5: 12:6
    let mut _7: ();                      // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:12:5: 12:8
    let _8: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:13:5: 13:8
    let mut _9: &[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 9:15]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:13:5: 13:6
    let mut _10: ();                     // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:13:5: 13:8
    let _11: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:15:5: 15:12
    let mut _12: &[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:15:10: 15:11
    let _13: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:17:5: 17:12
    let mut _14: [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:17:10: 17:11
    let mut _15: bool;                   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:18:1: 18:2
    scope 1 {
        debug r => _2;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:8:9: 8:10
        let _3: [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 9:15]; // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:9: 9:10
        scope 2 {
            debug f => _3;               // in scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:9: 9:10
        }
    }

    bb0: {
        _15 = const false;               // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:8:9: 8:10
        _15 = const true;                // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:8:9: 8:10
        _2 = &_1;                        // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:8:13: 8:15
        _4 = &_1;                        // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 11:6
        _3 = [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 9:15] { x: move _4 }; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 11:6
                                         // closure
                                         // + def_id: DefId(0:5 ~ borrowck_closures_slice_patterns_ok[d45b]::arr_by_ref::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()),
                                         //     (&[std::string::String; 3],),
                                         // ]
        _6 = &_3;                        // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:12:5: 12:6
        _5 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 9:15] as Fn<()>>::call(move _6, move _7) -> [return: bb1, unwind: bb7]; // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:12:5: 12:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:12:5: 12:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 9:15], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 9:15] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 9:15] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &_3;                        // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:13:5: 13:6
        _8 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 9:15] as Fn<()>>::call(move _9, move _10) -> [return: bb2, unwind: bb7]; // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:13:5: 13:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:13:5: 13:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 9:15], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 9:15] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 9:15] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = _2;                        // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:15:10: 15:11
        _11 = std::mem::drop::<&[String; 3]>(move _12) -> [return: bb3, unwind: bb7]; // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:15:5: 15:12
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:15:5: 15:9
                                         // + literal: Const { ty: fn(&[String; 3]) {std::mem::drop::<&[String; 3]>}, val: Value(<ZST>) }
    }

    bb3: {
        _15 = const false;               // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:17:10: 17:11
        _14 = move _1;                   // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:17:10: 17:11
        _13 = std::mem::drop::<[String; 3]>(move _14) -> [return: bb4, unwind: bb7]; // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:17:5: 17:12
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:17:5: 17:9
                                         // + literal: Const { ty: fn([String; 3]) {std::mem::drop::<[String; 3]>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:18:2: 18:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:7:1: 18:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:18:1: 18:2
    }

    bb7 (cleanup): {
        switchInt(_15) -> [0: bb5, otherwise: bb6]; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:18:1: 18:2
    }
}

arr_by_ref::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:7:27: 7:28

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:7:27: 7:28
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:7:27: 7:28
    }
}

fn arr_by_ref::{closure#0}(_1: &[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 9:15]) -> () {
    debug x => (*((*_1).0: &[std::string::String; 3])); // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:7:15: 7:16
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:16: 9:16
    let _2: &std::string::String;        // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:10:14: 10:19
    let _3: &[std::string::String; 2];   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:10:21: 10:26
    let mut _4: &[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 11:6
    let mut _5: &[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:9:13: 11:6
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:10:14: 10:19
        debug z => _3;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:10:21: 10:26
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &[std::string::String; 3]); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:10:14: 10:19
        _2 = &(*_4)[0 of 3];             // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:10:14: 10:19
        _5 = deref_copy ((*_1).0: &[std::string::String; 3]); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:10:21: 10:26
        _3 = &(*_5)[1..3];               // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:10:21: 10:26
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:11:6: 11:6
    }
}

fn arr_by_mut(_1: [String; 3]) -> () {
    debug x => _1;                       // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:20:15: 20:20
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:20:35: 20:35
    let mut _2: [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 21:19]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:9: 21:14
    let mut _3: &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 23:6
    let _4: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:24:5: 24:8
    let mut _5: &mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 21:19]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:24:5: 24:6
    let mut _6: ();                      // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:24:5: 24:8
    let _7: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:25:5: 25:8
    let mut _8: &mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 21:19]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:25:5: 25:6
    let mut _9: ();                      // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:25:5: 25:8
    let _10: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:26:5: 26:12
    let mut _11: [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:26:10: 26:11
    let mut _12: bool;                   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:27:1: 27:2
    scope 1 {
        debug f => _2;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:9: 21:14
    }

    bb0: {
        _12 = const false;               // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:9: 21:14
        _12 = const true;                // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:9: 21:14
        _3 = &mut _1;                    // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 23:6
        _2 = [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 21:19] { x: move _3 }; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 23:6
                                         // closure
                                         // + def_id: DefId(0:8 ~ borrowck_closures_slice_patterns_ok[d45b]::arr_by_mut::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()),
                                         //     (&mut [std::string::String; 3],),
                                         // ]
        _5 = &mut _2;                    // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:24:5: 24:6
        _4 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 21:19] as FnMut<()>>::call_mut(move _5, move _6) -> [return: bb1, unwind: bb6]; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:24:5: 24:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:24:5: 24:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 21:19], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 21:19] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 21:19] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &mut _2;                    // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:25:5: 25:6
        _7 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 21:19] as FnMut<()>>::call_mut(move _8, move _9) -> [return: bb2, unwind: bb6]; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:25:5: 25:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:25:5: 25:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 21:19], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 21:19] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 21:19] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = const false;               // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:26:10: 26:11
        _11 = move _1;                   // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:26:10: 26:11
        _10 = std::mem::drop::<[String; 3]>(move _11) -> [return: bb3, unwind: bb6]; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:26:5: 26:12
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:26:5: 26:9
                                         // + literal: Const { ty: fn([String; 3]) {std::mem::drop::<[String; 3]>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:27:2: 27:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:20:1: 27:2
    }

    bb5 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:27:1: 27:2
    }

    bb6 (cleanup): {
        switchInt(_12) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:27:1: 27:2
    }
}

arr_by_mut::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:20:31: 20:32

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:20:31: 20:32
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:20:31: 20:32
    }
}

fn arr_by_mut::{closure#0}(_1: &mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 21:19]) -> () {
    debug x => (*((*_1).0: &mut [std::string::String; 3])); // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:20:15: 20:20
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:20: 21:20
    let _2: &mut std::string::String;    // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:22:14: 22:23
    let _3: &mut [std::string::String; 2]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:22:25: 22:34
    let mut _4: &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 23:6
    let mut _5: &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:21:17: 23:6
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:22:14: 22:23
        debug z => _3;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:22:25: 22:34
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &mut [std::string::String; 3]); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:22:14: 22:23
        _2 = &mut (*_4)[0 of 3];         // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:22:14: 22:23
        _5 = deref_copy ((*_1).0: &mut [std::string::String; 3]); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:22:25: 22:34
        _3 = &mut (*_5)[1..3];           // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:22:25: 22:34
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:23:6: 23:6
    }
}

fn arr_by_move(_1: [String; 3]) -> () {
    debug x => _1;                       // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:29:16: 29:17
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:29:32: 29:32
    let _2: [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:30:13: 30:15]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:30:9: 30:10
    let _3: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:33:5: 33:8
    let mut _4: [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:30:13: 30:15]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:33:5: 33:6
    let mut _5: ();                      // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:33:5: 33:8
    scope 1 {
        debug f => _2;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:30:9: 30:10
    }

    bb0: {
        _2 = [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:30:13: 30:15] { x: move _1 }; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:30:13: 32:6
                                         // closure
                                         // + def_id: DefId(0:11 ~ borrowck_closures_slice_patterns_ok[d45b]::arr_by_move::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     ([std::string::String; 3],),
                                         // ]
        _4 = move _2;                    // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:33:5: 33:6
        _3 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:30:13: 30:15] as FnOnce<()>>::call_once(move _4, move _5) -> bb1; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:33:5: 33:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:33:5: 33:6
                                         // + literal: Const { ty: extern "rust-call" fn([closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:30:13: 30:15], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:30:13: 30:15] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:30:13: 30:15] as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:34:2: 34:2
    }
}

arr_by_move::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:29:28: 29:29

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:29:28: 29:29
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:29:28: 29:29
    }
}

fn arr_by_move::{closure#0}(_1: [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:30:13: 30:15]) -> () {
    debug x => (_1.0: [std::string::String; 3]); // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:29:16: 29:17
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:30:16: 30:16
    let _2: std::string::String;         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:31:14: 31:15
    let _3: [std::string::String; 2];    // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:31:17: 31:18
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:31:14: 31:15
        debug z => _3;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:31:17: 31:18
    }

    bb0: {
        _2 = move (_1.0: [std::string::String; 3])[0 of 3]; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:31:14: 31:15
        _3 = move (_1.0: [std::string::String; 3])[1..3]; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:31:17: 31:18
        drop(_3) -> [return: bb1, unwind: bb3]; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:32:5: 32:6
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:32:5: 32:6
    }

    bb2: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:32:6: 32:6
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:32:5: 32:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:30:13: 32:6
    }
}

fn arr_ref_by_ref(_1: &[String; 3]) -> () {
    debug x => _1;                       // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:36:19: 36:20
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:36:36: 36:36
    let _2: &&[std::string::String; 3];  // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:37:9: 37:10
    let mut _4: &&[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 40:6
    let mut _6: &&[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 43:6
    let _7: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:44:5: 44:8
    let mut _8: &[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 38:15]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:44:5: 44:6
    let mut _9: ();                      // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:44:5: 44:8
    let _10: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:45:5: 45:8
    let mut _11: &[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 41:15]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:45:5: 45:6
    let mut _12: ();                     // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:45:5: 45:8
    let _13: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:46:5: 46:8
    let mut _14: &[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 38:15]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:46:5: 46:6
    let mut _15: ();                     // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:46:5: 46:8
    let _16: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:47:5: 47:8
    let mut _17: &[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 41:15]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:47:5: 47:6
    let mut _18: ();                     // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:47:5: 47:8
    let _19: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:48:5: 48:12
    let mut _20: &&[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:48:10: 48:11
    let _21: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:49:5: 49:12
    let mut _22: &[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:49:10: 49:11
    scope 1 {
        debug r => _2;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:37:9: 37:10
        let _3: [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 38:15]; // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:9: 38:10
        scope 2 {
            debug f => _3;               // in scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:9: 38:10
            let _5: [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 41:15]; // in scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:9: 41:10
            scope 3 {
                debug g => _5;           // in scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:9: 41:10
            }
        }
    }

    bb0: {
        _2 = &_1;                        // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:37:13: 37:15
        _4 = &_1;                        // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 40:6
        _3 = [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 38:15] { x: move _4 }; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 40:6
                                         // closure
                                         // + def_id: DefId(0:14 ~ borrowck_closures_slice_patterns_ok[d45b]::arr_ref_by_ref::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()),
                                         //     (&&[std::string::String; 3],),
                                         // ]
        _6 = &_1;                        // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 43:6
        _5 = [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 41:15] { x: move _6 }; // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 43:6
                                         // closure
                                         // + def_id: DefId(0:15 ~ borrowck_closures_slice_patterns_ok[d45b]::arr_ref_by_ref::{closure#1})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()),
                                         //     (&&[std::string::String; 3],),
                                         // ]
        _8 = &_3;                        // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:44:5: 44:6
        _7 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 38:15] as Fn<()>>::call(move _8, move _9) -> bb1; // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:44:5: 44:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:44:5: 44:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 38:15], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 38:15] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 38:15] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = &_5;                       // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:45:5: 45:6
        _10 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 41:15] as Fn<()>>::call(move _11, move _12) -> bb2; // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:45:5: 45:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:45:5: 45:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 41:15], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 41:15] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 41:15] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        _14 = &_3;                       // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:46:5: 46:6
        _13 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 38:15] as Fn<()>>::call(move _14, move _15) -> bb3; // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:46:5: 46:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:46:5: 46:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 38:15], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 38:15] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 38:15] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb3: {
        _17 = &_5;                       // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:47:5: 47:6
        _16 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 41:15] as Fn<()>>::call(move _17, move _18) -> bb4; // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:47:5: 47:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:47:5: 47:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 41:15], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 41:15] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 41:15] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = _2;                        // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:48:10: 48:11
        _19 = std::mem::drop::<&&[String; 3]>(move _20) -> bb5; // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:48:5: 48:12
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:48:5: 48:9
                                         // + literal: Const { ty: fn(&&[String; 3]) {std::mem::drop::<&&[String; 3]>}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = _1;                        // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:49:10: 49:11
        _21 = std::mem::drop::<&[String; 3]>(move _22) -> bb6; // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:49:5: 49:12
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:49:5: 49:9
                                         // + literal: Const { ty: fn(&[String; 3]) {std::mem::drop::<&[String; 3]>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:50:2: 50:2
    }
}

arr_ref_by_ref::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:36:32: 36:33

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:36:32: 36:33
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:36:32: 36:33
    }
}

fn arr_ref_by_ref::{closure#0}(_1: &[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 38:15]) -> () {
    debug x => (*((*_1).0: &&[std::string::String; 3])); // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:36:19: 36:20
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:16: 38:16
    let _2: &std::string::String;        // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:39:14: 39:19
    let _3: &[std::string::String; 2];   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:39:21: 39:26
    let mut _4: &&[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 40:6
    let mut _5: &[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 40:6
    let mut _6: &&[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 40:6
    let mut _7: &[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:38:13: 40:6
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:39:14: 39:19
        debug z => _3;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:39:21: 39:26
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &&[std::string::String; 3]); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:39:14: 39:19
        _5 = deref_copy (*_4);           // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:39:14: 39:19
        _2 = &(*_5)[0 of 3];             // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:39:14: 39:19
        _6 = deref_copy ((*_1).0: &&[std::string::String; 3]); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:39:21: 39:26
        _7 = deref_copy (*_6);           // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:39:21: 39:26
        _3 = &(*_7)[1..3];               // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:39:21: 39:26
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:40:6: 40:6
    }
}

fn arr_ref_by_ref::{closure#1}(_1: &[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 41:15]) -> () {
    debug x => (*((*_1).0: &&[std::string::String; 3])); // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:36:19: 36:20
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:16: 41:16
    let _2: &std::string::String;        // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:42:14: 42:15
    let _3: &[std::string::String; 2];   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:42:17: 42:18
    let mut _4: &&[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 43:6
    let mut _5: &[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 43:6
    let mut _6: &&[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 43:6
    let mut _7: &[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:41:13: 43:6
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:42:14: 42:15
        debug z => _3;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:42:17: 42:18
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &&[std::string::String; 3]); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:42:14: 42:15
        _5 = deref_copy (*_4);           // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:42:14: 42:15
        _2 = &(*_5)[0 of 3];             // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:42:14: 42:15
        _6 = deref_copy ((*_1).0: &&[std::string::String; 3]); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:42:17: 42:18
        _7 = deref_copy (*_6);           // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:42:17: 42:18
        _3 = &(*_7)[1..3];               // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:42:17: 42:18
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:43:6: 43:6
    }
}

fn arr_ref_by_mut(_1: &mut [String; 3]) -> () {
    debug x => _1;                       // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:52:19: 52:20
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:52:40: 52:40
    let mut _2: [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 53:19]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:9: 53:14
    let mut _3: &mut &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 55:6
    let _4: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:56:5: 56:8
    let mut _5: &mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 53:19]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:56:5: 56:6
    let mut _6: ();                      // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:56:5: 56:8
    let _7: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:57:5: 57:8
    let mut _8: &mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 53:19]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:57:5: 57:6
    let mut _9: ();                      // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:57:5: 57:8
    let mut _11: &mut &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 62:6
    let _12: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:63:5: 63:8
    let mut _13: &mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 58:19]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:63:5: 63:6
    let mut _14: ();                     // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:63:5: 63:8
    let _15: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:64:5: 64:8
    let mut _16: &mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 58:19]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:64:5: 64:6
    let mut _17: ();                     // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:64:5: 64:8
    let _18: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:65:5: 65:12
    let mut _19: &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:65:10: 65:11
    scope 1 {
        debug f => _2;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:9: 53:14
        let mut _10: [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 58:19]; // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:9: 58:14
        scope 2 {
            debug g => _10;              // in scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:9: 58:14
        }
    }

    bb0: {
        _3 = &mut _1;                    // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 55:6
        _2 = [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 53:19] { x: move _3 }; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 55:6
                                         // closure
                                         // + def_id: DefId(0:18 ~ borrowck_closures_slice_patterns_ok[d45b]::arr_ref_by_mut::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()),
                                         //     (&mut &mut [std::string::String; 3],),
                                         // ]
        _5 = &mut _2;                    // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:56:5: 56:6
        _4 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 53:19] as FnMut<()>>::call_mut(move _5, move _6) -> bb1; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:56:5: 56:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:56:5: 56:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 53:19], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 53:19] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 53:19] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &mut _2;                    // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:57:5: 57:6
        _7 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 53:19] as FnMut<()>>::call_mut(move _8, move _9) -> bb2; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:57:5: 57:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:57:5: 57:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 53:19], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 53:19] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 53:19] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &mut _1;                   // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 62:6
        _10 = [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 58:19] { x: move _11 }; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 62:6
                                         // closure
                                         // + def_id: DefId(0:19 ~ borrowck_closures_slice_patterns_ok[d45b]::arr_ref_by_mut::{closure#1})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()),
                                         //     (&mut &mut [std::string::String; 3],),
                                         // ]
        _13 = &mut _10;                  // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:63:5: 63:6
        _12 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 58:19] as FnMut<()>>::call_mut(move _13, move _14) -> bb3; // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:63:5: 63:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:63:5: 63:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 58:19], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 58:19] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 58:19] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _16 = &mut _10;                  // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:64:5: 64:6
        _15 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 58:19] as FnMut<()>>::call_mut(move _16, move _17) -> bb4; // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:64:5: 64:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:64:5: 64:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 58:19], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 58:19] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 58:19] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = move _1;                   // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:65:10: 65:11
        _18 = std::mem::drop::<&mut [String; 3]>(move _19) -> bb5; // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:65:5: 65:12
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:65:5: 65:9
                                         // + literal: Const { ty: fn(&mut [String; 3]) {std::mem::drop::<&mut [String; 3]>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:66:2: 66:2
    }
}

arr_ref_by_mut::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:52:36: 52:37

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:52:36: 52:37
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:52:36: 52:37
    }
}

fn arr_ref_by_mut::{closure#0}(_1: &mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 53:19]) -> () {
    debug x => (*((*_1).0: &mut &mut [std::string::String; 3])); // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:52:19: 52:20
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:20: 53:20
    let _2: &mut std::string::String;    // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:54:14: 54:23
    let _3: &mut [std::string::String; 2]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:54:25: 54:34
    let mut _4: &mut &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 55:6
    let mut _5: &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 55:6
    let mut _6: &mut &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 55:6
    let mut _7: &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:53:17: 55:6
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:54:14: 54:23
        debug z => _3;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:54:25: 54:34
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &mut &mut [std::string::String; 3]); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:54:14: 54:23
        _5 = deref_copy (*_4);           // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:54:14: 54:23
        _2 = &mut (*_5)[0 of 3];         // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:54:14: 54:23
        _6 = deref_copy ((*_1).0: &mut &mut [std::string::String; 3]); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:54:25: 54:34
        _7 = deref_copy (*_6);           // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:54:25: 54:34
        _3 = &mut (*_7)[1..3];           // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:54:25: 54:34
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:55:6: 55:6
    }
}

fn arr_ref_by_mut::{closure#1}(_1: &mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 58:19]) -> () {
    debug x => (*((*_1).0: &mut &mut [std::string::String; 3])); // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:52:19: 52:20
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:20: 58:20
    let _2: &mut std::string::String;    // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:59:14: 59:15
    let _3: &mut [std::string::String; 2]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:59:17: 59:18
    let _4: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:61:9: 61:37
    let mut _5: &mut std::string::String; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:61:24: 61:25
    let mut _6: &mut std::string::String; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:61:27: 61:36
    let mut _7: &mut std::string::String; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:61:27: 61:36
    let _8: usize;                       // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:61:34: 61:35
    let mut _9: &mut &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 62:6
    let mut _10: &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 62:6
    let mut _11: &mut &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 62:6
    let mut _12: &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:58:17: 62:6
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:59:14: 59:15
        debug z => _3;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:59:17: 59:18
    }

    bb0: {
        _9 = deref_copy ((*_1).0: &mut &mut [std::string::String; 3]); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:59:14: 59:15
        _10 = deref_copy (*_9);          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:59:14: 59:15
        _2 = &mut (*_10)[0 of 3];        // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:59:14: 59:15
        _11 = deref_copy ((*_1).0: &mut &mut [std::string::String; 3]); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:59:17: 59:18
        _12 = deref_copy (*_11);         // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:59:17: 59:18
        _3 = &mut (*_12)[1..3];          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:59:17: 59:18
        _5 = &mut (*_2);                 // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:61:24: 61:25
        _8 = const 0_usize;              // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:61:34: 61:35
        _7 = &mut (*_3)[_8];             // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:61:27: 61:36
        _6 = &mut (*_7);                 // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:61:27: 61:36
        _4 = std::mem::swap::<String>(move _5, move _6) -> bb1; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:61:9: 61:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:61:9: 61:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, &'b mut String) {std::mem::swap::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:62:6: 62:6
    }
}

fn arr_box_by_move(_1: Box<[String; 3]>) -> () {
    debug x => _1;                       // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:68:20: 68:21
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:68:41: 68:41
    let _2: [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:13: 69:15]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:9: 69:10
    let _3: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:72:5: 72:8
    let mut _4: [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:13: 69:15]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:72:5: 72:6
    let mut _5: ();                      // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:72:5: 72:8
    scope 1 {
        debug f => _2;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:9: 69:10
    }

    bb0: {
        _2 = [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:13: 69:15] { x: move _1 }; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:13: 71:6
                                         // closure
                                         // + def_id: DefId(0:22 ~ borrowck_closures_slice_patterns_ok[d45b]::arr_box_by_move::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (std::boxed::Box<[std::string::String; 3]>,),
                                         // ]
        _4 = move _2;                    // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:72:5: 72:6
        _3 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:13: 69:15] as FnOnce<()>>::call_once(move _4, move _5) -> bb1; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:72:5: 72:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:72:5: 72:6
                                         // + literal: Const { ty: extern "rust-call" fn([closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:13: 69:15], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:13: 69:15] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:13: 69:15] as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:73:2: 73:2
    }
}

arr_box_by_move::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:68:36: 68:37

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:68:36: 68:37
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:68:36: 68:37
    }
}

fn arr_box_by_move::{closure#0}(_1: [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:13: 69:15]) -> () {
    debug x => (_1.0: std::boxed::Box<[std::string::String; 3]>); // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:68:20: 68:21
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:16: 69:16
    let _2: std::string::String;         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:70:14: 70:15
    let _3: [std::string::String; 2];    // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:70:17: 70:18
    let mut _4: std::boxed::Box<[std::string::String; 3]>; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:13: 71:6
    let mut _5: std::boxed::Box<[std::string::String; 3]>; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:13: 71:6
    let mut _6: ();                      // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:71:5: 71:6
    let mut _7: ();                      // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:71:5: 71:6
    let mut _8: *const [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:13: 71:6
    let mut _9: *const [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:13: 71:6
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:70:14: 70:15
        debug z => _3;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:70:17: 70:18
    }

    bb0: {
        _4 = deref_copy (_1.0: std::boxed::Box<[std::string::String; 3]>); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:70:14: 70:15
        _8 = (((_4.0: std::ptr::Unique<[std::string::String; 3]>).0: std::ptr::NonNull<[std::string::String; 3]>).0: *const [std::string::String; 3]); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:70:14: 70:15
        _2 = move (*_8)[0 of 3];         // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:70:14: 70:15
        _5 = deref_copy (_1.0: std::boxed::Box<[std::string::String; 3]>); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:70:17: 70:18
        _9 = (((_5.0: std::ptr::Unique<[std::string::String; 3]>).0: std::ptr::NonNull<[std::string::String; 3]>).0: *const [std::string::String; 3]); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:70:17: 70:18
        _3 = move (*_9)[1..3];           // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:70:17: 70:18
        drop(_3) -> [return: bb1, unwind: bb3]; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:71:5: 71:6
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind: bb6]; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:71:5: 71:6
    }

    bb2: {
        _6 = alloc::alloc::box_free::<[String; 3], std::alloc::Global>(move ((_1.0: std::boxed::Box<[std::string::String; 3]>).0: std::ptr::Unique<[std::string::String; 3]>), move ((_1.0: std::boxed::Box<[std::string::String; 3]>).1: std::alloc::Global)) -> bb5; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:71:5: 71:6
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:71:5: 71:6
                                         // + literal: Const { ty: unsafe fn(Unique<[String; 3]>, std::alloc::Global) {alloc::alloc::box_free::<[String; 3], std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb3 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:71:5: 71:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:69:13: 71:6
    }

    bb5: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:71:6: 71:6
    }

    bb6 (cleanup): {
        _7 = alloc::alloc::box_free::<[String; 3], std::alloc::Global>(move ((_1.0: std::boxed::Box<[std::string::String; 3]>).0: std::ptr::Unique<[std::string::String; 3]>), move ((_1.0: std::boxed::Box<[std::string::String; 3]>).1: std::alloc::Global)) -> bb4; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:71:5: 71:6
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:71:5: 71:6
                                         // + literal: Const { ty: unsafe fn(Unique<[String; 3]>, std::alloc::Global) {alloc::alloc::box_free::<[String; 3], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

fn slice_by_ref(_1: &[String]) -> () {
    debug x => _1;                       // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:75:17: 75:18
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:75:31: 75:31
    let _2: &&[std::string::String];     // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:76:9: 76:10
    let mut _4: &&[std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 79:6
    let mut _6: &&[std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 82:6
    let _7: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:83:5: 83:8
    let mut _8: &[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 77:15]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:83:5: 83:6
    let mut _9: ();                      // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:83:5: 83:8
    let _10: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:84:5: 84:8
    let mut _11: &[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 80:15]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:84:5: 84:6
    let mut _12: ();                     // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:84:5: 84:8
    let _13: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:85:5: 85:8
    let mut _14: &[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 77:15]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:85:5: 85:6
    let mut _15: ();                     // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:85:5: 85:8
    let _16: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:86:5: 86:8
    let mut _17: &[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 80:15]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:86:5: 86:6
    let mut _18: ();                     // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:86:5: 86:8
    let _19: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:87:5: 87:12
    let mut _20: &&[std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:87:10: 87:11
    let _21: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:88:5: 88:12
    let mut _22: &[std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:88:10: 88:11
    scope 1 {
        debug r => _2;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:76:9: 76:10
        let _3: [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 77:15]; // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:9: 77:10
        scope 2 {
            debug f => _3;               // in scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:9: 77:10
            let _5: [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 80:15]; // in scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:9: 80:10
            scope 3 {
                debug g => _5;           // in scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:9: 80:10
            }
        }
    }

    bb0: {
        _2 = &_1;                        // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:76:13: 76:15
        _4 = &_1;                        // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 79:6
        _3 = [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 77:15] { x: move _4 }; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 79:6
                                         // closure
                                         // + def_id: DefId(0:24 ~ borrowck_closures_slice_patterns_ok[d45b]::slice_by_ref::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()),
                                         //     (&&[std::string::String],),
                                         // ]
        _6 = &_1;                        // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 82:6
        _5 = [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 80:15] { x: move _6 }; // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 82:6
                                         // closure
                                         // + def_id: DefId(0:25 ~ borrowck_closures_slice_patterns_ok[d45b]::slice_by_ref::{closure#1})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()),
                                         //     (&&[std::string::String],),
                                         // ]
        _8 = &_3;                        // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:83:5: 83:6
        _7 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 77:15] as Fn<()>>::call(move _8, move _9) -> bb1; // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:83:5: 83:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:83:5: 83:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 77:15], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 77:15] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 77:15] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = &_5;                       // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:84:5: 84:6
        _10 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 80:15] as Fn<()>>::call(move _11, move _12) -> bb2; // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:84:5: 84:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:84:5: 84:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 80:15], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 80:15] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 80:15] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        _14 = &_3;                       // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:85:5: 85:6
        _13 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 77:15] as Fn<()>>::call(move _14, move _15) -> bb3; // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:85:5: 85:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:85:5: 85:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 77:15], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 77:15] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 77:15] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb3: {
        _17 = &_5;                       // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:86:5: 86:6
        _16 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 80:15] as Fn<()>>::call(move _17, move _18) -> bb4; // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:86:5: 86:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:86:5: 86:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 80:15], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 80:15] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 80:15] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = _2;                        // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:87:10: 87:11
        _19 = std::mem::drop::<&&[String]>(move _20) -> bb5; // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:87:5: 87:12
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:87:5: 87:9
                                         // + literal: Const { ty: fn(&&[String]) {std::mem::drop::<&&[String]>}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = _1;                        // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:88:10: 88:11
        _21 = std::mem::drop::<&[String]>(move _22) -> bb6; // scope 3 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:88:5: 88:12
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:88:5: 88:9
                                         // + literal: Const { ty: fn(&[String]) {std::mem::drop::<&[String]>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:89:2: 89:2
    }
}

fn slice_by_ref::{closure#0}(_1: &[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 77:15]) -> () {
    debug x => (*((*_1).0: &&[std::string::String])); // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:75:17: 75:18
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:16: 77:16
    let mut _2: usize;                   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:16: 78:35
    let mut _3: usize;                   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:16: 78:35
    let mut _4: bool;                    // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:16: 78:35
    let mut _7: &&[std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 79:6
    let mut _8: &[std::string::String];  // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 79:6
    let mut _9: &&[std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 79:6
    let mut _10: &[std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 79:6
    let mut _11: &&[std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 79:6
    let mut _12: &[std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:77:13: 79:6
    scope 1 {
        debug y => _5;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:17: 78:22
        debug z => _6;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:24: 78:29
        let _5: &std::string::String;    // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:17: 78:22
        let _6: &[std::string::String];  // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:24: 78:29
    }

    bb0: {
        _7 = deref_copy ((*_1).0: &&[std::string::String]); // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:16: 78:35
        _8 = deref_copy (*_7);           // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:16: 78:35
        _2 = Len((*_8));                 // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:16: 78:35
        _3 = const 1_usize;              // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:16: 78:35
        _4 = Ge(move _2, move _3);       // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:16: 78:35
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:16: 78:35
    }

    bb1: {
        _9 = deref_copy ((*_1).0: &&[std::string::String]); // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:17: 78:22
        _10 = deref_copy (*_9);          // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:17: 78:22
        _5 = &(*_10)[0 of 1];            // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:17: 78:22
        _11 = deref_copy ((*_1).0: &&[std::string::String]); // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:24: 78:29
        _12 = deref_copy (*_11);         // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:24: 78:29
        _6 = &(*_12)[1:];                // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:24: 78:29
        goto -> bb2;                     // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:78:9: 78:43
    }

    bb2: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:79:6: 79:6
    }
}

fn slice_by_ref::{closure#1}(_1: &[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 80:15]) -> () {
    debug x => (*((*_1).0: &&[std::string::String])); // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:75:17: 75:18
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:16: 80:16
    let mut _2: usize;                   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:16: 81:27
    let mut _3: usize;                   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:16: 81:27
    let mut _4: bool;                    // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:16: 81:27
    let mut _7: &&[std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 82:6
    let mut _8: &[std::string::String];  // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 82:6
    let mut _9: &&[std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 82:6
    let mut _10: &[std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 82:6
    let mut _11: &&[std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 82:6
    let mut _12: &[std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:80:13: 82:6
    scope 1 {
        debug y => _5;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:17: 81:18
        debug z => _6;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:20: 81:21
        let _5: &std::string::String;    // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:17: 81:18
        let _6: &[std::string::String];  // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:20: 81:21
    }

    bb0: {
        _7 = deref_copy ((*_1).0: &&[std::string::String]); // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:16: 81:27
        _8 = deref_copy (*_7);           // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:16: 81:27
        _2 = Len((*_8));                 // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:16: 81:27
        _3 = const 1_usize;              // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:16: 81:27
        _4 = Ge(move _2, move _3);       // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:16: 81:27
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:16: 81:27
    }

    bb1: {
        _9 = deref_copy ((*_1).0: &&[std::string::String]); // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:17: 81:18
        _10 = deref_copy (*_9);          // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:17: 81:18
        _5 = &(*_10)[0 of 1];            // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:17: 81:18
        _11 = deref_copy ((*_1).0: &&[std::string::String]); // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:20: 81:21
        _12 = deref_copy (*_11);         // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:20: 81:21
        _6 = &(*_12)[1:];                // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:20: 81:21
        goto -> bb2;                     // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:81:9: 81:34
    }

    bb2: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:82:6: 82:6
    }
}

fn slice_by_mut(_1: &mut [String]) -> () {
    debug x => _1;                       // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:91:17: 91:18
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:91:35: 91:35
    let mut _2: [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 92:19]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:9: 92:14
    let mut _3: &mut &mut [std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 94:6
    let _4: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:95:5: 95:8
    let mut _5: &mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 92:19]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:95:5: 95:6
    let mut _6: ();                      // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:95:5: 95:8
    let _7: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:96:5: 96:8
    let mut _8: &mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 92:19]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:96:5: 96:6
    let mut _9: ();                      // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:96:5: 96:8
    let mut _11: &mut &mut [std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 102:6
    let _12: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:103:5: 103:8
    let mut _13: &mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 97:19]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:103:5: 103:6
    let mut _14: ();                     // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:103:5: 103:8
    let _15: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:104:5: 104:8
    let mut _16: &mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 97:19]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:104:5: 104:6
    let mut _17: ();                     // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:104:5: 104:8
    let _18: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:105:5: 105:12
    let mut _19: &mut [std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:105:10: 105:11
    scope 1 {
        debug f => _2;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:9: 92:14
        let mut _10: [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 97:19]; // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:9: 97:14
        scope 2 {
            debug g => _10;              // in scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:9: 97:14
        }
    }

    bb0: {
        _3 = &mut _1;                    // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 94:6
        _2 = [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 92:19] { x: move _3 }; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 94:6
                                         // closure
                                         // + def_id: DefId(0:27 ~ borrowck_closures_slice_patterns_ok[d45b]::slice_by_mut::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()),
                                         //     (&mut &mut [std::string::String],),
                                         // ]
        _5 = &mut _2;                    // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:95:5: 95:6
        _4 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 92:19] as FnMut<()>>::call_mut(move _5, move _6) -> bb1; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:95:5: 95:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:95:5: 95:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 92:19], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 92:19] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 92:19] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &mut _2;                    // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:96:5: 96:6
        _7 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 92:19] as FnMut<()>>::call_mut(move _8, move _9) -> bb2; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:96:5: 96:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:96:5: 96:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 92:19], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 92:19] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 92:19] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &mut _1;                   // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 102:6
        _10 = [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 97:19] { x: move _11 }; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 102:6
                                         // closure
                                         // + def_id: DefId(0:28 ~ borrowck_closures_slice_patterns_ok[d45b]::slice_by_mut::{closure#1})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()),
                                         //     (&mut &mut [std::string::String],),
                                         // ]
        _13 = &mut _10;                  // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:103:5: 103:6
        _12 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 97:19] as FnMut<()>>::call_mut(move _13, move _14) -> bb3; // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:103:5: 103:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:103:5: 103:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 97:19], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 97:19] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 97:19] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _16 = &mut _10;                  // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:104:5: 104:6
        _15 = <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 97:19] as FnMut<()>>::call_mut(move _16, move _17) -> bb4; // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:104:5: 104:8
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:104:5: 104:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 97:19], ()) -> <[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 97:19] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 97:19] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = move _1;                   // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:105:10: 105:11
        _18 = std::mem::drop::<&mut [String]>(move _19) -> bb5; // scope 2 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:105:5: 105:12
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:105:5: 105:9
                                         // + literal: Const { ty: fn(&mut [String]) {std::mem::drop::<&mut [String]>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:106:2: 106:2
    }
}

fn slice_by_mut::{closure#0}(_1: &mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 92:19]) -> () {
    debug x => (*((*_1).0: &mut &mut [std::string::String])); // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:91:17: 91:18
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:20: 92:20
    let mut _2: usize;                   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:16: 93:43
    let mut _3: usize;                   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:16: 93:43
    let mut _4: bool;                    // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:16: 93:43
    let mut _7: &mut &mut [std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 94:6
    let mut _8: &mut [std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 94:6
    let mut _9: &mut &mut [std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 94:6
    let mut _10: &mut [std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 94:6
    let mut _11: &mut &mut [std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 94:6
    let mut _12: &mut [std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:92:17: 94:6
    scope 1 {
        debug y => _5;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:17: 93:26
        debug z => _6;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:28: 93:37
        let _5: &mut std::string::String; // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:17: 93:26
        let _6: &mut [std::string::String]; // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:28: 93:37
    }

    bb0: {
        _7 = deref_copy ((*_1).0: &mut &mut [std::string::String]); // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:16: 93:43
        _8 = deref_copy (*_7);           // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:16: 93:43
        _2 = Len((*_8));                 // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:16: 93:43
        _3 = const 1_usize;              // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:16: 93:43
        _4 = Ge(move _2, move _3);       // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:16: 93:43
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:16: 93:43
    }

    bb1: {
        _9 = deref_copy ((*_1).0: &mut &mut [std::string::String]); // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:17: 93:26
        _10 = deref_copy (*_9);          // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:17: 93:26
        _5 = &mut (*_10)[0 of 1];        // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:17: 93:26
        _11 = deref_copy ((*_1).0: &mut &mut [std::string::String]); // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:28: 93:37
        _12 = deref_copy (*_11);         // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:28: 93:37
        _6 = &mut (*_12)[1:];            // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:28: 93:37
        goto -> bb2;                     // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:93:9: 93:51
    }

    bb2: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:94:6: 94:6
    }
}

fn slice_by_mut::{closure#1}(_1: &mut [closure@ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 97:19]) -> () {
    debug x => (*((*_1).0: &mut &mut [std::string::String])); // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:91:17: 91:18
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:20: 97:20
    let mut _2: usize;                   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:16: 98:27
    let mut _3: usize;                   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:16: 98:27
    let mut _4: bool;                    // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:16: 98:27
    let _7: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:100:13: 100:41
    let mut _8: &mut std::string::String; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:100:28: 100:29
    let mut _9: &mut std::string::String; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:100:31: 100:40
    let mut _10: &mut std::string::String; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:100:31: 100:40
    let _11: usize;                      // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:100:38: 100:39
    let mut _12: usize;                  // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:100:36: 100:40
    let mut _13: bool;                   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:100:36: 100:40
    let mut _14: &mut &mut [std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 102:6
    let mut _15: &mut [std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 102:6
    let mut _16: &mut &mut [std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 102:6
    let mut _17: &mut [std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 102:6
    let mut _18: &mut &mut [std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 102:6
    let mut _19: &mut [std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:97:17: 102:6
    scope 1 {
        debug y => _5;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:17: 98:18
        debug z => _6;                   // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:20: 98:21
        let _5: &mut std::string::String; // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:17: 98:18
        let _6: &mut [std::string::String]; // in scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:20: 98:21
    }

    bb0: {
        _14 = deref_copy ((*_1).0: &mut &mut [std::string::String]); // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:16: 98:27
        _15 = deref_copy (*_14);         // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:16: 98:27
        _2 = Len((*_15));                // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:16: 98:27
        _3 = const 1_usize;              // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:16: 98:27
        _4 = Ge(move _2, move _3);       // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:16: 98:27
        switchInt(move _4) -> [0: bb3, otherwise: bb1]; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:16: 98:27
    }

    bb1: {
        _16 = deref_copy ((*_1).0: &mut &mut [std::string::String]); // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:17: 98:18
        _17 = deref_copy (*_16);         // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:17: 98:18
        _5 = &mut (*_17)[0 of 1];        // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:17: 98:18
        _18 = deref_copy ((*_1).0: &mut &mut [std::string::String]); // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:20: 98:21
        _19 = deref_copy (*_18);         // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:20: 98:21
        _6 = &mut (*_19)[1:];            // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:98:20: 98:21
        _8 = &mut (*_5);                 // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:100:28: 100:29
        _11 = const 0_usize;             // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:100:38: 100:39
        _12 = Len((*_6));                // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:100:36: 100:40
        _13 = Lt(_11, _12);              // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:100:36: 100:40
        assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> bb2; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:100:36: 100:40
    }

    bb2: {
        _10 = &mut (*_6)[_11];           // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:100:31: 100:40
        _9 = &mut (*_10);                // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:100:31: 100:40
        _7 = std::mem::swap::<String>(move _8, move _9) -> bb3; // scope 1 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:100:13: 100:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:100:13: 100:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, &'b mut String) {std::mem::swap::<String>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:102:6: 102:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:108:11: 108:11
    let _1: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:109:5: 109:35
    let mut _2: [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:109:16: 109:34
    let _3: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:110:5: 110:35
    let mut _4: [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:110:16: 110:34
    let _5: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:111:5: 111:36
    let mut _6: [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:111:17: 111:35
    let _7: ();                          // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:112:5: 112:40
    let mut _8: &[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:112:20: 112:39
    let _9: &[std::string::String; 3];   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:112:20: 112:39
    let _10: [std::string::String; 3];   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:112:21: 112:39
    let _11: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:113:5: 113:44
    let mut _12: &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:113:20: 113:43
    let mut _13: &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:113:20: 113:43
    let mut _14: [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:113:25: 113:43
    let _15: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:114:5: 114:40
    let mut _16: std::boxed::Box<[std::string::String; 3]>; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:114:21: 114:39
    let _17: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:5: 115:39
    let mut _18: &[std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:18: 115:38
    let mut _19: &[std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:18: 115:38
    let _20: &[std::string::String; 3];  // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:18: 115:38
    let _21: [std::string::String; 3];   // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:19: 115:38
    let _22: ();                         // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:5: 116:43
    let mut _23: &mut [std::string::String]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:18: 116:42
    let mut _24: &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:18: 116:42
    let mut _25: &mut [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:18: 116:42
    let mut _26: [std::string::String; 3]; // in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:23: 116:42

    bb0: {
        _2 = <[String; 3] as Default>::default() -> bb1; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:109:16: 109:34
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:109:16: 109:32
                                         // + literal: Const { ty: fn() -> [String; 3] {<[String; 3] as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = arr_by_ref(move _2) -> bb2; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:109:5: 109:35
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:109:5: 109:15
                                         // + literal: Const { ty: fn([String; 3]) {arr_by_ref}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = <[String; 3] as Default>::default() -> bb3; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:110:16: 110:34
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:110:16: 110:32
                                         // + literal: Const { ty: fn() -> [String; 3] {<[String; 3] as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = arr_by_mut(move _4) -> bb4; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:110:5: 110:35
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:110:5: 110:15
                                         // + literal: Const { ty: fn([String; 3]) {arr_by_mut}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = <[String; 3] as Default>::default() -> bb5; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:111:17: 111:35
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:111:17: 111:33
                                         // + literal: Const { ty: fn() -> [String; 3] {<[String; 3] as Default>::default}, val: Value(<ZST>) }
    }

    bb5: {
        _5 = arr_by_move(move _6) -> bb6; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:111:5: 111:36
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:111:5: 111:16
                                         // + literal: Const { ty: fn([String; 3]) {arr_by_move}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = <[String; 3] as Default>::default() -> bb7; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:112:21: 112:39
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:112:21: 112:37
                                         // + literal: Const { ty: fn() -> [String; 3] {<[String; 3] as Default>::default}, val: Value(<ZST>) }
    }

    bb7: {
        _9 = &_10;                       // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:112:20: 112:39
        _8 = _9;                         // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:112:20: 112:39
        _7 = arr_ref_by_ref(move _8) -> [return: bb8, unwind: bb24]; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:112:5: 112:40
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:112:5: 112:19
                                         // + literal: Const { ty: for<'a> fn(&'a [String; 3]) {arr_ref_by_ref}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_10) -> bb9;                // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:112:40: 112:41
    }

    bb9: {
        _14 = <[String; 3] as Default>::default() -> bb10; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:113:25: 113:43
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:113:25: 113:41
                                         // + literal: Const { ty: fn() -> [String; 3] {<[String; 3] as Default>::default}, val: Value(<ZST>) }
    }

    bb10: {
        _13 = &mut _14;                  // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:113:20: 113:43
        _12 = &mut (*_13);               // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:113:20: 113:43
        _11 = arr_ref_by_mut(move _12) -> [return: bb11, unwind: bb23]; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:113:5: 113:44
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:113:5: 113:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut [String; 3]) {arr_ref_by_mut}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_14) -> bb12;               // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:113:44: 113:45
    }

    bb12: {
        _16 = <Box<[String; 3]> as Default>::default() -> bb13; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:114:21: 114:39
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:114:21: 114:37
                                         // + literal: Const { ty: fn() -> Box<[String; 3]> {<Box<[String; 3]> as Default>::default}, val: Value(<ZST>) }
    }

    bb13: {
        _15 = arr_box_by_move(move _16) -> bb14; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:114:5: 114:40
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:114:5: 114:20
                                         // + literal: Const { ty: fn(Box<[String; 3]>) {arr_box_by_move}, val: Value(<ZST>) }
    }

    bb14: {
        _21 = <[String; 3] as Default>::default() -> bb15; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:19: 115:38
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:19: 115:36
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> [String; 3] {<[String; 3] as Default>::default}, val: Value(<ZST>) }
    }

    bb15: {
        _20 = &_21;                      // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:18: 115:38
        _19 = _20;                       // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:18: 115:38
        _18 = move _19 as &[std::string::String] (Pointer(Unsize)); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:18: 115:38
        _17 = slice_by_ref(move _18) -> [return: bb16, unwind: bb22]; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:5: 115:39
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:5: 115:17
                                         // + literal: Const { ty: for<'a> fn(&'a [String]) {slice_by_ref}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_21) -> bb17;               // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:39: 115:40
    }

    bb17: {
        _26 = <[String; 3] as Default>::default() -> bb18; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:23: 116:42
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:23: 116:40
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> [String; 3] {<[String; 3] as Default>::default}, val: Value(<ZST>) }
    }

    bb18: {
        _25 = &mut _26;                  // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:18: 116:42
        _24 = &mut (*_25);               // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:18: 116:42
        _23 = move _24 as &mut [std::string::String] (Pointer(Unsize)); // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:18: 116:42
        _22 = slice_by_mut(move _23) -> [return: bb19, unwind: bb21]; // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:5: 116:43
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:5: 116:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut [String]) {slice_by_mut}, val: Value(<ZST>) }
    }

    bb19: {
        drop(_26) -> bb20;               // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:43: 116:44
    }

    bb20: {
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:117:2: 117:2
    }

    bb21 (cleanup): {
        drop(_26) -> bb25;               // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:43: 116:44
    }

    bb22 (cleanup): {
        drop(_21) -> bb25;               // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:39: 115:40
    }

    bb23 (cleanup): {
        drop(_14) -> bb25;               // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:113:44: 113:45
    }

    bb24 (cleanup): {
        drop(_10) -> bb25;               // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:112:40: 112:41
    }

    bb25 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:108:1: 117:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:24: 115:25

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:24: 115:25
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:115:24: 115:25
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:28: 116:29

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:28: 116:29
        return;                          // scope 0 at ui/borrowck/borrowck-closures-slice-patterns-ok.rs:116:28: 116:29
    }
}
