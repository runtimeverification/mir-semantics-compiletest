// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn the_bug() -> () {
    let mut _0: ();
    let mut _1: (&str, &str);
    let mut _4: bool;
    let mut _5: &&str;
    let _6: &str;
    let mut _7: (&(&str, &str), &(&str, &str));
    let mut _8: &(&str, &str);
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: &mut &str;
    scope 1 {
        debug stuff => _1;
        let _2: &mut &str;
        let _3: &&mut &str;
        let _9: &(&str, &str);
        let _10: &(&str, &str);
        let mut _16: &(&str, &str);
        let mut _17: &&str;
        scope 2 {
            debug left => _2;
            debug left => _3;
        }
        scope 3 {
            debug left_val => _9;
            debug right_val => _10;
            let _13: core::panicking::AssertKind;
            scope 4 {
                debug kind => _13;
            }
        }
    }

    bb0: {
        _1 = (const "left", const "right");
        _2 = &mut (_1.0: &str);
        _3 = &_2;
        _18 = deref_copy (*_3);
        _5 = &(*_18);
        _17 = const _;
        _4 = <&str as PartialEq>::eq(move _5, _17) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = const "new left";
        (*_2) = _6;
        goto -> bb3;
    }

    bb3: {
        _8 = &_1;
        _16 = const _;
        _7 = (move _8, _16);
        _9 = (_7.0: &(&str, &str));
        _10 = (_7.1: &(&str, &str));
        _12 = <(&str, &str) as PartialEq>::eq(_9, _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<(&str, &str), (&str, &str)>(move _13, _9, _10, move _15) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in the_bug: &(&str, &str) = {
    let mut _0: &(&str, &str);
    let mut _1: (&str, &str);

    bb0: {
        _1 = (const "new left", const "right");
        _0 = &_1;
        return;
    }
}

promoted[1] in the_bug: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "left";
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = the_bug() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
