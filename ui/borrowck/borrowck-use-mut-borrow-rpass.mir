// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn field_copy_after_field_borrow() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:6:36: 6:36
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:7:9: 7:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:7:30: 7:41
    let _4: ();                          // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:9:5: 9:14
    let mut _5: isize;                   // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:9:10: 9:13
    let mut _6: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:8:9: 8:10
    let mut _7: *const isize;            // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:8:9: 8:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:7:9: 7:14
        let _3: &mut std::boxed::Box<isize>; // in scope 1 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:8:9: 8:10
        scope 2 {
            debug p => _3;               // in scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:8:9: 8:10
        }
    }

    bb0: {
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:7:30: 7:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-use-mut-borrow-rpass.rs:7:30: 7:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:7:17: 7:43
        _3 = &mut (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:8:13: 8:21
        _5 = (_1.0: isize);              // scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:9:10: 9:13
        _4 = std::mem::drop::<isize>(move _5) -> [return: bb2, unwind: bb4]; // scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:9:5: 9:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-use-mut-borrow-rpass.rs:9:5: 9:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = deref_copy (*_3);           // scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:10:5: 10:12
        _7 = (((_6.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:10:5: 10:12
        (*_7) = const 3_isize;           // scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:10:5: 10:12
        drop(_1) -> bb3;                 // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:11:1: 11:2
    }

    bb3: {
        return;                          // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:11:2: 11:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:11:1: 11:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:6:1: 11:2
    }
}

fn fu_field_copy_after_field_borrow() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:13:39: 13:39
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:14:9: 14:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:14:30: 14:41
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:16:20: 16:31
    let _6: ();                          // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:17:5: 17:12
    let mut _7: A;                       // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:17:10: 17:11
    let mut _8: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:15:9: 15:10
    let mut _9: *const isize;            // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:15:9: 15:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:14:9: 14:14
        let _3: &mut std::boxed::Box<isize>; // in scope 1 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:15:9: 15:10
        scope 2 {
            debug p => _3;               // in scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:15:9: 15:10
            let _4: A;                   // in scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:16:9: 16:10
            scope 3 {
                debug y => _4;           // in scope 3 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:16:9: 16:10
            }
        }
    }

    bb0: {
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:14:30: 14:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-use-mut-borrow-rpass.rs:14:30: 14:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:14:17: 14:43
        _3 = &mut (_1.1: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:15:13: 15:21
        _5 = Box::<isize>::new(const 3_isize) -> [return: bb2, unwind: bb5]; // scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:16:20: 16:31
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-use-mut-borrow-rpass.rs:16:20: 16:28
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = A { a: (_1.0: isize), b: move _5 }; // scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:16:13: 16:39
        _7 = move _4;                    // scope 3 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:17:10: 17:11
        _6 = std::mem::drop::<A>(move _7) -> [return: bb3, unwind: bb5]; // scope 3 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:17:5: 17:12
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-use-mut-borrow-rpass.rs:17:5: 17:9
                                         // + literal: Const { ty: fn(A) {std::mem::drop::<A>}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = deref_copy (*_3);           // scope 3 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:18:5: 18:12
        _9 = (((_8.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 3 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:18:5: 18:12
        (*_9) = const 4_isize;           // scope 3 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:18:5: 18:12
        drop(_1) -> bb4;                 // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:19:1: 19:2
    }

    bb4: {
        return;                          // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:19:2: 19:2
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:19:1: 19:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:13:1: 19:2
    }
}

fn field_deref_after_field_borrow() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:21:37: 21:37
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:22:9: 22:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:22:30: 22:41
    let _4: ();                          // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:24:5: 24:15
    let mut _5: isize;                   // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:24:10: 24:14
    let mut _6: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:22:9: 22:14
    let mut _7: *const isize;            // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:22:9: 22:14
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:22:9: 22:14
        let _3: &mut isize;              // in scope 1 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:23:9: 23:10
        scope 2 {
            debug p => _3;               // in scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:23:9: 23:10
        }
    }

    bb0: {
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:22:30: 22:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-use-mut-borrow-rpass.rs:22:30: 22:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:22:17: 22:43
        _3 = &mut (_1.0: isize);         // scope 1 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:23:13: 23:21
        _6 = deref_copy (_1.1: std::boxed::Box<isize>); // scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:24:10: 24:14
        _7 = (((_6.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:24:10: 24:14
        _5 = (*_7);                      // scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:24:10: 24:14
        _4 = std::mem::drop::<isize>(move _5) -> [return: bb2, unwind: bb4]; // scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:24:5: 24:15
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-use-mut-borrow-rpass.rs:24:5: 24:9
                                         // + literal: Const { ty: fn(isize) {std::mem::drop::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        (*_3) = const 3_isize;           // scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:25:5: 25:11
        drop(_1) -> bb3;                 // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:26:1: 26:2
    }

    bb3: {
        return;                          // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:26:2: 26:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:26:1: 26:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:21:1: 26:2
    }
}

fn field_move_after_field_borrow() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:28:36: 28:36
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:29:9: 29:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:29:30: 29:41
    let _4: ();                          // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:31:5: 31:14
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:31:10: 31:13
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:29:9: 29:14
        let _3: &mut isize;              // in scope 1 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:30:9: 30:10
        scope 2 {
            debug p => _3;               // in scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:30:9: 30:10
        }
    }

    bb0: {
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:29:30: 29:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-use-mut-borrow-rpass.rs:29:30: 29:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:29:17: 29:43
        _3 = &mut (_1.0: isize);         // scope 1 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:30:13: 30:21
        _5 = move (_1.1: std::boxed::Box<isize>); // scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:31:10: 31:13
        _4 = std::mem::drop::<Box<isize>>(move _5) -> bb2; // scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:31:5: 31:14
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-use-mut-borrow-rpass.rs:31:5: 31:9
                                         // + literal: Const { ty: fn(Box<isize>) {std::mem::drop::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb2: {
        (*_3) = const 3_isize;           // scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:32:5: 32:11
        return;                          // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:33:2: 33:2
    }
}

fn fu_field_move_after_field_borrow() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:35:39: 35:39
    let mut _1: A;                       // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:36:9: 36:14
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:36:30: 36:41
    let _5: ();                          // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:39:5: 39:12
    let mut _6: A;                       // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:39:10: 39:11
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:36:9: 36:14
        let _3: &mut isize;              // in scope 1 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:37:9: 37:10
        scope 2 {
            debug p => _3;               // in scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:37:9: 37:10
            let _4: A;                   // in scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:38:9: 38:10
            scope 3 {
                debug y => _4;           // in scope 3 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:38:9: 38:10
            }
        }
    }

    bb0: {
        _2 = Box::<isize>::new(const 2_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:36:30: 36:41
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-use-mut-borrow-rpass.rs:36:30: 36:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = A { a: const 1_isize, b: move _2 }; // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:36:17: 36:43
        _3 = &mut (_1.0: isize);         // scope 1 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:37:13: 37:21
        _4 = A { a: const 3_isize, b: move (_1.1: std::boxed::Box<isize>) }; // scope 2 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:38:13: 38:29
        _6 = move _4;                    // scope 3 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:39:10: 39:11
        _5 = std::mem::drop::<A>(move _6) -> bb2; // scope 3 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:39:5: 39:12
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-use-mut-borrow-rpass.rs:39:5: 39:9
                                         // + literal: Const { ty: fn(A) {std::mem::drop::<A>}, val: Value(<ZST>) }
    }

    bb2: {
        (*_3) = const 4_isize;           // scope 3 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:40:5: 40:11
        return;                          // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:41:2: 41:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:43:11: 43:11
    let _1: ();                          // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:44:5: 44:36
    let _2: ();                          // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:45:5: 45:39
    let _3: ();                          // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:46:5: 46:37
    let _4: ();                          // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:47:5: 47:36
    let _5: ();                          // in scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:48:5: 48:39

    bb0: {
        _1 = field_copy_after_field_borrow() -> bb1; // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:44:5: 44:36
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-use-mut-borrow-rpass.rs:44:5: 44:34
                                         // + literal: Const { ty: fn() {field_copy_after_field_borrow}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = fu_field_copy_after_field_borrow() -> bb2; // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:45:5: 45:39
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-use-mut-borrow-rpass.rs:45:5: 45:37
                                         // + literal: Const { ty: fn() {fu_field_copy_after_field_borrow}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = field_deref_after_field_borrow() -> bb3; // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:46:5: 46:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-use-mut-borrow-rpass.rs:46:5: 46:35
                                         // + literal: Const { ty: fn() {field_deref_after_field_borrow}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = field_move_after_field_borrow() -> bb4; // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:47:5: 47:36
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-use-mut-borrow-rpass.rs:47:5: 47:34
                                         // + literal: Const { ty: fn() {field_move_after_field_borrow}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = fu_field_move_after_field_borrow() -> bb5; // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:48:5: 48:39
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-use-mut-borrow-rpass.rs:48:5: 48:37
                                         // + literal: Const { ty: fn() {fu_field_move_after_field_borrow}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/borrowck/borrowck-use-mut-borrow-rpass.rs:49:2: 49:2
    }
}
