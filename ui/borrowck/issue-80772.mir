// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const A_CONSTANT: &[Exhibit] = {
    let mut _0: &[Exhibit];              // return place in scope 0 at ui/borrowck/issue-80772.rs:10:23: 10:33
    let mut _1: &[Exhibit; 2];           // in scope 0 at ui/borrowck/issue-80772.rs:10:36: 19:2
    let _2: &[Exhibit; 2];               // in scope 0 at ui/borrowck/issue-80772.rs:10:36: 19:2
    let _3: [Exhibit; 2];                // in scope 0 at ui/borrowck/issue-80772.rs:10:37: 19:2
    let mut _4: Exhibit;                 // in scope 0 at ui/borrowck/issue-80772.rs:11:5: 14:6
    let mut _5: for<'a> fn(&'a usize) -> std::boxed::Box<dyn SomeTrait>; // in scope 0 at ui/borrowck/issue-80772.rs:13:18: 13:38
    let mut _6: [closure@ui/borrowck/issue-80772.rs:13:18: 13:21]; // in scope 0 at ui/borrowck/issue-80772.rs:13:18: 13:38
    let mut _7: Exhibit;                 // in scope 0 at ui/borrowck/issue-80772.rs:15:5: 18:6
    let mut _8: usize;                   // in scope 0 at ui/borrowck/issue-80772.rs:16:19: 16:38
    let mut _9: &str;                    // in scope 0 at ui/borrowck/issue-80772.rs:16:19: 16:38
    let _10: &str;                       // in scope 0 at ui/borrowck/issue-80772.rs:16:19: 16:32
    let mut _11: for<'a> fn(&'a usize) -> std::boxed::Box<dyn SomeTrait>; // in scope 0 at ui/borrowck/issue-80772.rs:17:18: 17:38
    let mut _12: [closure@ui/borrowck/issue-80772.rs:17:18: 17:21]; // in scope 0 at ui/borrowck/issue-80772.rs:17:18: 17:38
    let mut _13: &[Exhibit; 2];          // in scope 0 at ui/borrowck/issue-80772.rs:10:36: 19:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/borrowck/issue-80772.rs:10:36: 19:2
        StorageLive(_2);                 // scope 0 at ui/borrowck/issue-80772.rs:10:36: 19:2
        _13 = const _;                   // scope 0 at ui/borrowck/issue-80772.rs:10:36: 19:2
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-80772.rs:10:36: 19:2
                                         // + literal: Const { ty: &[Exhibit; 2], val: Unevaluated(A_CONSTANT, [], Some(promoted[0])) }
        _2 = &(*_13);                    // scope 0 at ui/borrowck/issue-80772.rs:10:36: 19:2
        _1 = &(*_2);                     // scope 0 at ui/borrowck/issue-80772.rs:10:36: 19:2
        _0 = move _1 as &[Exhibit] (Pointer(Unsize)); // scope 0 at ui/borrowck/issue-80772.rs:10:36: 19:2
        StorageDead(_2);                 // scope 0 at ui/borrowck/issue-80772.rs:19:1: 19:2
        StorageDead(_1);                 // scope 0 at ui/borrowck/issue-80772.rs:19:1: 19:2
        return;                          // scope 0 at ui/borrowck/issue-80772.rs:10:1: 19:3
    }
}

promoted[0] in A_CONSTANT: &[Exhibit; 2] = {
    let mut _0: &[Exhibit; 2];           // return place in scope 0 at ui/borrowck/issue-80772.rs:10:36: 19:2
    let mut _1: [Exhibit; 2];            // in scope 0 at ui/borrowck/issue-80772.rs:10:37: 19:2
    let mut _2: Exhibit;                 // in scope 0 at ui/borrowck/issue-80772.rs:11:5: 14:6
    let mut _3: for<'a> fn(&'a usize) -> std::boxed::Box<dyn SomeTrait>; // in scope 0 at ui/borrowck/issue-80772.rs:13:18: 13:38
    let mut _4: [closure@ui/borrowck/issue-80772.rs:13:18: 13:21]; // in scope 0 at ui/borrowck/issue-80772.rs:13:18: 13:38
    let mut _5: Exhibit;                 // in scope 0 at ui/borrowck/issue-80772.rs:15:5: 18:6
    let mut _6: usize;                   // in scope 0 at ui/borrowck/issue-80772.rs:16:19: 16:38
    let mut _7: &str;                    // in scope 0 at ui/borrowck/issue-80772.rs:16:19: 16:38
    let mut _8: &str;                    // in scope 0 at ui/borrowck/issue-80772.rs:16:19: 16:32
    let mut _9: for<'a> fn(&'a usize) -> std::boxed::Box<dyn SomeTrait>; // in scope 0 at ui/borrowck/issue-80772.rs:17:18: 17:38
    let mut _10: [closure@ui/borrowck/issue-80772.rs:17:18: 17:21]; // in scope 0 at ui/borrowck/issue-80772.rs:17:18: 17:38

    bb0: {
        _4 = [closure@ui/borrowck/issue-80772.rs:13:18: 13:21]; // scope 0 at ui/borrowck/issue-80772.rs:13:18: 13:38
                                         // closure
                                         // + def_id: DefId(0:8 ~ issue_80772[a398]::A_CONSTANT::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     for<'a> extern "rust-call" fn((&'a usize,)) -> std::boxed::Box<dyn SomeTrait>,
                                         //     (),
                                         // ]
        _3 = move _4 as for<'a> fn(&'a usize) -> std::boxed::Box<dyn SomeTrait> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/borrowck/issue-80772.rs:13:18: 13:38
        _2 = Exhibit { constant: const 1_usize, factory: move _3 }; // scope 0 at ui/borrowck/issue-80772.rs:11:5: 14:6
        _8 = const "Hello world";        // scope 0 at ui/borrowck/issue-80772.rs:16:19: 16:32
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-80772.rs:16:19: 16:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = &(*_8);                     // scope 0 at ui/borrowck/issue-80772.rs:16:19: 16:38
        _6 = core::str::<impl str>::len(move _7) -> bb1; // scope 0 at ui/borrowck/issue-80772.rs:16:19: 16:38
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-80772.rs:16:33: 16:36
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> usize {core::str::<impl str>::len}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [closure@ui/borrowck/issue-80772.rs:17:18: 17:21]; // scope 0 at ui/borrowck/issue-80772.rs:17:18: 17:38
                                         // closure
                                         // + def_id: DefId(0:9 ~ issue_80772[a398]::A_CONSTANT::{closure#1})
                                         // + substs: [
                                         //     i8,
                                         //     for<'a> extern "rust-call" fn((&'a usize,)) -> std::boxed::Box<dyn SomeTrait>,
                                         //     (),
                                         // ]
        _9 = move _10 as for<'a> fn(&'a usize) -> std::boxed::Box<dyn SomeTrait> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/borrowck/issue-80772.rs:17:18: 17:38
        _5 = Exhibit { constant: move _6, factory: move _9 }; // scope 0 at ui/borrowck/issue-80772.rs:15:5: 18:6
        _1 = [move _2, move _5];         // scope 0 at ui/borrowck/issue-80772.rs:10:37: 19:2
        _0 = &_1;                        // scope 0 at ui/borrowck/issue-80772.rs:10:36: 19:2
        return;                          // scope 0 at ui/borrowck/issue-80772.rs:10:36: 19:2
    }
}

fn A_CONSTANT::{closure#0}(_1: &[closure@ui/borrowck/issue-80772.rs:13:18: 13:21], _2: &usize) -> Box<dyn SomeTrait> {
    let mut _0: std::boxed::Box<dyn SomeTrait>; // return place in scope 0 at ui/borrowck/issue-80772.rs:13:22: 13:22
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _3 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn A_CONSTANT::{closure#1}(_1: &[closure@ui/borrowck/issue-80772.rs:17:18: 17:21], _2: &usize) -> Box<dyn SomeTrait> {
    let mut _0: std::boxed::Box<dyn SomeTrait>; // return place in scope 0 at ui/borrowck/issue-80772.rs:17:22: 17:22
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _3 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/issue-80772.rs:21:11: 21:11

    bb0: {
        return;                          // scope 0 at ui/borrowck/issue-80772.rs:21:13: 21:13
    }
}
