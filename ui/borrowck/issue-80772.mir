// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const A_CONSTANT: &[Exhibit] = {
    let mut _0: &[Exhibit];
    let mut _1: &[Exhibit; 2];
    let _2: &[Exhibit; 2];
    let _3: [Exhibit; 2];
    let mut _4: Exhibit;
    let mut _5: for<'a> fn(&'a usize) -> std::boxed::Box<dyn SomeTrait>;
    let mut _6: [closure@ui/borrowck/issue-80772.rs:13:18: 13:21];
    let mut _7: Exhibit;
    let mut _8: usize;
    let mut _9: &str;
    let _10: &str;
    let mut _11: for<'a> fn(&'a usize) -> std::boxed::Box<dyn SomeTrait>;
    let mut _12: [closure@ui/borrowck/issue-80772.rs:17:18: 17:21];
    let mut _13: &[Exhibit; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _13 = const _;
        _2 = &(*_13);
        _1 = &(*_2);
        _0 = move _1 as &[Exhibit] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in A_CONSTANT: &[Exhibit; 2] = {
    let mut _0: &[Exhibit; 2];
    let mut _1: [Exhibit; 2];
    let mut _2: Exhibit;
    let mut _3: for<'a> fn(&'a usize) -> std::boxed::Box<dyn SomeTrait>;
    let mut _4: [closure@ui/borrowck/issue-80772.rs:13:18: 13:21];
    let mut _5: Exhibit;
    let mut _6: usize;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: for<'a> fn(&'a usize) -> std::boxed::Box<dyn SomeTrait>;
    let mut _10: [closure@ui/borrowck/issue-80772.rs:17:18: 17:21];

    bb0: {
        _4 = [closure@ui/borrowck/issue-80772.rs:13:18: 13:21];
        _3 = move _4 as for<'a> fn(&'a usize) -> std::boxed::Box<dyn SomeTrait> (Pointer(ClosureFnPointer(Normal)));
        _2 = Exhibit { constant: const 1_usize, factory: move _3 };
        _8 = const "Hello world";
        _7 = &(*_8);
        _6 = core::str::<impl str>::len(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = [closure@ui/borrowck/issue-80772.rs:17:18: 17:21];
        _9 = move _10 as for<'a> fn(&'a usize) -> std::boxed::Box<dyn SomeTrait> (Pointer(ClosureFnPointer(Normal)));
        _5 = Exhibit { constant: move _6, factory: move _9 };
        _1 = [move _2, move _5];
        _0 = &_1;
        return;
    }
}

fn A_CONSTANT::{closure#0}(_1: &[closure@ui/borrowck/issue-80772.rs:13:18: 13:21], _2: &usize) -> Box<dyn SomeTrait> {
    let mut _0: std::boxed::Box<dyn SomeTrait>;
    let mut _3: !;

    bb0: {
        _3 = core::panicking::panic(const "not implemented") -> unwind continue;
    }
}

fn A_CONSTANT::{closure#1}(_1: &[closure@ui/borrowck/issue-80772.rs:17:18: 17:21], _2: &usize) -> Box<dyn SomeTrait> {
    let mut _0: std::boxed::Box<dyn SomeTrait>;
    let mut _3: !;

    bb0: {
        _3 = core::panicking::panic(const "not implemented") -> unwind continue;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
