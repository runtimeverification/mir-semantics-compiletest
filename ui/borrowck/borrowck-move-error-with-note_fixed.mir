// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn blah() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:11:11: 11:11
    let _1: &Foo;                        // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:12:9: 12:10
    let _2: Foo;                         // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:12:14: 12:49
    let mut _3: std::boxed::Box<u32>;    // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:12:24: 12:35
    let mut _4: std::boxed::Box<u32>;    // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:12:37: 12:48
    let mut _5: isize;                   // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:14:9: 15:24
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:12:9: 12:10
        let _6: &std::boxed::Box<u32>;   // in scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:14:19: 14:23
        let _7: &std::boxed::Box<u32>;   // in scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:15:19: 15:23
        let _8: &std::boxed::Box<u32>;   // in scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:16:19: 16:22
        scope 2 {
            debug num1 => _6;            // in scope 2 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:14:19: 14:23
            debug num2 => _7;            // in scope 2 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:15:19: 15:23
        }
        scope 3 {
            debug num => _8;             // in scope 3 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:16:19: 16:22
        }
    }

    bb0: {
        _3 = Box::<u32>::new(const 1_u32) -> bb1; // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:12:24: 12:35
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-error-with-note_fixed.rs:12:24: 12:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u32) -> Box<u32> {Box::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Box::<u32>::new(const 2_u32) -> [return: bb2, unwind: bb8]; // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:12:37: 12:48
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-error-with-note_fixed.rs:12:37: 12:45
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(u32) -> Box<u32> {Box::<u32>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Foo::Foo1(move _3, move _4); // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:12:14: 12:49
        _1 = &_2;                        // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:12:13: 12:49
        _5 = discriminant((*_1));        // scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:13:11: 13:12
        switchInt(move _5) -> [0: bb4, 1: bb5, 2: bb6, otherwise: bb3]; // scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:13:5: 13:12
    }

    bb3: {
        unreachable;                     // scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:13:11: 13:12
    }

    bb4: {
        _6 = &(((*_1) as Foo1).0: std::boxed::Box<u32>); // scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:14:19: 14:23
        _7 = &(((*_1) as Foo1).1: std::boxed::Box<u32>); // scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:15:19: 15:23
        goto -> bb6;                     // scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:15:29: 15:30
    }

    bb5: {
        _8 = &(((*_1) as Foo2).0: std::boxed::Box<u32>); // scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:16:19: 16:22
        goto -> bb6;                     // scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:16:28: 16:29
    }

    bb6: {
        drop(_2) -> bb7;                 // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:19:1: 19:2
    }

    bb7: {
        return;                          // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:19:2: 19:2
    }

    bb8 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:12:48: 12:49
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:11:1: 19:2
    }
}

fn <impl at ui/borrowck/borrowck-move-error-with-note_fixed.rs:25:1: 25:16>::drop(_1: &mut S) -> () {
    debug self => _1;                    // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:13: 26:22
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:24: 26:24
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:35: 26:39
    let mut _5: &[&str; 2];              // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:35: 26:39
    let _6: &[&str; 2];                  // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:35: 26:39
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:41: 26:47
    let mut _12: &std::string::String;   // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:41: 26:47
    let _13: &std::string::String;       // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:41: 26:47
    let mut _14: &[&str; 2];             // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:35: 26:39

    bb0: {
        _14 = const _;                   // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:35: 26:39
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:35: 26:39
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(<S as Drop>::drop, [], Some(promoted[0])) }
        _6 = _14;                        // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:35: 26:39
        _5 = _6;                         // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:35: 26:39
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:35: 26:39
        _13 = &((*_1).0: std::string::String); // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:41: 26:47
        _12 = _13;                       // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:41: 26:47
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _12) -> bb1; // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:41: 26:47
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:41: 26:47
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:51: 26:51
    }
}

promoted[0] in <impl at ui/borrowck/borrowck-move-error-with-note_fixed.rs:25:1: 25:16>::drop: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:35: 26:39
    let mut _1: [&str; 2];               // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:35: 26:39

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:35: 26:39
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:35: 26:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:35: 26:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:35: 26:39
        return;                          // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:26:35: 26:39
    }
}

fn move_in_match() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:29:20: 29:20
    let mut _1: S;                       // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:11: 30:59
    let mut _2: std::string::String;     // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:18: 30:35
    let mut _3: &str;                    // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:18: 30:35
    let _4: &str;                        // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:18: 30:23
    let mut _5: std::string::String;     // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:40: 30:57
    let mut _6: &str;                    // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:40: 30:57
    let _7: &str;                        // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:40: 30:45
    let _8: &std::string::String;        // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:33:16: 33:22
    let _9: &std::string::String;        // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:34:16: 34:22
    scope 1 {
        debug _s => _8;                  // in scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:33:16: 33:22
        debug _t => _9;                  // in scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:34:16: 34:22
    }

    bb0: {
        _4 = const "foo";                // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:18: 30:23
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:18: 30:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:18: 30:35
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:18: 30:35
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:24: 30:33
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = const "bar";                // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:40: 30:45
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:40: 30:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:40: 30:57
        _5 = <str as ToString>::to_string(move _6) -> [return: bb2, unwind: bb4]; // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:40: 30:57
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:46: 30:55
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = S { f: move _2, g: move _5 }; // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:11: 30:59
        _8 = &(_1.0: std::string::String); // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:33:16: 33:22
        _9 = &(_1.1: std::string::String); // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:34:16: 34:22
        drop(_1) -> bb3;                 // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:37:1: 37:2
    }

    bb3: {
        return;                          // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:37:2: 37:2
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:30:58: 30:59
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:29:1: 37:2
    }
}

fn free(_1: T) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:44:18: 44:18

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:44:19: 44:20
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:44:20: 44:20
    }
}

fn blah2() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:46:12: 46:12
    let _1: &A;                          // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:47:9: 47:10
    let _2: A;                           // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:47:14: 47:34
    let mut _3: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:47:21: 47:32
    let _4: ();                          // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:48:5: 52:6
    let mut _5: &std::boxed::Box<isize>; // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:48:11: 48:15
    let mut _7: &std::boxed::Box<isize>; // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:50:18: 50:19
    let mut _8: &A;                      // in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:53:10: 53:11
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:47:9: 47:10
        let _6: &std::boxed::Box<isize>; // in scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:49:9: 49:10
        scope 2 {
            debug n => _6;               // in scope 2 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:49:9: 49:10
        }
    }

    bb0: {
        _3 = Box::<isize>::new(const 1_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-error-with-note_fixed.rs:47:21: 47:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = A { a: move _3 };           // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:47:14: 47:34
        _1 = &_2;                        // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:47:13: 47:34
        _5 = &((*_1).0: std::boxed::Box<isize>); // scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:48:11: 48:15
        _6 = _5;                         // scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:49:9: 49:10
        _7 = _6;                         // scope 2 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:50:18: 50:19
        _4 = free::<&Box<isize>>(move _7) -> [return: bb2, unwind: bb5]; // scope 2 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:50:13: 50:20
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-error-with-note_fixed.rs:50:13: 50:17
                                         // + literal: Const { ty: fn(&Box<isize>) {free::<&Box<isize>>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _1;                         // scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:53:10: 53:11
        _0 = free::<&A>(move _8) -> [return: bb3, unwind: bb5]; // scope 1 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:53:5: 53:12
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-error-with-note_fixed.rs:53:5: 53:9
                                         // + literal: Const { ty: fn(&A) {free::<&A>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_2) -> bb4;                 // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:54:1: 54:2
    }

    bb4: {
        return;                          // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:54:2: 54:2
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:54:1: 54:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:46:1: 54:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:56:11: 56:11

    bb0: {
        return;                          // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:56:13: 56:13
    }
}

fn Foo::Foo1(_1: Box<u32>, _2: Box<u32>) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:4:5: 4:9

    bb0: {
        _0 = Foo::Foo1(move _1, move _2); // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:4:5: 4:9
        return;                          // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:4:5: 4:9
    }
}

// MIR FOR CTFE
fn Foo::Foo1(_1: Box<u32>, _2: Box<u32>) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:4:5: 4:9

    bb0: {
        _0 = Foo::Foo1(move _1, move _2); // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:4:5: 4:9
        return;                          // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:4:5: 4:9
    }
}

fn Foo::Foo2(_1: Box<u32>) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:5:5: 5:9

    bb0: {
        _0 = Foo::Foo2(move _1);         // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:5:5: 5:9
        return;                          // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:5:5: 5:9
    }
}

// MIR FOR CTFE
fn Foo::Foo2(_1: Box<u32>) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:5:5: 5:9

    bb0: {
        _0 = Foo::Foo2(move _1);         // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:5:5: 5:9
        return;                          // scope 0 at ui/borrowck/borrowck-move-error-with-note_fixed.rs:5:5: 5:9
    }
}
