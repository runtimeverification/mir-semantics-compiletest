// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/issue-29166.rs:4:15: 4:15
    let _1: ();                          // in scope 0 at ui/borrowck/issue-29166.rs:5:5: 5:22
    let _2: ();                          // in scope 0 at ui/borrowck/issue-29166.rs:6:5: 6:17
    let _3: ();                          // in scope 0 at ui/borrowck/issue-29166.rs:7:5: 7:17

    bb0: {
        _1 = original_report() -> bb1;   // scope 0 at ui/borrowck/issue-29166.rs:5:5: 5:22
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-29166.rs:5:5: 5:20
                                         // + literal: Const { ty: fn() {original_report}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = revision_1() -> bb2;        // scope 0 at ui/borrowck/issue-29166.rs:6:5: 6:17
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-29166.rs:6:5: 6:15
                                         // + literal: Const { ty: fn() {revision_1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = revision_2() -> bb3;        // scope 0 at ui/borrowck/issue-29166.rs:7:5: 7:17
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-29166.rs:7:5: 7:15
                                         // + literal: Const { ty: fn() {revision_2}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/borrowck/issue-29166.rs:8:2: 8:2
    }
}

fn original_report() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/issue-29166.rs:10:22: 10:22
    let mut _1: std::vec::IntoIter<&()>; // in scope 0 at ui/borrowck/issue-29166.rs:11:10: 11:31
    let mut _2: std::vec::Vec<&()>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _3: std::boxed::Box<[&()]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[&(); 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[&(); 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: &();                     // in scope 0 at ui/borrowck/issue-29166.rs:11:15: 11:18
    let mut _10: &();                    // in scope 0 at ui/borrowck/issue-29166.rs:11:15: 11:18
    let mut _11: *const [&(); 1];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }

    bb0: {
        _5 = const 8_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 8_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [&(); 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = const _;                   // scope 0 at ui/borrowck/issue-29166.rs:11:15: 11:18
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-29166.rs:11:15: 11:18
                                         // + literal: Const { ty: &(), val: Unevaluated(original_report, [], Some(promoted[0])) }
        _9 = _10;                        // scope 0 at ui/borrowck/issue-29166.rs:11:15: 11:18
        _11 = (((_8.0: std::ptr::Unique<[&(); 1]>).0: std::ptr::NonNull<[&(); 1]>).0: *const [&(); 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_11) = [move _9];              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[&()]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = slice::<impl [&()]>::into_vec::<std::alloc::Global>(move _3) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[&()]>) -> Vec<&()> {slice::<impl [&()]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = <Vec<&()> as IntoIterator>::into_iter(move _2) -> bb3; // scope 0 at ui/borrowck/issue-29166.rs:11:10: 11:31
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-29166.rs:11:20: 11:29
                                         // + literal: Const { ty: fn(Vec<&()>) -> <Vec<&()> as IntoIterator>::IntoIter {<Vec<&()> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = std::mem::drop::<std::vec::IntoIter<&()>>(move _1) -> bb4; // scope 0 at ui/borrowck/issue-29166.rs:11:5: 11:32
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-29166.rs:11:5: 11:9
                                         // + literal: Const { ty: fn(std::vec::IntoIter<&()>) {std::mem::drop::<std::vec::IntoIter<&()>>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/borrowck/issue-29166.rs:12:2: 12:2
    }
}

promoted[0] in original_report: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/borrowck/issue-29166.rs:11:15: 11:18
    let mut _1: ();                      // in scope 0 at ui/borrowck/issue-29166.rs:11:16: 11:18

    bb0: {
        _1 = ();                         // scope 0 at ui/borrowck/issue-29166.rs:11:16: 11:18
        _0 = &_1;                        // scope 0 at ui/borrowck/issue-29166.rs:11:15: 11:18
        return;                          // scope 0 at ui/borrowck/issue-29166.rs:11:15: 11:18
    }
}

fn revision_1() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/issue-29166.rs:14:17: 14:17
    let mut _1: std::vec::IntoIter<&()>; // in scope 0 at ui/borrowck/issue-29166.rs:16:10: 16:68
    let mut _2: std::vec::Vec<&()>;      // in scope 0 at ui/borrowck/issue-29166.rs:16:10: 16:56
    let mut _3: std::boxed::Box<[&()]>;  // in scope 0 at ui/borrowck/issue-29166.rs:16:26: 16:55
    let mut _4: std::boxed::Box<[&(); 1]>; // in scope 0 at ui/borrowck/issue-29166.rs:16:26: 16:55
    let mut _5: [&(); 1];                // in scope 0 at ui/borrowck/issue-29166.rs:16:49: 16:54
    let mut _6: &();                     // in scope 0 at ui/borrowck/issue-29166.rs:16:50: 16:53
    let mut _7: &();                     // in scope 0 at ui/borrowck/issue-29166.rs:16:50: 16:53

    bb0: {
        _7 = const _;                    // scope 0 at ui/borrowck/issue-29166.rs:16:50: 16:53
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-29166.rs:16:50: 16:53
                                         // + literal: Const { ty: &(), val: Unevaluated(revision_1, [], Some(promoted[0])) }
        _6 = _7;                         // scope 0 at ui/borrowck/issue-29166.rs:16:50: 16:53
        _5 = [move _6];                  // scope 0 at ui/borrowck/issue-29166.rs:16:49: 16:54
        _4 = Box::<[&(); 1]>::new(move _5) -> bb1; // scope 0 at ui/borrowck/issue-29166.rs:16:26: 16:55
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-29166.rs:16:26: 16:48
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn([&(); 1]) -> Box<[&(); 1]> {Box::<[&(); 1]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _4 as std::boxed::Box<[&()]> (Pointer(Unsize)); // scope 0 at ui/borrowck/issue-29166.rs:16:26: 16:55
        _2 = slice::<impl [&()]>::into_vec::<std::alloc::Global>(move _3) -> bb2; // scope 0 at ui/borrowck/issue-29166.rs:16:10: 16:56
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-29166.rs:16:10: 16:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[&()]>) -> Vec<&()> {slice::<impl [&()]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = <Vec<&()> as IntoIterator>::into_iter(move _2) -> bb3; // scope 0 at ui/borrowck/issue-29166.rs:16:10: 16:68
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-29166.rs:16:57: 16:66
                                         // + literal: Const { ty: fn(Vec<&()>) -> <Vec<&()> as IntoIterator>::IntoIter {<Vec<&()> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = std::mem::drop::<std::vec::IntoIter<&()>>(move _1) -> bb4; // scope 0 at ui/borrowck/issue-29166.rs:16:5: 16:69
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-29166.rs:16:5: 16:9
                                         // + literal: Const { ty: fn(std::vec::IntoIter<&()>) {std::mem::drop::<std::vec::IntoIter<&()>>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/borrowck/issue-29166.rs:17:2: 17:2
    }
}

promoted[0] in revision_1: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/borrowck/issue-29166.rs:16:50: 16:53
    let mut _1: ();                      // in scope 0 at ui/borrowck/issue-29166.rs:16:51: 16:53

    bb0: {
        _1 = ();                         // scope 0 at ui/borrowck/issue-29166.rs:16:51: 16:53
        _0 = &_1;                        // scope 0 at ui/borrowck/issue-29166.rs:16:50: 16:53
        return;                          // scope 0 at ui/borrowck/issue-29166.rs:16:50: 16:53
    }
}

fn revision_2() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/issue-29166.rs:19:17: 19:17
    let mut _1: std::vec::IntoIter<&()>; // in scope 0 at ui/borrowck/issue-29166.rs:20:10: 20:82
    let mut _2: std::vec::Vec<&()>;      // in scope 0 at ui/borrowck/issue-29166.rs:20:10: 20:70
    let mut _3: (std::vec::Vec<&()>, &()); // in scope 0 at ui/borrowck/issue-29166.rs:20:17: 20:34
    let mut _4: std::vec::Vec<&()>;      // in scope 0 at ui/borrowck/issue-29166.rs:20:18: 20:28
    let mut _5: &();                     // in scope 0 at ui/borrowck/issue-29166.rs:20:30: 20:33
    let mut _6: std::vec::Vec<&()>;      // in scope 0 at ui/borrowck/issue-29166.rs:20:38: 20:43
    let _7: &();                         // in scope 0 at ui/borrowck/issue-29166.rs:20:45: 20:46
    let _8: ();                          // in scope 0 at ui/borrowck/issue-29166.rs:20:53: 20:62
    let mut _9: &mut std::vec::Vec<&()>; // in scope 0 at ui/borrowck/issue-29166.rs:20:53: 20:62
    let mut _10: &();                    // in scope 0 at ui/borrowck/issue-29166.rs:20:60: 20:61
    let mut _11: &();                    // in scope 0 at ui/borrowck/issue-29166.rs:20:30: 20:33
    scope 1 {
        debug v => _6;                   // in scope 1 at ui/borrowck/issue-29166.rs:20:38: 20:43
        debug b => _7;                   // in scope 1 at ui/borrowck/issue-29166.rs:20:45: 20:46
    }

    bb0: {
        _4 = Vec::<&()>::new() -> bb1;   // scope 0 at ui/borrowck/issue-29166.rs:20:18: 20:28
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-29166.rs:20:18: 20:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<&()> {Vec::<&()>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = const _;                   // scope 0 at ui/borrowck/issue-29166.rs:20:30: 20:33
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-29166.rs:20:30: 20:33
                                         // + literal: Const { ty: &(), val: Unevaluated(revision_2, [], Some(promoted[0])) }
        _5 = _11;                        // scope 0 at ui/borrowck/issue-29166.rs:20:30: 20:33
        _3 = (move _4, move _5);         // scope 0 at ui/borrowck/issue-29166.rs:20:17: 20:34
        _6 = move (_3.0: std::vec::Vec<&()>); // scope 0 at ui/borrowck/issue-29166.rs:20:38: 20:43
        _7 = (_3.1: &());                // scope 0 at ui/borrowck/issue-29166.rs:20:45: 20:46
        _9 = &mut _6;                    // scope 1 at ui/borrowck/issue-29166.rs:20:53: 20:62
        _10 = _7;                        // scope 1 at ui/borrowck/issue-29166.rs:20:60: 20:61
        _8 = Vec::<&()>::push(move _9, move _10) -> [return: bb2, unwind: bb5]; // scope 1 at ui/borrowck/issue-29166.rs:20:53: 20:62
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-29166.rs:20:55: 20:59
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<&()>, &()) {Vec::<&()>::push}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = move _6;                    // scope 1 at ui/borrowck/issue-29166.rs:20:64: 20:65
        _1 = <Vec<&()> as IntoIterator>::into_iter(move _2) -> bb3; // scope 0 at ui/borrowck/issue-29166.rs:20:10: 20:82
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-29166.rs:20:71: 20:80
                                         // + literal: Const { ty: fn(Vec<&()>) -> <Vec<&()> as IntoIterator>::IntoIter {<Vec<&()> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = std::mem::drop::<std::vec::IntoIter<&()>>(move _1) -> bb4; // scope 0 at ui/borrowck/issue-29166.rs:20:5: 20:83
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-29166.rs:20:5: 20:9
                                         // + literal: Const { ty: fn(std::vec::IntoIter<&()>) {std::mem::drop::<std::vec::IntoIter<&()>>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/borrowck/issue-29166.rs:21:2: 21:2
    }

    bb5 (cleanup): {
        drop(_6) -> bb6;                 // scope 0 at ui/borrowck/issue-29166.rs:20:66: 20:67
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/issue-29166.rs:19:1: 21:2
    }
}

promoted[0] in revision_2: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/borrowck/issue-29166.rs:20:30: 20:33
    let mut _1: ();                      // in scope 0 at ui/borrowck/issue-29166.rs:20:31: 20:33

    bb0: {
        _1 = ();                         // scope 0 at ui/borrowck/issue-29166.rs:20:31: 20:33
        _0 = &_1;                        // scope 0 at ui/borrowck/issue-29166.rs:20:30: 20:33
        return;                          // scope 0 at ui/borrowck/issue-29166.rs:20:30: 20:33
    }
}
