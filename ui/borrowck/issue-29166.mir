// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();

    bb0: {
        _1 = original_report() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = revision_1() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = revision_2() -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn original_report() -> () {
    let mut _0: ();
    let mut _1: std::vec::IntoIter<&()>;
    let mut _2: std::vec::Vec<&()>;
    let mut _3: std::boxed::Box<[&()]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[&(); 1]>;
    let mut _8: &();
    let mut _9: *const [&(); 1];
    let mut _10: *const ();
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    scope 1 {
    }

    bb0: {
        _4 = SizeOf([&(); 1]);
        _5 = AlignOf([&(); 1]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [&(); 1]);
        _8 = const _;
        _9 = (((_7.0: std::ptr::Unique<[&(); 1]>).0: std::ptr::NonNull<[&(); 1]>).0: *const [&(); 1]);
        _10 = _9 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(&());
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb5, unwind unreachable];
    }

    bb2: {
        _1 = <Vec<&()> as IntoIterator>::into_iter(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = std::mem::drop::<std::vec::IntoIter<&()>>(move _1) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5: {
        (*_9) = [_8];
        _3 = move _7 as std::boxed::Box<[&()]> (Pointer(Unsize));
        _2 = slice::<impl [&()]>::into_vec::<std::alloc::Global>(move _3) -> [return: bb2, unwind continue];
    }
}

promoted[0] in original_report: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn revision_1() -> () {
    let mut _0: ();
    let mut _1: std::vec::IntoIter<&()>;
    let mut _2: std::vec::Vec<&()>;
    let mut _3: std::boxed::Box<[&()]>;
    let mut _4: std::boxed::Box<[&(); 1]>;
    let mut _5: [&(); 1];
    let mut _6: &();

    bb0: {
        _6 = const _;
        _5 = [_6];
        _4 = Box::<[&(); 1]>::new(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = move _4 as std::boxed::Box<[&()]> (Pointer(Unsize));
        _2 = slice::<impl [&()]>::into_vec::<std::alloc::Global>(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = <Vec<&()> as IntoIterator>::into_iter(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = std::mem::drop::<std::vec::IntoIter<&()>>(move _1) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in revision_1: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn revision_2() -> () {
    let mut _0: ();
    let mut _1: std::vec::IntoIter<&()>;
    let mut _2: std::vec::Vec<&()>;
    let mut _3: (std::vec::Vec<&()>, &());
    let mut _4: std::vec::Vec<&()>;
    let mut _5: std::vec::Vec<&()>;
    let _6: &();
    let _7: ();
    let mut _8: &mut std::vec::Vec<&()>;
    let mut _9: &();
    scope 1 {
        debug v => _5;
        debug b => _6;
    }

    bb0: {
        _4 = Vec::<&()>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = const _;
        _3 = (move _4, _9);
        _5 = move (_3.0: std::vec::Vec<&()>);
        _6 = (_3.1: &());
        _8 = &mut _5;
        _7 = Vec::<&()>::push(move _8, _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _2 = move _5;
        _1 = <Vec<&()> as IntoIterator>::into_iter(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = std::mem::drop::<std::vec::IntoIter<&()>>(move _1) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_5) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

promoted[0] in revision_2: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}
