// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &mut Result<(u32, u32), (u32, u32)>) -> u32 {
    debug x => _1;
    let mut _0: u32;
    let mut _2: isize;
    let _3: &mut u32;
    let _4: &&mut u32;
    let mut _5: bool;
    let mut _6: u32;
    let mut _7: bool;
    let mut _8: u32;
    let mut _9: &mut u32;
    let mut _10: &mut u32;
    scope 1 {
        debug v => _3;
        debug v => _4;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, otherwise: bb6];
    }

    bb1: {
        _0 = const 0_u32;
        goto -> bb5;
    }

    bb2: {
        _0 = (*_3);
        goto -> bb5;
    }

    bb3: {
        _3 = &mut ((((*_1) as Ok).0: (u32, u32)).0: u32);
        _4 = &_3;
        _9 = deref_copy (*_4);
        _6 = (*_9);
        _5 = Gt(move _6, const 0_u32);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb4: {
        _3 = &mut ((((*_1) as Err).0: (u32, u32)).1: u32);
        _4 = &_3;
        _10 = deref_copy (*_4);
        _8 = (*_10);
        _7 = Gt(move _8, const 0_u32);
        switchInt(move _7) -> [0: bb1, otherwise: bb2];
    }

    bb5: {
        return;
    }

    bb6: {
        unreachable;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: u32;
    let mut _4: &mut std::result::Result<(u32, u32), (u32, u32)>;
    let mut _5: std::result::Result<(u32, u32), (u32, u32)>;
    let mut _6: (u32, u32);
    let _7: &u32;
    let _8: &u32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: u32;
    let mut _12: u32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&u32, &u32);
    let mut _17: &u32;
    let _18: u32;
    let mut _19: &mut std::result::Result<(u32, u32), (u32, u32)>;
    let mut _20: std::result::Result<(u32, u32), (u32, u32)>;
    let mut _21: (u32, u32);
    let _22: &u32;
    let _23: &u32;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: u32;
    let mut _27: u32;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: &u32;
    let mut _32: &u32;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 4 {
            debug kind => _28;
        }
    }

    bb0: {
        _6 = (const 3_u32, const 4_u32);
        _5 = Result::<(u32, u32), (u32, u32)>::Ok(move _6);
        _4 = &mut _5;
        _3 = foo(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _32 = const _;
        _1 = (move _2, _32);
        _7 = (_1.0: &u32);
        _8 = (_1.1: &u32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<u32, u32>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb3: {
        _21 = (const 3_u32, const 4_u32);
        _20 = Result::<(u32, u32), (u32, u32)>::Err(move _21);
        _19 = &mut _20;
        _18 = foo(_19) -> [return: bb4, unwind continue];
    }

    bb4: {
        _17 = &_18;
        _31 = const _;
        _16 = (move _17, _31);
        _22 = (_16.0: &u32);
        _23 = (_16.1: &u32);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<u32, u32>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 4_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 3_u32;
        _0 = &_1;
        return;
    }
}
