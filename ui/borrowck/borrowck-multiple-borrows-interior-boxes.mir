// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:6:10: 6:15>::clone(_1: &Foo) -> Foo {
    debug self => _1;                    // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:6:10: 6:15
    let mut _0: Foo;                     // return place in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:6:10: 6:15
    let mut _2: std::option::Option<std::boxed::Box<Foo>>; // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:12: 7:28
    let mut _3: &std::option::Option<std::boxed::Box<Foo>>; // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:12: 7:28
    let _4: &std::option::Option<std::boxed::Box<Foo>>; // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:12: 7:28
    let mut _5: std::option::Option<std::boxed::Box<Foo>>; // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:30: 7:46
    let mut _6: &std::option::Option<std::boxed::Box<Foo>>; // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:30: 7:46
    let _7: &std::option::Option<std::boxed::Box<Foo>>; // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:30: 7:46

    bb0: {
        _4 = &((*_1).0: std::option::Option<std::boxed::Box<Foo>>); // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:12: 7:28
        _3 = _4;                         // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:12: 7:28
        _2 = <Option<Box<Foo>> as Clone>::clone(move _3) -> bb1; // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:12: 7:28
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:12: 7:28
                                         // + literal: Const { ty: for<'a> fn(&'a Option<Box<Foo>>) -> Option<Box<Foo>> {<Option<Box<Foo>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).1: std::option::Option<std::boxed::Box<Foo>>); // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:30: 7:46
        _6 = _7;                         // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:30: 7:46
        _5 = <Option<Box<Foo>> as Clone>::clone(move _6) -> [return: bb2, unwind: bb3]; // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:30: 7:46
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:30: 7:46
                                         // + literal: Const { ty: for<'a> fn(&'a Option<Box<Foo>>) -> Option<Box<Foo>> {<Option<Box<Foo>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Foo(move _2, move _5);      // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:6:10: 6:15
        return;                          // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:6:15: 6:15
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:6:14: 6:15
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:6:10: 6:15
    }
}

fn test(_1: &mut Foo) -> () {
    debug f => _1;                       // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:9:9: 9:10
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:9:22: 9:22
    let mut _2: isize;                   // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:29: 11:48
    let mut _3: isize;                   // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:9: 11:27
    let _4: &mut std::boxed::Box<Foo>;   // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:14: 11:26
    let _5: &mut std::boxed::Box<Foo>;   // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:34: 11:47
    let mut _6: isize;                   // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:12:31: 12:50
    let mut _7: isize;                   // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:12:11: 12:29
    let mut _10: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _11: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _12: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _13: std::boxed::Box<Foo>;   // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:14: 11:26
    let mut _14: std::boxed::Box<Foo>;   // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:14: 11:26
    let mut _15: std::boxed::Box<Foo>;   // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:14: 11:26
    let mut _16: std::boxed::Box<Foo>;   // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:14: 11:26
    let mut _17: *const Foo;             // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:14: 11:26
    let mut _18: *const Foo;             // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:14: 11:26
    let mut _19: *const Foo;             // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:14: 11:26
    let mut _20: *const Foo;             // in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:14: 11:26
    scope 1 {
        debug left => _4;                // in scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:14: 11:26
        debug right => _5;               // in scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:34: 11:47
        let _8: &mut std::boxed::Box<Foo>; // in scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:12:16: 12:28
        let _9: &mut std::boxed::Box<Foo>; // in scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:12:36: 12:49
        scope 2 {
            debug left => _8;            // in scope 2 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:12:16: 12:28
            debug right => _9;           // in scope 2 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:12:36: 12:49
        }
    }

    bb0: {
        _3 = discriminant(((*_1).0: std::option::Option<std::boxed::Box<Foo>>)); // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:10:9: 10:11
        switchInt(move _3) -> [1: bb2, otherwise: bb1]; // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:10:3: 10:11
    }

    bb1: {
        _12 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _2 = discriminant(((*_1).1: std::option::Option<std::boxed::Box<Foo>>)); // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:10:9: 10:11
        switchInt(move _2) -> [1: bb3, otherwise: bb1]; // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:10:3: 10:11
    }

    bb3: {
        _4 = &mut ((((*_1).0: std::option::Option<std::boxed::Box<Foo>>) as Some).0: std::boxed::Box<Foo>); // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:14: 11:26
        _5 = &mut ((((*_1).1: std::option::Option<std::boxed::Box<Foo>>) as Some).0: std::boxed::Box<Foo>); // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:34: 11:47
        _13 = deref_copy (*_4);          // scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:59: 11:65
        _17 = (((_13.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:59: 11:65
        _7 = discriminant(((*_17).0: std::option::Option<std::boxed::Box<Foo>>)); // scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:59: 11:65
        switchInt(move _7) -> [1: bb5, otherwise: bb4]; // scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:53: 11:65
    }

    bb4: {
        _11 = begin_panic::<&str>(const "explicit panic"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _14 = deref_copy (*_4);          // scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:59: 11:65
        _18 = (((_14.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:59: 11:65
        _6 = discriminant(((*_18).1: std::option::Option<std::boxed::Box<Foo>>)); // scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:59: 11:65
        switchInt(move _6) -> [1: bb6, otherwise: bb4]; // scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:11:53: 11:65
    }

    bb6: {
        _15 = deref_copy (*_4);          // scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:12:16: 12:28
        _19 = (((_15.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:12:16: 12:28
        _8 = &mut ((((*_19).0: std::option::Option<std::boxed::Box<Foo>>) as Some).0: std::boxed::Box<Foo>); // scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:12:16: 12:28
        _16 = deref_copy (*_4);          // scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:12:36: 12:49
        _20 = (((_16.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:12:36: 12:49
        _9 = &mut ((((*_20).1: std::option::Option<std::boxed::Box<Foo>>) as Some).0: std::boxed::Box<Foo>); // scope 1 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:12:36: 12:49
        _10 = begin_panic::<&str>(const "explicit panic"); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:19:11: 19:11

    bb0: {
        return;                          // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:20:2: 20:2
    }
}

fn Foo(_1: Option<Box<Foo>>, _2: Option<Box<Foo>>) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:1: 7:11

    bb0: {
        _0 = Foo(move _1, move _2);      // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:1: 7:11
        return;                          // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:1: 7:11
    }
}

// MIR FOR CTFE
fn Foo(_1: Option<Box<Foo>>, _2: Option<Box<Foo>>) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:1: 7:11

    bb0: {
        _0 = Foo(move _1, move _2);      // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:1: 7:11
        return;                          // scope 0 at ui/borrowck/borrowck-multiple-borrows-interior-boxes.rs:7:1: 7:11
    }
}
