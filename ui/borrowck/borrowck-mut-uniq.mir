// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/borrowck/borrowck-mut-uniq.rs:5:10: 5:15>::fmt(_1: &Ints, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:5:10: 5:15
    debug f => _2;                       // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:5:10: 5:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:5:10: 5:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:5:10: 5:15
    let mut _4: &str;                    // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:5:10: 5:15
    let _5: &str;                        // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:5:10: 5:15
    let mut _6: &str;                    // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:14: 6:29
    let _7: &str;                        // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:14: 6:29
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:14: 6:29
    let mut _9: &std::boxed::Box<isize>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:14: 6:29
    let _10: &std::boxed::Box<isize>;    // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:14: 6:29
    let mut _11: &str;                   // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:31: 6:49
    let _12: &str;                       // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:31: 6:49
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:31: 6:49
    let mut _14: &&std::vec::Vec<isize>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:31: 6:49
    let _15: &&std::vec::Vec<isize>;     // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:31: 6:49
    let _16: &std::vec::Vec<isize>;      // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:31: 6:49

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:5:10: 5:15
        _5 = const "Ints";               // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:5:10: 5:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:5:10: 5:15
        _7 = const "sum";                // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:14: 6:29
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:6:14: 6:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:14: 6:29
        _10 = &((*_1).0: std::boxed::Box<isize>); // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:14: 6:29
        _9 = _10;                        // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:14: 6:29
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:14: 6:29
        _12 = const "values";            // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:31: 6:49
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:6:31: 6:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:31: 6:49
        _16 = &((*_1).1: std::vec::Vec<isize>); // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:31: 6:49
        _15 = &_16;                      // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:31: 6:49
        _14 = _15;                       // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:31: 6:49
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:6:31: 6:49
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:5:10: 5:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:5:15: 5:15
    }
}

fn add_int(_1: &mut Ints, _2: isize) -> () {
    debug x => _1;                       // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:8:12: 8:13
    debug v => _2;                       // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:8:26: 8:27
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:8:36: 8:36
    let mut _3: isize;                   // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:9:15: 9:16
    let mut _4: (isize, bool);           // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:9:5: 9:16
    let mut _5: std::vec::Vec<isize>;    // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:10:9: 10:19
    let _6: ();                          // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:11:5: 11:37
    let mut _7: &mut std::vec::Vec<isize>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:11:10: 11:21
    let mut _8: &mut std::vec::Vec<isize>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:11:10: 11:21
    let mut _9: &mut std::vec::Vec<isize>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:11:23: 11:36
    let mut _10: &mut std::vec::Vec<isize>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:11:23: 11:36
    let _11: ();                         // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:12:5: 12:19
    let mut _12: &mut std::vec::Vec<isize>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:12:5: 12:19
    let mut _13: isize;                  // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:12:17: 12:18
    let _14: ();                         // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:13:5: 13:37
    let mut _15: &mut std::vec::Vec<isize>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:13:10: 13:21
    let mut _16: &mut std::vec::Vec<isize>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:13:10: 13:21
    let mut _17: &mut std::vec::Vec<isize>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:13:23: 13:36
    let mut _18: &mut std::vec::Vec<isize>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:13:23: 13:36
    let mut _19: std::boxed::Box<isize>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:8:12: 8:13
    let mut _20: std::boxed::Box<isize>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:8:12: 8:13
    let mut _21: std::boxed::Box<isize>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:8:12: 8:13
    let mut _22: *const isize;           // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:8:12: 8:13
    let mut _23: *const isize;           // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:8:12: 8:13
    let mut _24: *const isize;           // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:8:12: 8:13
    scope 1 {
        debug values => _5;              // in scope 1 at ui/borrowck/borrowck-mut-uniq.rs:10:9: 10:19
    }

    bb0: {
        _3 = _2;                         // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:9:15: 9:16
        _19 = deref_copy ((*_1).0: std::boxed::Box<isize>); // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:9:5: 9:16
        _22 = (((_19.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:9:5: 9:16
        _4 = CheckedAdd((*_22), _3);     // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:9:5: 9:16
        _20 = deref_copy ((*_1).0: std::boxed::Box<isize>); // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:9:5: 9:16
        _23 = (((_20.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:9:5: 9:16
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_23), move _3) -> bb1; // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:9:5: 9:16
    }

    bb1: {
        _21 = deref_copy ((*_1).0: std::boxed::Box<isize>); // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:9:5: 9:16
        _24 = (((_21.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:9:5: 9:16
        (*_24) = move (_4.0: isize);     // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:9:5: 9:16
        _5 = Vec::<isize>::new() -> bb2; // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:10:22: 10:32
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:10:22: 10:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<isize> {Vec::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &mut _5;                    // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:11:10: 11:21
        _7 = &mut (*_8);                 // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:11:10: 11:21
        _10 = &mut ((*_1).1: std::vec::Vec<isize>); // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:11:23: 11:36
        _9 = &mut (*_10);                // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:11:23: 11:36
        _6 = std::mem::swap::<Vec<isize>>(move _7, move _9) -> [return: bb3, unwind: bb7]; // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:11:5: 11:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:11:5: 11:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Vec<isize>, &'b mut Vec<isize>) {std::mem::swap::<Vec<isize>>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = &mut _5;                   // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:12:5: 12:19
        _13 = _2;                        // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:12:17: 12:18
        _11 = Vec::<isize>::push(move _12, move _13) -> [return: bb4, unwind: bb7]; // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:12:5: 12:19
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:12:12: 12:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<isize>, isize) {Vec::<isize>::push}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = &mut _5;                   // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:13:10: 13:21
        _15 = &mut (*_16);               // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:13:10: 13:21
        _18 = &mut ((*_1).1: std::vec::Vec<isize>); // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:13:23: 13:36
        _17 = &mut (*_18);               // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:13:23: 13:36
        _14 = std::mem::swap::<Vec<isize>>(move _15, move _17) -> [return: bb5, unwind: bb7]; // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:13:5: 13:37
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:13:5: 13:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Vec<isize>, &'b mut Vec<isize>) {std::mem::swap::<Vec<isize>>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_5) -> bb6;                 // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:14:1: 14:2
    }

    bb6: {
        return;                          // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:14:2: 14:2
    }

    bb7 (cleanup): {
        drop(_5) -> bb8;                 // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:14:1: 14:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:8:1: 14:2
    }
}

fn iter_ints(_1: &Ints, _2: F) -> bool {
    debug x => _1;                       // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:16:17: 16:18
    debug f => _2;                       // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:16:27: 16:32
    let mut _0: bool;                    // return place in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:16:40: 16:44
    let _3: usize;                       // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:17:9: 17:10
    let mut _4: &std::vec::Vec<isize>;   // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:17:13: 17:27
    let mut _5: &mut std::ops::Range<usize>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:5: 18:36
    let mut _6: std::ops::Range<usize>;  // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:5: 18:11
    let mut _7: usize;                   // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:9: 18:10
    let mut _8: [closure@ui/borrowck/borrowck-mut-uniq.rs:18:16: 18:19]; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:16: 18:35
    let mut _9: &mut F;                  // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:16: 18:35
    let mut _10: &&Ints;                 // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:16: 18:35
    scope 1 {
        debug l => _3;                   // in scope 1 at ui/borrowck/borrowck-mut-uniq.rs:17:9: 17:10
    }

    bb0: {
        _4 = &((*_1).1: std::vec::Vec<isize>); // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:17:13: 17:27
        _3 = Vec::<isize>::len(move _4) -> [return: bb1, unwind: bb4]; // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:17:13: 17:27
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:17:22: 17:25
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>) -> usize {Vec::<isize>::len}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _3;                         // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:18:9: 18:10
        _6 = std::ops::Range::<usize> { start: const 0_usize, end: move _7 }; // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:18:5: 18:11
        _5 = &mut _6;                    // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:18:5: 18:36
        _9 = &mut _2;                    // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:18:16: 18:35
        _10 = &_1;                       // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:18:16: 18:35
        _8 = [closure@ui/borrowck/borrowck-mut-uniq.rs:18:16: 18:19] { f: move _9, x: move _10 }; // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:18:16: 18:35
                                         // closure
                                         // + def_id: DefId(0:7 ~ borrowck_mut_uniq[a52c]::iter_ints::{closure#0})
                                         // + substs: [
                                         //     F,
                                         //     i16,
                                         //     extern "rust-call" fn((usize,)) -> bool,
                                         //     (&mut F, &&Ints),
                                         // ]
        _0 = <std::ops::Range<usize> as Iterator>::all::<[closure@ui/borrowck/borrowck-mut-uniq.rs:18:16: 18:19]>(move _5, move _8) -> [return: bb2, unwind: bb4]; // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:18:5: 18:36
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:18:12: 18:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>, [closure@ui/borrowck/borrowck-mut-uniq.rs:18:16: 18:19]) -> bool {<std::ops::Range<usize> as Iterator>::all::<[closure@ui/borrowck/borrowck-mut-uniq.rs:18:16: 18:19]>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:19:1: 19:2
    }

    bb3: {
        return;                          // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:19:2: 19:2
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:19:1: 19:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:16:1: 19:2
    }
}

fn iter_ints::{closure#0}(_1: &mut [closure@ui/borrowck/borrowck-mut-uniq.rs:18:16: 18:19], _2: usize) -> bool {
    debug i => _2;                       // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:17: 18:18
    debug f => (*((*_1).0: &mut F));     // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:16:27: 16:32
    debug x => (*((*_1).1: &&Ints));     // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:16:17: 16:18
    let mut _0: bool;                    // return place in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:20: 18:20
    let mut _3: &mut F;                  // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:20: 18:21
    let mut _4: (&isize,);               // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:20: 18:35
    let mut _5: &isize;                  // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:22: 18:34
    let _6: &isize;                      // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:22: 18:34
    let _7: &isize;                      // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:23: 18:34
    let mut _8: &std::vec::Vec<isize>;   // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:23: 18:31
    let mut _9: usize;                   // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:32: 18:33
    let mut _10: &mut F;                 // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:16: 18:35
    let mut _11: &&Ints;                 // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:16: 18:35
    let mut _12: &Ints;                  // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:16: 18:35

    bb0: {
        _10 = deref_copy ((*_1).0: &mut F); // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:20: 18:21
        _3 = &mut (*_10);                // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:20: 18:21
        _11 = deref_copy ((*_1).1: &&Ints); // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:23: 18:31
        _12 = deref_copy (*_11);         // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:23: 18:31
        _8 = &((*_12).1: std::vec::Vec<isize>); // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:23: 18:31
        _9 = _2;                         // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:32: 18:33
        _7 = <Vec<isize> as Index<usize>>::index(move _8, move _9) -> bb1; // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:23: 18:34
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:18:23: 18:34
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>, usize) -> &'a <Vec<isize> as Index<usize>>::Output {<Vec<isize> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _7;                         // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:22: 18:34
        _5 = _6;                         // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:22: 18:34
        _4 = (move _5,);                 // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:20: 18:35
        _0 = <F as FnMut<(&isize,)>>::call_mut(move _3, move _4) -> bb2; // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:20: 18:35
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:18:20: 18:21
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (&isize,)) -> <F as FnOnce<(&isize,)>>::Output {<F as FnMut<(&isize,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:18:35: 18:35
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:21:15: 21:15
    let mut _1: std::boxed::Box<Ints>;   // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:22:9: 22:17
    let mut _2: Ints;                    // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:22:37: 22:80
    let mut _3: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:22:48: 22:59
    let mut _4: std::vec::Vec<isize>;    // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:22:69: 22:79
    let _5: ();                          // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:23:5: 23:28
    let mut _6: &mut Ints;               // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:23:13: 23:23
    let mut _7: &mut Ints;               // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:23:13: 23:23
    let _8: ();                          // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:24:5: 24:28
    let mut _9: &mut Ints;               // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:24:13: 24:23
    let mut _10: &mut Ints;              // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:24:13: 24:23
    let _11: bool;                       // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:26:5: 29:7
    let mut _12: &Ints;                  // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:26:15: 26:21
    let _13: &Ints;                      // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:26:15: 26:21
    let mut _14: [closure@ui/borrowck/borrowck-mut-uniq.rs:26:23: 26:26]; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:26:23: 29:6
    let _15: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _16: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _17: &[&str];                // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:31:14: 31:25
    let mut _18: &[&str; 2];             // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:31:14: 31:25
    let _19: &[&str; 2];                 // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:31:14: 31:25
    let mut _20: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _21: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _22: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _23: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _24: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:31:27: 31:31
    let mut _25: &std::boxed::Box<Ints>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:31:27: 31:31
    let _26: &std::boxed::Box<Ints>;     // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:31:27: 31:31
    let mut _28: *const Ints;            // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:22:9: 22:17
    let mut _29: *const Ints;            // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:22:9: 22:17
    let mut _30: *const Ints;            // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:22:9: 22:17
    scope 1 {
        debug ints => _1;                // in scope 1 at ui/borrowck/borrowck-mut-uniq.rs:22:9: 22:17
        let mut _27: &[&str; 2];         // in scope 1 at ui/borrowck/borrowck-mut-uniq.rs:31:14: 31:25
    }

    bb0: {
        _3 = Box::<isize>::new(const 0_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:22:48: 22:59
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:22:48: 22:56
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Vec::<isize>::new() -> [return: bb2, unwind: bb12]; // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:22:69: 22:79
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:22:69: 22:77
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn() -> Vec<isize> {Vec::<isize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Ints { sum: move _3, values: move _4 }; // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:22:37: 22:80
        _1 = Box::<Ints>::new(move _2) -> bb3; // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:22:28: 22:81
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:22:28: 22:36
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Ints) -> Box<Ints> {Box::<Ints>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _28 = (((_1.0: std::ptr::Unique<Ints>).0: std::ptr::NonNull<Ints>).0: *const Ints); // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:23:13: 23:23
        _7 = &mut (*_28);                // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:23:13: 23:23
        _6 = &mut (*_7);                 // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:23:13: 23:23
        _5 = add_int(move _6, const 22_isize) -> [return: bb4, unwind: bb11]; // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:23:5: 23:28
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:23:5: 23:12
                                         // + literal: Const { ty: for<'a> fn(&'a mut Ints, isize) {add_int}, val: Value(<ZST>) }
    }

    bb4: {
        _29 = (((_1.0: std::ptr::Unique<Ints>).0: std::ptr::NonNull<Ints>).0: *const Ints); // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:24:13: 24:23
        _10 = &mut (*_29);               // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:24:13: 24:23
        _9 = &mut (*_10);                // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:24:13: 24:23
        _8 = add_int(move _9, const 44_isize) -> [return: bb5, unwind: bb11]; // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:24:5: 24:28
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:24:5: 24:12
                                         // + literal: Const { ty: for<'a> fn(&'a mut Ints, isize) {add_int}, val: Value(<ZST>) }
    }

    bb5: {
        _30 = (((_1.0: std::ptr::Unique<Ints>).0: std::ptr::NonNull<Ints>).0: *const Ints); // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:26:15: 26:21
        _13 = &(*_30);                   // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:26:15: 26:21
        _12 = _13;                       // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:26:15: 26:21
        _11 = iter_ints::<[closure@ui/borrowck/borrowck-mut-uniq.rs:26:23: 26:26]>(move _12, move _14) -> [return: bb6, unwind: bb11]; // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:26:5: 29:7
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:26:5: 26:14
                                         // + literal: Const { ty: for<'a> fn(&'a Ints, [closure@ui/borrowck/borrowck-mut-uniq.rs:26:23: 26:26]) -> bool {iter_ints::<[closure@ui/borrowck/borrowck-mut-uniq.rs:26:23: 26:26]>}, val: Value(<ZST>) }
    }

    bb6: {
        _27 = const _;                   // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:31:14: 31:25
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:31:14: 31:25
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _19 = _27;                       // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:31:14: 31:25
        _18 = _19;                       // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:31:14: 31:25
        _17 = move _18 as &[&str] (Pointer(Unsize)); // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:31:14: 31:25
        _26 = &_1;                       // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:31:27: 31:31
        _25 = _26;                       // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:31:27: 31:31
        _24 = core::fmt::ArgumentV1::<'_>::new_debug::<Box<Ints>>(move _25) -> [return: bb7, unwind: bb11]; // scope 1 at ui/borrowck/borrowck-mut-uniq.rs:31:27: 31:31
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:31:27: 31:31
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b> fn(&'b Box<Ints>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Box<Ints>>}, val: Value(<ZST>) }
    }

    bb7: {
        _23 = [move _24];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _22 = &_23;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = _22;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = move _21 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _16 = Arguments::<'_>::new_v1(move _17, move _20) -> [return: bb8, unwind: bb11]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb8: {
        _15 = _print(move _16) -> [return: bb9, unwind: bb11]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_1) -> bb10;                // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:32:1: 32:2
    }

    bb10: {
        return;                          // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:32:2: 32:2
    }

    bb11 (cleanup): {
        drop(_1) -> bb13;                // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:32:1: 32:2
    }

    bb12 (cleanup): {
        drop(_3) -> bb13;                // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:22:79: 22:80
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:21:1: 32:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:31:14: 31:25
    let mut _1: [&str; 2];               // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:31:14: 31:25

    bb0: {
        _1 = [const "ints=", const "\n"]; // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:31:14: 31:25
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:31:14: 31:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:31:14: 31:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:31:14: 31:25
        return;                          // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:31:14: 31:25
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/borrowck/borrowck-mut-uniq.rs:26:23: 26:26], _2: &isize) -> bool {
    debug i => _2;                       // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:26:24: 26:25
    let mut _0: bool;                    // return place in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:26:27: 26:27
    let _3: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _5: &[&str];                 // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:18: 27:32
    let mut _6: &[&str; 2];              // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:18: 27:32
    let _7: &[&str; 2];                  // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:18: 27:32
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:34: 27:36
    let mut _13: &isize;                 // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:34: 27:36
    let _14: &isize;                     // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:34: 27:36
    let mut _15: &[&str; 2];             // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:18: 27:32

    bb0: {
        _15 = const _;                   // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:18: 27:32
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:27:18: 27:32
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _7 = _15;                        // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:18: 27:32
        _6 = _7;                         // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:18: 27:32
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:18: 27:32
        _14 = _2;                        // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:34: 27:36
        _13 = _14;                       // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:34: 27:36
        _12 = core::fmt::ArgumentV1::<'_>::new_debug::<isize>(move _13) -> bb1; // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:34: 27:36
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:27:34: 27:36
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _print(move _4) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = const true;                 // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:28:9: 28:13
        return;                          // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:29:6: 29:6
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:18: 27:32
    let mut _1: [&str; 2];               // in scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:18: 27:32

    bb0: {
        _1 = [const "isize = ", const "\n"]; // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:18: 27:32
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:27:18: 27:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-mut-uniq.rs:27:18: 27:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:18: 27:32
        return;                          // scope 0 at ui/borrowck/borrowck-mut-uniq.rs:27:18: 27:32
    }
}
