// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn get(_1: &MutSlice<'_, T>, _2: usize) -> &T {
    debug ms => _1;
    debug index => _2;
    let mut _0: &T;
    let mut _3: usize;
    let mut _4: bool;
    let mut _5: &mut [T];
    let mut _6: &mut [T];

    bb0: {
        _5 = deref_copy ((*_1).0: &mut [T]);
        _3 = Len((*_5));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _6 = deref_copy ((*_1).0: &mut [T]);
        _0 = &(*_6)[_2];
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [i32; 3];
    let mut _3: &mut [i32];
    let mut _4: &mut [i32; 3];
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let _9: &MutSlice<'_, i32>;
    let _11: &MutSlice<'_, i32>;
    let _13: &MutSlice<'_, i32>;
    let mut _14: (&i32, &i32);
    let mut _15: &i32;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: i32;
    let mut _21: i32;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&i32, &i32);
    let mut _26: &i32;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: i32;
    let mut _32: i32;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&i32, &i32);
    let mut _37: &i32;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: i32;
    let mut _43: i32;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: (&i32, &i32);
    let mut _48: &i32;
    let _49: usize;
    let mut _50: usize;
    let mut _51: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: i32;
    let mut _57: i32;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&i32, &i32);
    let mut _62: &i32;
    let _63: usize;
    let mut _64: usize;
    let mut _65: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: i32;
    let mut _71: i32;
    let _73: !;
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _75: (&i32, &i32);
    let mut _76: &i32;
    let _77: usize;
    let mut _78: usize;
    let mut _79: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: i32;
    let mut _85: i32;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _95: &mut [i32];
    let mut _96: &mut [i32];
    let mut _97: &mut [i32];
    scope 1 {
        debug data => _1;
        let _2: MutSlice<'_, i32>;
        let _52: &i32;
        let _53: &i32;
        let _66: &i32;
        let _67: &i32;
        let _80: &i32;
        let _81: &i32;
        let mut _89: &i32;
        let mut _90: &i32;
        let mut _91: &i32;
        scope 2 {
            debug slice => _2;
            let _8: &i32;
            scope 3 {
                debug index0 => _8;
                let _10: &i32;
                scope 4 {
                    debug index1 => _10;
                    let _12: &i32;
                    scope 5 {
                        debug index2 => _12;
                        let _16: &i32;
                        let _17: &i32;
                        let _27: &i32;
                        let _28: &i32;
                        let _38: &i32;
                        let _39: &i32;
                        let mut _92: &i32;
                        let mut _93: &i32;
                        let mut _94: &i32;
                        scope 6 {
                            debug left_val => _16;
                            debug right_val => _17;
                            let _22: core::panicking::AssertKind;
                            scope 7 {
                                debug kind => _22;
                            }
                        }
                        scope 8 {
                            debug left_val => _27;
                            debug right_val => _28;
                            let _33: core::panicking::AssertKind;
                            scope 9 {
                                debug kind => _33;
                            }
                        }
                        scope 10 {
                            debug left_val => _38;
                            debug right_val => _39;
                            let _44: core::panicking::AssertKind;
                            scope 11 {
                                debug kind => _44;
                            }
                        }
                    }
                }
            }
        }
        scope 12 {
            debug left_val => _52;
            debug right_val => _53;
            let _58: core::panicking::AssertKind;
            scope 13 {
                debug kind => _58;
            }
        }
        scope 14 {
            debug left_val => _66;
            debug right_val => _67;
            let _72: core::panicking::AssertKind;
            scope 15 {
                debug kind => _72;
            }
        }
        scope 16 {
            debug left_val => _80;
            debug right_val => _81;
            let _86: core::panicking::AssertKind;
            scope 17 {
                debug kind => _86;
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _4 = &mut _1;
        _3 = _4 as &mut [i32] (Pointer(Unsize));
        _2 = MutSlice::<'_, i32> { data: move _3 };
        _5 = const 0_usize;
        _95 = deref_copy (_2.0: &mut [i32]);
        _6 = Len((*_95));
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb1, unwind continue];
    }

    bb1: {
        _96 = deref_copy (_2.0: &mut [i32]);
        _97 = deref_copy (_2.0: &mut [i32]);
        (*_96)[_5] = Add((*_97)[_5], const 4_i32);
        _9 = &_2;
        _8 = get::<i32>(_9, const 0_usize) -> [return: bb2, unwind continue];
    }

    bb2: {
        _11 = &_2;
        _10 = get::<i32>(_11, const 1_usize) -> [return: bb3, unwind continue];
    }

    bb3: {
        _13 = &_2;
        _12 = get::<i32>(_13, const 2_usize) -> [return: bb4, unwind continue];
    }

    bb4: {
        _15 = _8;
        _94 = const _;
        _14 = (move _15, _94);
        _16 = (_14.0: &i32);
        _17 = (_14.1: &i32);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<i32, i32>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb6: {
        _26 = _10;
        _93 = const _;
        _25 = (move _26, _93);
        _27 = (_25.0: &i32);
        _28 = (_25.1: &i32);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<i32, i32>(move _33, _27, _28, move _35) -> unwind continue;
    }

    bb8: {
        _37 = _12;
        _92 = const _;
        _36 = (move _37, _92);
        _38 = (_36.0: &i32);
        _39 = (_36.1: &i32);
        _42 = (*_38);
        _43 = (*_39);
        _41 = Eq(move _42, move _43);
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<i32, i32>(move _44, _38, _39, move _46) -> unwind continue;
    }

    bb10: {
        _49 = const 0_usize;
        _50 = const 3_usize;
        _51 = Lt(_49, _50);
        assert(move _51, "index out of bounds: the length is {} but the index is {}", move _50, _49) -> [success: bb11, unwind continue];
    }

    bb11: {
        _48 = &_1[_49];
        _91 = const _;
        _47 = (move _48, _91);
        _52 = (_47.0: &i32);
        _53 = (_47.1: &i32);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<i32, i32>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb13: {
        _63 = const 1_usize;
        _64 = const 3_usize;
        _65 = Lt(_63, _64);
        assert(move _65, "index out of bounds: the length is {} but the index is {}", move _64, _63) -> [success: bb14, unwind continue];
    }

    bb14: {
        _62 = &_1[_63];
        _90 = const _;
        _61 = (move _62, _90);
        _66 = (_61.0: &i32);
        _67 = (_61.1: &i32);
        _70 = (*_66);
        _71 = (*_67);
        _69 = Eq(move _70, move _71);
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _72 = core::panicking::AssertKind::Eq;
        _74 = Option::<Arguments<'_>>::None;
        _73 = core::panicking::assert_failed::<i32, i32>(move _72, _66, _67, move _74) -> unwind continue;
    }

    bb16: {
        _77 = const 2_usize;
        _78 = const 3_usize;
        _79 = Lt(_77, _78);
        assert(move _79, "index out of bounds: the length is {} but the index is {}", move _78, _77) -> [success: bb17, unwind continue];
    }

    bb17: {
        _76 = &_1[_77];
        _89 = const _;
        _75 = (move _76, _89);
        _80 = (_75.0: &i32);
        _81 = (_75.1: &i32);
        _84 = (*_80);
        _85 = (*_81);
        _83 = Eq(move _84, move _85);
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<i32, i32>(move _86, _80, _81, move _88) -> unwind continue;
    }

    bb19: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}
