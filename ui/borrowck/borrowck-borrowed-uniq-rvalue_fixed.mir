// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:5:11: 5:11
    let _1: std::boxed::Box<usize>;      // in scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:6:9: 6:12
    let _4: std::option::Option<&usize>; // in scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:9:5: 9:36
    let mut _5: &mut std::collections::HashMap<usize, &usize>; // in scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:9:5: 9:36
    let mut _6: &usize;                  // in scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:9:26: 9:35
    let _7: &usize;                      // in scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:9:26: 9:35
    let mut _8: std::boxed::Box<usize>;  // in scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:12:11: 12:22
    let _9: std::option::Option<&usize>; // in scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:13:5: 13:32
    let mut _10: &mut std::collections::HashMap<usize, &usize>; // in scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:13:5: 13:32
    let mut _11: &usize;                 // in scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:13:26: 13:31
    let _12: &usize;                     // in scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:13:26: 13:31
    let mut _13: bool;                   // in scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:14:1: 14:2
    let mut _14: *const usize;           // in scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:8:9: 8:16
    let mut _15: *const usize;           // in scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:6:9: 6:12
    scope 1 {
        debug tmp => _1;                 // in scope 1 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:6:9: 6:12
        let mut _2: std::collections::HashMap<usize, &usize>; // in scope 1 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:7:9: 7:22
        scope 2 {
            debug buggy_map => _2;       // in scope 2 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:7:9: 7:22
            let _3: std::boxed::Box<usize>; // in scope 2 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:8:9: 8:16
            scope 3 {
                debug binding => _3;     // in scope 3 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:8:9: 8:16
            }
        }
    }

    bb0: {
        _13 = const false;               // scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:6:9: 6:12
        _2 = HashMap::<usize, &usize>::new() -> [return: bb1, unwind: bb13]; // scope 1 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:7:49: 7:63
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:7:49: 7:61
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn() -> HashMap<usize, &usize> {HashMap::<usize, &usize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Box::<usize>::new(const 1_usize) -> [return: bb2, unwind: bb9]; // scope 2 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:8:19: 8:30
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:8:19: 8:27
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(usize) -> Box<usize> {Box::<usize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &mut _2;                    // scope 3 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:9:5: 9:36
        _14 = (((_3.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 3 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:9:26: 9:35
        _7 = &(*_14);                    // scope 3 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:9:26: 9:35
        _6 = _7;                         // scope 3 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:9:26: 9:35
        _4 = HashMap::<usize, &usize>::insert(move _5, const 42_usize, move _6) -> [return: bb3, unwind: bb8]; // scope 3 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:9:5: 9:36
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:9:15: 9:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<usize, &usize>, usize, &usize) -> Option<&usize> {HashMap::<usize, &usize>::insert}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = Box::<usize>::new(const 2_usize) -> [return: bb11, unwind: bb8]; // scope 3 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:12:11: 12:22
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:12:11: 12:19
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(usize) -> Box<usize> {Box::<usize>::new}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_3) -> [return: bb5, unwind: bb9]; // scope 2 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:14:1: 14:2
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind: bb13]; // scope 1 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:14:1: 14:2
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:14:1: 14:2
    }

    bb7: {
        _13 = const false;               // scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:14:1: 14:2
        return;                          // scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:14:2: 14:2
    }

    bb8 (cleanup): {
        drop(_3) -> bb9;                 // scope 2 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:14:1: 14:2
    }

    bb9 (cleanup): {
        drop(_2) -> bb13;                // scope 1 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:14:1: 14:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:5:1: 14:2
    }

    bb11: {
        _13 = const true;                // scope 3 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:12:5: 12:8
        _1 = move _8;                    // scope 3 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:12:5: 12:8
        _10 = &mut _2;                   // scope 3 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:13:5: 13:32
        _15 = (((_1.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 3 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:13:26: 13:31
        _12 = &(*_15);                   // scope 3 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:13:26: 13:31
        _11 = _12;                       // scope 3 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:13:26: 13:31
        _9 = HashMap::<usize, &usize>::insert(move _10, const 43_usize, move _11) -> [return: bb4, unwind: bb8]; // scope 3 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:13:5: 13:32
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:13:15: 13:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<usize, &usize>, usize, &usize) -> Option<&usize> {HashMap::<usize, &usize>::insert}, val: Value(<ZST>) }
    }

    bb12 (cleanup): {
        drop(_1) -> bb10;                // scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:14:1: 14:2
    }

    bb13 (cleanup): {
        switchInt(_13) -> [0: bb10, otherwise: bb12]; // scope 0 at ui/borrowck/borrowck-borrowed-uniq-rvalue_fixed.rs:14:1: 14:2
    }
}
