// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn ncint(_1: isize) -> ncint {
    debug v => _1;
    let mut _0: ncint;

    bb0: {
        _0 = ncint { v: _1 };
        return;
    }
}

fn <impl at ui/borrowck/fsu-moves-and-copies.rs:14:1: 14:11>::new(_1: isize, _2: isize) -> NoFoo {
    debug x => _1;
    debug y => _2;
    let mut _0: NoFoo;
    let mut _3: ncint;

    bb0: {
        _3 = ncint(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = NoFoo { copied: _1, nocopy: move _3 };
        return;
    }
}

fn <impl at ui/borrowck/fsu-moves-and-copies.rs:19:1: 19:13>::new(_1: isize, _2: isize) -> MoveFoo {
    debug x => _1;
    debug y => _2;
    let mut _0: MoveFoo;
    let mut _3: std::boxed::Box<isize>;

    bb0: {
        _3 = Box::<isize>::new(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = MoveFoo { copied: _1, moved: move _3 };
        return;
    }
}

fn <impl at ui/borrowck/fsu-moves-and-copies.rs:24:1: 24:15>::new(_1: isize, _2: isize) -> DropNoFoo {
    debug x => _1;
    debug y => _2;
    let mut _0: DropNoFoo;
    let mut _3: NoFoo;

    bb0: {
        _3 = NoFoo::new(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = DropNoFoo { inner: move _3 };
        return;
    }
}

fn <impl at ui/borrowck/fsu-moves-and-copies.rs:27:1: 27:24>::drop(_1: &mut DropNoFoo) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/borrowck/fsu-moves-and-copies.rs:30:1: 30:17>::new(_1: isize, _2: isize) -> DropMoveFoo {
    debug x => _1;
    debug y => _2;
    let mut _0: DropMoveFoo;
    let mut _3: MoveFoo;

    bb0: {
        _3 = MoveFoo::new(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = DropMoveFoo { inner: move _3 };
        return;
    }
}

fn <impl at ui/borrowck/fsu-moves-and-copies.rs:33:1: 33:26>::drop(_1: &mut DropMoveFoo) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn test0() -> () {
    let mut _0: ();
    let _1: DropNoFoo;
    let mut _3: NoFoo;
    let mut _4: ncint;
    let mut _6: NoFoo;
    let mut _7: ncint;
    let mut _8: (&isize, &isize);
    let mut _9: &isize;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: isize;
    let mut _15: isize;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&isize, &isize);
    let mut _20: &isize;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: isize;
    let mut _26: isize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&isize, &isize);
    let mut _31: &isize;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: isize;
    let mut _37: isize;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&isize, &isize);
    let mut _42: &isize;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: isize;
    let mut _48: isize;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: (&isize, &isize);
    let mut _53: &isize;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: isize;
    let mut _59: isize;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&isize, &isize);
    let mut _64: &isize;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: isize;
    let mut _70: isize;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _76: MoveFoo;
    let mut _77: std::boxed::Box<isize>;
    let mut _79: MoveFoo;
    let mut _80: std::boxed::Box<isize>;
    let mut _81: (&isize, &isize);
    let mut _82: &isize;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: isize;
    let mut _88: isize;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: (&isize, &isize);
    let mut _93: &isize;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: isize;
    let mut _99: isize;
    let _101: !;
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _103: (&isize, &isize);
    let mut _104: &isize;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: isize;
    let mut _110: isize;
    let _112: !;
    let mut _113: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _114: (&isize, &isize);
    let mut _115: &isize;
    let mut _118: bool;
    let mut _119: bool;
    let mut _120: isize;
    let mut _121: isize;
    let _123: !;
    let mut _124: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _125: (&isize, &isize);
    let mut _126: &isize;
    let mut _129: bool;
    let mut _130: bool;
    let mut _131: isize;
    let mut _132: isize;
    let _134: !;
    let mut _135: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _136: (&isize, &isize);
    let mut _137: &isize;
    let mut _140: bool;
    let mut _141: bool;
    let mut _142: isize;
    let mut _143: isize;
    let _145: !;
    let mut _146: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _159: std::boxed::Box<isize>;
    let mut _160: std::boxed::Box<isize>;
    let mut _161: std::boxed::Box<isize>;
    let mut _162: *const isize;
    let mut _163: *const isize;
    let mut _164: *const isize;
    scope 1 {
        debug f => _1;
        let _2: DropNoFoo;
        scope 2 {
            debug b => _2;
            let _5: DropNoFoo;
            scope 3 {
                debug c => _5;
                let _10: &isize;
                let _11: &isize;
                let _21: &isize;
                let _22: &isize;
                let _32: &isize;
                let _33: &isize;
                let _43: &isize;
                let _44: &isize;
                let _54: &isize;
                let _55: &isize;
                let _65: &isize;
                let _66: &isize;
                let _74: DropMoveFoo;
                let mut _153: &isize;
                let mut _154: &isize;
                let mut _155: &isize;
                let mut _156: &isize;
                let mut _157: &isize;
                let mut _158: &isize;
                scope 4 {
                    debug left_val => _10;
                    debug right_val => _11;
                    let _16: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _16;
                    }
                }
                scope 6 {
                    debug left_val => _21;
                    debug right_val => _22;
                    let _27: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _27;
                    }
                }
                scope 8 {
                    debug left_val => _32;
                    debug right_val => _33;
                    let _38: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _38;
                    }
                }
                scope 10 {
                    debug left_val => _43;
                    debug right_val => _44;
                    let _49: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _49;
                    }
                }
                scope 12 {
                    debug left_val => _54;
                    debug right_val => _55;
                    let _60: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _60;
                    }
                }
                scope 14 {
                    debug left_val => _65;
                    debug right_val => _66;
                    let _71: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _71;
                    }
                }
                scope 16 {
                    debug f => _74;
                    let _75: DropMoveFoo;
                    scope 17 {
                        debug b => _75;
                        let _78: DropMoveFoo;
                        scope 18 {
                            debug c => _78;
                            let _83: &isize;
                            let _84: &isize;
                            let _94: &isize;
                            let _95: &isize;
                            let _105: &isize;
                            let _106: &isize;
                            let _116: &isize;
                            let _117: &isize;
                            let _127: &isize;
                            let _128: &isize;
                            let _138: &isize;
                            let _139: &isize;
                            let mut _147: &isize;
                            let mut _148: &isize;
                            let mut _149: &isize;
                            let mut _150: &isize;
                            let mut _151: &isize;
                            let mut _152: &isize;
                            let mut _165: *const ();
                            let mut _166: usize;
                            let mut _167: usize;
                            let mut _168: usize;
                            let mut _169: usize;
                            let mut _170: bool;
                            let mut _171: *const ();
                            let mut _172: usize;
                            let mut _173: usize;
                            let mut _174: usize;
                            let mut _175: usize;
                            let mut _176: bool;
                            let mut _177: *const ();
                            let mut _178: usize;
                            let mut _179: usize;
                            let mut _180: usize;
                            let mut _181: usize;
                            let mut _182: bool;
                            scope 19 {
                                debug left_val => _83;
                                debug right_val => _84;
                                let _89: core::panicking::AssertKind;
                                scope 20 {
                                    debug kind => _89;
                                }
                            }
                            scope 21 {
                                debug left_val => _94;
                                debug right_val => _95;
                                let _100: core::panicking::AssertKind;
                                scope 22 {
                                    debug kind => _100;
                                }
                            }
                            scope 23 {
                                debug left_val => _105;
                                debug right_val => _106;
                                let _111: core::panicking::AssertKind;
                                scope 24 {
                                    debug kind => _111;
                                }
                            }
                            scope 25 {
                                debug left_val => _116;
                                debug right_val => _117;
                                let _122: core::panicking::AssertKind;
                                scope 26 {
                                    debug kind => _122;
                                }
                            }
                            scope 27 {
                                debug left_val => _127;
                                debug right_val => _128;
                                let _133: core::panicking::AssertKind;
                                scope 28 {
                                    debug kind => _133;
                                }
                            }
                            scope 29 {
                                debug left_val => _138;
                                debug right_val => _139;
                                let _144: core::panicking::AssertKind;
                                scope 30 {
                                    debug kind => _144;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = DropNoFoo::new(const 1_isize, const 2_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = ncint(const 3_isize) -> [return: bb2, unwind: bb42];
    }

    bb2: {
        _3 = NoFoo { copied: ((_1.0: NoFoo).0: isize), nocopy: move _4 };
        _2 = DropNoFoo { inner: move _3 };
        _7 = ncint(const 4_isize) -> [return: bb3, unwind: bb41];
    }

    bb3: {
        _6 = NoFoo { copied: ((_1.0: NoFoo).0: isize), nocopy: move _7 };
        _5 = DropNoFoo { inner: move _6 };
        _9 = &((_1.0: NoFoo).0: isize);
        _158 = const _;
        _8 = (move _9, _158);
        _10 = (_8.0: &isize);
        _11 = (_8.1: &isize);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<isize, isize>(move _16, _10, _11, move _18) -> bb40;
    }

    bb5: {
        _20 = &(((_1.0: NoFoo).1: ncint).0: isize);
        _157 = const _;
        _19 = (move _20, _157);
        _21 = (_19.0: &isize);
        _22 = (_19.1: &isize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<isize, isize>(move _27, _21, _22, move _29) -> bb40;
    }

    bb7: {
        _31 = &((_2.0: NoFoo).0: isize);
        _156 = const _;
        _30 = (move _31, _156);
        _32 = (_30.0: &isize);
        _33 = (_30.1: &isize);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<isize, isize>(move _38, _32, _33, move _40) -> bb40;
    }

    bb9: {
        _42 = &(((_2.0: NoFoo).1: ncint).0: isize);
        _155 = const _;
        _41 = (move _42, _155);
        _43 = (_41.0: &isize);
        _44 = (_41.1: &isize);
        _47 = (*_43);
        _48 = (*_44);
        _46 = Eq(move _47, move _48);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<isize, isize>(move _49, _43, _44, move _51) -> bb40;
    }

    bb11: {
        _53 = &((_5.0: NoFoo).0: isize);
        _154 = const _;
        _52 = (move _53, _154);
        _54 = (_52.0: &isize);
        _55 = (_52.1: &isize);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<isize, isize>(move _60, _54, _55, move _62) -> bb40;
    }

    bb13: {
        _64 = &(((_5.0: NoFoo).1: ncint).0: isize);
        _153 = const _;
        _63 = (move _64, _153);
        _65 = (_63.0: &isize);
        _66 = (_63.1: &isize);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<isize, isize>(move _71, _65, _66, move _73) -> bb40;
    }

    bb15: {
        _74 = DropMoveFoo::new(const 5_isize, const 6_isize) -> [return: bb16, unwind: bb40];
    }

    bb16: {
        _77 = Box::<isize>::new(const 7_isize) -> [return: bb17, unwind: bb39];
    }

    bb17: {
        _76 = MoveFoo { copied: ((_74.0: MoveFoo).0: isize), moved: move _77 };
        _75 = DropMoveFoo { inner: move _76 };
        _80 = Box::<isize>::new(const 8_isize) -> [return: bb18, unwind: bb38];
    }

    bb18: {
        _79 = MoveFoo { copied: ((_74.0: MoveFoo).0: isize), moved: move _80 };
        _78 = DropMoveFoo { inner: move _79 };
        _82 = &((_74.0: MoveFoo).0: isize);
        _152 = const _;
        _81 = (move _82, _152);
        _83 = (_81.0: &isize);
        _84 = (_81.1: &isize);
        _87 = (*_83);
        _88 = (*_84);
        _86 = Eq(move _87, move _88);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<isize, isize>(move _89, _83, _84, move _91) -> bb37;
    }

    bb20: {
        _159 = deref_copy ((_74.0: MoveFoo).1: std::boxed::Box<isize>);
        _162 = (((_159.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _177 = _162 as *const () (PtrToPtr);
        _178 = _177 as usize (Transmute);
        _179 = AlignOf(isize);
        _180 = Sub(_179, const 1_usize);
        _181 = BitAnd(_178, _180);
        _182 = Eq(_181, const 0_usize);
        assert(_182, "misaligned pointer dereference: address must be a multiple of {} but is {}", _179, _178) -> [success: bb46, unwind unreachable];
    }

    bb21: {
        _100 = core::panicking::AssertKind::Eq;
        _102 = Option::<Arguments<'_>>::None;
        _101 = core::panicking::assert_failed::<isize, isize>(move _100, _94, _95, move _102) -> bb37;
    }

    bb22: {
        _104 = &((_75.0: MoveFoo).0: isize);
        _150 = const _;
        _103 = (move _104, _150);
        _105 = (_103.0: &isize);
        _106 = (_103.1: &isize);
        _109 = (*_105);
        _110 = (*_106);
        _108 = Eq(move _109, move _110);
        _107 = Not(move _108);
        switchInt(move _107) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _111 = core::panicking::AssertKind::Eq;
        _113 = Option::<Arguments<'_>>::None;
        _112 = core::panicking::assert_failed::<isize, isize>(move _111, _105, _106, move _113) -> bb37;
    }

    bb24: {
        _160 = deref_copy ((_75.0: MoveFoo).1: std::boxed::Box<isize>);
        _163 = (((_160.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _171 = _163 as *const () (PtrToPtr);
        _172 = _171 as usize (Transmute);
        _173 = AlignOf(isize);
        _174 = Sub(_173, const 1_usize);
        _175 = BitAnd(_172, _174);
        _176 = Eq(_175, const 0_usize);
        assert(_176, "misaligned pointer dereference: address must be a multiple of {} but is {}", _173, _172) -> [success: bb45, unwind unreachable];
    }

    bb25: {
        _122 = core::panicking::AssertKind::Eq;
        _124 = Option::<Arguments<'_>>::None;
        _123 = core::panicking::assert_failed::<isize, isize>(move _122, _116, _117, move _124) -> bb37;
    }

    bb26: {
        _126 = &((_78.0: MoveFoo).0: isize);
        _148 = const _;
        _125 = (move _126, _148);
        _127 = (_125.0: &isize);
        _128 = (_125.1: &isize);
        _131 = (*_127);
        _132 = (*_128);
        _130 = Eq(move _131, move _132);
        _129 = Not(move _130);
        switchInt(move _129) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _133 = core::panicking::AssertKind::Eq;
        _135 = Option::<Arguments<'_>>::None;
        _134 = core::panicking::assert_failed::<isize, isize>(move _133, _127, _128, move _135) -> bb37;
    }

    bb28: {
        _161 = deref_copy ((_78.0: MoveFoo).1: std::boxed::Box<isize>);
        _164 = (((_161.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _165 = _164 as *const () (PtrToPtr);
        _166 = _165 as usize (Transmute);
        _167 = AlignOf(isize);
        _168 = Sub(_167, const 1_usize);
        _169 = BitAnd(_166, _168);
        _170 = Eq(_169, const 0_usize);
        assert(_170, "misaligned pointer dereference: address must be a multiple of {} but is {}", _167, _166) -> [success: bb44, unwind unreachable];
    }

    bb29: {
        _144 = core::panicking::AssertKind::Eq;
        _146 = Option::<Arguments<'_>>::None;
        _145 = core::panicking::assert_failed::<isize, isize>(move _144, _138, _139, move _146) -> bb37;
    }

    bb30: {
        drop(_78) -> [return: bb31, unwind: bb38];
    }

    bb31: {
        drop(_75) -> [return: bb32, unwind: bb39];
    }

    bb32: {
        drop(_74) -> [return: bb33, unwind: bb40];
    }

    bb33: {
        drop(_5) -> [return: bb34, unwind: bb41];
    }

    bb34: {
        drop(_2) -> [return: bb35, unwind: bb42];
    }

    bb35: {
        drop(_1) -> [return: bb36, unwind continue];
    }

    bb36: {
        return;
    }

    bb37 (cleanup): {
        drop(_78) -> [return: bb38, unwind terminate];
    }

    bb38 (cleanup): {
        drop(_75) -> [return: bb39, unwind terminate];
    }

    bb39 (cleanup): {
        drop(_74) -> [return: bb40, unwind terminate];
    }

    bb40 (cleanup): {
        drop(_5) -> [return: bb41, unwind terminate];
    }

    bb41 (cleanup): {
        drop(_2) -> [return: bb42, unwind terminate];
    }

    bb42 (cleanup): {
        drop(_1) -> [return: bb43, unwind terminate];
    }

    bb43 (cleanup): {
        resume;
    }

    bb44: {
        _137 = &(*_164);
        _147 = const _;
        _136 = (move _137, _147);
        _138 = (_136.0: &isize);
        _139 = (_136.1: &isize);
        _142 = (*_138);
        _143 = (*_139);
        _141 = Eq(move _142, move _143);
        _140 = Not(move _141);
        switchInt(move _140) -> [0: bb30, otherwise: bb29];
    }

    bb45: {
        _115 = &(*_163);
        _149 = const _;
        _114 = (move _115, _149);
        _116 = (_114.0: &isize);
        _117 = (_114.1: &isize);
        _120 = (*_116);
        _121 = (*_117);
        _119 = Eq(move _120, move _121);
        _118 = Not(move _119);
        switchInt(move _118) -> [0: bb26, otherwise: bb25];
    }

    bb46: {
        _93 = &(*_162);
        _151 = const _;
        _92 = (move _93, _151);
        _94 = (_92.0: &isize);
        _95 = (_92.1: &isize);
        _98 = (*_94);
        _99 = (*_95);
        _97 = Eq(move _98, move _99);
        _96 = Not(move _97);
        switchInt(move _96) -> [0: bb22, otherwise: bb21];
    }
}

promoted[0] in test0: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 8_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in test0: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in test0: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 7_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in test0: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

promoted[4] in test0: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 6_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in test0: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

promoted[6] in test0: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 4_isize;
        _0 = &_1;
        return;
    }
}

promoted[7] in test0: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[8] in test0: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[9] in test0: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[10] in test0: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[11] in test0: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

fn test1() -> () {
    let mut _0: ();
    let _1: MoveFoo;
    let mut _3: std::boxed::Box<isize>;
    let mut _5: (&isize, &isize);
    let mut _6: &isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&isize, &isize);
    let mut _17: &isize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: isize;
    let mut _23: isize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&isize, &isize);
    let mut _28: &isize;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: isize;
    let mut _34: isize;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: (&isize, &isize);
    let mut _39: &isize;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: isize;
    let mut _45: isize;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: std::boxed::Box<isize>;
    let mut _54: std::boxed::Box<isize>;
    let mut _55: bool;
    let mut _56: *const isize;
    let mut _57: *const isize;
    scope 1 {
        debug f => _1;
        let _2: MoveFoo;
        scope 2 {
            debug b => _2;
            let _4: MoveFoo;
            scope 3 {
                debug c => _4;
                let _7: &isize;
                let _8: &isize;
                let _18: &isize;
                let _19: &isize;
                let _29: &isize;
                let _30: &isize;
                let _40: &isize;
                let _41: &isize;
                let mut _49: &isize;
                let mut _50: &isize;
                let mut _51: &isize;
                let mut _52: &isize;
                let mut _58: *const ();
                let mut _59: usize;
                let mut _60: usize;
                let mut _61: usize;
                let mut _62: usize;
                let mut _63: bool;
                let mut _64: *const ();
                let mut _65: usize;
                let mut _66: usize;
                let mut _67: usize;
                let mut _68: usize;
                let mut _69: bool;
                scope 4 {
                    debug left_val => _7;
                    debug right_val => _8;
                    let _13: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _13;
                    }
                }
                scope 6 {
                    debug left_val => _18;
                    debug right_val => _19;
                    let _24: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _24;
                    }
                }
                scope 8 {
                    debug left_val => _29;
                    debug right_val => _30;
                    let _35: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _35;
                    }
                }
                scope 10 {
                    debug left_val => _40;
                    debug right_val => _41;
                    let _46: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _46;
                    }
                }
            }
        }
    }

    bb0: {
        _55 = const false;
        _55 = const true;
        _1 = MoveFoo::new(const 11_isize, const 12_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Box::<isize>::new(const 13_isize) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _2 = MoveFoo { copied: (_1.0: isize), moved: move _3 };
        _55 = const false;
        _4 = MoveFoo { copied: const 14_isize, moved: move (_1.1: std::boxed::Box<isize>) };
        _6 = &(_2.0: isize);
        _52 = const _;
        _5 = (move _6, _52);
        _7 = (_5.0: &isize);
        _8 = (_5.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15) -> bb13;
    }

    bb4: {
        _53 = deref_copy (_2.1: std::boxed::Box<isize>);
        _56 = (((_53.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _64 = _56 as *const () (PtrToPtr);
        _65 = _64 as usize (Transmute);
        _66 = AlignOf(isize);
        _67 = Sub(_66, const 1_usize);
        _68 = BitAnd(_65, _67);
        _69 = Eq(_68, const 0_usize);
        assert(_69, "misaligned pointer dereference: address must be a multiple of {} but is {}", _66, _65) -> [success: bb19, unwind unreachable];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<isize, isize>(move _24, _18, _19, move _26) -> bb13;
    }

    bb6: {
        _28 = &(_4.0: isize);
        _50 = const _;
        _27 = (move _28, _50);
        _29 = (_27.0: &isize);
        _30 = (_27.1: &isize);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<isize, isize>(move _35, _29, _30, move _37) -> bb13;
    }

    bb8: {
        _54 = deref_copy (_4.1: std::boxed::Box<isize>);
        _57 = (((_54.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _58 = _57 as *const () (PtrToPtr);
        _59 = _58 as usize (Transmute);
        _60 = AlignOf(isize);
        _61 = Sub(_60, const 1_usize);
        _62 = BitAnd(_59, _61);
        _63 = Eq(_62, const 0_usize);
        assert(_63, "misaligned pointer dereference: address must be a multiple of {} but is {}", _60, _59) -> [success: bb18, unwind unreachable];
    }

    bb9: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<isize, isize>(move _46, _40, _41, move _48) -> bb13;
    }

    bb10: {
        drop(_4) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        drop(_2) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _55 = const false;
        return;
    }

    bb13 (cleanup): {
        drop(_4) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16 (cleanup): {
        drop((_1.1: std::boxed::Box<isize>)) -> [return: bb15, unwind terminate];
    }

    bb17 (cleanup): {
        switchInt(_55) -> [0: bb15, otherwise: bb16];
    }

    bb18: {
        _39 = &(*_57);
        _49 = const _;
        _38 = (move _39, _49);
        _40 = (_38.0: &isize);
        _41 = (_38.1: &isize);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb10, otherwise: bb9];
    }

    bb19: {
        _17 = &(*_56);
        _51 = const _;
        _16 = (move _17, _51);
        _18 = (_16.0: &isize);
        _19 = (_16.1: &isize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }
}

promoted[0] in test1: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 12_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in test1: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 14_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in test1: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 13_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in test1: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 11_isize;
        _0 = &_1;
        return;
    }
}

fn test2() -> () {
    let mut _0: ();
    let _1: NoFoo;
    let mut _3: ncint;
    let mut _5: (&isize, &isize);
    let mut _6: &isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&isize, &isize);
    let mut _17: &isize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: isize;
    let mut _23: isize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&isize, &isize);
    let mut _28: &isize;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: isize;
    let mut _34: isize;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: (&isize, &isize);
    let mut _39: &isize;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: isize;
    let mut _45: isize;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug f => _1;
        let _2: NoFoo;
        scope 2 {
            debug b => _2;
            let _4: NoFoo;
            scope 3 {
                debug c => _4;
                let _7: &isize;
                let _8: &isize;
                let _18: &isize;
                let _19: &isize;
                let _29: &isize;
                let _30: &isize;
                let _40: &isize;
                let _41: &isize;
                let mut _49: &isize;
                let mut _50: &isize;
                let mut _51: &isize;
                let mut _52: &isize;
                scope 4 {
                    debug left_val => _7;
                    debug right_val => _8;
                    let _13: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _13;
                    }
                }
                scope 6 {
                    debug left_val => _18;
                    debug right_val => _19;
                    let _24: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _24;
                    }
                }
                scope 8 {
                    debug left_val => _29;
                    debug right_val => _30;
                    let _35: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _35;
                    }
                }
                scope 10 {
                    debug left_val => _40;
                    debug right_val => _41;
                    let _46: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _46;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = NoFoo::new(const 21_isize, const 22_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = ncint(const 23_isize) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = NoFoo { copied: (_1.0: isize), nocopy: move _3 };
        _4 = NoFoo { copied: const 24_isize, nocopy: move (_1.1: ncint) };
        _6 = &(_2.0: isize);
        _52 = const _;
        _5 = (move _6, _52);
        _7 = (_5.0: &isize);
        _8 = (_5.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb4: {
        _17 = &((_2.1: ncint).0: isize);
        _51 = const _;
        _16 = (move _17, _51);
        _18 = (_16.0: &isize);
        _19 = (_16.1: &isize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<isize, isize>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb6: {
        _28 = &(_4.0: isize);
        _50 = const _;
        _27 = (move _28, _50);
        _29 = (_27.0: &isize);
        _30 = (_27.1: &isize);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<isize, isize>(move _35, _29, _30, move _37) -> unwind continue;
    }

    bb8: {
        _39 = &((_4.1: ncint).0: isize);
        _49 = const _;
        _38 = (move _39, _49);
        _40 = (_38.0: &isize);
        _41 = (_38.1: &isize);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<isize, isize>(move _46, _40, _41, move _48) -> unwind continue;
    }

    bb10: {
        return;
    }
}

promoted[0] in test2: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 22_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in test2: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 24_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in test2: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 23_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in test2: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 21_isize;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();

    bb0: {
        _1 = test0() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = test1() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = test2() -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}
