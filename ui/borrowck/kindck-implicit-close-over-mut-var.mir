// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn user(_1: isize) -> () {
    debug _i => _1;                      // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:7:9: 7:11
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:7:20: 7:20

    bb0: {
        return;                          // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:7:22: 7:22
    }
}

fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:9:10: 9:10
    let mut _1: isize;                   // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:12:9: 12:14
    let mut _3: [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:27: 13:33]; // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:27: 16:6
    let mut _4: (isize, bool);           // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:17:5: 17:11
    let _5: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _6: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[&str];                 // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:14: 18:27
    let mut _8: &[&str; 2];              // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:14: 18:27
    let _9: &[&str; 2];                  // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:14: 18:27
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _13: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:29: 18:30
    let mut _15: &isize;                 // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:29: 18:30
    let _16: &isize;                     // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:29: 18:30
    let _17: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:19:5: 19:13
    let mut _18: std::thread::JoinHandle<()>; // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:19:5: 19:6
    let mut _20: bool;                   // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:20:1: 20:2
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:12:9: 12:14
        let _2: std::thread::JoinHandle<()>; // in scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:9: 13:10
        scope 2 {
            debug t => _2;               // in scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:9: 13:10
            let mut _19: &[&str; 2];     // in scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:14: 18:27
        }
    }

    bb0: {
        _20 = const false;               // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:12:9: 12:14
        _1 = const 0_isize;              // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:12:17: 12:18
        _3 = [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:27: 13:33] { i: _1 }; // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:27: 16:6
                                         // closure
                                         // + def_id: DefId(0:6 ~ kindck_implicit_close_over_mut_var[c915]::foo::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (isize,),
                                         // ]
        _20 = const true;                // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:13: 16:7
        _2 = spawn::<[closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:27: 13:33], ()>(move _3) -> bb1; // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:13: 16:7
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:13: 13:26
                                         // + literal: Const { ty: fn([closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:27: 13:33]) -> JoinHandle<()> {spawn::<[closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:27: 13:33], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = CheckedAdd(_1, const 1_isize); // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:17:5: 17:11
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_isize) -> [success: bb2, unwind: bb10]; // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:17:5: 17:11
    }

    bb2: {
        _1 = move (_4.0: isize);         // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:17:5: 17:11
        _19 = const _;                   // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:14: 18:27
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:14: 18:27
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(foo, [], Some(promoted[0])) }
        _9 = _19;                        // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:14: 18:27
        _8 = _9;                         // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:14: 18:27
        _7 = move _8 as &[&str] (Pointer(Unsize)); // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:14: 18:27
        _16 = &_1;                       // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:29: 18:30
        _15 = _16;                       // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:29: 18:30
        _14 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _15) -> [return: bb3, unwind: bb10]; // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:29: 18:30
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:29: 18:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = [move _14];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = &_13;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = move _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> [return: bb4, unwind: bb10]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = _print(move _6) -> [return: bb5, unwind: bb10]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb5: {
        _20 = const false;               // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:19:5: 19:6
        _18 = move _2;                   // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:19:5: 19:6
        _17 = JoinHandle::<()>::join(move _18) -> [return: bb6, unwind: bb10]; // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:19:5: 19:13
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:19:7: 19:11
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_17) -> [return: bb7, unwind: bb10]; // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:19:13: 19:14
    }

    bb7: {
        _20 = const false;               // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:20:1: 20:2
        return;                          // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:20:2: 20:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:9:1: 20:2
    }

    bb9 (cleanup): {
        drop(_2) -> bb8;                 // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:20:1: 20:2
    }

    bb10 (cleanup): {
        switchInt(_20) -> [0: bb8, otherwise: bb9]; // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:20:1: 20:2
    }
}

promoted[0] in foo: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:14: 18:27
    let mut _1: [&str; 2];               // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:14: 18:27

    bb0: {
        _1 = [const "original ", const "\n"]; // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:14: 18:27
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:14: 18:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:14: 18:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:14: 18:27
        return;                          // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:18:14: 18:27
    }
}

fn foo::{closure#0}(_1: [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:27: 13:33]) -> () {
    debug i => (_1.0: isize);            // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:12:9: 12:14
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:13:34: 13:34
    let _2: ();                          // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:14:9: 14:16
    let mut _3: isize;                   // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:14:14: 14:15
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:18: 15:30
    let mut _7: &[&str; 2];              // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:18: 15:30
    let _8: &[&str; 2];                  // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:18: 15:30
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:32: 15:33
    let mut _14: &isize;                 // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:32: 15:33
    let _15: &isize;                     // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:32: 15:33
    let mut _16: &[&str; 2];             // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:18: 15:30

    bb0: {
        _3 = (_1.0: isize);              // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:14:14: 14:15
        _2 = user(move _3) -> bb1;       // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:14:9: 14:16
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:14:9: 14:13
                                         // + literal: Const { ty: fn(isize) {user}, val: Value(<ZST>) }
    }

    bb1: {
        _16 = const _;                   // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:18: 15:30
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:18: 15:30
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(foo::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _8 = _16;                        // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:18: 15:30
        _7 = _8;                         // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:18: 15:30
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:18: 15:30
        _15 = &(_1.0: isize);            // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:32: 15:33
        _14 = _15;                       // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:32: 15:33
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _14) -> bb2; // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:32: 15:33
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:32: 15:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = [move _13];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = &_12;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = _print(move _5) -> bb4;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:16:6: 16:6
    }
}

promoted[0] in foo::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:18: 15:30
    let mut _1: [&str; 2];               // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:18: 15:30

    bb0: {
        _1 = [const "spawned ", const "\n"]; // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:18: 15:30
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:18: 15:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:18: 15:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:18: 15:30
        return;                          // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:15:18: 15:30
    }
}

fn bar() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:22:10: 22:10
    let mut _1: isize;                   // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:25:9: 25:14
    let mut _2: bool;                    // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:26:11: 26:17
    let mut _3: isize;                   // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:26:11: 26:12
    let mut _5: [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:31: 27:37]; // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:31: 29:10
    let mut _6: (isize, bool);           // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:30:9: 30:15
    let _7: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:31:9: 31:17
    let mut _8: std::thread::JoinHandle<()>; // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:31:9: 31:10
    let mut _9: bool;                    // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:32:5: 32:6
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:25:9: 25:14
        let _4: std::thread::JoinHandle<()>; // in scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:13: 27:14
        scope 2 {
            debug t => _4;               // in scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:13: 27:14
        }
    }

    bb0: {
        _9 = const false;                // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:25:9: 25:14
        _1 = const 0_isize;              // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:25:17: 25:18
        goto -> bb1;                     // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:26:5: 32:6
    }

    bb1: {
        _3 = _1;                         // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:26:11: 26:12
        _2 = Lt(move _3, const 10_isize); // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:26:11: 26:17
        switchInt(move _2) -> [0: bb7, otherwise: bb2]; // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:26:11: 26:17
    }

    bb2: {
        _5 = [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:31: 27:37] { i: _1 }; // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:31: 29:10
                                         // closure
                                         // + def_id: DefId(0:8 ~ kindck_implicit_close_over_mut_var[c915]::bar::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (isize,),
                                         // ]
        _9 = const true;                 // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:17: 29:11
        _4 = spawn::<[closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:31: 27:37], ()>(move _5) -> bb3; // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:17: 29:11
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:17: 27:30
                                         // + literal: Const { ty: fn([closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:31: 27:37]) -> JoinHandle<()> {spawn::<[closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:31: 27:37], ()>}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = CheckedAdd(_1, const 1_isize); // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:30:9: 30:15
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_isize) -> [success: bb4, unwind: bb10]; // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:30:9: 30:15
    }

    bb4: {
        _1 = move (_6.0: isize);         // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:30:9: 30:15
        _9 = const false;                // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:31:9: 31:10
        _8 = move _4;                    // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:31:9: 31:10
        _7 = JoinHandle::<()>::join(move _8) -> [return: bb5, unwind: bb10]; // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:31:9: 31:17
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:31:11: 31:15
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_7) -> [return: bb6, unwind: bb10]; // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:31:17: 31:18
    }

    bb6: {
        _9 = const false;                // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:32:5: 32:6
        goto -> bb1;                     // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:26:5: 32:6
    }

    bb7: {
        return;                          // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:33:2: 33:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:22:1: 33:2
    }

    bb9 (cleanup): {
        drop(_4) -> bb8;                 // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:32:5: 32:6
    }

    bb10 (cleanup): {
        switchInt(_9) -> [0: bb8, otherwise: bb9]; // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:32:5: 32:6
    }
}

fn bar::{closure#0}(_1: [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:31: 27:37]) -> () {
    debug i => (_1.0: isize);            // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:25:9: 25:14
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:27:38: 27:38
    let _2: ();                          // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:28:13: 28:20
    let mut _3: isize;                   // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:28:18: 28:19

    bb0: {
        _3 = (_1.0: isize);              // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:28:18: 28:19
        _2 = user(move _3) -> bb1;       // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:28:13: 28:20
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:28:13: 28:17
                                         // + literal: Const { ty: fn(isize) {user}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:29:10: 29:10
    }
}

fn car() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:35:10: 35:10
    let mut _1: isize;                   // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:37:9: 37:14
    let mut _2: bool;                    // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:38:11: 38:17
    let mut _3: isize;                   // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:38:11: 38:12
    let mut _5: [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:31: 39:37]; // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:31: 43:10
    let mut _6: (isize, bool);           // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:44:9: 44:15
    let _7: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:45:9: 45:17
    let mut _8: std::thread::JoinHandle<()>; // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:45:9: 45:10
    let mut _9: bool;                    // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:46:5: 46:6
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:37:9: 37:14
        let _4: std::thread::JoinHandle<()>; // in scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:13: 39:14
        scope 2 {
            debug t => _4;               // in scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:13: 39:14
        }
    }

    bb0: {
        _9 = const false;                // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:37:9: 37:14
        _1 = const 0_isize;              // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:37:17: 37:18
        goto -> bb1;                     // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:38:5: 46:6
    }

    bb1: {
        _3 = _1;                         // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:38:11: 38:12
        _2 = Lt(move _3, const 10_isize); // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:38:11: 38:17
        switchInt(move _2) -> [0: bb7, otherwise: bb2]; // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:38:11: 38:17
    }

    bb2: {
        _5 = [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:31: 39:37] { i: _1 }; // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:31: 43:10
                                         // closure
                                         // + def_id: DefId(0:10 ~ kindck_implicit_close_over_mut_var[c915]::car::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (isize,),
                                         // ]
        _9 = const true;                 // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:17: 43:11
        _4 = spawn::<[closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:31: 39:37], ()>(move _5) -> bb3; // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:17: 43:11
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:17: 39:30
                                         // + literal: Const { ty: fn([closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:31: 39:37]) -> JoinHandle<()> {spawn::<[closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:31: 39:37], ()>}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = CheckedAdd(_1, const 1_isize); // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:44:9: 44:15
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_isize) -> [success: bb4, unwind: bb10]; // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:44:9: 44:15
    }

    bb4: {
        _1 = move (_6.0: isize);         // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:44:9: 44:15
        _9 = const false;                // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:45:9: 45:10
        _8 = move _4;                    // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:45:9: 45:10
        _7 = JoinHandle::<()>::join(move _8) -> [return: bb5, unwind: bb10]; // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:45:9: 45:17
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:45:11: 45:15
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_7) -> [return: bb6, unwind: bb10]; // scope 2 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:45:17: 45:18
    }

    bb6: {
        _9 = const false;                // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:46:5: 46:6
        goto -> bb1;                     // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:38:5: 46:6
    }

    bb7: {
        return;                          // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:47:2: 47:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:35:1: 47:2
    }

    bb9 (cleanup): {
        drop(_4) -> bb8;                 // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:46:5: 46:6
    }

    bb10 (cleanup): {
        switchInt(_9) -> [0: bb8, otherwise: bb9]; // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:46:5: 46:6
    }
}

fn car::{closure#0}(_1: [closure@ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:31: 39:37]) -> () {
    debug i => (_1.0: isize);            // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:37:9: 37:14
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:39:38: 39:38
    let mut _2: isize;                   // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:40:17: 40:22
    let mut _3: (isize, bool);           // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:41:13: 41:19
    let _4: ();                          // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:42:13: 42:20
    let mut _5: isize;                   // in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:42:18: 42:19
    scope 1 {
        debug i => _2;                   // in scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:40:17: 40:22
    }

    bb0: {
        _2 = (_1.0: isize);              // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:40:25: 40:26
        _3 = CheckedAdd(_2, const 1_isize); // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:41:13: 41:19
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_isize) -> bb1; // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:41:13: 41:19
    }

    bb1: {
        _2 = move (_3.0: isize);         // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:41:13: 41:19
        _5 = _2;                         // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:42:18: 42:19
        _4 = user(move _5) -> bb2;       // scope 1 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:42:13: 42:20
                                         // mir::Constant
                                         // + span: ui/borrowck/kindck-implicit-close-over-mut-var.rs:42:13: 42:17
                                         // + literal: Const { ty: fn(isize) {user}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:43:10: 43:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:49:15: 49:15

    bb0: {
        return;                          // scope 0 at ui/borrowck/kindck-implicit-close-over-mut-var.rs:49:17: 49:17
    }
}
