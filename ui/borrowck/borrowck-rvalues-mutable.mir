// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/borrowck/borrowck-rvalues-mutable.rs:7:1: 7:13>::new(_1: usize) -> Counter {
    debug v => _1;
    let mut _0: Counter;

    bb0: {
        _0 = Counter { value: _1 };
        return;
    }
}

fn <impl at ui/borrowck/borrowck-rvalues-mutable.rs:7:1: 7:13>::inc(_1: &mut Counter) -> &mut Counter {
    debug self => _1;
    let mut _0: &mut Counter;

    bb0: {
        ((*_1).0: usize) = Add(((*_1).0: usize), const 1_usize);
        _0 = _1;
        return;
    }
}

fn <impl at ui/borrowck/borrowck-rvalues-mutable.rs:7:1: 7:13>::get(_1: &Counter) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = ((*_1).0: usize);
        return;
    }
}

fn <impl at ui/borrowck/borrowck-rvalues-mutable.rs:7:1: 7:13>::get_and_inc(_1: &mut Counter) -> usize {
    debug self => _1;
    let mut _0: usize;
    scope 1 {
        debug v => _0;
    }

    bb0: {
        _0 = ((*_1).0: usize);
        ((*_1).0: usize) = Add(((*_1).0: usize), const 1_usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: usize;
    let mut _2: &mut Counter;
    let mut _3: Counter;
    let mut _4: (&usize, &usize);
    let mut _5: &usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: &Counter;
    let _17: &mut Counter;
    let mut _18: &mut Counter;
    let mut _19: &mut Counter;
    let mut _20: &mut Counter;
    let mut _21: Counter;
    let mut _22: (&usize, &usize);
    let mut _23: &usize;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: usize;
    let mut _29: usize;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug v => _1;
        let _6: &usize;
        let _7: &usize;
        let _15: usize;
        let mut _34: &usize;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug v => _15;
            let _24: &usize;
            let _25: &usize;
            let mut _33: &usize;
            scope 5 {
                debug left_val => _24;
                debug right_val => _25;
                let _30: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _30;
                }
            }
        }
    }

    bb0: {
        _3 = Counter::new(const 22_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &mut _3;
        _1 = Counter::get_and_inc(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = &_1;
        _34 = const _;
        _4 = (move _5, _34);
        _6 = (_4.0: &usize);
        _7 = (_4.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb4: {
        _21 = Counter::new(const 22_usize) -> [return: bb5, unwind continue];
    }

    bb5: {
        _20 = &mut _21;
        _19 = Counter::inc(move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        _18 = _19;
        _17 = Counter::inc(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        _16 = &(*_17);
        _15 = Counter::get(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _23 = &_15;
        _33 = const _;
        _22 = (move _23, _33);
        _24 = (_22.0: &usize);
        _25 = (_22.1: &usize);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<usize, usize>(move _30, _24, _25, move _32) -> unwind continue;
    }

    bb10: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 24_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 22_usize;
        _0 = &_1;
        return;
    }
}
