// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:3:15: 3:15
    let _1: std::boxed::Box<isize>;      // in scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:4:9: 4:12
    let mut _3: &std::boxed::Box<isize>; // in scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:33
    let mut _4: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: isize;                       // in scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:6:16: 6:19
    let mut _7: &[closure@ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:24]; // in scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:6:16: 6:17
    let mut _8: ();                      // in scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:6:16: 6:19
    let mut _9: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug bar => _1;                 // in scope 1 at ui/borrowck/borrowck-move-by-capture-ok.rs:4:9: 4:12
        let _2: [closure@ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:24]; // in scope 1 at ui/borrowck/borrowck-move-by-capture-ok.rs:5:9: 5:10
        scope 2 {
            debug h => _2;               // in scope 2 at ui/borrowck/borrowck-move-by-capture-ok.rs:5:9: 5:10
            let _10: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _11: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _24: &isize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _10;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _11;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _16;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = Box::<isize>::new(const 3_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:4:23: 4:34
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-by-capture-ok.rs:4:23: 4:31
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_1;                        // scope 1 at ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:33
        _2 = [closure@ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:24] { bar: move _3 }; // scope 1 at ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:33
                                         // closure
                                         // + def_id: DefId(0:4 ~ borrowck_move_by_capture_ok[0072]::main::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> isize,
                                         //     (&std::boxed::Box<isize>,),
                                         // ]
        _7 = &_2;                        // scope 2 at ui/borrowck/borrowck-move-by-capture-ok.rs:6:16: 6:17
        _6 = <[closure@ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:24] as Fn<()>>::call(move _7, move _8) -> [return: bb2, unwind: bb6]; // scope 2 at ui/borrowck/borrowck-move-by-capture-ok.rs:6:16: 6:19
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-move-by-capture-ok.rs:6:16: 6:17
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:24], ()) -> <[closure@ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:24] as FnOnce<()>>::Output {<[closure@ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:24] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _9 = _24;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _9);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_4.0: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_4.1: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 3_isize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<isize, isize>(move _18, move _19, move _21, move _23) -> bb6; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:7:1: 7:2
    }

    bb5: {
        return;                          // scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:7:2: 7:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:7:1: 7:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:3:1: 7:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:6:21: 6:22

    bb0: {
        _1 = const 3_isize;              // scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:6:21: 6:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: &[closure@ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:24]) -> isize {
    debug bar => (*((*_1).0: &std::boxed::Box<isize>)); // in scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:4:9: 4:12
    let mut _0: isize;                   // return place in scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:5:19: 5:24
    let mut _2: &std::boxed::Box<isize>; // in scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:33
    let mut _3: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:33
    let mut _4: *const isize;            // in scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:33

    bb0: {
        _2 = deref_copy ((*_1).0: &std::boxed::Box<isize>); // scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:5:27: 5:31
        _3 = deref_copy (*_2);           // scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:5:27: 5:31
        _4 = (((_3.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:5:27: 5:31
        _0 = (*_4);                      // scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:5:27: 5:31
        return;                          // scope 0 at ui/borrowck/borrowck-move-by-capture-ok.rs:5:33: 5:33
    }
}
