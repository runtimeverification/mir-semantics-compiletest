// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<isize>;
    let mut _3: &std::boxed::Box<isize>;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let _6: isize;
    let mut _7: &[closure@ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:24];
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug bar => _1;
        let _2: [closure@ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:24];
        scope 2 {
            debug h => _2;
            let _8: &isize;
            let _9: &isize;
            let mut _17: &isize;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
        }
    }

    bb0: {
        _1 = Box::<isize>::new(const 3_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_1;
        _2 = [closure@ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:24] { bar: move _3 };
        _7 = &_2;
        _6 = <[closure@ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:24] as Fn<()>>::call(move _7, const ()) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _5 = &_6;
        _17 = const _;
        _4 = (move _5, _17);
        _8 = (_4.0: &isize);
        _9 = (_4.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16) -> bb6;
    }

    bb4: {
        drop(_1) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/borrowck/borrowck-move-by-capture-ok.rs:5:13: 5:24]) -> isize {
    debug bar => (*((*_1).0: &std::boxed::Box<isize>));
    let mut _0: isize;
    let mut _2: &std::boxed::Box<isize>;
    let mut _3: std::boxed::Box<isize>;
    let mut _4: *const isize;
    let mut _5: *const ();
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: bool;

    bb0: {
        _2 = deref_copy ((*_1).0: &std::boxed::Box<isize>);
        _3 = deref_copy (*_2);
        _4 = (((_3.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _5 = _4 as *const () (PtrToPtr);
        _6 = _5 as usize (Transmute);
        _7 = AlignOf(isize);
        _8 = Sub(_7, const 1_usize);
        _9 = BitAnd(_6, _8);
        _10 = Eq(_9, const 0_usize);
        assert(_10, "misaligned pointer dereference: address must be a multiple of {} but is {}", _7, _6) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        _0 = (*_4);
        return;
    }
}
