// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/borrowck/two-phase-bin-ops.rs:9:9: 9:31>::add_assign(_1: &mut A, _2: i32) -> () {
    debug self => _1;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:40: 9:49
    debug rhs => _2;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:51: 9:54
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:61: 9:61
    let mut _3: i32;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75

    bb0: {
        _3 = _2;                         // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75
        ((*_1).0: i32) = move _3;        // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:63: 9:75
        return;                          // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:78: 9:78
    }
}

fn <impl at ui/borrowck/two-phase-bin-ops.rs:9:9: 9:31>::sub_assign(_1: &mut A, _2: i32) -> () {
    debug self => _1;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:40: 9:49
    debug rhs => _2;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:51: 9:54
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:61: 9:61
    let mut _3: i32;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75

    bb0: {
        _3 = _2;                         // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75
        ((*_1).0: i32) = move _3;        // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:63: 9:75
        return;                          // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:78: 9:78
    }
}

fn <impl at ui/borrowck/two-phase-bin-ops.rs:9:9: 9:31>::mul_assign(_1: &mut A, _2: i32) -> () {
    debug self => _1;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:40: 9:49
    debug rhs => _2;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:51: 9:54
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:61: 9:61
    let mut _3: i32;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75

    bb0: {
        _3 = _2;                         // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75
        ((*_1).0: i32) = move _3;        // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:63: 9:75
        return;                          // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:78: 9:78
    }
}

fn <impl at ui/borrowck/two-phase-bin-ops.rs:9:9: 9:31>::div_assign(_1: &mut A, _2: i32) -> () {
    debug self => _1;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:40: 9:49
    debug rhs => _2;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:51: 9:54
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:61: 9:61
    let mut _3: i32;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75

    bb0: {
        _3 = _2;                         // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75
        ((*_1).0: i32) = move _3;        // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:63: 9:75
        return;                          // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:78: 9:78
    }
}

fn <impl at ui/borrowck/two-phase-bin-ops.rs:9:9: 9:31>::rem_assign(_1: &mut A, _2: i32) -> () {
    debug self => _1;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:40: 9:49
    debug rhs => _2;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:51: 9:54
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:61: 9:61
    let mut _3: i32;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75

    bb0: {
        _3 = _2;                         // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75
        ((*_1).0: i32) = move _3;        // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:63: 9:75
        return;                          // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:78: 9:78
    }
}

fn <impl at ui/borrowck/two-phase-bin-ops.rs:9:9: 9:31>::bitand_assign(_1: &mut A, _2: i32) -> () {
    debug self => _1;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:40: 9:49
    debug rhs => _2;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:51: 9:54
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:61: 9:61
    let mut _3: i32;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75

    bb0: {
        _3 = _2;                         // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75
        ((*_1).0: i32) = move _3;        // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:63: 9:75
        return;                          // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:78: 9:78
    }
}

fn <impl at ui/borrowck/two-phase-bin-ops.rs:9:9: 9:31>::bitor_assign(_1: &mut A, _2: i32) -> () {
    debug self => _1;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:40: 9:49
    debug rhs => _2;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:51: 9:54
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:61: 9:61
    let mut _3: i32;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75

    bb0: {
        _3 = _2;                         // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75
        ((*_1).0: i32) = move _3;        // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:63: 9:75
        return;                          // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:78: 9:78
    }
}

fn <impl at ui/borrowck/two-phase-bin-ops.rs:9:9: 9:31>::bitxor_assign(_1: &mut A, _2: i32) -> () {
    debug self => _1;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:40: 9:49
    debug rhs => _2;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:51: 9:54
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:61: 9:61
    let mut _3: i32;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75

    bb0: {
        _3 = _2;                         // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75
        ((*_1).0: i32) = move _3;        // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:63: 9:75
        return;                          // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:78: 9:78
    }
}

fn <impl at ui/borrowck/two-phase-bin-ops.rs:9:9: 9:31>::shl_assign(_1: &mut A, _2: i32) -> () {
    debug self => _1;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:40: 9:49
    debug rhs => _2;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:51: 9:54
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:61: 9:61
    let mut _3: i32;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75

    bb0: {
        _3 = _2;                         // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75
        ((*_1).0: i32) = move _3;        // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:63: 9:75
        return;                          // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:78: 9:78
    }
}

fn <impl at ui/borrowck/two-phase-bin-ops.rs:9:9: 9:31>::shr_assign(_1: &mut A, _2: i32) -> () {
    debug self => _1;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:40: 9:49
    debug rhs => _2;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:51: 9:54
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:61: 9:61
    let mut _3: i32;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75

    bb0: {
        _3 = _2;                         // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:72: 9:75
        ((*_1).0: i32) = move _3;        // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:63: 9:75
        return;                          // scope 0 at ui/borrowck/two-phase-bin-ops.rs:9:78: 9:78
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/two-phase-bin-ops.rs:24:11: 24:11
    let mut _1: A;                       // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:25:9: 25:14
    let _2: ();                          // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:26:5: 26:13
    let mut _3: &mut A;                  // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:26:5: 26:6
    let mut _4: i32;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:26:10: 26:13
    let _5: ();                          // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:27:5: 27:13
    let mut _6: &mut A;                  // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:27:5: 27:6
    let mut _7: i32;                     // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:27:10: 27:13
    let _8: ();                          // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:28:5: 28:13
    let mut _9: &mut A;                  // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:28:5: 28:6
    let mut _10: i32;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:28:10: 28:13
    let _11: ();                         // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:29:5: 29:13
    let mut _12: &mut A;                 // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:29:5: 29:6
    let mut _13: i32;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:29:10: 29:13
    let _14: ();                         // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:30:5: 30:13
    let mut _15: &mut A;                 // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:30:5: 30:6
    let mut _16: i32;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:30:10: 30:13
    let _17: ();                         // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:31:5: 31:13
    let mut _18: &mut A;                 // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:31:5: 31:6
    let mut _19: i32;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:31:10: 31:13
    let _20: ();                         // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:32:5: 32:13
    let mut _21: &mut A;                 // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:32:5: 32:6
    let mut _22: i32;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:32:10: 32:13
    let _23: ();                         // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:33:5: 33:14
    let mut _24: &mut A;                 // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:33:5: 33:6
    let mut _25: i32;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:33:11: 33:14
    let _26: ();                         // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:34:5: 34:14
    let mut _27: &mut A;                 // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:34:5: 34:6
    let mut _28: i32;                    // in scope 0 at ui/borrowck/two-phase-bin-ops.rs:34:11: 34:14
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/borrowck/two-phase-bin-ops.rs:25:9: 25:14
    }

    bb0: {
        _1 = A(const 10_i32);            // scope 0 at ui/borrowck/two-phase-bin-ops.rs:25:17: 25:22
        _3 = &mut _1;                    // scope 1 at ui/borrowck/two-phase-bin-ops.rs:26:5: 26:6
        _4 = (_1.0: i32);                // scope 1 at ui/borrowck/two-phase-bin-ops.rs:26:10: 26:13
        _2 = <A as AddAssign<i32>>::add_assign(move _3, move _4) -> bb1; // scope 1 at ui/borrowck/two-phase-bin-ops.rs:26:5: 26:13
                                         // mir::Constant
                                         // + span: ui/borrowck/two-phase-bin-ops.rs:26:5: 26:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut A, i32) {<A as AddAssign<i32>>::add_assign}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &mut _1;                    // scope 1 at ui/borrowck/two-phase-bin-ops.rs:27:5: 27:6
        _7 = (_1.0: i32);                // scope 1 at ui/borrowck/two-phase-bin-ops.rs:27:10: 27:13
        _5 = <A as SubAssign<i32>>::sub_assign(move _6, move _7) -> bb2; // scope 1 at ui/borrowck/two-phase-bin-ops.rs:27:5: 27:13
                                         // mir::Constant
                                         // + span: ui/borrowck/two-phase-bin-ops.rs:27:5: 27:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut A, i32) {<A as SubAssign<i32>>::sub_assign}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &mut _1;                    // scope 1 at ui/borrowck/two-phase-bin-ops.rs:28:5: 28:6
        _10 = (_1.0: i32);               // scope 1 at ui/borrowck/two-phase-bin-ops.rs:28:10: 28:13
        _8 = <A as MulAssign<i32>>::mul_assign(move _9, move _10) -> bb3; // scope 1 at ui/borrowck/two-phase-bin-ops.rs:28:5: 28:13
                                         // mir::Constant
                                         // + span: ui/borrowck/two-phase-bin-ops.rs:28:5: 28:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut A, i32) {<A as MulAssign<i32>>::mul_assign}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = &mut _1;                   // scope 1 at ui/borrowck/two-phase-bin-ops.rs:29:5: 29:6
        _13 = (_1.0: i32);               // scope 1 at ui/borrowck/two-phase-bin-ops.rs:29:10: 29:13
        _11 = <A as DivAssign<i32>>::div_assign(move _12, move _13) -> bb4; // scope 1 at ui/borrowck/two-phase-bin-ops.rs:29:5: 29:13
                                         // mir::Constant
                                         // + span: ui/borrowck/two-phase-bin-ops.rs:29:5: 29:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut A, i32) {<A as DivAssign<i32>>::div_assign}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = &mut _1;                   // scope 1 at ui/borrowck/two-phase-bin-ops.rs:30:5: 30:6
        _16 = (_1.0: i32);               // scope 1 at ui/borrowck/two-phase-bin-ops.rs:30:10: 30:13
        _14 = <A as BitAndAssign<i32>>::bitand_assign(move _15, move _16) -> bb5; // scope 1 at ui/borrowck/two-phase-bin-ops.rs:30:5: 30:13
                                         // mir::Constant
                                         // + span: ui/borrowck/two-phase-bin-ops.rs:30:5: 30:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut A, i32) {<A as BitAndAssign<i32>>::bitand_assign}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = &mut _1;                   // scope 1 at ui/borrowck/two-phase-bin-ops.rs:31:5: 31:6
        _19 = (_1.0: i32);               // scope 1 at ui/borrowck/two-phase-bin-ops.rs:31:10: 31:13
        _17 = <A as BitOrAssign<i32>>::bitor_assign(move _18, move _19) -> bb6; // scope 1 at ui/borrowck/two-phase-bin-ops.rs:31:5: 31:13
                                         // mir::Constant
                                         // + span: ui/borrowck/two-phase-bin-ops.rs:31:5: 31:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut A, i32) {<A as BitOrAssign<i32>>::bitor_assign}, val: Value(<ZST>) }
    }

    bb6: {
        _21 = &mut _1;                   // scope 1 at ui/borrowck/two-phase-bin-ops.rs:32:5: 32:6
        _22 = (_1.0: i32);               // scope 1 at ui/borrowck/two-phase-bin-ops.rs:32:10: 32:13
        _20 = <A as BitXorAssign<i32>>::bitxor_assign(move _21, move _22) -> bb7; // scope 1 at ui/borrowck/two-phase-bin-ops.rs:32:5: 32:13
                                         // mir::Constant
                                         // + span: ui/borrowck/two-phase-bin-ops.rs:32:5: 32:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut A, i32) {<A as BitXorAssign<i32>>::bitxor_assign}, val: Value(<ZST>) }
    }

    bb7: {
        _24 = &mut _1;                   // scope 1 at ui/borrowck/two-phase-bin-ops.rs:33:5: 33:6
        _25 = (_1.0: i32);               // scope 1 at ui/borrowck/two-phase-bin-ops.rs:33:11: 33:14
        _23 = <A as ShlAssign<i32>>::shl_assign(move _24, move _25) -> bb8; // scope 1 at ui/borrowck/two-phase-bin-ops.rs:33:5: 33:14
                                         // mir::Constant
                                         // + span: ui/borrowck/two-phase-bin-ops.rs:33:5: 33:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut A, i32) {<A as ShlAssign<i32>>::shl_assign}, val: Value(<ZST>) }
    }

    bb8: {
        _27 = &mut _1;                   // scope 1 at ui/borrowck/two-phase-bin-ops.rs:34:5: 34:6
        _28 = (_1.0: i32);               // scope 1 at ui/borrowck/two-phase-bin-ops.rs:34:11: 34:14
        _26 = <A as ShrAssign<i32>>::shr_assign(move _27, move _28) -> bb9; // scope 1 at ui/borrowck/two-phase-bin-ops.rs:34:5: 34:14
                                         // mir::Constant
                                         // + span: ui/borrowck/two-phase-bin-ops.rs:34:5: 34:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut A, i32) {<A as ShrAssign<i32>>::shr_assign}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/borrowck/two-phase-bin-ops.rs:35:2: 35:2
    }
}

fn A(_1: i32) -> A {
    let mut _0: A;                       // return place in scope 0 at ui/borrowck/two-phase-bin-ops.rs:5:1: 5:9

    bb0: {
        _0 = A(move _1);                 // scope 0 at ui/borrowck/two-phase-bin-ops.rs:5:1: 5:9
        return;                          // scope 0 at ui/borrowck/two-phase-bin-ops.rs:5:1: 5:9
    }
}

// MIR FOR CTFE
fn A(_1: i32) -> A {
    let mut _0: A;                       // return place in scope 0 at ui/borrowck/two-phase-bin-ops.rs:5:1: 5:9

    bb0: {
        _0 = A(move _1);                 // scope 0 at ui/borrowck/two-phase-bin-ops.rs:5:1: 5:9
        return;                          // scope 0 at ui/borrowck/two-phase-bin-ops.rs:5:1: 5:9
    }
}
