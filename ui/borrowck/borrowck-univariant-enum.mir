// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/borrowck/borrowck-univariant-enum.rs:6:16: 6:21>::clone(_1: &newtype) -> newtype {
    debug self => _1;                    // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:6:16: 6:21
    let mut _0: newtype;                 // return place in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:6:16: 6:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/borrowck/borrowck-univariant-enum.rs:6:16: 6:21
        return;                          // scope 0 at ui/borrowck/borrowck-univariant-enum.rs:6:21: 6:21
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:11:15: 11:15
    let _1: &std::cell::Cell<isize>;     // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:16:9: 16:10
    let _2: std::cell::Cell<isize>;      // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:16:14: 16:26
    let _4: std::cell::Cell<newtype>;    // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:17:14: 17:43
    let mut _5: newtype;                 // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:17:24: 17:42
    let mut _7: newtype;                 // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:18:19: 18:26
    let mut _8: &std::cell::Cell<newtype>; // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:18:19: 18:26
    let _10: ();                         // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:20:9: 20:27
    let mut _11: &std::cell::Cell<isize>; // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:20:9: 20:27
    let mut _12: isize;                  // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:20:15: 20:26
    let mut _13: isize;                  // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:20:15: 20:22
    let mut _14: &std::cell::Cell<isize>; // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:20:15: 20:22
    let mut _15: (isize, bool);          // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:20:15: 20:26
    let mut _16: isize;                  // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:21:9: 21:16
    let mut _17: &std::cell::Cell<isize>; // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:21:9: 21:16
    let mut _18: isize;                  // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:21:19: 21:20
    let mut _19: (isize, bool);          // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:21:9: 21:20
    let mut _20: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _22: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _27: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _28: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _30: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _31: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _32: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _33: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _34: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _35: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/borrowck/borrowck-univariant-enum.rs:16:9: 16:10
        let _3: &std::cell::Cell<newtype>; // in scope 1 at ui/borrowck/borrowck-univariant-enum.rs:17:9: 17:10
        scope 2 {
            debug y => _3;               // in scope 2 at ui/borrowck/borrowck-univariant-enum.rs:17:9: 17:10
            let _6: isize;               // in scope 2 at ui/borrowck/borrowck-univariant-enum.rs:18:9: 18:10
            let _9: isize;               // in scope 2 at ui/borrowck/borrowck-univariant-enum.rs:19:23: 19:24
            scope 3 {
                debug z => _6;           // in scope 3 at ui/borrowck/borrowck-univariant-enum.rs:18:9: 18:10
                let _23: &isize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _24: &isize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _37: &isize;     // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 5 {
                    debug left_val => _23; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _24; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _29: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 6 {
                        debug kind => _29; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
            scope 4 {
                debug b => _9;           // in scope 4 at ui/borrowck/borrowck-univariant-enum.rs:19:23: 19:24
            }
        }
    }

    bb0: {
        _2 = Cell::<isize>::new(const 5_isize) -> bb1; // scope 0 at ui/borrowck/borrowck-univariant-enum.rs:16:14: 16:26
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-univariant-enum.rs:16:14: 16:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Cell<isize> {Cell::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = &_2;                        // scope 0 at ui/borrowck/borrowck-univariant-enum.rs:16:13: 16:26
        _5 = const newtype::newvar(3_isize); // scope 1 at ui/borrowck/borrowck-univariant-enum.rs:17:24: 17:42
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-univariant-enum.rs:17:24: 17:42
                                         // + literal: Const { ty: newtype, val: Value(Scalar(0x0000000000000003)) }
        _4 = Cell::<newtype>::new(move _5) -> bb2; // scope 1 at ui/borrowck/borrowck-univariant-enum.rs:17:14: 17:43
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-univariant-enum.rs:17:14: 17:23
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(newtype) -> Cell<newtype> {Cell::<newtype>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 1 at ui/borrowck/borrowck-univariant-enum.rs:17:13: 17:43
        _8 = _3;                         // scope 2 at ui/borrowck/borrowck-univariant-enum.rs:18:19: 18:26
        _7 = Cell::<newtype>::get(move _8) -> bb3; // scope 2 at ui/borrowck/borrowck-univariant-enum.rs:18:19: 18:26
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-univariant-enum.rs:18:21: 18:24
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<newtype>) -> newtype {Cell::<newtype>::get}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = ((_7 as newvar).0: isize);  // scope 2 at ui/borrowck/borrowck-univariant-enum.rs:19:23: 19:24
        _11 = _1;                        // scope 4 at ui/borrowck/borrowck-univariant-enum.rs:20:9: 20:27
        _14 = _1;                        // scope 4 at ui/borrowck/borrowck-univariant-enum.rs:20:15: 20:22
        _13 = Cell::<isize>::get(move _14) -> bb4; // scope 4 at ui/borrowck/borrowck-univariant-enum.rs:20:15: 20:22
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-univariant-enum.rs:20:17: 20:20
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<isize>) -> isize {Cell::<isize>::get}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = CheckedAdd(_13, const 1_isize); // scope 4 at ui/borrowck/borrowck-univariant-enum.rs:20:15: 20:26
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _13, const 1_isize) -> bb5; // scope 4 at ui/borrowck/borrowck-univariant-enum.rs:20:15: 20:26
    }

    bb5: {
        _12 = move (_15.0: isize);       // scope 4 at ui/borrowck/borrowck-univariant-enum.rs:20:15: 20:26
        _10 = Cell::<isize>::set(move _11, move _12) -> bb6; // scope 4 at ui/borrowck/borrowck-univariant-enum.rs:20:9: 20:27
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-univariant-enum.rs:20:11: 20:14
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<isize>, isize) {Cell::<isize>::set}, val: Value(<ZST>) }
    }

    bb6: {
        _17 = _1;                        // scope 4 at ui/borrowck/borrowck-univariant-enum.rs:21:9: 21:16
        _16 = Cell::<isize>::get(move _17) -> bb7; // scope 4 at ui/borrowck/borrowck-univariant-enum.rs:21:9: 21:16
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-univariant-enum.rs:21:11: 21:14
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<isize>) -> isize {Cell::<isize>::get}, val: Value(<ZST>) }
    }

    bb7: {
        _18 = _9;                        // scope 4 at ui/borrowck/borrowck-univariant-enum.rs:21:19: 21:20
        _19 = CheckedMul(_16, _18);      // scope 4 at ui/borrowck/borrowck-univariant-enum.rs:21:9: 21:20
        assert(!move (_19.1: bool), "attempt to compute `{} * {}`, which would overflow", move _16, move _18) -> bb8; // scope 4 at ui/borrowck/borrowck-univariant-enum.rs:21:9: 21:20
    }

    bb8: {
        _6 = move (_19.0: isize);        // scope 4 at ui/borrowck/borrowck-univariant-enum.rs:21:9: 21:20
        _21 = &_6;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _37 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _22 = _37;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _20 = (move _21, move _22);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _23 = (_20.0: &isize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _24 = (_20.1: &isize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _27 = (*_23);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _28 = const 18_isize;            // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _26 = Eq(move _27, move _28);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _25 = Not(move _26);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _25) -> [0: bb10, otherwise: bb9]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _29 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = _23;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _33;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _24;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = _35;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _30 = core::panicking::assert_failed::<isize, isize>(move _31, move _32, move _34, move _36); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/borrowck/borrowck-univariant-enum.rs:25:2: 25:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:24:19: 24:21

    bb0: {
        _1 = const 18_isize;             // scope 0 at ui/borrowck/borrowck-univariant-enum.rs:24:19: 24:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn newtype::newvar(_1: isize) -> newtype {
    let mut _0: newtype;                 // return place in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:8:5: 8:11

    bb0: {
        _0 = newtype::newvar(move _1);   // scope 0 at ui/borrowck/borrowck-univariant-enum.rs:8:5: 8:11
        return;                          // scope 0 at ui/borrowck/borrowck-univariant-enum.rs:8:5: 8:11
    }
}

// MIR FOR CTFE
fn newtype::newvar(_1: isize) -> newtype {
    let mut _0: newtype;                 // return place in scope 0 at ui/borrowck/borrowck-univariant-enum.rs:8:5: 8:11

    bb0: {
        _0 = newtype::newvar(move _1);   // scope 0 at ui/borrowck/borrowck-univariant-enum.rs:8:5: 8:11
        return;                          // scope 0 at ui/borrowck/borrowck-univariant-enum.rs:8:5: 8:11
    }
}
