// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn to_refs(_1: (&mut List<T>,)) -> Vec<&mut T> {
    debug list => _1;                    // in scope 0 at ui/borrowck/issue-62007-assign-field.rs:14:15: 14:23
    let mut _0: std::vec::Vec<&mut T>;   // return place in scope 0 at ui/borrowck/issue-62007-assign-field.rs:15:9: 15:19
    let _2: ();                          // in scope 0 at ui/borrowck/issue-62007-assign-field.rs:17:9: 17:41
    let mut _3: &mut std::vec::Vec<&mut T>; // in scope 0 at ui/borrowck/issue-62007-assign-field.rs:17:9: 17:41
    let mut _4: &mut T;                  // in scope 0 at ui/borrowck/issue-62007-assign-field.rs:17:21: 17:40
    let mut _5: std::option::Option<&mut std::boxed::Box<List<T>>>; // in scope 0 at ui/borrowck/issue-62007-assign-field.rs:18:26: 18:48
    let mut _6: &mut std::option::Option<std::boxed::Box<List<T>>>; // in scope 0 at ui/borrowck/issue-62007-assign-field.rs:18:26: 18:48
    let mut _7: isize;                   // in scope 0 at ui/borrowck/issue-62007-assign-field.rs:18:16: 18:23
    let mut _9: &mut List<T>;            // in scope 0 at ui/borrowck/issue-62007-assign-field.rs:19:22: 19:23
    let mut _10: &mut List<T>;           // in scope 0 at ui/borrowck/issue-62007-assign-field.rs:14:15: 14:23
    let mut _11: &mut List<T>;           // in scope 0 at ui/borrowck/issue-62007-assign-field.rs:14:15: 14:23
    let mut _12: std::boxed::Box<List<T>>; // in scope 0 at ui/borrowck/issue-62007-assign-field.rs:18:21: 18:22
    let mut _13: *const List<T>;         // in scope 0 at ui/borrowck/issue-62007-assign-field.rs:18:21: 18:22
    scope 1 {
        debug result => _0;              // in scope 1 at ui/borrowck/issue-62007-assign-field.rs:15:9: 15:19
        scope 2 {
            debug n => _8;               // in scope 2 at ui/borrowck/issue-62007-assign-field.rs:18:21: 18:22
            let _8: &mut std::boxed::Box<List<T>>; // in scope 2 at ui/borrowck/issue-62007-assign-field.rs:18:21: 18:22
        }
    }

    bb0: {
        _0 = Vec::<&mut T>::new() -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<&mut T> {Vec::<&mut T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut _0;                    // scope 1 at ui/borrowck/issue-62007-assign-field.rs:17:9: 17:41
        _10 = deref_copy (_1.0: &mut List<T>); // scope 1 at ui/borrowck/issue-62007-assign-field.rs:17:21: 17:40
        _4 = &mut ((*_10).0: T);         // scope 1 at ui/borrowck/issue-62007-assign-field.rs:17:21: 17:40
        _2 = Vec::<&mut T>::push(move _3, move _4) -> [return: bb2, unwind: bb6]; // scope 1 at ui/borrowck/issue-62007-assign-field.rs:17:9: 17:41
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-62007-assign-field.rs:17:16: 17:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<&mut T>, &mut T) {Vec::<&mut T>::push}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = deref_copy (_1.0: &mut List<T>); // scope 2 at ui/borrowck/issue-62007-assign-field.rs:18:26: 18:48
        _6 = &mut ((*_11).1: std::option::Option<std::boxed::Box<List<T>>>); // scope 2 at ui/borrowck/issue-62007-assign-field.rs:18:26: 18:48
        _5 = Option::<Box<List<T>>>::as_mut(move _6) -> [return: bb3, unwind: bb6]; // scope 2 at ui/borrowck/issue-62007-assign-field.rs:18:26: 18:48
                                         // mir::Constant
                                         // + span: ui/borrowck/issue-62007-assign-field.rs:18:40: 18:46
                                         // + literal: Const { ty: for<'a> fn(&'a mut Option<Box<List<T>>>) -> Option<&'a mut Box<List<T>>> {Option::<Box<List<T>>>::as_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = discriminant(_5);           // scope 2 at ui/borrowck/issue-62007-assign-field.rs:18:16: 18:23
        switchInt(move _7) -> [1: bb4, otherwise: bb5]; // scope 2 at ui/borrowck/issue-62007-assign-field.rs:18:16: 18:23
    }

    bb4: {
        _8 = move ((_5 as Some).0: &mut std::boxed::Box<List<T>>); // scope 2 at ui/borrowck/issue-62007-assign-field.rs:18:21: 18:22
        _12 = deref_copy (*_8);          // scope 2 at ui/borrowck/issue-62007-assign-field.rs:19:22: 19:23
        _13 = (((_12.0: std::ptr::Unique<List<T>>).0: std::ptr::NonNull<List<T>>).0: *const List<T>); // scope 2 at ui/borrowck/issue-62007-assign-field.rs:19:22: 19:23
        _9 = &mut (*_13);                // scope 2 at ui/borrowck/issue-62007-assign-field.rs:19:22: 19:23
        (_1.0: &mut List<T>) = move _9;  // scope 2 at ui/borrowck/issue-62007-assign-field.rs:19:13: 19:23
        goto -> bb1;                     // scope 1 at ui/borrowck/issue-62007-assign-field.rs:16:5: 23:6
    }

    bb5: {
        return;                          // scope 0 at ui/borrowck/issue-62007-assign-field.rs:24:2: 24:2
    }

    bb6 (cleanup): {
        drop(_0) -> bb7;                 // scope 0 at ui/borrowck/issue-62007-assign-field.rs:24:1: 24:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/borrowck/issue-62007-assign-field.rs:14:1: 24:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/issue-62007-assign-field.rs:26:11: 26:11

    bb0: {
        return;                          // scope 0 at ui/borrowck/issue-62007-assign-field.rs:26:13: 26:13
    }
}
