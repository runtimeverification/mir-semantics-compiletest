// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::option::Option<i32>;
    let mut _2: isize;
    let mut _3: std::option::Option<i32>;
    let mut _4: (&std::option::Option<i32>, &std::option::Option<i32>);
    let mut _5: &std::option::Option<i32>;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _6: &std::option::Option<i32>;
        let _7: &std::option::Option<i32>;
        let mut _13: &std::option::Option<i32>;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
    }

    bb0: {
        _1 = Option::<i32>::None;
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _3 = Option::<i32>::Some(const 0_i32);
        _1 = move _3;
        goto -> bb3;
    }

    bb3: {
        _5 = &_1;
        _13 = const _;
        _4 = (move _5, _13);
        _6 = (_4.0: &std::option::Option<i32>);
        _7 = (_4.1: &std::option::Option<i32>);
        _9 = <Option<i32> as PartialEq>::eq(_6, _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _10, _6, _7, move _12) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>;
    let mut _1: std::option::Option<i32>;

    bb0: {
        _1 = Option::<i32>::Some(const 0_i32);
        _0 = &_1;
        return;
    }
}
