// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn borrow(_1: &isize) -> () {
    debug _v => _1;                      // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:22:11: 22:13
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:22:23: 22:23

    bb0: {
        return;                          // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:22:25: 22:25
    }
}

fn box_mut(_1: &mut Box<isize>) -> () {
    debug v => _1;                       // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:24:12: 24:13
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:24:32: 24:32
    let _2: ();                          // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:25:5: 25:17
    let mut _3: &isize;                  // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:25:12: 25:16
    let _4: &isize;                      // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:25:12: 25:16
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:24:12: 24:13
    let mut _6: *const isize;            // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:24:12: 24:13

    bb0: {
        _5 = deref_copy (*_1);           // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:25:12: 25:16
        _6 = (((_5.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:25:12: 25:16
        _4 = &(*_6);                     // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:25:12: 25:16
        _3 = _4;                         // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:25:12: 25:16
        _2 = borrow(move _3) -> bb1;     // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:25:5: 25:17
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-uniq-via-ref.rs:25:5: 25:11
                                         // + literal: Const { ty: for<'a> fn(&'a isize) {borrow}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:26:2: 26:2
    }
}

fn box_mut_rec(_1: &mut Rec) -> () {
    debug v => _1;                       // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:28:16: 28:17
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:28:29: 28:29
    let _2: ();                          // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:29:5: 29:18
    let mut _3: &isize;                  // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:29:12: 29:17
    let _4: &isize;                      // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:29:12: 29:17
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:28:16: 28:17
    let mut _6: *const isize;            // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:28:16: 28:17

    bb0: {
        _5 = deref_copy ((*_1).0: std::boxed::Box<isize>); // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:29:12: 29:17
        _6 = (((_5.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:29:12: 29:17
        _4 = &(*_6);                     // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:29:12: 29:17
        _3 = _4;                         // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:29:12: 29:17
        _2 = borrow(move _3) -> bb1;     // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:29:5: 29:18
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-uniq-via-ref.rs:29:5: 29:11
                                         // + literal: Const { ty: for<'a> fn(&'a isize) {borrow}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:30:2: 30:2
    }
}

fn box_mut_recs(_1: &mut Outer) -> () {
    debug v => _1;                       // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:32:17: 32:18
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:32:32: 32:32
    let _2: ();                          // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:33:5: 33:22
    let mut _3: &isize;                  // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:33:12: 33:21
    let _4: &isize;                      // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:33:12: 33:21
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:32:17: 32:18
    let mut _6: *const isize;            // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:32:17: 32:18

    bb0: {
        _5 = deref_copy ((((*_1).0: Inner).0: Innermost).0: std::boxed::Box<isize>); // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:33:12: 33:21
        _6 = (((_5.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:33:12: 33:21
        _4 = &(*_6);                     // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:33:12: 33:21
        _3 = _4;                         // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:33:12: 33:21
        _2 = borrow(move _3) -> bb1;     // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:33:5: 33:22
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-uniq-via-ref.rs:33:5: 33:11
                                         // + literal: Const { ty: for<'a> fn(&'a isize) {borrow}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:34:2: 34:2
    }
}

fn box_imm(_1: &Box<isize>) -> () {
    debug v => _1;                       // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:36:12: 36:13
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:36:28: 36:28
    let _2: ();                          // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:37:5: 37:17
    let mut _3: &isize;                  // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:37:12: 37:16
    let _4: &isize;                      // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:37:12: 37:16
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:36:12: 36:13
    let mut _6: *const isize;            // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:36:12: 36:13

    bb0: {
        _5 = deref_copy (*_1);           // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:37:12: 37:16
        _6 = (((_5.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:37:12: 37:16
        _4 = &(*_6);                     // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:37:12: 37:16
        _3 = _4;                         // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:37:12: 37:16
        _2 = borrow(move _3) -> bb1;     // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:37:5: 37:17
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-uniq-via-ref.rs:37:5: 37:11
                                         // + literal: Const { ty: for<'a> fn(&'a isize) {borrow}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:38:2: 38:2
    }
}

fn box_imm_rec(_1: &Rec) -> () {
    debug v => _1;                       // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:40:16: 40:17
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:40:25: 40:25
    let _2: ();                          // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:41:5: 41:18
    let mut _3: &isize;                  // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:41:12: 41:17
    let _4: &isize;                      // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:41:12: 41:17
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:40:16: 40:17
    let mut _6: *const isize;            // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:40:16: 40:17

    bb0: {
        _5 = deref_copy ((*_1).0: std::boxed::Box<isize>); // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:41:12: 41:17
        _6 = (((_5.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:41:12: 41:17
        _4 = &(*_6);                     // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:41:12: 41:17
        _3 = _4;                         // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:41:12: 41:17
        _2 = borrow(move _3) -> bb1;     // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:41:5: 41:18
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-uniq-via-ref.rs:41:5: 41:11
                                         // + literal: Const { ty: for<'a> fn(&'a isize) {borrow}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:42:2: 42:2
    }
}

fn box_imm_recs(_1: &Outer) -> () {
    debug v => _1;                       // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:44:17: 44:18
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:44:28: 44:28
    let _2: ();                          // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:45:5: 45:22
    let mut _3: &isize;                  // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:45:12: 45:21
    let _4: &isize;                      // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:45:12: 45:21
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:44:17: 44:18
    let mut _6: *const isize;            // in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:44:17: 44:18

    bb0: {
        _5 = deref_copy ((((*_1).0: Inner).0: Innermost).0: std::boxed::Box<isize>); // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:45:12: 45:21
        _6 = (((_5.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:45:12: 45:21
        _4 = &(*_6);                     // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:45:12: 45:21
        _3 = _4;                         // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:45:12: 45:21
        _2 = borrow(move _3) -> bb1;     // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:45:5: 45:22
                                         // mir::Constant
                                         // + span: ui/borrowck/borrowck-uniq-via-ref.rs:45:5: 45:11
                                         // + literal: Const { ty: for<'a> fn(&'a isize) {borrow}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:46:2: 46:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:48:15: 48:15

    bb0: {
        return;                          // scope 0 at ui/borrowck/borrowck-uniq-via-ref.rs:49:2: 49:2
    }
}
