// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: RefCell<String>) -> String {
    debug x => _1;
    let mut _0: std::string::String;
    let mut _2: &std::string::String;
    let _3: &std::string::String;
    let mut _4: &std::cell::Ref<'_, std::string::String>;
    let _5: std::cell::Ref<'_, std::string::String>;
    let mut _6: &std::cell::RefCell<std::string::String>;

    bb0: {
        _6 = &_1;
        _5 = RefCell::<String>::borrow(move _6) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        _4 = &_5;
        _3 = <Ref<'_, String> as Deref>::deref(move _4) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _2 = _3;
        _0 = <String as Clone>::clone(move _2) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_1) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_5) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn foo2(_1: RefCell<String>) -> String {
    debug x => _1;
    let mut _0: std::string::String;
    let _2: std::cell::RefCell<std::string::String>;
    let mut _4: &std::string::String;
    let _5: &std::string::String;
    let mut _6: &std::cell::Ref<'_, std::string::String>;
    let _7: std::cell::Ref<'_, std::string::String>;
    let mut _8: &std::cell::RefCell<std::string::String>;
    scope 1 {
        debug y => _2;
        let _3: std::string::String;
        scope 2 {
            debug ret => _3;
        }
    }

    bb0: {
        _2 = move _1;
        _8 = &_2;
        _7 = RefCell::<String>::borrow(move _8) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _6 = &_7;
        _5 = <Ref<'_, String> as Deref>::deref(move _6) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _4 = _5;
        _3 = <String as Clone>::clone(move _4) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        drop(_7) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        _0 = move _3;
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb8, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_7) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::cell::RefCell<std::string::String>;
    let mut _2: std::string::String;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: (&std::string::String, &&str);
    let mut _7: &std::string::String;
    let _8: std::string::String;
    let mut _9: std::cell::RefCell<std::string::String>;
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: std::string::String;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: (&std::string::String, &&str);
    let mut _23: &std::string::String;
    let _24: std::string::String;
    let mut _25: std::cell::RefCell<std::string::String>;
    let mut _28: bool;
    let mut _29: bool;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: &[&str; 1];
    scope 1 {
        debug r => _1;
        let _10: &std::string::String;
        let _11: &&str;
        let _17: std::cell::RefCell<std::string::String>;
        let _19: std::string::String;
        let mut _34: &[&str; 1];
        let mut _35: &&str;
        scope 3 {
            debug left_val => _10;
            debug right_val => _11;
            let _14: core::panicking::AssertKind;
            scope 4 {
                debug kind => _14;
            }
        }
        scope 5 {
            debug r => _17;
            let _26: &std::string::String;
            let _27: &&str;
            let mut _33: &&str;
            scope 7 {
                debug left_val => _26;
                debug right_val => _27;
                let _30: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _30;
                }
            }
        }
        scope 6 {
            debug res => _19;
        }
    }
    scope 2 {
        debug res => _3;
    }

    bb0: {
        _36 = const _;
        _5 = _36 as &[&str] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = format(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = move _3;
        _1 = RefCell::<String>::new(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = move _1;
        _8 = foo(move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = &_8;
        _35 = const _;
        _6 = (move _7, _35);
        _10 = (_6.0: &std::string::String);
        _11 = (_6.1: &&str);
        _13 = <String as PartialEq<&str>>::eq(_10, _11) -> [return: bb5, unwind: bb18];
    }

    bb5: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<String, &str>(move _14, _10, _11, move _16) -> bb18;
    }

    bb7: {
        drop(_8) -> [return: bb8, unwind continue];
    }

    bb8: {
        _34 = const _;
        _21 = _34 as &[&str] (Pointer(Unsize));
        _20 = Arguments::<'_>::new_const(move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        _19 = format(move _20) -> [return: bb10, unwind continue];
    }

    bb10: {
        _18 = move _19;
        _17 = RefCell::<String>::new(move _18) -> [return: bb11, unwind continue];
    }

    bb11: {
        _25 = move _17;
        _24 = foo2(move _25) -> [return: bb12, unwind continue];
    }

    bb12: {
        _23 = &_24;
        _33 = const _;
        _22 = (move _23, _33);
        _26 = (_22.0: &std::string::String);
        _27 = (_22.1: &&str);
        _29 = <String as PartialEq<&str>>::eq(_26, _27) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<String, &str>(move _30, _26, _27, move _32) -> bb17;
    }

    bb15: {
        drop(_24) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_24) -> [return: bb19, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_8) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        resume;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "data";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "data"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "data";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "data"];
        _0 = &_1;
        return;
    }
}
