// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/enum/union-in-enum.rs:13:10: 13:10

    bb0: {
        return;                          // scope 0 at ui/enum/union-in-enum.rs:13:12: 13:12
    }
}

fn C::union() -> C {
    let mut _0: C;                       // return place in scope 0 at ui/enum/union-in-enum.rs:12:10: 12:15

    bb0: {
        _0 = C::union;                   // scope 0 at ui/enum/union-in-enum.rs:12:10: 12:15
        return;                          // scope 0 at ui/enum/union-in-enum.rs:12:10: 12:15
    }
}

// MIR FOR CTFE
fn C::union() -> C {
    let mut _0: C;                       // return place in scope 0 at ui/enum/union-in-enum.rs:12:10: 12:15

    bb0: {
        _0 = C::union;                   // scope 0 at ui/enum/union-in-enum.rs:12:10: 12:15
        return;                          // scope 0 at ui/enum/union-in-enum.rs:12:10: 12:15
    }
}
