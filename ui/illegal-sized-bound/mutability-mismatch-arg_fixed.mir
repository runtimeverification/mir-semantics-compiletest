// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test(_1: &mut dyn Iterator<Item = &u64>) -> u64 {
    debug t => _1;                       // in scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:2:9: 2:10
    let mut _0: u64;                     // return place in scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:2:45: 2:48
    let mut _2: &u64;                    // in scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:3:7: 3:23
    let mut _3: std::option::Option<&u64>; // in scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:3:7: 3:14
    let mut _4: &mut dyn std::iter::Iterator<Item = &u64>; // in scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:3:7: 3:14

    bb0: {
        _4 = &mut (*_1);                 // scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:3:7: 3:14
        _3 = <&mut dyn Iterator<Item = &u64> as Iterator>::min(move _4) -> bb1; // scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:3:7: 3:14
                                         // mir::Constant
                                         // + span: ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:3:9: 3:12
                                         // + literal: Const { ty: fn(&mut dyn Iterator<Item = &u64>) -> Option<<&mut dyn Iterator<Item = &u64> as Iterator>::Item> {<&mut dyn Iterator<Item = &u64> as Iterator>::min}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Option::<&u64>::unwrap(move _3) -> bb2; // scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:3:7: 3:23
                                         // mir::Constant
                                         // + span: ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:3:15: 3:21
                                         // + literal: Const { ty: fn(Option<&u64>) -> &u64 {Option::<&u64>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = (*_2);                      // scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:3:6: 3:23
        return;                          // scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:4:2: 4:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:6:11: 6:11
    let _1: [u64; 1];                    // in scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:7:10: 7:15
    let _2: u64;                         // in scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:8:6: 8:29
    let mut _3: &mut dyn std::iter::Iterator<Item = &u64>; // in scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:8:11: 8:28
    let mut _4: &mut std::slice::Iter<'_, u64>; // in scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:8:11: 8:28
    let mut _5: &mut std::slice::Iter<'_, u64>; // in scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:8:11: 8:28
    let mut _6: std::slice::Iter<'_, u64>; // in scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:8:16: 8:28
    let mut _7: &[u64];                  // in scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:8:16: 8:28
    let mut _8: &[u64; 1];               // in scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:8:16: 8:28
    scope 1 {
        debug array => _1;               // in scope 1 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:7:10: 7:15
    }

    bb0: {
        _1 = [const 0_u64];              // scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:7:18: 7:24
        _8 = &_1;                        // scope 1 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:8:16: 8:28
        _7 = move _8 as &[u64] (Pointer(Unsize)); // scope 1 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:8:16: 8:28
        _6 = core::slice::<impl [u64]>::iter(move _7) -> bb1; // scope 1 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:8:16: 8:28
                                         // mir::Constant
                                         // + span: ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:8:22: 8:26
                                         // + literal: Const { ty: for<'a> fn(&'a [u64]) -> std::slice::Iter<'a, u64> {core::slice::<impl [u64]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _6;                    // scope 1 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:8:11: 8:28
        _4 = &mut (*_5);                 // scope 1 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:8:11: 8:28
        _3 = move _4 as &mut dyn std::iter::Iterator<Item = &u64> (Pointer(Unsize)); // scope 1 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:8:11: 8:28
        _2 = test(move _3) -> bb2;       // scope 1 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:8:6: 8:29
                                         // mir::Constant
                                         // + span: ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:8:6: 8:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut (dyn Iterator<Item = &'b u64> + 'a)) -> u64 {test}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/illegal-sized-bound/mutability-mismatch-arg_fixed.rs:9:2: 9:2
    }
}
