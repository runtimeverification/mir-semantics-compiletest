// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/ptr-coercion-rpass.rs:8:15: 8:15
    let _1: &mut isize;                  // in scope 0 at ui/ptr-coercion-rpass.rs:10:9: 10:10
    let mut _2: &mut isize;              // in scope 0 at ui/ptr-coercion-rpass.rs:10:25: 10:32
    let mut _3: isize;                   // in scope 0 at ui/ptr-coercion-rpass.rs:10:30: 10:32
    let _6: &mut isize;                  // in scope 0 at ui/ptr-coercion-rpass.rs:13:21: 13:28
    let mut _7: isize;                   // in scope 0 at ui/ptr-coercion-rpass.rs:13:26: 13:28
    let _9: &isize;                      // in scope 0 at ui/ptr-coercion-rpass.rs:16:21: 16:24
    let _12: &isize;                     // in scope 0 at ui/ptr-coercion-rpass.rs:19:27: 19:30
    let mut _14: &mut isize;             // in scope 0 at ui/ptr-coercion-rpass.rs:22:25: 22:32
    let mut _15: isize;                  // in scope 0 at ui/ptr-coercion-rpass.rs:22:30: 22:32
    let _18: &mut isize;                 // in scope 0 at ui/ptr-coercion-rpass.rs:25:27: 25:34
    let mut _19: isize;                  // in scope 0 at ui/ptr-coercion-rpass.rs:25:32: 25:34
    let mut _21: &mut isize;             // in scope 0 at ui/ptr-coercion-rpass.rs:28:25: 28:32
    let mut _22: isize;                  // in scope 0 at ui/ptr-coercion-rpass.rs:28:30: 28:32
    let mut _24: *mut isize;             // in scope 0 at ui/ptr-coercion-rpass.rs:29:27: 29:28
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/ptr-coercion-rpass.rs:10:9: 10:10
        let _4: &isize;                  // in scope 1 at ui/ptr-coercion-rpass.rs:11:9: 11:10
        scope 2 {
            debug x => _4;               // in scope 2 at ui/ptr-coercion-rpass.rs:11:9: 11:10
            let _5: &isize;              // in scope 2 at ui/ptr-coercion-rpass.rs:13:9: 13:10
            scope 3 {
                debug x => _5;           // in scope 3 at ui/ptr-coercion-rpass.rs:13:9: 13:10
                let _8: &isize;          // in scope 3 at ui/ptr-coercion-rpass.rs:16:9: 16:10
                let mut _26: &isize;     // in scope 3 at ui/ptr-coercion-rpass.rs:16:21: 16:24
                scope 4 {
                    debug x => _8;       // in scope 4 at ui/ptr-coercion-rpass.rs:16:9: 16:10
                    let _10: *const isize; // in scope 4 at ui/ptr-coercion-rpass.rs:17:9: 17:10
                    scope 5 {
                        debug x => _10;  // in scope 5 at ui/ptr-coercion-rpass.rs:17:9: 17:10
                        let _11: *const isize; // in scope 5 at ui/ptr-coercion-rpass.rs:19:9: 19:10
                        let mut _25: &isize; // in scope 5 at ui/ptr-coercion-rpass.rs:19:27: 19:30
                        scope 6 {
                            debug x => _11; // in scope 6 at ui/ptr-coercion-rpass.rs:19:9: 19:10
                            let _13: &mut isize; // in scope 6 at ui/ptr-coercion-rpass.rs:22:9: 22:10
                            scope 7 {
                                debug x => _13; // in scope 7 at ui/ptr-coercion-rpass.rs:22:9: 22:10
                                let _16: *const isize; // in scope 7 at ui/ptr-coercion-rpass.rs:23:9: 23:10
                                scope 8 {
                                    debug x => _16; // in scope 8 at ui/ptr-coercion-rpass.rs:23:9: 23:10
                                    let _17: *const isize; // in scope 8 at ui/ptr-coercion-rpass.rs:25:9: 25:10
                                    scope 9 {
                                        debug x => _17; // in scope 9 at ui/ptr-coercion-rpass.rs:25:9: 25:10
                                        let _20: *mut isize; // in scope 9 at ui/ptr-coercion-rpass.rs:28:9: 28:10
                                        scope 10 {
                                            debug x => _20; // in scope 10 at ui/ptr-coercion-rpass.rs:28:9: 28:10
                                            let _23: *const isize; // in scope 10 at ui/ptr-coercion-rpass.rs:29:9: 29:10
                                            scope 11 {
                                                debug x => _23; // in scope 11 at ui/ptr-coercion-rpass.rs:29:9: 29:10
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const 42_isize;             // scope 0 at ui/ptr-coercion-rpass.rs:10:30: 10:32
        _2 = &mut _3;                    // scope 0 at ui/ptr-coercion-rpass.rs:10:25: 10:32
        _1 = &mut (*_2);                 // scope 0 at ui/ptr-coercion-rpass.rs:10:25: 10:32
        _4 = &(*_1);                     // scope 1 at ui/ptr-coercion-rpass.rs:11:21: 11:22
        _7 = const 42_isize;             // scope 2 at ui/ptr-coercion-rpass.rs:13:26: 13:28
        _6 = &mut _7;                    // scope 2 at ui/ptr-coercion-rpass.rs:13:21: 13:28
        _5 = &(*_6);                     // scope 2 at ui/ptr-coercion-rpass.rs:13:21: 13:28
        _26 = const _;                   // scope 3 at ui/ptr-coercion-rpass.rs:16:21: 16:24
                                         // mir::Constant
                                         // + span: ui/ptr-coercion-rpass.rs:16:21: 16:24
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _9 = _26;                        // scope 3 at ui/ptr-coercion-rpass.rs:16:21: 16:24
        _8 = _9;                         // scope 3 at ui/ptr-coercion-rpass.rs:16:21: 16:24
        _10 = &raw const (*_8);          // scope 4 at ui/ptr-coercion-rpass.rs:17:27: 17:28
        _25 = const _;                   // scope 5 at ui/ptr-coercion-rpass.rs:19:27: 19:30
                                         // mir::Constant
                                         // + span: ui/ptr-coercion-rpass.rs:19:27: 19:30
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _12 = _25;                       // scope 5 at ui/ptr-coercion-rpass.rs:19:27: 19:30
        _11 = &raw const (*_12);         // scope 5 at ui/ptr-coercion-rpass.rs:19:27: 19:30
        _15 = const 42_isize;            // scope 6 at ui/ptr-coercion-rpass.rs:22:30: 22:32
        _14 = &mut _15;                  // scope 6 at ui/ptr-coercion-rpass.rs:22:25: 22:32
        _13 = &mut (*_14);               // scope 6 at ui/ptr-coercion-rpass.rs:22:25: 22:32
        _16 = &raw const (*_13);         // scope 7 at ui/ptr-coercion-rpass.rs:23:27: 23:28
        _19 = const 42_isize;            // scope 8 at ui/ptr-coercion-rpass.rs:25:32: 25:34
        _18 = &mut _19;                  // scope 8 at ui/ptr-coercion-rpass.rs:25:27: 25:34
        _17 = &raw const (*_18);         // scope 8 at ui/ptr-coercion-rpass.rs:25:27: 25:34
        _22 = const 42_isize;            // scope 9 at ui/ptr-coercion-rpass.rs:28:30: 28:32
        _21 = &mut _22;                  // scope 9 at ui/ptr-coercion-rpass.rs:28:25: 28:32
        _20 = &raw mut (*_21);           // scope 9 at ui/ptr-coercion-rpass.rs:28:25: 28:32
        _24 = _20;                       // scope 10 at ui/ptr-coercion-rpass.rs:29:27: 29:28
        _23 = move _24 as *const isize (Pointer(MutToConstPointer)); // scope 10 at ui/ptr-coercion-rpass.rs:29:27: 29:28
        return;                          // scope 0 at ui/ptr-coercion-rpass.rs:30:2: 30:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at ui/ptr-coercion-rpass.rs:19:27: 19:30
    let mut _1: isize;                   // in scope 0 at ui/ptr-coercion-rpass.rs:19:28: 19:30

    bb0: {
        _1 = const 42_isize;             // scope 0 at ui/ptr-coercion-rpass.rs:19:28: 19:30
        _0 = &_1;                        // scope 0 at ui/ptr-coercion-rpass.rs:19:27: 19:30
        return;                          // scope 0 at ui/ptr-coercion-rpass.rs:19:27: 19:30
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at ui/ptr-coercion-rpass.rs:16:21: 16:24
    let mut _1: isize;                   // in scope 0 at ui/ptr-coercion-rpass.rs:16:22: 16:24

    bb0: {
        _1 = const 42_isize;             // scope 0 at ui/ptr-coercion-rpass.rs:16:22: 16:24
        _0 = &_1;                        // scope 0 at ui/ptr-coercion-rpass.rs:16:21: 16:24
        return;                          // scope 0 at ui/ptr-coercion-rpass.rs:16:21: 16:24
    }
}
