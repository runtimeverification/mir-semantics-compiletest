// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/union/union-overwrite.rs:6:16: 6:21>::clone(_1: &Pair<T, U>) -> Pair<T, U> {
    debug self => _1;
    let mut _0: Pair<T, U>;
    let mut _2: T;
    let _3: &T;
    let mut _4: U;
    let _5: &U;

    bb0: {
        _3 = &((*_1).0: T);
        _2 = <T as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: U);
        _4 = <U as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = Pair::<T, U>(move _2, move _4);
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn <impl at ui/union/union-overwrite.rs:9:16: 9:21>::clone(_1: &Triple<T>) -> Triple<T> {
    debug self => _1;
    let mut _0: Triple<T>;
    let mut _2: T;
    let _3: &T;
    let mut _4: T;
    let _5: &T;
    let mut _6: T;
    let _7: &T;

    bb0: {
        _3 = &((*_1).0: T);
        _2 = <T as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: T);
        _4 = <T as Clone>::clone(_5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _7 = &((*_1).2: T);
        _6 = <T as Clone>::clone(_7) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _0 = Triple::<T>(move _2, move _4, move _6);
        return;
    }

    bb4 (cleanup): {
        drop(_4) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn check() -> () {
    let mut _0: ();
    let mut _1: U<u8, u16>;
    let mut _2: (&u16, &u16);
    let mut _3: &u16;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: u16;
    let mut _9: u16;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&u32, &u32);
    let mut _15: &u32;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: u32;
    let mut _21: u32;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: (&u64, &u64);
    let mut _27: &u64;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: u64;
    let mut _33: u64;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: Triple<u8>;
    let mut _39: (&u32, &u32);
    let mut _40: &u32;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: u32;
    let mut _46: u32;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: Triple<u8>;
    let mut _52: (&u32, &u32);
    let mut _53: &u32;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: u32;
    let mut _59: u32;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug u => _1;
        let _4: &u16;
        let _5: &u16;
        let mut _13: U<u16, u32>;
        let mut _67: &u16;
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
        scope 4 {
            debug u => _13;
            let _16: &u32;
            let _17: &u32;
            let mut _25: U<u32, u64>;
            let mut _66: &u32;
            scope 5 {
                debug left_val => _16;
                debug right_val => _17;
                let _22: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _22;
                }
            }
            scope 7 {
                debug u => _25;
                let _28: &u64;
                let _29: &u64;
                let mut _37: W<Pair<Triple<u8>, u8>, u32>;
                let mut _65: &u64;
                scope 8 {
                    debug left_val => _28;
                    debug right_val => _29;
                    let _34: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _34;
                    }
                }
                scope 10 {
                    debug w => _37;
                    let _41: &u32;
                    let _42: &u32;
                    let mut _50: W<Pair<u8, Triple<u8>>, u32>;
                    let mut _64: &u32;
                    scope 11 {
                        debug left_val => _41;
                        debug right_val => _42;
                        let _47: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _47;
                        }
                    }
                    scope 13 {
                        debug w => _50;
                        let _54: &u32;
                        let _55: &u32;
                        let mut _63: &u32;
                        scope 14 {
                            debug left_val => _54;
                            debug right_val => _55;
                            let _60: core::panicking::AssertKind;
                            scope 15 {
                                debug kind => _60;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = U::<u8, u16> { a: const 57054_u16 };
        ((_1.0: Pair<u8, u8>).0: u8) = const 190_u8;
        _3 = &(_1.1: u16);
        _67 = const _;
        _2 = (move _3, _67);
        _4 = (_2.0: &u16);
        _5 = (_2.1: &u16);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<u16, u16>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb2: {
        _13 = U::<u16, u32> { a: const 3735936685_u32 };
        ((_13.0: Pair<u16, u16>).0: u16) = const 48879_u16;
        _15 = &(_13.1: u32);
        _66 = const _;
        _14 = (move _15, _66);
        _16 = (_14.0: &u32);
        _17 = (_14.1: &u32);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<u32, u32>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb4: {
        _25 = U::<u32, u64> { a: const 16045690984833335023_u64 };
        ((_25.0: Pair<u32, u32>).0: u32) = const 3131961357_u32;
        _27 = &(_25.1: u64);
        _65 = const _;
        _26 = (move _27, _65);
        _28 = (_26.0: &u64);
        _29 = (_26.1: &u64);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<u64, u64>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb6: {
        _37 = W::<Pair<Triple<u8>, u8>, u32> { a: const 3735936685_u32 };
        _38 = Triple::<u8>(const 0_u8, const 0_u8, const 0_u8);
        ((_37.0: Pair<Triple<u8>, u8>).0: Triple<u8>) = move _38;
        _40 = &(_37.1: u32);
        _64 = const _;
        _39 = (move _40, _64);
        _41 = (_39.0: &u32);
        _42 = (_39.1: &u32);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<u32, u32>(move _47, _41, _42, move _49) -> unwind continue;
    }

    bb8: {
        _50 = W::<Pair<u8, Triple<u8>>, u32> { a: const 3735936685_u32 };
        _51 = Triple::<u8>(const 0_u8, const 0_u8, const 0_u8);
        ((_50.0: Pair<u8, Triple<u8>>).1: Triple<u8>) = move _51;
        _53 = &(_50.1: u32);
        _63 = const _;
        _52 = (move _53, _63);
        _54 = (_52.0: &u32);
        _55 = (_52.1: &u32);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<u32, u32>(move _60, _54, _55, move _62) -> unwind continue;
    }

    bb10: {
        return;
    }
}

promoted[0] in check: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 173_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in check: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 3724541952_u32;
        _0 = &_1;
        return;
    }
}

promoted[2] in check: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 16045690984229367821_u64;
        _0 = &_1;
        return;
    }
}

promoted[3] in check: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 3735928559_u32;
        _0 = &_1;
        return;
    }
}

promoted[4] in check: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 57022_u16;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    scope 1 {
    }

    bb0: {
        _1 = check() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn Pair(_1: T, _2: U) -> Pair<T, U> {
    let mut _0: Pair<T, U>;

    bb0: {
        _0 = Pair::<T, U>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Pair(_1: T, _2: U) -> Pair<T, U> {
    let mut _0: Pair<T, U>;

    bb0: {
        _0 = Pair::<T, U>(move _1, move _2);
        return;
    }
}

fn Triple(_1: T, _2: T, _3: T) -> Triple<T> {
    let mut _0: Triple<T>;

    bb0: {
        _0 = Triple::<T>(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn Triple(_1: T, _2: T, _3: T) -> Triple<T> {
    let mut _0: Triple<T>;

    bb0: {
        _0 = Triple::<T>(move _1, move _2, move _3);
        return;
    }
}
