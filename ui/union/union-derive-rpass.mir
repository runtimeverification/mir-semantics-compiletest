// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/union/union-derive-rpass.rs:12:5: 12:10>::clone(_1: &U) -> U {
    debug self => _1;                    // in scope 0 at ui/union/union-derive-rpass.rs:12:5: 12:10
    let mut _0: U;                       // return place in scope 0 at ui/union/union-derive-rpass.rs:12:5: 12:10
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/union/union-derive-rpass.rs:12:5: 12:10
        return;                          // scope 0 at ui/union/union-derive-rpass.rs:12:10: 12:10
    }
}

fn <impl at ui/union/union-derive-rpass.rs:13:5: 13:7>::assert_receiver_is_total_eq(_1: &U) -> () {
    debug self => _1;                    // in scope 0 at ui/union/union-derive-rpass.rs:13:5: 13:7
    let mut _0: ();                      // return place in scope 0 at ui/union/union-derive-rpass.rs:13:5: 13:7
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at ui/union/union-derive-rpass.rs:13:7: 13:7
    }
}

fn <impl at ui/union/union-derive-rpass.rs:20:1: 20:21>::eq(_1: &U, _2: &U) -> bool {
    debug self => _1;                    // in scope 0 at ui/union/union-derive-rpass.rs:20:30: 20:35
    debug rhs => _2;                     // in scope 0 at ui/union/union-derive-rpass.rs:20:37: 20:40
    let mut _0: bool;                    // return place in scope 0 at ui/union/union-derive-rpass.rs:20:52: 20:56

    bb0: {
        _0 = const true;                 // scope 0 at ui/union/union-derive-rpass.rs:20:59: 20:63
        return;                          // scope 0 at ui/union/union-derive-rpass.rs:20:65: 20:65
    }
}

fn <impl at ui/union/union-derive-rpass.rs:23:5: 23:10>::clone(_1: &W<T>) -> W<T> {
    debug self => _1;                    // in scope 0 at ui/union/union-derive-rpass.rs:23:5: 23:10
    let mut _0: W<T>;                    // return place in scope 0 at ui/union/union-derive-rpass.rs:23:5: 23:10
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/union/union-derive-rpass.rs:23:5: 23:10
        return;                          // scope 0 at ui/union/union-derive-rpass.rs:23:10: 23:10
    }
}

fn <impl at ui/union/union-derive-rpass.rs:25:5: 25:7>::assert_receiver_is_total_eq(_1: &W<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/union/union-derive-rpass.rs:25:5: 25:7
    let mut _0: ();                      // return place in scope 0 at ui/union/union-derive-rpass.rs:25:5: 25:7
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/union/union-derive-rpass.rs:25:7: 25:7
    }
}

fn <impl at ui/union/union-derive-rpass.rs:31:1: 31:33>::eq(_1: &W<T>, _2: &W<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/union/union-derive-rpass.rs:31:42: 31:47
    debug rhs => _2;                     // in scope 0 at ui/union/union-derive-rpass.rs:31:49: 31:52
    let mut _0: bool;                    // return place in scope 0 at ui/union/union-derive-rpass.rs:31:64: 31:68

    bb0: {
        _0 = const true;                 // scope 0 at ui/union/union-derive-rpass.rs:31:71: 31:75
        return;                          // scope 0 at ui/union/union-derive-rpass.rs:31:77: 31:77
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/union/union-derive-rpass.rs:33:11: 33:11
    let _1: U;                           // in scope 0 at ui/union/union-derive-rpass.rs:34:9: 34:10
    let mut _4: &U;                      // in scope 0 at ui/union/union-derive-rpass.rs:36:14: 36:23
    let mut _5: bool;                    // in scope 0 at ui/union/union-derive-rpass.rs:37:5: 37:22
    let mut _6: bool;                    // in scope 0 at ui/union/union-derive-rpass.rs:37:13: 37:21
    let mut _7: &U;                      // in scope 0 at ui/union/union-derive-rpass.rs:37:13: 37:15
    let mut _8: &U;                      // in scope 0 at ui/union/union-derive-rpass.rs:37:19: 37:21
    let mut _9: !;                       // in scope 0 at ui/union/union-derive-rpass.rs:37:5: 37:22
    let mut _12: &W<i32>;                // in scope 0 at ui/union/union-derive-rpass.rs:40:14: 40:23
    let mut _13: bool;                   // in scope 0 at ui/union/union-derive-rpass.rs:41:5: 41:21
    let mut _14: bool;                   // in scope 0 at ui/union/union-derive-rpass.rs:41:13: 41:20
    let mut _15: &W<i32>;                // in scope 0 at ui/union/union-derive-rpass.rs:41:13: 41:14
    let mut _16: &W<i32>;                // in scope 0 at ui/union/union-derive-rpass.rs:41:18: 41:20
    let mut _17: !;                      // in scope 0 at ui/union/union-derive-rpass.rs:41:5: 41:21
    scope 1 {
        debug u => _1;                   // in scope 1 at ui/union/union-derive-rpass.rs:34:9: 34:10
        let _2: U;                       // in scope 1 at ui/union/union-derive-rpass.rs:35:9: 35:11
        scope 2 {
            debug u1 => _2;              // in scope 2 at ui/union/union-derive-rpass.rs:35:9: 35:11
            let _3: U;                   // in scope 2 at ui/union/union-derive-rpass.rs:36:9: 36:11
            scope 3 {
                debug u2 => _3;          // in scope 3 at ui/union/union-derive-rpass.rs:36:9: 36:11
                let _10: W<i32>;         // in scope 3 at ui/union/union-derive-rpass.rs:39:9: 39:10
                scope 4 {
                    debug w => _10;      // in scope 4 at ui/union/union-derive-rpass.rs:39:9: 39:10
                    let _11: W<i32>;     // in scope 4 at ui/union/union-derive-rpass.rs:40:9: 40:11
                    scope 5 {
                        debug w1 => _11; // in scope 5 at ui/union/union-derive-rpass.rs:40:9: 40:11
                    }
                }
            }
        }
    }

    bb0: {
        _1 = U { a: const 0_u16 };       // scope 0 at ui/union/union-derive-rpass.rs:34:13: 34:23
        _2 = _1;                         // scope 1 at ui/union/union-derive-rpass.rs:35:14: 35:15
        _4 = &_1;                        // scope 2 at ui/union/union-derive-rpass.rs:36:14: 36:23
        _3 = <U as Clone>::clone(move _4) -> bb1; // scope 2 at ui/union/union-derive-rpass.rs:36:14: 36:23
                                         // mir::Constant
                                         // + span: ui/union/union-derive-rpass.rs:36:16: 36:21
                                         // + literal: Const { ty: for<'a> fn(&'a U) -> U {<U as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_2;                        // scope 3 at ui/union/union-derive-rpass.rs:37:13: 37:15
        _8 = &_3;                        // scope 3 at ui/union/union-derive-rpass.rs:37:19: 37:21
        _6 = <U as PartialEq>::eq(move _7, move _8) -> bb2; // scope 3 at ui/union/union-derive-rpass.rs:37:13: 37:21
                                         // mir::Constant
                                         // + span: ui/union/union-derive-rpass.rs:37:13: 37:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U, &'b U) -> bool {<U as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Not(move _6);               // scope 3 at ui/union/union-derive-rpass.rs:37:5: 37:22
        switchInt(move _5) -> [0: bb4, otherwise: bb3]; // scope 3 at ui/union/union-derive-rpass.rs:37:5: 37:22
    }

    bb3: {
        _9 = core::panicking::panic(const "assertion failed: u1 == u2"); // scope 3 at ui/union/union-derive-rpass.rs:37:5: 37:22
                                         // mir::Constant
                                         // + span: ui/union/union-derive-rpass.rs:37:5: 37:22
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _10 = W::<i32> { a: const 0_i32 }; // scope 3 at ui/union/union-derive-rpass.rs:39:13: 39:23
        _12 = &_10;                      // scope 4 at ui/union/union-derive-rpass.rs:40:14: 40:23
        _11 = <W<i32> as Clone>::clone(move _12) -> bb5; // scope 4 at ui/union/union-derive-rpass.rs:40:14: 40:23
                                         // mir::Constant
                                         // + span: ui/union/union-derive-rpass.rs:40:16: 40:21
                                         // + literal: Const { ty: for<'a> fn(&'a W<i32>) -> W<i32> {<W<i32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = &_10;                      // scope 5 at ui/union/union-derive-rpass.rs:41:13: 41:14
        _16 = &_11;                      // scope 5 at ui/union/union-derive-rpass.rs:41:18: 41:20
        _14 = <W<i32> as PartialEq>::eq(move _15, move _16) -> bb6; // scope 5 at ui/union/union-derive-rpass.rs:41:13: 41:20
                                         // mir::Constant
                                         // + span: ui/union/union-derive-rpass.rs:41:13: 41:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a W<i32>, &'b W<i32>) -> bool {<W<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = Not(move _14);             // scope 5 at ui/union/union-derive-rpass.rs:41:5: 41:21
        switchInt(move _13) -> [0: bb8, otherwise: bb7]; // scope 5 at ui/union/union-derive-rpass.rs:41:5: 41:21
    }

    bb7: {
        _17 = core::panicking::panic(const "assertion failed: w == w1"); // scope 5 at ui/union/union-derive-rpass.rs:41:5: 41:21
                                         // mir::Constant
                                         // + span: ui/union/union-derive-rpass.rs:41:5: 41:21
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        return;                          // scope 0 at ui/union/union-derive-rpass.rs:42:2: 42:2
    }
}
