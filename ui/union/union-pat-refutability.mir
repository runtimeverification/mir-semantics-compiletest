// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn is_zero(_1: Value) -> bool {
    debug v => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: u32;
    let mut _4: i32;
    scope 1 {
    }

    bb0: {
        _3 = discriminant((_1.0: Tag));
        switchInt(move _3) -> [0: bb1, 1: bb2, otherwise: bb4];
    }

    bb1: {
        StorageLive(_4);
        _4 = ((_1.1: U).0: i32);
        _0 = Eq(_4, const 0_i32);
        StorageDead(_4);
        goto -> bb3;
    }

    bb2: {
        _2 = Eq(const 0f32, ((_1.1: U).1: f32));
        _0 = _2;
        goto -> bb3;
    }

    bb3: {
        return;
    }

    bb4: {
        unreachable;
    }
}

fn refut(_1: W) -> () {
    debug w => _1;
    let mut _0: ();
    let mut _2: !;
    let mut _4: (&u8, &u8);
    let mut _5: &u8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u8;
    let mut _11: u8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let _3: u8;
        scope 2 {
            debug b => _3;
            let _6: &u8;
            let _7: &u8;
            let mut _15: &u8;
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
        }
    }

    bb0: {
        switchInt((_1.0: u8)) -> [10: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = (_1.1: u8);
        _5 = &_3;
        _15 = const _;
        _4 = (move _5, _15);
        _6 = (_4.0: &u8);
        _7 = (_4.1: &u8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb2: {
        _2 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u8, u8>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in refut: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 11_u8;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Value;
    let mut _2: Tag;
    let mut _3: U;
    let mut _4: (&bool, &bool);
    let mut _5: &bool;
    let _6: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let _17: ();
    scope 1 {
        debug v => _1;
        let _7: &bool;
        let _8: &bool;
        let _16: W;
        let mut _18: &bool;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug w => _16;
        }
    }

    bb0: {
        _2 = Tag::I;
        _3 = U { i: const 1_i32 };
        _1 = Value { tag: move _2, u: move _3 };
        _6 = is_zero(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _18 = const _;
        _4 = (move _5, _18);
        _7 = (_4.0: &bool);
        _8 = (_4.1: &bool);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<bool, bool>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb3: {
        _16 = W { a: const 11_u8 };
        _17 = refut(move _16) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}
