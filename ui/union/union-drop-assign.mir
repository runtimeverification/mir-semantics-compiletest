// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/union/union-drop-assign.rs:14:1: 14:16>::drop(_1: &mut S) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut u8;
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut u8};
        (*_2) = Add((*_2), const 10_u8);
        return;
    }
}

alloc1 (static: CHECK, size: 1, align: 1) {
    00                                              │ .
}

fn <impl at ui/union/union-drop-assign.rs:20:1: 20:16>::drop(_1: &mut U) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut u8;
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut u8};
        (*_2) = Add((*_2), const 1_u8);
        return;
    }
}

alloc1 (static: CHECK, size: 1, align: 1) {
    00                                              │ .
}

static mut CHECK: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 0_u8;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _2: std::mem::ManuallyDrop<S>;
    let mut _3: (&u8, &u8);
    let mut _4: &u8;
    let _5: *mut u8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u8;
    let mut _11: u8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: std::mem::ManuallyDrop<S>;
    let mut _16: (&u8, &u8);
    let mut _17: &u8;
    let _18: *mut u8;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: u8;
    let mut _24: u8;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: S;
    let mut _29: &mut S;
    let mut _30: &mut std::mem::ManuallyDrop<S>;
    let mut _31: (&u8, &u8);
    let mut _32: &u8;
    let _33: *mut u8;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: u8;
    let mut _39: u8;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: bool;
    scope 1 {
        let mut _1: U;
        scope 2 {
            debug u => const U {{ a: ManuallyDrop::<S> {{ value: S }} }};
            let _6: &u8;
            let _7: &u8;
            let _19: &u8;
            let _20: &u8;
            let _34: &u8;
            let _35: &u8;
            let mut _43: &u8;
            let mut _44: &u8;
            let mut _45: &u8;
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
            scope 5 {
                debug left_val => _19;
                debug right_val => _20;
                let _25: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _25;
                }
            }
            scope 7 {
                debug left_val => _34;
                debug right_val => _35;
                let _40: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _40;
                }
            }
        }
    }

    bb0: {
        _46 = const false;
        _2 = ManuallyDrop::<S>::new(const S) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = const {alloc1: *mut u8};
        _4 = &(*_5);
        _45 = const _;
        _3 = (move _4, _45);
        _6 = (_3.0: &u8);
        _7 = (_3.1: &u8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u8, u8>(move _12, _6, _7, move _14) -> bb14;
    }

    bb3: {
        _15 = ManuallyDrop::<S>::new(const S) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        drop(_1) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _18 = const {alloc1: *mut u8};
        _17 = &(*_18);
        _44 = const _;
        _16 = (move _17, _44);
        _19 = (_16.0: &u8);
        _20 = (_16.1: &u8);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<u8, u8>(move _25, _19, _20, move _27) -> bb14;
    }

    bb7: {
        _46 = const true;
        _30 = &mut (_1.0: std::mem::ManuallyDrop<S>);
        _29 = <ManuallyDrop<S> as DerefMut>::deref_mut(move _30) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        drop((*_29)) -> [return: bb9, unwind: bb10];
    }

    bb9: {
        _46 = const false;
        _46 = const false;
        _33 = const {alloc1: *mut u8};
        _32 = &(*_33);
        _43 = const _;
        _31 = (move _32, _43);
        _34 = (_31.0: &u8);
        _35 = (_31.1: &u8);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb12, otherwise: bb11];
    }

    bb10 (cleanup): {
        _46 = const false;
        goto -> bb17;
    }

    bb11: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<u8, u8>(move _40, _34, _35, move _42) -> bb14;
    }

    bb12: {
        drop(_1) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16 (cleanup): {
        drop(_28) -> [return: bb14, unwind terminate];
    }

    bb17 (cleanup): {
        switchInt(_46) -> [0: bb14, otherwise: bb16];
    }
}

alloc1 (static: CHECK, size: 1, align: 1) {
    00                                              │ .
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 11_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}
