// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/union/union-trait-impl.rs:11:1: 11:24>::fmt(_1: &U, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/union/union-trait-impl.rs:12:12: 12:17
    debug f => _2;                       // in scope 0 at ui/union/union-trait-impl.rs:12:19: 12:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/union/union-trait-impl.rs:12:46: 12:57
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _5: &[&str];                 // in scope 0 at ui/union/union-trait-impl.rs:13:28: 13:39
    let mut _6: &[&str; 1];              // in scope 0 at ui/union/union-trait-impl.rs:13:28: 13:39
    let _7: &[&str; 1];                  // in scope 0 at ui/union/union-trait-impl.rs:13:28: 13:39
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/union/union-trait-impl.rs:13:41: 13:47
    let mut _13: &u8;                    // in scope 0 at ui/union/union-trait-impl.rs:13:41: 13:47
    let _14: &u8;                        // in scope 0 at ui/union/union-trait-impl.rs:13:41: 13:47
    scope 1 {
        let mut _15: &[&str; 1];         // in scope 1 at ui/union/union-trait-impl.rs:13:28: 13:39
    }

    bb0: {
        _3 = &mut (*_2);                 // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
        _15 = const _;                   // scope 1 at ui/union/union-trait-impl.rs:13:28: 13:39
                                         // mir::Constant
                                         // + span: ui/union/union-trait-impl.rs:13:28: 13:39
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<U as std::fmt::Display>::fmt, [], Some(promoted[0])) }
        _7 = _15;                        // scope 1 at ui/union/union-trait-impl.rs:13:28: 13:39
        _6 = _7;                         // scope 1 at ui/union/union-trait-impl.rs:13:28: 13:39
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 1 at ui/union/union-trait-impl.rs:13:28: 13:39
        _14 = &((*_1).0: u8);            // scope 1 at ui/union/union-trait-impl.rs:13:41: 13:47
        _13 = _14;                       // scope 1 at ui/union/union-trait-impl.rs:13:41: 13:47
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<u8>(move _13) -> bb1; // scope 1 at ui/union/union-trait-impl.rs:13:41: 13:47
                                         // mir::Constant
                                         // + span: ui/union/union-trait-impl.rs:13:41: 13:47
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u8) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _10 = &_11;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _9 = _10;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Formatter::<'_>::write_fmt(move _3, move _4) -> bb3; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/union/union-trait-impl.rs:14:6: 14:6
    }
}

promoted[0] in <impl at ui/union/union-trait-impl.rs:11:1: 11:24>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/union/union-trait-impl.rs:13:28: 13:39
    let mut _1: [&str; 1];               // in scope 0 at ui/union/union-trait-impl.rs:13:28: 13:39

    bb0: {
        _1 = [const "Oh hai "];          // scope 0 at ui/union/union-trait-impl.rs:13:28: 13:39
                                         // mir::Constant
                                         // + span: ui/union/union-trait-impl.rs:13:28: 13:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/union/union-trait-impl.rs:13:28: 13:39
        return;                          // scope 0 at ui/union/union-trait-impl.rs:13:28: 13:39
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/union/union-trait-impl.rs:17:11: 17:11
    let mut _1: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::string::String;         // in scope 0 at ui/union/union-trait-impl.rs:18:16: 18:38
    let mut _4: &U;                      // in scope 0 at ui/union/union-trait-impl.rs:18:16: 18:38
    let mut _5: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: &std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &&str;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _21: &U;                     // in scope 0 at ui/union/union-trait-impl.rs:18:16: 18:38
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _21 = const _;                   // scope 0 at ui/union/union-trait-impl.rs:18:16: 18:38
                                         // mir::Constant
                                         // + span: ui/union/union-trait-impl.rs:18:16: 18:38
                                         // + literal: Const { ty: &U, val: Unevaluated(main, [], Some(promoted[1])) }
        _4 = _21;                        // scope 0 at ui/union/union-trait-impl.rs:18:16: 18:38
        _3 = <U as ToString>::to_string(move _4) -> bb1; // scope 0 at ui/union/union-trait-impl.rs:18:16: 18:38
                                         // mir::Constant
                                         // + span: ui/union/union-trait-impl.rs:18:27: 18:36
                                         // + literal: Const { ty: for<'a> fn(&'a U) -> String {<U as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _20 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _20;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_1.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_1.1: &&str);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <String as PartialEq<&str>>::eq(move _10, move _11) -> [return: bb2, unwind: bb6]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<String, &str>(move _14, move _15, move _17, move _19) -> bb6; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_3) -> bb5;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb5: {
        return;                          // scope 0 at ui/union/union-trait-impl.rs:19:2: 19:2
    }

    bb6 (cleanup): {
        drop(_3) -> bb7;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/union/union-trait-impl.rs:17:1: 19:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/union/union-trait-impl.rs:18:40: 18:50

    bb0: {
        _1 = const "Oh hai 2";           // scope 0 at ui/union/union-trait-impl.rs:18:40: 18:50
                                         // mir::Constant
                                         // + span: ui/union/union-trait-impl.rs:18:40: 18:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &U = {
    let mut _0: &U;                      // return place in scope 0 at ui/union/union-trait-impl.rs:18:16: 18:38
    let mut _1: U;                       // in scope 0 at ui/union/union-trait-impl.rs:18:16: 18:26

    bb0: {
        _1 = U { a: const 2_u8 };        // scope 0 at ui/union/union-trait-impl.rs:18:16: 18:26
        _0 = &_1;                        // scope 0 at ui/union/union-trait-impl.rs:18:16: 18:38
        return;                          // scope 0 at ui/union/union-trait-impl.rs:18:16: 18:38
    }
}
