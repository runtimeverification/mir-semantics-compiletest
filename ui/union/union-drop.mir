// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/union/union-drop.rs:10:16: 10:21>::clone(_1: &S) -> S {
    debug self => _1;
    let mut _0: S;

    bb0: {
        return;
    }
}

fn <impl at ui/union/union-drop.rs:25:1: 25:16>::drop(_1: &mut U) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut u8;
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut u8};
        (*_2) = Add((*_2), const 1_u8);
        return;
    }
}

alloc1 (static: CHECK, size: 1, align: 1) {
    00                                              │ .
}

fn <impl at ui/union/union-drop.rs:31:1: 31:16>::drop(_1: &mut W) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut u8;
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut u8};
        (*_2) = Add((*_2), const 1_u8);
        return;
    }
}

alloc1 (static: CHECK, size: 1, align: 1) {
    00                                              │ .
}

static mut CHECK: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 0_u8;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let mut _2: &u8;
    let _3: *mut u8;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: u8;
    let mut _9: u8;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&u8, &u8);
    let mut _15: &u8;
    let _16: *mut u8;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: u8;
    let mut _22: u8;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&u8, &u8);
    let mut _28: &u8;
    let _29: *mut u8;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: u8;
    let mut _35: u8;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&u8, &u8);
    let mut _40: &u8;
    let _41: *mut u8;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: u8;
    let mut _47: u8;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let _52: ();
    let mut _53: (&u8, &u8);
    let mut _54: &u8;
    let _55: *mut u8;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: u8;
    let mut _61: u8;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let _4: &u8;
        let _5: &u8;
        let _13: U;
        let _17: &u8;
        let _18: &u8;
        let _26: W;
        let _30: &u8;
        let _31: &u8;
        let _42: &u8;
        let _43: &u8;
        let _51: U;
        let _56: &u8;
        let _57: &u8;
        let mut _65: &u8;
        let mut _66: &u8;
        let mut _67: &u8;
        let mut _68: &u8;
        let mut _69: &u8;
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
        scope 4 {
            debug u => _13;
        }
        scope 5 {
            debug left_val => _17;
            debug right_val => _18;
            let _23: core::panicking::AssertKind;
            scope 6 {
                debug kind => _23;
            }
        }
        scope 7 {
            debug w => const W {{ a: S }};
        }
        scope 8 {
            debug left_val => _30;
            debug right_val => _31;
            let _36: core::panicking::AssertKind;
            scope 9 {
                debug kind => _36;
            }
        }
        scope 10 {
            debug y => const Y {{ a: S }};
        }
        scope 11 {
            debug left_val => _42;
            debug right_val => _43;
            let _48: core::panicking::AssertKind;
            scope 12 {
                debug kind => _48;
            }
        }
        scope 13 {
            debug u2 => _51;
        }
        scope 14 {
            debug left_val => _56;
            debug right_val => _57;
            let _62: core::panicking::AssertKind;
            scope 15 {
                debug kind => _62;
            }
        }
    }

    bb0: {
        _3 = const {alloc1: *mut u8};
        _2 = &(*_3);
        _69 = const _;
        _1 = (move _2, _69);
        _4 = (_1.0: &u8);
        _5 = (_1.1: &u8);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<u8, u8>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb2: {
        _13 = U { a: const 1_u8 };
        drop(_13) -> [return: bb3, unwind continue];
    }

    bb3: {
        _16 = const {alloc1: *mut u8};
        _15 = &(*_16);
        _68 = const _;
        _14 = (move _15, _68);
        _17 = (_14.0: &u8);
        _18 = (_14.1: &u8);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<u8, u8>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb5: {
        drop(_26) -> [return: bb6, unwind continue];
    }

    bb6: {
        _29 = const {alloc1: *mut u8};
        _28 = &(*_29);
        _67 = const _;
        _27 = (move _28, _67);
        _30 = (_27.0: &u8);
        _31 = (_27.1: &u8);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<u8, u8>(move _36, _30, _31, move _38) -> unwind continue;
    }

    bb8: {
        _41 = const {alloc1: *mut u8};
        _40 = &(*_41);
        _66 = const _;
        _39 = (move _40, _66);
        _42 = (_39.0: &u8);
        _43 = (_39.1: &u8);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<u8, u8>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb10: {
        _51 = U { a: const 1_u8 };
        _52 = std::mem::forget::<U>(move _51) -> [return: bb11, unwind continue];
    }

    bb11: {
        _55 = const {alloc1: *mut u8};
        _54 = &(*_55);
        _65 = const _;
        _53 = (move _54, _65);
        _56 = (_53.0: &u8);
        _57 = (_53.1: &u8);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<u8, u8>(move _62, _56, _57, move _64) -> unwind continue;
    }

    bb13: {
        return;
    }
}

alloc1 (static: CHECK, size: 1, align: 1) {
    00                                              │ .
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}
