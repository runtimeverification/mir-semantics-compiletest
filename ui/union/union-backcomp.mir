// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn union() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/union/union-backcomp.rs:14:12: 14:12

    bb0: {
        return;                          // scope 0 at ui/union/union-backcomp.rs:14:14: 14:14
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/union/union-backcomp.rs:16:11: 16:11
    let _1: ();                          // in scope 0 at ui/union/union-backcomp.rs:17:5: 17:12
    let _2: i32;                         // in scope 0 at ui/union/union-backcomp.rs:19:9: 19:14
    scope 1 {
        debug union => _2;               // in scope 1 at ui/union/union-backcomp.rs:19:9: 19:14
    }

    bb0: {
        _1 = union() -> bb1;             // scope 0 at ui/union/union-backcomp.rs:17:5: 17:12
                                         // mir::Constant
                                         // + span: ui/union/union-backcomp.rs:17:5: 17:10
                                         // + literal: Const { ty: fn() {union}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = const 10_i32;               // scope 0 at ui/union/union-backcomp.rs:19:17: 19:19
        return;                          // scope 0 at ui/union/union-backcomp.rs:28:2: 28:2
    }
}
