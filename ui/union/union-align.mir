// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&usize, &usize);
    let _12: &usize;
    let _13: &usize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: usize;
    let mut _17: usize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let _21: U16;
    let mut _22: (&usize, &usize);
    let mut _23: &usize;
    let _24: usize;
    let _25: &u8;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: usize;
    let mut _31: usize;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&usize, &usize);
    let mut _36: &usize;
    let _37: usize;
    let _38: &u8;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: usize;
    let mut _44: usize;
    let _46: !;
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _48: (&u8, &u8);
    let mut _49: &u8;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: u8;
    let mut _55: u8;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _60: (&usize, &usize);
    let mut _61: &usize;
    let _62: usize;
    let _63: &u32;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: usize;
    let mut _69: usize;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&usize, &usize);
    let mut _74: &usize;
    let _75: usize;
    let _76: &u32;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: usize;
    let mut _82: usize;
    let _84: !;
    let mut _85: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _86: (&u32, &u32);
    let mut _87: &u32;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: u32;
    let mut _93: u32;
    let _95: !;
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>;
    let _97: ();
    let mut _104: &usize;
    let mut _105: &usize;
    let mut _106: &usize;
    let mut _107: &usize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug u => _21;
        let _59: U16;
        scope 6 {
            let _26: &usize;
            let _27: &usize;
            let _39: &usize;
            let _40: &usize;
            let _50: &u8;
            let _51: &u8;
            let mut _101: &u8;
            let mut _102: &usize;
            let mut _103: &usize;
            scope 7 {
                debug left_val => _26;
                debug right_val => _27;
                let _32: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _32;
                }
            }
            scope 9 {
                debug left_val => _39;
                debug right_val => _40;
                let _45: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _45;
                }
            }
            scope 11 {
                debug left_val => _50;
                debug right_val => _51;
                let _56: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _56;
                }
            }
        }
        scope 13 {
            debug u => _59;
            scope 14 {
                let _64: &usize;
                let _65: &usize;
                let _77: &usize;
                let _78: &usize;
                let _88: &u32;
                let _89: &u32;
                let mut _98: &u32;
                let mut _99: &usize;
                let mut _100: &usize;
                scope 15 {
                    debug left_val => _64;
                    debug right_val => _65;
                    let _70: core::panicking::AssertKind;
                    scope 16 {
                        debug kind => _70;
                    }
                }
                scope 17 {
                    debug left_val => _77;
                    debug right_val => _78;
                    let _83: core::panicking::AssertKind;
                    scope 18 {
                        debug kind => _83;
                    }
                }
                scope 19 {
                    debug left_val => _88;
                    debug right_val => _89;
                    let _94: core::panicking::AssertKind;
                    scope 20 {
                        debug kind => _94;
                    }
                }
            }
        }
    }

    bb0: {
        _107 = const _;
        _106 = const _;
        _1 = (_107, _106);
        _2 = (_1.0: &usize);
        _3 = (_1.1: &usize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<usize, usize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _105 = const _;
        _104 = const _;
        _11 = (_105, _104);
        _12 = (_11.0: &usize);
        _13 = (_11.1: &usize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<usize, usize>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _21 = U16 { a: const 10_u8 };
        _25 = &(_21.0: u8);
        _24 = align_of_val::<u8>(_25) -> [return: bb5, unwind continue];
    }

    bb5: {
        _23 = &_24;
        _103 = const _;
        _22 = (move _23, _103);
        _26 = (_22.0: &usize);
        _27 = (_22.1: &usize);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<usize, usize>(move _32, _26, _27, move _34) -> unwind continue;
    }

    bb7: {
        _38 = &(_21.0: u8);
        _37 = std::mem::size_of_val::<u8>(_38) -> [return: bb8, unwind continue];
    }

    bb8: {
        _36 = &_37;
        _102 = const _;
        _35 = (move _36, _102);
        _39 = (_35.0: &usize);
        _40 = (_35.1: &usize);
        _43 = (*_39);
        _44 = (*_40);
        _42 = Eq(move _43, move _44);
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _45 = core::panicking::AssertKind::Eq;
        _47 = Option::<Arguments<'_>>::None;
        _46 = core::panicking::assert_failed::<usize, usize>(move _45, _39, _40, move _47) -> unwind continue;
    }

    bb10: {
        _49 = &(_21.0: u8);
        _101 = const _;
        _48 = (move _49, _101);
        _50 = (_48.0: &u8);
        _51 = (_48.1: &u8);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<u8, u8>(move _56, _50, _51, move _58) -> unwind continue;
    }

    bb12: {
        _59 = U16 { a: const 11_u32 };
        _63 = &(_59.1: u32);
        _62 = align_of_val::<u32>(_63) -> [return: bb13, unwind continue];
    }

    bb13: {
        _61 = &_62;
        _100 = const _;
        _60 = (move _61, _100);
        _64 = (_60.0: &usize);
        _65 = (_60.1: &usize);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<usize, usize>(move _70, _64, _65, move _72) -> unwind continue;
    }

    bb15: {
        _76 = &(_59.1: u32);
        _75 = std::mem::size_of_val::<u32>(_76) -> [return: bb16, unwind continue];
    }

    bb16: {
        _74 = &_75;
        _99 = const _;
        _73 = (move _74, _99);
        _77 = (_73.0: &usize);
        _78 = (_73.1: &usize);
        _81 = (*_77);
        _82 = (*_78);
        _80 = Eq(move _81, move _82);
        _79 = Not(move _80);
        switchInt(move _79) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _83 = core::panicking::AssertKind::Eq;
        _85 = Option::<Arguments<'_>>::None;
        _84 = core::panicking::assert_failed::<usize, usize>(move _83, _77, _78, move _85) -> unwind continue;
    }

    bb18: {
        _87 = &(_59.1: u32);
        _98 = const _;
        _86 = (move _87, _98);
        _88 = (_86.0: &u32);
        _89 = (_86.1: &u32);
        _92 = (*_88);
        _93 = (*_89);
        _91 = Eq(move _92, move _93);
        _90 = Not(move _91);
        switchInt(move _90) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _94 = core::panicking::AssertKind::Eq;
        _96 = Option::<Arguments<'_>>::None;
        _95 = core::panicking::assert_failed::<u32, u32>(move _94, _88, _89, move _96) -> unwind continue;
    }

    bb20: {
        _97 = check_hybrid() -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 11_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 10_u8;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 16_usize;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<U16>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 16_usize;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<U16>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

fn hybrid::<impl at ui/union/union-align.rs:39:20: 39:25>::clone(_1: &S1) -> S1 {
    debug self => _1;
    let mut _0: hybrid::S1;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn check_hybrid() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&usize, &usize);
    let _12: &usize;
    let _13: &usize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: usize;
    let mut _17: usize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&usize, &usize);
    let _22: &usize;
    let _23: &usize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: usize;
    let mut _27: usize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&usize, &usize);
    let _32: &usize;
    let _33: &usize;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: usize;
    let mut _37: usize;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&usize, &usize);
    let _42: &usize;
    let _43: &usize;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: usize;
    let mut _47: usize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&usize, &usize);
    let _52: &usize;
    let _53: &usize;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: usize;
    let mut _57: usize;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: &usize;
    let mut _62: &usize;
    let mut _63: &usize;
    let mut _64: &usize;
    let mut _65: &usize;
    let mut _66: &usize;
    let mut _67: &usize;
    let mut _68: &usize;
    let mut _69: &usize;
    let mut _70: &usize;
    let mut _71: &usize;
    let mut _72: &usize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 8 {
            debug kind => _38;
        }
    }
    scope 9 {
        debug left_val => _42;
        debug right_val => _43;
        let _48: core::panicking::AssertKind;
        scope 10 {
            debug kind => _48;
        }
    }
    scope 11 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 12 {
            debug kind => _58;
        }
    }

    bb0: {
        _72 = const _;
        _71 = const _;
        _1 = (_72, _71);
        _2 = (_1.0: &usize);
        _3 = (_1.1: &usize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<usize, usize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _70 = const _;
        _69 = const _;
        _11 = (_70, _69);
        _12 = (_11.0: &usize);
        _13 = (_11.1: &usize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<usize, usize>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _68 = const _;
        _67 = const _;
        _21 = (_68, _67);
        _22 = (_21.0: &usize);
        _23 = (_21.1: &usize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<usize, usize>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _66 = const _;
        _65 = const _;
        _31 = (_66, _65);
        _32 = (_31.0: &usize);
        _33 = (_31.1: &usize);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<usize, usize>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb8: {
        _64 = const _;
        _63 = const _;
        _41 = (_64, _63);
        _42 = (_41.0: &usize);
        _43 = (_41.1: &usize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<usize, usize>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb10: {
        _62 = const _;
        _61 = const _;
        _51 = (_62, _61);
        _52 = (_51.0: &usize);
        _53 = (_51.1: &usize);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<usize, usize>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb12: {
        return;
    }
}

promoted[0] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 64_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<S2>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[2] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 64_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<S2>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[4] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 32_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<U>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[6] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 32_usize;
        _0 = &_1;
        return;
    }
}

promoted[7] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<U>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[8] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 16_usize;
        _0 = &_1;
        return;
    }
}

promoted[9] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<S1>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[10] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 16_usize;
        _0 = &_1;
        return;
    }
}

promoted[11] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<S1>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}
