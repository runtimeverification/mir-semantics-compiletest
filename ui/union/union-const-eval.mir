// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const C: U = {
    let mut _0: U;                       // return place in scope 0 at ui/union/union-const-eval.rs:10:10: 10:11

    bb0: {
        _0 = U { a: const 10_usize };    // scope 0 at ui/union/union-const-eval.rs:10:14: 10:25
        return;                          // scope 0 at ui/union/union-const-eval.rs:10:1: 10:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/union/union-const-eval.rs:12:11: 12:11
    let _1: [u8; 10];                    // in scope 0 at ui/union/union-const-eval.rs:13:9: 13:10
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/union/union-const-eval.rs:13:9: 13:10
        let _2: [u8; 10];                // in scope 1 at ui/union/union-const-eval.rs:14:9: 14:10
        scope 2 {
            debug b => _2;               // in scope 2 at ui/union/union-const-eval.rs:14:9: 14:10
        }
    }

    bb0: {
        return;                          // scope 0 at ui/union/union-const-eval.rs:15:2: 15:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/union/union-const-eval.rs:13:17: 13:31
    let mut _1: U;                       // in scope 0 at ui/union/union-const-eval.rs:13:26: 13:27
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/union/union-const-eval.rs:13:26: 13:27
        _1 = const _;                    // scope 1 at ui/union/union-const-eval.rs:13:26: 13:27
                                         // mir::Constant
                                         // + span: ui/union/union-const-eval.rs:13:26: 13:27
                                         // + literal: Const { ty: U, val: Unevaluated(C, [], None) }
        _0 = (_1.0: usize);              // scope 1 at ui/union/union-const-eval.rs:13:26: 13:29
        StorageDead(_1);                 // scope 0 at ui/union/union-const-eval.rs:13:30: 13:31
        return;                          // scope 0 at ui/union/union-const-eval.rs:13:17: 13:31
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/union/union-const-eval.rs:14:17: 14:31
    let mut _1: U;                       // in scope 0 at ui/union/union-const-eval.rs:14:26: 14:27
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/union/union-const-eval.rs:14:26: 14:27
        _1 = const _;                    // scope 1 at ui/union/union-const-eval.rs:14:26: 14:27
                                         // mir::Constant
                                         // + span: ui/union/union-const-eval.rs:14:26: 14:27
                                         // + literal: Const { ty: U, val: Unevaluated(C, [], None) }
        _0 = (_1.1: usize);              // scope 1 at ui/union/union-const-eval.rs:14:26: 14:29
        StorageDead(_1);                 // scope 0 at ui/union/union-const-eval.rs:14:30: 14:31
        return;                          // scope 0 at ui/union/union-const-eval.rs:14:17: 14:31
    }
}
