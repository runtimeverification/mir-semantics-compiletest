// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const FLOAT1_AS_I32: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 1065353216_i32;
        return;
    }
}

const UNION: DummyUnion = {
    let mut _0: DummyUnion;
    let mut _1: (i32, u32);

    bb0: {
        StorageLive(_1);
        _1 = (const _, const 0_u32);
        _0 = DummyUnion { field1: move _1 };
        StorageDead(_1);
        return;
    }
}

fn read_field1() -> (i32, u32) {
    let mut _0: (i32, u32);

    bb0: {
        _0 = const _;
        return;
    }
}

// MIR FOR CTFE
fn read_field1() -> (i32, u32) {
    let mut _0: (i32, u32);

    bb0: {
        _0 = const _;
        return;
    }
}

const FIELD1: (i32, u32) = {
    let mut _0: (i32, u32);
    let mut _1: DummyUnion;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = (_1.0: (i32, u32));
        StorageDead(_1);
        return;
    }
}

fn read_field2() -> f32 {
    let mut _0: f32;

    bb0: {
        _0 = const _;
        return;
    }
}

// MIR FOR CTFE
fn read_field2() -> f32 {
    let mut _0: f32;

    bb0: {
        _0 = const _;
        return;
    }
}

const FIELD2: f32 = {
    let mut _0: f32;
    let mut _1: DummyUnion;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = (_1.1: f32);
        StorageDead(_1);
        return;
    }
}

fn read_field3() -> i64 {
    let mut _0: i64;

    bb0: {
        _0 = const _;
        return;
    }
}

// MIR FOR CTFE
fn read_field3() -> i64 {
    let mut _0: i64;

    bb0: {
        _0 = const _;
        return;
    }
}

const FIELD3: i64 = {
    let mut _0: i64;
    let mut _1: DummyUnion;
    scope 1 {
    }

    bb0: {
        StorageLive(_1);
        _1 = const _;
        _0 = (_1.2: i64);
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: (i32, u32);
    let mut _5: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&i32, &i32);
    let mut _16: &i32;
    let _17: (i32, u32);
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: i32;
    let mut _23: i32;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&f32, &f32);
    let mut _29: &f32;
    let _30: f32;
    let mut _31: &f32;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: f32;
    let mut _37: f32;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&f32, &f32);
    let mut _42: &f32;
    let _43: f32;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: f32;
    let mut _49: f32;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&i64, &i64);
    let mut _54: &i64;
    let _55: i64;
    let mut _56: &i64;
    let _57: i64;
    let mut _58: DummyUnion;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: i64;
    let mut _64: i64;
    let _66: !;
    let mut _67: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _69: DummyUnion;
    let mut _70: (&i64, &i64);
    let mut _71: &i64;
    let _72: i64;
    let mut _73: &i64;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: i64;
    let mut _79: i64;
    let _81: !;
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo => const _;
        let _6: &i32;
        let _7: &i32;
        let _18: &i32;
        let _19: &i32;
        let _27: f32;
        let mut _84: &i32;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug left_val => _18;
            debug right_val => _19;
            let _24: core::panicking::AssertKind;
            scope 5 {
                debug kind => _24;
            }
        }
        scope 6 {
            debug foo => const 1f32;
            let _32: &f32;
            let _33: &f32;
            let _44: &f32;
            let _45: &f32;
            let _59: &i64;
            let _60: &i64;
            let _68: i64;
            let mut _83: &f32;
            scope 7 {
                debug left_val => _32;
                debug right_val => _33;
                let _38: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _38;
                }
            }
            scope 9 {
                debug left_val => _44;
                debug right_val => _45;
                let _50: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _50;
                }
            }
            scope 11 {
            }
            scope 12 {
                debug left_val => _59;
                debug right_val => _60;
                let _65: core::panicking::AssertKind;
                scope 13 {
                    debug kind => _65;
                }
            }
            scope 14 {
                debug foo => _68;
                let _74: &i64;
                let _75: &i64;
                scope 16 {
                    debug left_val => _74;
                    debug right_val => _75;
                    let _80: core::panicking::AssertKind;
                    scope 17 {
                        debug kind => _80;
                    }
                }
            }
            scope 15 {
            }
        }
    }

    bb0: {
        _1 = const _;
        _4 = read_field1() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &(_4.0: i32);
        _5 = &_1;
        _2 = (move _3, move _5);
        _6 = (_2.0: &i32);
        _7 = (_2.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _17 = read_field1() -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = &(_17.0: i32);
        _84 = const _;
        _15 = (move _16, _84);
        _18 = (_15.0: &i32);
        _19 = (_15.1: &i32);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<i32, i32>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb6: {
        _27 = const 1f32;
        _30 = read_field2() -> [return: bb7, unwind continue];
    }

    bb7: {
        _29 = &_30;
        _31 = &_27;
        _28 = (move _29, move _31);
        _32 = (_28.0: &f32);
        _33 = (_28.1: &f32);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<f32, f32>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb9: {
        _43 = read_field2() -> [return: bb10, unwind continue];
    }

    bb10: {
        _42 = &_43;
        _83 = const _;
        _41 = (move _42, _83);
        _44 = (_41.0: &f32);
        _45 = (_41.1: &f32);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<f32, f32>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb12: {
        _55 = read_field3() -> [return: bb13, unwind continue];
    }

    bb13: {
        _54 = &_55;
        _58 = const _;
        _57 = (_58.2: i64);
        _56 = &_57;
        _53 = (move _54, move _56);
        _59 = (_53.0: &i64);
        _60 = (_53.1: &i64);
        _63 = (*_59);
        _64 = (*_60);
        _62 = Eq(move _63, move _64);
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _65 = core::panicking::AssertKind::Eq;
        _67 = Option::<Arguments<'_>>::None;
        _66 = core::panicking::assert_failed::<i64, i64>(move _65, _59, _60, move _67) -> unwind continue;
    }

    bb15: {
        _69 = const _;
        _68 = (_69.2: i64);
        _72 = read_field3() -> [return: bb16, unwind continue];
    }

    bb16: {
        _71 = &_72;
        _73 = &_68;
        _70 = (move _71, move _73);
        _74 = (_70.0: &i64);
        _75 = (_70.1: &i64);
        _78 = (*_74);
        _79 = (*_75);
        _77 = Eq(move _78, move _79);
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _80 = core::panicking::AssertKind::Eq;
        _82 = Option::<Arguments<'_>>::None;
        _81 = core::panicking::assert_failed::<i64, i64>(move _80, _74, _75, move _82) -> unwind continue;
    }

    bb18: {
        return;
    }
}

promoted[0] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 1f32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
