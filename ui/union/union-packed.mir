// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
S::b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

Sp1::b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

Sp2::b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

U::b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

Up1::b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

Up2::b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

Up4c::b::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

const CS: S = {
    let mut _0: S;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8, const 0_u8, const 0_u8];
        _0 = S { a: const 0_u16, b: move _1 };
        StorageDead(_1);
        return;
    }
}

const CSP1: Sp1 = {
    let mut _0: Sp1;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8, const 0_u8, const 0_u8];
        _0 = Sp1 { a: const 0_u16, b: move _1 };
        StorageDead(_1);
        return;
    }
}

const CSP2: Sp2 = {
    let mut _0: Sp2;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8, const 0_u8, const 0_u8];
        _0 = Sp2 { a: const 0_u16, b: move _1 };
        StorageDead(_1);
        return;
    }
}

const CU: U = {
    let mut _0: U;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8, const 0_u8, const 0_u8];
        _0 = U { a: move _1 };
        StorageDead(_1);
        return;
    }
}

const CUP1: Up1 = {
    let mut _0: Up1;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8, const 0_u8, const 0_u8];
        _0 = Up1 { a: move _1 };
        StorageDead(_1);
        return;
    }
}

const CUP2: Up2 = {
    let mut _0: Up2;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8, const 0_u8, const 0_u8];
        _0 = Up2 { a: move _1 };
        StorageDead(_1);
        return;
    }
}

const CUP4C: Up4c = {
    let mut _0: Up4c;
    let mut _1: [u8; 3];

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u8, const 0_u8, const 0_u8];
        _0 = Up4c { a: move _1 };
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: S;
    let mut _2: [u8; 3];
    let mut _3: (&usize, &usize);
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: usize;
    let mut _9: usize;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&usize, &usize);
    let mut _14: &usize;
    let _15: usize;
    let _16: &S;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: usize;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: (&usize, &usize);
    let mut _27: &usize;
    let _28: usize;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: usize;
    let mut _34: usize;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: (&usize, &usize);
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: usize;
    let mut _44: usize;
    let _46: !;
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _48: (&usize, &usize);
    let mut _49: &usize;
    let _50: usize;
    let _51: &S;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: usize;
    let mut _57: usize;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&usize, &usize);
    let mut _62: &usize;
    let _63: usize;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: usize;
    let mut _69: usize;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _74: [u8; 3];
    let mut _75: (&usize, &usize);
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: usize;
    let mut _81: usize;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&usize, &usize);
    let mut _86: &usize;
    let _87: usize;
    let _88: &Sp1;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: usize;
    let mut _94: usize;
    let _96: !;
    let mut _97: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _98: (&usize, &usize);
    let mut _99: &usize;
    let _100: usize;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: usize;
    let mut _106: usize;
    let _108: !;
    let mut _109: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _110: (&usize, &usize);
    let mut _113: bool;
    let mut _114: bool;
    let mut _115: usize;
    let mut _116: usize;
    let _118: !;
    let mut _119: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _120: (&usize, &usize);
    let mut _121: &usize;
    let _122: usize;
    let _123: &Sp1;
    let mut _126: bool;
    let mut _127: bool;
    let mut _128: usize;
    let mut _129: usize;
    let _131: !;
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _133: (&usize, &usize);
    let mut _134: &usize;
    let _135: usize;
    let mut _138: bool;
    let mut _139: bool;
    let mut _140: usize;
    let mut _141: usize;
    let _143: !;
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _146: [u8; 3];
    let mut _147: (&usize, &usize);
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: usize;
    let mut _153: usize;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _157: (&usize, &usize);
    let mut _158: &usize;
    let _159: usize;
    let _160: &Sp2;
    let mut _163: bool;
    let mut _164: bool;
    let mut _165: usize;
    let mut _166: usize;
    let _168: !;
    let mut _169: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _170: (&usize, &usize);
    let mut _171: &usize;
    let _172: usize;
    let mut _175: bool;
    let mut _176: bool;
    let mut _177: usize;
    let mut _178: usize;
    let _180: !;
    let mut _181: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _182: (&usize, &usize);
    let mut _185: bool;
    let mut _186: bool;
    let mut _187: usize;
    let mut _188: usize;
    let _190: !;
    let mut _191: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _192: (&usize, &usize);
    let mut _193: &usize;
    let _194: usize;
    let _195: &Sp2;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: usize;
    let mut _201: usize;
    let _203: !;
    let mut _204: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _205: (&usize, &usize);
    let mut _206: &usize;
    let _207: usize;
    let mut _210: bool;
    let mut _211: bool;
    let mut _212: usize;
    let mut _213: usize;
    let _215: !;
    let mut _216: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _218: [u8; 3];
    let mut _219: (&usize, &usize);
    let mut _222: bool;
    let mut _223: bool;
    let mut _224: usize;
    let mut _225: usize;
    let _227: !;
    let mut _228: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _229: (&usize, &usize);
    let mut _230: &usize;
    let _231: usize;
    let _232: &U;
    let mut _235: bool;
    let mut _236: bool;
    let mut _237: usize;
    let mut _238: usize;
    let _240: !;
    let mut _241: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _242: (&usize, &usize);
    let mut _243: &usize;
    let _244: usize;
    let mut _247: bool;
    let mut _248: bool;
    let mut _249: usize;
    let mut _250: usize;
    let _252: !;
    let mut _253: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _254: (&usize, &usize);
    let mut _257: bool;
    let mut _258: bool;
    let mut _259: usize;
    let mut _260: usize;
    let _262: !;
    let mut _263: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _264: (&usize, &usize);
    let mut _265: &usize;
    let _266: usize;
    let _267: &U;
    let mut _270: bool;
    let mut _271: bool;
    let mut _272: usize;
    let mut _273: usize;
    let _275: !;
    let mut _276: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _277: (&usize, &usize);
    let mut _278: &usize;
    let _279: usize;
    let mut _282: bool;
    let mut _283: bool;
    let mut _284: usize;
    let mut _285: usize;
    let _287: !;
    let mut _288: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _290: [u8; 3];
    let mut _291: (&usize, &usize);
    let mut _294: bool;
    let mut _295: bool;
    let mut _296: usize;
    let mut _297: usize;
    let _299: !;
    let mut _300: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _301: (&usize, &usize);
    let mut _302: &usize;
    let _303: usize;
    let _304: &Up1;
    let mut _307: bool;
    let mut _308: bool;
    let mut _309: usize;
    let mut _310: usize;
    let _312: !;
    let mut _313: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _314: (&usize, &usize);
    let mut _315: &usize;
    let _316: usize;
    let mut _319: bool;
    let mut _320: bool;
    let mut _321: usize;
    let mut _322: usize;
    let _324: !;
    let mut _325: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _326: (&usize, &usize);
    let mut _329: bool;
    let mut _330: bool;
    let mut _331: usize;
    let mut _332: usize;
    let _334: !;
    let mut _335: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _336: (&usize, &usize);
    let mut _337: &usize;
    let _338: usize;
    let _339: &Up1;
    let mut _342: bool;
    let mut _343: bool;
    let mut _344: usize;
    let mut _345: usize;
    let _347: !;
    let mut _348: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _349: (&usize, &usize);
    let mut _350: &usize;
    let _351: usize;
    let mut _354: bool;
    let mut _355: bool;
    let mut _356: usize;
    let mut _357: usize;
    let _359: !;
    let mut _360: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _362: [u8; 3];
    let mut _363: (&usize, &usize);
    let mut _366: bool;
    let mut _367: bool;
    let mut _368: usize;
    let mut _369: usize;
    let _371: !;
    let mut _372: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _373: (&usize, &usize);
    let mut _374: &usize;
    let _375: usize;
    let _376: &Up2;
    let mut _379: bool;
    let mut _380: bool;
    let mut _381: usize;
    let mut _382: usize;
    let _384: !;
    let mut _385: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _386: (&usize, &usize);
    let mut _387: &usize;
    let _388: usize;
    let mut _391: bool;
    let mut _392: bool;
    let mut _393: usize;
    let mut _394: usize;
    let _396: !;
    let mut _397: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _398: (&usize, &usize);
    let mut _401: bool;
    let mut _402: bool;
    let mut _403: usize;
    let mut _404: usize;
    let _406: !;
    let mut _407: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _408: (&usize, &usize);
    let mut _409: &usize;
    let _410: usize;
    let _411: &Up2;
    let mut _414: bool;
    let mut _415: bool;
    let mut _416: usize;
    let mut _417: usize;
    let _419: !;
    let mut _420: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _421: (&usize, &usize);
    let mut _422: &usize;
    let _423: usize;
    let mut _426: bool;
    let mut _427: bool;
    let mut _428: usize;
    let mut _429: usize;
    let _431: !;
    let mut _432: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _434: [u8; 3];
    let mut _435: (&usize, &usize);
    let mut _438: bool;
    let mut _439: bool;
    let mut _440: usize;
    let mut _441: usize;
    let _443: !;
    let mut _444: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _445: (&usize, &usize);
    let mut _446: &usize;
    let _447: usize;
    let _448: &Up4c;
    let mut _451: bool;
    let mut _452: bool;
    let mut _453: usize;
    let mut _454: usize;
    let _456: !;
    let mut _457: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _458: (&usize, &usize);
    let mut _459: &usize;
    let _460: usize;
    let mut _463: bool;
    let mut _464: bool;
    let mut _465: usize;
    let mut _466: usize;
    let _468: !;
    let mut _469: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _470: (&usize, &usize);
    let mut _473: bool;
    let mut _474: bool;
    let mut _475: usize;
    let mut _476: usize;
    let _478: !;
    let mut _479: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _480: (&usize, &usize);
    let mut _481: &usize;
    let _482: usize;
    let _483: &Up4c;
    let mut _486: bool;
    let mut _487: bool;
    let mut _488: usize;
    let mut _489: usize;
    let _491: !;
    let mut _492: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _493: (&usize, &usize);
    let mut _494: &usize;
    let _495: usize;
    let mut _498: bool;
    let mut _499: bool;
    let mut _500: usize;
    let mut _501: usize;
    let _503: !;
    let mut _504: std::option::Option<std::fmt::Arguments<'_>>;
    let _505: ();
    scope 1 {
        debug s => _1;
        let _4: &usize;
        let _5: &usize;
        let _17: &usize;
        let _18: &usize;
        let _29: &usize;
        let _30: &usize;
        let _39: &usize;
        let _40: &usize;
        let _52: &usize;
        let _53: &usize;
        let _64: &usize;
        let _65: &usize;
        let _73: Sp1;
        let mut _566: &usize;
        let mut _567: &S;
        let mut _568: &usize;
        let mut _569: &usize;
        let mut _570: &usize;
        let mut _571: &usize;
        let mut _572: &S;
        let mut _573: &usize;
        let mut _574: &usize;
        let mut _575: &usize;
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
        scope 4 {
            debug left_val => _17;
            debug right_val => _18;
            let _23: core::panicking::AssertKind;
            scope 5 {
                debug kind => _23;
            }
        }
        scope 6 {
            debug left_val => _29;
            debug right_val => _30;
            let _35: core::panicking::AssertKind;
            scope 7 {
                debug kind => _35;
            }
        }
        scope 8 {
            debug left_val => _39;
            debug right_val => _40;
            let _45: core::panicking::AssertKind;
            scope 9 {
                debug kind => _45;
            }
        }
        scope 10 {
            debug left_val => _52;
            debug right_val => _53;
            let _58: core::panicking::AssertKind;
            scope 11 {
                debug kind => _58;
            }
        }
        scope 12 {
            debug left_val => _64;
            debug right_val => _65;
            let _70: core::panicking::AssertKind;
            scope 13 {
                debug kind => _70;
            }
        }
        scope 14 {
            debug sp1 => _73;
            let _76: &usize;
            let _77: &usize;
            let _89: &usize;
            let _90: &usize;
            let _101: &usize;
            let _102: &usize;
            let _111: &usize;
            let _112: &usize;
            let _124: &usize;
            let _125: &usize;
            let _136: &usize;
            let _137: &usize;
            let _145: Sp2;
            let mut _556: &usize;
            let mut _557: &Sp1;
            let mut _558: &usize;
            let mut _559: &usize;
            let mut _560: &usize;
            let mut _561: &usize;
            let mut _562: &Sp1;
            let mut _563: &usize;
            let mut _564: &usize;
            let mut _565: &usize;
            scope 15 {
                debug left_val => _76;
                debug right_val => _77;
                let _82: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _82;
                }
            }
            scope 17 {
                debug left_val => _89;
                debug right_val => _90;
                let _95: core::panicking::AssertKind;
                scope 18 {
                    debug kind => _95;
                }
            }
            scope 19 {
                debug left_val => _101;
                debug right_val => _102;
                let _107: core::panicking::AssertKind;
                scope 20 {
                    debug kind => _107;
                }
            }
            scope 21 {
                debug left_val => _111;
                debug right_val => _112;
                let _117: core::panicking::AssertKind;
                scope 22 {
                    debug kind => _117;
                }
            }
            scope 23 {
                debug left_val => _124;
                debug right_val => _125;
                let _130: core::panicking::AssertKind;
                scope 24 {
                    debug kind => _130;
                }
            }
            scope 25 {
                debug left_val => _136;
                debug right_val => _137;
                let _142: core::panicking::AssertKind;
                scope 26 {
                    debug kind => _142;
                }
            }
            scope 27 {
                debug sp2 => _145;
                let _148: &usize;
                let _149: &usize;
                let _161: &usize;
                let _162: &usize;
                let _173: &usize;
                let _174: &usize;
                let _183: &usize;
                let _184: &usize;
                let _196: &usize;
                let _197: &usize;
                let _208: &usize;
                let _209: &usize;
                let _217: U;
                let mut _546: &usize;
                let mut _547: &Sp2;
                let mut _548: &usize;
                let mut _549: &usize;
                let mut _550: &usize;
                let mut _551: &usize;
                let mut _552: &Sp2;
                let mut _553: &usize;
                let mut _554: &usize;
                let mut _555: &usize;
                scope 28 {
                    debug left_val => _148;
                    debug right_val => _149;
                    let _154: core::panicking::AssertKind;
                    scope 29 {
                        debug kind => _154;
                    }
                }
                scope 30 {
                    debug left_val => _161;
                    debug right_val => _162;
                    let _167: core::panicking::AssertKind;
                    scope 31 {
                        debug kind => _167;
                    }
                }
                scope 32 {
                    debug left_val => _173;
                    debug right_val => _174;
                    let _179: core::panicking::AssertKind;
                    scope 33 {
                        debug kind => _179;
                    }
                }
                scope 34 {
                    debug left_val => _183;
                    debug right_val => _184;
                    let _189: core::panicking::AssertKind;
                    scope 35 {
                        debug kind => _189;
                    }
                }
                scope 36 {
                    debug left_val => _196;
                    debug right_val => _197;
                    let _202: core::panicking::AssertKind;
                    scope 37 {
                        debug kind => _202;
                    }
                }
                scope 38 {
                    debug left_val => _208;
                    debug right_val => _209;
                    let _214: core::panicking::AssertKind;
                    scope 39 {
                        debug kind => _214;
                    }
                }
                scope 40 {
                    debug u => _217;
                    let _220: &usize;
                    let _221: &usize;
                    let _233: &usize;
                    let _234: &usize;
                    let _245: &usize;
                    let _246: &usize;
                    let _255: &usize;
                    let _256: &usize;
                    let _268: &usize;
                    let _269: &usize;
                    let _280: &usize;
                    let _281: &usize;
                    let _289: Up1;
                    let mut _536: &usize;
                    let mut _537: &U;
                    let mut _538: &usize;
                    let mut _539: &usize;
                    let mut _540: &usize;
                    let mut _541: &usize;
                    let mut _542: &U;
                    let mut _543: &usize;
                    let mut _544: &usize;
                    let mut _545: &usize;
                    scope 41 {
                        debug left_val => _220;
                        debug right_val => _221;
                        let _226: core::panicking::AssertKind;
                        scope 42 {
                            debug kind => _226;
                        }
                    }
                    scope 43 {
                        debug left_val => _233;
                        debug right_val => _234;
                        let _239: core::panicking::AssertKind;
                        scope 44 {
                            debug kind => _239;
                        }
                    }
                    scope 45 {
                        debug left_val => _245;
                        debug right_val => _246;
                        let _251: core::panicking::AssertKind;
                        scope 46 {
                            debug kind => _251;
                        }
                    }
                    scope 47 {
                        debug left_val => _255;
                        debug right_val => _256;
                        let _261: core::panicking::AssertKind;
                        scope 48 {
                            debug kind => _261;
                        }
                    }
                    scope 49 {
                        debug left_val => _268;
                        debug right_val => _269;
                        let _274: core::panicking::AssertKind;
                        scope 50 {
                            debug kind => _274;
                        }
                    }
                    scope 51 {
                        debug left_val => _280;
                        debug right_val => _281;
                        let _286: core::panicking::AssertKind;
                        scope 52 {
                            debug kind => _286;
                        }
                    }
                    scope 53 {
                        debug Up1 => _289;
                        let _292: &usize;
                        let _293: &usize;
                        let _305: &usize;
                        let _306: &usize;
                        let _317: &usize;
                        let _318: &usize;
                        let _327: &usize;
                        let _328: &usize;
                        let _340: &usize;
                        let _341: &usize;
                        let _352: &usize;
                        let _353: &usize;
                        let _361: Up2;
                        let mut _526: &usize;
                        let mut _527: &Up1;
                        let mut _528: &usize;
                        let mut _529: &usize;
                        let mut _530: &usize;
                        let mut _531: &usize;
                        let mut _532: &Up1;
                        let mut _533: &usize;
                        let mut _534: &usize;
                        let mut _535: &usize;
                        scope 54 {
                            debug left_val => _292;
                            debug right_val => _293;
                            let _298: core::panicking::AssertKind;
                            scope 55 {
                                debug kind => _298;
                            }
                        }
                        scope 56 {
                            debug left_val => _305;
                            debug right_val => _306;
                            let _311: core::panicking::AssertKind;
                            scope 57 {
                                debug kind => _311;
                            }
                        }
                        scope 58 {
                            debug left_val => _317;
                            debug right_val => _318;
                            let _323: core::panicking::AssertKind;
                            scope 59 {
                                debug kind => _323;
                            }
                        }
                        scope 60 {
                            debug left_val => _327;
                            debug right_val => _328;
                            let _333: core::panicking::AssertKind;
                            scope 61 {
                                debug kind => _333;
                            }
                        }
                        scope 62 {
                            debug left_val => _340;
                            debug right_val => _341;
                            let _346: core::panicking::AssertKind;
                            scope 63 {
                                debug kind => _346;
                            }
                        }
                        scope 64 {
                            debug left_val => _352;
                            debug right_val => _353;
                            let _358: core::panicking::AssertKind;
                            scope 65 {
                                debug kind => _358;
                            }
                        }
                        scope 66 {
                            debug up2 => _361;
                            let _364: &usize;
                            let _365: &usize;
                            let _377: &usize;
                            let _378: &usize;
                            let _389: &usize;
                            let _390: &usize;
                            let _399: &usize;
                            let _400: &usize;
                            let _412: &usize;
                            let _413: &usize;
                            let _424: &usize;
                            let _425: &usize;
                            let _433: Up4c;
                            let mut _516: &usize;
                            let mut _517: &Up2;
                            let mut _518: &usize;
                            let mut _519: &usize;
                            let mut _520: &usize;
                            let mut _521: &usize;
                            let mut _522: &Up2;
                            let mut _523: &usize;
                            let mut _524: &usize;
                            let mut _525: &usize;
                            scope 67 {
                                debug left_val => _364;
                                debug right_val => _365;
                                let _370: core::panicking::AssertKind;
                                scope 68 {
                                    debug kind => _370;
                                }
                            }
                            scope 69 {
                                debug left_val => _377;
                                debug right_val => _378;
                                let _383: core::panicking::AssertKind;
                                scope 70 {
                                    debug kind => _383;
                                }
                            }
                            scope 71 {
                                debug left_val => _389;
                                debug right_val => _390;
                                let _395: core::panicking::AssertKind;
                                scope 72 {
                                    debug kind => _395;
                                }
                            }
                            scope 73 {
                                debug left_val => _399;
                                debug right_val => _400;
                                let _405: core::panicking::AssertKind;
                                scope 74 {
                                    debug kind => _405;
                                }
                            }
                            scope 75 {
                                debug left_val => _412;
                                debug right_val => _413;
                                let _418: core::panicking::AssertKind;
                                scope 76 {
                                    debug kind => _418;
                                }
                            }
                            scope 77 {
                                debug left_val => _424;
                                debug right_val => _425;
                                let _430: core::panicking::AssertKind;
                                scope 78 {
                                    debug kind => _430;
                                }
                            }
                            scope 79 {
                                debug up4c => _433;
                                let _436: &usize;
                                let _437: &usize;
                                let _449: &usize;
                                let _450: &usize;
                                let _461: &usize;
                                let _462: &usize;
                                let _471: &usize;
                                let _472: &usize;
                                let _484: &usize;
                                let _485: &usize;
                                let _496: &usize;
                                let _497: &usize;
                                let mut _506: &usize;
                                let mut _507: &Up4c;
                                let mut _508: &usize;
                                let mut _509: &usize;
                                let mut _510: &usize;
                                let mut _511: &usize;
                                let mut _512: &Up4c;
                                let mut _513: &usize;
                                let mut _514: &usize;
                                let mut _515: &usize;
                                scope 80 {
                                    debug left_val => _436;
                                    debug right_val => _437;
                                    let _442: core::panicking::AssertKind;
                                    scope 81 {
                                        debug kind => _442;
                                    }
                                }
                                scope 82 {
                                    debug left_val => _449;
                                    debug right_val => _450;
                                    let _455: core::panicking::AssertKind;
                                    scope 83 {
                                        debug kind => _455;
                                    }
                                }
                                scope 84 {
                                    debug left_val => _461;
                                    debug right_val => _462;
                                    let _467: core::panicking::AssertKind;
                                    scope 85 {
                                        debug kind => _467;
                                    }
                                }
                                scope 86 {
                                    debug left_val => _471;
                                    debug right_val => _472;
                                    let _477: core::panicking::AssertKind;
                                    scope 87 {
                                        debug kind => _477;
                                    }
                                }
                                scope 88 {
                                    debug left_val => _484;
                                    debug right_val => _485;
                                    let _490: core::panicking::AssertKind;
                                    scope 89 {
                                        debug kind => _490;
                                    }
                                }
                                scope 90 {
                                    debug left_val => _496;
                                    debug right_val => _497;
                                    let _502: core::panicking::AssertKind;
                                    scope 91 {
                                        debug kind => _502;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [const 0_u8, const 0_u8, const 0_u8];
        _1 = S { a: const 0_u16, b: move _2 };
        _575 = const _;
        _574 = const _;
        _3 = (_575, _574);
        _4 = (_3.0: &usize);
        _5 = (_3.1: &usize);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<usize, usize>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb2: {
        _16 = &_1;
        _15 = std::mem::size_of_val::<S>(_16) -> [return: bb3, unwind continue];
    }

    bb3: {
        _14 = &_15;
        _573 = const _;
        _13 = (move _14, _573);
        _17 = (_13.0: &usize);
        _18 = (_13.1: &usize);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<usize, usize>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb5: {
        _572 = const _;
        _28 = std::mem::size_of_val::<S>(_572) -> [return: bb6, unwind continue];
    }

    bb6: {
        _27 = &_28;
        _571 = const _;
        _26 = (move _27, _571);
        _29 = (_26.0: &usize);
        _30 = (_26.1: &usize);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<usize, usize>(move _35, _29, _30, move _37) -> unwind continue;
    }

    bb8: {
        _570 = const _;
        _569 = const _;
        _38 = (_570, _569);
        _39 = (_38.0: &usize);
        _40 = (_38.1: &usize);
        _43 = (*_39);
        _44 = (*_40);
        _42 = Eq(move _43, move _44);
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _45 = core::panicking::AssertKind::Eq;
        _47 = Option::<Arguments<'_>>::None;
        _46 = core::panicking::assert_failed::<usize, usize>(move _45, _39, _40, move _47) -> unwind continue;
    }

    bb10: {
        _51 = &_1;
        _50 = align_of_val::<S>(_51) -> [return: bb11, unwind continue];
    }

    bb11: {
        _49 = &_50;
        _568 = const _;
        _48 = (move _49, _568);
        _52 = (_48.0: &usize);
        _53 = (_48.1: &usize);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<usize, usize>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb13: {
        _567 = const _;
        _63 = align_of_val::<S>(_567) -> [return: bb14, unwind continue];
    }

    bb14: {
        _62 = &_63;
        _566 = const _;
        _61 = (move _62, _566);
        _64 = (_61.0: &usize);
        _65 = (_61.1: &usize);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<usize, usize>(move _70, _64, _65, move _72) -> unwind continue;
    }

    bb16: {
        _74 = [const 0_u8, const 0_u8, const 0_u8];
        _73 = Sp1 { a: const 0_u16, b: move _74 };
        _565 = const _;
        _564 = const _;
        _75 = (_565, _564);
        _76 = (_75.0: &usize);
        _77 = (_75.1: &usize);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<usize, usize>(move _82, _76, _77, move _84) -> unwind continue;
    }

    bb18: {
        _88 = &_73;
        _87 = std::mem::size_of_val::<Sp1>(_88) -> [return: bb19, unwind continue];
    }

    bb19: {
        _86 = &_87;
        _563 = const _;
        _85 = (move _86, _563);
        _89 = (_85.0: &usize);
        _90 = (_85.1: &usize);
        _93 = (*_89);
        _94 = (*_90);
        _92 = Eq(move _93, move _94);
        _91 = Not(move _92);
        switchInt(move _91) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _95 = core::panicking::AssertKind::Eq;
        _97 = Option::<Arguments<'_>>::None;
        _96 = core::panicking::assert_failed::<usize, usize>(move _95, _89, _90, move _97) -> unwind continue;
    }

    bb21: {
        _562 = const _;
        _100 = std::mem::size_of_val::<Sp1>(_562) -> [return: bb22, unwind continue];
    }

    bb22: {
        _99 = &_100;
        _561 = const _;
        _98 = (move _99, _561);
        _101 = (_98.0: &usize);
        _102 = (_98.1: &usize);
        _105 = (*_101);
        _106 = (*_102);
        _104 = Eq(move _105, move _106);
        _103 = Not(move _104);
        switchInt(move _103) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _107 = core::panicking::AssertKind::Eq;
        _109 = Option::<Arguments<'_>>::None;
        _108 = core::panicking::assert_failed::<usize, usize>(move _107, _101, _102, move _109) -> unwind continue;
    }

    bb24: {
        _560 = const _;
        _559 = const _;
        _110 = (_560, _559);
        _111 = (_110.0: &usize);
        _112 = (_110.1: &usize);
        _115 = (*_111);
        _116 = (*_112);
        _114 = Eq(move _115, move _116);
        _113 = Not(move _114);
        switchInt(move _113) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _117 = core::panicking::AssertKind::Eq;
        _119 = Option::<Arguments<'_>>::None;
        _118 = core::panicking::assert_failed::<usize, usize>(move _117, _111, _112, move _119) -> unwind continue;
    }

    bb26: {
        _123 = &_73;
        _122 = align_of_val::<Sp1>(_123) -> [return: bb27, unwind continue];
    }

    bb27: {
        _121 = &_122;
        _558 = const _;
        _120 = (move _121, _558);
        _124 = (_120.0: &usize);
        _125 = (_120.1: &usize);
        _128 = (*_124);
        _129 = (*_125);
        _127 = Eq(move _128, move _129);
        _126 = Not(move _127);
        switchInt(move _126) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _130 = core::panicking::AssertKind::Eq;
        _132 = Option::<Arguments<'_>>::None;
        _131 = core::panicking::assert_failed::<usize, usize>(move _130, _124, _125, move _132) -> unwind continue;
    }

    bb29: {
        _557 = const _;
        _135 = align_of_val::<Sp1>(_557) -> [return: bb30, unwind continue];
    }

    bb30: {
        _134 = &_135;
        _556 = const _;
        _133 = (move _134, _556);
        _136 = (_133.0: &usize);
        _137 = (_133.1: &usize);
        _140 = (*_136);
        _141 = (*_137);
        _139 = Eq(move _140, move _141);
        _138 = Not(move _139);
        switchInt(move _138) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _142 = core::panicking::AssertKind::Eq;
        _144 = Option::<Arguments<'_>>::None;
        _143 = core::panicking::assert_failed::<usize, usize>(move _142, _136, _137, move _144) -> unwind continue;
    }

    bb32: {
        _146 = [const 0_u8, const 0_u8, const 0_u8];
        _145 = Sp2 { a: const 0_u16, b: move _146 };
        _555 = const _;
        _554 = const _;
        _147 = (_555, _554);
        _148 = (_147.0: &usize);
        _149 = (_147.1: &usize);
        _152 = (*_148);
        _153 = (*_149);
        _151 = Eq(move _152, move _153);
        _150 = Not(move _151);
        switchInt(move _150) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = core::panicking::assert_failed::<usize, usize>(move _154, _148, _149, move _156) -> unwind continue;
    }

    bb34: {
        _160 = &_145;
        _159 = std::mem::size_of_val::<Sp2>(_160) -> [return: bb35, unwind continue];
    }

    bb35: {
        _158 = &_159;
        _553 = const _;
        _157 = (move _158, _553);
        _161 = (_157.0: &usize);
        _162 = (_157.1: &usize);
        _165 = (*_161);
        _166 = (*_162);
        _164 = Eq(move _165, move _166);
        _163 = Not(move _164);
        switchInt(move _163) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _167 = core::panicking::AssertKind::Eq;
        _169 = Option::<Arguments<'_>>::None;
        _168 = core::panicking::assert_failed::<usize, usize>(move _167, _161, _162, move _169) -> unwind continue;
    }

    bb37: {
        _552 = const _;
        _172 = std::mem::size_of_val::<Sp2>(_552) -> [return: bb38, unwind continue];
    }

    bb38: {
        _171 = &_172;
        _551 = const _;
        _170 = (move _171, _551);
        _173 = (_170.0: &usize);
        _174 = (_170.1: &usize);
        _177 = (*_173);
        _178 = (*_174);
        _176 = Eq(move _177, move _178);
        _175 = Not(move _176);
        switchInt(move _175) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _179 = core::panicking::AssertKind::Eq;
        _181 = Option::<Arguments<'_>>::None;
        _180 = core::panicking::assert_failed::<usize, usize>(move _179, _173, _174, move _181) -> unwind continue;
    }

    bb40: {
        _550 = const _;
        _549 = const _;
        _182 = (_550, _549);
        _183 = (_182.0: &usize);
        _184 = (_182.1: &usize);
        _187 = (*_183);
        _188 = (*_184);
        _186 = Eq(move _187, move _188);
        _185 = Not(move _186);
        switchInt(move _185) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _189 = core::panicking::AssertKind::Eq;
        _191 = Option::<Arguments<'_>>::None;
        _190 = core::panicking::assert_failed::<usize, usize>(move _189, _183, _184, move _191) -> unwind continue;
    }

    bb42: {
        _195 = &_145;
        _194 = align_of_val::<Sp2>(_195) -> [return: bb43, unwind continue];
    }

    bb43: {
        _193 = &_194;
        _548 = const _;
        _192 = (move _193, _548);
        _196 = (_192.0: &usize);
        _197 = (_192.1: &usize);
        _200 = (*_196);
        _201 = (*_197);
        _199 = Eq(move _200, move _201);
        _198 = Not(move _199);
        switchInt(move _198) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _202 = core::panicking::AssertKind::Eq;
        _204 = Option::<Arguments<'_>>::None;
        _203 = core::panicking::assert_failed::<usize, usize>(move _202, _196, _197, move _204) -> unwind continue;
    }

    bb45: {
        _547 = const _;
        _207 = align_of_val::<Sp2>(_547) -> [return: bb46, unwind continue];
    }

    bb46: {
        _206 = &_207;
        _546 = const _;
        _205 = (move _206, _546);
        _208 = (_205.0: &usize);
        _209 = (_205.1: &usize);
        _212 = (*_208);
        _213 = (*_209);
        _211 = Eq(move _212, move _213);
        _210 = Not(move _211);
        switchInt(move _210) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _214 = core::panicking::AssertKind::Eq;
        _216 = Option::<Arguments<'_>>::None;
        _215 = core::panicking::assert_failed::<usize, usize>(move _214, _208, _209, move _216) -> unwind continue;
    }

    bb48: {
        _218 = [const 0_u8, const 0_u8, const 0_u8];
        _217 = U { a: move _218 };
        _545 = const _;
        _544 = const _;
        _219 = (_545, _544);
        _220 = (_219.0: &usize);
        _221 = (_219.1: &usize);
        _224 = (*_220);
        _225 = (*_221);
        _223 = Eq(move _224, move _225);
        _222 = Not(move _223);
        switchInt(move _222) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _226 = core::panicking::AssertKind::Eq;
        _228 = Option::<Arguments<'_>>::None;
        _227 = core::panicking::assert_failed::<usize, usize>(move _226, _220, _221, move _228) -> unwind continue;
    }

    bb50: {
        _232 = &_217;
        _231 = std::mem::size_of_val::<U>(_232) -> [return: bb51, unwind continue];
    }

    bb51: {
        _230 = &_231;
        _543 = const _;
        _229 = (move _230, _543);
        _233 = (_229.0: &usize);
        _234 = (_229.1: &usize);
        _237 = (*_233);
        _238 = (*_234);
        _236 = Eq(move _237, move _238);
        _235 = Not(move _236);
        switchInt(move _235) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        _239 = core::panicking::AssertKind::Eq;
        _241 = Option::<Arguments<'_>>::None;
        _240 = core::panicking::assert_failed::<usize, usize>(move _239, _233, _234, move _241) -> unwind continue;
    }

    bb53: {
        _542 = const _;
        _244 = std::mem::size_of_val::<U>(_542) -> [return: bb54, unwind continue];
    }

    bb54: {
        _243 = &_244;
        _541 = const _;
        _242 = (move _243, _541);
        _245 = (_242.0: &usize);
        _246 = (_242.1: &usize);
        _249 = (*_245);
        _250 = (*_246);
        _248 = Eq(move _249, move _250);
        _247 = Not(move _248);
        switchInt(move _247) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _251 = core::panicking::AssertKind::Eq;
        _253 = Option::<Arguments<'_>>::None;
        _252 = core::panicking::assert_failed::<usize, usize>(move _251, _245, _246, move _253) -> unwind continue;
    }

    bb56: {
        _540 = const _;
        _539 = const _;
        _254 = (_540, _539);
        _255 = (_254.0: &usize);
        _256 = (_254.1: &usize);
        _259 = (*_255);
        _260 = (*_256);
        _258 = Eq(move _259, move _260);
        _257 = Not(move _258);
        switchInt(move _257) -> [0: bb58, otherwise: bb57];
    }

    bb57: {
        _261 = core::panicking::AssertKind::Eq;
        _263 = Option::<Arguments<'_>>::None;
        _262 = core::panicking::assert_failed::<usize, usize>(move _261, _255, _256, move _263) -> unwind continue;
    }

    bb58: {
        _267 = &_217;
        _266 = align_of_val::<U>(_267) -> [return: bb59, unwind continue];
    }

    bb59: {
        _265 = &_266;
        _538 = const _;
        _264 = (move _265, _538);
        _268 = (_264.0: &usize);
        _269 = (_264.1: &usize);
        _272 = (*_268);
        _273 = (*_269);
        _271 = Eq(move _272, move _273);
        _270 = Not(move _271);
        switchInt(move _270) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        _274 = core::panicking::AssertKind::Eq;
        _276 = Option::<Arguments<'_>>::None;
        _275 = core::panicking::assert_failed::<usize, usize>(move _274, _268, _269, move _276) -> unwind continue;
    }

    bb61: {
        _537 = const _;
        _279 = align_of_val::<U>(_537) -> [return: bb62, unwind continue];
    }

    bb62: {
        _278 = &_279;
        _536 = const _;
        _277 = (move _278, _536);
        _280 = (_277.0: &usize);
        _281 = (_277.1: &usize);
        _284 = (*_280);
        _285 = (*_281);
        _283 = Eq(move _284, move _285);
        _282 = Not(move _283);
        switchInt(move _282) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _286 = core::panicking::AssertKind::Eq;
        _288 = Option::<Arguments<'_>>::None;
        _287 = core::panicking::assert_failed::<usize, usize>(move _286, _280, _281, move _288) -> unwind continue;
    }

    bb64: {
        _290 = [const 0_u8, const 0_u8, const 0_u8];
        _289 = Up1 { a: move _290 };
        _535 = const _;
        _534 = const _;
        _291 = (_535, _534);
        _292 = (_291.0: &usize);
        _293 = (_291.1: &usize);
        _296 = (*_292);
        _297 = (*_293);
        _295 = Eq(move _296, move _297);
        _294 = Not(move _295);
        switchInt(move _294) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _298 = core::panicking::AssertKind::Eq;
        _300 = Option::<Arguments<'_>>::None;
        _299 = core::panicking::assert_failed::<usize, usize>(move _298, _292, _293, move _300) -> unwind continue;
    }

    bb66: {
        _304 = &_289;
        _303 = std::mem::size_of_val::<Up1>(_304) -> [return: bb67, unwind continue];
    }

    bb67: {
        _302 = &_303;
        _533 = const _;
        _301 = (move _302, _533);
        _305 = (_301.0: &usize);
        _306 = (_301.1: &usize);
        _309 = (*_305);
        _310 = (*_306);
        _308 = Eq(move _309, move _310);
        _307 = Not(move _308);
        switchInt(move _307) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _311 = core::panicking::AssertKind::Eq;
        _313 = Option::<Arguments<'_>>::None;
        _312 = core::panicking::assert_failed::<usize, usize>(move _311, _305, _306, move _313) -> unwind continue;
    }

    bb69: {
        _532 = const _;
        _316 = std::mem::size_of_val::<Up1>(_532) -> [return: bb70, unwind continue];
    }

    bb70: {
        _315 = &_316;
        _531 = const _;
        _314 = (move _315, _531);
        _317 = (_314.0: &usize);
        _318 = (_314.1: &usize);
        _321 = (*_317);
        _322 = (*_318);
        _320 = Eq(move _321, move _322);
        _319 = Not(move _320);
        switchInt(move _319) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _323 = core::panicking::AssertKind::Eq;
        _325 = Option::<Arguments<'_>>::None;
        _324 = core::panicking::assert_failed::<usize, usize>(move _323, _317, _318, move _325) -> unwind continue;
    }

    bb72: {
        _530 = const _;
        _529 = const _;
        _326 = (_530, _529);
        _327 = (_326.0: &usize);
        _328 = (_326.1: &usize);
        _331 = (*_327);
        _332 = (*_328);
        _330 = Eq(move _331, move _332);
        _329 = Not(move _330);
        switchInt(move _329) -> [0: bb74, otherwise: bb73];
    }

    bb73: {
        _333 = core::panicking::AssertKind::Eq;
        _335 = Option::<Arguments<'_>>::None;
        _334 = core::panicking::assert_failed::<usize, usize>(move _333, _327, _328, move _335) -> unwind continue;
    }

    bb74: {
        _339 = &_289;
        _338 = align_of_val::<Up1>(_339) -> [return: bb75, unwind continue];
    }

    bb75: {
        _337 = &_338;
        _528 = const _;
        _336 = (move _337, _528);
        _340 = (_336.0: &usize);
        _341 = (_336.1: &usize);
        _344 = (*_340);
        _345 = (*_341);
        _343 = Eq(move _344, move _345);
        _342 = Not(move _343);
        switchInt(move _342) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        _346 = core::panicking::AssertKind::Eq;
        _348 = Option::<Arguments<'_>>::None;
        _347 = core::panicking::assert_failed::<usize, usize>(move _346, _340, _341, move _348) -> unwind continue;
    }

    bb77: {
        _527 = const _;
        _351 = align_of_val::<Up1>(_527) -> [return: bb78, unwind continue];
    }

    bb78: {
        _350 = &_351;
        _526 = const _;
        _349 = (move _350, _526);
        _352 = (_349.0: &usize);
        _353 = (_349.1: &usize);
        _356 = (*_352);
        _357 = (*_353);
        _355 = Eq(move _356, move _357);
        _354 = Not(move _355);
        switchInt(move _354) -> [0: bb80, otherwise: bb79];
    }

    bb79: {
        _358 = core::panicking::AssertKind::Eq;
        _360 = Option::<Arguments<'_>>::None;
        _359 = core::panicking::assert_failed::<usize, usize>(move _358, _352, _353, move _360) -> unwind continue;
    }

    bb80: {
        _362 = [const 0_u8, const 0_u8, const 0_u8];
        _361 = Up2 { a: move _362 };
        _525 = const _;
        _524 = const _;
        _363 = (_525, _524);
        _364 = (_363.0: &usize);
        _365 = (_363.1: &usize);
        _368 = (*_364);
        _369 = (*_365);
        _367 = Eq(move _368, move _369);
        _366 = Not(move _367);
        switchInt(move _366) -> [0: bb82, otherwise: bb81];
    }

    bb81: {
        _370 = core::panicking::AssertKind::Eq;
        _372 = Option::<Arguments<'_>>::None;
        _371 = core::panicking::assert_failed::<usize, usize>(move _370, _364, _365, move _372) -> unwind continue;
    }

    bb82: {
        _376 = &_361;
        _375 = std::mem::size_of_val::<Up2>(_376) -> [return: bb83, unwind continue];
    }

    bb83: {
        _374 = &_375;
        _523 = const _;
        _373 = (move _374, _523);
        _377 = (_373.0: &usize);
        _378 = (_373.1: &usize);
        _381 = (*_377);
        _382 = (*_378);
        _380 = Eq(move _381, move _382);
        _379 = Not(move _380);
        switchInt(move _379) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        _383 = core::panicking::AssertKind::Eq;
        _385 = Option::<Arguments<'_>>::None;
        _384 = core::panicking::assert_failed::<usize, usize>(move _383, _377, _378, move _385) -> unwind continue;
    }

    bb85: {
        _522 = const _;
        _388 = std::mem::size_of_val::<Up2>(_522) -> [return: bb86, unwind continue];
    }

    bb86: {
        _387 = &_388;
        _521 = const _;
        _386 = (move _387, _521);
        _389 = (_386.0: &usize);
        _390 = (_386.1: &usize);
        _393 = (*_389);
        _394 = (*_390);
        _392 = Eq(move _393, move _394);
        _391 = Not(move _392);
        switchInt(move _391) -> [0: bb88, otherwise: bb87];
    }

    bb87: {
        _395 = core::panicking::AssertKind::Eq;
        _397 = Option::<Arguments<'_>>::None;
        _396 = core::panicking::assert_failed::<usize, usize>(move _395, _389, _390, move _397) -> unwind continue;
    }

    bb88: {
        _520 = const _;
        _519 = const _;
        _398 = (_520, _519);
        _399 = (_398.0: &usize);
        _400 = (_398.1: &usize);
        _403 = (*_399);
        _404 = (*_400);
        _402 = Eq(move _403, move _404);
        _401 = Not(move _402);
        switchInt(move _401) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _405 = core::panicking::AssertKind::Eq;
        _407 = Option::<Arguments<'_>>::None;
        _406 = core::panicking::assert_failed::<usize, usize>(move _405, _399, _400, move _407) -> unwind continue;
    }

    bb90: {
        _411 = &_361;
        _410 = align_of_val::<Up2>(_411) -> [return: bb91, unwind continue];
    }

    bb91: {
        _409 = &_410;
        _518 = const _;
        _408 = (move _409, _518);
        _412 = (_408.0: &usize);
        _413 = (_408.1: &usize);
        _416 = (*_412);
        _417 = (*_413);
        _415 = Eq(move _416, move _417);
        _414 = Not(move _415);
        switchInt(move _414) -> [0: bb93, otherwise: bb92];
    }

    bb92: {
        _418 = core::panicking::AssertKind::Eq;
        _420 = Option::<Arguments<'_>>::None;
        _419 = core::panicking::assert_failed::<usize, usize>(move _418, _412, _413, move _420) -> unwind continue;
    }

    bb93: {
        _517 = const _;
        _423 = align_of_val::<Up2>(_517) -> [return: bb94, unwind continue];
    }

    bb94: {
        _422 = &_423;
        _516 = const _;
        _421 = (move _422, _516);
        _424 = (_421.0: &usize);
        _425 = (_421.1: &usize);
        _428 = (*_424);
        _429 = (*_425);
        _427 = Eq(move _428, move _429);
        _426 = Not(move _427);
        switchInt(move _426) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _430 = core::panicking::AssertKind::Eq;
        _432 = Option::<Arguments<'_>>::None;
        _431 = core::panicking::assert_failed::<usize, usize>(move _430, _424, _425, move _432) -> unwind continue;
    }

    bb96: {
        _434 = [const 0_u8, const 0_u8, const 0_u8];
        _433 = Up4c { a: move _434 };
        _515 = const _;
        _514 = const _;
        _435 = (_515, _514);
        _436 = (_435.0: &usize);
        _437 = (_435.1: &usize);
        _440 = (*_436);
        _441 = (*_437);
        _439 = Eq(move _440, move _441);
        _438 = Not(move _439);
        switchInt(move _438) -> [0: bb98, otherwise: bb97];
    }

    bb97: {
        _442 = core::panicking::AssertKind::Eq;
        _444 = Option::<Arguments<'_>>::None;
        _443 = core::panicking::assert_failed::<usize, usize>(move _442, _436, _437, move _444) -> unwind continue;
    }

    bb98: {
        _448 = &_433;
        _447 = std::mem::size_of_val::<Up4c>(_448) -> [return: bb99, unwind continue];
    }

    bb99: {
        _446 = &_447;
        _513 = const _;
        _445 = (move _446, _513);
        _449 = (_445.0: &usize);
        _450 = (_445.1: &usize);
        _453 = (*_449);
        _454 = (*_450);
        _452 = Eq(move _453, move _454);
        _451 = Not(move _452);
        switchInt(move _451) -> [0: bb101, otherwise: bb100];
    }

    bb100: {
        _455 = core::panicking::AssertKind::Eq;
        _457 = Option::<Arguments<'_>>::None;
        _456 = core::panicking::assert_failed::<usize, usize>(move _455, _449, _450, move _457) -> unwind continue;
    }

    bb101: {
        _512 = const _;
        _460 = std::mem::size_of_val::<Up4c>(_512) -> [return: bb102, unwind continue];
    }

    bb102: {
        _459 = &_460;
        _511 = const _;
        _458 = (move _459, _511);
        _461 = (_458.0: &usize);
        _462 = (_458.1: &usize);
        _465 = (*_461);
        _466 = (*_462);
        _464 = Eq(move _465, move _466);
        _463 = Not(move _464);
        switchInt(move _463) -> [0: bb104, otherwise: bb103];
    }

    bb103: {
        _467 = core::panicking::AssertKind::Eq;
        _469 = Option::<Arguments<'_>>::None;
        _468 = core::panicking::assert_failed::<usize, usize>(move _467, _461, _462, move _469) -> unwind continue;
    }

    bb104: {
        _510 = const _;
        _509 = const _;
        _470 = (_510, _509);
        _471 = (_470.0: &usize);
        _472 = (_470.1: &usize);
        _475 = (*_471);
        _476 = (*_472);
        _474 = Eq(move _475, move _476);
        _473 = Not(move _474);
        switchInt(move _473) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        _477 = core::panicking::AssertKind::Eq;
        _479 = Option::<Arguments<'_>>::None;
        _478 = core::panicking::assert_failed::<usize, usize>(move _477, _471, _472, move _479) -> unwind continue;
    }

    bb106: {
        _483 = &_433;
        _482 = align_of_val::<Up4c>(_483) -> [return: bb107, unwind continue];
    }

    bb107: {
        _481 = &_482;
        _508 = const _;
        _480 = (move _481, _508);
        _484 = (_480.0: &usize);
        _485 = (_480.1: &usize);
        _488 = (*_484);
        _489 = (*_485);
        _487 = Eq(move _488, move _489);
        _486 = Not(move _487);
        switchInt(move _486) -> [0: bb109, otherwise: bb108];
    }

    bb108: {
        _490 = core::panicking::AssertKind::Eq;
        _492 = Option::<Arguments<'_>>::None;
        _491 = core::panicking::assert_failed::<usize, usize>(move _490, _484, _485, move _492) -> unwind continue;
    }

    bb109: {
        _507 = const _;
        _495 = align_of_val::<Up4c>(_507) -> [return: bb110, unwind continue];
    }

    bb110: {
        _494 = &_495;
        _506 = const _;
        _493 = (move _494, _506);
        _496 = (_493.0: &usize);
        _497 = (_493.1: &usize);
        _500 = (*_496);
        _501 = (*_497);
        _499 = Eq(move _500, move _501);
        _498 = Not(move _499);
        switchInt(move _498) -> [0: bb112, otherwise: bb111];
    }

    bb111: {
        _502 = core::panicking::AssertKind::Eq;
        _504 = Option::<Arguments<'_>>::None;
        _503 = core::panicking::assert_failed::<usize, usize>(move _502, _496, _497, move _504) -> unwind continue;
    }

    bb112: {
        _505 = check_hybrid() -> [return: bb113, unwind continue];
    }

    bb113: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Up4c = {
    let mut _0: &Up4c;
    let mut _1: Up4c;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<Up4c>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &Up4c = {
    let mut _0: &Up4c;
    let mut _1: Up4c;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<Up4c>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &Up2 = {
    let mut _0: &Up2;
    let mut _1: Up2;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<Up2>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &Up2 = {
    let mut _0: &Up2;
    let mut _1: Up2;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<Up2>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &Up1 = {
    let mut _0: &Up1;
    let mut _1: Up1;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<Up1>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &Up1 = {
    let mut _0: &Up1;
    let mut _1: Up1;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<Up1>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &U = {
    let mut _0: &U;
    let mut _1: U;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<U>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &U = {
    let mut _0: &U;
    let mut _1: U;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<U>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[40] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[41] in main: &Sp2 = {
    let mut _0: &Sp2;
    let mut _1: Sp2;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[42] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[43] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[44] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<Sp2>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[45] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 6_usize;
        _0 = &_1;
        return;
    }
}

promoted[46] in main: &Sp2 = {
    let mut _0: &Sp2;
    let mut _1: Sp2;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[47] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 6_usize;
        _0 = &_1;
        return;
    }
}

promoted[48] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 6_usize;
        _0 = &_1;
        return;
    }
}

promoted[49] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<Sp2>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[50] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[51] in main: &Sp1 = {
    let mut _0: &Sp1;
    let mut _1: Sp1;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[52] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[53] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[54] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<Sp1>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[55] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 5_usize;
        _0 = &_1;
        return;
    }
}

promoted[56] in main: &Sp1 = {
    let mut _0: &Sp1;
    let mut _1: Sp1;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[57] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 5_usize;
        _0 = &_1;
        return;
    }
}

promoted[58] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 5_usize;
        _0 = &_1;
        return;
    }
}

promoted[59] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<Sp1>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[60] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[61] in main: &S = {
    let mut _0: &S;
    let mut _1: S;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[62] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[63] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[64] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<S>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[65] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 6_usize;
        _0 = &_1;
        return;
    }
}

promoted[66] in main: &S = {
    let mut _0: &S;
    let mut _1: S;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[67] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 6_usize;
        _0 = &_1;
        return;
    }
}

promoted[68] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 6_usize;
        _0 = &_1;
        return;
    }
}

promoted[69] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<S>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

fn hybrid::<impl at ui/union/union-packed.rs:122:20: 122:25>::clone(_1: &S1) -> S1 {
    debug self => _1;
    let mut _0: hybrid::S1;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn check_hybrid() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&usize, &usize);
    let _12: &usize;
    let _13: &usize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: usize;
    let mut _17: usize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&usize, &usize);
    let _22: &usize;
    let _23: &usize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: usize;
    let mut _27: usize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&usize, &usize);
    let _32: &usize;
    let _33: &usize;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: usize;
    let mut _37: usize;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&usize, &usize);
    let _42: &usize;
    let _43: &usize;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: usize;
    let mut _47: usize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&usize, &usize);
    let _52: &usize;
    let _53: &usize;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: usize;
    let mut _57: usize;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&usize, &usize);
    let _62: &usize;
    let _63: &usize;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: usize;
    let mut _67: usize;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&usize, &usize);
    let _72: &usize;
    let _73: &usize;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: usize;
    let mut _77: usize;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&usize, &usize);
    let _82: &usize;
    let _83: &usize;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: usize;
    let mut _87: usize;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: (&usize, &usize);
    let _92: &usize;
    let _93: &usize;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: usize;
    let mut _97: usize;
    let _99: !;
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _101: (&usize, &usize);
    let _102: &usize;
    let _103: &usize;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: usize;
    let mut _107: usize;
    let _109: !;
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _111: (&usize, &usize);
    let _112: &usize;
    let _113: &usize;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: usize;
    let mut _117: usize;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: &usize;
    let mut _122: &usize;
    let mut _123: &usize;
    let mut _124: &usize;
    let mut _125: &usize;
    let mut _126: &usize;
    let mut _127: &usize;
    let mut _128: &usize;
    let mut _129: &usize;
    let mut _130: &usize;
    let mut _131: &usize;
    let mut _132: &usize;
    let mut _133: &usize;
    let mut _134: &usize;
    let mut _135: &usize;
    let mut _136: &usize;
    let mut _137: &usize;
    let mut _138: &usize;
    let mut _139: &usize;
    let mut _140: &usize;
    let mut _141: &usize;
    let mut _142: &usize;
    let mut _143: &usize;
    let mut _144: &usize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _12;
        debug right_val => _13;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }
    scope 5 {
        debug left_val => _22;
        debug right_val => _23;
        let _28: core::panicking::AssertKind;
        scope 6 {
            debug kind => _28;
        }
    }
    scope 7 {
        debug left_val => _32;
        debug right_val => _33;
        let _38: core::panicking::AssertKind;
        scope 8 {
            debug kind => _38;
        }
    }
    scope 9 {
        debug left_val => _42;
        debug right_val => _43;
        let _48: core::panicking::AssertKind;
        scope 10 {
            debug kind => _48;
        }
    }
    scope 11 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 12 {
            debug kind => _58;
        }
    }
    scope 13 {
        debug left_val => _62;
        debug right_val => _63;
        let _68: core::panicking::AssertKind;
        scope 14 {
            debug kind => _68;
        }
    }
    scope 15 {
        debug left_val => _72;
        debug right_val => _73;
        let _78: core::panicking::AssertKind;
        scope 16 {
            debug kind => _78;
        }
    }
    scope 17 {
        debug left_val => _82;
        debug right_val => _83;
        let _88: core::panicking::AssertKind;
        scope 18 {
            debug kind => _88;
        }
    }
    scope 19 {
        debug left_val => _92;
        debug right_val => _93;
        let _98: core::panicking::AssertKind;
        scope 20 {
            debug kind => _98;
        }
    }
    scope 21 {
        debug left_val => _102;
        debug right_val => _103;
        let _108: core::panicking::AssertKind;
        scope 22 {
            debug kind => _108;
        }
    }
    scope 23 {
        debug left_val => _112;
        debug right_val => _113;
        let _118: core::panicking::AssertKind;
        scope 24 {
            debug kind => _118;
        }
    }

    bb0: {
        _144 = const _;
        _143 = const _;
        _1 = (_144, _143);
        _2 = (_1.0: &usize);
        _3 = (_1.1: &usize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<usize, usize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _142 = const _;
        _141 = const _;
        _11 = (_142, _141);
        _12 = (_11.0: &usize);
        _13 = (_11.1: &usize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<usize, usize>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb4: {
        _140 = const _;
        _139 = const _;
        _21 = (_140, _139);
        _22 = (_21.0: &usize);
        _23 = (_21.1: &usize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<usize, usize>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _138 = const _;
        _137 = const _;
        _31 = (_138, _137);
        _32 = (_31.0: &usize);
        _33 = (_31.1: &usize);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<usize, usize>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb8: {
        _136 = const _;
        _135 = const _;
        _41 = (_136, _135);
        _42 = (_41.0: &usize);
        _43 = (_41.1: &usize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<usize, usize>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb10: {
        _134 = const _;
        _133 = const _;
        _51 = (_134, _133);
        _52 = (_51.0: &usize);
        _53 = (_51.1: &usize);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<usize, usize>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb12: {
        _132 = const _;
        _131 = const _;
        _61 = (_132, _131);
        _62 = (_61.0: &usize);
        _63 = (_61.1: &usize);
        _66 = (*_62);
        _67 = (*_63);
        _65 = Eq(move _66, move _67);
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<usize, usize>(move _68, _62, _63, move _70) -> unwind continue;
    }

    bb14: {
        _130 = const _;
        _129 = const _;
        _71 = (_130, _129);
        _72 = (_71.0: &usize);
        _73 = (_71.1: &usize);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<usize, usize>(move _78, _72, _73, move _80) -> unwind continue;
    }

    bb16: {
        _128 = const _;
        _127 = const _;
        _81 = (_128, _127);
        _82 = (_81.0: &usize);
        _83 = (_81.1: &usize);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<usize, usize>(move _88, _82, _83, move _90) -> unwind continue;
    }

    bb18: {
        _126 = const _;
        _125 = const _;
        _91 = (_126, _125);
        _92 = (_91.0: &usize);
        _93 = (_91.1: &usize);
        _96 = (*_92);
        _97 = (*_93);
        _95 = Eq(move _96, move _97);
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _98 = core::panicking::AssertKind::Eq;
        _100 = Option::<Arguments<'_>>::None;
        _99 = core::panicking::assert_failed::<usize, usize>(move _98, _92, _93, move _100) -> unwind continue;
    }

    bb20: {
        _124 = const _;
        _123 = const _;
        _101 = (_124, _123);
        _102 = (_101.0: &usize);
        _103 = (_101.1: &usize);
        _106 = (*_102);
        _107 = (*_103);
        _105 = Eq(move _106, move _107);
        _104 = Not(move _105);
        switchInt(move _104) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _108 = core::panicking::AssertKind::Eq;
        _110 = Option::<Arguments<'_>>::None;
        _109 = core::panicking::assert_failed::<usize, usize>(move _108, _102, _103, move _110) -> unwind continue;
    }

    bb22: {
        _122 = const _;
        _121 = const _;
        _111 = (_122, _121);
        _112 = (_111.0: &usize);
        _113 = (_111.1: &usize);
        _116 = (*_112);
        _117 = (*_113);
        _115 = Eq(move _116, move _117);
        _114 = Not(move _115);
        switchInt(move _114) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<usize, usize>(move _118, _112, _113, move _120) -> unwind continue;
    }

    bb24: {
        return;
    }
}

promoted[0] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 6_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<S2C>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[2] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<S2C>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[4] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<UC>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[6] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[7] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<UC>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[8] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[9] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<S1C>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[10] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[11] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<S1C>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[12] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[13] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<S2>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[14] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[15] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<S2>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[16] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[17] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<hybrid::U>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[18] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[19] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<hybrid::U>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[20] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[21] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<S1>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[22] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[23] in check_hybrid: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<S1>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}
