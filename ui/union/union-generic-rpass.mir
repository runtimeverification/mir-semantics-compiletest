// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn union_transmute(_1: A) -> B {
    debug a => _1;
    let mut _0: B;
    let mut _2: U<A, B>;

    bb0: {
        _2 = U::<A, B> { a: _1 };
        _0 = (_2.1: B);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _2: (u8, u8);
    let mut _3: (&u16, &u16);
    let mut _4: &u16;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: u16;
    let mut _10: u16;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: std::boxed::Box<[u8]>;
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: *mut u8;
    let mut _19: std::boxed::Box<[u8; 3]>;
    let mut _21: &[u8];
    let _22: &[u8];
    let mut _23: &std::vec::Vec<u8>;
    let _24: std::option::Option<&u8>;
    let mut _25: &mut std::slice::Iter<'_, u8>;
    let mut _27: std::mem::ManuallyDrop<&u8>;
    let mut _28: &u8;
    let _29: &u8;
    let mut _30: std::option::Option<&u8>;
    let mut _31: &mut std::slice::Iter<'_, u8>;
    let mut _32: (&u8, &u8);
    let _33: &&u8;
    let mut _34: &std::mem::ManuallyDrop<&u8>;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: u8;
    let mut _40: u8;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: &u8;
    let mut _47: *const [u8; 3];
    scope 1 {
        let _1: u16;
        scope 2 {
            debug b => _1;
            let _5: &u16;
            let _6: &u16;
            let _14: std::vec::Vec<u8>;
            let mut _45: &u16;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
            scope 5 {
                debug v => _14;
                let mut _20: std::slice::Iter<'_, u8>;
                scope 7 {
                    debug i => _20;
                    let _26: MaybeItem<std::slice::Iter<'_, u8>>;
                    scope 8 {
                        debug mi => _26;
                        let _35: &u8;
                        let _36: &u8;
                        let mut _44: &u8;
                        scope 9 {
                            debug left_val => _35;
                            debug right_val => _36;
                            let _41: core::panicking::AssertKind;
                            scope 10 {
                                debug kind => _41;
                            }
                        }
                    }
                }
            }
            scope 6 {
            }
        }
    }

    bb0: {
        _2 = (const 1_u8, const 1_u8);
        _1 = union_transmute::<(u8, u8), u16>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_1;
        _45 = const _;
        _3 = (move _4, _45);
        _5 = (_3.0: &u16);
        _6 = (_3.1: &u16);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<u16, u16>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb3: {
        _16 = SizeOf([u8; 3]);
        _17 = AlignOf([u8; 3]);
        _18 = alloc::alloc::exchange_malloc(move _16, move _17) -> [return: bb4, unwind continue];
    }

    bb4: {
        _19 = ShallowInitBox(move _18, [u8; 3]);
        _47 = (((_19.0: std::ptr::Unique<[u8; 3]>).0: std::ptr::NonNull<[u8; 3]>).0: *const [u8; 3]);
        (*_47) = [const 1_u8, const 2_u8, const 3_u8];
        _15 = move _19 as std::boxed::Box<[u8]> (Pointer(Unsize));
        _14 = slice::<impl [u8]>::into_vec::<std::alloc::Global>(move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        _23 = &_14;
        _22 = <Vec<u8> as Deref>::deref(move _23) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _21 = _22;
        _20 = core::slice::<impl [u8]>::iter(move _21) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _25 = &mut _20;
        _24 = <std::slice::Iter<'_, u8> as Iterator>::next(move _25) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        _31 = &mut _20;
        _30 = <std::slice::Iter<'_, u8> as Iterator>::next(move _31) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _29 = Option::<&u8>::unwrap(move _30) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        _28 = _29;
        _27 = ManuallyDrop::<&u8>::new(move _28) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _26 = MaybeItem::<std::slice::Iter<'_, u8>> { elem: move _27 };
        _34 = &(_26.0: std::mem::ManuallyDrop<&u8>);
        _33 = <ManuallyDrop<&u8> as Deref>::deref(move _34) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _46 = deref_copy (*_33);
        _44 = const _;
        _32 = (_46, _44);
        _35 = (_32.0: &u8);
        _36 = (_32.1: &u8);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<u8, u8>(move _41, _35, _36, move _43) -> bb16;
    }

    bb14: {
        drop(_14) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_14) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        resume;
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;
    let mut _2: u16;

    bb0: {
        _2 = Shl(const 1_u16, const 8_i32);
        _1 = Add(move _2, const 1_u16);
        _0 = &_1;
        return;
    }
}
