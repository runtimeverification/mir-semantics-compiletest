// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn union_transmute(_1: A) -> B {
    debug a => _1;                       // in scope 0 at ui/union/union-generic-rpass.rs:19:33: 19:34
    let mut _0: B;                       // return place in scope 0 at ui/union/union-generic-rpass.rs:19:42: 19:43
    let mut _2: U<A, B>;                 // in scope 0 at ui/union/union-generic-rpass.rs:20:5: 20:12
    let mut _3: A;                       // in scope 0 at ui/union/union-generic-rpass.rs:20:9: 20:10

    bb0: {
        _3 = _1;                         // scope 0 at ui/union/union-generic-rpass.rs:20:9: 20:10
        _2 = U::<A, B> { a: move _3 };   // scope 0 at ui/union/union-generic-rpass.rs:20:5: 20:12
        _0 = (_2.1: B);                  // scope 0 at ui/union/union-generic-rpass.rs:20:5: 20:14
        return;                          // scope 0 at ui/union/union-generic-rpass.rs:21:2: 21:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/union/union-generic-rpass.rs:23:11: 23:11
    let mut _2: (u8, u8);                // in scope 0 at ui/union/union-generic-rpass.rs:25:50: 25:56
    let mut _3: (&u16, &u16);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &u16;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &u16;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: u16;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: u16;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &u16;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &u16;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &u16;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &u16;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: std::boxed::Box<[u8]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _22: std::boxed::Box<[u8; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _23: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _24: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _25: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _26: std::boxed::Box<[u8; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _28: &[u8];                  // in scope 0 at ui/union/union-generic-rpass.rs:29:21: 29:29
    let _29: &[u8];                      // in scope 0 at ui/union/union-generic-rpass.rs:29:21: 29:29
    let mut _30: &std::vec::Vec<u8>;     // in scope 0 at ui/union/union-generic-rpass.rs:29:21: 29:29
    let _31: std::option::Option<&u8>;   // in scope 0 at ui/union/union-generic-rpass.rs:30:9: 30:17
    let mut _32: &mut std::slice::Iter<'_, u8>; // in scope 0 at ui/union/union-generic-rpass.rs:30:9: 30:17
    let mut _34: std::mem::ManuallyDrop<&u8>; // in scope 0 at ui/union/union-generic-rpass.rs:31:59: 31:95
    let mut _35: &u8;                    // in scope 0 at ui/union/union-generic-rpass.rs:31:77: 31:94
    let _36: &u8;                        // in scope 0 at ui/union/union-generic-rpass.rs:31:77: 31:94
    let mut _37: std::option::Option<&u8>; // in scope 0 at ui/union/union-generic-rpass.rs:31:77: 31:85
    let mut _38: &mut std::slice::Iter<'_, u8>; // in scope 0 at ui/union/union-generic-rpass.rs:31:77: 31:85
    let mut _39: (&u8, &u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _40: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _41: &&u8;                       // in scope 0 at ui/union/union-generic-rpass.rs:32:21: 32:29
    let mut _42: &std::mem::ManuallyDrop<&u8>; // in scope 0 at ui/union/union-generic-rpass.rs:32:22: 32:29
    let mut _43: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _46: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _48: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _49: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _51: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _52: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _53: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _54: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _55: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _56: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _60: &u8;                    // in scope 0 at ui/union/union-generic-rpass.rs:32:21: 32:29
    let mut _61: *const [u8; 3];         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        let _1: u16;                     // in scope 1 at ui/union/union-generic-rpass.rs:25:13: 25:14
        scope 2 {
            debug b => _1;               // in scope 2 at ui/union/union-generic-rpass.rs:25:13: 25:14
            let _6: &u16;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _7: &u16;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _20: std::vec::Vec<u8>;  // in scope 2 at ui/union/union-generic-rpass.rs:28:13: 28:14
            let mut _59: &u16;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _6;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _7;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _12: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _12;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug v => _20;          // in scope 5 at ui/union/union-generic-rpass.rs:28:13: 28:14
                let mut _27: std::slice::Iter<'_, u8>; // in scope 5 at ui/union/union-generic-rpass.rs:29:13: 29:18
                scope 7 {
                    debug i => _27;      // in scope 7 at ui/union/union-generic-rpass.rs:29:13: 29:18
                    let _33: MaybeItem<std::slice::Iter<'_, u8>>; // in scope 7 at ui/union/union-generic-rpass.rs:31:13: 31:15
                    scope 8 {
                        debug mi => _33; // in scope 8 at ui/union/union-generic-rpass.rs:31:13: 31:15
                        let _44: &u8;    // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _45: &u8;    // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let mut _58: &u8; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        scope 9 {
                            debug left_val => _44; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _45; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _50: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 10 {
                                debug kind => _50; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                    }
                }
            }
            scope 6 {
            }
        }
    }

    bb0: {
        _2 = const (1_u8, 1_u8);         // scope 1 at ui/union/union-generic-rpass.rs:25:50: 25:56
        _1 = union_transmute::<(u8, u8), u16>(move _2) -> bb1; // scope 1 at ui/union/union-generic-rpass.rs:25:17: 25:57
                                         // mir::Constant
                                         // + span: ui/union/union-generic-rpass.rs:25:17: 25:49
                                         // + literal: Const { ty: unsafe fn((u8, u8)) -> u16 {union_transmute::<(u8, u8), u16>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_1;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _59 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u16, val: Unevaluated(main, [], Some(promoted[1])) }
        _5 = _59;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &u16);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &u16);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = (*_6);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = const 257_u16;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = Eq(move _10, move _11);     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _8 = Not(move _9);               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<u16, u16>(move _14, move _15, move _17, move _19); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u16, &'b u16, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u16, u16>}, val: Value(<ZST>) }
    }

    bb3: {
        _23 = const 3_usize;             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _24 = const 1_usize;             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _25 = alloc::alloc::exchange_malloc(move _23, move _24) -> bb4; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb4: {
        _26 = ShallowInitBox(move _25, [u8; 3]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _61 = (((_26.0: std::ptr::Unique<[u8; 3]>).0: std::ptr::NonNull<[u8; 3]>).0: *const [u8; 3]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_61) = [const 1_u8, const 2_u8, const 3_u8]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _22 = move _26;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _21 = move _22 as std::boxed::Box<[u8]> (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _20 = slice::<impl [u8]>::into_vec::<std::alloc::Global>(move _21) -> bb5; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[u8]>) -> Vec<u8> {slice::<impl [u8]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb5: {
        _30 = &_20;                      // scope 5 at ui/union/union-generic-rpass.rs:29:21: 29:29
        _29 = <Vec<u8> as Deref>::deref(move _30) -> [return: bb6, unwind: bb16]; // scope 5 at ui/union/union-generic-rpass.rs:29:21: 29:29
                                         // mir::Constant
                                         // + span: ui/union/union-generic-rpass.rs:29:21: 29:29
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _28 = _29;                       // scope 5 at ui/union/union-generic-rpass.rs:29:21: 29:29
        _27 = core::slice::<impl [u8]>::iter(move _28) -> [return: bb7, unwind: bb16]; // scope 5 at ui/union/union-generic-rpass.rs:29:21: 29:29
                                         // mir::Constant
                                         // + span: ui/union/union-generic-rpass.rs:29:23: 29:27
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> std::slice::Iter<'a, u8> {core::slice::<impl [u8]>::iter}, val: Value(<ZST>) }
    }

    bb7: {
        _32 = &mut _27;                  // scope 7 at ui/union/union-generic-rpass.rs:30:9: 30:17
        _31 = <std::slice::Iter<'_, u8> as Iterator>::next(move _32) -> [return: bb8, unwind: bb16]; // scope 7 at ui/union/union-generic-rpass.rs:30:9: 30:17
                                         // mir::Constant
                                         // + span: ui/union/union-generic-rpass.rs:30:11: 30:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, u8>) -> Option<<std::slice::Iter<'_, u8> as Iterator>::Item> {<std::slice::Iter<'_, u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb8: {
        _38 = &mut _27;                  // scope 7 at ui/union/union-generic-rpass.rs:31:77: 31:85
        _37 = <std::slice::Iter<'_, u8> as Iterator>::next(move _38) -> [return: bb9, unwind: bb16]; // scope 7 at ui/union/union-generic-rpass.rs:31:77: 31:85
                                         // mir::Constant
                                         // + span: ui/union/union-generic-rpass.rs:31:79: 31:83
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, u8>) -> Option<<std::slice::Iter<'_, u8> as Iterator>::Item> {<std::slice::Iter<'_, u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb9: {
        _36 = Option::<&u8>::unwrap(move _37) -> [return: bb10, unwind: bb16]; // scope 7 at ui/union/union-generic-rpass.rs:31:77: 31:94
                                         // mir::Constant
                                         // + span: ui/union/union-generic-rpass.rs:31:86: 31:92
                                         // + literal: Const { ty: fn(Option<&u8>) -> &u8 {Option::<&u8>::unwrap}, val: Value(<ZST>) }
    }

    bb10: {
        _35 = _36;                       // scope 7 at ui/union/union-generic-rpass.rs:31:77: 31:94
        _34 = ManuallyDrop::<&u8>::new(move _35) -> [return: bb11, unwind: bb16]; // scope 7 at ui/union/union-generic-rpass.rs:31:59: 31:95
                                         // mir::Constant
                                         // + span: ui/union/union-generic-rpass.rs:31:59: 31:76
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&u8) -> ManuallyDrop<&u8> {ManuallyDrop::<&u8>::new}, val: Value(<ZST>) }
    }

    bb11: {
        _33 = MaybeItem::<std::slice::Iter<'_, u8>> { elem: move _34 }; // scope 7 at ui/union/union-generic-rpass.rs:31:18: 31:97
                                         // adt
                                         // + user_ty: UserType(4)
        _42 = &(_33.0: std::mem::ManuallyDrop<&u8>); // scope 8 at ui/union/union-generic-rpass.rs:32:22: 32:29
        _41 = <ManuallyDrop<&u8> as Deref>::deref(move _42) -> [return: bb12, unwind: bb16]; // scope 8 at ui/union/union-generic-rpass.rs:32:21: 32:29
                                         // mir::Constant
                                         // + span: ui/union/union-generic-rpass.rs:32:21: 32:29
                                         // + literal: Const { ty: for<'a> fn(&'a ManuallyDrop<&u8>) -> &'a <ManuallyDrop<&u8> as Deref>::Target {<ManuallyDrop<&u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb12: {
        _60 = deref_copy (*_41);         // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _40 = _60;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _58 = const _;                   // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[0])) }
        _43 = _58;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _39 = (move _40, move _43);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _44 = (_39.0: &u8);              // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _45 = (_39.1: &u8);              // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _48 = (*_44);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _49 = const 2_u8;                // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _47 = Eq(move _48, move _49);    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _46 = Not(move _47);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _46) -> [0: bb14, otherwise: bb13]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _50 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _52 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _54 = _44;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _53 = _54;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _56 = _45;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _55 = _56;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _57 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _51 = core::panicking::assert_failed::<u8, u8>(move _52, move _53, move _55, move _57) -> bb16; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_20) -> bb15;               // scope 2 at ui/union/union-generic-rpass.rs:33:5: 33:6
    }

    bb15: {
        return;                          // scope 0 at ui/union/union-generic-rpass.rs:34:2: 34:2
    }

    bb16 (cleanup): {
        drop(_20) -> bb17;               // scope 2 at ui/union/union-generic-rpass.rs:33:5: 33:6
    }

    bb17 (cleanup): {
        resume;                          // scope 0 at ui/union/union-generic-rpass.rs:23:1: 34:2
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u8;                      // in scope 0 at ui/union/union-generic-rpass.rs:32:31: 32:32

    bb0: {
        _1 = const 2_u8;                 // scope 0 at ui/union/union-generic-rpass.rs:32:31: 32:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &u16 = {
    let mut _0: &u16;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u16;                     // in scope 0 at ui/union/union-generic-rpass.rs:26:23: 26:35
    let mut _2: (u16, bool);             // in scope 0 at ui/union/union-generic-rpass.rs:26:23: 26:35
    let mut _3: u16;                     // in scope 0 at ui/union/union-generic-rpass.rs:26:23: 26:31
    let mut _4: (u16, bool);             // in scope 0 at ui/union/union-generic-rpass.rs:26:23: 26:31

    bb0: {
        _4 = CheckedShl(const 1_u16, const 8_i32); // scope 0 at ui/union/union-generic-rpass.rs:26:23: 26:31
        _3 = move (_4.0: u16);           // scope 0 at ui/union/union-generic-rpass.rs:26:23: 26:31
        _2 = CheckedAdd(_3, const 1_u16); // scope 0 at ui/union/union-generic-rpass.rs:26:23: 26:35
        _1 = move (_2.0: u16);           // scope 0 at ui/union/union-generic-rpass.rs:26:23: 26:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
