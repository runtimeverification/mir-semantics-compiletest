// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/union/union-nodrop.rs:12:1: 12:23>::drop(_1: &mut NeedDrop) -> () {
    debug self => _1;                    // in scope 0 at ui/union/union-nodrop.rs:13:13: 13:22
    let mut _0: ();                      // return place in scope 0 at ui/union/union-nodrop.rs:13:24: 13:24

    bb0: {
        return;                          // scope 0 at ui/union/union-nodrop.rs:13:26: 13:26
    }
}

static X: () = {
    let mut _0: ();                      // return place in scope 0 at ui/union/union-nodrop.rs:18:11: 18:13
    let mut _1: (NoDrop<NeedDrop>, ());  // in scope 0 at ui/union/union-nodrop.rs:18:16: 18:67
    let mut _2: NoDrop<NeedDrop>;        // in scope 0 at ui/union/union-nodrop.rs:18:17: 18:62
    let mut _3: std::mem::ManuallyDrop<NeedDrop>; // in scope 0 at ui/union/union-nodrop.rs:18:33: 18:60
    let mut _4: NeedDrop;                // in scope 0 at ui/union/union-nodrop.rs:18:51: 18:59
    let mut _5: ();                      // in scope 0 at ui/union/union-nodrop.rs:18:64: 18:66

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/union/union-nodrop.rs:18:16: 18:67
        StorageLive(_2);                 // scope 0 at ui/union/union-nodrop.rs:18:17: 18:62
        StorageLive(_3);                 // scope 0 at ui/union/union-nodrop.rs:18:33: 18:60
        StorageLive(_4);                 // scope 0 at ui/union/union-nodrop.rs:18:51: 18:59
        _4 = NeedDrop;                   // scope 0 at ui/union/union-nodrop.rs:18:51: 18:59
        ConstEvalCounter;                // scope 0 at ui/union/union-nodrop.rs:18:33: 18:60
        _3 = ManuallyDrop::<NeedDrop>::new(move _4) -> [return: bb1, unwind: bb2]; // scope 0 at ui/union/union-nodrop.rs:18:33: 18:60
                                         // mir::Constant
                                         // + span: ui/union/union-nodrop.rs:18:33: 18:50
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(NeedDrop) -> ManuallyDrop<NeedDrop> {ManuallyDrop::<NeedDrop>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/union/union-nodrop.rs:18:59: 18:60
        _2 = NoDrop::<NeedDrop> { inner: move _3 }; // scope 0 at ui/union/union-nodrop.rs:18:17: 18:62
        StorageDead(_3);                 // scope 0 at ui/union/union-nodrop.rs:18:61: 18:62
        StorageLive(_5);                 // scope 0 at ui/union/union-nodrop.rs:18:64: 18:66
        _5 = ();                         // scope 0 at ui/union/union-nodrop.rs:18:64: 18:66
        _1 = (move _2, move _5);         // scope 0 at ui/union/union-nodrop.rs:18:16: 18:67
        StorageDead(_5);                 // scope 0 at ui/union/union-nodrop.rs:18:66: 18:67
        StorageDead(_2);                 // scope 0 at ui/union/union-nodrop.rs:18:66: 18:67
        _0 = (_1.1: ());                 // scope 0 at ui/union/union-nodrop.rs:18:16: 18:69
        StorageDead(_1);                 // scope 0 at ui/union/union-nodrop.rs:18:68: 18:69
        return;                          // scope 0 at ui/union/union-nodrop.rs:18:1: 18:70
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/union/union-nodrop.rs:18:1: 18:70
    }
}

const Y: () = {
    let mut _0: ();                      // return place in scope 0 at ui/union/union-nodrop.rs:20:10: 20:12
    let mut _1: (NoDrop<NeedDrop>, ());  // in scope 0 at ui/union/union-nodrop.rs:20:15: 20:66
    let mut _2: NoDrop<NeedDrop>;        // in scope 0 at ui/union/union-nodrop.rs:20:16: 20:61
    let mut _3: std::mem::ManuallyDrop<NeedDrop>; // in scope 0 at ui/union/union-nodrop.rs:20:32: 20:59
    let mut _4: NeedDrop;                // in scope 0 at ui/union/union-nodrop.rs:20:50: 20:58
    let mut _5: ();                      // in scope 0 at ui/union/union-nodrop.rs:20:63: 20:65

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/union/union-nodrop.rs:20:15: 20:66
        StorageLive(_2);                 // scope 0 at ui/union/union-nodrop.rs:20:16: 20:61
        StorageLive(_3);                 // scope 0 at ui/union/union-nodrop.rs:20:32: 20:59
        StorageLive(_4);                 // scope 0 at ui/union/union-nodrop.rs:20:50: 20:58
        _4 = NeedDrop;                   // scope 0 at ui/union/union-nodrop.rs:20:50: 20:58
        ConstEvalCounter;                // scope 0 at ui/union/union-nodrop.rs:20:32: 20:59
        _3 = ManuallyDrop::<NeedDrop>::new(move _4) -> [return: bb1, unwind: bb2]; // scope 0 at ui/union/union-nodrop.rs:20:32: 20:59
                                         // mir::Constant
                                         // + span: ui/union/union-nodrop.rs:20:32: 20:49
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(NeedDrop) -> ManuallyDrop<NeedDrop> {ManuallyDrop::<NeedDrop>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/union/union-nodrop.rs:20:58: 20:59
        _2 = NoDrop::<NeedDrop> { inner: move _3 }; // scope 0 at ui/union/union-nodrop.rs:20:16: 20:61
        StorageDead(_3);                 // scope 0 at ui/union/union-nodrop.rs:20:60: 20:61
        StorageLive(_5);                 // scope 0 at ui/union/union-nodrop.rs:20:63: 20:65
        _5 = ();                         // scope 0 at ui/union/union-nodrop.rs:20:63: 20:65
        _1 = (move _2, move _5);         // scope 0 at ui/union/union-nodrop.rs:20:15: 20:66
        StorageDead(_5);                 // scope 0 at ui/union/union-nodrop.rs:20:65: 20:66
        StorageDead(_2);                 // scope 0 at ui/union/union-nodrop.rs:20:65: 20:66
        _0 = (_1.1: ());                 // scope 0 at ui/union/union-nodrop.rs:20:15: 20:68
        StorageDead(_1);                 // scope 0 at ui/union/union-nodrop.rs:20:67: 20:68
        return;                          // scope 0 at ui/union/union-nodrop.rs:20:1: 20:69
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/union/union-nodrop.rs:20:1: 20:69
    }
}

fn _f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/union/union-nodrop.rs:22:15: 22:15
    let mut _1: std::mem::ManuallyDrop<NeedDrop>; // in scope 0 at ui/union/union-nodrop.rs:22:34: 22:61
    let mut _2: NeedDrop;                // in scope 0 at ui/union/union-nodrop.rs:22:52: 22:60

    bb0: {
        _1 = ManuallyDrop::<NeedDrop>::new(move _2) -> bb1; // scope 0 at ui/union/union-nodrop.rs:22:34: 22:61
                                         // mir::Constant
                                         // + span: ui/union/union-nodrop.rs:22:34: 22:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(NeedDrop) -> ManuallyDrop<NeedDrop> {ManuallyDrop::<NeedDrop>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/union/union-nodrop.rs:22:72: 22:72
    }
}

// MIR FOR CTFE
fn _f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/union/union-nodrop.rs:22:15: 22:15
    let mut _1: (NoDrop<NeedDrop>, ());  // in scope 0 at ui/union/union-nodrop.rs:22:17: 22:68
    let mut _2: NoDrop<NeedDrop>;        // in scope 0 at ui/union/union-nodrop.rs:22:18: 22:63
    let mut _3: std::mem::ManuallyDrop<NeedDrop>; // in scope 0 at ui/union/union-nodrop.rs:22:34: 22:61
    let mut _4: NeedDrop;                // in scope 0 at ui/union/union-nodrop.rs:22:52: 22:60
    let mut _5: ();                      // in scope 0 at ui/union/union-nodrop.rs:22:65: 22:67

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/union/union-nodrop.rs:22:17: 22:68
        StorageLive(_2);                 // scope 0 at ui/union/union-nodrop.rs:22:18: 22:63
        StorageLive(_3);                 // scope 0 at ui/union/union-nodrop.rs:22:34: 22:61
        StorageLive(_4);                 // scope 0 at ui/union/union-nodrop.rs:22:52: 22:60
        _4 = NeedDrop;                   // scope 0 at ui/union/union-nodrop.rs:22:52: 22:60
        ConstEvalCounter;                // scope 0 at ui/union/union-nodrop.rs:22:34: 22:61
        _3 = ManuallyDrop::<NeedDrop>::new(move _4) -> [return: bb1, unwind: bb2]; // scope 0 at ui/union/union-nodrop.rs:22:34: 22:61
                                         // mir::Constant
                                         // + span: ui/union/union-nodrop.rs:22:34: 22:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(NeedDrop) -> ManuallyDrop<NeedDrop> {ManuallyDrop::<NeedDrop>::new}, val: Value(<ZST>) }
    }

    bb1: {
        StorageDead(_4);                 // scope 0 at ui/union/union-nodrop.rs:22:60: 22:61
        _2 = NoDrop::<NeedDrop> { inner: move _3 }; // scope 0 at ui/union/union-nodrop.rs:22:18: 22:63
        StorageDead(_3);                 // scope 0 at ui/union/union-nodrop.rs:22:62: 22:63
        StorageLive(_5);                 // scope 0 at ui/union/union-nodrop.rs:22:65: 22:67
        _5 = ();                         // scope 0 at ui/union/union-nodrop.rs:22:65: 22:67
        _1 = (move _2, move _5);         // scope 0 at ui/union/union-nodrop.rs:22:17: 22:68
        StorageDead(_5);                 // scope 0 at ui/union/union-nodrop.rs:22:67: 22:68
        StorageDead(_2);                 // scope 0 at ui/union/union-nodrop.rs:22:67: 22:68
        _0 = (_1.1: ());                 // scope 0 at ui/union/union-nodrop.rs:22:17: 22:70
        StorageDead(_1);                 // scope 0 at ui/union/union-nodrop.rs:22:71: 22:72
        return;                          // scope 0 at ui/union/union-nodrop.rs:22:72: 22:72
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/union/union-nodrop.rs:22:1: 22:72
    }
}

fn <impl at ui/union/union-nodrop.rs:48:1: 48:33>::drop(_1: &mut ActuallyDrop<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/union/union-nodrop.rs:49:13: 49:22
    let mut _0: ();                      // return place in scope 0 at ui/union/union-nodrop.rs:49:24: 49:24

    bb0: {
        return;                          // scope 0 at ui/union/union-nodrop.rs:49:26: 49:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/union/union-nodrop.rs:52:11: 52:11
    let mut _1: bool;                    // in scope 0 at ui/union/union-nodrop.rs:54:5: 54:34
    let mut _2: bool;                    // in scope 0 at ui/union/union-nodrop.rs:54:13: 54:33
    let mut _3: bool;                    // in scope 0 at ui/union/union-nodrop.rs:54:14: 54:33
    let mut _4: !;                       // in scope 0 at ui/union/union-nodrop.rs:54:5: 54:34
    let mut _5: bool;                    // in scope 0 at ui/union/union-nodrop.rs:55:5: 55:41
    let mut _6: bool;                    // in scope 0 at ui/union/union-nodrop.rs:55:13: 55:40
    let mut _7: bool;                    // in scope 0 at ui/union/union-nodrop.rs:55:14: 55:40
    let mut _8: !;                       // in scope 0 at ui/union/union-nodrop.rs:55:5: 55:41
    let mut _9: bool;                    // in scope 0 at ui/union/union-nodrop.rs:56:5: 56:46
    let mut _10: bool;                   // in scope 0 at ui/union/union-nodrop.rs:56:13: 56:45
    let mut _11: bool;                   // in scope 0 at ui/union/union-nodrop.rs:56:14: 56:45
    let mut _12: !;                      // in scope 0 at ui/union/union-nodrop.rs:56:5: 56:46
    let mut _13: bool;                   // in scope 0 at ui/union/union-nodrop.rs:58:5: 58:33
    let mut _14: bool;                   // in scope 0 at ui/union/union-nodrop.rs:58:13: 58:32
    let mut _15: !;                      // in scope 0 at ui/union/union-nodrop.rs:58:5: 58:33
    let mut _16: bool;                   // in scope 0 at ui/union/union-nodrop.rs:60:5: 60:46
    let mut _17: bool;                   // in scope 0 at ui/union/union-nodrop.rs:60:13: 60:45
    let mut _18: !;                      // in scope 0 at ui/union/union-nodrop.rs:60:5: 60:46
    let mut _19: bool;                   // in scope 0 at ui/union/union-nodrop.rs:61:5: 61:51
    let mut _20: bool;                   // in scope 0 at ui/union/union-nodrop.rs:61:13: 61:50
    let mut _21: !;                      // in scope 0 at ui/union/union-nodrop.rs:61:5: 61:51

    bb0: {
        _3 = std::mem::needs_drop::<Foo>() -> bb1; // scope 0 at ui/union/union-nodrop.rs:54:14: 54:33
                                         // mir::Constant
                                         // + span: ui/union/union-nodrop.rs:54:14: 54:31
                                         // + literal: Const { ty: fn() -> bool {std::mem::needs_drop::<Foo>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Not(move _3);               // scope 0 at ui/union/union-nodrop.rs:54:13: 54:33
        _1 = Not(move _2);               // scope 0 at ui/union/union-nodrop.rs:54:5: 54:34
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/union/union-nodrop.rs:54:5: 54:34
    }

    bb2: {
        _4 = core::panicking::panic(const "assertion failed: !needs_drop::<Foo>()"); // scope 0 at ui/union/union-nodrop.rs:54:5: 54:34
                                         // mir::Constant
                                         // + span: ui/union/union-nodrop.rs:54:5: 54:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _7 = std::mem::needs_drop::<NoDrop<u8>>() -> bb4; // scope 0 at ui/union/union-nodrop.rs:55:14: 55:40
                                         // mir::Constant
                                         // + span: ui/union/union-nodrop.rs:55:14: 55:38
                                         // + literal: Const { ty: fn() -> bool {std::mem::needs_drop::<NoDrop<u8>>}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = Not(move _7);               // scope 0 at ui/union/union-nodrop.rs:55:13: 55:40
        _5 = Not(move _6);               // scope 0 at ui/union/union-nodrop.rs:55:5: 55:41
        switchInt(move _5) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/union/union-nodrop.rs:55:5: 55:41
    }

    bb5: {
        _8 = core::panicking::panic(const "assertion failed: !needs_drop::<NoDrop<u8>>()"); // scope 0 at ui/union/union-nodrop.rs:55:5: 55:41
                                         // mir::Constant
                                         // + span: ui/union/union-nodrop.rs:55:5: 55:41
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _11 = std::mem::needs_drop::<NoDrop<Box<u8>>>() -> bb7; // scope 0 at ui/union/union-nodrop.rs:56:14: 56:45
                                         // mir::Constant
                                         // + span: ui/union/union-nodrop.rs:56:14: 56:43
                                         // + literal: Const { ty: fn() -> bool {std::mem::needs_drop::<NoDrop<Box<u8>>>}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = Not(move _11);             // scope 0 at ui/union/union-nodrop.rs:56:13: 56:45
        _9 = Not(move _10);              // scope 0 at ui/union/union-nodrop.rs:56:5: 56:46
        switchInt(move _9) -> [0: bb9, otherwise: bb8]; // scope 0 at ui/union/union-nodrop.rs:56:5: 56:46
    }

    bb8: {
        _12 = core::panicking::panic(const "assertion failed: !needs_drop::<NoDrop<Box<u8>>>()"); // scope 0 at ui/union/union-nodrop.rs:56:5: 56:46
                                         // mir::Constant
                                         // + span: ui/union/union-nodrop.rs:56:5: 56:46
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _14 = std::mem::needs_drop::<Baz>() -> bb10; // scope 0 at ui/union/union-nodrop.rs:58:13: 58:32
                                         // mir::Constant
                                         // + span: ui/union/union-nodrop.rs:58:13: 58:30
                                         // + literal: Const { ty: fn() -> bool {std::mem::needs_drop::<Baz>}, val: Value(<ZST>) }
    }

    bb10: {
        _13 = Not(move _14);             // scope 0 at ui/union/union-nodrop.rs:58:5: 58:33
        switchInt(move _13) -> [0: bb12, otherwise: bb11]; // scope 0 at ui/union/union-nodrop.rs:58:5: 58:33
    }

    bb11: {
        _15 = core::panicking::panic(const "assertion failed: needs_drop::<Baz>()"); // scope 0 at ui/union/union-nodrop.rs:58:5: 58:33
                                         // mir::Constant
                                         // + span: ui/union/union-nodrop.rs:58:5: 58:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _17 = std::mem::needs_drop::<ActuallyDrop<u8>>() -> bb13; // scope 0 at ui/union/union-nodrop.rs:60:13: 60:45
                                         // mir::Constant
                                         // + span: ui/union/union-nodrop.rs:60:13: 60:43
                                         // + literal: Const { ty: fn() -> bool {std::mem::needs_drop::<ActuallyDrop<u8>>}, val: Value(<ZST>) }
    }

    bb13: {
        _16 = Not(move _17);             // scope 0 at ui/union/union-nodrop.rs:60:5: 60:46
        switchInt(move _16) -> [0: bb15, otherwise: bb14]; // scope 0 at ui/union/union-nodrop.rs:60:5: 60:46
    }

    bb14: {
        _18 = core::panicking::panic(const "assertion failed: needs_drop::<ActuallyDrop<u8>>()"); // scope 0 at ui/union/union-nodrop.rs:60:5: 60:46
                                         // mir::Constant
                                         // + span: ui/union/union-nodrop.rs:60:5: 60:46
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _20 = std::mem::needs_drop::<ActuallyDrop<Box<u8>>>() -> bb16; // scope 0 at ui/union/union-nodrop.rs:61:13: 61:50
                                         // mir::Constant
                                         // + span: ui/union/union-nodrop.rs:61:13: 61:48
                                         // + literal: Const { ty: fn() -> bool {std::mem::needs_drop::<ActuallyDrop<Box<u8>>>}, val: Value(<ZST>) }
    }

    bb16: {
        _19 = Not(move _20);             // scope 0 at ui/union/union-nodrop.rs:61:5: 61:51
        switchInt(move _19) -> [0: bb18, otherwise: bb17]; // scope 0 at ui/union/union-nodrop.rs:61:5: 61:51
    }

    bb17: {
        _21 = core::panicking::panic(const "assertion failed: needs_drop::<ActuallyDrop<Box<u8>>>()"); // scope 0 at ui/union/union-nodrop.rs:61:5: 61:51
                                         // mir::Constant
                                         // + span: ui/union/union-nodrop.rs:61:5: 61:51
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        return;                          // scope 0 at ui/union/union-nodrop.rs:62:2: 62:2
    }
}
