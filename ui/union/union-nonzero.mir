// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
E::A::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/union/union-nonzero.rs:34:9: 34:10

    bb0: {
        _0 = const 0_isize;              // scope 0 at ui/union/union-nonzero.rs:34:9: 34:10
        return;                          // scope 0 at ui/union/union-nonzero.rs:34:9: 34:10
    }
}

E::B::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/union/union-nonzero.rs:35:9: 35:10

    bb0: {
        _0 = const 1_isize;              // scope 0 at ui/union/union-nonzero.rs:35:9: 35:10
        return;                          // scope 0 at ui/union/union-nonzero.rs:35:9: 35:10
    }
}

fn <impl at ui/union/union-nonzero.rs:32:10: 32:15>::clone(_1: &E) -> E {
    debug self => _1;                    // in scope 0 at ui/union/union-nonzero.rs:32:10: 32:15
    let mut _0: E;                       // return place in scope 0 at ui/union/union-nonzero.rs:32:10: 32:15

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/union/union-nonzero.rs:32:10: 32:15
        return;                          // scope 0 at ui/union/union-nonzero.rs:32:15: 32:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/union/union-nonzero.rs:38:11: 38:11
    let mut _1: bool;                    // in scope 0 at ui/union/union-nonzero.rs:40:5: 40:73
    let mut _2: bool;                    // in scope 0 at ui/union/union-nonzero.rs:40:13: 40:72
    let mut _3: usize;                   // in scope 0 at ui/union/union-nonzero.rs:40:13: 40:45
    let mut _4: usize;                   // in scope 0 at ui/union/union-nonzero.rs:40:48: 40:72
    let mut _5: !;                       // in scope 0 at ui/union/union-nonzero.rs:40:5: 40:73
    let mut _6: bool;                    // in scope 0 at ui/union/union-nonzero.rs:41:5: 41:73
    let mut _7: bool;                    // in scope 0 at ui/union/union-nonzero.rs:41:13: 41:72
    let mut _8: usize;                   // in scope 0 at ui/union/union-nonzero.rs:41:13: 41:45
    let mut _9: usize;                   // in scope 0 at ui/union/union-nonzero.rs:41:48: 41:72
    let mut _10: !;                      // in scope 0 at ui/union/union-nonzero.rs:41:5: 41:73
    let mut _11: bool;                   // in scope 0 at ui/union/union-nonzero.rs:42:5: 42:69
    let mut _12: bool;                   // in scope 0 at ui/union/union-nonzero.rs:42:13: 42:68
    let mut _13: usize;                  // in scope 0 at ui/union/union-nonzero.rs:42:13: 42:43
    let mut _14: usize;                  // in scope 0 at ui/union/union-nonzero.rs:42:46: 42:68
    let mut _15: !;                      // in scope 0 at ui/union/union-nonzero.rs:42:5: 42:69
    let mut _16: bool;                   // in scope 0 at ui/union/union-nonzero.rs:45:5: 45:65
    let mut _17: bool;                   // in scope 0 at ui/union/union-nonzero.rs:45:13: 45:64
    let mut _18: usize;                  // in scope 0 at ui/union/union-nonzero.rs:45:13: 45:41
    let mut _19: usize;                  // in scope 0 at ui/union/union-nonzero.rs:45:44: 45:64
    let mut _20: !;                      // in scope 0 at ui/union/union-nonzero.rs:45:5: 45:65
    let mut _21: bool;                   // in scope 0 at ui/union/union-nonzero.rs:46:5: 46:75
    let mut _22: bool;                   // in scope 0 at ui/union/union-nonzero.rs:46:13: 46:74
    let mut _23: usize;                  // in scope 0 at ui/union/union-nonzero.rs:46:13: 46:46
    let mut _24: usize;                  // in scope 0 at ui/union/union-nonzero.rs:46:49: 46:74
    let mut _25: !;                      // in scope 0 at ui/union/union-nonzero.rs:46:5: 46:75
    let _26: U2<&u8, ()>;                // in scope 0 at ui/union/union-nonzero.rs:49:9: 49:15
    let mut _27: *const u8;              // in scope 0 at ui/union/union-nonzero.rs:49:50: 49:72
    scope 1 {
        debug zeroed => _26;             // in scope 1 at ui/union/union-nonzero.rs:49:9: 49:15
        scope 3 {
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = std::mem::size_of::<Option<U2<&u8, u8>>>() -> bb1; // scope 0 at ui/union/union-nonzero.rs:40:13: 40:45
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:40:13: 40:43
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Option<U2<&u8, u8>>>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = std::mem::size_of::<U2<&u8, u8>>() -> bb2; // scope 0 at ui/union/union-nonzero.rs:40:48: 40:72
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:40:48: 40:70
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<U2<&u8, u8>>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Gt(move _3, move _4);       // scope 0 at ui/union/union-nonzero.rs:40:13: 40:72
        _1 = Not(move _2);               // scope 0 at ui/union/union-nonzero.rs:40:5: 40:73
        switchInt(move _1) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/union/union-nonzero.rs:40:5: 40:73
    }

    bb3: {
        _5 = core::panicking::panic(const "assertion failed: size_of::<Option<U2<&u8, u8>>>() > size_of::<U2<&u8, u8>>()"); // scope 0 at ui/union/union-nonzero.rs:40:5: 40:73
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:40:5: 40:73
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _8 = std::mem::size_of::<Option<U2<&u8, ()>>>() -> bb5; // scope 0 at ui/union/union-nonzero.rs:41:13: 41:45
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:41:13: 41:43
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Option<U2<&u8, ()>>>}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = std::mem::size_of::<U2<&u8, ()>>() -> bb6; // scope 0 at ui/union/union-nonzero.rs:41:48: 41:72
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:41:48: 41:70
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<U2<&u8, ()>>}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = Gt(move _8, move _9);       // scope 0 at ui/union/union-nonzero.rs:41:13: 41:72
        _6 = Not(move _7);               // scope 0 at ui/union/union-nonzero.rs:41:5: 41:73
        switchInt(move _6) -> [0: bb8, otherwise: bb7]; // scope 0 at ui/union/union-nonzero.rs:41:5: 41:73
    }

    bb7: {
        _10 = core::panicking::panic(const "assertion failed: size_of::<Option<U2<&u8, ()>>>() > size_of::<U2<&u8, ()>>()"); // scope 0 at ui/union/union-nonzero.rs:41:5: 41:73
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:41:5: 41:73
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        _13 = std::mem::size_of::<Option<U2<u8, E>>>() -> bb9; // scope 0 at ui/union/union-nonzero.rs:42:13: 42:43
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:42:13: 42:41
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Option<U2<u8, E>>>}, val: Value(<ZST>) }
    }

    bb9: {
        _14 = std::mem::size_of::<U2<u8, E>>() -> bb10; // scope 0 at ui/union/union-nonzero.rs:42:46: 42:68
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:42:46: 42:66
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<U2<u8, E>>}, val: Value(<ZST>) }
    }

    bb10: {
        _12 = Gt(move _13, move _14);    // scope 0 at ui/union/union-nonzero.rs:42:13: 42:68
        _11 = Not(move _12);             // scope 0 at ui/union/union-nonzero.rs:42:5: 42:69
        switchInt(move _11) -> [0: bb12, otherwise: bb11]; // scope 0 at ui/union/union-nonzero.rs:42:5: 42:69
    }

    bb11: {
        _15 = core::panicking::panic(const "assertion failed: size_of::<Option<U2<u8, E>>>() > size_of::<U2<u8, E>>()"); // scope 0 at ui/union/union-nonzero.rs:42:5: 42:69
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:42:5: 42:69
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _18 = std::mem::size_of::<Option<U1<&u8>>>() -> bb13; // scope 0 at ui/union/union-nonzero.rs:45:13: 45:41
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:45:13: 45:39
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Option<U1<&u8>>>}, val: Value(<ZST>) }
    }

    bb13: {
        _19 = std::mem::size_of::<U1<&u8>>() -> bb14; // scope 0 at ui/union/union-nonzero.rs:45:44: 45:64
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:45:44: 45:62
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<U1<&u8>>}, val: Value(<ZST>) }
    }

    bb14: {
        _17 = Gt(move _18, move _19);    // scope 0 at ui/union/union-nonzero.rs:45:13: 45:64
        _16 = Not(move _17);             // scope 0 at ui/union/union-nonzero.rs:45:5: 45:65
        switchInt(move _16) -> [0: bb16, otherwise: bb15]; // scope 0 at ui/union/union-nonzero.rs:45:5: 45:65
    }

    bb15: {
        _20 = core::panicking::panic(const "assertion failed: size_of::<Option<U1<&u8>>>() > size_of::<U1<&u8>>()"); // scope 0 at ui/union/union-nonzero.rs:45:5: 45:65
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:45:5: 45:65
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb16: {
        _23 = std::mem::size_of::<Option<U2<&u8, &u8>>>() -> bb17; // scope 0 at ui/union/union-nonzero.rs:46:13: 46:46
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:46:13: 46:44
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<Option<U2<&u8, &u8>>>}, val: Value(<ZST>) }
    }

    bb17: {
        _24 = std::mem::size_of::<U2<&u8, &u8>>() -> bb18; // scope 0 at ui/union/union-nonzero.rs:46:49: 46:74
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:46:49: 46:72
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<U2<&u8, &u8>>}, val: Value(<ZST>) }
    }

    bb18: {
        _22 = Gt(move _23, move _24);    // scope 0 at ui/union/union-nonzero.rs:46:13: 46:74
        _21 = Not(move _22);             // scope 0 at ui/union/union-nonzero.rs:46:5: 46:75
        switchInt(move _21) -> [0: bb20, otherwise: bb19]; // scope 0 at ui/union/union-nonzero.rs:46:5: 46:75
    }

    bb19: {
        _25 = core::panicking::panic(const "assertion failed: size_of::<Option<U2<&u8, &u8>>>() > size_of::<U2<&u8, &u8>>()"); // scope 0 at ui/union/union-nonzero.rs:46:5: 46:75
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:46:5: 46:75
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb20: {
        _27 = null::<u8>() -> bb21;      // scope 2 at ui/union/union-nonzero.rs:49:50: 49:72
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:49:50: 49:70
                                         // + literal: Const { ty: fn() -> *const u8 {null::<u8>}, val: Value(<ZST>) }
    }

    bb21: {
        _26 = transmute::<*const u8, U2<&u8, ()>>(move _27) -> bb22; // scope 2 at ui/union/union-nonzero.rs:49:40: 49:73
                                         // mir::Constant
                                         // + span: ui/union/union-nonzero.rs:49:40: 49:49
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(*const u8) -> U2<&u8, ()> {transmute::<*const u8, U2<&u8, ()>>}, val: Value(<ZST>) }
    }

    bb22: {
        return;                          // scope 0 at ui/union/union-nonzero.rs:54:2: 54:2
    }
}
