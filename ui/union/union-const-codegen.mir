// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const C: U = {
    let mut _0: U;

    bb0: {
        _0 = U { a: const 10_u64 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _2: U;
    let mut _4: U;
    let mut _5: (&u64, &u64);
    let mut _6: &u64;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: u64;
    let mut _12: u64;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&u64, &u64);
    let mut _17: &u64;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: u64;
    let mut _23: u64;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let _1: u64;
        scope 2 {
            debug a => _1;
            let _3: u64;
            scope 3 {
                debug b => _3;
                let _7: &u64;
                let _8: &u64;
                let _18: &u64;
                let _19: &u64;
                let mut _27: &u64;
                let mut _28: &u64;
                scope 4 {
                    debug left_val => _7;
                    debug right_val => _8;
                    let _13: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _13;
                    }
                }
                scope 6 {
                    debug left_val => _18;
                    debug right_val => _19;
                    let _24: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _24;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const _;
        _1 = (_2.0: u64);
        _4 = const _;
        _3 = (_4.1: u64);
        _6 = &_1;
        _28 = const _;
        _5 = (move _6, _28);
        _7 = (_5.0: &u64);
        _8 = (_5.1: &u64);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<u64, u64>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb2: {
        _17 = &_3;
        _27 = const _;
        _16 = (move _17, _27);
        _18 = (_16.0: &u64);
        _19 = (_16.1: &u64);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<u64, u64>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 10_u64;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 10_u64;
        _0 = &_1;
        return;
    }
}
