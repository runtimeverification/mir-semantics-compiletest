// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/union/union-manuallydrop-rpass.rs:12:1: 12:23>::drop(_1: &mut NeedDrop) -> () {
    debug self => _1;                    // in scope 0 at ui/union/union-manuallydrop-rpass.rs:13:13: 13:22
    let mut _0: ();                      // return place in scope 0 at ui/union/union-manuallydrop-rpass.rs:13:24: 13:24

    bb0: {
        return;                          // scope 0 at ui/union/union-manuallydrop-rpass.rs:13:26: 13:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/union/union-manuallydrop-rpass.rs:40:11: 40:11
    let mut _1: bool;                    // in scope 0 at ui/union/union-manuallydrop-rpass.rs:42:5: 42:49
    let mut _2: bool;                    // in scope 0 at ui/union/union-manuallydrop-rpass.rs:42:13: 42:48
    let mut _3: bool;                    // in scope 0 at ui/union/union-manuallydrop-rpass.rs:42:14: 42:48
    let mut _4: !;                       // in scope 0 at ui/union/union-manuallydrop-rpass.rs:42:5: 42:49
    let mut _5: bool;                    // in scope 0 at ui/union/union-manuallydrop-rpass.rs:43:5: 43:49
    let mut _6: bool;                    // in scope 0 at ui/union/union-manuallydrop-rpass.rs:43:13: 43:48
    let mut _7: bool;                    // in scope 0 at ui/union/union-manuallydrop-rpass.rs:43:14: 43:48
    let mut _8: !;                       // in scope 0 at ui/union/union-manuallydrop-rpass.rs:43:5: 43:49

    bb0: {
        _3 = std::mem::needs_drop::<UnionOk1<NeedDrop>>() -> bb1; // scope 0 at ui/union/union-manuallydrop-rpass.rs:42:14: 42:48
                                         // mir::Constant
                                         // + span: ui/union/union-manuallydrop-rpass.rs:42:14: 42:46
                                         // + literal: Const { ty: fn() -> bool {std::mem::needs_drop::<UnionOk1<NeedDrop>>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Not(move _3);               // scope 0 at ui/union/union-manuallydrop-rpass.rs:42:13: 42:48
        _1 = Not(move _2);               // scope 0 at ui/union/union-manuallydrop-rpass.rs:42:5: 42:49
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/union/union-manuallydrop-rpass.rs:42:5: 42:49
    }

    bb2: {
        _4 = core::panicking::panic(const "assertion failed: !needs_drop::<UnionOk1<NeedDrop>>()"); // scope 0 at ui/union/union-manuallydrop-rpass.rs:42:5: 42:49
                                         // mir::Constant
                                         // + span: ui/union/union-manuallydrop-rpass.rs:42:5: 42:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _7 = std::mem::needs_drop::<UnionOk3<&dyn Foo>>() -> bb4; // scope 0 at ui/union/union-manuallydrop-rpass.rs:43:14: 43:48
                                         // mir::Constant
                                         // + span: ui/union/union-manuallydrop-rpass.rs:43:14: 43:46
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> bool {std::mem::needs_drop::<UnionOk3<&dyn Foo>>}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = Not(move _7);               // scope 0 at ui/union/union-manuallydrop-rpass.rs:43:13: 43:48
        _5 = Not(move _6);               // scope 0 at ui/union/union-manuallydrop-rpass.rs:43:5: 43:49
        switchInt(move _5) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/union/union-manuallydrop-rpass.rs:43:5: 43:49
    }

    bb5: {
        _8 = core::panicking::panic(const "assertion failed: !needs_drop::<UnionOk3<&dyn Foo>>()"); // scope 0 at ui/union/union-manuallydrop-rpass.rs:43:5: 43:49
                                         // mir::Constant
                                         // + span: ui/union/union-manuallydrop-rpass.rs:43:5: 43:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        return;                          // scope 0 at ui/union/union-manuallydrop-rpass.rs:44:2: 44:2
    }
}
