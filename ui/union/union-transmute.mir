// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _2: (u8, u8);
    let mut _3: (&u16, &u16);
    let mut _4: &u16;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: u16;
    let mut _10: u16;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: u16;
    let mut _15: (&(u8, u8), &(u8, u8));
    let mut _16: &(u8, u8);
    let mut _19: bool;
    let mut _20: bool;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&f32, &f32);
    let mut _26: &f32;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: f32;
    let mut _32: f32;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&u32, &u32);
    let mut _37: &u32;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: u32;
    let mut _43: u32;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let mut _1: U;
        scope 2 {
            debug u => _1;
            let _5: &u16;
            let _6: &u16;
            let _17: &(u8, u8);
            let _18: &(u8, u8);
            let mut _24: W;
            let mut _49: &(u8, u8);
            let mut _50: &u16;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
            scope 5 {
                debug left_val => _17;
                debug right_val => _18;
                let _21: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _21;
                }
            }
            scope 7 {
                debug w => _24;
                let _27: &f32;
                let _28: &f32;
                let _38: &u32;
                let _39: &u32;
                let mut _47: &u32;
                let mut _48: &f32;
                scope 8 {
                    debug left_val => _27;
                    debug right_val => _28;
                    let _33: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _33;
                    }
                }
                scope 10 {
                    debug left_val => _38;
                    debug right_val => _39;
                    let _44: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _44;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = (const 1_u8, const 1_u8);
        _1 = U { a: move _2 };
        _4 = &(_1.1: u16);
        _50 = const _;
        _3 = (move _4, _50);
        _5 = (_3.0: &u16);
        _6 = (_3.1: &u16);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<u16, u16>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        _14 = Shl(const 2_u16, const 8_i32);
        (_1.1: u16) = Add(move _14, const 2_u16);
        _16 = &(_1.0: (u8, u8));
        _49 = const _;
        _15 = (move _16, _49);
        _17 = (_15.0: &(u8, u8));
        _18 = (_15.1: &(u8, u8));
        _20 = <(u8, u8) as PartialEq>::eq(_17, _18) -> [return: bb3, unwind continue];
    }

    bb3: {
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<(u8, u8), (u8, u8)>(move _21, _17, _18, move _23) -> unwind continue;
    }

    bb5: {
        _24 = W { a: const 2139095040_u32 };
        _26 = &(_24.1: f32);
        _48 = const _;
        _25 = (move _26, _48);
        _27 = (_25.0: &f32);
        _28 = (_25.1: &f32);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<f32, f32>(move _33, _27, _28, move _35) -> unwind continue;
    }

    bb7: {
        (_24.1: f32) = const _;
        _37 = &(_24.0: u32);
        _47 = const _;
        _36 = (move _37, _47);
        _38 = (_36.0: &u32);
        _39 = (_36.1: &u32);
        _42 = (*_38);
        _43 = (*_39);
        _41 = Eq(move _42, move _43);
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<u32, u32>(move _44, _38, _39, move _46) -> unwind continue;
    }

    bb9: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 4286578688_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &(u8, u8) = {
    let mut _0: &(u8, u8);
    let mut _1: (u8, u8);

    bb0: {
        _1 = (const 2_u8, const 2_u8);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;
    let mut _2: u16;

    bb0: {
        _2 = Shl(const 1_u16, const 8_i32);
        _1 = Add(move _2, const 1_u16);
        _0 = &_1;
        return;
    }
}
