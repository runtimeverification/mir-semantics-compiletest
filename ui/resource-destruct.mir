// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/resource-destruct.rs:10:1: 10:38>::drop(_1: &mut shrinky_pointer<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let _5: ();
    let mut _6: isize;
    let mut _7: isize;
    let mut _8: &[&str; 1];
    let mut _9: &std::cell::Cell<isize>;
    let mut _10: &std::cell::Cell<isize>;

    bb0: {
        _8 = const _;
        _4 = _8 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _print(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = deref_copy ((*_1).0: &std::cell::Cell<isize>);
        _10 = deref_copy ((*_1).0: &std::cell::Cell<isize>);
        _7 = Cell::<isize>::get(_10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = Sub(move _7, const 1_isize);
        _5 = Cell::<isize>::set(_9, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in <impl at ui/resource-destruct.rs:10:1: 10:38>::drop: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Hello!\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at ui/resource-destruct.rs:16:1: 16:29>::look_at(_1: &shrinky_pointer<'_>) -> isize {
    debug self => _1;
    let mut _0: isize;
    let mut _2: &std::cell::Cell<isize>;

    bb0: {
        _2 = deref_copy ((*_1).0: &std::cell::Cell<isize>);
        _0 = Cell::<isize>::get(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn shrinky_pointer(_1: &Cell<isize>) -> shrinky_pointer<'_> {
    debug i => _1;
    let mut _0: shrinky_pointer<'_>;

    bb0: {
        _0 = shrinky_pointer::<'_> { i: _1 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &std::cell::Cell<isize>;
    let _2: std::cell::Cell<isize>;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let _6: isize;
    let mut _7: &shrinky_pointer<'_>;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let _17: ();
    let mut _18: std::fmt::Arguments<'_>;
    let mut _19: &[&str];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let _21: &[core::fmt::rt::Argument<'_>; 1];
    let _22: [core::fmt::rt::Argument<'_>; 1];
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &isize;
    let _25: isize;
    let mut _26: (&isize, &isize);
    let mut _27: &isize;
    let _28: isize;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: isize;
    let mut _34: isize;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug my_total => _1;
        let _3: shrinky_pointer<'_>;
        let _29: &isize;
        let _30: &isize;
        let mut _38: &isize;
        let mut _39: &[&str; 2];
        scope 2 {
            debug pt => _3;
            let _8: &isize;
            let _9: &isize;
            let mut _40: &isize;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
        }
        scope 5 {
            debug left_val => _29;
            debug right_val => _30;
            let _35: core::panicking::AssertKind;
            scope 6 {
                debug kind => _35;
            }
        }
    }

    bb0: {
        _2 = Cell::<isize>::new(const 10_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = &_2;
        _3 = shrinky_pointer(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = &_3;
        _6 = shrinky_pointer::<'_>::look_at(move _7) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _5 = &_6;
        _40 = const _;
        _4 = (move _5, _40);
        _8 = (_4.0: &isize);
        _9 = (_4.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16) -> bb14;
    }

    bb5: {
        drop(_3) -> [return: bb6, unwind continue];
    }

    bb6: {
        _39 = const _;
        _19 = _39 as &[&str] (Pointer(Unsize));
        _25 = Cell::<isize>::get(_1) -> [return: bb7, unwind continue];
    }

    bb7: {
        _24 = &_25;
        _23 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_24) -> [return: bb8, unwind continue];
    }

    bb8: {
        _22 = [move _23];
        _21 = &_22;
        _20 = _21 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _18 = Arguments::<'_>::new_v1(move _19, move _20) -> [return: bb9, unwind continue];
    }

    bb9: {
        _17 = _print(move _18) -> [return: bb10, unwind continue];
    }

    bb10: {
        _28 = Cell::<isize>::get(_1) -> [return: bb11, unwind continue];
    }

    bb11: {
        _27 = &_28;
        _38 = const _;
        _26 = (move _27, _38);
        _29 = (_26.0: &isize);
        _30 = (_26.1: &isize);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<isize, isize>(move _35, _29, _30, move _37) -> unwind continue;
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 9_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "my_total = ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}
