// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: Box<isize>) -> () {
    debug x => _1;                       // in scope 0 at ui/box/new-box.rs:3:6: 3:7
    let mut _0: ();                      // return place in scope 0 at ui/box/new-box.rs:3:21: 3:21
    let _2: &isize;                      // in scope 0 at ui/box/new-box.rs:4:9: 4:10
    let _3: &isize;                      // in scope 0 at ui/box/new-box.rs:4:21: 4:24
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/box/new-box.rs:5:14: 5:18
    let mut _7: &[&str; 2];              // in scope 0 at ui/box/new-box.rs:5:14: 5:18
    let _8: &[&str; 2];                  // in scope 0 at ui/box/new-box.rs:5:14: 5:18
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/box/new-box.rs:5:20: 5:22
    let mut _14: &isize;                 // in scope 0 at ui/box/new-box.rs:5:20: 5:22
    let _15: &isize;                     // in scope 0 at ui/box/new-box.rs:5:20: 5:22
    let _16: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _17: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _18: &[&str];                // in scope 0 at ui/box/new-box.rs:6:14: 6:18
    let mut _19: &[&str; 2];             // in scope 0 at ui/box/new-box.rs:6:14: 6:18
    let _20: &[&str; 2];                 // in scope 0 at ui/box/new-box.rs:6:14: 6:18
    let mut _21: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _22: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _23: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _24: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _25: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/box/new-box.rs:6:20: 6:22
    let mut _26: &isize;                 // in scope 0 at ui/box/new-box.rs:6:20: 6:22
    let _27: &isize;                     // in scope 0 at ui/box/new-box.rs:6:20: 6:22
    let mut _30: *const isize;           // in scope 0 at ui/box/new-box.rs:3:6: 3:7
    let mut _31: *const isize;           // in scope 0 at ui/box/new-box.rs:3:6: 3:7
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/box/new-box.rs:4:9: 4:10
        let mut _28: &[&str; 2];         // in scope 1 at ui/box/new-box.rs:6:14: 6:18
        let mut _29: &[&str; 2];         // in scope 1 at ui/box/new-box.rs:5:14: 5:18
    }

    bb0: {
        _30 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 0 at ui/box/new-box.rs:4:21: 4:24
        _3 = &(*_30);                    // scope 0 at ui/box/new-box.rs:4:21: 4:24
        _2 = _3;                         // scope 0 at ui/box/new-box.rs:4:21: 4:24
        _29 = const _;                   // scope 1 at ui/box/new-box.rs:5:14: 5:18
                                         // mir::Constant
                                         // + span: ui/box/new-box.rs:5:14: 5:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(f, [], Some(promoted[1])) }
        _8 = _29;                        // scope 1 at ui/box/new-box.rs:5:14: 5:18
        _7 = _8;                         // scope 1 at ui/box/new-box.rs:5:14: 5:18
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 1 at ui/box/new-box.rs:5:14: 5:18
        _31 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 1 at ui/box/new-box.rs:5:20: 5:22
        _15 = &(*_31);                   // scope 1 at ui/box/new-box.rs:5:20: 5:22
        _14 = _15;                       // scope 1 at ui/box/new-box.rs:5:20: 5:22
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _14) -> [return: bb1, unwind: bb8]; // scope 1 at ui/box/new-box.rs:5:20: 5:22
                                         // mir::Constant
                                         // + span: ui/box/new-box.rs:5:20: 5:22
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = [move _13];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = &_12;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> [return: bb2, unwind: bb8]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = _print(move _5) -> [return: bb3, unwind: bb8]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _28 = const _;                   // scope 1 at ui/box/new-box.rs:6:14: 6:18
                                         // mir::Constant
                                         // + span: ui/box/new-box.rs:6:14: 6:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(f, [], Some(promoted[0])) }
        _20 = _28;                       // scope 1 at ui/box/new-box.rs:6:14: 6:18
        _19 = _20;                       // scope 1 at ui/box/new-box.rs:6:14: 6:18
        _18 = move _19 as &[&str] (Pointer(Unsize)); // scope 1 at ui/box/new-box.rs:6:14: 6:18
        _27 = _2;                        // scope 1 at ui/box/new-box.rs:6:20: 6:22
        _26 = _27;                       // scope 1 at ui/box/new-box.rs:6:20: 6:22
        _25 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _26) -> [return: bb4, unwind: bb8]; // scope 1 at ui/box/new-box.rs:6:20: 6:22
                                         // mir::Constant
                                         // + span: ui/box/new-box.rs:6:20: 6:22
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb4: {
        _24 = [move _25];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _23 = &_24;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _22 = _23;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = move _22 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _17 = Arguments::<'_>::new_v1(move _18, move _21) -> [return: bb5, unwind: bb8]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = _print(move _17) -> [return: bb6, unwind: bb8]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at ui/box/new-box.rs:7:1: 7:2
    }

    bb7: {
        return;                          // scope 0 at ui/box/new-box.rs:7:2: 7:2
    }

    bb8 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at ui/box/new-box.rs:7:1: 7:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/box/new-box.rs:3:1: 7:2
    }
}

promoted[0] in f: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/box/new-box.rs:6:14: 6:18
    let mut _1: [&str; 2];               // in scope 0 at ui/box/new-box.rs:6:14: 6:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/box/new-box.rs:6:14: 6:18
                                         // mir::Constant
                                         // + span: ui/box/new-box.rs:6:14: 6:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/box/new-box.rs:6:14: 6:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/box/new-box.rs:6:14: 6:18
        return;                          // scope 0 at ui/box/new-box.rs:6:14: 6:18
    }
}

promoted[1] in f: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/box/new-box.rs:5:14: 5:18
    let mut _1: [&str; 2];               // in scope 0 at ui/box/new-box.rs:5:14: 5:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/box/new-box.rs:5:14: 5:18
                                         // mir::Constant
                                         // + span: ui/box/new-box.rs:5:14: 5:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/box/new-box.rs:5:14: 5:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/box/new-box.rs:5:14: 5:18
        return;                          // scope 0 at ui/box/new-box.rs:5:14: 5:18
    }
}

fn <impl at ui/box/new-box.rs:15:1: 15:22>::printme(_1: &Struct) -> () {
    debug self => _1;                    // in scope 0 at ui/box/new-box.rs:16:16: 16:21
    let mut _0: ();                      // return place in scope 0 at ui/box/new-box.rs:16:23: 16:23
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/box/new-box.rs:17:18: 17:32
    let mut _5: &[&str; 1];              // in scope 0 at ui/box/new-box.rs:17:18: 17:32
    let _6: &[&str; 1];                  // in scope 0 at ui/box/new-box.rs:17:18: 17:32
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[&str; 1];             // in scope 0 at ui/box/new-box.rs:17:18: 17:32

    bb0: {
        _11 = const _;                   // scope 0 at ui/box/new-box.rs:17:18: 17:32
                                         // mir::Constant
                                         // + span: ui/box/new-box.rs:17:18: 17:32
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<Struct as Trait>::printme, [], Some(promoted[1])) }
        _6 = _11;                        // scope 0 at ui/box/new-box.rs:17:18: 17:32
        _5 = _6;                         // scope 0 at ui/box/new-box.rs:17:18: 17:32
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/box/new-box.rs:17:18: 17:32
        _10 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(<Struct as Trait>::printme, [], Some(promoted[0])) }
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _print(move _3) -> bb2;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/box/new-box.rs:18:6: 18:6
    }
}

promoted[0] in <impl at ui/box/new-box.rs:15:1: 15:22>::printme: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in <impl at ui/box/new-box.rs:15:1: 15:22>::printme: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/box/new-box.rs:17:18: 17:32
    let mut _1: [&str; 1];               // in scope 0 at ui/box/new-box.rs:17:18: 17:32

    bb0: {
        _1 = [const "hello world!\n"];   // scope 0 at ui/box/new-box.rs:17:18: 17:32
                                         // mir::Constant
                                         // + span: ui/box/new-box.rs:17:18: 17:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/box/new-box.rs:17:18: 17:32
        return;                          // scope 0 at ui/box/new-box.rs:17:18: 17:32
    }
}

fn g(_1: Box<dyn Trait>) -> () {
    debug x => _1;                       // in scope 0 at ui/box/new-box.rs:21:6: 21:7
    let mut _0: ();                      // return place in scope 0 at ui/box/new-box.rs:21:25: 21:25
    let _2: ();                          // in scope 0 at ui/box/new-box.rs:22:5: 22:16
    let mut _3: &dyn Trait;              // in scope 0 at ui/box/new-box.rs:22:5: 22:16
    let _4: &dyn Trait;                  // in scope 0 at ui/box/new-box.rs:23:9: 23:10
    let mut _5: &dyn Trait;              // in scope 0 at ui/box/new-box.rs:23:25: 23:28
    let _6: &dyn Trait;                  // in scope 0 at ui/box/new-box.rs:23:25: 23:28
    let _7: ();                          // in scope 0 at ui/box/new-box.rs:24:5: 24:16
    let mut _8: &dyn Trait;              // in scope 0 at ui/box/new-box.rs:24:5: 24:16
    let mut _9: *const dyn Trait;        // in scope 0 at ui/box/new-box.rs:21:6: 21:7
    let mut _10: *const dyn Trait;       // in scope 0 at ui/box/new-box.rs:21:6: 21:7
    scope 1 {
        debug y => _4;                   // in scope 1 at ui/box/new-box.rs:23:9: 23:10
    }

    bb0: {
        _9 = (((_1.0: std::ptr::Unique<dyn Trait>).0: std::ptr::NonNull<dyn Trait>).0: *const dyn Trait); // scope 0 at ui/box/new-box.rs:22:5: 22:16
        _3 = &(*_9);                     // scope 0 at ui/box/new-box.rs:22:5: 22:16
        _2 = <dyn Trait as Trait>::printme(move _3) -> [return: bb1, unwind: bb4]; // scope 0 at ui/box/new-box.rs:22:5: 22:16
                                         // mir::Constant
                                         // + span: ui/box/new-box.rs:22:7: 22:14
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Trait) {<dyn Trait as Trait>::printme}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = (((_1.0: std::ptr::Unique<dyn Trait>).0: std::ptr::NonNull<dyn Trait>).0: *const dyn Trait); // scope 0 at ui/box/new-box.rs:23:25: 23:28
        _6 = &(*_10);                    // scope 0 at ui/box/new-box.rs:23:25: 23:28
        _5 = _6;                         // scope 0 at ui/box/new-box.rs:23:25: 23:28
        _4 = move _5 as &dyn Trait (Pointer(Unsize)); // scope 0 at ui/box/new-box.rs:23:25: 23:28
        _8 = _4;                         // scope 1 at ui/box/new-box.rs:24:5: 24:16
        _7 = <dyn Trait as Trait>::printme(move _8) -> [return: bb2, unwind: bb4]; // scope 1 at ui/box/new-box.rs:24:5: 24:16
                                         // mir::Constant
                                         // + span: ui/box/new-box.rs:24:7: 24:14
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Trait) {<dyn Trait as Trait>::printme}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/box/new-box.rs:25:1: 25:2
    }

    bb3: {
        return;                          // scope 0 at ui/box/new-box.rs:25:2: 25:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/box/new-box.rs:25:1: 25:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/box/new-box.rs:21:1: 25:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/box/new-box.rs:27:11: 27:11
    let _1: ();                          // in scope 0 at ui/box/new-box.rs:28:5: 28:22
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/box/new-box.rs:28:7: 28:21
    let _3: ();                          // in scope 0 at ui/box/new-box.rs:29:5: 29:42
    let mut _4: std::boxed::Box<dyn Trait>; // in scope 0 at ui/box/new-box.rs:29:7: 29:41
    let mut _5: std::boxed::Box<dyn Trait>; // in scope 0 at ui/box/new-box.rs:29:7: 29:41
    let mut _6: std::boxed::Box<dyn Trait>; // in scope 0 at ui/box/new-box.rs:29:7: 29:41
    let mut _7: std::boxed::Box<Struct>; // in scope 0 at ui/box/new-box.rs:29:7: 29:23
    let mut _8: Struct;                  // in scope 0 at ui/box/new-box.rs:29:16: 29:22

    bb0: {
        _2 = Box::<isize>::new(const 1234_isize) -> bb1; // scope 0 at ui/box/new-box.rs:28:7: 28:21
                                         // mir::Constant
                                         // + span: ui/box/new-box.rs:28:7: 28:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = f(move _2) -> bb2;          // scope 0 at ui/box/new-box.rs:28:5: 28:22
                                         // mir::Constant
                                         // + span: ui/box/new-box.rs:28:5: 28:6
                                         // + literal: Const { ty: fn(Box<isize>) {f}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Box::<Struct>::new(move _8) -> bb3; // scope 0 at ui/box/new-box.rs:29:7: 29:23
                                         // mir::Constant
                                         // + span: ui/box/new-box.rs:29:7: 29:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Struct) -> Box<Struct> {Box::<Struct>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = move _7 as std::boxed::Box<dyn Trait> (Pointer(Unsize)); // scope 0 at ui/box/new-box.rs:29:7: 29:23
        _5 = move _6;                    // scope 0 at ui/box/new-box.rs:29:7: 29:41
        _4 = move _5 as std::boxed::Box<dyn Trait> (Pointer(Unsize)); // scope 0 at ui/box/new-box.rs:29:7: 29:41
        _3 = g(move _4) -> bb4;          // scope 0 at ui/box/new-box.rs:29:5: 29:42
                                         // mir::Constant
                                         // + span: ui/box/new-box.rs:29:5: 29:6
                                         // + literal: Const { ty: fn(Box<(dyn Trait + 'static)>) {g}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/box/new-box.rs:30:2: 30:2
    }
}
