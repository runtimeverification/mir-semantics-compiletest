// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: Box<isize>) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: &isize;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &isize;
    let _11: ();
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: [core::fmt::rt::Argument<'_>; 1];
    let mut _17: core::fmt::rt::Argument<'_>;
    let mut _20: *const isize;
    let mut _21: *const isize;
    let mut _28: *const ();
    let mut _29: usize;
    let mut _30: usize;
    let mut _31: usize;
    let mut _32: usize;
    let mut _33: bool;
    scope 1 {
        debug y => _2;
        let mut _18: &[&str; 2];
        let mut _19: &[&str; 2];
        let mut _22: *const ();
        let mut _23: usize;
        let mut _24: usize;
        let mut _25: usize;
        let mut _26: usize;
        let mut _27: bool;
    }

    bb0: {
        _20 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _28 = _20 as *const () (PtrToPtr);
        _29 = _28 as usize (Transmute);
        _30 = AlignOf(isize);
        _31 = Sub(_30, const 1_usize);
        _32 = BitAnd(_29, _31);
        _33 = Eq(_32, const 0_usize);
        assert(_33, "misaligned pointer dereference: address must be a multiple of {} but is {}", _30, _29) -> [success: bb11, unwind unreachable];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _3 = _print(move _4) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _18 = const _;
        _13 = _18 as &[&str] (Pointer(Unsize));
        _17 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_2) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _16 = [move _17];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _11 = _print(move _12) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_1) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10: {
        _10 = &(*_21);
        _9 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_10) -> [return: bb1, unwind: bb8];
    }

    bb11: {
        _2 = &(*_20);
        _19 = const _;
        _5 = _19 as &[&str] (Pointer(Unsize));
        _21 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _22 = _21 as *const () (PtrToPtr);
        _23 = _22 as usize (Transmute);
        _24 = AlignOf(isize);
        _25 = Sub(_24, const 1_usize);
        _26 = BitAnd(_23, _25);
        _27 = Eq(_26, const 0_usize);
        assert(_27, "misaligned pointer dereference: address must be a multiple of {} but is {}", _24, _23) -> [success: bb10, unwind unreachable];
    }
}

promoted[0] in f: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in f: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at ui/box/new-box.rs:15:1: 15:22>::printme(_1: &Struct) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[&str; 1];

    bb0: {
        _5 = const _;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _print(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in <impl at ui/box/new-box.rs:15:1: 15:22>::printme: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "hello world!\n"];
        _0 = &_1;
        return;
    }
}

fn g(_1: Box<dyn Trait>) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &dyn Trait;
    let _4: &dyn Trait;
    let _5: ();
    let mut _6: *const dyn Trait;
    let mut _7: *const dyn Trait;
    scope 1 {
        debug y => _4;
    }

    bb0: {
        _6 = (((_1.0: std::ptr::Unique<dyn Trait>).0: std::ptr::NonNull<dyn Trait>).0: *const dyn Trait);
        _3 = &(*_6);
        _2 = <dyn Trait as Trait>::printme(move _3) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _7 = (((_1.0: std::ptr::Unique<dyn Trait>).0: std::ptr::NonNull<dyn Trait>).0: *const dyn Trait);
        _4 = &(*_7);
        _5 = <dyn Trait as Trait>::printme(_4) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::boxed::Box<isize>;
    let _3: ();
    let mut _4: std::boxed::Box<dyn Trait>;
    let mut _5: std::boxed::Box<Struct>;

    bb0: {
        _2 = Box::<isize>::new(const 1234_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = f(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = Box::<Struct>::new(const Struct) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = move _5 as std::boxed::Box<dyn Trait> (Pointer(Unsize));
        _3 = g(move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}
