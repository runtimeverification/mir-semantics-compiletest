// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const EXPECTED: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "boooo!";
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::ThinBox<dyn std::error::Error>;
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let _5: &std::boxed::ThinBox<dyn std::error::Error>;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: &std::boxed::ThinBox<dyn std::error::Error>;
    let mut _17: (&&str, &std::string::String);
    let mut _18: &std::string::String;
    let mut _21: bool;
    let mut _22: bool;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&usize, &usize);
    let mut _28: &usize;
    let _29: usize;
    let _30: &std::boxed::ThinBox<Foo>;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: usize;
    let mut _36: usize;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: &std::boxed::ThinBox<Foo>;
    let mut _42: (&&str, &std::string::String);
    let mut _43: &std::string::String;
    let mut _46: bool;
    let mut _47: bool;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: &mut std::boxed::ThinBox<Foo>;
    let mut _54: &&mut Foo;
    let mut _55: (&&str, &std::string::String);
    let mut _56: &std::string::String;
    let mut _59: bool;
    let mut _60: bool;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug thin_error => _1;
        let _6: &usize;
        let _7: &usize;
        let _15: std::string::String;
        let mut _68: &usize;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug msg => _15;
            let _19: &&str;
            let _20: &std::string::String;
            let mut _26: std::boxed::ThinBox<Foo>;
            let mut _67: &&str;
            scope 5 {
                debug left_val => _19;
                debug right_val => _20;
                let _23: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _23;
                }
            }
            scope 7 {
                debug thin_concrete_error => _26;
                let _31: &usize;
                let _32: &usize;
                let _40: std::string::String;
                let mut _66: &usize;
                scope 8 {
                    debug left_val => _31;
                    debug right_val => _32;
                    let _37: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _37;
                    }
                }
                scope 10 {
                    debug msg => _40;
                    let _44: &&str;
                    let _45: &std::string::String;
                    let _51: &mut Foo;
                    let mut _65: &&str;
                    scope 11 {
                        debug left_val => _44;
                        debug right_val => _45;
                        let _48: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _48;
                        }
                    }
                    scope 13 {
                        debug inner => _51;
                        let _53: std::string::String;
                        scope 14 {
                            debug msg => _53;
                            let _57: &&str;
                            let _58: &std::string::String;
                            let mut _64: &&str;
                            scope 15 {
                                debug left_val => _57;
                                debug right_val => _58;
                                let _61: core::panicking::AssertKind;
                                scope 16 {
                                    debug kind => _61;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = ThinBox::<dyn std::error::Error>::new_unsize::<Foo>(const Foo) -> [return: bb1, unwind continue];
    }

    bb1: {
        _68 = const _;
        _5 = &_1;
        _4 = std::mem::size_of_val::<ThinBox<dyn std::error::Error>>(_5) -> [return: bb2, unwind: bb31];
    }

    bb2: {
        _3 = &_4;
        _2 = (_68, move _3);
        _6 = (_2.0: &usize);
        _7 = (_2.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14) -> bb31;
    }

    bb4: {
        _16 = &_1;
        _15 = <ThinBox<dyn std::error::Error> as ToString>::to_string(move _16) -> [return: bb5, unwind: bb31];
    }

    bb5: {
        _67 = const _;
        _18 = &_15;
        _17 = (_67, move _18);
        _19 = (_17.0: &&str);
        _20 = (_17.1: &std::string::String);
        _22 = <&str as PartialEq<String>>::eq(_19, _20) -> [return: bb6, unwind: bb30];
    }

    bb6: {
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<&str, String>(move _23, _19, _20, move _25) -> bb30;
    }

    bb8: {
        _26 = ThinBox::<Foo>::new(const Foo) -> [return: bb9, unwind: bb30];
    }

    bb9: {
        _66 = const _;
        _30 = &_26;
        _29 = std::mem::size_of_val::<ThinBox<Foo>>(_30) -> [return: bb10, unwind: bb29];
    }

    bb10: {
        _28 = &_29;
        _27 = (_66, move _28);
        _31 = (_27.0: &usize);
        _32 = (_27.1: &usize);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<usize, usize>(move _37, _31, _32, move _39) -> bb29;
    }

    bb12: {
        _41 = &_26;
        _40 = <ThinBox<Foo> as ToString>::to_string(move _41) -> [return: bb13, unwind: bb29];
    }

    bb13: {
        _65 = const _;
        _43 = &_40;
        _42 = (_65, move _43);
        _44 = (_42.0: &&str);
        _45 = (_42.1: &std::string::String);
        _47 = <&str as PartialEq<String>>::eq(_44, _45) -> [return: bb14, unwind: bb28];
    }

    bb14: {
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<&str, String>(move _48, _44, _45, move _50) -> bb28;
    }

    bb16: {
        _52 = &mut _26;
        _51 = <ThinBox<Foo> as DerefMut>::deref_mut(move _52) -> [return: bb17, unwind: bb28];
    }

    bb17: {
        _54 = &_51;
        _53 = <&mut Foo as ToString>::to_string(move _54) -> [return: bb18, unwind: bb28];
    }

    bb18: {
        _64 = const _;
        _56 = &_53;
        _55 = (_64, move _56);
        _57 = (_55.0: &&str);
        _58 = (_55.1: &std::string::String);
        _60 = <&str as PartialEq<String>>::eq(_57, _58) -> [return: bb19, unwind: bb27];
    }

    bb19: {
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<&str, String>(move _61, _57, _58, move _63) -> bb27;
    }

    bb21: {
        drop(_53) -> [return: bb22, unwind: bb28];
    }

    bb22: {
        drop(_40) -> [return: bb23, unwind: bb29];
    }

    bb23: {
        drop(_26) -> [return: bb24, unwind: bb30];
    }

    bb24: {
        drop(_15) -> [return: bb25, unwind: bb31];
    }

    bb25: {
        drop(_1) -> [return: bb26, unwind continue];
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        drop(_53) -> [return: bb28, unwind terminate];
    }

    bb28 (cleanup): {
        drop(_40) -> [return: bb29, unwind terminate];
    }

    bb29 (cleanup): {
        drop(_26) -> [return: bb30, unwind terminate];
    }

    bb30 (cleanup): {
        drop(_15) -> [return: bb31, unwind terminate];
    }

    bb31 (cleanup): {
        drop(_1) -> [return: bb32, unwind terminate];
    }

    bb32 (cleanup): {
        resume;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<*const i32>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<*const i32>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

fn <impl at ui/box/thin_zst.rs:25:10: 25:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Foo";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/box/thin_zst.rs:28:1: 28:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let mut _9: &&str;
    let mut _10: &[&str; 1];

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (Pointer(Unsize));
        _9 = const _;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Formatter::<'_>::write_fmt(_2, move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in <impl at ui/box/thin_zst.rs:28:1: 28:26>::fmt: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in <impl at ui/box/thin_zst.rs:28:1: 28:26>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}
