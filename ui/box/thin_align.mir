// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/box/thin_align.rs:8:11: 8:11
    let _1: &str;                        // in scope 0 at ui/box/thin_align.rs:9:9: 9:17
    let mut _3: Foo;                     // in scope 0 at ui/box/thin_align.rs:10:53: 10:66
    let mut _4: &str;                    // in scope 0 at ui/box/thin_align.rs:10:57: 10:65
    let mut _6: &std::boxed::ThinBox<dyn std::error::Error>; // in scope 0 at ui/box/thin_align.rs:11:13: 11:22
    let mut _8: &dyn std::error::Error;  // in scope 0 at ui/box/thin_align.rs:12:15: 12:28
    let mut _9: (&&str, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _10: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _11: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug expected => _1;            // in scope 1 at ui/box/thin_align.rs:9:9: 9:17
        let _2: std::boxed::ThinBox<dyn std::error::Error>; // in scope 1 at ui/box/thin_align.rs:10:9: 10:10
        scope 2 {
            debug a => _2;               // in scope 2 at ui/box/thin_align.rs:10:9: 10:10
            let _5: &dyn std::error::Error; // in scope 2 at ui/box/thin_align.rs:11:9: 11:10
            scope 3 {
                debug a => _5;           // in scope 3 at ui/box/thin_align.rs:11:9: 11:10
                let _7: std::string::String; // in scope 3 at ui/box/thin_align.rs:12:9: 12:12
                scope 4 {
                    debug msg => _7;     // in scope 4 at ui/box/thin_align.rs:12:9: 12:12
                    let _12: &&str;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _13: &std::string::String; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    scope 5 {
                        debug left_val => _12; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _13; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _18: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 6 {
                            debug kind => _18; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const "Foo error!";         // scope 0 at ui/box/thin_align.rs:9:20: 9:32
                                         // mir::Constant
                                         // + span: ui/box/thin_align.rs:9:20: 9:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _1;                         // scope 1 at ui/box/thin_align.rs:10:57: 10:65
        _3 = Foo(move _4);               // scope 1 at ui/box/thin_align.rs:10:53: 10:66
        _2 = ThinBox::<dyn std::error::Error>::new_unsize::<Foo>(move _3) -> bb1; // scope 1 at ui/box/thin_align.rs:10:33: 10:67
                                         // mir::Constant
                                         // + span: ui/box/thin_align.rs:10:33: 10:52
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Foo) -> ThinBox<dyn std::error::Error> {ThinBox::<dyn std::error::Error>::new_unsize::<Foo>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_2;                        // scope 2 at ui/box/thin_align.rs:11:13: 11:22
        _5 = <ThinBox<dyn std::error::Error> as Deref>::deref(move _6) -> [return: bb2, unwind: bb10]; // scope 2 at ui/box/thin_align.rs:11:13: 11:22
                                         // mir::Constant
                                         // + span: ui/box/thin_align.rs:11:15: 11:20
                                         // + literal: Const { ty: for<'a> fn(&'a ThinBox<dyn std::error::Error>) -> &'a <ThinBox<dyn std::error::Error> as Deref>::Target {<ThinBox<dyn std::error::Error> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _5;                         // scope 3 at ui/box/thin_align.rs:12:15: 12:28
        _7 = <dyn std::error::Error as ToString>::to_string(move _8) -> [return: bb3, unwind: bb10]; // scope 3 at ui/box/thin_align.rs:12:15: 12:28
                                         // mir::Constant
                                         // + span: ui/box/thin_align.rs:12:17: 12:26
                                         // + literal: Const { ty: for<'a> fn(&'a dyn std::error::Error) -> String {<dyn std::error::Error as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &_1;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _11 = &_7;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _9 = (move _10, move _11);       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_9.0: &&str);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_9.1: &std::string::String); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = _12;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = _13;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = <&str as PartialEq<String>>::eq(move _16, move _17) -> [return: bb4, unwind: bb9]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b String) -> bool {<&str as PartialEq<String>>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = Not(move _15);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _18 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<&str, String>(move _20, move _21, move _23, move _25) -> bb9; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, String>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_7) -> [return: bb7, unwind: bb10]; // scope 3 at ui/box/thin_align.rs:14:1: 14:2
    }

    bb7: {
        drop(_2) -> bb8;                 // scope 1 at ui/box/thin_align.rs:14:1: 14:2
    }

    bb8: {
        return;                          // scope 0 at ui/box/thin_align.rs:14:2: 14:2
    }

    bb9 (cleanup): {
        drop(_7) -> bb10;                // scope 3 at ui/box/thin_align.rs:14:1: 14:2
    }

    bb10 (cleanup): {
        drop(_2) -> bb11;                // scope 1 at ui/box/thin_align.rs:14:1: 14:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/box/thin_align.rs:8:1: 14:2
    }
}

fn <impl at ui/box/thin_align.rs:16:10: 16:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/box/thin_align.rs:16:10: 16:15
    debug f => _2;                       // in scope 0 at ui/box/thin_align.rs:16:10: 16:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/box/thin_align.rs:16:10: 16:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/box/thin_align.rs:16:10: 16:15
    let mut _4: &str;                    // in scope 0 at ui/box/thin_align.rs:16:10: 16:15
    let _5: &str;                        // in scope 0 at ui/box/thin_align.rs:16:10: 16:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/box/thin_align.rs:18:12: 18:24
    let mut _7: &&&str;                  // in scope 0 at ui/box/thin_align.rs:18:12: 18:24
    let _8: &&&str;                      // in scope 0 at ui/box/thin_align.rs:18:12: 18:24
    let _9: &&str;                       // in scope 0 at ui/box/thin_align.rs:18:12: 18:24

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/box/thin_align.rs:16:10: 16:15
        _5 = const "Foo";                // scope 0 at ui/box/thin_align.rs:16:10: 16:15
                                         // mir::Constant
                                         // + span: ui/box/thin_align.rs:16:10: 16:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/box/thin_align.rs:16:10: 16:15
        _9 = &((*_1).0: &str);           // scope 0 at ui/box/thin_align.rs:18:12: 18:24
        _8 = &_9;                        // scope 0 at ui/box/thin_align.rs:18:12: 18:24
        _7 = _8;                         // scope 0 at ui/box/thin_align.rs:18:12: 18:24
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/box/thin_align.rs:18:12: 18:24
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/box/thin_align.rs:16:10: 16:15
                                         // mir::Constant
                                         // + span: ui/box/thin_align.rs:16:10: 16:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/box/thin_align.rs:16:15: 16:15
    }
}

fn <impl at ui/box/thin_align.rs:20:1: 20:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/box/thin_align.rs:21:12: 21:17
    debug f => _2;                       // in scope 0 at ui/box/thin_align.rs:21:19: 21:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/box/thin_align.rs:21:50: 21:61
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _5: &[&str];                 // in scope 0 at ui/box/thin_align.rs:22:19: 22:23
    let mut _6: &[&str; 1];              // in scope 0 at ui/box/thin_align.rs:22:19: 22:23
    let _7: &[&str; 1];                  // in scope 0 at ui/box/thin_align.rs:22:19: 22:23
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/box/thin_align.rs:22:25: 22:31
    let mut _13: &&str;                  // in scope 0 at ui/box/thin_align.rs:22:25: 22:31
    let _14: &&str;                      // in scope 0 at ui/box/thin_align.rs:22:25: 22:31
    let mut _15: &[&str; 1];             // in scope 0 at ui/box/thin_align.rs:22:19: 22:23

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
        _15 = const _;                   // scope 0 at ui/box/thin_align.rs:22:19: 22:23
                                         // mir::Constant
                                         // + span: ui/box/thin_align.rs:22:19: 22:23
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<Foo as std::fmt::Display>::fmt, [], Some(promoted[0])) }
        _7 = _15;                        // scope 0 at ui/box/thin_align.rs:22:19: 22:23
        _6 = _7;                         // scope 0 at ui/box/thin_align.rs:22:19: 22:23
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/box/thin_align.rs:22:19: 22:23
        _14 = &((*_1).0: &str);          // scope 0 at ui/box/thin_align.rs:22:25: 22:31
        _13 = _14;                       // scope 0 at ui/box/thin_align.rs:22:25: 22:31
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _13) -> bb1; // scope 0 at ui/box/thin_align.rs:22:25: 22:31
                                         // mir::Constant
                                         // + span: ui/box/thin_align.rs:22:25: 22:31
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Formatter::<'_>::write_fmt(move _3, move _4) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/box/thin_align.rs:23:6: 23:6
    }
}

promoted[0] in <impl at ui/box/thin_align.rs:20:1: 20:26>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/box/thin_align.rs:22:19: 22:23
    let mut _1: [&str; 1];               // in scope 0 at ui/box/thin_align.rs:22:19: 22:23

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/box/thin_align.rs:22:19: 22:23
                                         // mir::Constant
                                         // + span: ui/box/thin_align.rs:22:19: 22:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/box/thin_align.rs:22:19: 22:23
        return;                          // scope 0 at ui/box/thin_align.rs:22:19: 22:23
    }
}

fn Foo(_1: &str) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/box/thin_align.rs:18:1: 18:11

    bb0: {
        _0 = Foo(move _1);               // scope 0 at ui/box/thin_align.rs:18:1: 18:11
        return;                          // scope 0 at ui/box/thin_align.rs:18:1: 18:11
    }
}

// MIR FOR CTFE
fn Foo(_1: &str) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/box/thin_align.rs:18:1: 18:11

    bb0: {
        _0 = Foo(move _1);               // scope 0 at ui/box/thin_align.rs:18:1: 18:11
        return;                          // scope 0 at ui/box/thin_align.rs:18:1: 18:11
    }
}
