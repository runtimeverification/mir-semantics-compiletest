// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/box/thin_drop.rs:8:11: 8:11
    let _1: &str;                        // in scope 0 at ui/box/thin_drop.rs:9:9: 9:17
    let mut _4: &str;                    // in scope 0 at ui/box/thin_drop.rs:12:23: 12:31
    let mut _5: &mut bool;               // in scope 0 at ui/box/thin_drop.rs:12:33: 12:45
    let mut _6: &mut bool;               // in scope 0 at ui/box/thin_drop.rs:12:33: 12:45
    let mut _8: Foo<'_>;                 // in scope 0 at ui/box/thin_drop.rs:13:57: 13:60
    let mut _10: &std::boxed::ThinBox<dyn std::error::Error>; // in scope 0 at ui/box/thin_drop.rs:14:17: 14:26
    let mut _12: &dyn std::error::Error; // in scope 0 at ui/box/thin_drop.rs:15:19: 15:32
    let mut _13: (&&str, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _14: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _15: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _30: bool;                   // in scope 0 at ui/box/thin_drop.rs:18:5: 18:21
    let mut _31: bool;                   // in scope 0 at ui/box/thin_drop.rs:18:13: 18:20
    let mut _32: !;                      // in scope 0 at ui/box/thin_drop.rs:18:5: 18:21
    scope 1 {
        debug expected => _1;            // in scope 1 at ui/box/thin_drop.rs:9:9: 9:17
        let mut _2: bool;                // in scope 1 at ui/box/thin_drop.rs:10:9: 10:20
        scope 2 {
            debug dropped => _2;         // in scope 2 at ui/box/thin_drop.rs:10:9: 10:20
            let _3: Foo<'_>;             // in scope 2 at ui/box/thin_drop.rs:12:13: 12:16
            scope 3 {
                debug foo => _3;         // in scope 3 at ui/box/thin_drop.rs:12:13: 12:16
                let _7: std::boxed::ThinBox<dyn std::error::Error>; // in scope 3 at ui/box/thin_drop.rs:13:13: 13:14
                scope 4 {
                    debug a => _7;       // in scope 4 at ui/box/thin_drop.rs:13:13: 13:14
                    let _9: &dyn std::error::Error; // in scope 4 at ui/box/thin_drop.rs:14:13: 14:14
                    scope 5 {
                        debug a => _9;   // in scope 5 at ui/box/thin_drop.rs:14:13: 14:14
                        let _11: std::string::String; // in scope 5 at ui/box/thin_drop.rs:15:13: 15:16
                        scope 6 {
                            debug msg => _11; // in scope 6 at ui/box/thin_drop.rs:15:13: 15:16
                            let _16: &&str; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            let _17: &std::string::String; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            scope 7 {
                                debug left_val => _16; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                debug right_val => _17; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _22: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                scope 8 {
                                    debug kind => _22; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const "Foo error!";         // scope 0 at ui/box/thin_drop.rs:9:20: 9:32
                                         // mir::Constant
                                         // + span: ui/box/thin_drop.rs:9:20: 9:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = const false;                // scope 1 at ui/box/thin_drop.rs:10:23: 10:28
        _4 = _1;                         // scope 2 at ui/box/thin_drop.rs:12:23: 12:31
        _6 = &mut _2;                    // scope 2 at ui/box/thin_drop.rs:12:33: 12:45
        _5 = &mut (*_6);                 // scope 2 at ui/box/thin_drop.rs:12:33: 12:45
        _3 = Foo::<'_>(move _4, move _5); // scope 2 at ui/box/thin_drop.rs:12:19: 12:46
        _8 = move _3;                    // scope 3 at ui/box/thin_drop.rs:13:57: 13:60
        _7 = ThinBox::<dyn std::error::Error>::new_unsize::<Foo<'_>>(move _8) -> bb1; // scope 3 at ui/box/thin_drop.rs:13:37: 13:61
                                         // mir::Constant
                                         // + span: ui/box/thin_drop.rs:13:37: 13:56
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Foo<'_>) -> ThinBox<dyn std::error::Error> {ThinBox::<dyn std::error::Error>::new_unsize::<Foo<'_>>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = &_7;                       // scope 4 at ui/box/thin_drop.rs:14:17: 14:26
        _9 = <ThinBox<dyn std::error::Error> as Deref>::deref(move _10) -> [return: bb2, unwind: bb12]; // scope 4 at ui/box/thin_drop.rs:14:17: 14:26
                                         // mir::Constant
                                         // + span: ui/box/thin_drop.rs:14:19: 14:24
                                         // + literal: Const { ty: for<'a> fn(&'a ThinBox<dyn std::error::Error>) -> &'a <ThinBox<dyn std::error::Error> as Deref>::Target {<ThinBox<dyn std::error::Error> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = _9;                        // scope 5 at ui/box/thin_drop.rs:15:19: 15:32
        _11 = <dyn std::error::Error as ToString>::to_string(move _12) -> [return: bb3, unwind: bb12]; // scope 5 at ui/box/thin_drop.rs:15:19: 15:32
                                         // mir::Constant
                                         // + span: ui/box/thin_drop.rs:15:21: 15:30
                                         // + literal: Const { ty: for<'a> fn(&'a dyn std::error::Error) -> String {<dyn std::error::Error as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = &_1;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _15 = &_11;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _13 = (move _14, move _15);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_13.0: &&str);            // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_13.1: &std::string::String); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = _16;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = _17;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = <&str as PartialEq<String>>::eq(move _20, move _21) -> [return: bb4, unwind: bb11]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b String) -> bool {<&str as PartialEq<String>>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = Not(move _19);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb6, otherwise: bb5]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _22 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<&str, String>(move _24, move _25, move _27, move _29) -> bb11; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, String>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_11) -> [return: bb7, unwind: bb12]; // scope 5 at ui/box/thin_drop.rs:17:5: 17:6
    }

    bb7: {
        drop(_7) -> bb8;                 // scope 3 at ui/box/thin_drop.rs:17:5: 17:6
    }

    bb8: {
        _31 = _2;                        // scope 2 at ui/box/thin_drop.rs:18:13: 18:20
        _30 = Not(move _31);             // scope 2 at ui/box/thin_drop.rs:18:5: 18:21
        switchInt(move _30) -> [0: bb10, otherwise: bb9]; // scope 2 at ui/box/thin_drop.rs:18:5: 18:21
    }

    bb9: {
        _32 = core::panicking::panic(const "assertion failed: dropped"); // scope 2 at ui/box/thin_drop.rs:18:5: 18:21
                                         // mir::Constant
                                         // + span: ui/box/thin_drop.rs:18:5: 18:21
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        return;                          // scope 0 at ui/box/thin_drop.rs:19:2: 19:2
    }

    bb11 (cleanup): {
        drop(_11) -> bb12;               // scope 5 at ui/box/thin_drop.rs:17:5: 17:6
    }

    bb12 (cleanup): {
        drop(_7) -> bb13;                // scope 3 at ui/box/thin_drop.rs:17:5: 17:6
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/box/thin_drop.rs:8:1: 19:2
    }
}

fn <impl at ui/box/thin_drop.rs:21:10: 21:15>::fmt(_1: &Foo<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/box/thin_drop.rs:21:10: 21:15
    debug f => _2;                       // in scope 0 at ui/box/thin_drop.rs:21:10: 21:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/box/thin_drop.rs:21:10: 21:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/box/thin_drop.rs:21:10: 21:15
    let mut _4: &str;                    // in scope 0 at ui/box/thin_drop.rs:21:10: 21:15
    let _5: &str;                        // in scope 0 at ui/box/thin_drop.rs:21:10: 21:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/box/thin_drop.rs:23:16: 23:28
    let mut _7: &&str;                   // in scope 0 at ui/box/thin_drop.rs:23:16: 23:28
    let _8: &&str;                       // in scope 0 at ui/box/thin_drop.rs:23:16: 23:28
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/box/thin_drop.rs:23:30: 23:42
    let mut _10: &&&mut bool;            // in scope 0 at ui/box/thin_drop.rs:23:30: 23:42
    let _11: &&&mut bool;                // in scope 0 at ui/box/thin_drop.rs:23:30: 23:42
    let _12: &&mut bool;                 // in scope 0 at ui/box/thin_drop.rs:23:30: 23:42

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/box/thin_drop.rs:21:10: 21:15
        _5 = const "Foo";                // scope 0 at ui/box/thin_drop.rs:21:10: 21:15
                                         // mir::Constant
                                         // + span: ui/box/thin_drop.rs:21:10: 21:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/box/thin_drop.rs:21:10: 21:15
        _8 = &((*_1).0: &str);           // scope 0 at ui/box/thin_drop.rs:23:16: 23:28
        _7 = _8;                         // scope 0 at ui/box/thin_drop.rs:23:16: 23:28
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/box/thin_drop.rs:23:16: 23:28
        _12 = &((*_1).1: &mut bool);     // scope 0 at ui/box/thin_drop.rs:23:30: 23:42
        _11 = &_12;                      // scope 0 at ui/box/thin_drop.rs:23:30: 23:42
        _10 = _11;                       // scope 0 at ui/box/thin_drop.rs:23:30: 23:42
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/box/thin_drop.rs:23:30: 23:42
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _3, move _4, move _6, move _9) -> bb1; // scope 0 at ui/box/thin_drop.rs:21:10: 21:15
                                         // mir::Constant
                                         // + span: ui/box/thin_drop.rs:21:10: 21:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/box/thin_drop.rs:21:15: 21:15
    }
}

fn <impl at ui/box/thin_drop.rs:25:1: 25:22>::drop(_1: &mut Foo<'_>) -> () {
    debug self => _1;                    // in scope 0 at ui/box/thin_drop.rs:26:13: 26:22
    let mut _0: ();                      // return place in scope 0 at ui/box/thin_drop.rs:26:24: 26:24
    let mut _2: &mut bool;               // in scope 0 at ui/box/thin_drop.rs:26:13: 26:22

    bb0: {
        _2 = deref_copy ((*_1).1: &mut bool); // scope 0 at ui/box/thin_drop.rs:27:9: 27:23
        (*_2) = const true;              // scope 0 at ui/box/thin_drop.rs:27:9: 27:23
        return;                          // scope 0 at ui/box/thin_drop.rs:28:6: 28:6
    }
}

fn <impl at ui/box/thin_drop.rs:31:1: 31:30>::fmt(_1: &Foo<'_>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/box/thin_drop.rs:32:12: 32:17
    debug f => _2;                       // in scope 0 at ui/box/thin_drop.rs:32:19: 32:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/box/thin_drop.rs:32:50: 32:61
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _5: &[&str];                 // in scope 0 at ui/box/thin_drop.rs:33:19: 33:23
    let mut _6: &[&str; 1];              // in scope 0 at ui/box/thin_drop.rs:33:19: 33:23
    let _7: &[&str; 1];                  // in scope 0 at ui/box/thin_drop.rs:33:19: 33:23
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/box/thin_drop.rs:33:25: 33:31
    let mut _13: &&str;                  // in scope 0 at ui/box/thin_drop.rs:33:25: 33:31
    let _14: &&str;                      // in scope 0 at ui/box/thin_drop.rs:33:25: 33:31
    let mut _15: &[&str; 1];             // in scope 0 at ui/box/thin_drop.rs:33:19: 33:23

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
        _15 = const _;                   // scope 0 at ui/box/thin_drop.rs:33:19: 33:23
                                         // mir::Constant
                                         // + span: ui/box/thin_drop.rs:33:19: 33:23
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<Foo<'_> as std::fmt::Display>::fmt, [ReErased], Some(promoted[0])) }
        _7 = _15;                        // scope 0 at ui/box/thin_drop.rs:33:19: 33:23
        _6 = _7;                         // scope 0 at ui/box/thin_drop.rs:33:19: 33:23
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/box/thin_drop.rs:33:19: 33:23
        _14 = &((*_1).0: &str);          // scope 0 at ui/box/thin_drop.rs:33:25: 33:31
        _13 = _14;                       // scope 0 at ui/box/thin_drop.rs:33:25: 33:31
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _13) -> bb1; // scope 0 at ui/box/thin_drop.rs:33:25: 33:31
                                         // mir::Constant
                                         // + span: ui/box/thin_drop.rs:33:25: 33:31
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Formatter::<'_>::write_fmt(move _3, move _4) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/box/thin_drop.rs:34:6: 34:6
    }
}

promoted[0] in <impl at ui/box/thin_drop.rs:31:1: 31:30>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/box/thin_drop.rs:33:19: 33:23
    let mut _1: [&str; 1];               // in scope 0 at ui/box/thin_drop.rs:33:19: 33:23

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/box/thin_drop.rs:33:19: 33:23
                                         // mir::Constant
                                         // + span: ui/box/thin_drop.rs:33:19: 33:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/box/thin_drop.rs:33:19: 33:23
        return;                          // scope 0 at ui/box/thin_drop.rs:33:19: 33:23
    }
}

fn Foo(_1: &str, _2: &mut bool) -> Foo<'_> {
    let mut _0: Foo<'_>;                 // return place in scope 0 at ui/box/thin_drop.rs:23:1: 23:15

    bb0: {
        _0 = Foo::<'_>(move _1, move _2); // scope 0 at ui/box/thin_drop.rs:23:1: 23:15
        return;                          // scope 0 at ui/box/thin_drop.rs:23:1: 23:15
    }
}

// MIR FOR CTFE
fn Foo(_1: &str, _2: &mut bool) -> Foo<'_> {
    let mut _0: Foo<'_>;                 // return place in scope 0 at ui/box/thin_drop.rs:23:1: 23:15

    bb0: {
        _0 = Foo::<'_>(move _1, move _2); // scope 0 at ui/box/thin_drop.rs:23:1: 23:15
        return;                          // scope 0 at ui/box/thin_drop.rs:23:1: 23:15
    }
}
