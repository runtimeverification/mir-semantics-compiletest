// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
BigAllocator::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn <impl at ui/box/large-allocator-ice.rs:9:1: 9:39>::allocate(_1: &BigAllocator, _2: Layout) -> Result<NonNull<[u8]>, std::alloc::AllocError> {
    debug self => _1;
    let mut _0: std::result::Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError>;
    let mut _3: !;

    bb0: {
        _3 = core::panicking::panic(const "not yet implemented") -> unwind continue;
    }
}

fn <impl at ui/box/large-allocator-ice.rs:9:1: 9:39>::deallocate(_1: &BigAllocator, _2: NonNull<u8>, _3: Layout) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _4: !;

    bb0: {
        _4 = core::panicking::panic(const "not yet implemented") -> unwind continue;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<(), &std::alloc::Global>;
    let _2: std::boxed::Box<(), BigAllocator>;
    let mut _3: BigAllocator;
    let mut _4: [usize; 2];
    let _5: ();
    let mut _6: &std::alloc::Global;

    bb0: {
        _6 = const _;
        _1 = Box::<(), &std::alloc::Global>::new_in(const (), _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = [const 0_usize; 2];
        _3 = BigAllocator(move _4);
        _2 = Box::<(), BigAllocator>::new_in(const (), move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = generic_function::<i32>(const 0_i32) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

promoted[0] in main: &std::alloc::Global = {
    let mut _0: &std::alloc::Global;
    let mut _1: std::alloc::Global;

    bb0: {
        _1 = std::alloc::Global;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn generic_function(_1: T) -> () {
    debug val => _1;
    let mut _0: ();
    let _2: T;
    let mut _3: std::boxed::Box<T, &std::alloc::Global>;
    let mut _4: &std::alloc::Global;
    let mut _5: &mut std::boxed::Box<T, &std::alloc::Global>;
    let mut _6: ();
    let mut _7: &mut std::boxed::Box<T, &std::alloc::Global>;
    let mut _8: ();
    let mut _9: *const T;
    let mut _10: *const ();
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: bool;

    bb0: {
        _4 = const _;
        _3 = Box::<T, &std::alloc::Global>::new_in(move _1, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = (((_3.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T);
        _10 = _9 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(T);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb6, unwind unreachable];
    }

    bb2 (cleanup): {
        resume;
    }

    bb3: {
        return;
    }

    bb4: {
        _5 = &mut _3;
        _6 = <Box<T, &std::alloc::Global> as Drop>::drop(move _5) -> [return: bb3, unwind continue];
    }

    bb5 (cleanup): {
        _7 = &mut _3;
        _8 = <Box<T, &std::alloc::Global> as Drop>::drop(move _7) -> [return: bb2, unwind terminate];
    }

    bb6: {
        _2 = move (*_9);
        drop(_2) -> [return: bb4, unwind: bb5];
    }
}

promoted[0] in generic_function: &std::alloc::Global = {
    let mut _0: &std::alloc::Global;
    let mut _1: std::alloc::Global;

    bb0: {
        _1 = std::alloc::Global;
        _0 = &_1;
        return;
    }
}

fn BigAllocator(_1: [usize; 2]) -> BigAllocator {
    let mut _0: BigAllocator;

    bb0: {
        _0 = BigAllocator(move _1);
        return;
    }
}

// MIR FOR CTFE
fn BigAllocator(_1: [usize; 2]) -> BigAllocator {
    let mut _0: BigAllocator;

    bb0: {
        _0 = BigAllocator(move _1);
        return;
    }
}
