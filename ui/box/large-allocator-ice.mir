// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
BigAllocator::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/box/large-allocator-ice.rs:7:29: 7:30

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/box/large-allocator-ice.rs:7:29: 7:30
        return;                          // scope 0 at ui/box/large-allocator-ice.rs:7:29: 7:30
    }
}

fn <impl at ui/box/large-allocator-ice.rs:9:1: 9:39>::allocate(_1: &BigAllocator, _2: Layout) -> Result<NonNull<[u8]>, std::alloc::AllocError> {
    debug self => _1;                    // in scope 0 at ui/box/large-allocator-ice.rs:11:9: 11:14
    let mut _0: std::result::Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError>; // return place in scope 0 at ui/box/large-allocator-ice.rs:13:10: 13:65
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _3 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn <impl at ui/box/large-allocator-ice.rs:9:1: 9:39>::deallocate(_1: &BigAllocator, _2: NonNull<u8>, _3: Layout) -> () {
    debug self => _1;                    // in scope 0 at ui/box/large-allocator-ice.rs:16:26: 16:31
    let mut _0: ();                      // return place in scope 0 at ui/box/large-allocator-ice.rs:16:82: 16:82
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _4 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/box/large-allocator-ice.rs:21:11: 21:11
    let _1: std::boxed::Box<(), &std::alloc::Global>; // in scope 0 at ui/box/large-allocator-ice.rs:22:5: 22:41
    let mut _2: ();                      // in scope 0 at ui/box/large-allocator-ice.rs:22:17: 22:19
    let mut _3: &std::alloc::Global;     // in scope 0 at ui/box/large-allocator-ice.rs:22:21: 22:40
    let _4: std::boxed::Box<(), BigAllocator>; // in scope 0 at ui/box/large-allocator-ice.rs:23:5: 23:42
    let mut _5: ();                      // in scope 0 at ui/box/large-allocator-ice.rs:23:17: 23:19
    let mut _6: BigAllocator;            // in scope 0 at ui/box/large-allocator-ice.rs:23:21: 23:41
    let mut _7: [usize; 2];              // in scope 0 at ui/box/large-allocator-ice.rs:23:34: 23:40
    let _8: ();                          // in scope 0 at ui/box/large-allocator-ice.rs:24:5: 24:24
    let mut _9: &std::alloc::Global;     // in scope 0 at ui/box/large-allocator-ice.rs:22:21: 22:40

    bb0: {
        _9 = const _;                    // scope 0 at ui/box/large-allocator-ice.rs:22:21: 22:40
                                         // mir::Constant
                                         // + span: ui/box/large-allocator-ice.rs:22:21: 22:40
                                         // + literal: Const { ty: &std::alloc::Global, val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _9;                         // scope 0 at ui/box/large-allocator-ice.rs:22:21: 22:40
        _1 = Box::<(), &std::alloc::Global>::new_in(move _2, move _3) -> bb1; // scope 0 at ui/box/large-allocator-ice.rs:22:5: 22:41
                                         // mir::Constant
                                         // + span: ui/box/large-allocator-ice.rs:22:5: 22:16
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn((), &std::alloc::Global) -> Box<(), &std::alloc::Global> {Box::<(), &std::alloc::Global>::new_in}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/box/large-allocator-ice.rs:22:41: 22:42
    }

    bb2: {
        _7 = [const 0_usize; 2];         // scope 0 at ui/box/large-allocator-ice.rs:23:34: 23:40
        _6 = BigAllocator(move _7);      // scope 0 at ui/box/large-allocator-ice.rs:23:21: 23:41
        _4 = Box::<(), BigAllocator>::new_in(move _5, move _6) -> bb3; // scope 0 at ui/box/large-allocator-ice.rs:23:5: 23:42
                                         // mir::Constant
                                         // + span: ui/box/large-allocator-ice.rs:23:5: 23:16
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn((), BigAllocator) -> Box<(), BigAllocator> {Box::<(), BigAllocator>::new_in}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_4) -> bb4;                 // scope 0 at ui/box/large-allocator-ice.rs:23:42: 23:43
    }

    bb4: {
        _8 = generic_function::<i32>(const 0_i32) -> bb5; // scope 0 at ui/box/large-allocator-ice.rs:24:5: 24:24
                                         // mir::Constant
                                         // + span: ui/box/large-allocator-ice.rs:24:5: 24:21
                                         // + literal: Const { ty: fn(i32) {generic_function::<i32>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/box/large-allocator-ice.rs:25:2: 25:2
    }
}

promoted[0] in main: &std::alloc::Global = {
    let mut _0: &std::alloc::Global;     // return place in scope 0 at ui/box/large-allocator-ice.rs:22:21: 22:40
    let mut _1: std::alloc::Global;      // in scope 0 at ui/box/large-allocator-ice.rs:22:22: 22:40

    bb0: {
        _1 = std::alloc::Global;         // scope 0 at ui/box/large-allocator-ice.rs:22:22: 22:40
        _0 = &_1;                        // scope 0 at ui/box/large-allocator-ice.rs:22:21: 22:40
        return;                          // scope 0 at ui/box/large-allocator-ice.rs:22:21: 22:40
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/box/large-allocator-ice.rs:23:38: 23:39

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/box/large-allocator-ice.rs:23:38: 23:39
        return;                          // scope 0 at ui/box/large-allocator-ice.rs:23:38: 23:39
    }
}

fn generic_function(_1: T) -> () {
    debug val => _1;                     // in scope 0 at ui/box/large-allocator-ice.rs:27:24: 27:27
    let mut _0: ();                      // return place in scope 0 at ui/box/large-allocator-ice.rs:27:32: 27:32
    let _2: T;                           // in scope 0 at ui/box/large-allocator-ice.rs:28:5: 28:43
    let mut _3: std::boxed::Box<T, &std::alloc::Global>; // in scope 0 at ui/box/large-allocator-ice.rs:28:6: 28:43
    let mut _4: T;                       // in scope 0 at ui/box/large-allocator-ice.rs:28:18: 28:21
    let mut _5: &std::alloc::Global;     // in scope 0 at ui/box/large-allocator-ice.rs:28:23: 28:42
    let mut _6: &std::alloc::Global;     // in scope 0 at ui/box/large-allocator-ice.rs:28:23: 28:42
    let mut _7: ();                      // in scope 0 at ui/box/large-allocator-ice.rs:28:43: 28:44
    let mut _8: ();                      // in scope 0 at ui/box/large-allocator-ice.rs:28:43: 28:44
    let mut _9: *const T;                // in scope 0 at ui/box/large-allocator-ice.rs:28:6: 28:43

    bb0: {
        _4 = move _1;                    // scope 0 at ui/box/large-allocator-ice.rs:28:18: 28:21
        _6 = const _;                    // scope 0 at ui/box/large-allocator-ice.rs:28:23: 28:42
                                         // mir::Constant
                                         // + span: ui/box/large-allocator-ice.rs:28:23: 28:42
                                         // + literal: Const { ty: &std::alloc::Global, val: Unevaluated(generic_function, [T], Some(promoted[0])) }
        _5 = _6;                         // scope 0 at ui/box/large-allocator-ice.rs:28:23: 28:42
        _3 = Box::<T, &std::alloc::Global>::new_in(move _4, move _5) -> bb1; // scope 0 at ui/box/large-allocator-ice.rs:28:6: 28:43
                                         // mir::Constant
                                         // + span: ui/box/large-allocator-ice.rs:28:6: 28:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(T, &std::alloc::Global) -> Box<T, &std::alloc::Global> {Box::<T, &std::alloc::Global>::new_in}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = (((_3.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T); // scope 0 at ui/box/large-allocator-ice.rs:28:5: 28:43
        _2 = move (*_9);                 // scope 0 at ui/box/large-allocator-ice.rs:28:5: 28:43
        drop(_2) -> [return: bb4, unwind: bb5]; // scope 0 at ui/box/large-allocator-ice.rs:28:43: 28:44
    }

    bb2: {
        return;                          // scope 0 at ui/box/large-allocator-ice.rs:29:2: 29:2
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/box/large-allocator-ice.rs:27:1: 29:2
    }

    bb4: {
        _7 = alloc::alloc::box_free::<T, &std::alloc::Global>(move (_3.0: std::ptr::Unique<T>), move (_3.1: &std::alloc::Global)) -> bb2; // scope 0 at ui/box/large-allocator-ice.rs:28:43: 28:44
                                         // mir::Constant
                                         // + span: ui/box/large-allocator-ice.rs:28:43: 28:44
                                         // + literal: Const { ty: unsafe fn(Unique<T>, &std::alloc::Global) {alloc::alloc::box_free::<T, &std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb5 (cleanup): {
        _8 = alloc::alloc::box_free::<T, &std::alloc::Global>(move (_3.0: std::ptr::Unique<T>), move (_3.1: &std::alloc::Global)) -> bb3; // scope 0 at ui/box/large-allocator-ice.rs:28:43: 28:44
                                         // mir::Constant
                                         // + span: ui/box/large-allocator-ice.rs:28:43: 28:44
                                         // + literal: Const { ty: unsafe fn(Unique<T>, &std::alloc::Global) {alloc::alloc::box_free::<T, &std::alloc::Global>}, val: Value(<ZST>) }
    }
}

promoted[0] in generic_function: &std::alloc::Global = {
    let mut _0: &std::alloc::Global;     // return place in scope 0 at ui/box/large-allocator-ice.rs:28:23: 28:42
    let mut _1: std::alloc::Global;      // in scope 0 at ui/box/large-allocator-ice.rs:28:24: 28:42

    bb0: {
        _1 = std::alloc::Global;         // scope 0 at ui/box/large-allocator-ice.rs:28:24: 28:42
        _0 = &_1;                        // scope 0 at ui/box/large-allocator-ice.rs:28:23: 28:42
        return;                          // scope 0 at ui/box/large-allocator-ice.rs:28:23: 28:42
    }
}

fn BigAllocator(_1: [usize; 2]) -> BigAllocator {
    let mut _0: BigAllocator;            // return place in scope 0 at ui/box/large-allocator-ice.rs:7:1: 7:20

    bb0: {
        _0 = BigAllocator(move _1);      // scope 0 at ui/box/large-allocator-ice.rs:7:1: 7:20
        return;                          // scope 0 at ui/box/large-allocator-ice.rs:7:1: 7:20
    }
}

// MIR FOR CTFE
fn BigAllocator(_1: [usize; 2]) -> BigAllocator {
    let mut _0: BigAllocator;            // return place in scope 0 at ui/box/large-allocator-ice.rs:7:1: 7:20

    bb0: {
        _0 = BigAllocator(move _1);      // scope 0 at ui/box/large-allocator-ice.rs:7:1: 7:20
        return;                          // scope 0 at ui/box/large-allocator-ice.rs:7:1: 7:20
    }
}
