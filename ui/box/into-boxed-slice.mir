// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/box/into-boxed-slice.rs:5:11: 5:11
    let mut _1: (&std::boxed::Box<[u8]>, &std::boxed::Box<[u8]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::boxed::Box<[u8]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::boxed::Box<[u8]>;       // in scope 0 at ui/box/into-boxed-slice.rs:6:16: 6:52
    let mut _4: std::boxed::Box<u8>;     // in scope 0 at ui/box/into-boxed-slice.rs:6:38: 6:51
    let mut _5: &std::boxed::Box<[u8]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: std::boxed::Box<[u8]>;       // in scope 0 at ui/box/into-boxed-slice.rs:6:54: 6:82
    let mut _7: std::boxed::Box<[u8; 1]>; // in scope 0 at ui/box/into-boxed-slice.rs:6:54: 6:69
    let mut _8: [u8; 1];                 // in scope 0 at ui/box/into-boxed-slice.rs:6:63: 6:68
    let _9: &std::boxed::Box<[u8]>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _10: &std::boxed::Box<[u8]>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: &std::boxed::Box<[u8]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: &std::boxed::Box<[u8]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &std::boxed::Box<[u8]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &std::boxed::Box<[u8]>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &std::boxed::Box<[u8]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &std::boxed::Box<[u8]>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _23: (&std::boxed::Box<[[u8; 1]]>, &std::boxed::Box<[[u8; 1]]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _24: &std::boxed::Box<[[u8; 1]]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _25: std::boxed::Box<[[u8; 1]]>; // in scope 0 at ui/box/into-boxed-slice.rs:7:16: 7:55
    let mut _26: std::boxed::Box<[u8; 1]>; // in scope 0 at ui/box/into-boxed-slice.rs:7:38: 7:54
    let mut _27: [u8; 1];                // in scope 0 at ui/box/into-boxed-slice.rs:7:47: 7:53
    let mut _28: &std::boxed::Box<[[u8; 1]]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _29: std::boxed::Box<[[u8; 1]]>; // in scope 0 at ui/box/into-boxed-slice.rs:7:57: 7:93
    let mut _30: std::boxed::Box<[[u8; 1]; 1]>; // in scope 0 at ui/box/into-boxed-slice.rs:7:57: 7:75
    let mut _31: [[u8; 1]; 1];           // in scope 0 at ui/box/into-boxed-slice.rs:7:66: 7:74
    let mut _32: [u8; 1];                // in scope 0 at ui/box/into-boxed-slice.rs:7:67: 7:73
    let _33: &std::boxed::Box<[[u8; 1]]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _34: &std::boxed::Box<[[u8; 1]]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _35: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _37: &std::boxed::Box<[[u8; 1]]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _38: &std::boxed::Box<[[u8; 1]]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _40: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _41: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _42: &std::boxed::Box<[[u8; 1]]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _43: &std::boxed::Box<[[u8; 1]]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _44: &std::boxed::Box<[[u8; 1]]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _45: &std::boxed::Box<[[u8; 1]]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _47: std::boxed::Box<[std::boxed::Box<[u8; 1]>]>; // in scope 0 at ui/box/into-boxed-slice.rs:8:9: 8:10
    let mut _48: std::boxed::Box<std::boxed::Box<[u8; 1]>>; // in scope 0 at ui/box/into-boxed-slice.rs:8:56: 8:81
    let mut _49: std::boxed::Box<[u8; 1]>; // in scope 0 at ui/box/into-boxed-slice.rs:8:65: 8:80
    let mut _50: [u8; 1];                // in scope 0 at ui/box/into-boxed-slice.rs:8:74: 8:79
    let mut _52: std::boxed::Box<[std::boxed::Box<[u8; 1]>; 1]>; // in scope 0 at ui/box/into-boxed-slice.rs:9:34: 9:61
    let mut _53: [std::boxed::Box<[u8; 1]>; 1]; // in scope 0 at ui/box/into-boxed-slice.rs:9:43: 9:60
    let mut _54: std::boxed::Box<[u8; 1]>; // in scope 0 at ui/box/into-boxed-slice.rs:9:44: 9:59
    let mut _55: [u8; 1];                // in scope 0 at ui/box/into-boxed-slice.rs:9:53: 9:58
    let mut _56: (&std::boxed::Box<[std::boxed::Box<[u8; 1]>]>, &std::boxed::Box<[std::boxed::Box<[u8; 1]>]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _57: &std::boxed::Box<[std::boxed::Box<[u8; 1]>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _58: &std::boxed::Box<[std::boxed::Box<[u8; 1]>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _61: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _62: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _63: &std::boxed::Box<[std::boxed::Box<[u8; 1]>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _64: &std::boxed::Box<[std::boxed::Box<[u8; 1]>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _66: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _67: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _68: &std::boxed::Box<[std::boxed::Box<[u8; 1]>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _69: &std::boxed::Box<[std::boxed::Box<[u8; 1]>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _70: &std::boxed::Box<[std::boxed::Box<[u8; 1]>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _71: &std::boxed::Box<[std::boxed::Box<[u8; 1]>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _9;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _10;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _15: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _15;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _33;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _34;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _39: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _39;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug a => _47;                  // in scope 5 at ui/box/into-boxed-slice.rs:8:9: 8:10
        let _51: std::boxed::Box<[std::boxed::Box<[u8; 1]>]>; // in scope 5 at ui/box/into-boxed-slice.rs:9:9: 9:10
        scope 6 {
            debug b => _51;              // in scope 6 at ui/box/into-boxed-slice.rs:9:9: 9:10
            let _59: &std::boxed::Box<[std::boxed::Box<[u8; 1]>]>; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _60: &std::boxed::Box<[std::boxed::Box<[u8; 1]>]>; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 7 {
                debug left_val => _59;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _60;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _65: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 8 {
                    debug kind => _65;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _4 = Box::<u8>::new(const 5_u8) -> bb1; // scope 0 at ui/box/into-boxed-slice.rs:6:38: 6:51
                                         // mir::Constant
                                         // + span: ui/box/into-boxed-slice.rs:6:38: 6:46
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(u8) -> Box<u8> {Box::<u8>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Box::<u8>::into_boxed_slice(move _4) -> bb2; // scope 0 at ui/box/into-boxed-slice.rs:6:16: 6:52
                                         // mir::Constant
                                         // + span: ui/box/into-boxed-slice.rs:6:16: 6:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<u8>) -> Box<[u8]> {Box::<u8>::into_boxed_slice}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _8 = [const 5_u8];               // scope 0 at ui/box/into-boxed-slice.rs:6:63: 6:68
        _7 = Box::<[u8; 1]>::new(move _8) -> [return: bb3, unwind: bb32]; // scope 0 at ui/box/into-boxed-slice.rs:6:54: 6:69
                                         // mir::Constant
                                         // + span: ui/box/into-boxed-slice.rs:6:54: 6:62
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn([u8; 1]) -> Box<[u8; 1]> {Box::<[u8; 1]>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = move _7 as std::boxed::Box<[u8]> (Pointer(Unsize)); // scope 0 at ui/box/into-boxed-slice.rs:6:54: 6:69
        _5 = &_6;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_1.0: &std::boxed::Box<[u8]>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_1.1: &std::boxed::Box<[u8]>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = _9;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = _10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = <Box<[u8]> as PartialEq>::eq(move _13, move _14) -> [return: bb4, unwind: bb31]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Box<[u8]>, &'b Box<[u8]>) -> bool {<Box<[u8]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = Not(move _12);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb6, otherwise: bb5]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _15 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<Box<[u8]>, Box<[u8]>>(move _17, move _18, move _20, move _22) -> bb31; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Box<[u8]>, &'b Box<[u8]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Box<[u8]>, Box<[u8]>>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_6) -> [return: bb7, unwind: bb32]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7: {
        drop(_3) -> bb8;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb8: {
        _27 = [const 25_u8];             // scope 0 at ui/box/into-boxed-slice.rs:7:47: 7:53
        _26 = Box::<[u8; 1]>::new(move _27) -> bb9; // scope 0 at ui/box/into-boxed-slice.rs:7:38: 7:54
                                         // mir::Constant
                                         // + span: ui/box/into-boxed-slice.rs:7:38: 7:46
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn([u8; 1]) -> Box<[u8; 1]> {Box::<[u8; 1]>::new}, val: Value(<ZST>) }
    }

    bb9: {
        _25 = Box::<[u8; 1]>::into_boxed_slice(move _26) -> bb10; // scope 0 at ui/box/into-boxed-slice.rs:7:16: 7:55
                                         // mir::Constant
                                         // + span: ui/box/into-boxed-slice.rs:7:16: 7:37
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Box<[u8; 1]>) -> Box<[[u8; 1]]> {Box::<[u8; 1]>::into_boxed_slice}, val: Value(<ZST>) }
    }

    bb10: {
        _24 = &_25;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _32 = [const 25_u8];             // scope 0 at ui/box/into-boxed-slice.rs:7:67: 7:73
        _31 = [move _32];                // scope 0 at ui/box/into-boxed-slice.rs:7:66: 7:74
        _30 = Box::<[[u8; 1]; 1]>::new(move _31) -> [return: bb11, unwind: bb30]; // scope 0 at ui/box/into-boxed-slice.rs:7:57: 7:75
                                         // mir::Constant
                                         // + span: ui/box/into-boxed-slice.rs:7:57: 7:65
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn([[u8; 1]; 1]) -> Box<[[u8; 1]; 1]> {Box::<[[u8; 1]; 1]>::new}, val: Value(<ZST>) }
    }

    bb11: {
        _29 = move _30 as std::boxed::Box<[[u8; 1]]> (Pointer(Unsize)); // scope 0 at ui/box/into-boxed-slice.rs:7:57: 7:75
        _28 = &_29;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _23 = (move _24, move _28);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _33 = (_23.0: &std::boxed::Box<[[u8; 1]]>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _34 = (_23.1: &std::boxed::Box<[[u8; 1]]>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _37 = _33;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _38 = _34;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _36 = <Box<[[u8; 1]]> as PartialEq>::eq(move _37, move _38) -> [return: bb12, unwind: bb29]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Box<[[u8; 1]]>, &'b Box<[[u8; 1]]>) -> bool {<Box<[[u8; 1]]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        _35 = Not(move _36);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _35) -> [0: bb14, otherwise: bb13]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _39 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = _33;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _43;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _34;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = _45;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _40 = core::panicking::assert_failed::<Box<[[u8; 1]]>, Box<[[u8; 1]]>>(move _41, move _42, move _44, move _46) -> bb29; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Box<[[u8; 1]]>, &'b Box<[[u8; 1]]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Box<[[u8; 1]]>, Box<[[u8; 1]]>>}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_29) -> [return: bb15, unwind: bb30]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb15: {
        drop(_25) -> bb16;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb16: {
        _50 = [const 5_u8];              // scope 0 at ui/box/into-boxed-slice.rs:8:74: 8:79
        _49 = Box::<[u8; 1]>::new(move _50) -> bb17; // scope 0 at ui/box/into-boxed-slice.rs:8:65: 8:80
                                         // mir::Constant
                                         // + span: ui/box/into-boxed-slice.rs:8:65: 8:73
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn([u8; 1]) -> Box<[u8; 1]> {Box::<[u8; 1]>::new}, val: Value(<ZST>) }
    }

    bb17: {
        _48 = Box::<Box<[u8; 1]>>::new(move _49) -> bb18; // scope 0 at ui/box/into-boxed-slice.rs:8:56: 8:81
                                         // mir::Constant
                                         // + span: ui/box/into-boxed-slice.rs:8:56: 8:64
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(Box<[u8; 1]>) -> Box<Box<[u8; 1]>> {Box::<Box<[u8; 1]>>::new}, val: Value(<ZST>) }
    }

    bb18: {
        _47 = Box::<Box<[u8; 1]>>::into_boxed_slice(move _48) -> bb19; // scope 0 at ui/box/into-boxed-slice.rs:8:34: 8:82
                                         // mir::Constant
                                         // + span: ui/box/into-boxed-slice.rs:8:34: 8:55
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(Box<Box<[u8; 1]>>) -> Box<[Box<[u8; 1]>]> {Box::<Box<[u8; 1]>>::into_boxed_slice}, val: Value(<ZST>) }
    }

    bb19: {
        _55 = [const 5_u8];              // scope 5 at ui/box/into-boxed-slice.rs:9:53: 9:58
        _54 = Box::<[u8; 1]>::new(move _55) -> [return: bb20, unwind: bb28]; // scope 5 at ui/box/into-boxed-slice.rs:9:44: 9:59
                                         // mir::Constant
                                         // + span: ui/box/into-boxed-slice.rs:9:44: 9:52
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: fn([u8; 1]) -> Box<[u8; 1]> {Box::<[u8; 1]>::new}, val: Value(<ZST>) }
    }

    bb20: {
        _53 = [move _54];                // scope 5 at ui/box/into-boxed-slice.rs:9:43: 9:60
        _52 = Box::<[Box<[u8; 1]>; 1]>::new(move _53) -> [return: bb21, unwind: bb28]; // scope 5 at ui/box/into-boxed-slice.rs:9:34: 9:61
                                         // mir::Constant
                                         // + span: ui/box/into-boxed-slice.rs:9:34: 9:42
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn([Box<[u8; 1]>; 1]) -> Box<[Box<[u8; 1]>; 1]> {Box::<[Box<[u8; 1]>; 1]>::new}, val: Value(<ZST>) }
    }

    bb21: {
        _51 = move _52 as std::boxed::Box<[std::boxed::Box<[u8; 1]>]> (Pointer(Unsize)); // scope 5 at ui/box/into-boxed-slice.rs:9:34: 9:61
        _57 = &_47;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _58 = &_51;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _56 = (move _57, move _58);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _59 = (_56.0: &std::boxed::Box<[std::boxed::Box<[u8; 1]>]>); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _60 = (_56.1: &std::boxed::Box<[std::boxed::Box<[u8; 1]>]>); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _63 = _59;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _64 = _60;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _62 = <Box<[Box<[u8; 1]>]> as PartialEq>::eq(move _63, move _64) -> [return: bb22, unwind: bb27]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Box<[Box<[u8; 1]>]>, &'b Box<[Box<[u8; 1]>]>) -> bool {<Box<[Box<[u8; 1]>]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        _61 = Not(move _62);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _61) -> [0: bb24, otherwise: bb23]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _65 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _67 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _69 = _59;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _69;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _60;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _70 = _71;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _72 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _66 = core::panicking::assert_failed::<Box<[Box<[u8; 1]>]>, Box<[Box<[u8; 1]>]>>(move _67, move _68, move _70, move _72) -> bb27; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Box<[Box<[u8; 1]>]>, &'b Box<[Box<[u8; 1]>]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Box<[Box<[u8; 1]>]>, Box<[Box<[u8; 1]>]>>}, val: Value(<ZST>) }
    }

    bb24: {
        drop(_51) -> [return: bb25, unwind: bb28]; // scope 5 at ui/box/into-boxed-slice.rs:11:1: 11:2
    }

    bb25: {
        drop(_47) -> bb26;               // scope 0 at ui/box/into-boxed-slice.rs:11:1: 11:2
    }

    bb26: {
        return;                          // scope 0 at ui/box/into-boxed-slice.rs:11:2: 11:2
    }

    bb27 (cleanup): {
        drop(_51) -> bb28;               // scope 5 at ui/box/into-boxed-slice.rs:11:1: 11:2
    }

    bb28 (cleanup): {
        drop(_47) -> bb33;               // scope 0 at ui/box/into-boxed-slice.rs:11:1: 11:2
    }

    bb29 (cleanup): {
        drop(_29) -> bb30;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb30 (cleanup): {
        drop(_25) -> bb33;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb31 (cleanup): {
        drop(_6) -> bb32;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb32 (cleanup): {
        drop(_3) -> bb33;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb33 (cleanup): {
        resume;                          // scope 0 at ui/box/into-boxed-slice.rs:5:1: 11:2
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/box/into-boxed-slice.rs:7:89: 7:90

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/box/into-boxed-slice.rs:7:89: 7:90
        return;                          // scope 0 at ui/box/into-boxed-slice.rs:7:89: 7:90
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/box/into-boxed-slice.rs:8:26: 8:27

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/box/into-boxed-slice.rs:8:26: 8:27
        return;                          // scope 0 at ui/box/into-boxed-slice.rs:8:26: 8:27
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/box/into-boxed-slice.rs:9:26: 9:27

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/box/into-boxed-slice.rs:9:26: 9:27
        return;                          // scope 0 at ui/box/into-boxed-slice.rs:9:26: 9:27
    }
}
