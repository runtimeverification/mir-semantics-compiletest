// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn by_ref(_1: &mut Box<[u8; 1], &std::alloc::Global>) -> () {
    debug node => _1;                    // in scope 0 at ui/box/issue-95036.rs:7:15: 7:19
    let mut _0: ();                      // return place in scope 0 at ui/box/issue-95036.rs:7:61: 7:61
    let _2: usize;                       // in scope 0 at ui/box/issue-95036.rs:8:10: 8:11
    let mut _3: std::boxed::Box<[u8; 1], &std::alloc::Global>; // in scope 0 at ui/box/issue-95036.rs:7:15: 7:19
    let mut _4: *const [u8; 1];          // in scope 0 at ui/box/issue-95036.rs:7:15: 7:19

    bb0: {
        _2 = const 0_usize;              // scope 0 at ui/box/issue-95036.rs:8:10: 8:11
        _3 = deref_copy (*_1);           // scope 0 at ui/box/issue-95036.rs:8:5: 8:18
        _4 = (((_3.0: std::ptr::Unique<[u8; 1]>).0: std::ptr::NonNull<[u8; 1]>).0: *const [u8; 1]); // scope 0 at ui/box/issue-95036.rs:8:5: 8:18
        (*_4)[_2] = const 9_u8;          // scope 0 at ui/box/issue-95036.rs:8:5: 8:18
        return;                          // scope 0 at ui/box/issue-95036.rs:9:2: 9:2
    }
}

by_ref::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/box/issue-95036.rs:7:35: 7:36

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/box/issue-95036.rs:7:35: 7:36
        return;                          // scope 0 at ui/box/issue-95036.rs:7:35: 7:36
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/box/issue-95036.rs:11:15: 11:15
    let mut _1: std::boxed::Box<[u8; 1], &std::alloc::Global>; // in scope 0 at ui/box/issue-95036.rs:12:9: 12:17
    let mut _2: [u8; 1];                 // in scope 0 at ui/box/issue-95036.rs:12:32: 12:37
    let mut _3: &std::alloc::Global;     // in scope 0 at ui/box/issue-95036.rs:12:39: 12:58
    let _4: usize;                       // in scope 0 at ui/box/issue-95036.rs:13:10: 13:11
    let _5: std::boxed::Box<[u8; 1], &std::alloc::Global>; // in scope 0 at ui/box/issue-95036.rs:15:5: 15:31
    let mut _6: std::boxed::Box<[u8; 1], &std::alloc::Global>; // in scope 0 at ui/box/issue-95036.rs:15:26: 15:30
    let mut _8: [u8; 1];                 // in scope 0 at ui/box/issue-95036.rs:17:32: 17:37
    let mut _9: &std::alloc::Global;     // in scope 0 at ui/box/issue-95036.rs:17:39: 17:58
    let _10: ();                         // in scope 0 at ui/box/issue-95036.rs:19:5: 19:22
    let mut _11: &mut std::boxed::Box<[u8; 1], &std::alloc::Global>; // in scope 0 at ui/box/issue-95036.rs:19:12: 19:21
    let mut _12: &mut std::boxed::Box<[u8; 1], &std::alloc::Global>; // in scope 0 at ui/box/issue-95036.rs:19:12: 19:21
    let _13: std::boxed::Box<[u8; 1], &std::alloc::Global>; // in scope 0 at ui/box/issue-95036.rs:21:5: 21:31
    let mut _14: std::boxed::Box<[u8; 1], &std::alloc::Global>; // in scope 0 at ui/box/issue-95036.rs:21:26: 21:30
    let mut _16: &std::alloc::Global;    // in scope 0 at ui/box/issue-95036.rs:12:39: 12:58
    let mut _17: bool;                   // in scope 0 at ui/box/issue-95036.rs:22:1: 22:2
    let mut _18: bool;                   // in scope 0 at ui/box/issue-95036.rs:22:1: 22:2
    let mut _19: ();                     // in scope 0 at ui/box/issue-95036.rs:22:1: 22:2
    let mut _20: *const [u8; 1];         // in scope 0 at ui/box/issue-95036.rs:12:9: 12:17
    scope 1 {
        debug node => _1;                // in scope 1 at ui/box/issue-95036.rs:12:9: 12:17
        let mut _7: std::boxed::Box<[u8; 1], &std::alloc::Global>; // in scope 1 at ui/box/issue-95036.rs:17:9: 17:17
        let mut _15: &std::alloc::Global; // in scope 1 at ui/box/issue-95036.rs:17:39: 17:58
        scope 2 {
            debug node => _7;            // in scope 2 at ui/box/issue-95036.rs:17:9: 17:17
        }
    }

    bb0: {
        _18 = const false;               // scope 0 at ui/box/issue-95036.rs:12:9: 12:17
        _17 = const false;               // scope 0 at ui/box/issue-95036.rs:12:9: 12:17
        _2 = [const 5_u8];               // scope 0 at ui/box/issue-95036.rs:12:32: 12:37
        _16 = const _;                   // scope 0 at ui/box/issue-95036.rs:12:39: 12:58
                                         // mir::Constant
                                         // + span: ui/box/issue-95036.rs:12:39: 12:58
                                         // + literal: Const { ty: &std::alloc::Global, val: Unevaluated(main, [], Some(promoted[1])) }
        _3 = _16;                        // scope 0 at ui/box/issue-95036.rs:12:39: 12:58
        _18 = const true;                // scope 0 at ui/box/issue-95036.rs:12:20: 12:59
        _1 = Box::<[u8; 1], &std::alloc::Global>::new_in(move _2, move _3) -> bb1; // scope 0 at ui/box/issue-95036.rs:12:20: 12:59
                                         // mir::Constant
                                         // + span: ui/box/issue-95036.rs:12:20: 12:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u8; 1], &std::alloc::Global) -> Box<[u8; 1], &std::alloc::Global> {Box::<[u8; 1], &std::alloc::Global>::new_in}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const 0_usize;              // scope 1 at ui/box/issue-95036.rs:13:10: 13:11
        _20 = (((_1.0: std::ptr::Unique<[u8; 1]>).0: std::ptr::NonNull<[u8; 1]>).0: *const [u8; 1]); // scope 1 at ui/box/issue-95036.rs:13:5: 13:18
        (*_20)[_4] = const 7_u8;         // scope 1 at ui/box/issue-95036.rs:13:5: 13:18
        _18 = const false;               // scope 1 at ui/box/issue-95036.rs:15:26: 15:30
        _6 = move _1;                    // scope 1 at ui/box/issue-95036.rs:15:26: 15:30
        _5 = std::hint::black_box::<Box<[u8; 1], &std::alloc::Global>>(move _6) -> [return: bb2, unwind: bb12]; // scope 1 at ui/box/issue-95036.rs:15:5: 15:31
                                         // mir::Constant
                                         // + span: ui/box/issue-95036.rs:15:5: 15:25
                                         // + literal: Const { ty: fn(Box<[u8; 1], &std::alloc::Global>) -> Box<[u8; 1], &std::alloc::Global> {std::hint::black_box::<Box<[u8; 1], &std::alloc::Global>>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_5) -> [return: bb3, unwind: bb12]; // scope 1 at ui/box/issue-95036.rs:15:31: 15:32
    }

    bb3: {
        _8 = [const 5_u8];               // scope 1 at ui/box/issue-95036.rs:17:32: 17:37
        _15 = const _;                   // scope 1 at ui/box/issue-95036.rs:17:39: 17:58
                                         // mir::Constant
                                         // + span: ui/box/issue-95036.rs:17:39: 17:58
                                         // + literal: Const { ty: &std::alloc::Global, val: Unevaluated(main, [], Some(promoted[0])) }
        _9 = _15;                        // scope 1 at ui/box/issue-95036.rs:17:39: 17:58
        _7 = Box::<[u8; 1], &std::alloc::Global>::new_in(move _8, move _9) -> [return: bb4, unwind: bb12]; // scope 1 at ui/box/issue-95036.rs:17:20: 17:59
                                         // mir::Constant
                                         // + span: ui/box/issue-95036.rs:17:20: 17:31
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn([u8; 1], &std::alloc::Global) -> Box<[u8; 1], &std::alloc::Global> {Box::<[u8; 1], &std::alloc::Global>::new_in}, val: Value(<ZST>) }
    }

    bb4: {
        _17 = const true;                // scope 1 at ui/box/issue-95036.rs:17:58: 17:59
        _12 = &mut _7;                   // scope 2 at ui/box/issue-95036.rs:19:12: 19:21
        _11 = &mut (*_12);               // scope 2 at ui/box/issue-95036.rs:19:12: 19:21
        _10 = by_ref(move _11) -> [return: bb5, unwind: bb10]; // scope 2 at ui/box/issue-95036.rs:19:5: 19:22
                                         // mir::Constant
                                         // + span: ui/box/issue-95036.rs:19:5: 19:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Box<[u8; 1], &'b std::alloc::Global>) {by_ref}, val: Value(<ZST>) }
    }

    bb5: {
        _17 = const false;               // scope 2 at ui/box/issue-95036.rs:21:26: 21:30
        _14 = move _7;                   // scope 2 at ui/box/issue-95036.rs:21:26: 21:30
        _13 = std::hint::black_box::<Box<[u8; 1], &std::alloc::Global>>(move _14) -> [return: bb6, unwind: bb10]; // scope 2 at ui/box/issue-95036.rs:21:5: 21:31
                                         // mir::Constant
                                         // + span: ui/box/issue-95036.rs:21:5: 21:25
                                         // + literal: Const { ty: fn(Box<[u8; 1], &std::alloc::Global>) -> Box<[u8; 1], &std::alloc::Global> {std::hint::black_box::<Box<[u8; 1], &std::alloc::Global>>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_13) -> [return: bb7, unwind: bb10]; // scope 2 at ui/box/issue-95036.rs:21:31: 21:32
    }

    bb7: {
        _17 = const false;               // scope 1 at ui/box/issue-95036.rs:22:1: 22:2
        _18 = const false;               // scope 0 at ui/box/issue-95036.rs:22:1: 22:2
        return;                          // scope 0 at ui/box/issue-95036.rs:22:2: 22:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/box/issue-95036.rs:11:1: 22:2
    }

    bb9 (cleanup): {
        drop(_7) -> bb12;                // scope 1 at ui/box/issue-95036.rs:22:1: 22:2
    }

    bb10 (cleanup): {
        switchInt(_17) -> [0: bb12, otherwise: bb9]; // scope 1 at ui/box/issue-95036.rs:22:1: 22:2
    }

    bb11 (cleanup): {
        _18 = const false;               // scope 0 at ui/box/issue-95036.rs:22:1: 22:2
        _19 = alloc::alloc::box_free::<[u8; 1], &std::alloc::Global>(move (_1.0: std::ptr::Unique<[u8; 1]>), move (_1.1: &std::alloc::Global)) -> bb8; // scope 0 at ui/box/issue-95036.rs:22:1: 22:2
                                         // mir::Constant
                                         // + span: ui/box/issue-95036.rs:22:1: 22:2
                                         // + literal: Const { ty: unsafe fn(Unique<[u8; 1]>, &std::alloc::Global) {alloc::alloc::box_free::<[u8; 1], &std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb12 (cleanup): {
        switchInt(_18) -> [0: bb8, otherwise: bb11]; // scope 0 at ui/box/issue-95036.rs:22:1: 22:2
    }
}

promoted[0] in main: &std::alloc::Global = {
    let mut _0: &std::alloc::Global;     // return place in scope 0 at ui/box/issue-95036.rs:17:39: 17:58
    let mut _1: std::alloc::Global;      // in scope 0 at ui/box/issue-95036.rs:17:40: 17:58

    bb0: {
        _1 = std::alloc::Global;         // scope 0 at ui/box/issue-95036.rs:17:40: 17:58
        _0 = &_1;                        // scope 0 at ui/box/issue-95036.rs:17:39: 17:58
        return;                          // scope 0 at ui/box/issue-95036.rs:17:39: 17:58
    }
}

promoted[1] in main: &std::alloc::Global = {
    let mut _0: &std::alloc::Global;     // return place in scope 0 at ui/box/issue-95036.rs:12:39: 12:58
    let mut _1: std::alloc::Global;      // in scope 0 at ui/box/issue-95036.rs:12:40: 12:58

    bb0: {
        _1 = std::alloc::Global;         // scope 0 at ui/box/issue-95036.rs:12:40: 12:58
        _0 = &_1;                        // scope 0 at ui/box/issue-95036.rs:12:39: 12:58
        return;                          // scope 0 at ui/box/issue-95036.rs:12:39: 12:58
    }
}
