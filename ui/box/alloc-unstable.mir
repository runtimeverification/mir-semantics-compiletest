// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/box/alloc-unstable.rs:6:11: 6:11
    let _1: std::boxed::Box<u32>;        // in scope 0 at ui/box/alloc-unstable.rs:7:9: 7:15
    scope 1 {
        debug _boxed => _1;              // in scope 1 at ui/box/alloc-unstable.rs:7:9: 7:15
    }

    bb0: {
        _1 = Box::<u32>::new(const 10_u32) -> bb1; // scope 0 at ui/box/alloc-unstable.rs:7:31: 7:43
                                         // mir::Constant
                                         // + span: ui/box/alloc-unstable.rs:7:31: 7:39
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(u32) -> Box<u32> {Box::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/box/alloc-unstable.rs:8:1: 8:2
    }

    bb2: {
        return;                          // scope 0 at ui/box/alloc-unstable.rs:8:2: 8:2
    }
}
