// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::ThinBox<dyn std::error::Error>;
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let _5: &std::boxed::ThinBox<dyn std::error::Error>;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let _15: ();
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 1];
    let _20: [core::fmt::rt::Argument<'_>; 1];
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &std::boxed::ThinBox<dyn std::error::Error>;
    let mut _24: (&usize, &usize);
    let mut _25: &usize;
    let _26: usize;
    let _27: &std::boxed::ThinBox<i32>;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: usize;
    let mut _33: usize;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let _37: ();
    let mut _38: std::fmt::Arguments<'_>;
    let mut _39: &[&str];
    let mut _40: &[core::fmt::rt::Argument<'_>];
    let _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: [core::fmt::rt::Argument<'_>; 1];
    let mut _43: core::fmt::rt::Argument<'_>;
    let _44: &std::boxed::ThinBox<i32>;
    let mut _46: [i32; 4];
    let mut _47: (&usize, &usize);
    let mut _48: &usize;
    let _49: usize;
    let _50: &std::boxed::ThinBox<[i32]>;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: usize;
    let mut _56: usize;
    let _58: !;
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>;
    let _60: ();
    let mut _61: std::fmt::Arguments<'_>;
    let mut _62: &[&str];
    let mut _63: &[core::fmt::rt::Argument<'_>];
    let _64: &[core::fmt::rt::Argument<'_>; 1];
    let _65: [core::fmt::rt::Argument<'_>; 1];
    let mut _66: core::fmt::rt::Argument<'_>;
    let _67: &std::boxed::ThinBox<[i32]>;
    scope 1 {
        debug thin_error => _1;
        let _6: &usize;
        let _7: &usize;
        let _23: std::boxed::ThinBox<i32>;
        let mut _72: &[&str; 2];
        let mut _73: &usize;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug thin => _23;
            let _28: &usize;
            let _29: &usize;
            let _45: std::boxed::ThinBox<[i32]>;
            let mut _70: &[&str; 2];
            let mut _71: &usize;
            scope 5 {
                debug left_val => _28;
                debug right_val => _29;
                let _34: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _34;
                }
            }
            scope 7 {
                debug thin_slice => _45;
                let _51: &usize;
                let _52: &usize;
                let mut _68: &[&str; 2];
                let mut _69: &usize;
                scope 8 {
                    debug left_val => _51;
                    debug right_val => _52;
                    let _57: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _57;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = ThinBox::<dyn std::error::Error>::new_unsize::<Foo>(const Foo) -> [return: bb1, unwind continue];
    }

    bb1: {
        _73 = const _;
        _5 = &_1;
        _4 = std::mem::size_of_val::<ThinBox<dyn std::error::Error>>(_5) -> [return: bb2, unwind: bb27];
    }

    bb2: {
        _3 = &_4;
        _2 = (_73, move _3);
        _6 = (_2.0: &usize);
        _7 = (_2.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14) -> bb27;
    }

    bb4: {
        _72 = const _;
        _17 = _72 as &[&str] (Pointer(Unsize));
        _22 = &_1;
        _21 = core::fmt::rt::Argument::<'_>::new_debug::<ThinBox<dyn std::error::Error>>(_22) -> [return: bb5, unwind: bb27];
    }

    bb5: {
        _20 = [move _21];
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb6, unwind: bb27];
    }

    bb6: {
        _15 = _print(move _16) -> [return: bb7, unwind: bb27];
    }

    bb7: {
        _23 = ThinBox::<i32>::new(const 42_i32) -> [return: bb8, unwind: bb27];
    }

    bb8: {
        _71 = const _;
        _27 = &_23;
        _26 = std::mem::size_of_val::<ThinBox<i32>>(_27) -> [return: bb9, unwind: bb26];
    }

    bb9: {
        _25 = &_26;
        _24 = (_71, move _25);
        _28 = (_24.0: &usize);
        _29 = (_24.1: &usize);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<usize, usize>(move _34, _28, _29, move _36) -> bb26;
    }

    bb11: {
        _70 = const _;
        _39 = _70 as &[&str] (Pointer(Unsize));
        _44 = &_23;
        _43 = core::fmt::rt::Argument::<'_>::new_debug::<ThinBox<i32>>(_44) -> [return: bb12, unwind: bb26];
    }

    bb12: {
        _42 = [move _43];
        _41 = &_42;
        _40 = _41 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _38 = Arguments::<'_>::new_v1(move _39, move _40) -> [return: bb13, unwind: bb26];
    }

    bb13: {
        _37 = _print(move _38) -> [return: bb14, unwind: bb26];
    }

    bb14: {
        _46 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _45 = ThinBox::<[i32]>::new_unsize::<[i32; 4]>(move _46) -> [return: bb15, unwind: bb26];
    }

    bb15: {
        _69 = const _;
        _50 = &_45;
        _49 = std::mem::size_of_val::<ThinBox<[i32]>>(_50) -> [return: bb16, unwind: bb25];
    }

    bb16: {
        _48 = &_49;
        _47 = (_69, move _48);
        _51 = (_47.0: &usize);
        _52 = (_47.1: &usize);
        _55 = (*_51);
        _56 = (*_52);
        _54 = Eq(move _55, move _56);
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _57 = core::panicking::AssertKind::Eq;
        _59 = Option::<Arguments<'_>>::None;
        _58 = core::panicking::assert_failed::<usize, usize>(move _57, _51, _52, move _59) -> bb25;
    }

    bb18: {
        _68 = const _;
        _62 = _68 as &[&str] (Pointer(Unsize));
        _67 = &_45;
        _66 = core::fmt::rt::Argument::<'_>::new_debug::<ThinBox<[i32]>>(_67) -> [return: bb19, unwind: bb25];
    }

    bb19: {
        _65 = [move _66];
        _64 = &_65;
        _63 = _64 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _61 = Arguments::<'_>::new_v1(move _62, move _63) -> [return: bb20, unwind: bb25];
    }

    bb20: {
        _60 = _print(move _61) -> [return: bb21, unwind: bb25];
    }

    bb21: {
        drop(_45) -> [return: bb22, unwind: bb26];
    }

    bb22: {
        drop(_23) -> [return: bb23, unwind: bb27];
    }

    bb23: {
        drop(_1) -> [return: bb24, unwind continue];
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_45) -> [return: bb26, unwind terminate];
    }

    bb26 (cleanup): {
        drop(_23) -> [return: bb27, unwind terminate];
    }

    bb27 (cleanup): {
        drop(_1) -> [return: bb28, unwind terminate];
    }

    bb28 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<*const i32>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<*const i32>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<*const i32>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

fn <impl at ui/box/thin_new.rs:21:10: 21:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Foo";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/box/thin_new.rs:24:1: 24:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[&str; 1];

    bb0: {
        _5 = const _;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Formatter::<'_>::write_fmt(_2, move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in <impl at ui/box/thin_new.rs:24:1: 24:26>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "boooo!"];
        _0 = &_1;
        return;
    }
}
