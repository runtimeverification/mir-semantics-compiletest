// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const USES_PTR: () = {
    let mut _0: ();
    let _1: ();
    let _2: *const ();
    scope 1 {
        debug u => _1;
    }

    bb0: {
        StorageLive(_1);
        _1 = ();
        StorageLive(_2);
        _2 = &raw const _1;
        StorageDead(_2);
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

static ALSO_USES_PTR: () = {
    let mut _0: ();
    let _1: ();
    let _2: *const ();
    scope 1 {
        debug u => _1;
    }

    bb0: {
        StorageLive(_1);
        _1 = ();
        StorageLive(_2);
        _2 = &raw const _1;
        StorageDead(_2);
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: [i32; 4];
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &*const i32;
    let _12: *const i32;
    scope 1 {
        debug x => _1;
        let mut _2: i32;
        scope 2 {
            debug one => _2;
            scope 3 {
                debug two => const 2_i32;
                let _3: i32;
                scope 4 {
                    debug three => const 3_i32;
                    scope 5 {
                        debug four => const 4_i32;
                        let mut _13: &[&str; 2];
                        scope 6 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [const 2_i32; 4];
        _2 = const 1_i32;
        _3 = const 3_i32;
        _13 = const _;
        _6 = _13 as &[&str] (Pointer(Unsize));
        _12 = &raw const _3;
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_pointer::<*const i32>(_11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = _print(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;
    let _1: i32;
    scope 1 {
        debug v => _1;
        let _2: *const i32;
        scope 2 {
            debug y => _2;
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = const 3_i32;
        StorageLive(_2);
        _2 = &raw const _1;
        _0 = const 4_usize;
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;
    let _1: i32;
    scope 1 {
        debug u => _1;
        let _2: *const i32;
        scope 2 {
            debug x => _2;
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = const 2_i32;
        StorageLive(_2);
        _2 = &raw const _1;
        _0 = const 4_usize;
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
