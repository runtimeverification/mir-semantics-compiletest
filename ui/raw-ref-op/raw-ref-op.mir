// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/raw-ref-op/raw-ref-op.rs:5:11: 5:11
    let mut _1: i32;                     // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:6:9: 6:14
    let mut _5: bool;                    // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:10:5: 10:24
    let mut _6: bool;                    // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:10:13: 10:23
    let mut _7: &*const i32;             // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:10:13: 10:16
    let mut _8: &*const i32;             // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:10:20: 10:23
    let _9: *const i32;                  // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:10:20: 10:23
    let mut _10: !;                      // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:10:5: 10:24
    let mut _11: bool;                   // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:11:5: 11:24
    let mut _12: bool;                   // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:11:13: 11:23
    let mut _13: *const i32;             // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:11:13: 11:16
    let mut _14: *const i32;             // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:11:20: 11:23
    let mut _15: *mut i32;               // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:11:20: 11:23
    let mut _16: !;                      // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:11:5: 11:24
    let mut _17: bool;                   // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:12:14: 12:36
    let mut _18: bool;                   // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:12:22: 12:34
    let mut _19: i32;                    // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:12:22: 12:26
    let mut _20: i32;                    // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:12:30: 12:34
    let mut _21: !;                      // in scope 0 at ui/raw-ref-op/raw-ref-op.rs:12:14: 12:36
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/raw-ref-op/raw-ref-op.rs:6:9: 6:14
        let _2: *const i32;              // in scope 1 at ui/raw-ref-op/raw-ref-op.rs:7:9: 7:12
        scope 2 {
            debug c_p => _2;             // in scope 2 at ui/raw-ref-op/raw-ref-op.rs:7:9: 7:12
            let _3: *mut i32;            // in scope 2 at ui/raw-ref-op/raw-ref-op.rs:8:9: 8:12
            scope 3 {
                debug m_p => _3;         // in scope 3 at ui/raw-ref-op/raw-ref-op.rs:8:9: 8:12
                let _4: &i32;            // in scope 3 at ui/raw-ref-op/raw-ref-op.rs:9:9: 9:12
                scope 4 {
                    debug i_r => _4;     // in scope 4 at ui/raw-ref-op/raw-ref-op.rs:9:9: 9:12
                    scope 5 {
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 123_i32;              // scope 0 at ui/raw-ref-op/raw-ref-op.rs:6:17: 6:20
        _2 = &raw const _1;              // scope 1 at ui/raw-ref-op/raw-ref-op.rs:7:15: 7:27
        _3 = &raw mut _1;                // scope 2 at ui/raw-ref-op/raw-ref-op.rs:8:15: 8:25
        _4 = &_1;                        // scope 3 at ui/raw-ref-op/raw-ref-op.rs:9:15: 9:17
        _7 = &_2;                        // scope 4 at ui/raw-ref-op/raw-ref-op.rs:10:13: 10:16
        _9 = &raw const (*_4);           // scope 4 at ui/raw-ref-op/raw-ref-op.rs:10:20: 10:23
        _8 = &_9;                        // scope 4 at ui/raw-ref-op/raw-ref-op.rs:10:20: 10:23
        _6 = <*const i32 as PartialEq>::eq(move _7, move _8) -> bb1; // scope 4 at ui/raw-ref-op/raw-ref-op.rs:10:13: 10:23
                                         // mir::Constant
                                         // + span: ui/raw-ref-op/raw-ref-op.rs:10:13: 10:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a *const i32, &'b *const i32) -> bool {<*const i32 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = Not(move _6);               // scope 4 at ui/raw-ref-op/raw-ref-op.rs:10:5: 10:24
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 4 at ui/raw-ref-op/raw-ref-op.rs:10:5: 10:24
    }

    bb2: {
        _10 = core::panicking::panic(const "assertion failed: c_p == i_r"); // scope 4 at ui/raw-ref-op/raw-ref-op.rs:10:5: 10:24
                                         // mir::Constant
                                         // + span: ui/raw-ref-op/raw-ref-op.rs:10:5: 10:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _13 = _2;                        // scope 4 at ui/raw-ref-op/raw-ref-op.rs:11:13: 11:16
        _15 = _3;                        // scope 4 at ui/raw-ref-op/raw-ref-op.rs:11:20: 11:23
        _14 = move _15 as *const i32 (Pointer(MutToConstPointer)); // scope 4 at ui/raw-ref-op/raw-ref-op.rs:11:20: 11:23
        _12 = Eq(move _13, move _14);    // scope 4 at ui/raw-ref-op/raw-ref-op.rs:11:13: 11:23
        _11 = Not(move _12);             // scope 4 at ui/raw-ref-op/raw-ref-op.rs:11:5: 11:24
        switchInt(move _11) -> [0: bb5, otherwise: bb4]; // scope 4 at ui/raw-ref-op/raw-ref-op.rs:11:5: 11:24
    }

    bb4: {
        _16 = core::panicking::panic(const "assertion failed: c_p == m_p"); // scope 4 at ui/raw-ref-op/raw-ref-op.rs:11:5: 11:24
                                         // mir::Constant
                                         // + span: ui/raw-ref-op/raw-ref-op.rs:11:5: 11:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _19 = (*_2);                     // scope 5 at ui/raw-ref-op/raw-ref-op.rs:12:22: 12:26
        _20 = (*_4);                     // scope 5 at ui/raw-ref-op/raw-ref-op.rs:12:30: 12:34
        _18 = Eq(move _19, move _20);    // scope 5 at ui/raw-ref-op/raw-ref-op.rs:12:22: 12:34
        _17 = Not(move _18);             // scope 5 at ui/raw-ref-op/raw-ref-op.rs:12:14: 12:36
        switchInt(move _17) -> [0: bb7, otherwise: bb6]; // scope 5 at ui/raw-ref-op/raw-ref-op.rs:12:14: 12:36
    }

    bb6: {
        _21 = core::panicking::panic(const "assertion failed: *c_p == *i_r"); // scope 5 at ui/raw-ref-op/raw-ref-op.rs:12:14: 12:36
                                         // mir::Constant
                                         // + span: ui/raw-ref-op/raw-ref-op.rs:12:14: 12:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        return;                          // scope 0 at ui/raw-ref-op/raw-ref-op.rs:13:2: 13:2
    }
}
