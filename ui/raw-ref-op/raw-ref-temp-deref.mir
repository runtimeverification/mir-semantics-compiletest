// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const PAIR_REF: &(i32, i64) = {
    let mut _0: &(i32, i64);             // return place in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:6:17: 6:28
    let _1: &(i32, i64);                 // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:6:31: 6:38
    let _2: (i32, i64);                  // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:6:32: 6:38
    let mut _3: &(i32, i64);             // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:6:31: 6:38

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:6:31: 6:38
        _3 = const _;                    // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:6:31: 6:38
                                         // mir::Constant
                                         // + span: ui/raw-ref-op/raw-ref-temp-deref.rs:6:31: 6:38
                                         // + literal: Const { ty: &(i32, i64), val: Unevaluated(PAIR_REF, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:6:31: 6:38
        _0 = &(*_1);                     // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:6:31: 6:38
        StorageDead(_1);                 // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:6:37: 6:38
        return;                          // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:6:1: 6:39
    }
}

promoted[0] in PAIR_REF: &(i32, i64) = {
    let mut _0: &(i32, i64);             // return place in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:6:31: 6:38
    let mut _1: (i32, i64);              // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:6:32: 6:38

    bb0: {
        _1 = (const 1_i32, const 2_i64); // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:6:32: 6:38
        _0 = &_1;                        // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:6:31: 6:38
        return;                          // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:6:31: 6:38
    }
}

const ARRAY_REF: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:18: 8:27
    let _1: &[i32; 2];                   // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:30: 8:37
    let _2: [i32; 2];                    // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:31: 8:37
    let mut _3: &[i32; 2];               // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:30: 8:37

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:30: 8:37
        _3 = const _;                    // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:30: 8:37
                                         // mir::Constant
                                         // + span: ui/raw-ref-op/raw-ref-temp-deref.rs:8:30: 8:37
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(ARRAY_REF, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:30: 8:37
        _0 = &(*_1);                     // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:30: 8:37
        StorageDead(_1);                 // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:36: 8:37
        return;                          // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:1: 8:38
    }
}

promoted[0] in ARRAY_REF: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:30: 8:37
    let mut _1: [i32; 2];                // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:31: 8:37

    bb0: {
        _1 = [const 3_i32, const 4_i32]; // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:31: 8:37
        _0 = &_1;                        // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:30: 8:37
        return;                          // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:30: 8:37
    }
}

ARRAY_REF::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:25: 8:26

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:25: 8:26
        return;                          // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:8:25: 8:26
    }
}

const SLICE_REF: &[i32] = {
    let mut _0: &[i32];                  // return place in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:18: 9:24
    let mut _1: &[i32; 2];               // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:27: 9:34
    let _2: &[i32; 2];                   // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:27: 9:34
    let _3: [i32; 2];                    // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:28: 9:34
    let mut _4: &[i32; 2];               // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:27: 9:34

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:27: 9:34
        StorageLive(_2);                 // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:27: 9:34
        _4 = const _;                    // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:27: 9:34
                                         // mir::Constant
                                         // + span: ui/raw-ref-op/raw-ref-temp-deref.rs:9:27: 9:34
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(SLICE_REF, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:27: 9:34
        _1 = &(*_2);                     // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:27: 9:34
        _0 = move _1 as &[i32] (Pointer(Unsize)); // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:27: 9:34
        StorageDead(_2);                 // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:33: 9:34
        StorageDead(_1);                 // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:33: 9:34
        return;                          // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:1: 9:35
    }
}

promoted[0] in SLICE_REF: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:27: 9:34
    let mut _1: [i32; 2];                // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:28: 9:34

    bb0: {
        _1 = [const 5_i32, const 6_i32]; // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:28: 9:34
        _0 = &_1;                        // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:27: 9:34
        return;                          // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:9:27: 9:34
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:11:11: 11:11
    let _1: *const (i32, i64);           // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:13:9: 13:18
    let _2: &(i32, i64);                 // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:13:33: 13:41
    let _4: &(i32, i64);                 // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:14:38: 14:46
    let _6: &[i32; 2];                   // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:15:33: 15:42
    let _8: &[i32; 2];                   // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:16:38: 16:47
    let _9: usize;                       // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:16:48: 16:49
    let _11: &[i32];                     // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:17:33: 17:42
    let _13: &[i32];                     // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:18:38: 18:47
    let _14: usize;                      // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:18:48: 18:49
    let _18: &[i32; 2];                  // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:22:51: 22:60
    let _20: &[i32; 2];                  // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:23:56: 23:65
    let _21: usize;                      // in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:23:66: 23:67
    scope 1 {
        debug deref_ref => _1;           // in scope 1 at ui/raw-ref-op/raw-ref-temp-deref.rs:13:9: 13:18
        let _3: *const i32;              // in scope 1 at ui/raw-ref-op/raw-ref-temp-deref.rs:14:9: 14:24
        scope 2 {
            debug field_deref_ref => _3; // in scope 2 at ui/raw-ref-op/raw-ref-temp-deref.rs:14:9: 14:24
            let _5: *const [i32; 2];     // in scope 2 at ui/raw-ref-op/raw-ref-temp-deref.rs:15:9: 15:18
            scope 3 {
                debug deref_ref => _5;   // in scope 3 at ui/raw-ref-op/raw-ref-temp-deref.rs:15:9: 15:18
                let _7: *const i32;      // in scope 3 at ui/raw-ref-op/raw-ref-temp-deref.rs:16:9: 16:24
                scope 4 {
                    debug index_deref_ref => _7; // in scope 4 at ui/raw-ref-op/raw-ref-temp-deref.rs:16:9: 16:24
                    let _10: *const [i32]; // in scope 4 at ui/raw-ref-op/raw-ref-temp-deref.rs:17:9: 17:18
                    scope 5 {
                        debug deref_ref => _10; // in scope 5 at ui/raw-ref-op/raw-ref-temp-deref.rs:17:9: 17:18
                        let _12: *const i32; // in scope 5 at ui/raw-ref-op/raw-ref-temp-deref.rs:18:9: 18:24
                        scope 6 {
                            debug index_deref_ref => _12; // in scope 6 at ui/raw-ref-op/raw-ref-temp-deref.rs:18:9: 18:24
                            let _15: i32; // in scope 6 at ui/raw-ref-op/raw-ref-temp-deref.rs:20:9: 20:10
                            scope 7 {
                                debug x => _15; // in scope 7 at ui/raw-ref-op/raw-ref-temp-deref.rs:20:9: 20:10
                                let _16: *const i32; // in scope 7 at ui/raw-ref-op/raw-ref-temp-deref.rs:21:9: 21:20
                                scope 8 {
                                    debug ascribe_ref => _16; // in scope 8 at ui/raw-ref-op/raw-ref-temp-deref.rs:21:9: 21:20
                                    let _17: *const [i32; 2]; // in scope 8 at ui/raw-ref-op/raw-ref-temp-deref.rs:22:9: 22:22
                                    scope 9 {
                                        debug ascribe_deref => _17; // in scope 9 at ui/raw-ref-op/raw-ref-temp-deref.rs:22:9: 22:22
                                        let _19: *const i32; // in scope 9 at ui/raw-ref-op/raw-ref-temp-deref.rs:23:9: 23:28
                                        scope 10 {
                                            debug ascribe_index_deref => _19; // in scope 10 at ui/raw-ref-op/raw-ref-temp-deref.rs:23:9: 23:28
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const _;                    // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:13:33: 13:41
                                         // mir::Constant
                                         // + span: ui/raw-ref-op/raw-ref-temp-deref.rs:13:33: 13:41
                                         // + literal: Const { ty: &(i32, i64), val: Unevaluated(PAIR_REF, [], None) }
        _1 = &raw const (*_2);           // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:13:21: 13:41
        _4 = const _;                    // scope 1 at ui/raw-ref-op/raw-ref-temp-deref.rs:14:38: 14:46
                                         // mir::Constant
                                         // + span: ui/raw-ref-op/raw-ref-temp-deref.rs:14:38: 14:46
                                         // + literal: Const { ty: &(i32, i64), val: Unevaluated(PAIR_REF, [], None) }
        _3 = &raw const ((*_4).0: i32);  // scope 1 at ui/raw-ref-op/raw-ref-temp-deref.rs:14:27: 14:48
        _6 = const _;                    // scope 2 at ui/raw-ref-op/raw-ref-temp-deref.rs:15:33: 15:42
                                         // mir::Constant
                                         // + span: ui/raw-ref-op/raw-ref-temp-deref.rs:15:33: 15:42
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(ARRAY_REF, [], None) }
        _5 = &raw const (*_6);           // scope 2 at ui/raw-ref-op/raw-ref-temp-deref.rs:15:21: 15:42
        _8 = const _;                    // scope 3 at ui/raw-ref-op/raw-ref-temp-deref.rs:16:38: 16:47
                                         // mir::Constant
                                         // + span: ui/raw-ref-op/raw-ref-temp-deref.rs:16:38: 16:47
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(ARRAY_REF, [], None) }
        _9 = const 0_usize;              // scope 3 at ui/raw-ref-op/raw-ref-temp-deref.rs:16:48: 16:49
        _7 = &raw const (*_8)[_9];       // scope 3 at ui/raw-ref-op/raw-ref-temp-deref.rs:16:27: 16:50
        _11 = const _;                   // scope 4 at ui/raw-ref-op/raw-ref-temp-deref.rs:17:33: 17:42
                                         // mir::Constant
                                         // + span: ui/raw-ref-op/raw-ref-temp-deref.rs:17:33: 17:42
                                         // + literal: Const { ty: &[i32], val: Unevaluated(SLICE_REF, [], None) }
        _10 = &raw const (*_11);         // scope 4 at ui/raw-ref-op/raw-ref-temp-deref.rs:17:21: 17:42
        _13 = const _;                   // scope 5 at ui/raw-ref-op/raw-ref-temp-deref.rs:18:38: 18:47
                                         // mir::Constant
                                         // + span: ui/raw-ref-op/raw-ref-temp-deref.rs:18:38: 18:47
                                         // + literal: Const { ty: &[i32], val: Unevaluated(SLICE_REF, [], None) }
        _14 = const 1_usize;             // scope 5 at ui/raw-ref-op/raw-ref-temp-deref.rs:18:48: 18:49
        _12 = &raw const (*_13)[_14];    // scope 5 at ui/raw-ref-op/raw-ref-temp-deref.rs:18:27: 18:50
        _15 = const 0_i32;               // scope 6 at ui/raw-ref-op/raw-ref-temp-deref.rs:20:13: 20:14
        _16 = &raw const _15;            // scope 7 at ui/raw-ref-op/raw-ref-temp-deref.rs:21:23: 21:55
        _18 = const _;                   // scope 8 at ui/raw-ref-op/raw-ref-temp-deref.rs:22:51: 22:60
                                         // mir::Constant
                                         // + span: ui/raw-ref-op/raw-ref-temp-deref.rs:22:51: 22:60
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(ARRAY_REF, [], None) }
        _17 = &raw const (*_18);         // scope 8 at ui/raw-ref-op/raw-ref-temp-deref.rs:22:25: 22:71
        _20 = const _;                   // scope 9 at ui/raw-ref-op/raw-ref-temp-deref.rs:23:56: 23:65
                                         // mir::Constant
                                         // + span: ui/raw-ref-op/raw-ref-temp-deref.rs:23:56: 23:65
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(ARRAY_REF, [], None) }
        _21 = const 0_usize;             // scope 9 at ui/raw-ref-op/raw-ref-temp-deref.rs:23:66: 23:67
        _19 = &raw const (*_20)[_21];    // scope 9 at ui/raw-ref-op/raw-ref-temp-deref.rs:23:31: 23:74
        return;                          // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:24:2: 24:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:22:68: 22:69

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:22:68: 22:69
        return;                          // scope 0 at ui/raw-ref-op/raw-ref-temp-deref.rs:22:68: 22:69
    }
}
