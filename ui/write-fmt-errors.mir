// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/write-fmt-errors.rs:10:1: 10:35>::fmt(_1: &ErrorDisplay, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    let mut _0: std::result::Result<(), std::fmt::Error>;

    bb0: {
        _0 = Result::<(), std::fmt::Error>::Err(const std::fmt::Error);
        return;
    }
}

const FORMAT_ERROR: ErrorKind = {
    let mut _0: std::io::ErrorKind;

    bb0: {
        _0 = Uncategorized;
        return;
    }
}

const WRITER_ERROR: ErrorKind = {
    let mut _0: std::io::ErrorKind;

    bb0: {
        _0 = NotConnected;
        return;
    }
}

fn <impl at ui/write-fmt-errors.rs:21:1: 21:27>::write(_1: &mut ErrorWriter, _2: &[u8]) -> Result<usize, std::io::Error> {
    debug self => _1;
    debug _buf => _2;
    let mut _0: std::result::Result<usize, std::io::Error>;
    let mut _3: std::io::Error;

    bb0: {
        _3 = std::io::Error::new::<&str>(const _, const "not connected") -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<usize, std::io::Error>::Err(move _3);
        return;
    }
}

fn <impl at ui/write-fmt-errors.rs:21:1: 21:27>::flush(_1: &mut ErrorWriter) -> Result<(), std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<(), std::io::Error>;

    bb0: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::result::Result<(), std::io::Error>;
    let mut _2: &mut std::io::Sink;
    let mut _3: std::io::Sink;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: &std::result::Result<(), std::io::Error>;
    let _13: !;
    let mut _14: (&std::io::ErrorKind, &std::io::ErrorKind);
    let mut _15: &std::io::ErrorKind;
    let _16: std::io::ErrorKind;
    let mut _17: &std::io::Error;
    let _18: std::io::Error;
    let mut _19: std::result::Result<(), std::io::Error>;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: &mut ErrorWriter;
    let mut _29: ErrorWriter;
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: &std::result::Result<(), std::io::Error>;
    let _35: !;
    let mut _37: &mut ErrorWriter;
    let mut _38: ErrorWriter;
    let mut _39: std::fmt::Arguments<'_>;
    let mut _40: &[&str];
    let mut _41: &[core::fmt::rt::Argument<'_>];
    let _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: [core::fmt::rt::Argument<'_>; 1];
    let mut _44: core::fmt::rt::Argument<'_>;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: &std::result::Result<(), std::io::Error>;
    let _48: !;
    let mut _49: (&std::io::ErrorKind, &std::io::ErrorKind);
    let mut _50: &std::io::ErrorKind;
    let _51: std::io::ErrorKind;
    let mut _52: &std::io::Error;
    let _53: std::io::Error;
    let mut _54: std::result::Result<(), std::io::Error>;
    let mut _57: bool;
    let mut _58: bool;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: &mut ErrorWriter;
    let mut _64: ErrorWriter;
    let mut _65: std::fmt::Arguments<'_>;
    let mut _66: &[&str];
    let mut _67: &[core::fmt::rt::Argument<'_>];
    let _68: &[core::fmt::rt::Argument<'_>; 1];
    let _69: [core::fmt::rt::Argument<'_>; 1];
    let mut _70: core::fmt::rt::Argument<'_>;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: &std::result::Result<(), std::io::Error>;
    let _74: !;
    let mut _75: (&std::io::ErrorKind, &std::io::ErrorKind);
    let mut _76: &std::io::ErrorKind;
    let _77: std::io::ErrorKind;
    let mut _78: &std::io::Error;
    let _79: std::io::Error;
    let mut _80: std::result::Result<(), std::io::Error>;
    let mut _83: bool;
    let mut _84: bool;
    let _86: !;
    let mut _87: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _96: &ErrorDisplay;
    let mut _97: &[&str; 2];
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    scope 1 {
        debug res => _1;
        let _20: &std::io::ErrorKind;
        let _21: &std::io::ErrorKind;
        let _27: std::result::Result<(), std::io::Error>;
        let mut _94: &[&str; 1];
        let mut _95: &std::io::ErrorKind;
        scope 2 {
            debug left_val => _20;
            debug right_val => _21;
            let _24: core::panicking::AssertKind;
            scope 3 {
                debug kind => _24;
            }
        }
        scope 4 {
            debug res => _27;
            let _36: std::result::Result<(), std::io::Error>;
            let mut _92: &ErrorDisplay;
            let mut _93: &[&str; 1];
            scope 5 {
                debug res => _36;
                let _55: &std::io::ErrorKind;
                let _56: &std::io::ErrorKind;
                let _62: std::result::Result<(), std::io::Error>;
                let mut _89: &ErrorDisplay;
                let mut _90: &[&str; 2];
                let mut _91: &std::io::ErrorKind;
                scope 6 {
                    debug left_val => _55;
                    debug right_val => _56;
                    let _59: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _59;
                    }
                }
                scope 8 {
                    debug res => _62;
                    let _81: &std::io::ErrorKind;
                    let _82: &std::io::ErrorKind;
                    let mut _88: &std::io::ErrorKind;
                    scope 9 {
                        debug left_val => _81;
                        debug right_val => _82;
                        let _85: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _85;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _100 = const false;
        _99 = const false;
        _98 = const false;
        _3 = sink() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &mut _3;
        _97 = const _;
        _5 = _97 as &[&str] (Pointer(Unsize));
        _96 = const _;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<ErrorDisplay>(_96) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _100 = const true;
        _1 = <Sink as std::io::Write>::write_fmt(move _2, move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = &_1;
        _11 = Result::<(), std::io::Error>::is_err(move _12) -> [return: bb5, unwind: bb54];
    }

    bb5: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _13 = begin_panic::<&str>(const "formatter error did not propagate") -> bb54;
    }

    bb7: {
        _100 = const false;
        _19 = move _1;
        _18 = Result::<(), std::io::Error>::unwrap_err(move _19) -> [return: bb8, unwind: bb54];
    }

    bb8: {
        _17 = &_18;
        _16 = std::io::Error::kind(move _17) -> [return: bb9, unwind: bb47];
    }

    bb9: {
        _15 = &_16;
        _95 = const _;
        _14 = (move _15, _95);
        _20 = (_14.0: &std::io::ErrorKind);
        _21 = (_14.1: &std::io::ErrorKind);
        _23 = <ErrorKind as PartialEq>::eq(_20, _21) -> [return: bb10, unwind: bb47];
    }

    bb10: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<ErrorKind, ErrorKind>(move _24, _20, _21, move _26) -> bb47;
    }

    bb12: {
        drop(_18) -> [return: bb13, unwind: bb54];
    }

    bb13: {
        _28 = &mut _29;
        _94 = const _;
        _31 = _94 as &[&str] (Pointer(Unsize));
        _30 = Arguments::<'_>::new_const(move _31) -> [return: bb14, unwind: bb54];
    }

    bb14: {
        _27 = <ErrorWriter as std::io::Write>::write_fmt(move _28, move _30) -> [return: bb15, unwind: bb54];
    }

    bb15: {
        _34 = &_27;
        _33 = Result::<(), std::io::Error>::is_err(move _34) -> [return: bb16, unwind: bb46];
    }

    bb16: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _35 = begin_panic::<&str>(const "writer error did not propagate") -> bb46;
    }

    bb18: {
        _37 = &mut _38;
        _93 = const _;
        _40 = _93 as &[&str] (Pointer(Unsize));
        _92 = const _;
        _44 = core::fmt::rt::Argument::<'_>::new_display::<ErrorDisplay>(_92) -> [return: bb19, unwind: bb46];
    }

    bb19: {
        _43 = [move _44];
        _42 = &_43;
        _41 = _42 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _39 = Arguments::<'_>::new_v1(move _40, move _41) -> [return: bb20, unwind: bb46];
    }

    bb20: {
        _36 = <ErrorWriter as std::io::Write>::write_fmt(move _37, move _39) -> [return: bb21, unwind: bb46];
    }

    bb21: {
        _99 = const true;
        _47 = &_36;
        _46 = Result::<(), std::io::Error>::is_err(move _47) -> [return: bb22, unwind: bb52];
    }

    bb22: {
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _48 = begin_panic::<&str>(const "writer error did not propagate") -> bb52;
    }

    bb24: {
        _99 = const false;
        _54 = move _36;
        _53 = Result::<(), std::io::Error>::unwrap_err(move _54) -> [return: bb25, unwind: bb52];
    }

    bb25: {
        _52 = &_53;
        _51 = std::io::Error::kind(move _52) -> [return: bb26, unwind: bb45];
    }

    bb26: {
        _50 = &_51;
        _91 = const _;
        _49 = (move _50, _91);
        _55 = (_49.0: &std::io::ErrorKind);
        _56 = (_49.1: &std::io::ErrorKind);
        _58 = <ErrorKind as PartialEq>::eq(_55, _56) -> [return: bb27, unwind: bb45];
    }

    bb27: {
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<ErrorKind, ErrorKind>(move _59, _55, _56, move _61) -> bb45;
    }

    bb29: {
        drop(_53) -> [return: bb30, unwind: bb52];
    }

    bb30: {
        _63 = &mut _64;
        _90 = const _;
        _66 = _90 as &[&str] (Pointer(Unsize));
        _89 = const _;
        _70 = core::fmt::rt::Argument::<'_>::new_display::<ErrorDisplay>(_89) -> [return: bb31, unwind: bb52];
    }

    bb31: {
        _69 = [move _70];
        _68 = &_69;
        _67 = _68 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _65 = Arguments::<'_>::new_v1(move _66, move _67) -> [return: bb32, unwind: bb52];
    }

    bb32: {
        _62 = <ErrorWriter as std::io::Write>::write_fmt(move _63, move _65) -> [return: bb33, unwind: bb52];
    }

    bb33: {
        _98 = const true;
        _73 = &_62;
        _72 = Result::<(), std::io::Error>::is_err(move _73) -> [return: bb34, unwind: bb50];
    }

    bb34: {
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _74 = begin_panic::<&str>(const "formatter error did not propagate") -> bb50;
    }

    bb36: {
        _98 = const false;
        _80 = move _62;
        _79 = Result::<(), std::io::Error>::unwrap_err(move _80) -> [return: bb37, unwind: bb50];
    }

    bb37: {
        _78 = &_79;
        _77 = std::io::Error::kind(move _78) -> [return: bb38, unwind: bb44];
    }

    bb38: {
        _76 = &_77;
        _88 = const _;
        _75 = (move _76, _88);
        _81 = (_75.0: &std::io::ErrorKind);
        _82 = (_75.1: &std::io::ErrorKind);
        _84 = <ErrorKind as PartialEq>::eq(_81, _82) -> [return: bb39, unwind: bb44];
    }

    bb39: {
        _83 = Not(move _84);
        switchInt(move _83) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _85 = core::panicking::AssertKind::Eq;
        _87 = Option::<Arguments<'_>>::None;
        _86 = core::panicking::assert_failed::<ErrorKind, ErrorKind>(move _85, _81, _82, move _87) -> bb44;
    }

    bb41: {
        drop(_79) -> [return: bb42, unwind: bb50];
    }

    bb42: {
        _98 = const false;
        _99 = const false;
        drop(_27) -> [return: bb43, unwind: bb54];
    }

    bb43: {
        _100 = const false;
        return;
    }

    bb44 (cleanup): {
        drop(_79) -> [return: bb50, unwind terminate];
    }

    bb45 (cleanup): {
        drop(_53) -> [return: bb52, unwind terminate];
    }

    bb46 (cleanup): {
        drop(_27) -> [return: bb54, unwind terminate];
    }

    bb47 (cleanup): {
        drop(_18) -> [return: bb54, unwind terminate];
    }

    bb48 (cleanup): {
        resume;
    }

    bb49 (cleanup): {
        drop(_62) -> [return: bb52, unwind terminate];
    }

    bb50 (cleanup): {
        switchInt(_98) -> [0: bb52, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_36) -> [return: bb46, unwind terminate];
    }

    bb52 (cleanup): {
        switchInt(_99) -> [0: bb46, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_1) -> [return: bb48, unwind terminate];
    }

    bb54 (cleanup): {
        switchInt(_100) -> [0: bb48, otherwise: bb53];
    }
}

promoted[0] in main: &ErrorKind = {
    let mut _0: &std::io::ErrorKind;
    let mut _1: std::io::ErrorKind;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &ErrorDisplay = {
    let mut _0: &ErrorDisplay;
    let mut _1: ErrorDisplay;

    bb0: {
        _1 = ErrorDisplay;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const " abc"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &ErrorKind = {
    let mut _0: &std::io::ErrorKind;
    let mut _1: std::io::ErrorKind;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &ErrorDisplay = {
    let mut _0: &ErrorDisplay;
    let mut _1: ErrorDisplay;

    bb0: {
        _1 = ErrorDisplay;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "abc "];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "abc"];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &ErrorKind = {
    let mut _0: &std::io::ErrorKind;
    let mut _1: std::io::ErrorKind;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &ErrorDisplay = {
    let mut _0: &ErrorDisplay;
    let mut _1: ErrorDisplay;

    bb0: {
        _1 = ErrorDisplay;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "1 ", const " bar"];
        _0 = &_1;
        return;
    }
}
