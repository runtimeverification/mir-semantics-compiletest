// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/write-fmt-errors.rs:10:1: 10:35>::fmt(_1: &ErrorDisplay, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/write-fmt-errors.rs:11:12: 11:17
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/write-fmt-errors.rs:11:46: 11:57

    bb0: {
        _0 = const Result::<(), std::fmt::Error>::Err(std::fmt::Error); // scope 0 at ui/write-fmt-errors.rs:12:9: 12:24
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:12:9: 12:24
                                         // + literal: Const { ty: Result<(), std::fmt::Error>, val: Value(Scalar(0x01)) }
        return;                          // scope 0 at ui/write-fmt-errors.rs:13:6: 13:6
    }
}

const FORMAT_ERROR: ErrorKind = {
    let mut _0: std::io::ErrorKind;      // return place in scope 0 at ui/write-fmt-errors.rs:18:21: 18:34

    bb0: {
        _0 = Uncategorized;              // scope 0 at ui/write-fmt-errors.rs:18:37: 18:65
        return;                          // scope 0 at ui/write-fmt-errors.rs:18:1: 18:66
    }
}

const WRITER_ERROR: ErrorKind = {
    let mut _0: std::io::ErrorKind;      // return place in scope 0 at ui/write-fmt-errors.rs:19:21: 19:34

    bb0: {
        _0 = NotConnected;               // scope 0 at ui/write-fmt-errors.rs:19:37: 19:64
        return;                          // scope 0 at ui/write-fmt-errors.rs:19:1: 19:65
    }
}

fn <impl at ui/write-fmt-errors.rs:21:1: 21:27>::write(_1: &mut ErrorWriter, _2: &[u8]) -> Result<usize, std::io::Error> {
    debug self => _1;                    // in scope 0 at ui/write-fmt-errors.rs:22:14: 22:23
    debug _buf => _2;                    // in scope 0 at ui/write-fmt-errors.rs:22:25: 22:29
    let mut _0: std::result::Result<usize, std::io::Error>; // return place in scope 0 at ui/write-fmt-errors.rs:22:41: 22:58
    let mut _3: std::io::Error;          // in scope 0 at ui/write-fmt-errors.rs:23:13: 23:54

    bb0: {
        _3 = std::io::Error::new::<&str>(const _, const "not connected") -> bb1; // scope 0 at ui/write-fmt-errors.rs:23:13: 23:54
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:23:13: 23:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(ErrorKind, &str) -> std::io::Error {std::io::Error::new::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:23:24: 23:36
                                         // + literal: Const { ty: ErrorKind, val: Unevaluated(WRITER_ERROR, [], None) }
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:23:38: 23:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _0 = Result::<usize, std::io::Error>::Err(move _3); // scope 0 at ui/write-fmt-errors.rs:23:9: 23:55
        return;                          // scope 0 at ui/write-fmt-errors.rs:24:6: 24:6
    }
}

fn <impl at ui/write-fmt-errors.rs:21:1: 21:27>::flush(_1: &mut ErrorWriter) -> Result<(), std::io::Error> {
    debug self => _1;                    // in scope 0 at ui/write-fmt-errors.rs:26:14: 26:23
    let mut _0: std::result::Result<(), std::io::Error>; // return place in scope 0 at ui/write-fmt-errors.rs:26:28: 26:42

    bb0: {
        _0 = const Result::<(), std::io::Error>::Ok(()); // scope 0 at ui/write-fmt-errors.rs:26:45: 26:51
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:26:45: 26:51
                                         // + literal: Const { ty: Result<(), std::io::Error>, val: Value(Scalar(0x0000000000000000)) }
        return;                          // scope 0 at ui/write-fmt-errors.rs:26:53: 26:53
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/write-fmt-errors.rs:29:11: 29:11
    let _1: std::result::Result<(), std::io::Error>; // in scope 0 at ui/write-fmt-errors.rs:31:9: 31:12
    let mut _2: &mut std::io::Sink;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _3: std::io::Sink;           // in scope 0 at ui/write-fmt-errors.rs:31:22: 31:28
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _5: &[&str];                 // in scope 0 at ui/write-fmt-errors.rs:31:30: 31:40
    let mut _6: &[&str; 3];              // in scope 0 at ui/write-fmt-errors.rs:31:30: 31:40
    let _7: &[&str; 3];                  // in scope 0 at ui/write-fmt-errors.rs:31:30: 31:40
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _9: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _10: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _11: [core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/write-fmt-errors.rs:31:42: 31:43
    let mut _13: &i32;                   // in scope 0 at ui/write-fmt-errors.rs:31:42: 31:43
    let _14: &i32;                       // in scope 0 at ui/write-fmt-errors.rs:31:42: 31:43
    let mut _15: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/write-fmt-errors.rs:31:45: 31:57
    let mut _16: &ErrorDisplay;          // in scope 0 at ui/write-fmt-errors.rs:31:45: 31:57
    let _17: &ErrorDisplay;              // in scope 0 at ui/write-fmt-errors.rs:31:45: 31:57
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/write-fmt-errors.rs:31:59: 31:64
    let mut _19: &&str;                  // in scope 0 at ui/write-fmt-errors.rs:31:59: 31:64
    let _20: &&str;                      // in scope 0 at ui/write-fmt-errors.rs:31:59: 31:64
    let mut _21: bool;                   // in scope 0 at ui/write-fmt-errors.rs:32:5: 32:63
    let mut _22: bool;                   // in scope 0 at ui/write-fmt-errors.rs:32:13: 32:25
    let mut _23: &std::result::Result<(), std::io::Error>; // in scope 0 at ui/write-fmt-errors.rs:32:13: 32:25
    let mut _24: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _25: (&std::io::ErrorKind, &std::io::ErrorKind); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &std::io::ErrorKind;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _27: std::io::ErrorKind;         // in scope 0 at ui/write-fmt-errors.rs:33:16: 33:39
    let mut _28: &std::io::Error;        // in scope 0 at ui/write-fmt-errors.rs:33:16: 33:39
    let _29: std::io::Error;             // in scope 0 at ui/write-fmt-errors.rs:33:16: 33:32
    let mut _30: std::result::Result<(), std::io::Error>; // in scope 0 at ui/write-fmt-errors.rs:33:16: 33:19
    let mut _31: &std::io::ErrorKind;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _34: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _35: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _36: &std::io::ErrorKind;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _37: &std::io::ErrorKind;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _39: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _40: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _41: &std::io::ErrorKind;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _42: &std::io::ErrorKind;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _43: &std::io::ErrorKind;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _44: &std::io::ErrorKind;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _47: &mut ErrorWriter;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _48: ErrorWriter;            // in scope 0 at ui/write-fmt-errors.rs:36:22: 36:33
    let mut _49: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _50: &[&str];                // in scope 0 at ui/write-fmt-errors.rs:36:35: 36:40
    let mut _51: &[&str; 1];             // in scope 0 at ui/write-fmt-errors.rs:36:35: 36:40
    let _52: &[&str; 1];                 // in scope 0 at ui/write-fmt-errors.rs:36:35: 36:40
    let mut _53: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _54: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _55: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _56: bool;                   // in scope 0 at ui/write-fmt-errors.rs:37:5: 37:60
    let mut _57: bool;                   // in scope 0 at ui/write-fmt-errors.rs:37:13: 37:25
    let mut _58: &std::result::Result<(), std::io::Error>; // in scope 0 at ui/write-fmt-errors.rs:37:13: 37:25
    let mut _59: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _61: &mut ErrorWriter;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _62: ErrorWriter;            // in scope 0 at ui/write-fmt-errors.rs:40:22: 40:33
    let mut _63: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _64: &[&str];                // in scope 0 at ui/write-fmt-errors.rs:40:35: 40:43
    let mut _65: &[&str; 1];             // in scope 0 at ui/write-fmt-errors.rs:40:35: 40:43
    let _66: &[&str; 1];                 // in scope 0 at ui/write-fmt-errors.rs:40:35: 40:43
    let mut _67: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _68: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _69: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _70: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _71: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/write-fmt-errors.rs:40:45: 40:57
    let mut _72: &ErrorDisplay;          // in scope 0 at ui/write-fmt-errors.rs:40:45: 40:57
    let _73: &ErrorDisplay;              // in scope 0 at ui/write-fmt-errors.rs:40:45: 40:57
    let mut _74: bool;                   // in scope 0 at ui/write-fmt-errors.rs:41:5: 41:60
    let mut _75: bool;                   // in scope 0 at ui/write-fmt-errors.rs:41:13: 41:25
    let mut _76: &std::result::Result<(), std::io::Error>; // in scope 0 at ui/write-fmt-errors.rs:41:13: 41:25
    let mut _77: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _78: (&std::io::ErrorKind, &std::io::ErrorKind); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _79: &std::io::ErrorKind;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _80: std::io::ErrorKind;         // in scope 0 at ui/write-fmt-errors.rs:42:16: 42:39
    let mut _81: &std::io::Error;        // in scope 0 at ui/write-fmt-errors.rs:42:16: 42:39
    let _82: std::io::Error;             // in scope 0 at ui/write-fmt-errors.rs:42:16: 42:32
    let mut _83: std::result::Result<(), std::io::Error>; // in scope 0 at ui/write-fmt-errors.rs:42:16: 42:19
    let mut _84: &std::io::ErrorKind;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _87: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _88: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _89: &std::io::ErrorKind;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _90: &std::io::ErrorKind;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _92: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _93: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _94: &std::io::ErrorKind;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _95: &std::io::ErrorKind;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _96: &std::io::ErrorKind;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _97: &std::io::ErrorKind;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _100: &mut ErrorWriter;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _101: ErrorWriter;           // in scope 0 at ui/write-fmt-errors.rs:45:22: 45:33
    let mut _102: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _103: &[&str];               // in scope 0 at ui/write-fmt-errors.rs:45:35: 45:43
    let mut _104: &[&str; 2];            // in scope 0 at ui/write-fmt-errors.rs:45:35: 45:43
    let _105: &[&str; 2];                // in scope 0 at ui/write-fmt-errors.rs:45:35: 45:43
    let mut _106: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _107: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _108: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _109: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _110: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/write-fmt-errors.rs:45:45: 45:57
    let mut _111: &ErrorDisplay;         // in scope 0 at ui/write-fmt-errors.rs:45:45: 45:57
    let _112: &ErrorDisplay;             // in scope 0 at ui/write-fmt-errors.rs:45:45: 45:57
    let mut _113: bool;                  // in scope 0 at ui/write-fmt-errors.rs:46:5: 46:63
    let mut _114: bool;                  // in scope 0 at ui/write-fmt-errors.rs:46:13: 46:25
    let mut _115: &std::result::Result<(), std::io::Error>; // in scope 0 at ui/write-fmt-errors.rs:46:13: 46:25
    let mut _116: !;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _117: (&std::io::ErrorKind, &std::io::ErrorKind); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _118: &std::io::ErrorKind;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _119: std::io::ErrorKind;        // in scope 0 at ui/write-fmt-errors.rs:47:16: 47:39
    let mut _120: &std::io::Error;       // in scope 0 at ui/write-fmt-errors.rs:47:16: 47:39
    let _121: std::io::Error;            // in scope 0 at ui/write-fmt-errors.rs:47:16: 47:32
    let mut _122: std::result::Result<(), std::io::Error>; // in scope 0 at ui/write-fmt-errors.rs:47:16: 47:19
    let mut _123: &std::io::ErrorKind;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _126: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _127: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _128: &std::io::ErrorKind;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _129: &std::io::ErrorKind;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _131: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _132: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _133: &std::io::ErrorKind;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _134: &std::io::ErrorKind;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _135: &std::io::ErrorKind;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _136: &std::io::ErrorKind;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _137: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _147: &&str;                 // in scope 0 at ui/write-fmt-errors.rs:31:59: 31:64
    let mut _148: &ErrorDisplay;         // in scope 0 at ui/write-fmt-errors.rs:31:45: 31:57
    let mut _149: &i32;                  // in scope 0 at ui/write-fmt-errors.rs:31:42: 31:43
    let mut _150: &[&str; 3];            // in scope 0 at ui/write-fmt-errors.rs:31:30: 31:40
    let mut _151: bool;                  // in scope 0 at ui/write-fmt-errors.rs:48:1: 48:2
    let mut _152: bool;                  // in scope 0 at ui/write-fmt-errors.rs:48:1: 48:2
    let mut _153: bool;                  // in scope 0 at ui/write-fmt-errors.rs:48:1: 48:2
    scope 1 {
        debug res => _1;                 // in scope 1 at ui/write-fmt-errors.rs:31:9: 31:12
        let _32: &std::io::ErrorKind;    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _33: &std::io::ErrorKind;    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _46: std::result::Result<(), std::io::Error>; // in scope 1 at ui/write-fmt-errors.rs:36:9: 36:12
        let mut _144: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        let mut _145: &[&str; 1];        // in scope 1 at ui/write-fmt-errors.rs:36:35: 36:40
        let mut _146: &std::io::ErrorKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _32;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _33;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _38: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _38;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug res => _46;            // in scope 4 at ui/write-fmt-errors.rs:36:9: 36:12
            let _60: std::result::Result<(), std::io::Error>; // in scope 4 at ui/write-fmt-errors.rs:40:9: 40:12
            let mut _142: &ErrorDisplay; // in scope 4 at ui/write-fmt-errors.rs:40:45: 40:57
            let mut _143: &[&str; 1];    // in scope 4 at ui/write-fmt-errors.rs:40:35: 40:43
            scope 5 {
                debug res => _60;        // in scope 5 at ui/write-fmt-errors.rs:40:9: 40:12
                let _85: &std::io::ErrorKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _86: &std::io::ErrorKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _99: std::result::Result<(), std::io::Error>; // in scope 5 at ui/write-fmt-errors.rs:45:9: 45:12
                let mut _139: &ErrorDisplay; // in scope 5 at ui/write-fmt-errors.rs:45:45: 45:57
                let mut _140: &[&str; 2]; // in scope 5 at ui/write-fmt-errors.rs:45:35: 45:43
                let mut _141: &std::io::ErrorKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 6 {
                    debug left_val => _85; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _86; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _91: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _91; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 8 {
                    debug res => _99;    // in scope 8 at ui/write-fmt-errors.rs:45:9: 45:12
                    let _124: &std::io::ErrorKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _125: &std::io::ErrorKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let mut _138: &std::io::ErrorKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 9 {
                        debug left_val => _124; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _125; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _130: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 10 {
                            debug kind => _130; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _151 = const false;              // scope 0 at ui/write-fmt-errors.rs:31:9: 31:12
        _153 = const false;              // scope 0 at ui/write-fmt-errors.rs:31:9: 31:12
        _152 = const false;              // scope 0 at ui/write-fmt-errors.rs:31:9: 31:12
        _3 = sink() -> bb1;              // scope 0 at ui/write-fmt-errors.rs:31:22: 31:28
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:31:22: 31:26
                                         // + literal: Const { ty: fn() -> Sink {sink}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &mut _3;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
        _150 = const _;                  // scope 0 at ui/write-fmt-errors.rs:31:30: 31:40
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:31:30: 31:40
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(main, [], Some(promoted[12])) }
        _7 = _150;                       // scope 0 at ui/write-fmt-errors.rs:31:30: 31:40
        _6 = _7;                         // scope 0 at ui/write-fmt-errors.rs:31:30: 31:40
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/write-fmt-errors.rs:31:30: 31:40
        _149 = const _;                  // scope 0 at ui/write-fmt-errors.rs:31:42: 31:43
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:31:42: 31:43
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[11])) }
        _14 = _149;                      // scope 0 at ui/write-fmt-errors.rs:31:42: 31:43
        _13 = _14;                       // scope 0 at ui/write-fmt-errors.rs:31:42: 31:43
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _13) -> bb2; // scope 0 at ui/write-fmt-errors.rs:31:42: 31:43
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:31:42: 31:43
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _148 = const _;                  // scope 0 at ui/write-fmt-errors.rs:31:45: 31:57
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:31:45: 31:57
                                         // + literal: Const { ty: &ErrorDisplay, val: Unevaluated(main, [], Some(promoted[10])) }
        _17 = _148;                      // scope 0 at ui/write-fmt-errors.rs:31:45: 31:57
        _16 = _17;                       // scope 0 at ui/write-fmt-errors.rs:31:45: 31:57
        _15 = core::fmt::ArgumentV1::<'_>::new_display::<ErrorDisplay>(move _16) -> bb3; // scope 0 at ui/write-fmt-errors.rs:31:45: 31:57
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:31:45: 31:57
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b ErrorDisplay) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<ErrorDisplay>}, val: Value(<ZST>) }
    }

    bb3: {
        _147 = const _;                  // scope 0 at ui/write-fmt-errors.rs:31:59: 31:64
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:31:59: 31:64
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[9])) }
        _20 = _147;                      // scope 0 at ui/write-fmt-errors.rs:31:59: 31:64
        _19 = _20;                       // scope 0 at ui/write-fmt-errors.rs:31:59: 31:64
        _18 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _19) -> bb4; // scope 0 at ui/write-fmt-errors.rs:31:59: 31:64
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:31:59: 31:64
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = [move _12, move _15, move _18]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb5; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _153 = const true;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
        _1 = <Sink as std::io::Write>::write_fmt(move _2, move _4) -> bb6; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Sink, Arguments<'b>) -> Result<(), std::io::Error> {<Sink as std::io::Write>::write_fmt}, val: Value(<ZST>) }
    }

    bb6: {
        _23 = &_1;                       // scope 1 at ui/write-fmt-errors.rs:32:13: 32:25
        _22 = Result::<(), std::io::Error>::is_err(move _23) -> [return: bb7, unwind: bb56]; // scope 1 at ui/write-fmt-errors.rs:32:13: 32:25
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:32:17: 32:23
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), std::io::Error>) -> bool {Result::<(), std::io::Error>::is_err}, val: Value(<ZST>) }
    }

    bb7: {
        _21 = Not(move _22);             // scope 1 at ui/write-fmt-errors.rs:32:5: 32:63
        switchInt(move _21) -> [0: bb9, otherwise: bb8]; // scope 1 at ui/write-fmt-errors.rs:32:5: 32:63
    }

    bb8: {
        _24 = begin_panic::<&str>(const "formatter error did not propagate") -> bb56; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:32:27: 32:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _153 = const false;              // scope 1 at ui/write-fmt-errors.rs:33:16: 33:19
        _30 = move _1;                   // scope 1 at ui/write-fmt-errors.rs:33:16: 33:19
        _29 = Result::<(), std::io::Error>::unwrap_err(move _30) -> [return: bb10, unwind: bb56]; // scope 1 at ui/write-fmt-errors.rs:33:16: 33:32
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:33:20: 33:30
                                         // + literal: Const { ty: fn(Result<(), std::io::Error>) -> std::io::Error {Result::<(), std::io::Error>::unwrap_err}, val: Value(<ZST>) }
    }

    bb10: {
        _28 = &_29;                      // scope 1 at ui/write-fmt-errors.rs:33:16: 33:39
        _27 = std::io::Error::kind(move _28) -> [return: bb11, unwind: bb49]; // scope 1 at ui/write-fmt-errors.rs:33:16: 33:39
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:33:33: 33:37
                                         // + literal: Const { ty: for<'a> fn(&'a std::io::Error) -> ErrorKind {std::io::Error::kind}, val: Value(<ZST>) }
    }

    bb11: {
        _26 = &_27;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _146 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &ErrorKind, val: Unevaluated(main, [], Some(promoted[8])) }
        _31 = _146;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _31);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _32 = (_25.0: &std::io::ErrorKind); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _33 = (_25.1: &std::io::ErrorKind); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _36 = _32;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _37 = _33;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _35 = <ErrorKind as PartialEq>::eq(move _36, move _37) -> [return: bb12, unwind: bb49]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ErrorKind, &'b ErrorKind) -> bool {<ErrorKind as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        _34 = Not(move _35);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _34) -> [0: bb14, otherwise: bb13]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _38 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _40 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _42 = _32;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _42;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _44 = _33;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _43 = _44;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _45 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _39 = core::panicking::assert_failed::<ErrorKind, ErrorKind>(move _40, move _41, move _43, move _45) -> bb49; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a ErrorKind, &'b ErrorKind, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<ErrorKind, ErrorKind>}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_29) -> [return: bb15, unwind: bb56]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb15: {
        _47 = &mut _48;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
        _145 = const _;                  // scope 1 at ui/write-fmt-errors.rs:36:35: 36:40
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:36:35: 36:40
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[7])) }
        _52 = _145;                      // scope 1 at ui/write-fmt-errors.rs:36:35: 36:40
        _51 = _52;                       // scope 1 at ui/write-fmt-errors.rs:36:35: 36:40
        _50 = move _51 as &[&str] (Pointer(Unsize)); // scope 1 at ui/write-fmt-errors.rs:36:35: 36:40
        _144 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[6])) }
        _55 = _144;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _54 = _55;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _53 = move _54 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _49 = Arguments::<'_>::new_v1(move _50, move _53) -> [return: bb16, unwind: bb56]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb16: {
        _46 = <ErrorWriter as std::io::Write>::write_fmt(move _47, move _49) -> [return: bb17, unwind: bb56]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut ErrorWriter, Arguments<'b>) -> Result<(), std::io::Error> {<ErrorWriter as std::io::Write>::write_fmt}, val: Value(<ZST>) }
    }

    bb17: {
        _58 = &_46;                      // scope 4 at ui/write-fmt-errors.rs:37:13: 37:25
        _57 = Result::<(), std::io::Error>::is_err(move _58) -> [return: bb18, unwind: bb48]; // scope 4 at ui/write-fmt-errors.rs:37:13: 37:25
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:37:17: 37:23
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), std::io::Error>) -> bool {Result::<(), std::io::Error>::is_err}, val: Value(<ZST>) }
    }

    bb18: {
        _56 = Not(move _57);             // scope 4 at ui/write-fmt-errors.rs:37:5: 37:60
        switchInt(move _56) -> [0: bb20, otherwise: bb19]; // scope 4 at ui/write-fmt-errors.rs:37:5: 37:60
    }

    bb19: {
        _59 = begin_panic::<&str>(const "writer error did not propagate") -> bb48; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:37:27: 37:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb20: {
        _61 = &mut _62;                  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
        _143 = const _;                  // scope 4 at ui/write-fmt-errors.rs:40:35: 40:43
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:40:35: 40:43
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[5])) }
        _66 = _143;                      // scope 4 at ui/write-fmt-errors.rs:40:35: 40:43
        _65 = _66;                       // scope 4 at ui/write-fmt-errors.rs:40:35: 40:43
        _64 = move _65 as &[&str] (Pointer(Unsize)); // scope 4 at ui/write-fmt-errors.rs:40:35: 40:43
        _142 = const _;                  // scope 4 at ui/write-fmt-errors.rs:40:45: 40:57
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:40:45: 40:57
                                         // + literal: Const { ty: &ErrorDisplay, val: Unevaluated(main, [], Some(promoted[4])) }
        _73 = _142;                      // scope 4 at ui/write-fmt-errors.rs:40:45: 40:57
        _72 = _73;                       // scope 4 at ui/write-fmt-errors.rs:40:45: 40:57
        _71 = core::fmt::ArgumentV1::<'_>::new_display::<ErrorDisplay>(move _72) -> [return: bb21, unwind: bb48]; // scope 4 at ui/write-fmt-errors.rs:40:45: 40:57
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:40:45: 40:57
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b> fn(&'b ErrorDisplay) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<ErrorDisplay>}, val: Value(<ZST>) }
    }

    bb21: {
        _70 = [move _71];                // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _69 = &_70;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _68 = _69;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _67 = move _68 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _63 = Arguments::<'_>::new_v1(move _64, move _67) -> [return: bb22, unwind: bb48]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb22: {
        _60 = <ErrorWriter as std::io::Write>::write_fmt(move _61, move _63) -> [return: bb23, unwind: bb48]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut ErrorWriter, Arguments<'b>) -> Result<(), std::io::Error> {<ErrorWriter as std::io::Write>::write_fmt}, val: Value(<ZST>) }
    }

    bb23: {
        _152 = const true;               // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:54: 520:55
        _76 = &_60;                      // scope 5 at ui/write-fmt-errors.rs:41:13: 41:25
        _75 = Result::<(), std::io::Error>::is_err(move _76) -> [return: bb24, unwind: bb54]; // scope 5 at ui/write-fmt-errors.rs:41:13: 41:25
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:41:17: 41:23
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), std::io::Error>) -> bool {Result::<(), std::io::Error>::is_err}, val: Value(<ZST>) }
    }

    bb24: {
        _74 = Not(move _75);             // scope 5 at ui/write-fmt-errors.rs:41:5: 41:60
        switchInt(move _74) -> [0: bb26, otherwise: bb25]; // scope 5 at ui/write-fmt-errors.rs:41:5: 41:60
    }

    bb25: {
        _77 = begin_panic::<&str>(const "writer error did not propagate") -> bb54; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:41:27: 41:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb26: {
        _152 = const false;              // scope 5 at ui/write-fmt-errors.rs:42:16: 42:19
        _83 = move _60;                  // scope 5 at ui/write-fmt-errors.rs:42:16: 42:19
        _82 = Result::<(), std::io::Error>::unwrap_err(move _83) -> [return: bb27, unwind: bb54]; // scope 5 at ui/write-fmt-errors.rs:42:16: 42:32
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:42:20: 42:30
                                         // + literal: Const { ty: fn(Result<(), std::io::Error>) -> std::io::Error {Result::<(), std::io::Error>::unwrap_err}, val: Value(<ZST>) }
    }

    bb27: {
        _81 = &_82;                      // scope 5 at ui/write-fmt-errors.rs:42:16: 42:39
        _80 = std::io::Error::kind(move _81) -> [return: bb28, unwind: bb47]; // scope 5 at ui/write-fmt-errors.rs:42:16: 42:39
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:42:33: 42:37
                                         // + literal: Const { ty: for<'a> fn(&'a std::io::Error) -> ErrorKind {std::io::Error::kind}, val: Value(<ZST>) }
    }

    bb28: {
        _79 = &_80;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _141 = const _;                  // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &ErrorKind, val: Unevaluated(main, [], Some(promoted[3])) }
        _84 = _141;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _78 = (move _79, move _84);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _85 = (_78.0: &std::io::ErrorKind); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _86 = (_78.1: &std::io::ErrorKind); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _89 = _85;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _90 = _86;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _88 = <ErrorKind as PartialEq>::eq(move _89, move _90) -> [return: bb29, unwind: bb47]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ErrorKind, &'b ErrorKind) -> bool {<ErrorKind as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb29: {
        _87 = Not(move _88);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _87) -> [0: bb31, otherwise: bb30]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb30: {
        _91 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _93 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _95 = _85;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _94 = _95;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _97 = _86;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _96 = _97;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _98 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _92 = core::panicking::assert_failed::<ErrorKind, ErrorKind>(move _93, move _94, move _96, move _98) -> bb47; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a ErrorKind, &'b ErrorKind, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<ErrorKind, ErrorKind>}, val: Value(<ZST>) }
    }

    bb31: {
        drop(_82) -> [return: bb32, unwind: bb54]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb32: {
        _100 = &mut _101;                // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
        _140 = const _;                  // scope 5 at ui/write-fmt-errors.rs:45:35: 45:43
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:45:35: 45:43
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[2])) }
        _105 = _140;                     // scope 5 at ui/write-fmt-errors.rs:45:35: 45:43
        _104 = _105;                     // scope 5 at ui/write-fmt-errors.rs:45:35: 45:43
        _103 = move _104 as &[&str] (Pointer(Unsize)); // scope 5 at ui/write-fmt-errors.rs:45:35: 45:43
        _139 = const _;                  // scope 5 at ui/write-fmt-errors.rs:45:45: 45:57
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:45:45: 45:57
                                         // + literal: Const { ty: &ErrorDisplay, val: Unevaluated(main, [], Some(promoted[1])) }
        _112 = _139;                     // scope 5 at ui/write-fmt-errors.rs:45:45: 45:57
        _111 = _112;                     // scope 5 at ui/write-fmt-errors.rs:45:45: 45:57
        _110 = core::fmt::ArgumentV1::<'_>::new_display::<ErrorDisplay>(move _111) -> [return: bb33, unwind: bb54]; // scope 5 at ui/write-fmt-errors.rs:45:45: 45:57
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:45:45: 45:57
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'b> fn(&'b ErrorDisplay) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<ErrorDisplay>}, val: Value(<ZST>) }
    }

    bb33: {
        _109 = [move _110];              // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _108 = &_109;                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _107 = _108;                     // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _106 = move _107 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _102 = Arguments::<'_>::new_v1(move _103, move _106) -> [return: bb34, unwind: bb54]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb34: {
        _99 = <ErrorWriter as std::io::Write>::write_fmt(move _100, move _102) -> [return: bb35, unwind: bb54]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut ErrorWriter, Arguments<'b>) -> Result<(), std::io::Error> {<ErrorWriter as std::io::Write>::write_fmt}, val: Value(<ZST>) }
    }

    bb35: {
        _151 = const true;               // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:54: 520:55
        _115 = &_99;                     // scope 8 at ui/write-fmt-errors.rs:46:13: 46:25
        _114 = Result::<(), std::io::Error>::is_err(move _115) -> [return: bb36, unwind: bb52]; // scope 8 at ui/write-fmt-errors.rs:46:13: 46:25
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:46:17: 46:23
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), std::io::Error>) -> bool {Result::<(), std::io::Error>::is_err}, val: Value(<ZST>) }
    }

    bb36: {
        _113 = Not(move _114);           // scope 8 at ui/write-fmt-errors.rs:46:5: 46:63
        switchInt(move _113) -> [0: bb38, otherwise: bb37]; // scope 8 at ui/write-fmt-errors.rs:46:5: 46:63
    }

    bb37: {
        _116 = begin_panic::<&str>(const "formatter error did not propagate") -> bb52; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:46:27: 46:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb38: {
        _151 = const false;              // scope 8 at ui/write-fmt-errors.rs:47:16: 47:19
        _122 = move _99;                 // scope 8 at ui/write-fmt-errors.rs:47:16: 47:19
        _121 = Result::<(), std::io::Error>::unwrap_err(move _122) -> [return: bb39, unwind: bb52]; // scope 8 at ui/write-fmt-errors.rs:47:16: 47:32
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:47:20: 47:30
                                         // + literal: Const { ty: fn(Result<(), std::io::Error>) -> std::io::Error {Result::<(), std::io::Error>::unwrap_err}, val: Value(<ZST>) }
    }

    bb39: {
        _120 = &_121;                    // scope 8 at ui/write-fmt-errors.rs:47:16: 47:39
        _119 = std::io::Error::kind(move _120) -> [return: bb40, unwind: bb46]; // scope 8 at ui/write-fmt-errors.rs:47:16: 47:39
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:47:33: 47:37
                                         // + literal: Const { ty: for<'a> fn(&'a std::io::Error) -> ErrorKind {std::io::Error::kind}, val: Value(<ZST>) }
    }

    bb40: {
        _118 = &_119;                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _138 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &ErrorKind, val: Unevaluated(main, [], Some(promoted[0])) }
        _123 = _138;                     // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _117 = (move _118, move _123);   // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _124 = (_117.0: &std::io::ErrorKind); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _125 = (_117.1: &std::io::ErrorKind); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _128 = _124;                     // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _129 = _125;                     // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _127 = <ErrorKind as PartialEq>::eq(move _128, move _129) -> [return: bb41, unwind: bb46]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ErrorKind, &'b ErrorKind) -> bool {<ErrorKind as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb41: {
        _126 = Not(move _127);           // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _126) -> [0: bb43, otherwise: bb42]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb42: {
        _130 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _132 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _134 = _124;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _133 = _134;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _136 = _125;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _135 = _136;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _137 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _131 = core::panicking::assert_failed::<ErrorKind, ErrorKind>(move _132, move _133, move _135, move _137) -> bb46; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a ErrorKind, &'b ErrorKind, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<ErrorKind, ErrorKind>}, val: Value(<ZST>) }
    }

    bb43: {
        drop(_121) -> [return: bb44, unwind: bb52]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb44: {
        _151 = const false;              // scope 5 at ui/write-fmt-errors.rs:48:1: 48:2
        _152 = const false;              // scope 4 at ui/write-fmt-errors.rs:48:1: 48:2
        drop(_46) -> [return: bb45, unwind: bb56]; // scope 1 at ui/write-fmt-errors.rs:48:1: 48:2
    }

    bb45: {
        _153 = const false;              // scope 0 at ui/write-fmt-errors.rs:48:1: 48:2
        return;                          // scope 0 at ui/write-fmt-errors.rs:48:2: 48:2
    }

    bb46 (cleanup): {
        drop(_121) -> bb52;              // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb47 (cleanup): {
        drop(_82) -> bb54;               // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb48 (cleanup): {
        drop(_46) -> bb56;               // scope 1 at ui/write-fmt-errors.rs:48:1: 48:2
    }

    bb49 (cleanup): {
        drop(_29) -> bb56;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb50 (cleanup): {
        resume;                          // scope 0 at ui/write-fmt-errors.rs:29:1: 48:2
    }

    bb51 (cleanup): {
        drop(_99) -> bb54;               // scope 5 at ui/write-fmt-errors.rs:48:1: 48:2
    }

    bb52 (cleanup): {
        switchInt(_151) -> [0: bb54, otherwise: bb51]; // scope 5 at ui/write-fmt-errors.rs:48:1: 48:2
    }

    bb53 (cleanup): {
        drop(_60) -> bb48;               // scope 4 at ui/write-fmt-errors.rs:48:1: 48:2
    }

    bb54 (cleanup): {
        switchInt(_152) -> [0: bb48, otherwise: bb53]; // scope 4 at ui/write-fmt-errors.rs:48:1: 48:2
    }

    bb55 (cleanup): {
        drop(_1) -> bb50;                // scope 0 at ui/write-fmt-errors.rs:48:1: 48:2
    }

    bb56 (cleanup): {
        switchInt(_153) -> [0: bb50, otherwise: bb55]; // scope 0 at ui/write-fmt-errors.rs:48:1: 48:2
    }
}

promoted[0] in main: &ErrorKind = {
    let mut _0: &std::io::ErrorKind;     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::io::ErrorKind;      // in scope 0 at ui/write-fmt-errors.rs:47:41: 47:53

    bb0: {
        _1 = const _;                    // scope 0 at ui/write-fmt-errors.rs:47:41: 47:53
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:47:41: 47:53
                                         // + literal: Const { ty: ErrorKind, val: Unevaluated(FORMAT_ERROR, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &ErrorDisplay = {
    let mut _0: &ErrorDisplay;           // return place in scope 0 at ui/write-fmt-errors.rs:45:45: 45:57
    let mut _1: ErrorDisplay;            // in scope 0 at ui/write-fmt-errors.rs:45:45: 45:57

    bb0: {
        _1 = ErrorDisplay;               // scope 0 at ui/write-fmt-errors.rs:45:45: 45:57
        _0 = &_1;                        // scope 0 at ui/write-fmt-errors.rs:45:45: 45:57
        return;                          // scope 0 at ui/write-fmt-errors.rs:45:45: 45:57
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/write-fmt-errors.rs:45:35: 45:43
    let mut _1: [&str; 2];               // in scope 0 at ui/write-fmt-errors.rs:45:35: 45:43

    bb0: {
        _1 = [const "", const " abc"];   // scope 0 at ui/write-fmt-errors.rs:45:35: 45:43
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:45:35: 45:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:45:35: 45:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/write-fmt-errors.rs:45:35: 45:43
        return;                          // scope 0 at ui/write-fmt-errors.rs:45:35: 45:43
    }
}

promoted[3] in main: &ErrorKind = {
    let mut _0: &std::io::ErrorKind;     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::io::ErrorKind;      // in scope 0 at ui/write-fmt-errors.rs:42:41: 42:53

    bb0: {
        _1 = const _;                    // scope 0 at ui/write-fmt-errors.rs:42:41: 42:53
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:42:41: 42:53
                                         // + literal: Const { ty: ErrorKind, val: Unevaluated(WRITER_ERROR, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &ErrorDisplay = {
    let mut _0: &ErrorDisplay;           // return place in scope 0 at ui/write-fmt-errors.rs:40:45: 40:57
    let mut _1: ErrorDisplay;            // in scope 0 at ui/write-fmt-errors.rs:40:45: 40:57

    bb0: {
        _1 = ErrorDisplay;               // scope 0 at ui/write-fmt-errors.rs:40:45: 40:57
        _0 = &_1;                        // scope 0 at ui/write-fmt-errors.rs:40:45: 40:57
        return;                          // scope 0 at ui/write-fmt-errors.rs:40:45: 40:57
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/write-fmt-errors.rs:40:35: 40:43
    let mut _1: [&str; 1];               // in scope 0 at ui/write-fmt-errors.rs:40:35: 40:43

    bb0: {
        _1 = [const "abc "];             // scope 0 at ui/write-fmt-errors.rs:40:35: 40:43
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:40:35: 40:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/write-fmt-errors.rs:40:35: 40:43
        return;                          // scope 0 at ui/write-fmt-errors.rs:40:35: 40:43
    }
}

promoted[6] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    }
}

promoted[7] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/write-fmt-errors.rs:36:35: 36:40
    let mut _1: [&str; 1];               // in scope 0 at ui/write-fmt-errors.rs:36:35: 36:40

    bb0: {
        _1 = [const "abc"];              // scope 0 at ui/write-fmt-errors.rs:36:35: 36:40
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:36:35: 36:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/write-fmt-errors.rs:36:35: 36:40
        return;                          // scope 0 at ui/write-fmt-errors.rs:36:35: 36:40
    }
}

promoted[8] in main: &ErrorKind = {
    let mut _0: &std::io::ErrorKind;     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::io::ErrorKind;      // in scope 0 at ui/write-fmt-errors.rs:33:41: 33:53

    bb0: {
        _1 = const _;                    // scope 0 at ui/write-fmt-errors.rs:33:41: 33:53
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:33:41: 33:53
                                         // + literal: Const { ty: ErrorKind, val: Unevaluated(FORMAT_ERROR, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[9] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/write-fmt-errors.rs:31:59: 31:64
    let mut _1: &str;                    // in scope 0 at ui/write-fmt-errors.rs:31:59: 31:64

    bb0: {
        _1 = const "bar";                // scope 0 at ui/write-fmt-errors.rs:31:59: 31:64
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:31:59: 31:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/write-fmt-errors.rs:31:59: 31:64
        return;                          // scope 0 at ui/write-fmt-errors.rs:31:59: 31:64
    }
}

promoted[10] in main: &ErrorDisplay = {
    let mut _0: &ErrorDisplay;           // return place in scope 0 at ui/write-fmt-errors.rs:31:45: 31:57
    let mut _1: ErrorDisplay;            // in scope 0 at ui/write-fmt-errors.rs:31:45: 31:57

    bb0: {
        _1 = ErrorDisplay;               // scope 0 at ui/write-fmt-errors.rs:31:45: 31:57
        _0 = &_1;                        // scope 0 at ui/write-fmt-errors.rs:31:45: 31:57
        return;                          // scope 0 at ui/write-fmt-errors.rs:31:45: 31:57
    }
}

promoted[11] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/write-fmt-errors.rs:31:42: 31:43
    let mut _1: i32;                     // in scope 0 at ui/write-fmt-errors.rs:31:42: 31:43

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/write-fmt-errors.rs:31:42: 31:43
        _0 = &_1;                        // scope 0 at ui/write-fmt-errors.rs:31:42: 31:43
        return;                          // scope 0 at ui/write-fmt-errors.rs:31:42: 31:43
    }
}

promoted[12] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/write-fmt-errors.rs:31:30: 31:40
    let mut _1: [&str; 3];               // in scope 0 at ui/write-fmt-errors.rs:31:30: 31:40

    bb0: {
        _1 = [const "", const " ", const " "]; // scope 0 at ui/write-fmt-errors.rs:31:30: 31:40
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:31:30: 31:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:31:30: 31:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/write-fmt-errors.rs:31:30: 31:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/write-fmt-errors.rs:31:30: 31:40
        return;                          // scope 0 at ui/write-fmt-errors.rs:31:30: 31:40
    }
}
