// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: isize, _2: F) -> isize {
    debug i => _1;
    debug f => _2;
    let mut _0: isize;
    let mut _3: (isize,);

    bb0: {
        _3 = (_1,);
        _0 = <F as FnOnce<(isize,)>>::call_once(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn g(_1: G) -> () {
    debug _g => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let _4: &isize;
    let _5: &isize;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: isize;
    let mut _9: isize;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let _13: ();
    let mut _14: (&isize, &isize);
    let mut _15: &isize;
    let _16: isize;
    let _17: &isize;
    let _18: &isize;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: isize;
    let mut _22: isize;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let _26: ();
    let mut _27: &isize;
    let mut _28: &isize;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _17;
        debug right_val => _18;
        let _23: core::panicking::AssertKind;
        scope 4 {
            debug kind => _23;
        }
    }

    bb0: {
        _3 = f::<[closure@ui/newlambdas.rs:10:22: 10:25]>(const 10_isize, const ZeroSized: [closure@ui/newlambdas.rs:10:22: 10:25]) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _28 = const _;
        _1 = (move _2, _28);
        _4 = (_1.0: &isize);
        _5 = (_1.1: &isize);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<isize, isize>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _13 = g::<[closure@ui/newlambdas.rs:11:7: 11:9]>(const ZeroSized: [closure@ui/newlambdas.rs:11:7: 11:9]) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = f::<[closure@ui/newlambdas.rs:12:22: 12:25]>(const 10_isize, const ZeroSized: [closure@ui/newlambdas.rs:12:22: 12:25]) -> [return: bb5, unwind continue];
    }

    bb5: {
        _15 = &_16;
        _27 = const _;
        _14 = (move _15, _27);
        _17 = (_14.0: &isize);
        _18 = (_14.1: &isize);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<isize, isize>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb7: {
        _26 = g::<[closure@ui/newlambdas.rs:13:7: 13:9]>(const ZeroSized: [closure@ui/newlambdas.rs:13:7: 13:9]) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

fn main::{closure#2}(_1: [closure@ui/newlambdas.rs:10:22: 10:25], _2: isize) -> isize {
    debug a => _2;
    let mut _0: isize;

    bb0: {
        _0 = _2;
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/newlambdas.rs:11:7: 11:9]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main::{closure#3}(_1: [closure@ui/newlambdas.rs:12:22: 12:25], _2: isize) -> isize {
    debug a => _2;
    let mut _0: isize;

    bb0: {
        _0 = _2;
        return;
    }
}

fn main::{closure#1}(_1: [closure@ui/newlambdas.rs:13:7: 13:9]) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
