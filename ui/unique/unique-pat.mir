// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn simple() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-pat.rs:5:13: 5:13
    let mut _1: std::boxed::Box<bool>;   // in scope 0 at ui/unique/unique-pat.rs:6:11: 6:25
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _3: *const bool;             // in scope 0 at ui/unique/unique-pat.rs:6:11: 6:25

    bb0: {
        _1 = Box::<bool>::new(const true) -> bb1; // scope 0 at ui/unique/unique-pat.rs:6:11: 6:25
                                         // mir::Constant
                                         // + span: ui/unique/unique-pat.rs:6:11: 6:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(bool) -> Box<bool> {Box::<bool>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = (((_1.0: std::ptr::Unique<bool>).0: std::ptr::NonNull<bool>).0: *const bool); // scope 0 at ui/unique/unique-pat.rs:6:5: 6:25
        switchInt((*_3)) -> [0: bb2, otherwise: bb3]; // scope 0 at ui/unique/unique-pat.rs:6:5: 6:25
    }

    bb2: {
        _2 = begin_panic::<&str>(const "explicit panic") -> bb5; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/unique/unique-pat.rs:10:1: 10:2
    }

    bb4: {
        return;                          // scope 0 at ui/unique/unique-pat.rs:10:2: 10:2
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/unique/unique-pat.rs:10:1: 10:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-pat.rs:5:1: 10:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-pat.rs:12:15: 12:15
    let _1: ();                          // in scope 0 at ui/unique/unique-pat.rs:13:5: 13:13

    bb0: {
        _1 = simple() -> bb1;            // scope 0 at ui/unique/unique-pat.rs:13:5: 13:13
                                         // mir::Constant
                                         // + span: ui/unique/unique-pat.rs:13:5: 13:11
                                         // + literal: Const { ty: fn() {simple}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/unique/unique-pat.rs:14:2: 14:2
    }
}
