// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn child(_1: &Sender<Box<usize>>, _2: usize) -> () {
    debug tx => _1;                      // in scope 0 at ui/unique/unique-send-2.rs:8:10: 8:12
    debug i => _2;                       // in scope 0 at ui/unique/unique-send-2.rs:8:35: 8:36
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-send-2.rs:8:45: 8:45
    let _3: ();                          // in scope 0 at ui/unique/unique-send-2.rs:9:5: 9:34
    let mut _4: std::result::Result<(), std::sync::mpsc::SendError<std::boxed::Box<usize>>>; // in scope 0 at ui/unique/unique-send-2.rs:9:5: 9:25
    let mut _5: &std::sync::mpsc::Sender<std::boxed::Box<usize>>; // in scope 0 at ui/unique/unique-send-2.rs:9:5: 9:25
    let mut _6: std::boxed::Box<usize>;  // in scope 0 at ui/unique/unique-send-2.rs:9:13: 9:24
    let mut _7: usize;                   // in scope 0 at ui/unique/unique-send-2.rs:9:22: 9:23

    bb0: {
        _5 = _1;                         // scope 0 at ui/unique/unique-send-2.rs:9:5: 9:25
        _7 = _2;                         // scope 0 at ui/unique/unique-send-2.rs:9:22: 9:23
        _6 = Box::<usize>::new(move _7) -> bb1; // scope 0 at ui/unique/unique-send-2.rs:9:13: 9:24
                                         // mir::Constant
                                         // + span: ui/unique/unique-send-2.rs:9:13: 9:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> Box<usize> {Box::<usize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Sender::<Box<usize>>::send(move _5, move _6) -> bb2; // scope 0 at ui/unique/unique-send-2.rs:9:5: 9:25
                                         // mir::Constant
                                         // + span: ui/unique/unique-send-2.rs:9:8: 9:12
                                         // + literal: Const { ty: for<'a> fn(&'a Sender<Box<usize>>, Box<usize>) -> Result<(), SendError<Box<usize>>> {Sender::<Box<usize>>::send}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Result::<(), SendError<Box<usize>>>::unwrap(move _4) -> bb3; // scope 0 at ui/unique/unique-send-2.rs:9:5: 9:34
                                         // mir::Constant
                                         // + span: ui/unique/unique-send-2.rs:9:26: 9:32
                                         // + literal: Const { ty: fn(Result<(), SendError<Box<usize>>>) {Result::<(), SendError<Box<usize>>>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/unique/unique-send-2.rs:10:2: 10:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-send-2.rs:12:15: 12:15
    let _1: std::sync::mpsc::Sender<std::boxed::Box<usize>>; // in scope 0 at ui/unique/unique-send-2.rs:13:10: 13:12
    let _2: std::sync::mpsc::Receiver<std::boxed::Box<usize>>; // in scope 0 at ui/unique/unique-send-2.rs:13:14: 13:16
    let mut _3: (std::sync::mpsc::Sender<std::boxed::Box<usize>>, std::sync::mpsc::Receiver<std::boxed::Box<usize>>); // in scope 0 at ui/unique/unique-send-2.rs:13:20: 13:29
    let mut _7: std::iter::Map<std::ops::Range<usize>, [closure@ui/unique/unique-send-2.rs:16:25: 16:28]>; // in scope 0 at ui/unique/unique-send-2.rs:16:14: 22:7
    let mut _8: std::ops::Range<usize>;  // in scope 0 at ui/unique/unique-send-2.rs:16:14: 16:20
    let mut _9: usize;                   // in scope 0 at ui/unique/unique-send-2.rs:16:18: 16:19
    let mut _10: [closure@ui/unique/unique-send-2.rs:16:25: 16:28]; // in scope 0 at ui/unique/unique-send-2.rs:16:25: 22:6
    let mut _11: &mut usize;             // in scope 0 at ui/unique/unique-send-2.rs:16:25: 22:6
    let mut _12: &std::sync::mpsc::Sender<std::boxed::Box<usize>>; // in scope 0 at ui/unique/unique-send-2.rs:16:25: 22:6
    let mut _14: std::ops::Range<usize>; // in scope 0 at ui/unique/unique-send-2.rs:25:14: 25:18
    let mut _15: std::ops::Range<usize>; // in scope 0 at ui/unique/unique-send-2.rs:25:14: 25:18
    let mut _16: usize;                  // in scope 0 at ui/unique/unique-send-2.rs:25:17: 25:18
    let mut _18: std::option::Option<usize>; // in scope 0 at ui/unique/unique-send-2.rs:25:14: 25:18
    let mut _19: &mut std::ops::Range<usize>; // in scope 0 at ui/unique/unique-send-2.rs:25:14: 25:18
    let mut _20: &mut std::ops::Range<usize>; // in scope 0 at ui/unique/unique-send-2.rs:25:14: 25:18
    let mut _21: isize;                  // in scope 0 at ui/unique/unique-send-2.rs:25:5: 28:6
    let mut _23: std::result::Result<std::boxed::Box<usize>, std::sync::mpsc::RecvError>; // in scope 0 at ui/unique/unique-send-2.rs:26:17: 26:26
    let mut _24: &std::sync::mpsc::Receiver<std::boxed::Box<usize>>; // in scope 0 at ui/unique/unique-send-2.rs:26:17: 26:26
    let mut _25: usize;                  // in scope 0 at ui/unique/unique-send-2.rs:27:19: 27:21
    let mut _26: (usize, bool);          // in scope 0 at ui/unique/unique-send-2.rs:27:9: 27:21
    let mut _27: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _28: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _29: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _33: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _34: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _35: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _37: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _38: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _39: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _40: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _41: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _42: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _44: std::vec::IntoIter<std::thread::JoinHandle<()>>; // in scope 0 at ui/unique/unique-send-2.rs:32:14: 32:16
    let mut _45: std::vec::Vec<std::thread::JoinHandle<()>>; // in scope 0 at ui/unique/unique-send-2.rs:32:14: 32:16
    let mut _47: std::option::Option<std::thread::JoinHandle<()>>; // in scope 0 at ui/unique/unique-send-2.rs:32:14: 32:16
    let mut _48: &mut std::vec::IntoIter<std::thread::JoinHandle<()>>; // in scope 0 at ui/unique/unique-send-2.rs:32:14: 32:16
    let mut _49: &mut std::vec::IntoIter<std::thread::JoinHandle<()>>; // in scope 0 at ui/unique/unique-send-2.rs:32:14: 32:16
    let mut _50: isize;                  // in scope 0 at ui/unique/unique-send-2.rs:32:5: 32:30
    let _52: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/unique/unique-send-2.rs:32:19: 32:27
    let mut _53: std::thread::JoinHandle<()>; // in scope 0 at ui/unique/unique-send-2.rs:32:19: 32:20
    let mut _54: bool;                   // in scope 0 at ui/unique/unique-send-2.rs:33:1: 33:2
    let mut _55: *const usize;           // in scope 0 at ui/unique/unique-send-2.rs:26:13: 26:14
    scope 1 {
        debug tx => _1;                  // in scope 1 at ui/unique/unique-send-2.rs:13:10: 13:12
        debug rx => _2;                  // in scope 1 at ui/unique/unique-send-2.rs:13:14: 13:16
        let _4: usize;                   // in scope 1 at ui/unique/unique-send-2.rs:14:9: 14:10
        scope 2 {
            debug n => _4;               // in scope 2 at ui/unique/unique-send-2.rs:14:9: 14:10
            let mut _5: usize;           // in scope 2 at ui/unique/unique-send-2.rs:15:9: 15:21
            scope 3 {
                debug expected => _5;    // in scope 3 at ui/unique/unique-send-2.rs:15:9: 15:21
                let _6: std::vec::Vec<std::thread::JoinHandle<()>>; // in scope 3 at ui/unique/unique-send-2.rs:16:9: 16:11
                scope 4 {
                    debug ts => _6;      // in scope 4 at ui/unique/unique-send-2.rs:16:9: 16:11
                    let mut _13: usize;  // in scope 4 at ui/unique/unique-send-2.rs:24:9: 24:19
                    scope 5 {
                        debug actual => _13; // in scope 5 at ui/unique/unique-send-2.rs:24:9: 24:19
                        let mut _17: std::ops::Range<usize>; // in scope 5 at ui/unique/unique-send-2.rs:25:14: 25:18
                        let _30: &usize; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _31: &usize; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let mut _46: std::vec::IntoIter<std::thread::JoinHandle<()>>; // in scope 5 at ui/unique/unique-send-2.rs:32:14: 32:16
                        scope 6 {
                            debug iter => _17; // in scope 6 at ui/unique/unique-send-2.rs:25:14: 25:18
                            let _22: std::boxed::Box<usize>; // in scope 6 at ui/unique/unique-send-2.rs:26:13: 26:14
                            scope 7 {
                                debug j => _22; // in scope 7 at ui/unique/unique-send-2.rs:26:13: 26:14
                            }
                        }
                        scope 8 {
                            debug left_val => _30; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _31; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _36: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 9 {
                                debug kind => _36; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                        scope 10 {
                            debug iter => _46; // in scope 10 at ui/unique/unique-send-2.rs:32:14: 32:16
                            let _51: std::thread::JoinHandle<()>; // in scope 10 at ui/unique/unique-send-2.rs:32:9: 32:10
                            scope 11 {
                                debug t => _51; // in scope 11 at ui/unique/unique-send-2.rs:32:9: 32:10
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _54 = const false;               // scope 0 at ui/unique/unique-send-2.rs:13:20: 13:29
        _3 = channel::<Box<usize>>() -> bb1; // scope 0 at ui/unique/unique-send-2.rs:13:20: 13:29
                                         // mir::Constant
                                         // + span: ui/unique/unique-send-2.rs:13:20: 13:27
                                         // + literal: Const { ty: fn() -> (Sender<Box<usize>>, std::sync::mpsc::Receiver<Box<usize>>) {channel::<Box<usize>>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = move (_3.0: std::sync::mpsc::Sender<std::boxed::Box<usize>>); // scope 0 at ui/unique/unique-send-2.rs:13:10: 13:12
        _2 = move (_3.1: std::sync::mpsc::Receiver<std::boxed::Box<usize>>); // scope 0 at ui/unique/unique-send-2.rs:13:14: 13:16
        _4 = const 100_usize;            // scope 1 at ui/unique/unique-send-2.rs:14:13: 14:16
        _5 = const 0_usize;              // scope 2 at ui/unique/unique-send-2.rs:15:24: 15:25
        _9 = const 100_usize;            // scope 3 at ui/unique/unique-send-2.rs:16:18: 16:19
        _8 = std::ops::Range::<usize> { start: const 0_usize, end: move _9 }; // scope 3 at ui/unique/unique-send-2.rs:16:14: 16:20
        _11 = &mut _5;                   // scope 3 at ui/unique/unique-send-2.rs:16:25: 22:6
        _12 = &_1;                       // scope 3 at ui/unique/unique-send-2.rs:16:25: 22:6
        _10 = [closure@ui/unique/unique-send-2.rs:16:25: 16:28] { expected: move _11, tx: move _12 }; // scope 3 at ui/unique/unique-send-2.rs:16:25: 22:6
                                         // closure
                                         // + def_id: DefId(0:9 ~ unique_send_2[b3b9]::main::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((usize,)) -> std::thread::JoinHandle<()>,
                                         //     (&mut usize, &std::sync::mpsc::Sender<std::boxed::Box<usize>>),
                                         // ]
        _7 = <std::ops::Range<usize> as Iterator>::map::<JoinHandle<()>, [closure@ui/unique/unique-send-2.rs:16:25: 16:28]>(move _8, move _10) -> [return: bb2, unwind: bb27]; // scope 3 at ui/unique/unique-send-2.rs:16:14: 22:7
                                         // mir::Constant
                                         // + span: ui/unique/unique-send-2.rs:16:21: 16:24
                                         // + literal: Const { ty: fn(std::ops::Range<usize>, [closure@ui/unique/unique-send-2.rs:16:25: 16:28]) -> Map<std::ops::Range<usize>, [closure@ui/unique/unique-send-2.rs:16:25: 16:28]> {<std::ops::Range<usize> as Iterator>::map::<JoinHandle<()>, [closure@ui/unique/unique-send-2.rs:16:25: 16:28]>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = <Map<std::ops::Range<usize>, [closure@ui/unique/unique-send-2.rs:16:25: 16:28]> as Iterator>::collect::<Vec<JoinHandle<()>>>(move _7) -> [return: bb3, unwind: bb27]; // scope 3 at ui/unique/unique-send-2.rs:16:14: 22:27
                                         // mir::Constant
                                         // + span: ui/unique/unique-send-2.rs:22:8: 22:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Map<std::ops::Range<usize>, [closure@ui/unique/unique-send-2.rs:16:25: 16:28]>) -> Vec<JoinHandle<()>> {<Map<std::ops::Range<usize>, [closure@ui/unique/unique-send-2.rs:16:25: 16:28]> as Iterator>::collect::<Vec<JoinHandle<()>>>}, val: Value(<ZST>) }
    }

    bb3: {
        _54 = const true;                // scope 3 at ui/unique/unique-send-2.rs:22:26: 22:27
        _13 = const 0_usize;             // scope 4 at ui/unique/unique-send-2.rs:24:22: 24:23
        _16 = _4;                        // scope 5 at ui/unique/unique-send-2.rs:25:17: 25:18
        _15 = std::ops::Range::<usize> { start: const 0_usize, end: move _16 }; // scope 5 at ui/unique/unique-send-2.rs:25:14: 25:18
        _14 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _15) -> [return: bb4, unwind: bb31]; // scope 5 at ui/unique/unique-send-2.rs:25:14: 25:18
                                         // mir::Constant
                                         // + span: ui/unique/unique-send-2.rs:25:14: 25:18
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb4: {
        _17 = move _14;                  // scope 5 at ui/unique/unique-send-2.rs:25:14: 25:18
        goto -> bb5;                     // scope 6 at ui/unique/unique-send-2.rs:25:5: 28:6
    }

    bb5: {
        _20 = &mut _17;                  // scope 6 at ui/unique/unique-send-2.rs:25:14: 25:18
        _19 = &mut (*_20);               // scope 6 at ui/unique/unique-send-2.rs:25:14: 25:18
        _18 = <std::ops::Range<usize> as Iterator>::next(move _19) -> [return: bb6, unwind: bb31]; // scope 6 at ui/unique/unique-send-2.rs:25:14: 25:18
                                         // mir::Constant
                                         // + span: ui/unique/unique-send-2.rs:25:14: 25:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb6: {
        _21 = discriminant(_18);         // scope 6 at ui/unique/unique-send-2.rs:25:14: 25:18
        switchInt(move _21) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 6 at ui/unique/unique-send-2.rs:25:14: 25:18
    }

    bb7: {
        _24 = &_2;                       // scope 6 at ui/unique/unique-send-2.rs:26:17: 26:26
        _23 = std::sync::mpsc::Receiver::<Box<usize>>::recv(move _24) -> [return: bb10, unwind: bb31]; // scope 6 at ui/unique/unique-send-2.rs:26:17: 26:26
                                         // mir::Constant
                                         // + span: ui/unique/unique-send-2.rs:26:20: 26:24
                                         // + literal: Const { ty: for<'a> fn(&'a std::sync::mpsc::Receiver<Box<usize>>) -> Result<Box<usize>, RecvError> {std::sync::mpsc::Receiver::<Box<usize>>::recv}, val: Value(<ZST>) }
    }

    bb8: {
        unreachable;                     // scope 6 at ui/unique/unique-send-2.rs:25:14: 25:18
    }

    bb9: {
        _28 = &_5;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _29 = &_13;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _27 = (move _28, move _29);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _30 = (_27.0: &usize);           // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _31 = (_27.1: &usize);           // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _34 = (*_30);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _35 = (*_31);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _33 = Eq(move _34, move _35);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _32 = Not(move _33);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _32) -> [0: bb14, otherwise: bb13]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _22 = Result::<Box<usize>, RecvError>::unwrap(move _23) -> [return: bb11, unwind: bb31]; // scope 6 at ui/unique/unique-send-2.rs:26:17: 26:35
                                         // mir::Constant
                                         // + span: ui/unique/unique-send-2.rs:26:27: 26:33
                                         // + literal: Const { ty: fn(Result<Box<usize>, RecvError>) -> Box<usize> {Result::<Box<usize>, RecvError>::unwrap}, val: Value(<ZST>) }
    }

    bb11: {
        _55 = (((_22.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 7 at ui/unique/unique-send-2.rs:27:19: 27:21
        _25 = (*_55);                    // scope 7 at ui/unique/unique-send-2.rs:27:19: 27:21
        _26 = CheckedAdd(_13, _25);      // scope 7 at ui/unique/unique-send-2.rs:27:9: 27:21
        assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", _13, move _25) -> [success: bb12, unwind: bb26]; // scope 7 at ui/unique/unique-send-2.rs:27:9: 27:21
    }

    bb12: {
        _13 = move (_26.0: usize);       // scope 7 at ui/unique/unique-send-2.rs:27:9: 27:21
        drop(_22) -> [return: bb5, unwind: bb31]; // scope 6 at ui/unique/unique-send-2.rs:28:5: 28:6
    }

    bb13: {
        _36 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _40 = _30;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _40;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _31;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = _42;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _43 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _37 = core::panicking::assert_failed::<usize, usize>(move _38, move _39, move _41, move _43) -> bb31; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb14: {
        _54 = const false;               // scope 5 at ui/unique/unique-send-2.rs:32:14: 32:16
        _45 = move _6;                   // scope 5 at ui/unique/unique-send-2.rs:32:14: 32:16
        _44 = <Vec<JoinHandle<()>> as IntoIterator>::into_iter(move _45) -> [return: bb15, unwind: bb31]; // scope 5 at ui/unique/unique-send-2.rs:32:14: 32:16
                                         // mir::Constant
                                         // + span: ui/unique/unique-send-2.rs:32:14: 32:16
                                         // + literal: Const { ty: fn(Vec<JoinHandle<()>>) -> <Vec<JoinHandle<()>> as IntoIterator>::IntoIter {<Vec<JoinHandle<()>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb15: {
        _46 = move _44;                  // scope 5 at ui/unique/unique-send-2.rs:32:14: 32:16
        goto -> bb16;                    // scope 10 at ui/unique/unique-send-2.rs:32:5: 32:30
    }

    bb16: {
        _49 = &mut _46;                  // scope 10 at ui/unique/unique-send-2.rs:32:14: 32:16
        _48 = &mut (*_49);               // scope 10 at ui/unique/unique-send-2.rs:32:14: 32:16
        _47 = <std::vec::IntoIter<JoinHandle<()>> as Iterator>::next(move _48) -> [return: bb17, unwind: bb25]; // scope 10 at ui/unique/unique-send-2.rs:32:14: 32:16
                                         // mir::Constant
                                         // + span: ui/unique/unique-send-2.rs:32:14: 32:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<JoinHandle<()>>) -> Option<<std::vec::IntoIter<JoinHandle<()>> as Iterator>::Item> {<std::vec::IntoIter<JoinHandle<()>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb17: {
        _50 = discriminant(_47);         // scope 10 at ui/unique/unique-send-2.rs:32:14: 32:16
        switchInt(move _50) -> [0: bb20, 1: bb18, otherwise: bb19]; // scope 10 at ui/unique/unique-send-2.rs:32:14: 32:16
    }

    bb18: {
        _51 = move ((_47 as Some).0: std::thread::JoinHandle<()>); // scope 10 at ui/unique/unique-send-2.rs:32:9: 32:10
        _53 = move _51;                  // scope 11 at ui/unique/unique-send-2.rs:32:19: 32:20
        _52 = JoinHandle::<()>::join(move _53) -> [return: bb21, unwind: bb25]; // scope 11 at ui/unique/unique-send-2.rs:32:19: 32:27
                                         // mir::Constant
                                         // + span: ui/unique/unique-send-2.rs:32:21: 32:25
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb19: {
        unreachable;                     // scope 10 at ui/unique/unique-send-2.rs:32:14: 32:16
    }

    bb20: {
        drop(_46) -> [return: bb22, unwind: bb31]; // scope 5 at ui/unique/unique-send-2.rs:32:29: 32:30
    }

    bb21: {
        drop(_52) -> [return: bb16, unwind: bb25]; // scope 11 at ui/unique/unique-send-2.rs:32:27: 32:28
    }

    bb22: {
        _54 = const false;               // scope 3 at ui/unique/unique-send-2.rs:33:1: 33:2
        drop(_2) -> [return: bb23, unwind: bb28]; // scope 0 at ui/unique/unique-send-2.rs:33:1: 33:2
    }

    bb23: {
        drop(_1) -> bb24;                // scope 0 at ui/unique/unique-send-2.rs:33:1: 33:2
    }

    bb24: {
        return;                          // scope 0 at ui/unique/unique-send-2.rs:33:2: 33:2
    }

    bb25 (cleanup): {
        drop(_46) -> bb31;               // scope 5 at ui/unique/unique-send-2.rs:32:29: 32:30
    }

    bb26 (cleanup): {
        drop(_22) -> bb31;               // scope 6 at ui/unique/unique-send-2.rs:28:5: 28:6
    }

    bb27 (cleanup): {
        drop(_2) -> bb28;                // scope 0 at ui/unique/unique-send-2.rs:33:1: 33:2
    }

    bb28 (cleanup): {
        drop(_1) -> bb29;                // scope 0 at ui/unique/unique-send-2.rs:33:1: 33:2
    }

    bb29 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-send-2.rs:12:1: 33:2
    }

    bb30 (cleanup): {
        drop(_6) -> bb27;                // scope 3 at ui/unique/unique-send-2.rs:33:1: 33:2
    }

    bb31 (cleanup): {
        switchInt(_54) -> [0: bb27, otherwise: bb30]; // scope 3 at ui/unique/unique-send-2.rs:33:1: 33:2
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/unique/unique-send-2.rs:16:25: 16:28], _2: usize) -> JoinHandle<()> {
    debug i => _2;                       // in scope 0 at ui/unique/unique-send-2.rs:16:26: 16:27
    debug expected => (*((*_1).0: &mut usize)); // in scope 0 at ui/unique/unique-send-2.rs:15:9: 15:21
    debug tx => (*((*_1).1: &std::sync::mpsc::Sender<std::boxed::Box<usize>>)); // in scope 0 at ui/unique/unique-send-2.rs:13:10: 13:12
    let mut _0: std::thread::JoinHandle<()>; // return place in scope 0 at ui/unique/unique-send-2.rs:16:29: 16:29
    let mut _3: usize;                   // in scope 0 at ui/unique/unique-send-2.rs:17:21: 17:22
    let mut _4: (usize, bool);           // in scope 0 at ui/unique/unique-send-2.rs:17:9: 17:22
    let _5: std::sync::mpsc::Sender<std::boxed::Box<usize>>; // in scope 0 at ui/unique/unique-send-2.rs:18:13: 18:15
    let mut _6: &std::sync::mpsc::Sender<std::boxed::Box<usize>>; // in scope 0 at ui/unique/unique-send-2.rs:18:18: 18:28
    let mut _7: [closure@ui/unique/unique-send-2.rs:19:23: 19:29]; // in scope 0 at ui/unique/unique-send-2.rs:19:23: 21:10
    let mut _8: &mut usize;              // in scope 0 at ui/unique/unique-send-2.rs:16:25: 22:6
    let mut _9: &mut usize;              // in scope 0 at ui/unique/unique-send-2.rs:16:25: 22:6
    let mut _10: &mut usize;             // in scope 0 at ui/unique/unique-send-2.rs:16:25: 22:6
    let mut _11: &std::sync::mpsc::Sender<std::boxed::Box<usize>>; // in scope 0 at ui/unique/unique-send-2.rs:16:25: 22:6
    scope 1 {
        debug tx => _5;                  // in scope 1 at ui/unique/unique-send-2.rs:18:13: 18:15
    }

    bb0: {
        _3 = _2;                         // scope 0 at ui/unique/unique-send-2.rs:17:21: 17:22
        _8 = deref_copy ((*_1).0: &mut usize); // scope 0 at ui/unique/unique-send-2.rs:17:9: 17:22
        _4 = CheckedAdd((*_8), _3);      // scope 0 at ui/unique/unique-send-2.rs:17:9: 17:22
        _9 = deref_copy ((*_1).0: &mut usize); // scope 0 at ui/unique/unique-send-2.rs:17:9: 17:22
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_9), move _3) -> bb1; // scope 0 at ui/unique/unique-send-2.rs:17:9: 17:22
    }

    bb1: {
        _10 = deref_copy ((*_1).0: &mut usize); // scope 0 at ui/unique/unique-send-2.rs:17:9: 17:22
        (*_10) = move (_4.0: usize);     // scope 0 at ui/unique/unique-send-2.rs:17:9: 17:22
        _11 = deref_copy ((*_1).1: &std::sync::mpsc::Sender<std::boxed::Box<usize>>); // scope 0 at ui/unique/unique-send-2.rs:18:18: 18:28
        _6 = _11;                        // scope 0 at ui/unique/unique-send-2.rs:18:18: 18:28
        _5 = <Sender<Box<usize>> as Clone>::clone(move _6) -> bb2; // scope 0 at ui/unique/unique-send-2.rs:18:18: 18:28
                                         // mir::Constant
                                         // + span: ui/unique/unique-send-2.rs:18:21: 18:26
                                         // + literal: Const { ty: for<'a> fn(&'a Sender<Box<usize>>) -> Sender<Box<usize>> {<Sender<Box<usize>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = [closure@ui/unique/unique-send-2.rs:19:23: 19:29] { tx: move _5, i: _2 }; // scope 1 at ui/unique/unique-send-2.rs:19:23: 21:10
                                         // closure
                                         // + def_id: DefId(0:10 ~ unique_send_2[b3b9]::main::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (std::sync::mpsc::Sender<std::boxed::Box<usize>>, usize),
                                         // ]
        _0 = spawn::<[closure@ui/unique/unique-send-2.rs:19:23: 19:29], ()>(move _7) -> bb3; // scope 1 at ui/unique/unique-send-2.rs:19:9: 21:11
                                         // mir::Constant
                                         // + span: ui/unique/unique-send-2.rs:19:9: 19:22
                                         // + literal: Const { ty: fn([closure@ui/unique/unique-send-2.rs:19:23: 19:29]) -> JoinHandle<()> {spawn::<[closure@ui/unique/unique-send-2.rs:19:23: 19:29], ()>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/unique/unique-send-2.rs:22:6: 22:6
    }
}

fn main::{closure#0}::{closure#0}(_1: [closure@ui/unique/unique-send-2.rs:19:23: 19:29]) -> () {
    debug tx => (_1.0: std::sync::mpsc::Sender<std::boxed::Box<usize>>); // in scope 0 at ui/unique/unique-send-2.rs:18:13: 18:15
    debug i => (_1.1: usize);            // in scope 0 at ui/unique/unique-send-2.rs:16:26: 16:27
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-send-2.rs:19:30: 19:30
    let mut _2: &std::sync::mpsc::Sender<std::boxed::Box<usize>>; // in scope 0 at ui/unique/unique-send-2.rs:20:19: 20:22
    let _3: &std::sync::mpsc::Sender<std::boxed::Box<usize>>; // in scope 0 at ui/unique/unique-send-2.rs:20:19: 20:22
    let mut _4: usize;                   // in scope 0 at ui/unique/unique-send-2.rs:20:24: 20:25

    bb0: {
        _3 = &(_1.0: std::sync::mpsc::Sender<std::boxed::Box<usize>>); // scope 0 at ui/unique/unique-send-2.rs:20:19: 20:22
        _2 = _3;                         // scope 0 at ui/unique/unique-send-2.rs:20:19: 20:22
        _4 = (_1.1: usize);              // scope 0 at ui/unique/unique-send-2.rs:20:24: 20:25
        _0 = child(move _2, move _4) -> [return: bb1, unwind: bb3]; // scope 0 at ui/unique/unique-send-2.rs:20:13: 20:26
                                         // mir::Constant
                                         // + span: ui/unique/unique-send-2.rs:20:13: 20:18
                                         // + literal: Const { ty: for<'a> fn(&'a Sender<Box<usize>>, usize) {child}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/unique/unique-send-2.rs:21:9: 21:10
    }

    bb2: {
        return;                          // scope 0 at ui/unique/unique-send-2.rs:21:10: 21:10
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/unique/unique-send-2.rs:21:9: 21:10
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-send-2.rs:19:23: 21:10
    }
}
