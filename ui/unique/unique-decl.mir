// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-decl.rs:5:15: 5:15
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/unique/unique-decl.rs:7:2: 7:2
    }
}

fn f(_1: Box<isize>) -> Box<isize> {
    debug _i => _1;                      // in scope 0 at ui/unique/unique-decl.rs:9:6: 9:8
    let mut _0: std::boxed::Box<isize>;  // return place in scope 0 at ui/unique/unique-decl.rs:9:25: 9:35
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _2 = begin_panic::<&str>(const "explicit panic") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_1) -> bb2;                 // scope 0 at ui/unique/unique-decl.rs:11:1: 11:2
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-decl.rs:9:1: 11:2
    }
}
