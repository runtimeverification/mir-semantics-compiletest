// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-pat-3.rs:7:15: 7:15
    let _1: isize;                       // in scope 0 at ui/unique/unique-pat-3.rs:8:9: 8:10
    let mut _2: bar;                     // in scope 0 at ui/unique/unique-pat-3.rs:8:19: 8:36
    let mut _3: std::boxed::Box<isize>;  // in scope 0 at ui/unique/unique-pat-3.rs:8:26: 8:35
    let _4: std::boxed::Box<isize>;      // in scope 0 at ui/unique/unique-pat-3.rs:9:16: 9:17
    let _5: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _6: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[&str];                 // in scope 0 at ui/unique/unique-pat-3.rs:10:22: 10:26
    let mut _8: &[&str; 2];              // in scope 0 at ui/unique/unique-pat-3.rs:10:22: 10:26
    let _9: &[&str; 2];                  // in scope 0 at ui/unique/unique-pat-3.rs:10:22: 10:26
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _13: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/unique/unique-pat-3.rs:10:28: 10:29
    let mut _15: &std::boxed::Box<isize>; // in scope 0 at ui/unique/unique-pat-3.rs:10:28: 10:29
    let _16: &std::boxed::Box<isize>;    // in scope 0 at ui/unique/unique-pat-3.rs:10:28: 10:29
    let mut _17: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _18: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _23: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _24: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _25: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _27: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _28: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _29: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _30: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _31: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _32: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _36: bool;                   // in scope 0 at ui/unique/unique-pat-3.rs:14:6: 14:7
    let mut _37: isize;                  // in scope 0 at ui/unique/unique-pat-3.rs:14:6: 14:7
    let mut _38: *const isize;           // in scope 0 at ui/unique/unique-pat-3.rs:9:16: 9:17
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/unique/unique-pat-3.rs:8:9: 8:10
        let _20: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _21: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _34: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 3 {
            debug left_val => _20;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _21;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _26: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _26;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 2 {
        debug a => _4;                   // in scope 2 at ui/unique/unique-pat-3.rs:9:16: 9:17
        let mut _35: &[&str; 2];         // in scope 2 at ui/unique/unique-pat-3.rs:10:22: 10:26
    }

    bb0: {
        _36 = const false;               // scope 0 at ui/unique/unique-pat-3.rs:8:9: 8:10
        _3 = <isize as Into<Box<isize>>>::into(const 10_isize) -> bb1; // scope 0 at ui/unique/unique-pat-3.rs:8:26: 8:35
                                         // mir::Constant
                                         // + span: ui/unique/unique-pat-3.rs:8:29: 8:33
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {<isize as Into<Box<isize>>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        _36 = const true;                // scope 0 at ui/unique/unique-pat-3.rs:8:19: 8:36
        _2 = bar::u(move _3);            // scope 0 at ui/unique/unique-pat-3.rs:8:19: 8:36
        _36 = const false;               // scope 0 at ui/unique/unique-pat-3.rs:9:16: 9:17
        _4 = move ((_2 as u).0: std::boxed::Box<isize>); // scope 0 at ui/unique/unique-pat-3.rs:9:16: 9:17
        _35 = const _;                   // scope 2 at ui/unique/unique-pat-3.rs:10:22: 10:26
                                         // mir::Constant
                                         // + span: ui/unique/unique-pat-3.rs:10:22: 10:26
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _9 = _35;                        // scope 2 at ui/unique/unique-pat-3.rs:10:22: 10:26
        _8 = _9;                         // scope 2 at ui/unique/unique-pat-3.rs:10:22: 10:26
        _7 = move _8 as &[&str] (Pointer(Unsize)); // scope 2 at ui/unique/unique-pat-3.rs:10:22: 10:26
        _16 = &_4;                       // scope 2 at ui/unique/unique-pat-3.rs:10:28: 10:29
        _15 = _16;                       // scope 2 at ui/unique/unique-pat-3.rs:10:28: 10:29
        _14 = core::fmt::ArgumentV1::<'_>::new_display::<Box<isize>>(move _15) -> [return: bb2, unwind: bb7]; // scope 2 at ui/unique/unique-pat-3.rs:10:28: 10:29
                                         // mir::Constant
                                         // + span: ui/unique/unique-pat-3.rs:10:28: 10:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Box<isize>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = [move _14];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = &_13;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = move _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> [return: bb3, unwind: bb7]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _print(move _6) -> [return: bb4, unwind: bb7]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        _38 = (((_4.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 2 at ui/unique/unique-pat-3.rs:11:13: 11:15
        _1 = (*_38);                     // scope 2 at ui/unique/unique-pat-3.rs:11:13: 11:15
        drop(_4) -> bb12;                // scope 0 at ui/unique/unique-pat-3.rs:12:9: 12:10
    }

    bb5: {
        _26 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _29 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = _32;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _27 = core::panicking::assert_failed::<isize, isize>(move _28, move _29, move _31, move _33); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/unique/unique-pat-3.rs:16:2: 16:2
    }

    bb7 (cleanup): {
        drop(_4) -> bb8;                 // scope 0 at ui/unique/unique-pat-3.rs:12:9: 12:10
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-pat-3.rs:7:1: 16:2
    }

    bb9: {
        _36 = const false;               // scope 0 at ui/unique/unique-pat-3.rs:14:6: 14:7
        _18 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _34 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _19 = _34;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _17 = (move _18, move _19);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _20 = (_17.0: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _21 = (_17.1: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _24 = (*_20);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _25 = const 10_isize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _23 = Eq(move _24, move _25);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _22 = Not(move _23);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _22) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        switchInt(_36) -> [0: bb9, otherwise: bb11]; // scope 0 at ui/unique/unique-pat-3.rs:14:6: 14:7
    }

    bb11: {
        drop(((_2 as u).0: std::boxed::Box<isize>)) -> bb9; // scope 0 at ui/unique/unique-pat-3.rs:14:6: 14:7
    }

    bb12: {
        _37 = discriminant(_2);          // scope 0 at ui/unique/unique-pat-3.rs:14:6: 14:7
        switchInt(move _37) -> [0: bb10, otherwise: bb9]; // scope 0 at ui/unique/unique-pat-3.rs:14:6: 14:7
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/unique/unique-pat-3.rs:15:19: 15:21

    bb0: {
        _1 = const 10_isize;             // scope 0 at ui/unique/unique-pat-3.rs:15:19: 15:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/unique/unique-pat-3.rs:10:22: 10:26
    let mut _1: [&str; 2];               // in scope 0 at ui/unique/unique-pat-3.rs:10:22: 10:26

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/unique/unique-pat-3.rs:10:22: 10:26
                                         // mir::Constant
                                         // + span: ui/unique/unique-pat-3.rs:10:22: 10:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/unique/unique-pat-3.rs:10:22: 10:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/unique/unique-pat-3.rs:10:22: 10:26
        return;                          // scope 0 at ui/unique/unique-pat-3.rs:10:22: 10:26
    }
}

fn bar::u(_1: Box<isize>) -> bar {
    let mut _0: bar;                     // return place in scope 0 at ui/unique/unique-pat-3.rs:5:12: 5:13

    bb0: {
        _0 = bar::u(move _1);            // scope 0 at ui/unique/unique-pat-3.rs:5:12: 5:13
        return;                          // scope 0 at ui/unique/unique-pat-3.rs:5:12: 5:13
    }
}

// MIR FOR CTFE
fn bar::u(_1: Box<isize>) -> bar {
    let mut _0: bar;                     // return place in scope 0 at ui/unique/unique-pat-3.rs:5:12: 5:13

    bb0: {
        _0 = bar::u(move _1);            // scope 0 at ui/unique/unique-pat-3.rs:5:12: 5:13
        return;                          // scope 0 at ui/unique/unique-pat-3.rs:5:12: 5:13
    }
}

fn bar::w(_1: isize) -> bar {
    let mut _0: bar;                     // return place in scope 0 at ui/unique/unique-pat-3.rs:5:27: 5:28

    bb0: {
        _0 = bar::w(move _1);            // scope 0 at ui/unique/unique-pat-3.rs:5:27: 5:28
        return;                          // scope 0 at ui/unique/unique-pat-3.rs:5:27: 5:28
    }
}

// MIR FOR CTFE
fn bar::w(_1: isize) -> bar {
    let mut _0: bar;                     // return place in scope 0 at ui/unique/unique-pat-3.rs:5:27: 5:28

    bb0: {
        _0 = bar::w(move _1);            // scope 0 at ui/unique/unique-pat-3.rs:5:27: 5:28
        return;                          // scope 0 at ui/unique/unique-pat-3.rs:5:27: 5:28
    }
}
