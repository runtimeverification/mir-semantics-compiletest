// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn altsimple() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-match-discrim.rs:7:16: 7:16
    let mut _1: std::boxed::Box<bool>;   // in scope 0 at ui/unique/unique-match-discrim.rs:8:11: 8:25

    bb0: {
        _1 = Box::<bool>::new(const true) -> bb1; // scope 0 at ui/unique/unique-match-discrim.rs:8:11: 8:25
                                         // mir::Constant
                                         // + span: ui/unique/unique-match-discrim.rs:8:11: 8:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(bool) -> Box<bool> {Box::<bool>::new}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/unique/unique-match-discrim.rs:11:1: 11:2
    }

    bb2: {
        return;                          // scope 0 at ui/unique/unique-match-discrim.rs:11:2: 11:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-match-discrim.rs:12:15: 12:15

    bb0: {
        return;                          // scope 0 at ui/unique/unique-match-discrim.rs:12:18: 12:18
    }
}
