// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-pat-2.rs:12:15: 12:15
    let _1: isize;                       // in scope 0 at ui/unique/unique-pat-2.rs:13:9: 13:10
    let mut _2: bar;                     // in scope 0 at ui/unique/unique-pat-2.rs:13:19: 13:56
    let mut _3: std::boxed::Box<Foo>;    // in scope 0 at ui/unique/unique-pat-2.rs:13:26: 13:55
    let mut _4: Foo;                     // in scope 0 at ui/unique/unique-pat-2.rs:13:35: 13:54
    let mut _5: isize;                   // in scope 0 at ui/unique/unique-pat-2.rs:14:9: 14:38
    let _6: isize;                       // in scope 0 at ui/unique/unique-pat-2.rs:14:28: 14:29
    let _7: usize;                       // in scope 0 at ui/unique/unique-pat-2.rs:14:34: 14:35
    let mut _8: isize;                   // in scope 0 at ui/unique/unique-pat-2.rs:14:44: 14:45
    let mut _9: isize;                   // in scope 0 at ui/unique/unique-pat-2.rs:14:48: 14:60
    let mut _10: usize;                  // in scope 0 at ui/unique/unique-pat-2.rs:14:49: 14:50
    let mut _11: (isize, bool);          // in scope 0 at ui/unique/unique-pat-2.rs:14:44: 14:60
    let mut _12: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _13: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _14: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _19: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _20: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _22: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _23: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _24: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _25: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _26: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _27: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _30: std::boxed::Box<Foo>;   // in scope 0 at ui/unique/unique-pat-2.rs:13:19: 13:56
    let mut _31: std::boxed::Box<Foo>;   // in scope 0 at ui/unique/unique-pat-2.rs:13:19: 13:56
    let mut _32: *const Foo;             // in scope 0 at ui/unique/unique-pat-2.rs:13:19: 13:56
    let mut _33: *const Foo;             // in scope 0 at ui/unique/unique-pat-2.rs:13:19: 13:56
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/unique/unique-pat-2.rs:13:9: 13:10
        let _15: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _16: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _29: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 3 {
            debug left_val => _15;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _16;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _21: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _21;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 2 {
        debug a => _6;                   // in scope 2 at ui/unique/unique-pat-2.rs:14:28: 14:29
        debug b => _7;                   // in scope 2 at ui/unique/unique-pat-2.rs:14:34: 14:35
    }

    bb0: {
        _4 = Foo { a: const 10_isize, b: const 40_usize }; // scope 0 at ui/unique/unique-pat-2.rs:13:35: 13:54
        _3 = Box::<Foo>::new(move _4) -> bb1; // scope 0 at ui/unique/unique-pat-2.rs:13:26: 13:55
                                         // mir::Constant
                                         // + span: ui/unique/unique-pat-2.rs:13:26: 13:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Foo) -> Box<Foo> {Box::<Foo>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = bar::u(move _3);            // scope 0 at ui/unique/unique-pat-2.rs:13:19: 13:56
        _5 = discriminant(_2);           // scope 0 at ui/unique/unique-pat-2.rs:13:19: 13:56
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/unique/unique-pat-2.rs:13:13: 13:56
    }

    bb2: {
        _1 = const 66_isize;             // scope 0 at ui/unique/unique-pat-2.rs:15:16: 15:18
        goto -> bb5;                     // scope 0 at ui/unique/unique-pat-2.rs:15:16: 15:18
    }

    bb3: {
        _30 = deref_copy ((_2 as u).0: std::boxed::Box<Foo>); // scope 0 at ui/unique/unique-pat-2.rs:14:28: 14:29
        _32 = (((_30.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 0 at ui/unique/unique-pat-2.rs:14:28: 14:29
        _6 = ((*_32).0: isize);          // scope 0 at ui/unique/unique-pat-2.rs:14:28: 14:29
        _31 = deref_copy ((_2 as u).0: std::boxed::Box<Foo>); // scope 0 at ui/unique/unique-pat-2.rs:14:34: 14:35
        _33 = (((_31.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo); // scope 0 at ui/unique/unique-pat-2.rs:14:34: 14:35
        _7 = ((*_33).1: usize);          // scope 0 at ui/unique/unique-pat-2.rs:14:34: 14:35
        _8 = _6;                         // scope 2 at ui/unique/unique-pat-2.rs:14:44: 14:45
        _10 = _7;                        // scope 2 at ui/unique/unique-pat-2.rs:14:49: 14:50
        _9 = move _10 as isize (IntToInt); // scope 2 at ui/unique/unique-pat-2.rs:14:48: 14:60
        _11 = CheckedAdd(_8, _9);        // scope 2 at ui/unique/unique-pat-2.rs:14:44: 14:60
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, move _9) -> [success: bb4, unwind: bb9]; // scope 2 at ui/unique/unique-pat-2.rs:14:44: 14:60
    }

    bb4: {
        _1 = move (_11.0: isize);        // scope 2 at ui/unique/unique-pat-2.rs:14:44: 14:60
        goto -> bb5;                     // scope 0 at ui/unique/unique-pat-2.rs:14:61: 14:62
    }

    bb5: {
        drop(_2) -> bb6;                 // scope 0 at ui/unique/unique-pat-2.rs:16:6: 16:7
    }

    bb6: {
        _13 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _29 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _14 = _29;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _12 = (move _13, move _14);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _15 = (_12.0: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _16 = (_12.1: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _19 = (*_15);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _20 = const 50_isize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _18 = Eq(move _19, move _20);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _17 = Not(move _18);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _17) -> [0: bb8, otherwise: bb7]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _21 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _25 = _15;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = _27;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _28 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _22 = core::panicking::assert_failed::<isize, isize>(move _23, move _24, move _26, move _28); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/unique/unique-pat-2.rs:18:2: 18:2
    }

    bb9 (cleanup): {
        drop(_2) -> bb10;                // scope 0 at ui/unique/unique-pat-2.rs:16:6: 16:7
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-pat-2.rs:12:1: 18:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/unique/unique-pat-2.rs:17:19: 17:21

    bb0: {
        _1 = const 50_isize;             // scope 0 at ui/unique/unique-pat-2.rs:17:19: 17:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn bar::u(_1: Box<Foo>) -> bar {
    let mut _0: bar;                     // return place in scope 0 at ui/unique/unique-pat-2.rs:10:12: 10:13

    bb0: {
        _0 = bar::u(move _1);            // scope 0 at ui/unique/unique-pat-2.rs:10:12: 10:13
        return;                          // scope 0 at ui/unique/unique-pat-2.rs:10:12: 10:13
    }
}

// MIR FOR CTFE
fn bar::u(_1: Box<Foo>) -> bar {
    let mut _0: bar;                     // return place in scope 0 at ui/unique/unique-pat-2.rs:10:12: 10:13

    bb0: {
        _0 = bar::u(move _1);            // scope 0 at ui/unique/unique-pat-2.rs:10:12: 10:13
        return;                          // scope 0 at ui/unique/unique-pat-2.rs:10:12: 10:13
    }
}

fn bar::w(_1: isize) -> bar {
    let mut _0: bar;                     // return place in scope 0 at ui/unique/unique-pat-2.rs:10:25: 10:26

    bb0: {
        _0 = bar::w(move _1);            // scope 0 at ui/unique/unique-pat-2.rs:10:25: 10:26
        return;                          // scope 0 at ui/unique/unique-pat-2.rs:10:25: 10:26
    }
}

// MIR FOR CTFE
fn bar::w(_1: isize) -> bar {
    let mut _0: bar;                     // return place in scope 0 at ui/unique/unique-pat-2.rs:10:25: 10:26

    bb0: {
        _0 = bar::w(move _1);            // scope 0 at ui/unique/unique-pat-2.rs:10:25: 10:26
        return;                          // scope 0 at ui/unique/unique-pat-2.rs:10:25: 10:26
    }
}
