// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: Box<T>) -> () {
    debug x => _1;                       // in scope 0 at ui/unique/unique-generic-assign.rs:8:9: 8:10
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-generic-assign.rs:8:20: 8:20
    let _2: std::boxed::Box<T>;          // in scope 0 at ui/unique/unique-generic-assign.rs:9:9: 9:12
    scope 1 {
        debug _x2 => _2;                 // in scope 1 at ui/unique/unique-generic-assign.rs:9:9: 9:12
    }

    bb0: {
        _2 = move _1;                    // scope 0 at ui/unique/unique-generic-assign.rs:9:15: 9:16
        drop(_2) -> bb1;                 // scope 0 at ui/unique/unique-generic-assign.rs:10:1: 10:2
    }

    bb1: {
        return;                          // scope 0 at ui/unique/unique-generic-assign.rs:10:2: 10:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-generic-assign.rs:11:15: 11:15

    bb0: {
        return;                          // scope 0 at ui/unique/unique-generic-assign.rs:11:18: 11:18
    }
}
