// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-cmp.rs:4:15: 4:15
    let _1: std::boxed::Box<i32>;        // in scope 0 at ui/unique/unique-cmp.rs:5:9: 5:10
    let mut _2: (&std::boxed::Box<i32>, &std::boxed::Box<i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &std::boxed::Box<i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &std::boxed::Box<i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: std::boxed::Box<i32>;        // in scope 0 at ui/unique/unique-cmp.rs:6:19: 6:32
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &std::boxed::Box<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &std::boxed::Box<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &std::boxed::Box<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &std::boxed::Box<i32>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &std::boxed::Box<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &std::boxed::Box<i32>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: bool;                   // in scope 0 at ui/unique/unique-cmp.rs:7:5: 7:31
    let mut _21: bool;                   // in scope 0 at ui/unique/unique-cmp.rs:7:13: 7:30
    let mut _22: &std::boxed::Box<i32>;  // in scope 0 at ui/unique/unique-cmp.rs:7:13: 7:14
    let mut _23: &std::boxed::Box<i32>;  // in scope 0 at ui/unique/unique-cmp.rs:7:17: 7:30
    let _24: std::boxed::Box<i32>;       // in scope 0 at ui/unique/unique-cmp.rs:7:17: 7:30
    let mut _25: !;                      // in scope 0 at ui/unique/unique-cmp.rs:7:5: 7:31
    let mut _26: bool;                   // in scope 0 at ui/unique/unique-cmp.rs:8:5: 8:32
    let mut _27: bool;                   // in scope 0 at ui/unique/unique-cmp.rs:8:13: 8:31
    let mut _28: &std::boxed::Box<i32>;  // in scope 0 at ui/unique/unique-cmp.rs:8:13: 8:14
    let mut _29: &std::boxed::Box<i32>;  // in scope 0 at ui/unique/unique-cmp.rs:8:18: 8:31
    let _30: std::boxed::Box<i32>;       // in scope 0 at ui/unique/unique-cmp.rs:8:18: 8:31
    let mut _31: !;                      // in scope 0 at ui/unique/unique-cmp.rs:8:5: 8:32
    let mut _32: bool;                   // in scope 0 at ui/unique/unique-cmp.rs:9:5: 9:30
    let mut _33: bool;                   // in scope 0 at ui/unique/unique-cmp.rs:9:13: 9:29
    let mut _34: &std::boxed::Box<i32>;  // in scope 0 at ui/unique/unique-cmp.rs:9:13: 9:14
    let mut _35: &std::boxed::Box<i32>;  // in scope 0 at ui/unique/unique-cmp.rs:9:17: 9:29
    let _36: std::boxed::Box<i32>;       // in scope 0 at ui/unique/unique-cmp.rs:9:17: 9:29
    let mut _37: !;                      // in scope 0 at ui/unique/unique-cmp.rs:9:5: 9:30
    let mut _38: bool;                   // in scope 0 at ui/unique/unique-cmp.rs:10:5: 10:31
    let mut _39: bool;                   // in scope 0 at ui/unique/unique-cmp.rs:10:13: 10:30
    let mut _40: &std::boxed::Box<i32>;  // in scope 0 at ui/unique/unique-cmp.rs:10:13: 10:14
    let mut _41: &std::boxed::Box<i32>;  // in scope 0 at ui/unique/unique-cmp.rs:10:18: 10:30
    let _42: std::boxed::Box<i32>;       // in scope 0 at ui/unique/unique-cmp.rs:10:18: 10:30
    let mut _43: !;                      // in scope 0 at ui/unique/unique-cmp.rs:10:5: 10:31
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/unique/unique-cmp.rs:5:9: 5:10
        let _6: &std::boxed::Box<i32>;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _7: &std::boxed::Box<i32>;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        scope 2 {
            debug left_val => _6;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _7;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _12: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _12;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = Box::<i32>::new(const 100_i32) -> bb1; // scope 0 at ui/unique/unique-cmp.rs:5:21: 5:34
                                         // mir::Constant
                                         // + span: ui/unique/unique-cmp.rs:5:21: 5:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _5 = Box::<i32>::new(const 100_i32) -> [return: bb2, unwind: bb33]; // scope 1 at ui/unique/unique-cmp.rs:6:19: 6:32
                                         // mir::Constant
                                         // + span: ui/unique/unique-cmp.rs:6:19: 6:27
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &_5;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_2.0: &std::boxed::Box<i32>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_2.1: &std::boxed::Box<i32>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <Box<i32> as PartialEq>::eq(move _10, move _11) -> [return: bb3, unwind: bb32]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Box<i32>, &'b Box<i32>) -> bool {<Box<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = Not(move _9);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb5, otherwise: bb4]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _12 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<Box<i32>, Box<i32>>(move _14, move _15, move _17, move _19) -> bb32; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Box<i32>, &'b Box<i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Box<i32>, Box<i32>>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_5) -> [return: bb6, unwind: bb33]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb6: {
        _22 = &_1;                       // scope 1 at ui/unique/unique-cmp.rs:7:13: 7:14
        _24 = Box::<i32>::new(const 101_i32) -> [return: bb7, unwind: bb33]; // scope 1 at ui/unique/unique-cmp.rs:7:17: 7:30
                                         // mir::Constant
                                         // + span: ui/unique/unique-cmp.rs:7:17: 7:25
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb7: {
        _23 = &_24;                      // scope 1 at ui/unique/unique-cmp.rs:7:17: 7:30
        _21 = <Box<i32> as PartialOrd>::lt(move _22, move _23) -> [return: bb8, unwind: bb31]; // scope 1 at ui/unique/unique-cmp.rs:7:13: 7:30
                                         // mir::Constant
                                         // + span: ui/unique/unique-cmp.rs:7:13: 7:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Box<i32>, &'b Box<i32>) -> bool {<Box<i32> as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb8: {
        _20 = Not(move _21);             // scope 1 at ui/unique/unique-cmp.rs:7:5: 7:31
        drop(_24) -> [return: bb9, unwind: bb33]; // scope 1 at ui/unique/unique-cmp.rs:7:30: 7:31
    }

    bb9: {
        switchInt(move _20) -> [0: bb11, otherwise: bb10]; // scope 1 at ui/unique/unique-cmp.rs:7:5: 7:31
    }

    bb10: {
        _25 = core::panicking::panic(const "assertion failed: i < Box::new(101)") -> bb33; // scope 1 at ui/unique/unique-cmp.rs:7:5: 7:31
                                         // mir::Constant
                                         // + span: ui/unique/unique-cmp.rs:7:5: 7:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        _28 = &_1;                       // scope 1 at ui/unique/unique-cmp.rs:8:13: 8:14
        _30 = Box::<i32>::new(const 100_i32) -> [return: bb12, unwind: bb33]; // scope 1 at ui/unique/unique-cmp.rs:8:18: 8:31
                                         // mir::Constant
                                         // + span: ui/unique/unique-cmp.rs:8:18: 8:26
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb12: {
        _29 = &_30;                      // scope 1 at ui/unique/unique-cmp.rs:8:18: 8:31
        _27 = <Box<i32> as PartialOrd>::le(move _28, move _29) -> [return: bb13, unwind: bb30]; // scope 1 at ui/unique/unique-cmp.rs:8:13: 8:31
                                         // mir::Constant
                                         // + span: ui/unique/unique-cmp.rs:8:13: 8:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Box<i32>, &'b Box<i32>) -> bool {<Box<i32> as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb13: {
        _26 = Not(move _27);             // scope 1 at ui/unique/unique-cmp.rs:8:5: 8:32
        drop(_30) -> [return: bb14, unwind: bb33]; // scope 1 at ui/unique/unique-cmp.rs:8:31: 8:32
    }

    bb14: {
        switchInt(move _26) -> [0: bb16, otherwise: bb15]; // scope 1 at ui/unique/unique-cmp.rs:8:5: 8:32
    }

    bb15: {
        _31 = core::panicking::panic(const "assertion failed: i <= Box::new(100)") -> bb33; // scope 1 at ui/unique/unique-cmp.rs:8:5: 8:32
                                         // mir::Constant
                                         // + span: ui/unique/unique-cmp.rs:8:5: 8:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb16: {
        _34 = &_1;                       // scope 1 at ui/unique/unique-cmp.rs:9:13: 9:14
        _36 = Box::<i32>::new(const 99_i32) -> [return: bb17, unwind: bb33]; // scope 1 at ui/unique/unique-cmp.rs:9:17: 9:29
                                         // mir::Constant
                                         // + span: ui/unique/unique-cmp.rs:9:17: 9:25
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb17: {
        _35 = &_36;                      // scope 1 at ui/unique/unique-cmp.rs:9:17: 9:29
        _33 = <Box<i32> as PartialOrd>::gt(move _34, move _35) -> [return: bb18, unwind: bb29]; // scope 1 at ui/unique/unique-cmp.rs:9:13: 9:29
                                         // mir::Constant
                                         // + span: ui/unique/unique-cmp.rs:9:13: 9:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Box<i32>, &'b Box<i32>) -> bool {<Box<i32> as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb18: {
        _32 = Not(move _33);             // scope 1 at ui/unique/unique-cmp.rs:9:5: 9:30
        drop(_36) -> [return: bb19, unwind: bb33]; // scope 1 at ui/unique/unique-cmp.rs:9:29: 9:30
    }

    bb19: {
        switchInt(move _32) -> [0: bb21, otherwise: bb20]; // scope 1 at ui/unique/unique-cmp.rs:9:5: 9:30
    }

    bb20: {
        _37 = core::panicking::panic(const "assertion failed: i > Box::new(99)") -> bb33; // scope 1 at ui/unique/unique-cmp.rs:9:5: 9:30
                                         // mir::Constant
                                         // + span: ui/unique/unique-cmp.rs:9:5: 9:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _40 = &_1;                       // scope 1 at ui/unique/unique-cmp.rs:10:13: 10:14
        _42 = Box::<i32>::new(const 99_i32) -> [return: bb22, unwind: bb33]; // scope 1 at ui/unique/unique-cmp.rs:10:18: 10:30
                                         // mir::Constant
                                         // + span: ui/unique/unique-cmp.rs:10:18: 10:26
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb22: {
        _41 = &_42;                      // scope 1 at ui/unique/unique-cmp.rs:10:18: 10:30
        _39 = <Box<i32> as PartialOrd>::ge(move _40, move _41) -> [return: bb23, unwind: bb28]; // scope 1 at ui/unique/unique-cmp.rs:10:13: 10:30
                                         // mir::Constant
                                         // + span: ui/unique/unique-cmp.rs:10:13: 10:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Box<i32>, &'b Box<i32>) -> bool {<Box<i32> as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb23: {
        _38 = Not(move _39);             // scope 1 at ui/unique/unique-cmp.rs:10:5: 10:31
        drop(_42) -> [return: bb24, unwind: bb33]; // scope 1 at ui/unique/unique-cmp.rs:10:30: 10:31
    }

    bb24: {
        switchInt(move _38) -> [0: bb26, otherwise: bb25]; // scope 1 at ui/unique/unique-cmp.rs:10:5: 10:31
    }

    bb25: {
        _43 = core::panicking::panic(const "assertion failed: i >= Box::new(99)") -> bb33; // scope 1 at ui/unique/unique-cmp.rs:10:5: 10:31
                                         // mir::Constant
                                         // + span: ui/unique/unique-cmp.rs:10:5: 10:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb26: {
        drop(_1) -> bb27;                // scope 0 at ui/unique/unique-cmp.rs:11:1: 11:2
    }

    bb27: {
        return;                          // scope 0 at ui/unique/unique-cmp.rs:11:2: 11:2
    }

    bb28 (cleanup): {
        drop(_42) -> bb33;               // scope 1 at ui/unique/unique-cmp.rs:10:30: 10:31
    }

    bb29 (cleanup): {
        drop(_36) -> bb33;               // scope 1 at ui/unique/unique-cmp.rs:9:29: 9:30
    }

    bb30 (cleanup): {
        drop(_30) -> bb33;               // scope 1 at ui/unique/unique-cmp.rs:8:31: 8:32
    }

    bb31 (cleanup): {
        drop(_24) -> bb33;               // scope 1 at ui/unique/unique-cmp.rs:7:30: 7:31
    }

    bb32 (cleanup): {
        drop(_5) -> bb33;                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb33 (cleanup): {
        drop(_1) -> bb34;                // scope 0 at ui/unique/unique-cmp.rs:11:1: 11:2
    }

    bb34 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-cmp.rs:4:1: 11:2
    }
}
