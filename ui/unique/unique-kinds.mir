// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn sendable() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-kinds.rs:6:15: 6:15
    let _1: std::boxed::Box<i32>;        // in scope 0 at ui/unique/unique-kinds.rs:16:9: 16:10
    let _3: ();                          // in scope 0 at ui/unique/unique-kinds.rs:18:5: 18:12
    let mut _4: std::boxed::Box<i32>;    // in scope 0 at ui/unique/unique-kinds.rs:18:7: 18:8
    let mut _5: std::boxed::Box<i32>;    // in scope 0 at ui/unique/unique-kinds.rs:18:10: 18:11
    let _8: ();                          // in scope 0 at ui/unique/unique-kinds.rs:21:5: 21:12
    let mut _9: std::boxed::Box<i32>;    // in scope 0 at ui/unique/unique-kinds.rs:21:7: 21:8
    let mut _10: std::boxed::Box<i32>;   // in scope 0 at ui/unique/unique-kinds.rs:21:10: 21:11
    let mut _11: bool;                   // in scope 0 at ui/unique/unique-kinds.rs:22:1: 22:2
    let mut _12: bool;                   // in scope 0 at ui/unique/unique-kinds.rs:22:1: 22:2
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/unique/unique-kinds.rs:16:9: 16:10
        let _2: std::boxed::Box<i32>;    // in scope 1 at ui/unique/unique-kinds.rs:17:9: 17:10
        scope 2 {
            debug j => _2;               // in scope 2 at ui/unique/unique-kinds.rs:17:9: 17:10
            let _6: std::boxed::Box<i32>; // in scope 2 at ui/unique/unique-kinds.rs:19:9: 19:10
            scope 3 {
                debug i => _6;           // in scope 3 at ui/unique/unique-kinds.rs:19:9: 19:10
                let _7: std::boxed::Box<i32>; // in scope 3 at ui/unique/unique-kinds.rs:20:9: 20:10
                scope 4 {
                    debug j => _7;       // in scope 4 at ui/unique/unique-kinds.rs:20:9: 20:10
                }
            }
        }
    }

    bb0: {
        _12 = const false;               // scope 0 at ui/unique/unique-kinds.rs:16:9: 16:10
        _11 = const false;               // scope 0 at ui/unique/unique-kinds.rs:16:9: 16:10
        _12 = const true;                // scope 0 at ui/unique/unique-kinds.rs:16:21: 16:34
        _1 = Box::<i32>::new(const 100_i32) -> bb1; // scope 0 at ui/unique/unique-kinds.rs:16:21: 16:34
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:16:21: 16:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Box::<i32>::new(const 100_i32) -> [return: bb2, unwind: bb11]; // scope 1 at ui/unique/unique-kinds.rs:17:21: 17:34
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:17:21: 17:29
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = const false;               // scope 2 at ui/unique/unique-kinds.rs:18:7: 18:8
        _4 = move _1;                    // scope 2 at ui/unique/unique-kinds.rs:18:7: 18:8
        _5 = move _2;                    // scope 2 at ui/unique/unique-kinds.rs:18:10: 18:11
        _3 = sendable::f::<Box<i32>>(move _4, move _5) -> [return: bb3, unwind: bb11]; // scope 2 at ui/unique/unique-kinds.rs:18:5: 18:12
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:18:5: 18:6
                                         // + literal: Const { ty: fn(Box<i32>, Box<i32>) {sendable::f::<Box<i32>>}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = Box::<i32>::new(const 100_i32) -> [return: bb4, unwind: bb11]; // scope 2 at ui/unique/unique-kinds.rs:19:21: 19:34
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:19:21: 19:29
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = const true;                // scope 3 at ui/unique/unique-kinds.rs:20:9: 20:10
        _7 = Box::<i32>::new(const 101_i32) -> [return: bb5, unwind: bb9]; // scope 3 at ui/unique/unique-kinds.rs:20:21: 20:34
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:20:21: 20:29
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = const false;               // scope 4 at ui/unique/unique-kinds.rs:21:7: 21:8
        _9 = move _6;                    // scope 4 at ui/unique/unique-kinds.rs:21:7: 21:8
        _10 = move _7;                   // scope 4 at ui/unique/unique-kinds.rs:21:10: 21:11
        _8 = sendable::g::<Box<i32>>(move _9, move _10) -> [return: bb6, unwind: bb9]; // scope 4 at ui/unique/unique-kinds.rs:21:5: 21:12
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:21:5: 21:6
                                         // + literal: Const { ty: fn(Box<i32>, Box<i32>) {sendable::g::<Box<i32>>}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = const false;               // scope 2 at ui/unique/unique-kinds.rs:22:1: 22:2
        _12 = const false;               // scope 0 at ui/unique/unique-kinds.rs:22:1: 22:2
        return;                          // scope 0 at ui/unique/unique-kinds.rs:22:2: 22:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-kinds.rs:6:1: 22:2
    }

    bb8 (cleanup): {
        drop(_6) -> bb11;                // scope 2 at ui/unique/unique-kinds.rs:22:1: 22:2
    }

    bb9 (cleanup): {
        switchInt(_11) -> [0: bb11, otherwise: bb8]; // scope 2 at ui/unique/unique-kinds.rs:22:1: 22:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/unique/unique-kinds.rs:22:1: 22:2
    }

    bb11 (cleanup): {
        switchInt(_12) -> [0: bb7, otherwise: bb10]; // scope 0 at ui/unique/unique-kinds.rs:22:1: 22:2
    }
}

fn sendable::f(_1: T, _2: T) -> () {
    debug i => _1;                       // in scope 0 at ui/unique/unique-kinds.rs:8:38: 8:39
    debug j => _2;                       // in scope 0 at ui/unique/unique-kinds.rs:8:44: 8:45
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-kinds.rs:8:50: 8:50
    let mut _3: (&T, &T);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &T;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &T;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: &T;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &T;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &T;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &T;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &T;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &T;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &T;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &T;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _4 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _5 = &_2;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &T);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &T);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <T as PartialEq>::eq(move _10, move _11) -> [return: bb1, unwind: bb6]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<T, T>(move _14, move _15, move _17, move _19) -> bb6; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a T, &'b T, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<T, T>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind: bb7]; // scope 0 at ui/unique/unique-kinds.rs:10:5: 10:6
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/unique/unique-kinds.rs:10:5: 10:6
    }

    bb5: {
        return;                          // scope 0 at ui/unique/unique-kinds.rs:10:6: 10:6
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/unique/unique-kinds.rs:10:5: 10:6
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/unique/unique-kinds.rs:10:5: 10:6
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-kinds.rs:8:5: 10:6
    }
}

fn sendable::g(_1: T, _2: T) -> () {
    debug i => _1;                       // in scope 0 at ui/unique/unique-kinds.rs:12:30: 12:31
    debug j => _2;                       // in scope 0 at ui/unique/unique-kinds.rs:12:36: 12:37
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-kinds.rs:12:42: 12:42
    let mut _3: bool;                    // in scope 0 at ui/unique/unique-kinds.rs:13:9: 13:24
    let mut _4: bool;                    // in scope 0 at ui/unique/unique-kinds.rs:13:17: 13:23
    let mut _5: &T;                      // in scope 0 at ui/unique/unique-kinds.rs:13:17: 13:18
    let mut _6: &T;                      // in scope 0 at ui/unique/unique-kinds.rs:13:22: 13:23
    let mut _7: !;                       // in scope 0 at ui/unique/unique-kinds.rs:13:9: 13:24

    bb0: {
        _5 = &_1;                        // scope 0 at ui/unique/unique-kinds.rs:13:17: 13:18
        _6 = &_2;                        // scope 0 at ui/unique/unique-kinds.rs:13:22: 13:23
        _4 = <T as PartialEq>::ne(move _5, move _6) -> [return: bb1, unwind: bb6]; // scope 0 at ui/unique/unique-kinds.rs:13:17: 13:23
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:13:17: 13:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Not(move _4);               // scope 0 at ui/unique/unique-kinds.rs:13:9: 13:24
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/unique/unique-kinds.rs:13:9: 13:24
    }

    bb2: {
        _7 = core::panicking::panic(const "assertion failed: i != j") -> bb6; // scope 0 at ui/unique/unique-kinds.rs:13:9: 13:24
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:13:9: 13:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind: bb7]; // scope 0 at ui/unique/unique-kinds.rs:14:5: 14:6
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/unique/unique-kinds.rs:14:5: 14:6
    }

    bb5: {
        return;                          // scope 0 at ui/unique/unique-kinds.rs:14:6: 14:6
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/unique/unique-kinds.rs:14:5: 14:6
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/unique/unique-kinds.rs:14:5: 14:6
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-kinds.rs:12:5: 14:6
    }
}

fn copyable() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-kinds.rs:24:15: 24:15
    let _1: std::boxed::Box<i32>;        // in scope 0 at ui/unique/unique-kinds.rs:34:9: 34:10
    let _3: ();                          // in scope 0 at ui/unique/unique-kinds.rs:36:5: 36:12
    let mut _4: std::boxed::Box<i32>;    // in scope 0 at ui/unique/unique-kinds.rs:36:7: 36:8
    let mut _5: std::boxed::Box<i32>;    // in scope 0 at ui/unique/unique-kinds.rs:36:10: 36:11
    let _8: ();                          // in scope 0 at ui/unique/unique-kinds.rs:39:5: 39:12
    let mut _9: std::boxed::Box<i32>;    // in scope 0 at ui/unique/unique-kinds.rs:39:7: 39:8
    let mut _10: std::boxed::Box<i32>;   // in scope 0 at ui/unique/unique-kinds.rs:39:10: 39:11
    let mut _11: bool;                   // in scope 0 at ui/unique/unique-kinds.rs:40:1: 40:2
    let mut _12: bool;                   // in scope 0 at ui/unique/unique-kinds.rs:40:1: 40:2
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/unique/unique-kinds.rs:34:9: 34:10
        let _2: std::boxed::Box<i32>;    // in scope 1 at ui/unique/unique-kinds.rs:35:9: 35:10
        scope 2 {
            debug j => _2;               // in scope 2 at ui/unique/unique-kinds.rs:35:9: 35:10
            let _6: std::boxed::Box<i32>; // in scope 2 at ui/unique/unique-kinds.rs:37:9: 37:10
            scope 3 {
                debug i => _6;           // in scope 3 at ui/unique/unique-kinds.rs:37:9: 37:10
                let _7: std::boxed::Box<i32>; // in scope 3 at ui/unique/unique-kinds.rs:38:9: 38:10
                scope 4 {
                    debug j => _7;       // in scope 4 at ui/unique/unique-kinds.rs:38:9: 38:10
                }
            }
        }
    }

    bb0: {
        _12 = const false;               // scope 0 at ui/unique/unique-kinds.rs:34:9: 34:10
        _11 = const false;               // scope 0 at ui/unique/unique-kinds.rs:34:9: 34:10
        _12 = const true;                // scope 0 at ui/unique/unique-kinds.rs:34:21: 34:34
        _1 = Box::<i32>::new(const 100_i32) -> bb1; // scope 0 at ui/unique/unique-kinds.rs:34:21: 34:34
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:34:21: 34:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Box::<i32>::new(const 100_i32) -> [return: bb2, unwind: bb11]; // scope 1 at ui/unique/unique-kinds.rs:35:21: 35:34
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:35:21: 35:29
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = const false;               // scope 2 at ui/unique/unique-kinds.rs:36:7: 36:8
        _4 = move _1;                    // scope 2 at ui/unique/unique-kinds.rs:36:7: 36:8
        _5 = move _2;                    // scope 2 at ui/unique/unique-kinds.rs:36:10: 36:11
        _3 = copyable::f::<Box<i32>>(move _4, move _5) -> [return: bb3, unwind: bb11]; // scope 2 at ui/unique/unique-kinds.rs:36:5: 36:12
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:36:5: 36:6
                                         // + literal: Const { ty: fn(Box<i32>, Box<i32>) {copyable::f::<Box<i32>>}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = Box::<i32>::new(const 100_i32) -> [return: bb4, unwind: bb11]; // scope 2 at ui/unique/unique-kinds.rs:37:21: 37:34
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:37:21: 37:29
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = const true;                // scope 3 at ui/unique/unique-kinds.rs:38:9: 38:10
        _7 = Box::<i32>::new(const 101_i32) -> [return: bb5, unwind: bb9]; // scope 3 at ui/unique/unique-kinds.rs:38:21: 38:34
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:38:21: 38:29
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = const false;               // scope 4 at ui/unique/unique-kinds.rs:39:7: 39:8
        _9 = move _6;                    // scope 4 at ui/unique/unique-kinds.rs:39:7: 39:8
        _10 = move _7;                   // scope 4 at ui/unique/unique-kinds.rs:39:10: 39:11
        _8 = copyable::g::<Box<i32>>(move _9, move _10) -> [return: bb6, unwind: bb9]; // scope 4 at ui/unique/unique-kinds.rs:39:5: 39:12
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:39:5: 39:6
                                         // + literal: Const { ty: fn(Box<i32>, Box<i32>) {copyable::g::<Box<i32>>}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = const false;               // scope 2 at ui/unique/unique-kinds.rs:40:1: 40:2
        _12 = const false;               // scope 0 at ui/unique/unique-kinds.rs:40:1: 40:2
        return;                          // scope 0 at ui/unique/unique-kinds.rs:40:2: 40:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-kinds.rs:24:1: 40:2
    }

    bb8 (cleanup): {
        drop(_6) -> bb11;                // scope 2 at ui/unique/unique-kinds.rs:40:1: 40:2
    }

    bb9 (cleanup): {
        switchInt(_11) -> [0: bb11, otherwise: bb8]; // scope 2 at ui/unique/unique-kinds.rs:40:1: 40:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/unique/unique-kinds.rs:40:1: 40:2
    }

    bb11 (cleanup): {
        switchInt(_12) -> [0: bb7, otherwise: bb10]; // scope 0 at ui/unique/unique-kinds.rs:40:1: 40:2
    }
}

fn copyable::f(_1: T, _2: T) -> () {
    debug i => _1;                       // in scope 0 at ui/unique/unique-kinds.rs:26:31: 26:32
    debug j => _2;                       // in scope 0 at ui/unique/unique-kinds.rs:26:37: 26:38
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-kinds.rs:26:43: 26:43
    let mut _3: (&T, &T);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &T;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &T;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: &T;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &T;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &T;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &T;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &T;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &T;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &T;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &T;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _4 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _5 = &_2;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &T);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &T);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <T as PartialEq>::eq(move _10, move _11) -> [return: bb1, unwind: bb6]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<T, T>(move _14, move _15, move _17, move _19) -> bb6; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a T, &'b T, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<T, T>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind: bb7]; // scope 0 at ui/unique/unique-kinds.rs:28:5: 28:6
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/unique/unique-kinds.rs:28:5: 28:6
    }

    bb5: {
        return;                          // scope 0 at ui/unique/unique-kinds.rs:28:6: 28:6
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/unique/unique-kinds.rs:28:5: 28:6
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/unique/unique-kinds.rs:28:5: 28:6
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-kinds.rs:26:5: 28:6
    }
}

fn copyable::g(_1: T, _2: T) -> () {
    debug i => _1;                       // in scope 0 at ui/unique/unique-kinds.rs:30:23: 30:24
    debug j => _2;                       // in scope 0 at ui/unique/unique-kinds.rs:30:29: 30:30
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-kinds.rs:30:35: 30:35
    let mut _3: bool;                    // in scope 0 at ui/unique/unique-kinds.rs:31:9: 31:24
    let mut _4: bool;                    // in scope 0 at ui/unique/unique-kinds.rs:31:17: 31:23
    let mut _5: &T;                      // in scope 0 at ui/unique/unique-kinds.rs:31:17: 31:18
    let mut _6: &T;                      // in scope 0 at ui/unique/unique-kinds.rs:31:22: 31:23
    let mut _7: !;                       // in scope 0 at ui/unique/unique-kinds.rs:31:9: 31:24

    bb0: {
        _5 = &_1;                        // scope 0 at ui/unique/unique-kinds.rs:31:17: 31:18
        _6 = &_2;                        // scope 0 at ui/unique/unique-kinds.rs:31:22: 31:23
        _4 = <T as PartialEq>::ne(move _5, move _6) -> [return: bb1, unwind: bb6]; // scope 0 at ui/unique/unique-kinds.rs:31:17: 31:23
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:31:17: 31:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Not(move _4);               // scope 0 at ui/unique/unique-kinds.rs:31:9: 31:24
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/unique/unique-kinds.rs:31:9: 31:24
    }

    bb2: {
        _7 = core::panicking::panic(const "assertion failed: i != j") -> bb6; // scope 0 at ui/unique/unique-kinds.rs:31:9: 31:24
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:31:9: 31:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind: bb7]; // scope 0 at ui/unique/unique-kinds.rs:32:5: 32:6
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/unique/unique-kinds.rs:32:5: 32:6
    }

    bb5: {
        return;                          // scope 0 at ui/unique/unique-kinds.rs:32:6: 32:6
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/unique/unique-kinds.rs:32:5: 32:6
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/unique/unique-kinds.rs:32:5: 32:6
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-kinds.rs:30:5: 32:6
    }
}

fn noncopyable() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-kinds.rs:42:18: 42:18
    let _1: std::boxed::Box<i32>;        // in scope 0 at ui/unique/unique-kinds.rs:52:9: 52:10
    let _3: ();                          // in scope 0 at ui/unique/unique-kinds.rs:54:5: 54:12
    let mut _4: std::boxed::Box<i32>;    // in scope 0 at ui/unique/unique-kinds.rs:54:7: 54:8
    let mut _5: std::boxed::Box<i32>;    // in scope 0 at ui/unique/unique-kinds.rs:54:10: 54:11
    let _8: ();                          // in scope 0 at ui/unique/unique-kinds.rs:57:5: 57:12
    let mut _9: std::boxed::Box<i32>;    // in scope 0 at ui/unique/unique-kinds.rs:57:7: 57:8
    let mut _10: std::boxed::Box<i32>;   // in scope 0 at ui/unique/unique-kinds.rs:57:10: 57:11
    let mut _11: bool;                   // in scope 0 at ui/unique/unique-kinds.rs:58:1: 58:2
    let mut _12: bool;                   // in scope 0 at ui/unique/unique-kinds.rs:58:1: 58:2
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/unique/unique-kinds.rs:52:9: 52:10
        let _2: std::boxed::Box<i32>;    // in scope 1 at ui/unique/unique-kinds.rs:53:9: 53:10
        scope 2 {
            debug j => _2;               // in scope 2 at ui/unique/unique-kinds.rs:53:9: 53:10
            let _6: std::boxed::Box<i32>; // in scope 2 at ui/unique/unique-kinds.rs:55:9: 55:10
            scope 3 {
                debug i => _6;           // in scope 3 at ui/unique/unique-kinds.rs:55:9: 55:10
                let _7: std::boxed::Box<i32>; // in scope 3 at ui/unique/unique-kinds.rs:56:9: 56:10
                scope 4 {
                    debug j => _7;       // in scope 4 at ui/unique/unique-kinds.rs:56:9: 56:10
                }
            }
        }
    }

    bb0: {
        _12 = const false;               // scope 0 at ui/unique/unique-kinds.rs:52:9: 52:10
        _11 = const false;               // scope 0 at ui/unique/unique-kinds.rs:52:9: 52:10
        _12 = const true;                // scope 0 at ui/unique/unique-kinds.rs:52:21: 52:34
        _1 = Box::<i32>::new(const 100_i32) -> bb1; // scope 0 at ui/unique/unique-kinds.rs:52:21: 52:34
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:52:21: 52:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Box::<i32>::new(const 100_i32) -> [return: bb2, unwind: bb11]; // scope 1 at ui/unique/unique-kinds.rs:53:21: 53:34
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:53:21: 53:29
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = const false;               // scope 2 at ui/unique/unique-kinds.rs:54:7: 54:8
        _4 = move _1;                    // scope 2 at ui/unique/unique-kinds.rs:54:7: 54:8
        _5 = move _2;                    // scope 2 at ui/unique/unique-kinds.rs:54:10: 54:11
        _3 = noncopyable::f::<Box<i32>>(move _4, move _5) -> [return: bb3, unwind: bb11]; // scope 2 at ui/unique/unique-kinds.rs:54:5: 54:12
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:54:5: 54:6
                                         // + literal: Const { ty: fn(Box<i32>, Box<i32>) {noncopyable::f::<Box<i32>>}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = Box::<i32>::new(const 100_i32) -> [return: bb4, unwind: bb11]; // scope 2 at ui/unique/unique-kinds.rs:55:21: 55:34
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:55:21: 55:29
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = const true;                // scope 3 at ui/unique/unique-kinds.rs:56:9: 56:10
        _7 = Box::<i32>::new(const 101_i32) -> [return: bb5, unwind: bb9]; // scope 3 at ui/unique/unique-kinds.rs:56:21: 56:34
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:56:21: 56:29
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = const false;               // scope 4 at ui/unique/unique-kinds.rs:57:7: 57:8
        _9 = move _6;                    // scope 4 at ui/unique/unique-kinds.rs:57:7: 57:8
        _10 = move _7;                   // scope 4 at ui/unique/unique-kinds.rs:57:10: 57:11
        _8 = noncopyable::g::<Box<i32>>(move _9, move _10) -> [return: bb6, unwind: bb9]; // scope 4 at ui/unique/unique-kinds.rs:57:5: 57:12
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:57:5: 57:6
                                         // + literal: Const { ty: fn(Box<i32>, Box<i32>) {noncopyable::g::<Box<i32>>}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = const false;               // scope 2 at ui/unique/unique-kinds.rs:58:1: 58:2
        _12 = const false;               // scope 0 at ui/unique/unique-kinds.rs:58:1: 58:2
        return;                          // scope 0 at ui/unique/unique-kinds.rs:58:2: 58:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-kinds.rs:42:1: 58:2
    }

    bb8 (cleanup): {
        drop(_6) -> bb11;                // scope 2 at ui/unique/unique-kinds.rs:58:1: 58:2
    }

    bb9 (cleanup): {
        switchInt(_11) -> [0: bb11, otherwise: bb8]; // scope 2 at ui/unique/unique-kinds.rs:58:1: 58:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/unique/unique-kinds.rs:58:1: 58:2
    }

    bb11 (cleanup): {
        switchInt(_12) -> [0: bb7, otherwise: bb10]; // scope 0 at ui/unique/unique-kinds.rs:58:1: 58:2
    }
}

fn noncopyable::f(_1: T, _2: T) -> () {
    debug i => _1;                       // in scope 0 at ui/unique/unique-kinds.rs:44:31: 44:32
    debug j => _2;                       // in scope 0 at ui/unique/unique-kinds.rs:44:37: 44:38
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-kinds.rs:44:43: 44:43
    let mut _3: (&T, &T);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &T;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &T;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: &T;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &T;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &T;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &T;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &T;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &T;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &T;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &T;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _4 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _5 = &_2;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &T);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &T);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <T as PartialEq>::eq(move _10, move _11) -> [return: bb1, unwind: bb6]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<T, T>(move _14, move _15, move _17, move _19) -> bb6; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a T, &'b T, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<T, T>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind: bb7]; // scope 0 at ui/unique/unique-kinds.rs:46:5: 46:6
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/unique/unique-kinds.rs:46:5: 46:6
    }

    bb5: {
        return;                          // scope 0 at ui/unique/unique-kinds.rs:46:6: 46:6
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/unique/unique-kinds.rs:46:5: 46:6
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/unique/unique-kinds.rs:46:5: 46:6
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-kinds.rs:44:5: 46:6
    }
}

fn noncopyable::g(_1: T, _2: T) -> () {
    debug i => _1;                       // in scope 0 at ui/unique/unique-kinds.rs:48:23: 48:24
    debug j => _2;                       // in scope 0 at ui/unique/unique-kinds.rs:48:29: 48:30
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-kinds.rs:48:35: 48:35
    let mut _3: bool;                    // in scope 0 at ui/unique/unique-kinds.rs:49:9: 49:24
    let mut _4: bool;                    // in scope 0 at ui/unique/unique-kinds.rs:49:17: 49:23
    let mut _5: &T;                      // in scope 0 at ui/unique/unique-kinds.rs:49:17: 49:18
    let mut _6: &T;                      // in scope 0 at ui/unique/unique-kinds.rs:49:22: 49:23
    let mut _7: !;                       // in scope 0 at ui/unique/unique-kinds.rs:49:9: 49:24

    bb0: {
        _5 = &_1;                        // scope 0 at ui/unique/unique-kinds.rs:49:17: 49:18
        _6 = &_2;                        // scope 0 at ui/unique/unique-kinds.rs:49:22: 49:23
        _4 = <T as PartialEq>::ne(move _5, move _6) -> [return: bb1, unwind: bb6]; // scope 0 at ui/unique/unique-kinds.rs:49:17: 49:23
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:49:17: 49:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Not(move _4);               // scope 0 at ui/unique/unique-kinds.rs:49:9: 49:24
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/unique/unique-kinds.rs:49:9: 49:24
    }

    bb2: {
        _7 = core::panicking::panic(const "assertion failed: i != j") -> bb6; // scope 0 at ui/unique/unique-kinds.rs:49:9: 49:24
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:49:9: 49:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind: bb7]; // scope 0 at ui/unique/unique-kinds.rs:50:5: 50:6
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/unique/unique-kinds.rs:50:5: 50:6
    }

    bb5: {
        return;                          // scope 0 at ui/unique/unique-kinds.rs:50:6: 50:6
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/unique/unique-kinds.rs:50:5: 50:6
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/unique/unique-kinds.rs:50:5: 50:6
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-kinds.rs:48:5: 50:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-kinds.rs:60:15: 60:15
    let _1: ();                          // in scope 0 at ui/unique/unique-kinds.rs:61:5: 61:15
    let _2: ();                          // in scope 0 at ui/unique/unique-kinds.rs:62:5: 62:15
    let _3: ();                          // in scope 0 at ui/unique/unique-kinds.rs:63:5: 63:18

    bb0: {
        _1 = sendable() -> bb1;          // scope 0 at ui/unique/unique-kinds.rs:61:5: 61:15
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:61:5: 61:13
                                         // + literal: Const { ty: fn() {sendable}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = copyable() -> bb2;          // scope 0 at ui/unique/unique-kinds.rs:62:5: 62:15
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:62:5: 62:13
                                         // + literal: Const { ty: fn() {copyable}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = noncopyable() -> bb3;       // scope 0 at ui/unique/unique-kinds.rs:63:5: 63:18
                                         // mir::Constant
                                         // + span: ui/unique/unique-kinds.rs:63:5: 63:16
                                         // + literal: Const { ty: fn() {noncopyable}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/unique/unique-kinds.rs:64:2: 64:2
    }
}
