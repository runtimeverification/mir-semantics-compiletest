// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test1() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-in-tag.rs:5:12: 5:12
    let _1: test1::bar;                  // in scope 0 at ui/unique/unique-in-tag.rs:8:9: 8:10
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/unique/unique-in-tag.rs:8:20: 8:32
    let mut _3: bool;                    // in scope 0 at ui/unique/unique-in-tag.rs:9:5: 15:13
    let mut _4: bool;                    // in scope 0 at ui/unique/unique-in-tag.rs:9:13: 15:12
    let mut _5: isize;                   // in scope 0 at ui/unique/unique-in-tag.rs:9:13: 15:6
    let _7: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _8: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[&str];                 // in scope 0 at ui/unique/unique-in-tag.rs:11:18: 11:22
    let mut _10: &[&str; 2];             // in scope 0 at ui/unique/unique-in-tag.rs:11:18: 11:22
    let _11: &[&str; 2];                 // in scope 0 at ui/unique/unique-in-tag.rs:11:18: 11:22
    let mut _12: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _15: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _16: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/unique/unique-in-tag.rs:11:24: 11:25
    let mut _17: &std::boxed::Box<isize>; // in scope 0 at ui/unique/unique-in-tag.rs:11:24: 11:25
    let _18: &std::boxed::Box<isize>;    // in scope 0 at ui/unique/unique-in-tag.rs:11:24: 11:25
    let mut _19: !;                      // in scope 0 at ui/unique/unique-in-tag.rs:9:5: 15:13
    let mut _21: bool;                   // in scope 0 at ui/unique/unique-in-tag.rs:16:1: 16:2
    let mut _22: isize;                  // in scope 0 at ui/unique/unique-in-tag.rs:16:1: 16:2
    let mut _23: isize;                  // in scope 0 at ui/unique/unique-in-tag.rs:16:1: 16:2
    let mut _24: *const isize;           // in scope 0 at ui/unique/unique-in-tag.rs:10:14: 10:15
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/unique/unique-in-tag.rs:8:9: 8:10
        let _6: std::boxed::Box<isize>;  // in scope 1 at ui/unique/unique-in-tag.rs:10:14: 10:15
        scope 2 {
            debug a => _6;               // in scope 2 at ui/unique/unique-in-tag.rs:10:14: 10:15
            let mut _20: &[&str; 2];     // in scope 2 at ui/unique/unique-in-tag.rs:11:18: 11:22
        }
    }

    bb0: {
        _21 = const false;               // scope 0 at ui/unique/unique-in-tag.rs:8:9: 8:10
        _2 = Box::<isize>::new(const 10_isize) -> bb1; // scope 0 at ui/unique/unique-in-tag.rs:8:20: 8:32
                                         // mir::Constant
                                         // + span: ui/unique/unique-in-tag.rs:8:20: 8:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _21 = const true;                // scope 0 at ui/unique/unique-in-tag.rs:8:13: 8:33
        _1 = bar::u(move _2);            // scope 0 at ui/unique/unique-in-tag.rs:8:13: 8:33
        _21 = const false;               // scope 1 at ui/unique/unique-in-tag.rs:10:14: 10:15
        _6 = move ((_1 as u).0: std::boxed::Box<isize>); // scope 1 at ui/unique/unique-in-tag.rs:10:14: 10:15
        _20 = const _;                   // scope 2 at ui/unique/unique-in-tag.rs:11:18: 11:22
                                         // mir::Constant
                                         // + span: ui/unique/unique-in-tag.rs:11:18: 11:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(test1, [], Some(promoted[0])) }
        _11 = _20;                       // scope 2 at ui/unique/unique-in-tag.rs:11:18: 11:22
        _10 = _11;                       // scope 2 at ui/unique/unique-in-tag.rs:11:18: 11:22
        _9 = move _10 as &[&str] (Pointer(Unsize)); // scope 2 at ui/unique/unique-in-tag.rs:11:18: 11:22
        _18 = &_6;                       // scope 2 at ui/unique/unique-in-tag.rs:11:24: 11:25
        _17 = _18;                       // scope 2 at ui/unique/unique-in-tag.rs:11:24: 11:25
        _16 = core::fmt::ArgumentV1::<'_>::new_display::<Box<isize>>(move _17) -> [return: bb2, unwind: bb8]; // scope 2 at ui/unique/unique-in-tag.rs:11:24: 11:25
                                         // mir::Constant
                                         // + span: ui/unique/unique-in-tag.rs:11:24: 11:25
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b Box<isize>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb2: {
        _15 = [move _16];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = &_15;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _13 = _14;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = move _13 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = Arguments::<'_>::new_v1(move _9, move _12) -> [return: bb3, unwind: bb8]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = _print(move _8) -> [return: bb4, unwind: bb8]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        _24 = (((_6.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 2 at ui/unique/unique-in-tag.rs:12:9: 12:11
        _5 = (*_24);                     // scope 2 at ui/unique/unique-in-tag.rs:12:9: 12:11
        drop(_6) -> [return: bb5, unwind: bb15]; // scope 1 at ui/unique/unique-in-tag.rs:13:7: 13:8
    }

    bb5: {
        _4 = Eq(move _5, const 10_isize); // scope 1 at ui/unique/unique-in-tag.rs:9:13: 15:12
        _3 = Not(move _4);               // scope 1 at ui/unique/unique-in-tag.rs:9:5: 15:13
        switchInt(move _3) -> [0: bb7, otherwise: bb6]; // scope 1 at ui/unique/unique-in-tag.rs:9:5: 15:13
    }

    bb6: {
        _19 = core::panicking::panic(const "assertion failed: match x { bar::u(a) => { println!(\\\"{}\\\", a); *a } _ => { 66 } } == 10") -> bb15; // scope 1 at ui/unique/unique-in-tag.rs:9:5: 15:13
                                         // mir::Constant
                                         // + span: ui/unique/unique-in-tag.rs:9:5: 15:13
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _22 = discriminant(_1);          // scope 0 at ui/unique/unique-in-tag.rs:16:1: 16:2
        switchInt(move _22) -> [0: bb11, otherwise: bb10]; // scope 0 at ui/unique/unique-in-tag.rs:16:1: 16:2
    }

    bb8 (cleanup): {
        drop(_6) -> bb15;                // scope 1 at ui/unique/unique-in-tag.rs:13:7: 13:8
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-in-tag.rs:5:1: 16:2
    }

    bb10: {
        _21 = const false;               // scope 0 at ui/unique/unique-in-tag.rs:16:1: 16:2
        return;                          // scope 0 at ui/unique/unique-in-tag.rs:16:2: 16:2
    }

    bb11: {
        switchInt(_21) -> [0: bb10, otherwise: bb12]; // scope 0 at ui/unique/unique-in-tag.rs:16:1: 16:2
    }

    bb12: {
        drop(((_1 as u).0: std::boxed::Box<isize>)) -> bb10; // scope 0 at ui/unique/unique-in-tag.rs:16:1: 16:2
    }

    bb13 (cleanup): {
        switchInt(_21) -> [0: bb9, otherwise: bb14]; // scope 0 at ui/unique/unique-in-tag.rs:16:1: 16:2
    }

    bb14 (cleanup): {
        drop(((_1 as u).0: std::boxed::Box<isize>)) -> bb9; // scope 0 at ui/unique/unique-in-tag.rs:16:1: 16:2
    }

    bb15 (cleanup): {
        _23 = discriminant(_1);          // scope 0 at ui/unique/unique-in-tag.rs:16:1: 16:2
        switchInt(move _23) -> [0: bb13, otherwise: bb9]; // scope 0 at ui/unique/unique-in-tag.rs:16:1: 16:2
    }
}

promoted[0] in test1: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/unique/unique-in-tag.rs:11:18: 11:22
    let mut _1: [&str; 2];               // in scope 0 at ui/unique/unique-in-tag.rs:11:18: 11:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/unique/unique-in-tag.rs:11:18: 11:22
                                         // mir::Constant
                                         // + span: ui/unique/unique-in-tag.rs:11:18: 11:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/unique/unique-in-tag.rs:11:18: 11:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/unique/unique-in-tag.rs:11:18: 11:22
        return;                          // scope 0 at ui/unique/unique-in-tag.rs:11:18: 11:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-in-tag.rs:18:15: 18:15
    let _1: ();                          // in scope 0 at ui/unique/unique-in-tag.rs:19:5: 19:12

    bb0: {
        _1 = test1() -> bb1;             // scope 0 at ui/unique/unique-in-tag.rs:19:5: 19:12
                                         // mir::Constant
                                         // + span: ui/unique/unique-in-tag.rs:19:5: 19:10
                                         // + literal: Const { ty: fn() {test1}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/unique/unique-in-tag.rs:20:2: 20:2
    }
}

fn bar::u(_1: Box<isize>) -> bar {
    let mut _0: test1::bar;              // return place in scope 0 at ui/unique/unique-in-tag.rs:6:16: 6:17

    bb0: {
        _0 = bar::u(move _1);            // scope 0 at ui/unique/unique-in-tag.rs:6:16: 6:17
        return;                          // scope 0 at ui/unique/unique-in-tag.rs:6:16: 6:17
    }
}

// MIR FOR CTFE
fn bar::u(_1: Box<isize>) -> bar {
    let mut _0: test1::bar;              // return place in scope 0 at ui/unique/unique-in-tag.rs:6:16: 6:17

    bb0: {
        _0 = bar::u(move _1);            // scope 0 at ui/unique/unique-in-tag.rs:6:16: 6:17
        return;                          // scope 0 at ui/unique/unique-in-tag.rs:6:16: 6:17
    }
}

fn bar::w(_1: isize) -> bar {
    let mut _0: test1::bar;              // return place in scope 0 at ui/unique/unique-in-tag.rs:6:31: 6:32

    bb0: {
        _0 = bar::w(move _1);            // scope 0 at ui/unique/unique-in-tag.rs:6:31: 6:32
        return;                          // scope 0 at ui/unique/unique-in-tag.rs:6:31: 6:32
    }
}

// MIR FOR CTFE
fn bar::w(_1: isize) -> bar {
    let mut _0: test1::bar;              // return place in scope 0 at ui/unique/unique-in-tag.rs:6:31: 6:32

    bb0: {
        _0 = bar::w(move _1);            // scope 0 at ui/unique/unique-in-tag.rs:6:31: 6:32
        return;                          // scope 0 at ui/unique/unique-in-tag.rs:6:31: 6:32
    }
}
