// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-send.rs:5:15: 5:15
    let _1: std::sync::mpsc::Sender<std::boxed::Box<i32>>; // in scope 0 at ui/unique/unique-send.rs:6:10: 6:12
    let _2: std::sync::mpsc::Receiver<std::boxed::Box<i32>>; // in scope 0 at ui/unique/unique-send.rs:6:14: 6:16
    let mut _3: (std::sync::mpsc::Sender<std::boxed::Box<i32>>, std::sync::mpsc::Receiver<std::boxed::Box<i32>>); // in scope 0 at ui/unique/unique-send.rs:6:20: 6:39
    let _4: ();                          // in scope 0 at ui/unique/unique-send.rs:7:5: 7:36
    let mut _5: std::result::Result<(), std::sync::mpsc::SendError<std::boxed::Box<i32>>>; // in scope 0 at ui/unique/unique-send.rs:7:5: 7:27
    let mut _6: &std::sync::mpsc::Sender<std::boxed::Box<i32>>; // in scope 0 at ui/unique/unique-send.rs:7:5: 7:27
    let mut _7: std::boxed::Box<i32>;    // in scope 0 at ui/unique/unique-send.rs:7:13: 7:26
    let mut _9: std::result::Result<std::boxed::Box<i32>, std::sync::mpsc::RecvError>; // in scope 0 at ui/unique/unique-send.rs:8:13: 8:22
    let mut _10: &std::sync::mpsc::Receiver<std::boxed::Box<i32>>; // in scope 0 at ui/unique/unique-send.rs:8:13: 8:22
    let mut _11: (&std::boxed::Box<i32>, &std::boxed::Box<i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _12: &std::boxed::Box<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _13: &std::boxed::Box<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _14: std::boxed::Box<i32>;       // in scope 0 at ui/unique/unique-send.rs:9:19: 9:32
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _19: &std::boxed::Box<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _20: &std::boxed::Box<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _22: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _23: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _24: &std::boxed::Box<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _25: &std::boxed::Box<i32>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _26: &std::boxed::Box<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _27: &std::boxed::Box<i32>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug tx => _1;                  // in scope 1 at ui/unique/unique-send.rs:6:10: 6:12
        debug rx => _2;                  // in scope 1 at ui/unique/unique-send.rs:6:14: 6:16
        let _8: std::boxed::Box<i32>;    // in scope 1 at ui/unique/unique-send.rs:8:9: 8:10
        scope 2 {
            debug v => _8;               // in scope 2 at ui/unique/unique-send.rs:8:9: 8:10
            let _15: &std::boxed::Box<i32>; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _16: &std::boxed::Box<i32>; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _15;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _16;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _21: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _21;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _3 = channel::<Box<i32>>() -> bb1; // scope 0 at ui/unique/unique-send.rs:6:20: 6:39
                                         // mir::Constant
                                         // + span: ui/unique/unique-send.rs:6:20: 6:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> (Sender<Box<i32>>, std::sync::mpsc::Receiver<Box<i32>>) {channel::<Box<i32>>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = move (_3.0: std::sync::mpsc::Sender<std::boxed::Box<i32>>); // scope 0 at ui/unique/unique-send.rs:6:10: 6:12
        _2 = move (_3.1: std::sync::mpsc::Receiver<std::boxed::Box<i32>>); // scope 0 at ui/unique/unique-send.rs:6:14: 6:16
        _6 = &_1;                        // scope 1 at ui/unique/unique-send.rs:7:5: 7:27
        _7 = Box::<i32>::new(const 100_i32) -> [return: bb2, unwind: bb17]; // scope 1 at ui/unique/unique-send.rs:7:13: 7:26
                                         // mir::Constant
                                         // + span: ui/unique/unique-send.rs:7:13: 7:21
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Sender::<Box<i32>>::send(move _6, move _7) -> [return: bb3, unwind: bb17]; // scope 1 at ui/unique/unique-send.rs:7:5: 7:27
                                         // mir::Constant
                                         // + span: ui/unique/unique-send.rs:7:8: 7:12
                                         // + literal: Const { ty: for<'a> fn(&'a Sender<Box<i32>>, Box<i32>) -> Result<(), SendError<Box<i32>>> {Sender::<Box<i32>>::send}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = Result::<(), SendError<Box<i32>>>::unwrap(move _5) -> [return: bb4, unwind: bb17]; // scope 1 at ui/unique/unique-send.rs:7:5: 7:36
                                         // mir::Constant
                                         // + span: ui/unique/unique-send.rs:7:28: 7:34
                                         // + literal: Const { ty: fn(Result<(), SendError<Box<i32>>>) {Result::<(), SendError<Box<i32>>>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = &_2;                       // scope 1 at ui/unique/unique-send.rs:8:13: 8:22
        _9 = std::sync::mpsc::Receiver::<Box<i32>>::recv(move _10) -> [return: bb5, unwind: bb17]; // scope 1 at ui/unique/unique-send.rs:8:13: 8:22
                                         // mir::Constant
                                         // + span: ui/unique/unique-send.rs:8:16: 8:20
                                         // + literal: Const { ty: for<'a> fn(&'a std::sync::mpsc::Receiver<Box<i32>>) -> Result<Box<i32>, RecvError> {std::sync::mpsc::Receiver::<Box<i32>>::recv}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = Result::<Box<i32>, RecvError>::unwrap(move _9) -> [return: bb6, unwind: bb17]; // scope 1 at ui/unique/unique-send.rs:8:13: 8:31
                                         // mir::Constant
                                         // + span: ui/unique/unique-send.rs:8:23: 8:29
                                         // + literal: Const { ty: fn(Result<Box<i32>, RecvError>) -> Box<i32> {Result::<Box<i32>, RecvError>::unwrap}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = &_8;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _14 = Box::<i32>::new(const 100_i32) -> [return: bb7, unwind: bb16]; // scope 2 at ui/unique/unique-send.rs:9:19: 9:32
                                         // mir::Constant
                                         // + span: ui/unique/unique-send.rs:9:19: 9:27
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = &_14;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _11 = (move _12, move _13);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _15 = (_11.0: &std::boxed::Box<i32>); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _16 = (_11.1: &std::boxed::Box<i32>); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _19 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _20 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _18 = <Box<i32> as PartialEq>::eq(move _19, move _20) -> [return: bb8, unwind: bb15]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Box<i32>, &'b Box<i32>) -> bool {<Box<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = Not(move _18);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _17) -> [0: bb10, otherwise: bb9]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _21 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _25 = _15;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = _27;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _28 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _22 = core::panicking::assert_failed::<Box<i32>, Box<i32>>(move _23, move _24, move _26, move _28) -> bb15; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Box<i32>, &'b Box<i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Box<i32>, Box<i32>>}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_14) -> [return: bb11, unwind: bb16]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb11: {
        drop(_8) -> [return: bb12, unwind: bb17]; // scope 1 at ui/unique/unique-send.rs:10:1: 10:2
    }

    bb12: {
        drop(_2) -> [return: bb13, unwind: bb18]; // scope 0 at ui/unique/unique-send.rs:10:1: 10:2
    }

    bb13: {
        drop(_1) -> bb14;                // scope 0 at ui/unique/unique-send.rs:10:1: 10:2
    }

    bb14: {
        return;                          // scope 0 at ui/unique/unique-send.rs:10:2: 10:2
    }

    bb15 (cleanup): {
        drop(_14) -> bb16;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb16 (cleanup): {
        drop(_8) -> bb17;                // scope 1 at ui/unique/unique-send.rs:10:1: 10:2
    }

    bb17 (cleanup): {
        drop(_2) -> bb18;                // scope 0 at ui/unique/unique-send.rs:10:1: 10:2
    }

    bb18 (cleanup): {
        drop(_1) -> bb19;                // scope 0 at ui/unique/unique-send.rs:10:1: 10:2
    }

    bb19 (cleanup): {
        resume;                          // scope 0 at ui/unique/unique-send.rs:5:1: 10:2
    }
}
