// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-containing-tag.rs:7:15: 7:15
    let _1: std::boxed::Box<main::t>;    // in scope 0 at ui/unique/unique-containing-tag.rs:10:9: 10:11
    let mut _2: main::t;                 // in scope 0 at ui/unique/unique-containing-tag.rs:10:31: 10:40
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/unique/unique-containing-tag.rs:10:9: 10:11
    }

    bb0: {
        _2 = t::t1(const 10_isize);      // scope 0 at ui/unique/unique-containing-tag.rs:10:31: 10:40
        _1 = Box::<t>::new(move _2) -> bb1; // scope 0 at ui/unique/unique-containing-tag.rs:10:22: 10:41
                                         // mir::Constant
                                         // + span: ui/unique/unique-containing-tag.rs:10:22: 10:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(t) -> Box<t> {Box::<t>::new}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/unique/unique-containing-tag.rs:25:1: 25:2
    }

    bb2: {
        return;                          // scope 0 at ui/unique/unique-containing-tag.rs:25:2: 25:2
    }
}

fn t::t1(_1: isize) -> t {
    let mut _0: main::t;                 // return place in scope 0 at ui/unique/unique-containing-tag.rs:8:14: 8:16

    bb0: {
        _0 = t::t1(move _1);             // scope 0 at ui/unique/unique-containing-tag.rs:8:14: 8:16
        return;                          // scope 0 at ui/unique/unique-containing-tag.rs:8:14: 8:16
    }
}

// MIR FOR CTFE
fn t::t1(_1: isize) -> t {
    let mut _0: main::t;                 // return place in scope 0 at ui/unique/unique-containing-tag.rs:8:14: 8:16

    bb0: {
        _0 = t::t1(move _1);             // scope 0 at ui/unique/unique-containing-tag.rs:8:14: 8:16
        return;                          // scope 0 at ui/unique/unique-containing-tag.rs:8:14: 8:16
    }
}

fn t::t2(_1: isize) -> t {
    let mut _0: main::t;                 // return place in scope 0 at ui/unique/unique-containing-tag.rs:8:25: 8:27

    bb0: {
        _0 = t::t2(move _1);             // scope 0 at ui/unique/unique-containing-tag.rs:8:25: 8:27
        return;                          // scope 0 at ui/unique/unique-containing-tag.rs:8:25: 8:27
    }
}

// MIR FOR CTFE
fn t::t2(_1: isize) -> t {
    let mut _0: main::t;                 // return place in scope 0 at ui/unique/unique-containing-tag.rs:8:25: 8:27

    bb0: {
        _0 = t::t2(move _1);             // scope 0 at ui/unique/unique-containing-tag.rs:8:25: 8:27
        return;                          // scope 0 at ui/unique/unique-containing-tag.rs:8:25: 8:27
    }
}
