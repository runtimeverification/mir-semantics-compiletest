// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unique/unique-ffi-symbols.rs:4:11: 4:11
    let _1: extern "C" fn() -> i32;      // in scope 0 at ui/unique/unique-ffi-symbols.rs:5:9: 5:10
    let mut _3: bool;                    // in scope 0 at ui/unique/unique-ffi-symbols.rs:14:5: 14:20
    let mut _4: bool;                    // in scope 0 at ui/unique/unique-ffi-symbols.rs:14:13: 14:19
    let mut _5: extern "C" fn() -> i32;  // in scope 0 at ui/unique/unique-ffi-symbols.rs:14:13: 14:14
    let mut _6: extern "C" fn() -> i32;  // in scope 0 at ui/unique/unique-ffi-symbols.rs:14:18: 14:19
    let mut _7: !;                       // in scope 0 at ui/unique/unique-ffi-symbols.rs:14:5: 14:20
    let mut _8: (&(i32, i32), &(i32, i32)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &(i32, i32);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _10: (i32, i32);                 // in scope 0 at ui/unique/unique-ffi-symbols.rs:15:16: 15:26
    let mut _11: i32;                    // in scope 0 at ui/unique/unique-ffi-symbols.rs:15:17: 15:20
    let mut _12: extern "C" fn() -> i32; // in scope 0 at ui/unique/unique-ffi-symbols.rs:15:17: 15:18
    let mut _13: i32;                    // in scope 0 at ui/unique/unique-ffi-symbols.rs:15:22: 15:25
    let mut _14: extern "C" fn() -> i32; // in scope 0 at ui/unique/unique-ffi-symbols.rs:15:22: 15:23
    let mut _15: &(i32, i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: &(i32, i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: &(i32, i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &(i32, i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &(i32, i32);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &(i32, i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &(i32, i32);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/unique/unique-ffi-symbols.rs:5:9: 5:10
        let _2: extern "C" fn() -> i32;  // in scope 1 at ui/unique/unique-ffi-symbols.rs:9:9: 9:10
        scope 2 {
            debug b => _2;               // in scope 2 at ui/unique/unique-ffi-symbols.rs:9:9: 9:10
            let _16: &(i32, i32);        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _17: &(i32, i32);        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _30: &(i32, i32);    // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _16;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _17;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _22: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _22;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = main::good as extern "C" fn() -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/unique/unique-ffi-symbols.rs:7:9: 7:13
                                         // mir::Constant
                                         // + span: ui/unique/unique-ffi-symbols.rs:7:9: 7:13
                                         // + literal: Const { ty: extern "C" fn() -> i32 {main::good}, val: Value(<ZST>) }
        _2 = main::good as extern "C" fn() -> i32 (Pointer(ReifyFnPointer)); // scope 1 at ui/unique/unique-ffi-symbols.rs:11:9: 11:13
                                         // mir::Constant
                                         // + span: ui/unique/unique-ffi-symbols.rs:11:9: 11:13
                                         // + literal: Const { ty: extern "C" fn() -> i32 {main::good}, val: Value(<ZST>) }
        _5 = _1;                         // scope 2 at ui/unique/unique-ffi-symbols.rs:14:13: 14:14
        _6 = _2;                         // scope 2 at ui/unique/unique-ffi-symbols.rs:14:18: 14:19
        _4 = Ne(move _5, move _6);       // scope 2 at ui/unique/unique-ffi-symbols.rs:14:13: 14:19
        _3 = Not(move _4);               // scope 2 at ui/unique/unique-ffi-symbols.rs:14:5: 14:20
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 2 at ui/unique/unique-ffi-symbols.rs:14:5: 14:20
    }

    bb1: {
        _7 = core::panicking::panic(const "assertion failed: a != b"); // scope 2 at ui/unique/unique-ffi-symbols.rs:14:5: 14:20
                                         // mir::Constant
                                         // + span: ui/unique/unique-ffi-symbols.rs:14:5: 14:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/unique/unique-ffi-symbols.rs:15:17: 15:18
        _11 = move _12() -> bb3;         // scope 2 at ui/unique/unique-ffi-symbols.rs:15:17: 15:20
    }

    bb3: {
        _14 = _2;                        // scope 2 at ui/unique/unique-ffi-symbols.rs:15:22: 15:23
        _13 = move _14() -> bb4;         // scope 2 at ui/unique/unique-ffi-symbols.rs:15:22: 15:25
    }

    bb4: {
        _10 = (move _11, move _13);      // scope 2 at ui/unique/unique-ffi-symbols.rs:15:16: 15:26
        _9 = &_10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _30 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }
        _15 = _30;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _15);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_8.0: &(i32, i32));       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_8.1: &(i32, i32));       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = <(i32, i32) as PartialEq>::eq(move _20, move _21) -> bb5; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (i32, i32), &'b (i32, i32)) -> bool {<(i32, i32) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = Not(move _19);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _22 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _24, move _25, move _27, move _29); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (i32, i32), &'b (i32, i32), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(i32, i32), (i32, i32)>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/unique/unique-ffi-symbols.rs:16:2: 16:2
    }
}

promoted[0] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);             // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (i32, i32);              // in scope 0 at ui/unique/unique-ffi-symbols.rs:15:28: 15:34

    bb0: {
        _1 = (const 0_i32, const 5_i32); // scope 0 at ui/unique/unique-ffi-symbols.rs:15:28: 15:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::good() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/unique/unique-ffi-symbols.rs:6:33: 6:36

    bb0: {
        _0 = const 0_i32;                // scope 0 at ui/unique/unique-ffi-symbols.rs:6:46: 6:47
        return;                          // scope 0 at ui/unique/unique-ffi-symbols.rs:6:50: 6:50
    }
}

fn main::good() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/unique/unique-ffi-symbols.rs:10:33: 10:36

    bb0: {
        _0 = const 5_i32;                // scope 0 at ui/unique/unique-ffi-symbols.rs:10:46: 10:47
        return;                          // scope 0 at ui/unique/unique-ffi-symbols.rs:10:50: 10:50
    }
}
