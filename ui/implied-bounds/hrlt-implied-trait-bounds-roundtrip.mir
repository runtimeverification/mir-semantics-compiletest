// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/implied-bounds/hrlt-implied-trait-bounds-roundtrip.rs:10:1: 10:27>::id(_1: &T) -> &T {
    debug value => _1;
    let mut _0: &T;

    bb0: {
        _0 = _1;
        return;
    }
}

fn could_use_implied_bounds(_1: Foo<'_>, _2: &T) -> &T {
    debug x => _2;
    let mut _0: &T;

    bb0: {
        _0 = <() as Trait<'_>>::id::<T>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: for<'a, 'b> fn(Foo<'a>, &'b ());
    scope 1 {
        debug bar => _1;
        let _2: for<'a> fn(Foo<'a>, &'a ());
        scope 2 {
            debug bar => _2;
            let _3: for<'a, 'b> fn(Foo<'a>, &'b ());
            scope 3 {
                debug _bar => _3;
            }
        }
    }

    bb0: {
        _1 = const ZeroSized: [closure@ui/implied-bounds/hrlt-implied-trait-bounds-roundtrip.rs:24:48: 24:54] as for<'a, 'b> fn(Foo<'a>, &'b ()) (Pointer(ClosureFnPointer(Normal)));
        _2 = _1;
        _3 = _2;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/implied-bounds/hrlt-implied-trait-bounds-roundtrip.rs:24:48: 24:54], _2: Foo<'_>, _3: &()) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Foo(_1: &()) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: &()) -> Foo<'_> {
    let mut _0: Foo<'_>;

    bb0: {
        _0 = Foo::<'_>(move _1);
        return;
    }
}
