// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/implied-bounds/issue-101951.rs:44:1: 44:43>::add_building(_1: &mut CondoEstate, _2: &mut PrettyCondo<'_>) -> () {
    debug self => _1;                    // in scope 0 at ui/implied-bounds/issue-101951.rs:45:21: 45:30
    debug _building => _2;               // in scope 0 at ui/implied-bounds/issue-101951.rs:45:32: 45:41
    let mut _0: ();                      // return place in scope 0 at ui/implied-bounds/issue-101951.rs:45:65: 45:65
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _3 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/implied-bounds/issue-101951.rs:50:11: 50:11

    bb0: {
        return;                          // scope 0 at ui/implied-bounds/issue-101951.rs:50:13: 50:13
    }
}
