// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static STATIC: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/type/type-alias-bounds.rs:19:16: 19:19

    bb0: {
        _0 = const 0_u32;                // scope 0 at ui/type/type-alias-bounds.rs:19:22: 19:23
        return;                          // scope 0 at ui/type/type-alias-bounds.rs:19:1: 19:24
    }
}

fn foo(_1: &i32) -> () {
    debug y => _1;                       // in scope 0 at ui/type/type-alias-bounds.rs:21:12: 21:13
    let mut _0: ();                      // return place in scope 0 at ui/type/type-alias-bounds.rs:21:24: 21:24
    let mut _2: std::vec::Vec<std::rc::Rc<i32>>; // in scope 0 at ui/type/type-alias-bounds.rs:25:9: 25:14
    let _3: ();                          // in scope 0 at ui/type/type-alias-bounds.rs:26:5: 26:24
    let mut _4: &mut std::vec::Vec<std::rc::Rc<i32>>; // in scope 0 at ui/type/type-alias-bounds.rs:26:5: 26:24
    let mut _5: std::rc::Rc<i32>;        // in scope 0 at ui/type/type-alias-bounds.rs:26:12: 26:23
    let _7: ();                          // in scope 0 at ui/type/type-alias-bounds.rs:29:5: 29:24
    let mut _8: &mut std::vec::Vec<std::rc::Rc<i32>>; // in scope 0 at ui/type/type-alias-bounds.rs:29:5: 29:24
    let mut _9: std::rc::Rc<i32>;        // in scope 0 at ui/type/type-alias-bounds.rs:29:12: 29:23
    let mut _11: &u32;                   // in scope 0 at ui/type/type-alias-bounds.rs:31:37: 31:44
    let _12: &u32;                       // in scope 0 at ui/type/type-alias-bounds.rs:31:37: 31:44
    let _13: &u32;                       // in scope 0 at ui/type/type-alias-bounds.rs:31:38: 31:44
    let mut _14: std::vec::Vec<&i32>;    // in scope 0 at ui/type/type-alias-bounds.rs:31:46: 31:56
    let _15: ();                         // in scope 0 at ui/type/type-alias-bounds.rs:32:5: 32:16
    let mut _16: &mut std::vec::Vec<&i32>; // in scope 0 at ui/type/type-alias-bounds.rs:32:5: 32:16
    let mut _17: &i32;                   // in scope 0 at ui/type/type-alias-bounds.rs:32:14: 32:15
    let mut _19: &u32;                   // in scope 0 at ui/type/type-alias-bounds.rs:34:42: 34:49
    let _20: &u32;                       // in scope 0 at ui/type/type-alias-bounds.rs:34:42: 34:49
    let _21: &u32;                       // in scope 0 at ui/type/type-alias-bounds.rs:34:43: 34:49
    let mut _22: std::vec::Vec<&i32>;    // in scope 0 at ui/type/type-alias-bounds.rs:34:51: 34:61
    let _23: ();                         // in scope 0 at ui/type/type-alias-bounds.rs:35:5: 35:16
    let mut _24: &mut std::vec::Vec<&i32>; // in scope 0 at ui/type/type-alias-bounds.rs:35:5: 35:16
    let mut _25: &i32;                   // in scope 0 at ui/type/type-alias-bounds.rs:35:14: 35:15
    let mut _27: &u32;                   // in scope 0 at ui/type/type-alias-bounds.rs:37:43: 37:50
    let _28: &u32;                       // in scope 0 at ui/type/type-alias-bounds.rs:37:43: 37:50
    let _29: &u32;                       // in scope 0 at ui/type/type-alias-bounds.rs:37:44: 37:50
    let mut _30: std::vec::Vec<&i32>;    // in scope 0 at ui/type/type-alias-bounds.rs:37:52: 37:62
    let _31: ();                         // in scope 0 at ui/type/type-alias-bounds.rs:38:5: 38:16
    let mut _32: &mut std::vec::Vec<&i32>; // in scope 0 at ui/type/type-alias-bounds.rs:38:5: 38:16
    let mut _33: &i32;                   // in scope 0 at ui/type/type-alias-bounds.rs:38:14: 38:15
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/type/type-alias-bounds.rs:25:9: 25:14
        let mut _6: std::vec::Vec<std::rc::Rc<i32>>; // in scope 1 at ui/type/type-alias-bounds.rs:28:9: 28:14
        scope 2 {
            debug x => _6;               // in scope 2 at ui/type/type-alias-bounds.rs:28:9: 28:14
            let mut _10: (&u32, std::vec::Vec<&i32>); // in scope 2 at ui/type/type-alias-bounds.rs:31:9: 31:14
            scope 3 {
                debug x => _10;          // in scope 3 at ui/type/type-alias-bounds.rs:31:9: 31:14
                let mut _18: (&u32, std::vec::Vec<&i32>); // in scope 3 at ui/type/type-alias-bounds.rs:34:9: 34:14
                scope 4 {
                    debug x => _18;      // in scope 4 at ui/type/type-alias-bounds.rs:34:9: 34:14
                    let mut _26: (&u32, std::vec::Vec<&i32>); // in scope 4 at ui/type/type-alias-bounds.rs:37:9: 37:14
                    scope 5 {
                        debug x => _26;  // in scope 5 at ui/type/type-alias-bounds.rs:37:9: 37:14
                    }
                }
            }
        }
    }

    bb0: {
        _2 = Vec::<Rc<i32>>::new() -> bb1; // scope 0 at ui/type/type-alias-bounds.rs:25:26: 25:36
                                         // mir::Constant
                                         // + span: ui/type/type-alias-bounds.rs:25:26: 25:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<Rc<i32>> {Vec::<Rc<i32>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _2;                    // scope 1 at ui/type/type-alias-bounds.rs:26:5: 26:24
        _5 = Rc::<i32>::new(const 42_i32) -> [return: bb2, unwind: bb22]; // scope 1 at ui/type/type-alias-bounds.rs:26:12: 26:23
                                         // mir::Constant
                                         // + span: ui/type/type-alias-bounds.rs:26:12: 26:19
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(i32) -> Rc<i32> {Rc::<i32>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Vec::<Rc<i32>>::push(move _4, move _5) -> [return: bb3, unwind: bb22]; // scope 1 at ui/type/type-alias-bounds.rs:26:5: 26:24
                                         // mir::Constant
                                         // + span: ui/type/type-alias-bounds.rs:26:7: 26:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Rc<i32>>, Rc<i32>) {Vec::<Rc<i32>>::push}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = Vec::<Rc<i32>>::new() -> [return: bb4, unwind: bb22]; // scope 1 at ui/type/type-alias-bounds.rs:28:27: 28:37
                                         // mir::Constant
                                         // + span: ui/type/type-alias-bounds.rs:28:27: 28:35
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn() -> Vec<Rc<i32>> {Vec::<Rc<i32>>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = &mut _6;                    // scope 2 at ui/type/type-alias-bounds.rs:29:5: 29:24
        _9 = Rc::<i32>::new(const 42_i32) -> [return: bb5, unwind: bb21]; // scope 2 at ui/type/type-alias-bounds.rs:29:12: 29:23
                                         // mir::Constant
                                         // + span: ui/type/type-alias-bounds.rs:29:12: 29:19
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(i32) -> Rc<i32> {Rc::<i32>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = Vec::<Rc<i32>>::push(move _8, move _9) -> [return: bb6, unwind: bb21]; // scope 2 at ui/type/type-alias-bounds.rs:29:5: 29:24
                                         // mir::Constant
                                         // + span: ui/type/type-alias-bounds.rs:29:7: 29:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Rc<i32>>, Rc<i32>) {Vec::<Rc<i32>>::push}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = const {alloc1: &u32};      // scope 2 at ui/type/type-alias-bounds.rs:31:38: 31:44
                                         // mir::Constant
                                         // + span: ui/type/type-alias-bounds.rs:31:38: 31:44
                                         // + literal: Const { ty: &u32, val: Value(Scalar(alloc1)) }
        _12 = _13;                       // scope 2 at ui/type/type-alias-bounds.rs:31:37: 31:44
        _11 = _12;                       // scope 2 at ui/type/type-alias-bounds.rs:31:37: 31:44
        _14 = Vec::<&i32>::new() -> [return: bb7, unwind: bb21]; // scope 2 at ui/type/type-alias-bounds.rs:31:46: 31:56
                                         // mir::Constant
                                         // + span: ui/type/type-alias-bounds.rs:31:46: 31:54
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn() -> Vec<&i32> {Vec::<&i32>::new}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = (move _11, move _14);      // scope 2 at ui/type/type-alias-bounds.rs:31:36: 31:57
        _16 = &mut (_10.1: std::vec::Vec<&i32>); // scope 3 at ui/type/type-alias-bounds.rs:32:5: 32:16
        _17 = _1;                        // scope 3 at ui/type/type-alias-bounds.rs:32:14: 32:15
        _15 = Vec::<&i32>::push(move _16, move _17) -> [return: bb8, unwind: bb20]; // scope 3 at ui/type/type-alias-bounds.rs:32:5: 32:16
                                         // mir::Constant
                                         // + span: ui/type/type-alias-bounds.rs:32:9: 32:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<&i32>, &i32) {Vec::<&i32>::push}, val: Value(<ZST>) }
    }

    bb8: {
        _21 = const {alloc1: &u32};      // scope 3 at ui/type/type-alias-bounds.rs:34:43: 34:49
                                         // mir::Constant
                                         // + span: ui/type/type-alias-bounds.rs:34:43: 34:49
                                         // + literal: Const { ty: &u32, val: Value(Scalar(alloc1)) }
        _20 = _21;                       // scope 3 at ui/type/type-alias-bounds.rs:34:42: 34:49
        _19 = _20;                       // scope 3 at ui/type/type-alias-bounds.rs:34:42: 34:49
        _22 = Vec::<&i32>::new() -> [return: bb9, unwind: bb20]; // scope 3 at ui/type/type-alias-bounds.rs:34:51: 34:61
                                         // mir::Constant
                                         // + span: ui/type/type-alias-bounds.rs:34:51: 34:59
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn() -> Vec<&i32> {Vec::<&i32>::new}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = (move _19, move _22);      // scope 3 at ui/type/type-alias-bounds.rs:34:41: 34:62
        _24 = &mut (_18.1: std::vec::Vec<&i32>); // scope 4 at ui/type/type-alias-bounds.rs:35:5: 35:16
        _25 = _1;                        // scope 4 at ui/type/type-alias-bounds.rs:35:14: 35:15
        _23 = Vec::<&i32>::push(move _24, move _25) -> [return: bb10, unwind: bb19]; // scope 4 at ui/type/type-alias-bounds.rs:35:5: 35:16
                                         // mir::Constant
                                         // + span: ui/type/type-alias-bounds.rs:35:9: 35:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<&i32>, &i32) {Vec::<&i32>::push}, val: Value(<ZST>) }
    }

    bb10: {
        _29 = const {alloc1: &u32};      // scope 4 at ui/type/type-alias-bounds.rs:37:44: 37:50
                                         // mir::Constant
                                         // + span: ui/type/type-alias-bounds.rs:37:44: 37:50
                                         // + literal: Const { ty: &u32, val: Value(Scalar(alloc1)) }
        _28 = _29;                       // scope 4 at ui/type/type-alias-bounds.rs:37:43: 37:50
        _27 = _28;                       // scope 4 at ui/type/type-alias-bounds.rs:37:43: 37:50
        _30 = Vec::<&i32>::new() -> [return: bb11, unwind: bb19]; // scope 4 at ui/type/type-alias-bounds.rs:37:52: 37:62
                                         // mir::Constant
                                         // + span: ui/type/type-alias-bounds.rs:37:52: 37:60
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: fn() -> Vec<&i32> {Vec::<&i32>::new}, val: Value(<ZST>) }
    }

    bb11: {
        _26 = (move _27, move _30);      // scope 4 at ui/type/type-alias-bounds.rs:37:42: 37:63
        _32 = &mut (_26.1: std::vec::Vec<&i32>); // scope 5 at ui/type/type-alias-bounds.rs:38:5: 38:16
        _33 = _1;                        // scope 5 at ui/type/type-alias-bounds.rs:38:14: 38:15
        _31 = Vec::<&i32>::push(move _32, move _33) -> [return: bb12, unwind: bb18]; // scope 5 at ui/type/type-alias-bounds.rs:38:5: 38:16
                                         // mir::Constant
                                         // + span: ui/type/type-alias-bounds.rs:38:9: 38:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<&i32>, &i32) {Vec::<&i32>::push}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_26) -> [return: bb13, unwind: bb19]; // scope 4 at ui/type/type-alias-bounds.rs:39:1: 39:2
    }

    bb13: {
        drop(_18) -> [return: bb14, unwind: bb20]; // scope 3 at ui/type/type-alias-bounds.rs:39:1: 39:2
    }

    bb14: {
        drop(_10) -> [return: bb15, unwind: bb21]; // scope 2 at ui/type/type-alias-bounds.rs:39:1: 39:2
    }

    bb15: {
        drop(_6) -> [return: bb16, unwind: bb22]; // scope 1 at ui/type/type-alias-bounds.rs:39:1: 39:2
    }

    bb16: {
        drop(_2) -> bb17;                // scope 0 at ui/type/type-alias-bounds.rs:39:1: 39:2
    }

    bb17: {
        return;                          // scope 0 at ui/type/type-alias-bounds.rs:39:2: 39:2
    }

    bb18 (cleanup): {
        drop(_26) -> bb19;               // scope 4 at ui/type/type-alias-bounds.rs:39:1: 39:2
    }

    bb19 (cleanup): {
        drop(_18) -> bb20;               // scope 3 at ui/type/type-alias-bounds.rs:39:1: 39:2
    }

    bb20 (cleanup): {
        drop(_10) -> bb21;               // scope 2 at ui/type/type-alias-bounds.rs:39:1: 39:2
    }

    bb21 (cleanup): {
        drop(_6) -> bb22;                // scope 1 at ui/type/type-alias-bounds.rs:39:1: 39:2
    }

    bb22 (cleanup): {
        drop(_2) -> bb23;                // scope 0 at ui/type/type-alias-bounds.rs:39:1: 39:2
    }

    bb23 (cleanup): {
        resume;                          // scope 0 at ui/type/type-alias-bounds.rs:21:1: 39:2
    }
}

alloc1 (static: STATIC, size: 4, align: 4) {
    00 00 00 00                                     │ ....
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/type/type-alias-bounds.rs:59:11: 59:11

    bb0: {
        return;                          // scope 0 at ui/type/type-alias-bounds.rs:59:13: 59:13
    }
}

fn Sendable(_1: T) -> Sendable<T> {
    let mut _0: Sendable<T>;             // return place in scope 0 at ui/type/type-alias-bounds.rs:42:1: 42:25

    bb0: {
        _0 = Sendable::<T>(move _1);     // scope 0 at ui/type/type-alias-bounds.rs:42:1: 42:25
        return;                          // scope 0 at ui/type/type-alias-bounds.rs:42:1: 42:25
    }
}

// MIR FOR CTFE
fn Sendable(_1: T) -> Sendable<T> {
    let mut _0: Sendable<T>;             // return place in scope 0 at ui/type/type-alias-bounds.rs:42:1: 42:25

    bb0: {
        _0 = Sendable::<T>(move _1);     // scope 0 at ui/type/type-alias-bounds.rs:42:1: 42:25
        return;                          // scope 0 at ui/type/type-alias-bounds.rs:42:1: 42:25
    }
}
