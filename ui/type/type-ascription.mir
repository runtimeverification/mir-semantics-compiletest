// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const C1: u8 = {
    let mut _0: u8;
    let mut _1: u8;

    bb0: {
        StorageLive(_1);
        _1 = const 10_u8;
        _0 = _1;
        StorageDead(_1);
        return;
    }
}

const C2: [u8; 1] = {
    let mut _0: [u8; 1];

    bb0: {
        _0 = [const 1_u8];
        return;
    }
}

C2::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: usize;

    bb0: {
        StorageLive(_1);
        _1 = const 1_usize;
        _0 = _1;
        StorageDead(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let _4: &i32;
    let _5: &i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: i32;
    let mut _9: i32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&u8, &u8);
    let mut _14: &u8;
    let _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let _18: &u8;
    let _19: &u8;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: u8;
    let mut _23: u8;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let _27: S;
    let mut _28: u8;
    let mut _30: std::vec::Vec<u8>;
    let mut _31: std::iter::Cloned<std::slice::Iter<'_, u8>>;
    let mut _32: std::slice::Iter<'_, u8>;
    let mut _33: &[u8];
    let _34: ();
    let mut _35: &mut std::vec::Vec<u8>;
    let mut _36: (&std::vec::Vec<u8>, &[u8; 4]);
    let mut _37: &std::vec::Vec<u8>;
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: u8;
    let mut _48: u16;
    let mut _49: u8;
    let mut _50: (&u8, &u8);
    let mut _51: &u8;
    let _52: &u8;
    let mut _53: &std::vec::Vec<u8>;
    let mut _54: usize;
    let mut _55: usize;
    let mut _56: u8;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: u8;
    let mut _62: u8;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: (&usize, &usize);
    let mut _67: &usize;
    let _68: usize;
    let _69: &u8;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: usize;
    let mut _75: usize;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: (&usize, &usize);
    let mut _80: &usize;
    let _81: usize;
    let _82: &u16;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: usize;
    let mut _88: usize;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: (&u16, &u16);
    let mut _93: &u16;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: u16;
    let mut _99: u16;
    let _101: !;
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _104: std::vec::Vec<u8>;
    let mut _105: std::boxed::Box<[u8]>;
    let mut _106: usize;
    let mut _107: usize;
    let mut _108: *mut u8;
    let mut _109: std::boxed::Box<[u8; 3]>;
    let mut _110: (&std::vec::Vec<u8>, &[u8; 3]);
    let mut _111: &std::vec::Vec<u8>;
    let mut _114: bool;
    let mut _115: bool;
    let _117: !;
    let mut _118: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _126: &u8;
    let mut _127: &[u8; 1];
    let mut _128: &i32;
    let mut _129: *const [u8; 3];
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug s => _27;
        let mut _125: &[u8; 3];
        scope 6 {
            debug arr => const _;
            let mut _29: std::vec::Vec<u8>;
            scope 7 {
                debug v => _29;
                let _38: &std::vec::Vec<u8>;
                let _39: &[u8; 4];
                let _45: u8;
                let mut _124: &[u8; 4];
                scope 8 {
                    debug left_val => _38;
                    debug right_val => _39;
                    let _42: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _42;
                    }
                }
                scope 10 {
                    debug a => _45;
                    let _47: u16;
                    scope 11 {
                        debug b => _47;
                        let _57: &u8;
                        let _58: &u8;
                        let _70: &usize;
                        let _71: &usize;
                        let _83: &usize;
                        let _84: &usize;
                        let _94: &u16;
                        let _95: &u16;
                        let mut _103: std::vec::Vec<u8>;
                        let mut _120: &u16;
                        let mut _121: &usize;
                        let mut _122: &usize;
                        let mut _123: &u8;
                        scope 12 {
                            debug left_val => _57;
                            debug right_val => _58;
                            let _63: core::panicking::AssertKind;
                            scope 13 {
                                debug kind => _63;
                            }
                        }
                        scope 14 {
                            debug left_val => _70;
                            debug right_val => _71;
                            let _76: core::panicking::AssertKind;
                            scope 15 {
                                debug kind => _76;
                            }
                        }
                        scope 16 {
                            debug left_val => _83;
                            debug right_val => _84;
                            let _89: core::panicking::AssertKind;
                            scope 17 {
                                debug kind => _89;
                            }
                        }
                        scope 18 {
                            debug left_val => _94;
                            debug right_val => _95;
                            let _100: core::panicking::AssertKind;
                            scope 19 {
                                debug kind => _100;
                            }
                        }
                        scope 20 {
                            debug v => _103;
                            let _112: &std::vec::Vec<u8>;
                            let _113: &[u8; 3];
                            let mut _119: &[u8; 3];
                            scope 21 {
                            }
                            scope 22 {
                                debug left_val => _112;
                                debug right_val => _113;
                                let _116: core::panicking::AssertKind;
                                scope 23 {
                                    debug kind => _116;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = <u8 as Into<i32>>::into(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _128 = const _;
        _1 = (move _2, _128);
        _4 = (_1.0: &i32);
        _5 = (_1.1: &i32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<i32, i32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _15 = const 0_usize;
        _16 = const 1_usize;
        _17 = Lt(_15, _16);
        assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, _15) -> [success: bb4, unwind continue];
    }

    bb4: {
        _127 = const _;
        _14 = &(*_127)[_15];
        _126 = const _;
        _13 = (move _14, _126);
        _18 = (_13.0: &u8);
        _19 = (_13.1: &u8);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<u8, u8>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb6: {
        _28 = const 10_u8;
        _27 = S { a: _28 };
        _125 = const _;
        _33 = _125 as &[u8] (Pointer(Unsize));
        _32 = core::slice::<impl [u8]>::iter(move _33) -> [return: bb7, unwind continue];
    }

    bb7: {
        _31 = <std::slice::Iter<'_, u8> as Iterator>::cloned::<'_, u8>(move _32) -> [return: bb8, unwind continue];
    }

    bb8: {
        _30 = <Cloned<std::slice::Iter<'_, u8>> as Iterator>::collect::<Vec<u8>>(move _31) -> [return: bb9, unwind continue];
    }

    bb9: {
        _29 = move _30;
        _35 = &mut _29;
        _34 = Vec::<u8>::push(move _35, const 4_u8) -> [return: bb10, unwind: bb38];
    }

    bb10: {
        _37 = &_29;
        _124 = const _;
        _36 = (move _37, _124);
        _38 = (_36.0: &std::vec::Vec<u8>);
        _39 = (_36.1: &[u8; 4]);
        _41 = <Vec<u8> as PartialEq<[u8; 4]>>::eq(_38, _39) -> [return: bb11, unwind: bb38];
    }

    bb11: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<Vec<u8>, [u8; 4]>(move _42, _38, _39, move _44) -> bb38;
    }

    bb13: {
        _46 = const 1_u8;
        _45 = _46;
        _49 = _45;
        _48 = <u8 as Into<u16>>::into(move _49) -> [return: bb14, unwind: bb38];
    }

    bb14: {
        _47 = _48;
        _53 = &_29;
        _56 = _45;
        _55 = <u8 as Into<usize>>::into(move _56) -> [return: bb15, unwind: bb38];
    }

    bb15: {
        _54 = _55;
        _52 = <Vec<u8> as Index<usize>>::index(move _53, move _54) -> [return: bb16, unwind: bb38];
    }

    bb16: {
        _51 = _52;
        _123 = const _;
        _50 = (move _51, _123);
        _57 = (_50.0: &u8);
        _58 = (_50.1: &u8);
        _61 = (*_57);
        _62 = (*_58);
        _60 = Eq(move _61, move _62);
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<u8, u8>(move _63, _57, _58, move _65) -> bb38;
    }

    bb18: {
        _69 = &_45;
        _68 = std::mem::size_of_val::<u8>(_69) -> [return: bb19, unwind: bb38];
    }

    bb19: {
        _67 = &_68;
        _122 = const _;
        _66 = (move _67, _122);
        _70 = (_66.0: &usize);
        _71 = (_66.1: &usize);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<usize, usize>(move _76, _70, _71, move _78) -> bb38;
    }

    bb21: {
        _82 = &_47;
        _81 = std::mem::size_of_val::<u16>(_82) -> [return: bb22, unwind: bb38];
    }

    bb22: {
        _80 = &_81;
        _121 = const _;
        _79 = (move _80, _121);
        _83 = (_79.0: &usize);
        _84 = (_79.1: &usize);
        _87 = (*_83);
        _88 = (*_84);
        _86 = Eq(move _87, move _88);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<usize, usize>(move _89, _83, _84, move _91) -> bb38;
    }

    bb24: {
        _93 = &_47;
        _120 = const _;
        _92 = (move _93, _120);
        _94 = (_92.0: &u16);
        _95 = (_92.1: &u16);
        _98 = (*_94);
        _99 = (*_95);
        _97 = Eq(move _98, move _99);
        _96 = Not(move _97);
        switchInt(move _96) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _100 = core::panicking::AssertKind::Eq;
        _102 = Option::<Arguments<'_>>::None;
        _101 = core::panicking::assert_failed::<u16, u16>(move _100, _94, _95, move _102) -> bb38;
    }

    bb26: {
        _103 = Vec::<u8>::new() -> [return: bb27, unwind: bb38];
    }

    bb27: {
        _106 = SizeOf([u8; 3]);
        _107 = AlignOf([u8; 3]);
        _108 = alloc::alloc::exchange_malloc(move _106, move _107) -> [return: bb28, unwind: bb37];
    }

    bb28: {
        _109 = ShallowInitBox(move _108, [u8; 3]);
        _129 = (((_109.0: std::ptr::Unique<[u8; 3]>).0: std::ptr::NonNull<[u8; 3]>).0: *const [u8; 3]);
        (*_129) = [const 1_u8, const 2_u8, const 3_u8];
        _105 = move _109 as std::boxed::Box<[u8]> (Pointer(Unsize));
        _104 = slice::<impl [u8]>::into_vec::<std::alloc::Global>(move _105) -> [return: bb29, unwind: bb37];
    }

    bb29: {
        drop(_103) -> [return: bb30, unwind: bb31];
    }

    bb30: {
        _103 = move _104;
        _111 = &_103;
        _119 = const _;
        _110 = (move _111, _119);
        _112 = (_110.0: &std::vec::Vec<u8>);
        _113 = (_110.1: &[u8; 3]);
        _115 = <Vec<u8> as PartialEq<[u8; 3]>>::eq(_112, _113) -> [return: bb32, unwind: bb37];
    }

    bb31 (cleanup): {
        _103 = move _104;
        goto -> bb37;
    }

    bb32: {
        _114 = Not(move _115);
        switchInt(move _114) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _116 = core::panicking::AssertKind::Eq;
        _118 = Option::<Arguments<'_>>::None;
        _117 = core::panicking::assert_failed::<Vec<u8>, [u8; 3]>(move _116, _112, _113, move _118) -> bb37;
    }

    bb34: {
        drop(_103) -> [return: bb35, unwind: bb38];
    }

    bb35: {
        drop(_29) -> [return: bb36, unwind continue];
    }

    bb36: {
        return;
    }

    bb37 (cleanup): {
        drop(_103) -> [return: bb38, unwind terminate];
    }

    bb38 (cleanup): {
        drop(_29) -> [return: bb39, unwind terminate];
    }

    bb39 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[u8; 3] = {
    let mut _0: &[u8; 3];
    let mut _1: [u8; 3];

    bb0: {
        _1 = [const 1_u8, const 2_u8, const 3_u8];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 1_u16;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[u8; 4] = {
    let mut _0: &[u8; 4];
    let mut _1: [u8; 4];

    bb0: {
        _1 = [const 1_u8, const 2_u8, const 3_u8, const 4_u8];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[u8; 3] = {
    let mut _0: &[u8; 3];
    let mut _1: [u8; 3];

    bb0: {
        _1 = [const 1_u8, const 2_u8, const 3_u8];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[u8; 1] = {
    let mut _0: &[u8; 1];
    let mut _1: [u8; 1];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 10_i32;
        _0 = &_1;
        return;
    }
}
