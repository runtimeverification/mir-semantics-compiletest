// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn fuse_covariant(_1: Fuse<&I>) -> Fuse<&I> {
    debug iter => _1;                    // in scope 0 at ui/variance-iterators-in-libcore.rs:7:26: 7:30
    let mut _0: std::iter::Fuse<&I>;     // return place in scope 0 at ui/variance-iterators-in-libcore.rs:7:53: 7:64

    bb0: {
        _0 = move _1;                    // scope 0 at ui/variance-iterators-in-libcore.rs:7:67: 7:71
        return;                          // scope 0 at ui/variance-iterators-in-libcore.rs:7:73: 7:73
    }
}

fn zip_covariant(_1: Zip<&A, &B>) -> Zip<&A, &B> {
    debug iter => _1;                    // in scope 0 at ui/variance-iterators-in-libcore.rs:8:28: 8:32
    let mut _0: std::iter::Zip<&A, &B>;  // return place in scope 0 at ui/variance-iterators-in-libcore.rs:8:66: 8:83

    bb0: {
        _0 = move _1;                    // scope 0 at ui/variance-iterators-in-libcore.rs:8:86: 8:90
        return;                          // scope 0 at ui/variance-iterators-in-libcore.rs:8:92: 8:92
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/variance-iterators-in-libcore.rs:10:11: 10:11

    bb0: {
        return;                          // scope 0 at ui/variance-iterators-in-libcore.rs:10:14: 10:14
    }
}
