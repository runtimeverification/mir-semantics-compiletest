// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn voidret1() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/extern/extern-compare-with-return-type.rs:7:26: 7:26
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:9: 209:63
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let mut _3: &[&str];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
    let mut _4: &[&str; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
    let _5: &[&str; 3];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let mut _7: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let _8: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let _9: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
    let mut _11: &&str;                  // in scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
    let _12: &&str;                      // in scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
    let mut _14: &u32;                   // in scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
    let _15: &u32;                       // in scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
    let mut _16: &u32;                   // in scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
    let mut _17: &&str;                  // in scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
    let mut _18: &[&str; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36

    bb0: {
        _18 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(voidret1, [], Some(promoted[2])) }
        _5 = _18;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
        _4 = _5;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
        _17 = const _;                   // scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
                                         // + literal: Const { ty: &&str, val: Unevaluated(voidret1, [], Some(promoted[1])) }
        _12 = _17;                       // scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
        _11 = _12;                       // scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
        _10 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _11) -> bb1; // scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _16 = const _;                   // scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
                                         // + literal: Const { ty: &u32, val: Unevaluated(voidret1, [], Some(promoted[0])) }
        _15 = _16;                       // scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
        _14 = _15;                       // scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(move _14) -> bb2; // scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u32>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = [move _10, move _13];       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = _eprint(move _2) -> bb4;    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:9: 209:63
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:9: 209:28
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_eprint}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/extern/extern-compare-with-return-type.rs:7:36: 7:36
    }
}

promoted[0] in voidret1: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
    let mut _1: u32;                     // in scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34

    bb0: {
        _1 = const 7_u32;                // scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
        _0 = &_1;                        // scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
        return;                          // scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
    }
}

promoted[1] in voidret1: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
    let mut _1: &str;                    // in scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34

    bb0: {
        _1 = const "ui/extern/extern-compare-with-return-type.rs"; // scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
        return;                          // scope 0 at ui/extern/extern-compare-with-return-type.rs:7:28: 7:34
    }
}

promoted[2] in voidret1: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
    let mut _1: [&str; 3];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36

    bb0: {
        _1 = [const "[", const ":", const "]\n"]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
    }
}

fn voidret2() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/extern/extern-compare-with-return-type.rs:8:26: 8:26
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:9: 209:63
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let mut _3: &[&str];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
    let mut _4: &[&str; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
    let _5: &[&str; 3];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let mut _7: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let _8: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let _9: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
    let mut _11: &&str;                  // in scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
    let _12: &&str;                      // in scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
    let mut _14: &u32;                   // in scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
    let _15: &u32;                       // in scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
    let mut _16: &u32;                   // in scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
    let mut _17: &&str;                  // in scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
    let mut _18: &[&str; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36

    bb0: {
        _18 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(voidret2, [], Some(promoted[2])) }
        _5 = _18;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
        _4 = _5;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
        _17 = const _;                   // scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
                                         // + literal: Const { ty: &&str, val: Unevaluated(voidret2, [], Some(promoted[1])) }
        _12 = _17;                       // scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
        _11 = _12;                       // scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
        _10 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _11) -> bb1; // scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _16 = const _;                   // scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
                                         // + literal: Const { ty: &u32, val: Unevaluated(voidret2, [], Some(promoted[0])) }
        _15 = _16;                       // scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
        _14 = _15;                       // scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(move _14) -> bb2; // scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u32>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = [move _10, move _13];       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = _eprint(move _2) -> bb4;    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:9: 209:63
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:9: 209:28
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_eprint}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/extern/extern-compare-with-return-type.rs:8:36: 8:36
    }
}

promoted[0] in voidret2: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
    let mut _1: u32;                     // in scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34

    bb0: {
        _1 = const 8_u32;                // scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
        _0 = &_1;                        // scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
        return;                          // scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
    }
}

promoted[1] in voidret2: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
    let mut _1: &str;                    // in scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34

    bb0: {
        _1 = const "ui/extern/extern-compare-with-return-type.rs"; // scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
        return;                          // scope 0 at ui/extern/extern-compare-with-return-type.rs:8:28: 8:34
    }
}

promoted[2] in voidret2: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
    let mut _1: [&str; 3];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36

    bb0: {
        _1 = [const "[", const ":", const "]\n"]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:346:27: 346:36
    }
}

fn uintret() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/extern/extern-compare-with-return-type.rs:10:28: 10:33

    bb0: {
        _0 = const 22_usize;             // scope 0 at ui/extern/extern-compare-with-return-type.rs:10:36: 10:38
        return;                          // scope 0 at ui/extern/extern-compare-with-return-type.rs:10:40: 10:40
    }
}

fn uintvoidret(_1: usize) -> () {
    debug _x => _1;                      // in scope 0 at ui/extern/extern-compare-with-return-type.rs:12:27: 12:29
    let mut _0: ();                      // return place in scope 0 at ui/extern/extern-compare-with-return-type.rs:12:38: 12:38

    bb0: {
        return;                          // scope 0 at ui/extern/extern-compare-with-return-type.rs:12:40: 12:40
    }
}

fn uintuintuintuintret(_1: usize, _2: usize, _3: usize) -> usize {
    debug x => _1;                       // in scope 0 at ui/extern/extern-compare-with-return-type.rs:14:35: 14:36
    debug y => _2;                       // in scope 0 at ui/extern/extern-compare-with-return-type.rs:14:45: 14:46
    debug z => _3;                       // in scope 0 at ui/extern/extern-compare-with-return-type.rs:14:55: 14:56
    let mut _0: usize;                   // return place in scope 0 at ui/extern/extern-compare-with-return-type.rs:14:68: 14:73
    let mut _4: usize;                   // in scope 0 at ui/extern/extern-compare-with-return-type.rs:14:76: 14:79
    let mut _5: usize;                   // in scope 0 at ui/extern/extern-compare-with-return-type.rs:14:76: 14:77
    let mut _6: usize;                   // in scope 0 at ui/extern/extern-compare-with-return-type.rs:14:78: 14:79
    let mut _7: (usize, bool);           // in scope 0 at ui/extern/extern-compare-with-return-type.rs:14:76: 14:79
    let mut _8: usize;                   // in scope 0 at ui/extern/extern-compare-with-return-type.rs:14:80: 14:81
    let mut _9: (usize, bool);           // in scope 0 at ui/extern/extern-compare-with-return-type.rs:14:76: 14:81

    bb0: {
        _5 = _1;                         // scope 0 at ui/extern/extern-compare-with-return-type.rs:14:76: 14:77
        _6 = _2;                         // scope 0 at ui/extern/extern-compare-with-return-type.rs:14:78: 14:79
        _7 = CheckedAdd(_5, _6);         // scope 0 at ui/extern/extern-compare-with-return-type.rs:14:76: 14:79
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _6) -> bb1; // scope 0 at ui/extern/extern-compare-with-return-type.rs:14:76: 14:79
    }

    bb1: {
        _4 = move (_7.0: usize);         // scope 0 at ui/extern/extern-compare-with-return-type.rs:14:76: 14:79
        _8 = _3;                         // scope 0 at ui/extern/extern-compare-with-return-type.rs:14:80: 14:81
        _9 = CheckedAdd(_4, _8);         // scope 0 at ui/extern/extern-compare-with-return-type.rs:14:76: 14:81
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _8) -> bb2; // scope 0 at ui/extern/extern-compare-with-return-type.rs:14:76: 14:81
    }

    bb2: {
        _0 = move (_9.0: usize);         // scope 0 at ui/extern/extern-compare-with-return-type.rs:14:76: 14:81
        return;                          // scope 0 at ui/extern/extern-compare-with-return-type.rs:14:83: 14:83
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/extern/extern-compare-with-return-type.rs:17:15: 17:15
    let mut _1: bool;                    // in scope 0 at ui/extern/extern-compare-with-return-type.rs:18:5: 18:72
    let mut _2: bool;                    // in scope 0 at ui/extern/extern-compare-with-return-type.rs:18:13: 18:71
    let mut _3: extern "C" fn();         // in scope 0 at ui/extern/extern-compare-with-return-type.rs:18:13: 18:40
    let mut _4: extern "C" fn();         // in scope 0 at ui/extern/extern-compare-with-return-type.rs:18:44: 18:71
    let mut _5: !;                       // in scope 0 at ui/extern/extern-compare-with-return-type.rs:18:5: 18:72
    let mut _6: bool;                    // in scope 0 at ui/extern/extern-compare-with-return-type.rs:19:5: 19:72
    let mut _7: bool;                    // in scope 0 at ui/extern/extern-compare-with-return-type.rs:19:13: 19:71
    let mut _8: extern "C" fn();         // in scope 0 at ui/extern/extern-compare-with-return-type.rs:19:13: 19:40
    let mut _9: extern "C" fn();         // in scope 0 at ui/extern/extern-compare-with-return-type.rs:19:44: 19:71
    let mut _10: !;                      // in scope 0 at ui/extern/extern-compare-with-return-type.rs:19:5: 19:72
    let mut _11: bool;                   // in scope 0 at ui/extern/extern-compare-with-return-type.rs:21:5: 21:88
    let mut _12: bool;                   // in scope 0 at ui/extern/extern-compare-with-return-type.rs:21:13: 21:87
    let mut _13: extern "C" fn() -> usize; // in scope 0 at ui/extern/extern-compare-with-return-type.rs:21:13: 21:48
    let mut _14: extern "C" fn() -> usize; // in scope 0 at ui/extern/extern-compare-with-return-type.rs:21:52: 21:87
    let mut _15: !;                      // in scope 0 at ui/extern/extern-compare-with-return-type.rs:21:5: 21:88
    let mut _16: bool;                   // in scope 0 at ui/extern/extern-compare-with-return-type.rs:23:5: 23:88
    let mut _17: bool;                   // in scope 0 at ui/extern/extern-compare-with-return-type.rs:23:13: 23:87
    let mut _18: extern "C" fn(usize);   // in scope 0 at ui/extern/extern-compare-with-return-type.rs:23:13: 23:48
    let mut _19: extern "C" fn(usize);   // in scope 0 at ui/extern/extern-compare-with-return-type.rs:23:52: 23:87
    let mut _20: !;                      // in scope 0 at ui/extern/extern-compare-with-return-type.rs:23:5: 23:88
    let mut _21: bool;                   // in scope 0 at ui/extern/extern-compare-with-return-type.rs:25:5: 26:56
    let mut _22: bool;                   // in scope 0 at ui/extern/extern-compare-with-return-type.rs:25:13: 26:55
    let mut _23: extern "C" fn(usize, usize, usize) -> usize; // in scope 0 at ui/extern/extern-compare-with-return-type.rs:25:13: 25:55
    let mut _24: extern "C" fn(usize, usize, usize) -> usize; // in scope 0 at ui/extern/extern-compare-with-return-type.rs:26:13: 26:55
    let mut _25: !;                      // in scope 0 at ui/extern/extern-compare-with-return-type.rs:25:5: 26:56

    bb0: {
        _3 = voidret1 as extern "C" fn() (Pointer(ReifyFnPointer)); // scope 0 at ui/extern/extern-compare-with-return-type.rs:18:13: 18:21
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:18:13: 18:21
                                         // + literal: Const { ty: extern "C" fn() {voidret1}, val: Value(<ZST>) }
        _4 = voidret1 as extern "C" fn() (Pointer(ReifyFnPointer)); // scope 0 at ui/extern/extern-compare-with-return-type.rs:18:44: 18:52
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:18:44: 18:52
                                         // + literal: Const { ty: extern "C" fn() {voidret1}, val: Value(<ZST>) }
        _2 = Eq(move _3, move _4);       // scope 0 at ui/extern/extern-compare-with-return-type.rs:18:13: 18:71
        _1 = Not(move _2);               // scope 0 at ui/extern/extern-compare-with-return-type.rs:18:5: 18:72
        switchInt(move _1) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/extern/extern-compare-with-return-type.rs:18:5: 18:72
    }

    bb1: {
        _5 = core::panicking::panic(const "assertion failed: voidret1 as extern \\\"C\\\" fn() == voidret1 as extern \\\"C\\\" fn()"); // scope 0 at ui/extern/extern-compare-with-return-type.rs:18:5: 18:72
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:18:5: 18:72
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _8 = voidret1 as extern "C" fn() (Pointer(ReifyFnPointer)); // scope 0 at ui/extern/extern-compare-with-return-type.rs:19:13: 19:21
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:19:13: 19:21
                                         // + literal: Const { ty: extern "C" fn() {voidret1}, val: Value(<ZST>) }
        _9 = voidret2 as extern "C" fn() (Pointer(ReifyFnPointer)); // scope 0 at ui/extern/extern-compare-with-return-type.rs:19:44: 19:52
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:19:44: 19:52
                                         // + literal: Const { ty: extern "C" fn() {voidret2}, val: Value(<ZST>) }
        _7 = Ne(move _8, move _9);       // scope 0 at ui/extern/extern-compare-with-return-type.rs:19:13: 19:71
        _6 = Not(move _7);               // scope 0 at ui/extern/extern-compare-with-return-type.rs:19:5: 19:72
        switchInt(move _6) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/extern/extern-compare-with-return-type.rs:19:5: 19:72
    }

    bb3: {
        _10 = core::panicking::panic(const "assertion failed: voidret1 as extern \\\"C\\\" fn() != voidret2 as extern \\\"C\\\" fn()"); // scope 0 at ui/extern/extern-compare-with-return-type.rs:19:5: 19:72
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:19:5: 19:72
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _13 = uintret as extern "C" fn() -> usize (Pointer(ReifyFnPointer)); // scope 0 at ui/extern/extern-compare-with-return-type.rs:21:13: 21:20
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:21:13: 21:20
                                         // + literal: Const { ty: extern "C" fn() -> usize {uintret}, val: Value(<ZST>) }
        _14 = uintret as extern "C" fn() -> usize (Pointer(ReifyFnPointer)); // scope 0 at ui/extern/extern-compare-with-return-type.rs:21:52: 21:59
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:21:52: 21:59
                                         // + literal: Const { ty: extern "C" fn() -> usize {uintret}, val: Value(<ZST>) }
        _12 = Eq(move _13, move _14);    // scope 0 at ui/extern/extern-compare-with-return-type.rs:21:13: 21:87
        _11 = Not(move _12);             // scope 0 at ui/extern/extern-compare-with-return-type.rs:21:5: 21:88
        switchInt(move _11) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/extern/extern-compare-with-return-type.rs:21:5: 21:88
    }

    bb5: {
        _15 = core::panicking::panic(const "assertion failed: uintret as extern \\\"C\\\" fn() -> usize == uintret as extern \\\"C\\\" fn() -> usize"); // scope 0 at ui/extern/extern-compare-with-return-type.rs:21:5: 21:88
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:21:5: 21:88
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _18 = uintvoidret as extern "C" fn(usize) (Pointer(ReifyFnPointer)); // scope 0 at ui/extern/extern-compare-with-return-type.rs:23:13: 23:24
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:23:13: 23:24
                                         // + literal: Const { ty: extern "C" fn(usize) {uintvoidret}, val: Value(<ZST>) }
        _19 = uintvoidret as extern "C" fn(usize) (Pointer(ReifyFnPointer)); // scope 0 at ui/extern/extern-compare-with-return-type.rs:23:52: 23:63
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:23:52: 23:63
                                         // + literal: Const { ty: extern "C" fn(usize) {uintvoidret}, val: Value(<ZST>) }
        _17 = Eq(move _18, move _19);    // scope 0 at ui/extern/extern-compare-with-return-type.rs:23:13: 23:87
        _16 = Not(move _17);             // scope 0 at ui/extern/extern-compare-with-return-type.rs:23:5: 23:88
        switchInt(move _16) -> [0: bb8, otherwise: bb7]; // scope 0 at ui/extern/extern-compare-with-return-type.rs:23:5: 23:88
    }

    bb7: {
        _20 = core::panicking::panic(const "assertion failed: uintvoidret as extern \\\"C\\\" fn(usize) == uintvoidret as extern \\\"C\\\" fn(usize)"); // scope 0 at ui/extern/extern-compare-with-return-type.rs:23:5: 23:88
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:23:5: 23:88
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        _23 = uintuintuintuintret as extern "C" fn(usize, usize, usize) -> usize (Pointer(ReifyFnPointer)); // scope 0 at ui/extern/extern-compare-with-return-type.rs:25:13: 25:32
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:25:13: 25:32
                                         // + literal: Const { ty: extern "C" fn(usize, usize, usize) -> usize {uintuintuintuintret}, val: Value(<ZST>) }
        _24 = uintuintuintuintret as extern "C" fn(usize, usize, usize) -> usize (Pointer(ReifyFnPointer)); // scope 0 at ui/extern/extern-compare-with-return-type.rs:26:13: 26:32
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:26:13: 26:32
                                         // + literal: Const { ty: extern "C" fn(usize, usize, usize) -> usize {uintuintuintuintret}, val: Value(<ZST>) }
        _22 = Eq(move _23, move _24);    // scope 0 at ui/extern/extern-compare-with-return-type.rs:25:13: 26:55
        _21 = Not(move _22);             // scope 0 at ui/extern/extern-compare-with-return-type.rs:25:5: 26:56
        switchInt(move _21) -> [0: bb10, otherwise: bb9]; // scope 0 at ui/extern/extern-compare-with-return-type.rs:25:5: 26:56
    }

    bb9: {
        _25 = core::panicking::panic(const "assertion failed: uintuintuintuintret as uintuintuintuintret ==\\n    uintuintuintuintret as uintuintuintuintret"); // scope 0 at ui/extern/extern-compare-with-return-type.rs:25:5: 26:56
                                         // mir::Constant
                                         // + span: ui/extern/extern-compare-with-return-type.rs:25:5: 26:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        return;                          // scope 0 at ui/extern/extern-compare-with-return-type.rs:27:2: 27:2
    }
}
