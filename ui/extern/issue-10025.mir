// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/extern/issue-10025.rs:5:24: 5:24

    bb0: {
        return;                          // scope 0 at ui/extern/issue-10025.rs:5:26: 5:26
    }
}

fn bar() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/extern/issue-10025.rs:6:28: 6:28

    bb0: {
        return;                          // scope 0 at ui/extern/issue-10025.rs:6:30: 6:30
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/extern/issue-10025.rs:8:11: 8:11
    let _1: unsafe extern "C" fn();      // in scope 0 at ui/extern/issue-10025.rs:9:9: 9:11
    scope 1 {
        debug _a => _1;                  // in scope 1 at ui/extern/issue-10025.rs:9:9: 9:11
        let _2: unsafe extern "C" fn();  // in scope 1 at ui/extern/issue-10025.rs:10:9: 10:11
        scope 2 {
            debug _a => _2;              // in scope 2 at ui/extern/issue-10025.rs:10:9: 10:11
        }
    }

    bb0: {
        _1 = foo as unsafe extern "C" fn() (Pointer(ReifyFnPointer)); // scope 0 at ui/extern/issue-10025.rs:9:34: 9:37
                                         // mir::Constant
                                         // + span: ui/extern/issue-10025.rs:9:34: 9:37
                                         // + literal: Const { ty: unsafe extern "C" fn() {foo}, val: Value(<ZST>) }
        _2 = foo as unsafe extern "C" fn() (Pointer(ReifyFnPointer)); // scope 1 at ui/extern/issue-10025.rs:10:38: 10:41
                                         // mir::Constant
                                         // + span: ui/extern/issue-10025.rs:10:38: 10:41
                                         // + literal: Const { ty: unsafe extern "C" fn() {foo}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/extern/issue-10025.rs:11:2: 11:2
    }
}
