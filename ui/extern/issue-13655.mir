// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/extern/issue-13655.rs:7:1: 7:32>::call(_1: &Foo<T>, _2: ()) -> T {
    debug self => _1;
    let mut _0: T;
    scope 1 {
        debug t => _0;
    }

    bb0: {
        _0 = ((*_1).0: T);
        return;
    }
}

fn <impl at ui/extern/issue-13655.rs:15:1: 15:35>::call_mut(_1: &mut Foo<T>, _2: ()) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _3: &Foo<T>;

    bb0: {
        _3 = &(*_1);
        _0 = <Foo<T> as Fn<()>>::call(move _3, const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/extern/issue-13655.rs:21:1: 21:36>::call_once(_1: Foo<T>, _2: ()) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _3: &Foo<T>;

    bb0: {
        _3 = &_1;
        _0 = <Foo<T> as Fn<()>>::call(move _3, const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: u8;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &u8;
    let _10: u8;
    let mut _11: &Foo<u8>;
    let _12: Foo<u8>;
    scope 1 {
        debug t => const 1_u8;
        let mut _13: &[&str; 2];
    }

    bb0: {
        _1 = const 1_u8;
        _13 = const _;
        _4 = _13 as &[&str] (Pointer(Unsize));
        _12 = Foo::<u8>(_1);
        _11 = &_12;
        _10 = <Foo<u8> as Fn<()>>::call(move _11, const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<u8>(_9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = _print(move _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}
