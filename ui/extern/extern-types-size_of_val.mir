// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &A;
    let _2: *const A;
    let mut _3: (&usize, &usize);
    let mut _4: &usize;
    let _5: usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&usize, &usize);
    let mut _16: &usize;
    let _17: usize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: usize;
    let mut _23: usize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _6: &usize;
        let _7: &usize;
        let _18: &usize;
        let _19: &usize;
        let mut _27: &usize;
        let mut _28: &usize;
        scope 3 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 4 {
                debug kind => _12;
            }
        }
        scope 5 {
            debug left_val => _18;
            debug right_val => _19;
            let _24: core::panicking::AssertKind;
            scope 6 {
                debug kind => _24;
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _2 = const 1_usize as *const A (PointerFromExposedAddress);
        _1 = &(*_2);
        _5 = std::mem::size_of_val::<A>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        _28 = const _;
        _3 = (move _4, _28);
        _6 = (_3.0: &usize);
        _7 = (_3.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _17 = align_of_val::<A>(_1) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = &_17;
        _27 = const _;
        _15 = (move _16, _27);
        _18 = (_15.0: &usize);
        _19 = (_15.1: &usize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<usize, usize>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}
