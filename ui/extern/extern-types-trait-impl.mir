// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::foo(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/extern/extern-types-trait-impl.rs:11:12: 11:17
    let mut _0: ();                      // return place in scope 0 at ui/extern/extern-types-trait-impl.rs:11:19: 11:19

    bb0: {
        return;                          // scope 0 at ui/extern/extern-types-trait-impl.rs:11:21: 11:21
    }
}

fn <impl at ui/extern/extern-types-trait-impl.rs:14:1: 14:15>::foo(_1: &A) -> () {
    debug self => _1;                    // in scope 0 at ui/extern/extern-types-trait-impl.rs:15:12: 15:17
    let mut _0: ();                      // return place in scope 0 at ui/extern/extern-types-trait-impl.rs:15:19: 15:19

    bb0: {
        return;                          // scope 0 at ui/extern/extern-types-trait-impl.rs:15:21: 15:21
    }
}

fn assert_foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/extern/extern-types-trait-impl.rs:18:34: 18:34

    bb0: {
        return;                          // scope 0 at ui/extern/extern-types-trait-impl.rs:18:36: 18:36
    }
}

fn use_foo(_1: &dyn Foo) -> () {
    debug x => _1;                       // in scope 0 at ui/extern/extern-types-trait-impl.rs:20:29: 20:30
    let mut _0: ();                      // return place in scope 0 at ui/extern/extern-types-trait-impl.rs:20:42: 20:42
    let _2: ();                          // in scope 0 at ui/extern/extern-types-trait-impl.rs:21:5: 21:12
    let mut _3: &dyn Foo;                // in scope 0 at ui/extern/extern-types-trait-impl.rs:21:5: 21:12

    bb0: {
        _3 = _1;                         // scope 0 at ui/extern/extern-types-trait-impl.rs:21:5: 21:12
        _2 = <dyn Foo as Foo>::foo(move _3) -> bb1; // scope 0 at ui/extern/extern-types-trait-impl.rs:21:5: 21:12
                                         // mir::Constant
                                         // + span: ui/extern/extern-types-trait-impl.rs:21:7: 21:10
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Foo) {<dyn Foo as Foo>::foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/extern/extern-types-trait-impl.rs:22:2: 22:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/extern/extern-types-trait-impl.rs:24:11: 24:11
    let _1: ();                          // in scope 0 at ui/extern/extern-types-trait-impl.rs:25:5: 25:22

    bb0: {
        _1 = assert_foo::<A>() -> bb1;   // scope 0 at ui/extern/extern-types-trait-impl.rs:25:5: 25:22
                                         // mir::Constant
                                         // + span: ui/extern/extern-types-trait-impl.rs:25:5: 25:20
                                         // + literal: Const { ty: fn() {assert_foo::<A>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/extern/extern-types-trait-impl.rs:26:2: 26:2
    }
}
