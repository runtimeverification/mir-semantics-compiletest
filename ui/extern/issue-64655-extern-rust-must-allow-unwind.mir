// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let _4: &std::sync::atomic::AtomicUsize;
    let mut _5: std::sync::atomic::Ordering;
    let _6: &usize;
    let _7: &usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let _15: std::boxed::Box<dyn for<'a, 'b> std::ops::Fn(&'a std::panic::PanicInfo<'b>) + std::marker::Send + std::marker::Sync>;
    let _16: ();
    let mut _17: std::boxed::Box<dyn for<'a, 'b> std::ops::Fn(&'a std::panic::PanicInfo<'b>) + std::marker::Send + std::marker::Sync>;
    let mut _18: std::boxed::Box<[closure@ui/extern/issue-64655-extern-rust-must-allow-unwind.rs:61:35: 61:38]>;
    let mut _21: std::thread::JoinHandle<()>;
    let _22: ();
    let mut _23: std::boxed::Box<dyn for<'a, 'b> std::ops::Fn(&'a std::panic::PanicInfo<'b>) + std::marker::Send + std::marker::Sync>;
    let mut _24: std::boxed::Box<dyn for<'a, 'b> std::ops::Fn(&'a std::panic::PanicInfo<'b>) + std::marker::Send + std::marker::Sync>;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _28: !;
    let mut _29: (&usize, &usize);
    let mut _30: &usize;
    let _31: usize;
    let _32: &std::sync::atomic::AtomicUsize;
    let mut _33: std::sync::atomic::Ordering;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: usize;
    let mut _39: usize;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _44: &usize;
    let mut _45: bool;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug old_hook => _15;
        let _19: std::thread::JoinHandle<()>;
        scope 4 {
            debug handle => _19;
            let _20: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
            scope 5 {
                debug wait => _20;
                let _34: &usize;
                let _35: &usize;
                let mut _43: &usize;
                scope 6 {
                    debug left_val => _34;
                    debug right_val => _35;
                    let _40: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _40;
                    }
                }
            }
        }
    }

    bb0: {
        _45 = const false;
        _4 = const {alloc1: &AtomicUsize};
        _5 = SeqCst;
        _3 = AtomicUsize::fetch_add(_4, const 0_usize, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _44 = const _;
        _1 = (move _2, _44);
        _6 = (_1.0: &usize);
        _7 = (_1.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _45 = const true;
        _15 = take_hook() -> [return: bb4, unwind continue];
    }

    bb4: {
        _18 = Box::<[closure@ui/extern/issue-64655-extern-rust-must-allow-unwind.rs:61:35: 61:38]>::new(const ZeroSized: [closure@ui/extern/issue-64655-extern-rust-must-allow-unwind.rs:61:35: 61:38]) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        _17 = move _18 as std::boxed::Box<dyn for<'a, 'b> std::ops::Fn(&'a std::panic::PanicInfo<'b>) + std::marker::Send + std::marker::Sync> (Pointer(Unsize));
        _16 = set_hook(move _17) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        _19 = spawn::<[closure@ui/extern/issue-64655-extern-rust-must-allow-unwind.rs:63:37: 63:39], ()>(const ZeroSized: [closure@ui/extern/issue-64655-extern-rust-must-allow-unwind.rs:63:37: 63:39]) -> [return: bb7, unwind: bb20];
    }

    bb7: {
        _21 = move _19;
        _20 = JoinHandle::<()>::join(move _21) -> [return: bb8, unwind: bb20];
    }

    bb8: {
        _45 = const false;
        _24 = move _15;
        _23 = move _24 as std::boxed::Box<dyn for<'a, 'b> std::ops::Fn(&'a std::panic::PanicInfo<'b>) + std::marker::Send + std::marker::Sync> (Pointer(Unsize));
        _22 = set_hook(move _23) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        _27 = &_20;
        _26 = Result::<(), Box<dyn Any + Send>>::is_err(move _27) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _28 = core::panicking::panic(const "assertion failed: wait.is_err()") -> bb17;
    }

    bb12: {
        _32 = const {alloc1: &AtomicUsize};
        _33 = SeqCst;
        _31 = AtomicUsize::fetch_add(_32, const 0_usize, move _33) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        _30 = &_31;
        _43 = const _;
        _29 = (move _30, _43);
        _34 = (_29.0: &usize);
        _35 = (_29.1: &usize);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<usize, usize>(move _40, _34, _35, move _42) -> bb17;
    }

    bb15: {
        drop(_20) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        _45 = const false;
        return;
    }

    bb17 (cleanup): {
        drop(_20) -> [return: bb20, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19 (cleanup): {
        drop(_15) -> [return: bb18, unwind terminate];
    }

    bb20 (cleanup): {
        switchInt(_45) -> [0: bb18, otherwise: bb19];
    }
}

alloc1 (static: SHARED, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

static SHARED: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicUsize::new(const 0_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/extern/issue-64655-extern-rust-must-allow-unwind.rs:61:35: 61:38], _2: &PanicInfo<'_>) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main::{closure#1}(_1: [closure@ui/extern/issue-64655-extern-rust-must-allow-unwind.rs:63:37: 63:39]) -> () {
    let mut _0: ();
    let _2: main::{closure#1}::Droppable;
    let _3: ();
    let mut _4: std::option::Option<()>;
    let _5: &str;
    scope 1 {
        debug _guard => const Droppable;
    }

    bb0: {
        _4 = Option::<()>::None;
        _5 = const "???";
        _3 = Option::<()>::expect(move _4, _5) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main::{closure#1}::<impl at ui/extern/issue-64655-extern-rust-must-allow-unwind.rs:65:9: 65:32>::drop(_1: &mut Droppable) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: usize;
    let _3: &std::sync::atomic::AtomicUsize;
    let mut _4: std::sync::atomic::Ordering;

    bb0: {
        _3 = const {alloc1: &AtomicUsize};
        _4 = SeqCst;
        _2 = AtomicUsize::fetch_add(_3, const 1_usize, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc1 (static: SHARED, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}
