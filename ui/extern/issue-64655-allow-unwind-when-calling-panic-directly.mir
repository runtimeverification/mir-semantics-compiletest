// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:32:11: 32:11
    let mut _1: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: usize;                       // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:38:16: 38:53
    let mut _4: &core::sync::atomic::AtomicUsize; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:38:16: 38:53
    let _5: &core::sync::atomic::AtomicUsize; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:38:16: 38:22
    let mut _6: core::sync::atomic::Ordering; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:38:36: 38:52
    let mut _7: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _8: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _22: std::boxed::Box<dyn for<'a, 'b> core::ops::Fn(&'a core::panic::PanicInfo<'b>) + core::marker::Send + core::marker::Sync>; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:40:9: 40:17
    let _23: ();                         // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:5: 42:45
    let mut _24: std::boxed::Box<dyn for<'a, 'b> core::ops::Fn(&'a core::panic::PanicInfo<'b>) + core::marker::Send + core::marker::Sync>; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:26: 42:44
    let mut _25: std::boxed::Box<[closure@ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:35: 42:38]>; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:26: 42:44
    let mut _26: [closure@ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:35: 42:38]; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:35: 42:42
    let mut _28: [closure@ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:44:37: 44:39]; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:44:37: 54:6
    let mut _30: std::thread::JoinHandle<()>; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:56:16: 56:22
    let _31: ();                         // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:59:5: 59:35
    let mut _32: std::boxed::Box<dyn for<'a, 'b> core::ops::Fn(&'a core::panic::PanicInfo<'b>) + core::marker::Send + core::marker::Sync>; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:59:26: 59:34
    let mut _33: std::boxed::Box<dyn for<'a, 'b> core::ops::Fn(&'a core::panic::PanicInfo<'b>) + core::marker::Send + core::marker::Sync>; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:59:26: 59:34
    let mut _34: bool;                   // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:61:5: 61:27
    let mut _35: bool;                   // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:61:13: 61:26
    let mut _36: &core::result::Result<(), std::boxed::Box<dyn core::any::Any + core::marker::Send>>; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:61:13: 61:26
    let mut _37: !;                      // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:61:5: 61:27
    let mut _38: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _39: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _40: usize;                      // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:63:16: 63:53
    let mut _41: &core::sync::atomic::AtomicUsize; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:63:16: 63:53
    let _42: &core::sync::atomic::AtomicUsize; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:63:16: 63:22
    let mut _43: core::sync::atomic::Ordering; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:63:36: 63:52
    let mut _44: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _48: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _49: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _50: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _52: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _53: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _54: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _55: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _56: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _57: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _58: core::option::Option<core::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _60: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _61: bool;                   // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:64:1: 64:2
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug old_hook => _22;           // in scope 3 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:40:9: 40:17
        let _27: std::thread::JoinHandle<()>; // in scope 3 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:44:9: 44:15
        scope 4 {
            debug handle => _27;         // in scope 4 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:44:9: 44:15
            let _29: core::result::Result<(), std::boxed::Box<dyn core::any::Any + core::marker::Send>>; // in scope 4 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:56:9: 56:13
            scope 5 {
                debug wait => _29;       // in scope 5 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:56:9: 56:13
                let _45: &usize;         // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _46: &usize;         // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _59: &usize;     // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 6 {
                    debug left_val => _45; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _46; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _51: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _51; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _61 = const false;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:9: 48:10
        _5 = const {alloc1: &AtomicUsize}; // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:38:16: 38:22
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _4 = _5;                         // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:38:16: 38:53
        _6 = const SeqCst;               // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:38:36: 38:52
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:38:36: 38:52
                                         // + literal: Const { ty: core::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _3 = AtomicUsize::fetch_add(move _4, const 0_usize, move _6) -> bb1; // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:38:16: 38:53
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:38:23: 38:32
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _60 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _7 = _60;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _7);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_1.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_1.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 0_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = assert_failed::<usize, usize>(move _16, move _17, move _19, move _21); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb3: {
        _61 = const true;                // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:40:20: 40:43
        _22 = take_hook() -> bb4;        // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:40:20: 40:43
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:40:20: 40:41
                                         // + literal: Const { ty: fn() -> Box<(dyn for<'a, 'b> Fn(&'a PanicInfo<'b>) + Send + Sync + 'static)> {take_hook}, val: Value(<ZST>) }
    }

    bb4: {
        _25 = Box::<[closure@ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:35: 42:38]>::new(move _26) -> [return: bb5, unwind: bb20]; // scope 3 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:26: 42:44
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:26: 42:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([closure@ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:35: 42:38]) -> Box<[closure@ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:35: 42:38]> {Box::<[closure@ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:35: 42:38]>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _24 = move _25 as std::boxed::Box<dyn for<'a, 'b> core::ops::Fn(&'a core::panic::PanicInfo<'b>) + core::marker::Send + core::marker::Sync> (Pointer(Unsize)); // scope 3 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:26: 42:44
        _23 = set_hook(move _24) -> [return: bb6, unwind: bb20]; // scope 3 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:5: 42:45
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:5: 42:25
                                         // + literal: Const { ty: fn(Box<(dyn for<'a, 'b> Fn(&'a PanicInfo<'b>) + Send + Sync + 'static)>) {set_hook}, val: Value(<ZST>) }
    }

    bb6: {
        _27 = spawn::<[closure@ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:44:37: 44:39], ()>(move _28) -> [return: bb7, unwind: bb20]; // scope 3 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:44:18: 54:7
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:44:18: 44:36
                                         // + literal: Const { ty: fn([closure@ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:44:37: 44:39]) -> JoinHandle<()> {spawn::<[closure@ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:44:37: 44:39], ()>}, val: Value(<ZST>) }
    }

    bb7: {
        _30 = move _27;                  // scope 4 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:56:16: 56:22
        _29 = JoinHandle::<()>::join(move _30) -> [return: bb8, unwind: bb20]; // scope 4 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:56:16: 56:29
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:56:23: 56:27
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb8: {
        _61 = const false;               // scope 5 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:59:26: 59:34
        _33 = move _22;                  // scope 5 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:59:26: 59:34
        _32 = move _33 as std::boxed::Box<dyn for<'a, 'b> core::ops::Fn(&'a core::panic::PanicInfo<'b>) + core::marker::Send + core::marker::Sync> (Pointer(Unsize)); // scope 5 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:59:26: 59:34
        _31 = set_hook(move _32) -> [return: bb9, unwind: bb17]; // scope 5 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:59:5: 59:35
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:59:5: 59:25
                                         // + literal: Const { ty: fn(Box<(dyn for<'a, 'b> Fn(&'a PanicInfo<'b>) + Send + Sync + 'static)>) {set_hook}, val: Value(<ZST>) }
    }

    bb9: {
        _36 = &_29;                      // scope 5 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:61:13: 61:26
        _35 = Result::<(), Box<dyn Any + Send>>::is_err(move _36) -> [return: bb10, unwind: bb17]; // scope 5 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:61:13: 61:26
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:61:18: 61:24
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb10: {
        _34 = Not(move _35);             // scope 5 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:61:5: 61:27
        switchInt(move _34) -> [0: bb12, otherwise: bb11]; // scope 5 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:61:5: 61:27
    }

    bb11: {
        _37 = panic(const "assertion failed: wait.is_err()") -> bb17; // scope 5 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:61:5: 61:27
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:61:5: 61:27
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _42 = const {alloc1: &AtomicUsize}; // scope 5 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:63:16: 63:22
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:63:16: 63:22
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _41 = _42;                       // scope 5 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:63:16: 63:53
        _43 = const SeqCst;              // scope 5 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:63:36: 63:52
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:63:36: 63:52
                                         // + literal: Const { ty: core::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _40 = AtomicUsize::fetch_add(move _41, const 0_usize, move _43) -> [return: bb13, unwind: bb17]; // scope 5 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:63:16: 63:53
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:63:23: 63:32
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb13: {
        _39 = &_40;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _59 = const _;                   // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _44 = _59;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _38 = (move _39, move _44);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _45 = (_38.0: &usize);           // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _46 = (_38.1: &usize);           // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _49 = (*_45);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _50 = const 1_usize;             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _48 = Eq(move _49, move _50);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _47 = Not(move _48);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _47) -> [0: bb15, otherwise: bb14]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _51 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _53 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _55 = _45;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _54 = _55;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _46;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _56 = _57;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _52 = assert_failed::<usize, usize>(move _53, move _54, move _56, move _58) -> bb17; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb15: {
        drop(_29) -> [return: bb16, unwind: bb20]; // scope 4 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:64:1: 64:2
    }

    bb16: {
        _61 = const false;               // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:64:1: 64:2
        return;                          // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:64:2: 64:2
    }

    bb17 (cleanup): {
        drop(_29) -> bb20;               // scope 4 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:64:1: 64:2
    }

    bb18 (cleanup): {
        resume;                          // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:32:1: 64:2
    }

    bb19 (cleanup): {
        drop(_22) -> bb18;               // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:64:1: 64:2
    }

    bb20 (cleanup): {
        switchInt(_61) -> [0: bb18, otherwise: bb19]; // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:64:1: 64:2
    }
}

alloc1 (static: SHARED, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:63:55: 63:56

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:63:55: 63:56
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:38:55: 38:56

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:38:55: 38:56
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

static SHARED: AtomicUsize = {
    let mut _0: core::sync::atomic::AtomicUsize; // return place in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:36:20: 36:31

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:36:34: 36:53
        _0 = AtomicUsize::new(const 0_usize) -> bb1; // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:36:34: 36:53
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:36:34: 36:50
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:36:5: 36:54
    }
}

fn main::{closure#0}(_1: &[closure@ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:35: 42:38], _2: &PanicInfo<'_>) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:39: 42:39

    bb0: {
        return;                          // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:42:42: 42:42
    }
}

fn main::{closure#1}(_1: [closure@ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:44:37: 44:39]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:44:40: 44:40
    let _2: main::{closure#1}::Droppable; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:52:13: 52:19
    let _3: !;                           // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:53:9: 53:38
    scope 1 {
        debug _guard => _2;              // in scope 1 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:52:13: 52:19
    }

    bb0: {
        _3 = panic(const "???") -> bb1;  // scope 1 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:53:9: 53:38
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:53:9: 53:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:53:32: 53:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_2) -> bb2;                 // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:54:5: 54:6
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:44:37: 54:6
    }
}

fn main::{closure#1}::<impl at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:46:9: 46:32>::drop(_1: &mut Droppable) -> () {
    debug self => _1;                    // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:47:21: 47:30
    let mut _0: ();                      // return place in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:47:32: 47:32
    let _2: usize;                       // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:48:17: 48:54
    let mut _3: &core::sync::atomic::AtomicUsize; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:48:17: 48:54
    let _4: &core::sync::atomic::AtomicUsize; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:48:17: 48:23
    let mut _5: core::sync::atomic::Ordering; // in scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:48:37: 48:53

    bb0: {
        _4 = const {alloc1: &AtomicUsize}; // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:48:17: 48:23
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:48:17: 48:23
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:48:17: 48:54
        _5 = const SeqCst;               // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:48:37: 48:53
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:48:37: 48:53
                                         // + literal: Const { ty: core::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _2 = AtomicUsize::fetch_add(move _3, const 1_usize, move _5) -> bb1; // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:48:17: 48:54
                                         // mir::Constant
                                         // + span: ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:48:24: 48:33
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, core::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/extern/issue-64655-allow-unwind-when-calling-panic-directly.rs:49:14: 49:14
    }
}

alloc1 (static: SHARED, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}
