// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/empty-allocation-rvalue-non-null.rs:6:15: 6:15
    let _1: ();                          // in scope 0 at ui/empty-allocation-rvalue-non-null.rs:7:9: 7:10
    let mut _2: std::boxed::Box<()>;     // in scope 0 at ui/empty-allocation-rvalue-non-null.rs:7:14: 7:26
    let mut _3: ();                      // in scope 0 at ui/empty-allocation-rvalue-non-null.rs:7:23: 7:25
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/empty-allocation-rvalue-non-null.rs:7:9: 7:10
    }

    bb0: {
        _2 = Box::<()>::new(move _3) -> bb1; // scope 0 at ui/empty-allocation-rvalue-non-null.rs:7:14: 7:26
                                         // mir::Constant
                                         // + span: ui/empty-allocation-rvalue-non-null.rs:7:14: 7:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(()) -> Box<()> {Box::<()>::new}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at ui/empty-allocation-rvalue-non-null.rs:7:26: 7:27
    }

    bb2: {
        return;                          // scope 0 at ui/empty-allocation-rvalue-non-null.rs:8:2: 8:2
    }
}
