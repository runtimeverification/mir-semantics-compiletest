// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<i32>;
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[i32; 3]>;
    let mut _7: bool;
    let mut _8: &std::option::Option<std::ffi::OsString>;
    let _9: std::option::Option<std::ffi::OsString>;
    let mut _10: !;
    let mut _11: *const [i32; 3];
    let mut _12: *const ();
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    scope 1 {
        debug _v => _1;
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([i32; 3]);
        _4 = AlignOf([i32; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [i32; 3]);
        _11 = (((_6.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _12 = _11 as *const () (PtrToPtr);
        _13 = _12 as usize (Transmute);
        _14 = AlignOf(i32);
        _15 = Sub(_14, const 1_usize);
        _16 = BitAnd(_13, _15);
        _17 = Eq(_16, const 0_usize);
        assert(_17, "misaligned pointer dereference: address must be a multiple of {} but is {}", _14, _13) -> [success: bb12, unwind unreachable];
    }

    bb2: {
        _9 = var_os::<&str>(const "IS_TEST") -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _8 = &_9;
        _7 = Option::<OsString>::is_some(move _8) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        drop(_9) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        switchInt(move _7) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _10 = begin_panic::<&str>(const "explicit panic") -> bb10;
    }

    bb7: {
        drop(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_9) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        (*_11) = [const 1_i32, const 2_i32, const 3_i32];
        _2 = move _6 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

fn double() -> () {
    let mut _0: ();
    let _1: double::Double;
    let _2: !;
    scope 1 {
        debug _d => const Double;
    }

    bb0: {
        _2 = begin_panic::<&str>(const "once") -> bb1;
    }

    bb1 (cleanup): {
        drop(_1) -> [return: bb2, unwind terminate];
    }

    bb2 (cleanup): {
        resume;
    }
}

fn double::<impl at ui/backtrace.rs:27:5: 27:25>::drop(_1: &mut Double) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: !;

    bb0: {
        _2 = begin_panic::<&str>(const "twice") -> unwind continue;
    }
}

fn template(_1: &str) -> Command {
    debug me => _1;
    let mut _0: std::process::Command;
    let mut _2: std::process::Command;
    let _3: &mut std::process::Command;
    let mut _4: &mut std::process::Command;
    let mut _5: &mut std::process::Command;
    let mut _6: &mut std::process::Command;
    let mut _7: &mut std::process::Command;
    let mut _8: &mut std::process::Command;
    let mut _9: std::process::Stdio;
    let mut _10: std::process::Stdio;
    scope 1 {
        debug m => _2;
    }

    bb0: {
        _2 = Command::new::<&str>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &mut _2;
        _7 = Command::env::<&str, &str>(move _8, const "IS_TEST", const "1") -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _6 = _7;
        _9 = Stdio::piped() -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _5 = Command::stdout::<Stdio>(move _6, move _9) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _4 = _5;
        _10 = Stdio::piped() -> [return: bb5, unwind: bb7];
    }

    bb5: {
        _3 = Command::stderr::<Stdio>(move _4, move _10) -> [return: bb6, unwind: bb7];
    }

    bb6: {
        _0 = move _2;
        return;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn expected(_1: &str) -> String {
    debug fn_name => _1;
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &&str;
    let mut _10: &[&str; 1];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (Pointer(Unsize));
        _9 = &_1;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = format(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = move _2;
        return;
    }
}

promoted[0] in expected: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const " backtrace::"];
        _0 = &_1;
        return;
    }
}

fn contains_verbose_expected(_1: &str, _2: &str) -> bool {
    debug s => _1;
    debug fn_name => _2;
    let mut _0: bool;
    let _3: &str;
    let _5: std::string::String;
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &&str;
    let mut _14: &mut std::str::MatchIndices<'_, &str>;
    let mut _15: std::str::MatchIndices<'_, &str>;
    let mut _16: &str;
    let mut _17: &str;
    let mut _18: [closure@ui/backtrace.rs:55:33: 55:41];
    let mut _19: &&str;
    let mut _20: &&str;
    let mut _21: &&std::string::String;
    scope 1 {
        debug prefix => const " backtrace";
        let _4: &std::string::String;
        let _6: std::string::String;
        let mut _22: &[&str; 1];
        scope 2 {
            debug suffix => _4;
        }
        scope 3 {
            debug res => _6;
        }
    }

    bb0: {
        _3 = const " backtrace";
        _22 = const _;
        _8 = _22 as &[&str] (Pointer(Unsize));
        _13 = &_2;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_13) -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = format(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = move _6;
        _4 = &_5;
        _16 = _1;
        _17 = _3;
        _15 = core::str::<impl str>::match_indices::<'_, &str>(move _16, move _17) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _14 = &mut _15;
        _19 = &_1;
        _20 = &_3;
        _21 = &_4;
        _18 = [closure@ui/backtrace.rs:55:33: 55:41] { s: move _19, prefix: move _20, suffix: move _21 };
        _0 = <MatchIndices<'_, &str> as Iterator>::any::<[closure@ui/backtrace.rs:55:33: 55:41]>(move _14, move _18) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_5) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_5) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

promoted[0] in contains_verbose_expected: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "::"];
        _0 = &_1;
        return;
    }
}

fn contains_verbose_expected::{closure#0}(_1: &mut [closure@ui/backtrace.rs:55:33: 55:41], _2: (usize, &str)) -> bool {
    debug s => (*((*_1).0: &&str));
    debug prefix => (*((*_1).1: &&str));
    debug suffix => (*((*_1).2: &&std::string::String));
    let mut _0: bool;
    let _3: usize;
    let mut _4: &str;
    let _5: &str;
    let mut _6: &str;
    let _7: &str;
    let mut _8: &str;
    let _9: &str;
    let mut _10: &str;
    let _11: &str;
    let mut _12: std::ops::RangeFrom<usize>;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: &std::string::String;
    let mut _16: &&str;
    let mut _17: &str;
    let mut _18: &&str;
    let mut _19: &str;
    let mut _20: &&std::string::String;
    scope 1 {
        debug i => _3;
    }

    bb0: {
        _3 = (_2.0: usize);
        _16 = deref_copy ((*_1).0: &&str);
        _17 = deref_copy (*_16);
        _18 = deref_copy ((*_1).1: &&str);
        _19 = deref_copy (*_18);
        _14 = core::str::<impl str>::len(_19) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = Add(_3, move _14);
        _12 = RangeFrom::<usize> { start: move _13 };
        _11 = <str as Index<RangeFrom<usize>>>::index(_17, move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = _11;
        _9 = core::str::<impl str>::trim_start_matches::<'_, char>(move _10, const '[') -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = _9;
        _7 = core::str::<impl str>::trim_start_matches::<'_, fn(char) -> bool {char::methods::<impl char>::is_alphanumeric}>(move _8, char::methods::<impl char>::is_alphanumeric) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = _7;
        _5 = core::str::<impl str>::trim_start_matches::<'_, char>(move _6, const ']') -> [return: bb5, unwind continue];
    }

    bb5: {
        _4 = _5;
        _20 = deref_copy ((*_1).2: &&std::string::String);
        _15 = (*_20);
        _0 = core::str::<impl str>::starts_with::<'_, &String>(move _4, move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn runtest(_1: &str) -> () {
    debug me => _1;
    let mut _0: ();
    let _2: std::process::Child;
    let mut _3: std::result::Result<std::process::Child, std::io::Error>;
    let mut _4: &mut std::process::Command;
    let mut _5: &mut std::process::Command;
    let mut _6: &mut std::process::Command;
    let mut _7: &mut std::process::Command;
    let mut _8: &mut std::process::Command;
    let mut _9: std::process::Command;
    let mut _11: std::result::Result<std::process::Output, std::io::Error>;
    let mut _12: std::process::Child;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: &std::process::ExitStatus;
    let mut _17: !;
    let mut _19: std::result::Result<&str, std::str::Utf8Error>;
    let mut _20: &[u8];
    let _21: &[u8];
    let _22: &std::vec::Vec<u8>;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: &str;
    let mut _27: bool;
    let mut _28: &str;
    let mut _29: &std::string::String;
    let _30: std::string::String;
    let _31: &str;
    let _32: !;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let mut _35: &[core::fmt::rt::Argument<'_>];
    let _36: &[core::fmt::rt::Argument<'_>; 1];
    let _37: [core::fmt::rt::Argument<'_>; 1];
    let mut _38: core::fmt::rt::Argument<'_>;
    let _39: &&str;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: &str;
    let _43: !;
    let mut _45: std::result::Result<std::process::Child, std::io::Error>;
    let mut _46: &mut std::process::Command;
    let mut _47: &mut std::process::Command;
    let mut _48: &mut std::process::Command;
    let mut _49: &mut std::process::Command;
    let mut _50: &mut std::process::Command;
    let mut _51: std::process::Command;
    let mut _53: std::result::Result<std::process::Output, std::io::Error>;
    let mut _54: std::process::Child;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: &std::process::ExitStatus;
    let mut _59: !;
    let mut _61: std::result::Result<&str, std::str::Utf8Error>;
    let mut _62: &[u8];
    let _63: &[u8];
    let _64: &std::vec::Vec<u8>;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: &str;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: &str;
    let mut _73: &std::string::String;
    let _74: std::string::String;
    let _75: &str;
    let _76: !;
    let mut _77: std::fmt::Arguments<'_>;
    let mut _78: &[&str];
    let mut _79: &[core::fmt::rt::Argument<'_>];
    let _80: &[core::fmt::rt::Argument<'_>; 1];
    let _81: [core::fmt::rt::Argument<'_>; 1];
    let mut _82: core::fmt::rt::Argument<'_>;
    let _83: &&str;
    let mut _85: std::result::Result<std::process::Child, std::io::Error>;
    let mut _86: &mut std::process::Command;
    let mut _87: &mut std::process::Command;
    let mut _88: &mut std::process::Command;
    let mut _89: &mut std::process::Command;
    let mut _90: &mut std::process::Command;
    let mut _91: std::process::Command;
    let mut _93: std::result::Result<std::process::Output, std::io::Error>;
    let mut _94: std::process::Child;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: &std::process::ExitStatus;
    let mut _99: !;
    let mut _101: std::result::Result<&str, std::str::Utf8Error>;
    let mut _102: &[u8];
    let _103: &[u8];
    let _104: &std::vec::Vec<u8>;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: &str;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: &str;
    let _113: !;
    let mut _114: std::fmt::Arguments<'_>;
    let mut _115: &[&str];
    let mut _116: &[core::fmt::rt::Argument<'_>];
    let _117: &[core::fmt::rt::Argument<'_>; 1];
    let _118: [core::fmt::rt::Argument<'_>; 1];
    let mut _119: core::fmt::rt::Argument<'_>;
    let _120: &&str;
    let mut _122: std::result::Result<std::process::Child, std::io::Error>;
    let mut _123: &mut std::process::Command;
    let mut _124: &mut std::process::Command;
    let mut _125: &mut std::process::Command;
    let mut _126: std::process::Command;
    let mut _128: std::result::Result<std::process::Output, std::io::Error>;
    let mut _129: std::process::Child;
    let mut _130: bool;
    let mut _131: bool;
    let mut _132: bool;
    let mut _133: &std::process::ExitStatus;
    let mut _134: !;
    let mut _136: std::result::Result<&str, std::str::Utf8Error>;
    let mut _137: &[u8];
    let _138: &[u8];
    let _139: &std::vec::Vec<u8>;
    let mut _140: bool;
    let mut _141: bool;
    let mut _142: bool;
    let mut _143: &str;
    let mut _144: bool;
    let mut _145: &str;
    let _146: &str;
    let _147: !;
    let mut _148: std::fmt::Arguments<'_>;
    let mut _149: &[&str];
    let mut _150: &[core::fmt::rt::Argument<'_>];
    let _151: &[core::fmt::rt::Argument<'_>; 1];
    let _152: [core::fmt::rt::Argument<'_>; 1];
    let mut _153: core::fmt::rt::Argument<'_>;
    let _154: &&str;
    let mut _156: std::result::Result<std::process::Child, std::io::Error>;
    let mut _157: &mut std::process::Command;
    let mut _158: &mut std::process::Command;
    let mut _159: &mut std::process::Command;
    let mut _160: &mut std::process::Command;
    let mut _161: &mut std::process::Command;
    let mut _162: std::process::Command;
    let mut _164: std::result::Result<std::process::Output, std::io::Error>;
    let mut _165: std::process::Child;
    let mut _166: bool;
    let mut _167: bool;
    let mut _168: bool;
    let mut _169: &std::process::ExitStatus;
    let mut _170: !;
    let mut _172: std::result::Result<&str, std::str::Utf8Error>;
    let mut _173: &[u8];
    let _174: &[u8];
    let _175: &std::vec::Vec<u8>;
    let mut _177: std::ops::Range<i32>;
    let mut _178: std::ops::Range<i32>;
    let mut _180: std::option::Option<i32>;
    let mut _181: &mut std::ops::Range<i32>;
    let mut _182: isize;
    let mut _183: usize;
    let mut _184: usize;
    let mut _185: std::option::Option<usize>;
    let mut _186: &str;
    let _187: &str;
    let mut _188: &str;
    let mut _189: std::ops::RangeFrom<usize>;
    let mut _190: usize;
    let mut _191: usize;
    let mut _192: bool;
    let mut _193: bool;
    let mut _194: &std::option::Option<usize>;
    let _195: std::option::Option<usize>;
    let mut _196: &str;
    let _197: &str;
    let mut _198: &str;
    let mut _199: std::ops::RangeFrom<usize>;
    let mut _200: usize;
    let mut _201: usize;
    let _202: !;
    let mut _203: std::fmt::Arguments<'_>;
    let mut _204: &[&str];
    let mut _205: &[core::fmt::rt::Argument<'_>];
    let _206: &[core::fmt::rt::Argument<'_>; 1];
    let _207: [core::fmt::rt::Argument<'_>; 1];
    let mut _208: core::fmt::rt::Argument<'_>;
    let _209: &&str;
    let mut _215: bool;
    let mut _216: bool;
    let mut _217: bool;
    let mut _218: bool;
    let mut _219: bool;
    scope 1 {
        debug p => _2;
        let _10: std::process::Output;
        scope 2 {
            debug out => _10;
            let _18: &str;
            scope 3 {
                debug s => _18;
                let _44: std::process::Child;
                let mut _210: &[&str; 1];
                scope 4 {
                    debug p => _44;
                    let _52: std::process::Output;
                    scope 5 {
                        debug out => _52;
                        let _60: &str;
                        scope 6 {
                            debug s => _60;
                            let _84: std::process::Child;
                            let mut _211: &[&str; 1];
                            scope 7 {
                                debug p => _84;
                                let _92: std::process::Output;
                                scope 8 {
                                    debug out => _92;
                                    let _100: &str;
                                    scope 9 {
                                        debug s => _100;
                                        let _121: std::process::Child;
                                        let mut _212: &[&str; 1];
                                        scope 10 {
                                            debug p => _121;
                                            let _127: std::process::Output;
                                            scope 11 {
                                                debug out => _127;
                                                let _135: &str;
                                                scope 12 {
                                                    debug s => _135;
                                                    let _155: std::process::Child;
                                                    let mut _213: &[&str; 1];
                                                    scope 13 {
                                                        debug p => _155;
                                                        let _163: std::process::Output;
                                                        scope 14 {
                                                            debug out => _163;
                                                            let _171: &str;
                                                            scope 15 {
                                                                debug s => _171;
                                                                let mut _176: usize;
                                                                scope 16 {
                                                                    debug i => _176;
                                                                    let mut _179: std::ops::Range<i32>;
                                                                    let mut _214: &[&str; 1];
                                                                    scope 17 {
                                                                        debug iter => _179;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _219 = const false;
        _218 = const false;
        _217 = const false;
        _216 = const false;
        _215 = const false;
        _9 = template(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &mut _9;
        _7 = Command::arg::<&str>(move _8, const "fail") -> [return: bb2, unwind: bb145];
    }

    bb2: {
        _6 = _7;
        _5 = Command::env::<&str, &str>(move _6, const "RUST_BACKTRACE", const "1") -> [return: bb3, unwind: bb145];
    }

    bb3: {
        _4 = _5;
        _3 = Command::spawn(move _4) -> [return: bb4, unwind: bb145];
    }

    bb4: {
        _2 = Result::<Child, std::io::Error>::unwrap(move _3) -> [return: bb5, unwind: bb145];
    }

    bb5: {
        _219 = const true;
        drop(_9) -> [return: bb6, unwind: bb156];
    }

    bb6: {
        _219 = const false;
        _12 = move _2;
        _11 = Child::wait_with_output(move _12) -> [return: bb7, unwind: bb156];
    }

    bb7: {
        _10 = Result::<Output, std::io::Error>::unwrap(move _11) -> [return: bb8, unwind: bb156];
    }

    bb8: {
        _16 = &(_10.0: std::process::ExitStatus);
        _15 = ExitStatus::success(move _16) -> [return: bb9, unwind: bb144];
    }

    bb9: {
        _14 = Not(move _15);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _17 = core::panicking::panic(const "assertion failed: !out.status.success()") -> bb144;
    }

    bb11: {
        _22 = &(_10.2: std::vec::Vec<u8>);
        _21 = <Vec<u8> as Deref>::deref(_22) -> [return: bb12, unwind: bb144];
    }

    bb12: {
        _20 = _21;
        _19 = from_utf8(move _20) -> [return: bb13, unwind: bb144];
    }

    bb13: {
        _18 = Result::<&str, Utf8Error>::unwrap(move _19) -> [return: bb14, unwind: bb144];
    }

    bb14: {
        _26 = _18;
        _25 = core::str::<impl str>::contains::<'_, &str>(move _26, const "stack backtrace") -> [return: bb18, unwind: bb144];
    }

    bb15: {
        _24 = const false;
        goto -> bb17;
    }

    bb16: {
        _28 = _18;
        _31 = const "foo";
        _30 = expected(_31) -> [return: bb19, unwind: bb144];
    }

    bb17: {
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb25, otherwise: bb22];
    }

    bb18: {
        switchInt(move _25) -> [0: bb15, otherwise: bb16];
    }

    bb19: {
        _29 = &_30;
        _27 = core::str::<impl str>::contains::<'_, &String>(move _28, move _29) -> [return: bb20, unwind: bb143];
    }

    bb20: {
        drop(_30) -> [return: bb21, unwind: bb144];
    }

    bb21: {
        _24 = move _27;
        goto -> bb17;
    }

    bb22: {
        _210 = const _;
        _34 = _210 as &[&str] (Pointer(Unsize));
        _39 = &_18;
        _38 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_39) -> [return: bb23, unwind: bb144];
    }

    bb23: {
        _37 = [move _38];
        _36 = &_37;
        _35 = _36 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _33 = Arguments::<'_>::new_v1(move _34, move _35) -> [return: bb24, unwind: bb144];
    }

    bb24: {
        _32 = panic_fmt(move _33) -> bb144;
    }

    bb25: {
        _42 = _18;
        _41 = core::str::<impl str>::contains::<'_, &str>(move _42, const " 0:") -> [return: bb26, unwind: bb144];
    }

    bb26: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _43 = begin_panic::<&str>(const "the frame number should start at 0") -> bb144;
    }

    bb28: {
        _51 = template(_1) -> [return: bb29, unwind: bb144];
    }

    bb29: {
        _50 = &mut _51;
        _49 = Command::arg::<&str>(move _50, const "fail") -> [return: bb30, unwind: bb142];
    }

    bb30: {
        _48 = _49;
        _47 = Command::env_remove::<&str>(move _48, const "RUST_BACKTRACE") -> [return: bb31, unwind: bb142];
    }

    bb31: {
        _46 = _47;
        _45 = Command::spawn(move _46) -> [return: bb32, unwind: bb142];
    }

    bb32: {
        _44 = Result::<Child, std::io::Error>::unwrap(move _45) -> [return: bb33, unwind: bb142];
    }

    bb33: {
        _218 = const true;
        drop(_51) -> [return: bb34, unwind: bb154];
    }

    bb34: {
        _218 = const false;
        _54 = move _44;
        _53 = Child::wait_with_output(move _54) -> [return: bb35, unwind: bb154];
    }

    bb35: {
        _52 = Result::<Output, std::io::Error>::unwrap(move _53) -> [return: bb36, unwind: bb154];
    }

    bb36: {
        _58 = &(_52.0: std::process::ExitStatus);
        _57 = ExitStatus::success(move _58) -> [return: bb37, unwind: bb141];
    }

    bb37: {
        _56 = Not(move _57);
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _59 = core::panicking::panic(const "assertion failed: !out.status.success()") -> bb141;
    }

    bb39: {
        _64 = &(_52.2: std::vec::Vec<u8>);
        _63 = <Vec<u8> as Deref>::deref(_64) -> [return: bb40, unwind: bb141];
    }

    bb40: {
        _62 = _63;
        _61 = from_utf8(move _62) -> [return: bb41, unwind: bb141];
    }

    bb41: {
        _60 = Result::<&str, Utf8Error>::unwrap(move _61) -> [return: bb42, unwind: bb141];
    }

    bb42: {
        _69 = _60;
        _68 = core::str::<impl str>::contains::<'_, &str>(move _69, const "stack backtrace") -> [return: bb46, unwind: bb141];
    }

    bb43: {
        _66 = const false;
        goto -> bb45;
    }

    bb44: {
        _72 = _60;
        _75 = const "foo";
        _74 = expected(_75) -> [return: bb47, unwind: bb141];
    }

    bb45: {
        _65 = Not(move _66);
        switchInt(move _65) -> [0: bb53, otherwise: bb50];
    }

    bb46: {
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb43, otherwise: bb44];
    }

    bb47: {
        _73 = &_74;
        _71 = core::str::<impl str>::contains::<'_, &String>(move _72, move _73) -> [return: bb48, unwind: bb140];
    }

    bb48: {
        _70 = Not(move _71);
        drop(_74) -> [return: bb49, unwind: bb141];
    }

    bb49: {
        _66 = move _70;
        goto -> bb45;
    }

    bb50: {
        _211 = const _;
        _78 = _211 as &[&str] (Pointer(Unsize));
        _83 = &_60;
        _82 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_83) -> [return: bb51, unwind: bb141];
    }

    bb51: {
        _81 = [move _82];
        _80 = &_81;
        _79 = _80 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _77 = Arguments::<'_>::new_v1(move _78, move _79) -> [return: bb52, unwind: bb141];
    }

    bb52: {
        _76 = panic_fmt(move _77) -> bb141;
    }

    bb53: {
        _91 = template(_1) -> [return: bb54, unwind: bb141];
    }

    bb54: {
        _90 = &mut _91;
        _89 = Command::arg::<&str>(move _90, const "fail") -> [return: bb55, unwind: bb139];
    }

    bb55: {
        _88 = _89;
        _87 = Command::env::<&str, &str>(move _88, const "RUST_BACKTRACE", const "0") -> [return: bb56, unwind: bb139];
    }

    bb56: {
        _86 = _87;
        _85 = Command::spawn(move _86) -> [return: bb57, unwind: bb139];
    }

    bb57: {
        _84 = Result::<Child, std::io::Error>::unwrap(move _85) -> [return: bb58, unwind: bb139];
    }

    bb58: {
        _217 = const true;
        drop(_91) -> [return: bb59, unwind: bb152];
    }

    bb59: {
        _217 = const false;
        _94 = move _84;
        _93 = Child::wait_with_output(move _94) -> [return: bb60, unwind: bb152];
    }

    bb60: {
        _92 = Result::<Output, std::io::Error>::unwrap(move _93) -> [return: bb61, unwind: bb152];
    }

    bb61: {
        _98 = &(_92.0: std::process::ExitStatus);
        _97 = ExitStatus::success(move _98) -> [return: bb62, unwind: bb138];
    }

    bb62: {
        _96 = Not(move _97);
        _95 = Not(move _96);
        switchInt(move _95) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _99 = core::panicking::panic(const "assertion failed: !out.status.success()") -> bb138;
    }

    bb64: {
        _104 = &(_92.2: std::vec::Vec<u8>);
        _103 = <Vec<u8> as Deref>::deref(_104) -> [return: bb65, unwind: bb138];
    }

    bb65: {
        _102 = _103;
        _101 = from_utf8(move _102) -> [return: bb66, unwind: bb138];
    }

    bb66: {
        _100 = Result::<&str, Utf8Error>::unwrap(move _101) -> [return: bb67, unwind: bb138];
    }

    bb67: {
        _109 = _100;
        _108 = core::str::<impl str>::contains::<'_, &str>(move _109, const "stack backtrace") -> [return: bb71, unwind: bb138];
    }

    bb68: {
        _106 = const false;
        goto -> bb70;
    }

    bb69: {
        _112 = _100;
        _111 = core::str::<impl str>::contains::<'_, &str>(move _112, const " - foo") -> [return: bb72, unwind: bb138];
    }

    bb70: {
        _105 = Not(move _106);
        switchInt(move _105) -> [0: bb76, otherwise: bb73];
    }

    bb71: {
        _107 = Not(move _108);
        switchInt(move _107) -> [0: bb68, otherwise: bb69];
    }

    bb72: {
        _110 = Not(move _111);
        _106 = move _110;
        goto -> bb70;
    }

    bb73: {
        _212 = const _;
        _115 = _212 as &[&str] (Pointer(Unsize));
        _120 = &_100;
        _119 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_120) -> [return: bb74, unwind: bb138];
    }

    bb74: {
        _118 = [move _119];
        _117 = &_118;
        _116 = _117 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _114 = Arguments::<'_>::new_v1(move _115, move _116) -> [return: bb75, unwind: bb138];
    }

    bb75: {
        _113 = panic_fmt(move _114) -> bb138;
    }

    bb76: {
        _126 = template(_1) -> [return: bb77, unwind: bb138];
    }

    bb77: {
        _125 = &mut _126;
        _124 = Command::arg::<&str>(move _125, const "double-fail") -> [return: bb78, unwind: bb137];
    }

    bb78: {
        _123 = _124;
        _122 = Command::spawn(move _123) -> [return: bb79, unwind: bb137];
    }

    bb79: {
        _121 = Result::<Child, std::io::Error>::unwrap(move _122) -> [return: bb80, unwind: bb137];
    }

    bb80: {
        _216 = const true;
        drop(_126) -> [return: bb81, unwind: bb150];
    }

    bb81: {
        _216 = const false;
        _129 = move _121;
        _128 = Child::wait_with_output(move _129) -> [return: bb82, unwind: bb150];
    }

    bb82: {
        _127 = Result::<Output, std::io::Error>::unwrap(move _128) -> [return: bb83, unwind: bb150];
    }

    bb83: {
        _133 = &(_127.0: std::process::ExitStatus);
        _132 = ExitStatus::success(move _133) -> [return: bb84, unwind: bb136];
    }

    bb84: {
        _131 = Not(move _132);
        _130 = Not(move _131);
        switchInt(move _130) -> [0: bb86, otherwise: bb85];
    }

    bb85: {
        _134 = core::panicking::panic(const "assertion failed: !out.status.success()") -> bb136;
    }

    bb86: {
        _139 = &(_127.2: std::vec::Vec<u8>);
        _138 = <Vec<u8> as Deref>::deref(_139) -> [return: bb87, unwind: bb136];
    }

    bb87: {
        _137 = _138;
        _136 = from_utf8(move _137) -> [return: bb88, unwind: bb136];
    }

    bb88: {
        _135 = Result::<&str, Utf8Error>::unwrap(move _136) -> [return: bb89, unwind: bb136];
    }

    bb89: {
        _143 = _135;
        _142 = core::str::<impl str>::contains::<'_, &str>(move _143, const "stack backtrace") -> [return: bb93, unwind: bb136];
    }

    bb90: {
        _141 = const false;
        goto -> bb92;
    }

    bb91: {
        _145 = _135;
        _146 = const "double";
        _144 = contains_verbose_expected(move _145, _146) -> [return: bb94, unwind: bb136];
    }

    bb92: {
        _140 = Not(move _141);
        switchInt(move _140) -> [0: bb98, otherwise: bb95];
    }

    bb93: {
        switchInt(move _142) -> [0: bb90, otherwise: bb91];
    }

    bb94: {
        _141 = move _144;
        goto -> bb92;
    }

    bb95: {
        _213 = const _;
        _149 = _213 as &[&str] (Pointer(Unsize));
        _154 = &_135;
        _153 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_154) -> [return: bb96, unwind: bb136];
    }

    bb96: {
        _152 = [move _153];
        _151 = &_152;
        _150 = _151 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _148 = Arguments::<'_>::new_v1(move _149, move _150) -> [return: bb97, unwind: bb136];
    }

    bb97: {
        _147 = panic_fmt(move _148) -> bb136;
    }

    bb98: {
        _162 = template(_1) -> [return: bb99, unwind: bb136];
    }

    bb99: {
        _161 = &mut _162;
        _160 = Command::arg::<&str>(move _161, const "double-fail") -> [return: bb100, unwind: bb135];
    }

    bb100: {
        _159 = _160;
        _158 = Command::env::<&str, &str>(move _159, const "RUST_BACKTRACE", const "1") -> [return: bb101, unwind: bb135];
    }

    bb101: {
        _157 = _158;
        _156 = Command::spawn(move _157) -> [return: bb102, unwind: bb135];
    }

    bb102: {
        _155 = Result::<Child, std::io::Error>::unwrap(move _156) -> [return: bb103, unwind: bb135];
    }

    bb103: {
        _215 = const true;
        drop(_162) -> [return: bb104, unwind: bb148];
    }

    bb104: {
        _215 = const false;
        _165 = move _155;
        _164 = Child::wait_with_output(move _165) -> [return: bb105, unwind: bb148];
    }

    bb105: {
        _163 = Result::<Output, std::io::Error>::unwrap(move _164) -> [return: bb106, unwind: bb148];
    }

    bb106: {
        _169 = &(_163.0: std::process::ExitStatus);
        _168 = ExitStatus::success(move _169) -> [return: bb107, unwind: bb134];
    }

    bb107: {
        _167 = Not(move _168);
        _166 = Not(move _167);
        switchInt(move _166) -> [0: bb109, otherwise: bb108];
    }

    bb108: {
        _170 = core::panicking::panic(const "assertion failed: !out.status.success()") -> bb134;
    }

    bb109: {
        _175 = &(_163.2: std::vec::Vec<u8>);
        _174 = <Vec<u8> as Deref>::deref(_175) -> [return: bb110, unwind: bb134];
    }

    bb110: {
        _173 = _174;
        _172 = from_utf8(move _173) -> [return: bb111, unwind: bb134];
    }

    bb111: {
        _171 = Result::<&str, Utf8Error>::unwrap(move _172) -> [return: bb112, unwind: bb134];
    }

    bb112: {
        _176 = const 0_usize;
        _178 = std::ops::Range::<i32> { start: const 0_i32, end: const 3_i32 };
        _177 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _178) -> [return: bb113, unwind: bb134];
    }

    bb113: {
        _179 = move _177;
        goto -> bb114;
    }

    bb114: {
        _181 = &mut _179;
        _180 = <std::ops::Range<i32> as Iterator>::next(_181) -> [return: bb115, unwind: bb134];
    }

    bb115: {
        _182 = discriminant(_180);
        switchInt(move _182) -> [0: bb118, 1: bb116, otherwise: bb117];
    }

    bb116: {
        _188 = _171;
        _191 = _176;
        _190 = Add(move _191, const 10_usize);
        _189 = RangeFrom::<usize> { start: move _190 };
        _187 = <str as Index<RangeFrom<usize>>>::index(move _188, move _189) -> [return: bb119, unwind: bb134];
    }

    bb117: {
        unreachable;
    }

    bb118: {
        _198 = _171;
        _201 = _176;
        _200 = Add(move _201, const 10_usize);
        _199 = RangeFrom::<usize> { start: move _200 };
        _197 = <str as Index<RangeFrom<usize>>>::index(move _198, move _199) -> [return: bb122, unwind: bb134];
    }

    bb119: {
        _186 = _187;
        _185 = core::str::<impl str>::find::<'_, &str>(move _186, const "stack backtrace") -> [return: bb120, unwind: bb134];
    }

    bb120: {
        _184 = Option::<usize>::unwrap(move _185) -> [return: bb121, unwind: bb134];
    }

    bb121: {
        _183 = Add(move _184, const 10_usize);
        _176 = Add(_176, move _183);
        goto -> bb114;
    }

    bb122: {
        _196 = _197;
        _195 = core::str::<impl str>::find::<'_, &str>(move _196, const "stack backtrace") -> [return: bb123, unwind: bb134];
    }

    bb123: {
        _194 = &_195;
        _193 = Option::<usize>::is_none(move _194) -> [return: bb124, unwind: bb134];
    }

    bb124: {
        _192 = Not(move _193);
        switchInt(move _192) -> [0: bb128, otherwise: bb125];
    }

    bb125: {
        _214 = const _;
        _204 = _214 as &[&str] (Pointer(Unsize));
        _209 = &_171;
        _208 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_209) -> [return: bb126, unwind: bb134];
    }

    bb126: {
        _207 = [move _208];
        _206 = &_207;
        _205 = _206 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _203 = Arguments::<'_>::new_v1(move _204, move _205) -> [return: bb127, unwind: bb134];
    }

    bb127: {
        _202 = panic_fmt(move _203) -> bb134;
    }

    bb128: {
        drop(_163) -> [return: bb129, unwind: bb148];
    }

    bb129: {
        _215 = const false;
        drop(_127) -> [return: bb130, unwind: bb150];
    }

    bb130: {
        _216 = const false;
        drop(_92) -> [return: bb131, unwind: bb152];
    }

    bb131: {
        _217 = const false;
        drop(_52) -> [return: bb132, unwind: bb154];
    }

    bb132: {
        _218 = const false;
        drop(_10) -> [return: bb133, unwind: bb156];
    }

    bb133: {
        _219 = const false;
        return;
    }

    bb134 (cleanup): {
        drop(_163) -> [return: bb148, unwind terminate];
    }

    bb135 (cleanup): {
        drop(_162) -> [return: bb136, unwind terminate];
    }

    bb136 (cleanup): {
        drop(_127) -> [return: bb150, unwind terminate];
    }

    bb137 (cleanup): {
        drop(_126) -> [return: bb138, unwind terminate];
    }

    bb138 (cleanup): {
        drop(_92) -> [return: bb152, unwind terminate];
    }

    bb139 (cleanup): {
        drop(_91) -> [return: bb141, unwind terminate];
    }

    bb140 (cleanup): {
        drop(_74) -> [return: bb141, unwind terminate];
    }

    bb141 (cleanup): {
        drop(_52) -> [return: bb154, unwind terminate];
    }

    bb142 (cleanup): {
        drop(_51) -> [return: bb144, unwind terminate];
    }

    bb143 (cleanup): {
        drop(_30) -> [return: bb144, unwind terminate];
    }

    bb144 (cleanup): {
        drop(_10) -> [return: bb156, unwind terminate];
    }

    bb145 (cleanup): {
        drop(_9) -> [return: bb146, unwind terminate];
    }

    bb146 (cleanup): {
        resume;
    }

    bb147 (cleanup): {
        drop(_155) -> [return: bb136, unwind terminate];
    }

    bb148 (cleanup): {
        switchInt(_215) -> [0: bb136, otherwise: bb147];
    }

    bb149 (cleanup): {
        drop(_121) -> [return: bb138, unwind terminate];
    }

    bb150 (cleanup): {
        switchInt(_216) -> [0: bb138, otherwise: bb149];
    }

    bb151 (cleanup): {
        drop(_84) -> [return: bb141, unwind terminate];
    }

    bb152 (cleanup): {
        switchInt(_217) -> [0: bb141, otherwise: bb151];
    }

    bb153 (cleanup): {
        drop(_44) -> [return: bb144, unwind terminate];
    }

    bb154 (cleanup): {
        switchInt(_218) -> [0: bb144, otherwise: bb153];
    }

    bb155 (cleanup): {
        drop(_2) -> [return: bb146, unwind terminate];
    }

    bb156 (cleanup): {
        switchInt(_219) -> [0: bb146, otherwise: bb155];
    }
}

promoted[0] in runtest: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "bad output: "];
        _0 = &_1;
        return;
    }
}

promoted[1] in runtest: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "bad output2: "];
        _0 = &_1;
        return;
    }
}

promoted[2] in runtest: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "bad output3: "];
        _0 = &_1;
        return;
    }
}

promoted[3] in runtest: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "bad output3: "];
        _0 = &_1;
        return;
    }
}

promoted[4] in runtest: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "bad output4: "];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::string::String>;
    let mut _2: std::env::Args;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: usize;
    let mut _6: &std::vec::Vec<std::string::String>;
    let mut _7: bool;
    let mut _8: &std::string::String;
    let _9: &std::string::String;
    let mut _10: &std::vec::Vec<std::string::String>;
    let _11: ();
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: usize;
    let mut _15: &std::vec::Vec<std::string::String>;
    let mut _16: bool;
    let mut _17: &std::string::String;
    let _18: &std::string::String;
    let mut _19: &std::vec::Vec<std::string::String>;
    let _20: ();
    let _21: ();
    let mut _22: &str;
    let _23: &str;
    let _24: &std::string::String;
    let _25: &std::string::String;
    let mut _26: &std::vec::Vec<std::string::String>;
    scope 1 {
        debug args => _1;
        let mut _27: &&str;
        let mut _28: &&str;
    }

    bb0: {
        _2 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_1;
        _5 = Vec::<String>::len(move _6) -> [return: bb6, unwind: bb23];
    }

    bb3: {
        _3 = const false;
        goto -> bb5;
    }

    bb4: {
        _10 = &_1;
        _9 = <Vec<String> as Index<usize>>::index(move _10, const 1_usize) -> [return: bb7, unwind: bb23];
    }

    bb5: {
        switchInt(move _3) -> [0: bb10, otherwise: bb9];
    }

    bb6: {
        _4 = Ge(move _5, const 2_usize);
        switchInt(move _4) -> [0: bb3, otherwise: bb4];
    }

    bb7: {
        _8 = _9;
        _28 = const _;
        _7 = <String as PartialEq<&str>>::eq(move _8, _28) -> [return: bb8, unwind: bb23];
    }

    bb8: {
        _3 = move _7;
        goto -> bb5;
    }

    bb9: {
        _11 = foo() -> [return: bb25, unwind: bb23];
    }

    bb10: {
        _15 = &_1;
        _14 = Vec::<String>::len(move _15) -> [return: bb14, unwind: bb23];
    }

    bb11: {
        _12 = const false;
        goto -> bb13;
    }

    bb12: {
        _19 = &_1;
        _18 = <Vec<String> as Index<usize>>::index(move _19, const 1_usize) -> [return: bb15, unwind: bb23];
    }

    bb13: {
        switchInt(move _12) -> [0: bb18, otherwise: bb17];
    }

    bb14: {
        _13 = Ge(move _14, const 2_usize);
        switchInt(move _13) -> [0: bb11, otherwise: bb12];
    }

    bb15: {
        _17 = _18;
        _27 = const _;
        _16 = <String as PartialEq<&str>>::eq(move _17, _27) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        _12 = move _16;
        goto -> bb13;
    }

    bb17: {
        _20 = double() -> [return: bb26, unwind: bb23];
    }

    bb18: {
        _26 = &_1;
        _25 = <Vec<String> as Index<usize>>::index(move _26, const 0_usize) -> [return: bb19, unwind: bb23];
    }

    bb19: {
        _24 = _25;
        _23 = <String as Deref>::deref(_24) -> [return: bb20, unwind: bb23];
    }

    bb20: {
        _22 = _23;
        _21 = runtest(move _22) -> [return: bb27, unwind: bb23];
    }

    bb21: {
        drop(_1) -> [return: bb22, unwind continue];
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_1) -> [return: bb24, unwind terminate];
    }

    bb24 (cleanup): {
        resume;
    }

    bb25: {
        goto -> bb21;
    }

    bb26: {
        goto -> bb21;
    }

    bb27: {
        goto -> bb21;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "double-fail";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "fail";
        _0 = &_1;
        return;
    }
}
