// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/backtrace.rs:16:10: 16:10
    let _1: std::vec::Vec<i32>;          // in scope 0 at ui/backtrace.rs:17:9: 17:11
    let mut _2: std::boxed::Box<[i32]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: bool;                    // in scope 0 at ui/backtrace.rs:18:8: 18:40
    let mut _9: &std::option::Option<std::ffi::OsString>; // in scope 0 at ui/backtrace.rs:18:8: 18:40
    let _10: std::option::Option<std::ffi::OsString>; // in scope 0 at ui/backtrace.rs:18:8: 18:30
    let mut _11: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _12: *const [i32; 3];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug _v => _1;                  // in scope 1 at ui/backtrace.rs:17:9: 17:11
    }
    scope 2 {
    }

    bb0: {
        _4 = const 12_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 4_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [i32; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _12 = (((_7.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_12) = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = var_os::<&str>(const "IS_TEST") -> [return: bb3, unwind: bb10]; // scope 1 at ui/backtrace.rs:18:8: 18:30
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:18:8: 18:19
                                         // + literal: Const { ty: fn(&str) -> Option<OsString> {var_os::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:18:20: 18:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _9 = &_10;                       // scope 1 at ui/backtrace.rs:18:8: 18:40
        _8 = Option::<OsString>::is_some(move _9) -> [return: bb4, unwind: bb9]; // scope 1 at ui/backtrace.rs:18:8: 18:40
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:18:31: 18:38
                                         // + literal: Const { ty: for<'a> fn(&'a Option<OsString>) -> bool {Option::<OsString>::is_some}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_10) -> [return: bb5, unwind: bb10]; // scope 1 at ui/backtrace.rs:18:39: 18:40
    }

    bb5: {
        switchInt(move _8) -> [0: bb7, otherwise: bb6]; // scope 1 at ui/backtrace.rs:18:8: 18:40
    }

    bb6: {
        _11 = begin_panic::<&str>(const "explicit panic") -> bb10; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        drop(_1) -> bb8;                 // scope 0 at ui/backtrace.rs:21:1: 21:2
    }

    bb8: {
        return;                          // scope 0 at ui/backtrace.rs:21:2: 21:2
    }

    bb9 (cleanup): {
        drop(_10) -> bb10;               // scope 1 at ui/backtrace.rs:18:39: 18:40
    }

    bb10 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/backtrace.rs:21:1: 21:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/backtrace.rs:16:1: 21:2
    }
}

fn double() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/backtrace.rs:24:13: 24:13
    let _1: double::Double;              // in scope 0 at ui/backtrace.rs:31:9: 31:11
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    scope 1 {
        debug _d => _1;                  // in scope 1 at ui/backtrace.rs:31:9: 31:11
    }

    bb0: {
        _2 = begin_panic::<&str>(const "once") -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:33:12: 33:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_1) -> bb2;                 // scope 0 at ui/backtrace.rs:34:1: 34:2
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/backtrace.rs:24:1: 34:2
    }
}

fn double::<impl at ui/backtrace.rs:27:5: 27:25>::drop(_1: &mut Double) -> () {
    debug self => _1;                    // in scope 0 at ui/backtrace.rs:28:17: 28:26
    let mut _0: ();                      // return place in scope 0 at ui/backtrace.rs:28:28: 28:28
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _2 = begin_panic::<&str>(const "twice"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:28:37: 28:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn template(_1: &str) -> Command {
    debug me => _1;                      // in scope 0 at ui/backtrace.rs:36:13: 36:15
    let mut _0: std::process::Command;   // return place in scope 0 at ui/backtrace.rs:37:9: 37:14
    let mut _2: &str;                    // in scope 0 at ui/backtrace.rs:37:30: 37:32
    let _3: &mut std::process::Command;  // in scope 0 at ui/backtrace.rs:38:5: 40:29
    let mut _4: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:38:5: 40:29
    let mut _5: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:38:5: 39:29
    let mut _6: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:38:5: 39:29
    let mut _7: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:38:5: 38:26
    let mut _8: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:38:5: 38:26
    let mut _9: std::process::Stdio;     // in scope 0 at ui/backtrace.rs:39:14: 39:28
    let mut _10: std::process::Stdio;    // in scope 0 at ui/backtrace.rs:40:14: 40:28
    scope 1 {
        debug m => _0;                   // in scope 1 at ui/backtrace.rs:37:9: 37:14
    }

    bb0: {
        _2 = _1;                         // scope 0 at ui/backtrace.rs:37:30: 37:32
        _0 = Command::new::<&str>(move _2) -> bb1; // scope 0 at ui/backtrace.rs:37:17: 37:33
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:37:17: 37:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &mut _0;                    // scope 1 at ui/backtrace.rs:38:5: 38:26
        _7 = Command::env::<&str, &str>(move _8, const "IS_TEST", const "1") -> [return: bb2, unwind: bb7]; // scope 1 at ui/backtrace.rs:38:5: 38:26
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:38:7: 38:10
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str, &str) -> &'a mut Command {Command::env::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:38:11: 38:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:38:22: 38:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _6 = &mut (*_7);                 // scope 1 at ui/backtrace.rs:38:5: 39:29
        _9 = Stdio::piped() -> [return: bb3, unwind: bb7]; // scope 1 at ui/backtrace.rs:39:14: 39:28
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:39:14: 39:26
                                         // + literal: Const { ty: fn() -> Stdio {Stdio::piped}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = Command::stdout::<Stdio>(move _6, move _9) -> [return: bb4, unwind: bb7]; // scope 1 at ui/backtrace.rs:38:5: 39:29
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:39:7: 39:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, Stdio) -> &'a mut Command {Command::stdout::<Stdio>}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = &mut (*_5);                 // scope 1 at ui/backtrace.rs:38:5: 40:29
        _10 = Stdio::piped() -> [return: bb5, unwind: bb7]; // scope 1 at ui/backtrace.rs:40:14: 40:28
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:40:14: 40:26
                                         // + literal: Const { ty: fn() -> Stdio {Stdio::piped}, val: Value(<ZST>) }
    }

    bb5: {
        _3 = Command::stderr::<Stdio>(move _4, move _10) -> [return: bb6, unwind: bb7]; // scope 1 at ui/backtrace.rs:38:5: 40:29
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:40:7: 40:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, Stdio) -> &'a mut Command {Command::stderr::<Stdio>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/backtrace.rs:42:2: 42:2
    }

    bb7 (cleanup): {
        drop(_0) -> bb8;                 // scope 0 at ui/backtrace.rs:42:1: 42:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/backtrace.rs:36:1: 42:2
    }
}

fn expected(_1: &str) -> String {
    debug fn_name => _1;                 // in scope 0 at ui/backtrace.rs:44:13: 44:20
    let mut _0: std::string::String;     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _3: &[&str];                 // in scope 0 at ui/backtrace.rs:45:13: 45:29
    let mut _4: &[&str; 1];              // in scope 0 at ui/backtrace.rs:45:13: 45:29
    let _5: &[&str; 1];                  // in scope 0 at ui/backtrace.rs:45:13: 45:29
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/backtrace.rs:45:31: 45:38
    let mut _11: &&str;                  // in scope 0 at ui/backtrace.rs:45:31: 45:38
    let _12: &&str;                      // in scope 0 at ui/backtrace.rs:45:31: 45:38
    let mut _13: &[&str; 1];             // in scope 0 at ui/backtrace.rs:45:13: 45:29
    scope 1 {
        debug res => _0;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }

    bb0: {
        _13 = const _;                   // scope 0 at ui/backtrace.rs:45:13: 45:29
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:45:13: 45:29
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(expected, [], Some(promoted[0])) }
        _5 = _13;                        // scope 0 at ui/backtrace.rs:45:13: 45:29
        _4 = _5;                         // scope 0 at ui/backtrace.rs:45:13: 45:29
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/backtrace.rs:45:13: 45:29
        _12 = &_1;                       // scope 0 at ui/backtrace.rs:45:31: 45:38
        _11 = _12;                       // scope 0 at ui/backtrace.rs:45:31: 45:38
        _10 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _11) -> bb1; // scope 0 at ui/backtrace.rs:45:31: 45:38
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:45:31: 45:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = [move _10];                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = format(move _2) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/backtrace.rs:46:2: 46:2
    }
}

promoted[0] in expected: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/backtrace.rs:45:13: 45:29
    let mut _1: [&str; 1];               // in scope 0 at ui/backtrace.rs:45:13: 45:29

    bb0: {
        _1 = [const " backtrace::"];     // scope 0 at ui/backtrace.rs:45:13: 45:29
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:45:13: 45:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/backtrace.rs:45:13: 45:29
        return;                          // scope 0 at ui/backtrace.rs:45:13: 45:29
    }
}

fn contains_verbose_expected(_1: &str, _2: &str) -> bool {
    debug s => _1;                       // in scope 0 at ui/backtrace.rs:49:30: 49:31
    debug fn_name => _2;                 // in scope 0 at ui/backtrace.rs:49:39: 49:46
    let mut _0: bool;                    // return place in scope 0 at ui/backtrace.rs:49:57: 49:61
    let _3: &str;                        // in scope 0 at ui/backtrace.rs:53:9: 53:15
    let _5: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let mut _7: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _8: &[&str];                 // in scope 0 at ui/backtrace.rs:54:27: 54:33
    let mut _9: &[&str; 1];              // in scope 0 at ui/backtrace.rs:54:27: 54:33
    let _10: &[&str; 1];                 // in scope 0 at ui/backtrace.rs:54:27: 54:33
    let mut _11: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _12: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _13: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _14: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _15: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/backtrace.rs:54:35: 54:42
    let mut _16: &&str;                  // in scope 0 at ui/backtrace.rs:54:35: 54:42
    let _17: &&str;                      // in scope 0 at ui/backtrace.rs:54:35: 54:42
    let mut _18: &mut std::str::MatchIndices<'_, &str>; // in scope 0 at ui/backtrace.rs:55:5: 61:7
    let mut _19: std::str::MatchIndices<'_, &str>; // in scope 0 at ui/backtrace.rs:55:5: 55:28
    let mut _20: &str;                   // in scope 0 at ui/backtrace.rs:55:5: 55:28
    let mut _21: &str;                   // in scope 0 at ui/backtrace.rs:55:21: 55:27
    let mut _22: [closure@ui/backtrace.rs:55:33: 55:41]; // in scope 0 at ui/backtrace.rs:55:33: 61:6
    let mut _23: &&str;                  // in scope 0 at ui/backtrace.rs:55:33: 61:6
    let mut _24: &&str;                  // in scope 0 at ui/backtrace.rs:55:33: 61:6
    let mut _25: &&std::string::String;  // in scope 0 at ui/backtrace.rs:55:33: 61:6
    scope 1 {
        debug prefix => _3;              // in scope 1 at ui/backtrace.rs:53:9: 53:15
        let _4: &std::string::String;    // in scope 1 at ui/backtrace.rs:54:9: 54:15
        let _6: std::string::String;     // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        let mut _26: &[&str; 1];         // in scope 1 at ui/backtrace.rs:54:27: 54:33
        scope 2 {
            debug suffix => _4;          // in scope 2 at ui/backtrace.rs:54:9: 54:15
        }
        scope 3 {
            debug res => _6;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        }
    }

    bb0: {
        _3 = const " backtrace";         // scope 0 at ui/backtrace.rs:53:18: 53:30
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:53:18: 53:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _26 = const _;                   // scope 1 at ui/backtrace.rs:54:27: 54:33
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:54:27: 54:33
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(contains_verbose_expected, [], Some(promoted[0])) }
        _10 = _26;                       // scope 1 at ui/backtrace.rs:54:27: 54:33
        _9 = _10;                        // scope 1 at ui/backtrace.rs:54:27: 54:33
        _8 = move _9 as &[&str] (Pointer(Unsize)); // scope 1 at ui/backtrace.rs:54:27: 54:33
        _17 = &_2;                       // scope 1 at ui/backtrace.rs:54:35: 54:42
        _16 = _17;                       // scope 1 at ui/backtrace.rs:54:35: 54:42
        _15 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _16) -> bb1; // scope 1 at ui/backtrace.rs:54:35: 54:42
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:54:35: 54:42
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _14 = [move _15];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _13 = &_14;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _12 = _13;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _11 = move _12 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _7 = Arguments::<'_>::new_v1(move _8, move _11) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = format(move _7) -> bb3;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = move _6;                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _4 = &_5;                        // scope 1 at ui/backtrace.rs:54:18: 54:43
        _20 = _1;                        // scope 2 at ui/backtrace.rs:55:5: 55:28
        _21 = _3;                        // scope 2 at ui/backtrace.rs:55:21: 55:27
        _19 = core::str::<impl str>::match_indices::<'_, &str>(move _20, move _21) -> [return: bb4, unwind: bb7]; // scope 2 at ui/backtrace.rs:55:5: 55:28
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:55:7: 55:20
                                         // + literal: Const { ty: fn(&str, &str) -> MatchIndices<'_, &str> {core::str::<impl str>::match_indices::<'_, &str>}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = &mut _19;                  // scope 2 at ui/backtrace.rs:55:5: 61:7
        _23 = &_1;                       // scope 2 at ui/backtrace.rs:55:33: 61:6
        _24 = &_3;                       // scope 2 at ui/backtrace.rs:55:33: 61:6
        _25 = &_4;                       // scope 2 at ui/backtrace.rs:55:33: 61:6
        _22 = [closure@ui/backtrace.rs:55:33: 55:41] { s: move _23, prefix: move _24, suffix: move _25 }; // scope 2 at ui/backtrace.rs:55:33: 61:6
                                         // closure
                                         // + def_id: DefId(0:17 ~ backtrace[8fb5]::contains_verbose_expected::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(((usize, &str),)) -> bool,
                                         //     (&&str, &&str, &&std::string::String),
                                         // ]
        _0 = <MatchIndices<'_, &str> as Iterator>::any::<[closure@ui/backtrace.rs:55:33: 55:41]>(move _18, move _22) -> [return: bb5, unwind: bb7]; // scope 2 at ui/backtrace.rs:55:5: 61:7
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:55:29: 55:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut MatchIndices<'_, &str>, [closure@ui/backtrace.rs:55:33: 55:41]) -> bool {<MatchIndices<'_, &str> as Iterator>::any::<[closure@ui/backtrace.rs:55:33: 55:41]>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_5) -> bb6;                 // scope 1 at ui/backtrace.rs:62:1: 62:2
    }

    bb6: {
        return;                          // scope 0 at ui/backtrace.rs:62:2: 62:2
    }

    bb7 (cleanup): {
        drop(_5) -> bb8;                 // scope 1 at ui/backtrace.rs:62:1: 62:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/backtrace.rs:49:1: 62:2
    }
}

promoted[0] in contains_verbose_expected: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/backtrace.rs:54:27: 54:33
    let mut _1: [&str; 1];               // in scope 0 at ui/backtrace.rs:54:27: 54:33

    bb0: {
        _1 = [const "::"];               // scope 0 at ui/backtrace.rs:54:27: 54:33
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:54:27: 54:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/backtrace.rs:54:27: 54:33
        return;                          // scope 0 at ui/backtrace.rs:54:27: 54:33
    }
}

fn contains_verbose_expected::{closure#0}(_1: &mut [closure@ui/backtrace.rs:55:33: 55:41], _2: (usize, &str)) -> bool {
    debug s => (*((*_1).0: &&str));      // in scope 0 at ui/backtrace.rs:49:30: 49:31
    debug prefix => (*((*_1).1: &&str)); // in scope 0 at ui/backtrace.rs:53:9: 53:15
    debug suffix => (*((*_1).2: &&std::string::String)); // in scope 0 at ui/backtrace.rs:54:9: 54:15
    let mut _0: bool;                    // return place in scope 0 at ui/backtrace.rs:55:42: 55:42
    let _3: usize;                       // in scope 0 at ui/backtrace.rs:55:35: 55:36
    let mut _4: &str;                    // in scope 0 at ui/backtrace.rs:56:9: 60:33
    let _5: &str;                        // in scope 0 at ui/backtrace.rs:56:9: 59:37
    let mut _6: &str;                    // in scope 0 at ui/backtrace.rs:56:9: 59:37
    let _7: &str;                        // in scope 0 at ui/backtrace.rs:56:9: 58:55
    let mut _8: &str;                    // in scope 0 at ui/backtrace.rs:56:9: 58:55
    let _9: &str;                        // in scope 0 at ui/backtrace.rs:56:9: 57:37
    let mut _10: &str;                   // in scope 0 at ui/backtrace.rs:56:9: 57:37
    let _11: &str;                       // in scope 0 at ui/backtrace.rs:56:9: 56:30
    let mut _12: &str;                   // in scope 0 at ui/backtrace.rs:56:9: 56:10
    let mut _13: std::ops::RangeFrom<usize>; // in scope 0 at ui/backtrace.rs:56:11: 56:29
    let mut _14: usize;                  // in scope 0 at ui/backtrace.rs:56:11: 56:27
    let mut _15: usize;                  // in scope 0 at ui/backtrace.rs:56:11: 56:12
    let mut _16: usize;                  // in scope 0 at ui/backtrace.rs:56:15: 56:27
    let mut _17: &str;                   // in scope 0 at ui/backtrace.rs:56:15: 56:27
    let mut _18: (usize, bool);          // in scope 0 at ui/backtrace.rs:56:11: 56:27
    let mut _19: &std::string::String;   // in scope 0 at ui/backtrace.rs:60:26: 60:32
    let mut _20: &&str;                  // in scope 0 at ui/backtrace.rs:55:33: 61:6
    let mut _21: &str;                   // in scope 0 at ui/backtrace.rs:55:33: 61:6
    let mut _22: &&str;                  // in scope 0 at ui/backtrace.rs:55:33: 61:6
    let mut _23: &str;                   // in scope 0 at ui/backtrace.rs:55:33: 61:6
    let mut _24: &&std::string::String;  // in scope 0 at ui/backtrace.rs:55:33: 61:6
    scope 1 {
        debug i => _3;                   // in scope 1 at ui/backtrace.rs:55:35: 55:36
    }

    bb0: {
        _3 = (_2.0: usize);              // scope 0 at ui/backtrace.rs:55:35: 55:36
        _20 = deref_copy ((*_1).0: &&str); // scope 1 at ui/backtrace.rs:56:9: 56:10
        _21 = deref_copy (*_20);         // scope 1 at ui/backtrace.rs:56:9: 56:10
        _12 = _21;                       // scope 1 at ui/backtrace.rs:56:9: 56:10
        _15 = _3;                        // scope 1 at ui/backtrace.rs:56:11: 56:12
        _22 = deref_copy ((*_1).1: &&str); // scope 1 at ui/backtrace.rs:56:15: 56:27
        _23 = deref_copy (*_22);         // scope 1 at ui/backtrace.rs:56:15: 56:27
        _17 = _23;                       // scope 1 at ui/backtrace.rs:56:15: 56:27
        _16 = core::str::<impl str>::len(move _17) -> bb1; // scope 1 at ui/backtrace.rs:56:15: 56:27
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:56:22: 56:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> usize {core::str::<impl str>::len}, val: Value(<ZST>) }
    }

    bb1: {
        _18 = CheckedAdd(_15, _16);      // scope 1 at ui/backtrace.rs:56:11: 56:27
        assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, move _16) -> bb2; // scope 1 at ui/backtrace.rs:56:11: 56:27
    }

    bb2: {
        _14 = move (_18.0: usize);       // scope 1 at ui/backtrace.rs:56:11: 56:27
        _13 = RangeFrom::<usize> { start: move _14 }; // scope 1 at ui/backtrace.rs:56:11: 56:29
        _11 = <str as Index<RangeFrom<usize>>>::index(move _12, move _13) -> bb3; // scope 1 at ui/backtrace.rs:56:9: 56:30
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:56:9: 56:30
                                         // + literal: Const { ty: for<'a> fn(&'a str, RangeFrom<usize>) -> &'a <str as Index<RangeFrom<usize>>>::Output {<str as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = _11;                       // scope 1 at ui/backtrace.rs:56:9: 57:37
        _9 = core::str::<impl str>::trim_start_matches::<'_, char>(move _10, const '[') -> bb4; // scope 1 at ui/backtrace.rs:56:9: 57:37
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:57:14: 57:32
                                         // + literal: Const { ty: fn(&str, char) -> &str {core::str::<impl str>::trim_start_matches::<'_, char>}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = _9;                         // scope 1 at ui/backtrace.rs:56:9: 58:55
        _7 = core::str::<impl str>::trim_start_matches::<'_, fn(char) -> bool {char::methods::<impl char>::is_alphanumeric}>(move _8, char::methods::<impl char>::is_alphanumeric) -> bb5; // scope 1 at ui/backtrace.rs:56:9: 58:55
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:58:14: 58:32
                                         // + literal: Const { ty: fn(&str, fn(char) -> bool {char::methods::<impl char>::is_alphanumeric}) -> &str {core::str::<impl str>::trim_start_matches::<'_, fn(char) -> bool {char::methods::<impl char>::is_alphanumeric}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:58:33: 58:54
                                         // + literal: Const { ty: fn(char) -> bool {char::methods::<impl char>::is_alphanumeric}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = _7;                         // scope 1 at ui/backtrace.rs:56:9: 59:37
        _5 = core::str::<impl str>::trim_start_matches::<'_, char>(move _6, const ']') -> bb6; // scope 1 at ui/backtrace.rs:56:9: 59:37
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:59:14: 59:32
                                         // + literal: Const { ty: fn(&str, char) -> &str {core::str::<impl str>::trim_start_matches::<'_, char>}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = _5;                         // scope 1 at ui/backtrace.rs:56:9: 60:33
        _24 = deref_copy ((*_1).2: &&std::string::String); // scope 1 at ui/backtrace.rs:60:26: 60:32
        _19 = (*_24);                    // scope 1 at ui/backtrace.rs:60:26: 60:32
        _0 = core::str::<impl str>::starts_with::<'_, &String>(move _4, move _19) -> bb7; // scope 1 at ui/backtrace.rs:56:9: 60:33
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:60:14: 60:25
                                         // + literal: Const { ty: fn(&str, &String) -> bool {core::str::<impl str>::starts_with::<'_, &String>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/backtrace.rs:61:6: 61:6
    }
}

fn runtest(_1: &str) -> () {
    debug me => _1;                      // in scope 0 at ui/backtrace.rs:64:12: 64:14
    let mut _0: ();                      // return place in scope 0 at ui/backtrace.rs:64:22: 64:22
    let _2: std::process::Child;         // in scope 0 at ui/backtrace.rs:66:9: 66:10
    let mut _3: std::result::Result<std::process::Child, std::io::Error>; // in scope 0 at ui/backtrace.rs:66:13: 66:72
    let mut _4: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:66:13: 66:72
    let mut _5: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:66:13: 66:64
    let mut _6: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:66:13: 66:64
    let mut _7: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:66:13: 66:37
    let mut _8: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:66:13: 66:37
    let mut _9: std::process::Command;   // in scope 0 at ui/backtrace.rs:66:13: 66:25
    let mut _10: &str;                   // in scope 0 at ui/backtrace.rs:66:22: 66:24
    let mut _12: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/backtrace.rs:67:15: 67:35
    let mut _13: std::process::Child;    // in scope 0 at ui/backtrace.rs:67:15: 67:16
    let mut _14: bool;                   // in scope 0 at ui/backtrace.rs:68:5: 68:35
    let mut _15: bool;                   // in scope 0 at ui/backtrace.rs:68:13: 68:34
    let mut _16: bool;                   // in scope 0 at ui/backtrace.rs:68:14: 68:34
    let mut _17: &std::process::ExitStatus; // in scope 0 at ui/backtrace.rs:68:14: 68:34
    let mut _18: !;                      // in scope 0 at ui/backtrace.rs:68:5: 68:35
    let mut _20: std::result::Result<&str, std::str::Utf8Error>; // in scope 0 at ui/backtrace.rs:69:13: 69:40
    let mut _21: &[u8];                  // in scope 0 at ui/backtrace.rs:69:28: 69:39
    let _22: &[u8];                      // in scope 0 at ui/backtrace.rs:69:28: 69:39
    let mut _23: &std::vec::Vec<u8>;     // in scope 0 at ui/backtrace.rs:69:28: 69:39
    let _24: &std::vec::Vec<u8>;         // in scope 0 at ui/backtrace.rs:69:28: 69:39
    let mut _25: bool;                   // in scope 0 at ui/backtrace.rs:70:5: 71:33
    let mut _26: bool;                   // in scope 0 at ui/backtrace.rs:70:13: 70:74
    let mut _27: bool;                   // in scope 0 at ui/backtrace.rs:70:13: 70:42
    let mut _28: &str;                   // in scope 0 at ui/backtrace.rs:70:13: 70:42
    let mut _29: bool;                   // in scope 0 at ui/backtrace.rs:70:46: 70:74
    let mut _30: &str;                   // in scope 0 at ui/backtrace.rs:70:46: 70:74
    let mut _31: &std::string::String;   // in scope 0 at ui/backtrace.rs:70:57: 70:73
    let _32: std::string::String;        // in scope 0 at ui/backtrace.rs:70:58: 70:73
    let mut _33: &str;                   // in scope 0 at ui/backtrace.rs:70:67: 70:72
    let _34: &str;                       // in scope 0 at ui/backtrace.rs:70:67: 70:72
    let mut _35: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _36: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _37: &[&str];                // in scope 0 at ui/backtrace.rs:71:13: 71:29
    let mut _38: &[&str; 1];             // in scope 0 at ui/backtrace.rs:71:13: 71:29
    let _39: &[&str; 1];                 // in scope 0 at ui/backtrace.rs:71:13: 71:29
    let mut _40: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _41: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _42: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _43: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _44: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/backtrace.rs:71:31: 71:32
    let mut _45: &&str;                  // in scope 0 at ui/backtrace.rs:71:31: 71:32
    let _46: &&str;                      // in scope 0 at ui/backtrace.rs:71:31: 71:32
    let mut _47: bool;                   // in scope 0 at ui/backtrace.rs:72:5: 72:69
    let mut _48: bool;                   // in scope 0 at ui/backtrace.rs:72:13: 72:30
    let mut _49: &str;                   // in scope 0 at ui/backtrace.rs:72:13: 72:30
    let mut _50: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _52: std::result::Result<std::process::Child, std::io::Error>; // in scope 0 at ui/backtrace.rs:77:13: 77:74
    let mut _53: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:77:13: 77:74
    let mut _54: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:77:13: 77:66
    let mut _55: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:77:13: 77:66
    let mut _56: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:77:13: 77:37
    let mut _57: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:77:13: 77:37
    let mut _58: std::process::Command;  // in scope 0 at ui/backtrace.rs:77:13: 77:25
    let mut _59: &str;                   // in scope 0 at ui/backtrace.rs:77:22: 77:24
    let mut _61: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/backtrace.rs:78:15: 78:35
    let mut _62: std::process::Child;    // in scope 0 at ui/backtrace.rs:78:15: 78:16
    let mut _63: bool;                   // in scope 0 at ui/backtrace.rs:79:5: 79:35
    let mut _64: bool;                   // in scope 0 at ui/backtrace.rs:79:13: 79:34
    let mut _65: bool;                   // in scope 0 at ui/backtrace.rs:79:14: 79:34
    let mut _66: &std::process::ExitStatus; // in scope 0 at ui/backtrace.rs:79:14: 79:34
    let mut _67: !;                      // in scope 0 at ui/backtrace.rs:79:5: 79:35
    let mut _69: std::result::Result<&str, std::str::Utf8Error>; // in scope 0 at ui/backtrace.rs:80:13: 80:40
    let mut _70: &[u8];                  // in scope 0 at ui/backtrace.rs:80:28: 80:39
    let _71: &[u8];                      // in scope 0 at ui/backtrace.rs:80:28: 80:39
    let mut _72: &std::vec::Vec<u8>;     // in scope 0 at ui/backtrace.rs:80:28: 80:39
    let _73: &std::vec::Vec<u8>;         // in scope 0 at ui/backtrace.rs:80:28: 80:39
    let mut _74: bool;                   // in scope 0 at ui/backtrace.rs:81:5: 82:34
    let mut _75: bool;                   // in scope 0 at ui/backtrace.rs:81:13: 81:76
    let mut _76: bool;                   // in scope 0 at ui/backtrace.rs:81:13: 81:43
    let mut _77: bool;                   // in scope 0 at ui/backtrace.rs:81:14: 81:43
    let mut _78: &str;                   // in scope 0 at ui/backtrace.rs:81:14: 81:43
    let mut _79: bool;                   // in scope 0 at ui/backtrace.rs:81:47: 81:76
    let mut _80: bool;                   // in scope 0 at ui/backtrace.rs:81:48: 81:76
    let mut _81: &str;                   // in scope 0 at ui/backtrace.rs:81:48: 81:76
    let mut _82: &std::string::String;   // in scope 0 at ui/backtrace.rs:81:59: 81:75
    let _83: std::string::String;        // in scope 0 at ui/backtrace.rs:81:60: 81:75
    let mut _84: &str;                   // in scope 0 at ui/backtrace.rs:81:69: 81:74
    let _85: &str;                       // in scope 0 at ui/backtrace.rs:81:69: 81:74
    let mut _86: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _87: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _88: &[&str];                // in scope 0 at ui/backtrace.rs:82:13: 82:30
    let mut _89: &[&str; 1];             // in scope 0 at ui/backtrace.rs:82:13: 82:30
    let _90: &[&str; 1];                 // in scope 0 at ui/backtrace.rs:82:13: 82:30
    let mut _91: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _92: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _93: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _94: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _95: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/backtrace.rs:82:32: 82:33
    let mut _96: &&str;                  // in scope 0 at ui/backtrace.rs:82:32: 82:33
    let _97: &&str;                      // in scope 0 at ui/backtrace.rs:82:32: 82:33
    let mut _99: std::result::Result<std::process::Child, std::io::Error>; // in scope 0 at ui/backtrace.rs:87:13: 87:71
    let mut _100: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:87:13: 87:71
    let mut _101: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:87:13: 87:63
    let mut _102: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:87:13: 87:63
    let mut _103: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:87:13: 87:37
    let mut _104: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:87:13: 87:37
    let mut _105: std::process::Command; // in scope 0 at ui/backtrace.rs:87:13: 87:25
    let mut _106: &str;                  // in scope 0 at ui/backtrace.rs:87:22: 87:24
    let mut _108: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/backtrace.rs:88:15: 88:35
    let mut _109: std::process::Child;   // in scope 0 at ui/backtrace.rs:88:15: 88:16
    let mut _110: bool;                  // in scope 0 at ui/backtrace.rs:89:5: 89:35
    let mut _111: bool;                  // in scope 0 at ui/backtrace.rs:89:13: 89:34
    let mut _112: bool;                  // in scope 0 at ui/backtrace.rs:89:14: 89:34
    let mut _113: &std::process::ExitStatus; // in scope 0 at ui/backtrace.rs:89:14: 89:34
    let mut _114: !;                     // in scope 0 at ui/backtrace.rs:89:5: 89:35
    let mut _116: std::result::Result<&str, std::str::Utf8Error>; // in scope 0 at ui/backtrace.rs:90:13: 90:40
    let mut _117: &[u8];                 // in scope 0 at ui/backtrace.rs:90:28: 90:39
    let _118: &[u8];                     // in scope 0 at ui/backtrace.rs:90:28: 90:39
    let mut _119: &std::vec::Vec<u8>;    // in scope 0 at ui/backtrace.rs:90:28: 90:39
    let _120: &std::vec::Vec<u8>;        // in scope 0 at ui/backtrace.rs:90:28: 90:39
    let mut _121: bool;                  // in scope 0 at ui/backtrace.rs:91:5: 92:34
    let mut _122: bool;                  // in scope 0 at ui/backtrace.rs:91:13: 91:68
    let mut _123: bool;                  // in scope 0 at ui/backtrace.rs:91:13: 91:43
    let mut _124: bool;                  // in scope 0 at ui/backtrace.rs:91:14: 91:43
    let mut _125: &str;                  // in scope 0 at ui/backtrace.rs:91:14: 91:43
    let mut _126: bool;                  // in scope 0 at ui/backtrace.rs:91:47: 91:68
    let mut _127: bool;                  // in scope 0 at ui/backtrace.rs:91:48: 91:68
    let mut _128: &str;                  // in scope 0 at ui/backtrace.rs:91:48: 91:68
    let mut _129: !;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _130: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _131: &[&str];               // in scope 0 at ui/backtrace.rs:92:13: 92:30
    let mut _132: &[&str; 1];            // in scope 0 at ui/backtrace.rs:92:13: 92:30
    let _133: &[&str; 1];                // in scope 0 at ui/backtrace.rs:92:13: 92:30
    let mut _134: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _135: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _136: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _137: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _138: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/backtrace.rs:92:32: 92:33
    let mut _139: &&str;                 // in scope 0 at ui/backtrace.rs:92:32: 92:33
    let _140: &&str;                     // in scope 0 at ui/backtrace.rs:92:32: 92:33
    let mut _142: std::result::Result<std::process::Child, std::io::Error>; // in scope 0 at ui/backtrace.rs:97:17: 97:56
    let mut _143: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:97:17: 97:56
    let mut _144: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:97:17: 97:48
    let mut _145: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:97:17: 97:48
    let mut _146: std::process::Command; // in scope 0 at ui/backtrace.rs:97:17: 97:29
    let mut _147: &str;                  // in scope 0 at ui/backtrace.rs:97:26: 97:28
    let mut _149: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/backtrace.rs:98:19: 98:39
    let mut _150: std::process::Child;   // in scope 0 at ui/backtrace.rs:98:19: 98:20
    let mut _151: bool;                  // in scope 0 at ui/backtrace.rs:99:9: 99:39
    let mut _152: bool;                  // in scope 0 at ui/backtrace.rs:99:17: 99:38
    let mut _153: bool;                  // in scope 0 at ui/backtrace.rs:99:18: 99:38
    let mut _154: &std::process::ExitStatus; // in scope 0 at ui/backtrace.rs:99:18: 99:38
    let mut _155: !;                     // in scope 0 at ui/backtrace.rs:99:9: 99:39
    let mut _157: std::result::Result<&str, std::str::Utf8Error>; // in scope 0 at ui/backtrace.rs:100:17: 100:44
    let mut _158: &[u8];                 // in scope 0 at ui/backtrace.rs:100:32: 100:43
    let _159: &[u8];                     // in scope 0 at ui/backtrace.rs:100:32: 100:43
    let mut _160: &std::vec::Vec<u8>;    // in scope 0 at ui/backtrace.rs:100:32: 100:43
    let _161: &std::vec::Vec<u8>;        // in scope 0 at ui/backtrace.rs:100:32: 100:43
    let mut _162: bool;                  // in scope 0 at ui/backtrace.rs:103:9: 104:38
    let mut _163: bool;                  // in scope 0 at ui/backtrace.rs:103:17: 103:88
    let mut _164: bool;                  // in scope 0 at ui/backtrace.rs:103:17: 103:46
    let mut _165: &str;                  // in scope 0 at ui/backtrace.rs:103:17: 103:46
    let mut _166: bool;                  // in scope 0 at ui/backtrace.rs:103:50: 103:88
    let mut _167: &str;                  // in scope 0 at ui/backtrace.rs:103:76: 103:77
    let mut _168: &str;                  // in scope 0 at ui/backtrace.rs:103:79: 103:87
    let _169: &str;                      // in scope 0 at ui/backtrace.rs:103:79: 103:87
    let mut _170: !;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _171: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _172: &[&str];               // in scope 0 at ui/backtrace.rs:104:17: 104:34
    let mut _173: &[&str; 1];            // in scope 0 at ui/backtrace.rs:104:17: 104:34
    let _174: &[&str; 1];                // in scope 0 at ui/backtrace.rs:104:17: 104:34
    let mut _175: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _176: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _177: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _178: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _179: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/backtrace.rs:104:36: 104:37
    let mut _180: &&str;                 // in scope 0 at ui/backtrace.rs:104:36: 104:37
    let _181: &&str;                     // in scope 0 at ui/backtrace.rs:104:36: 104:37
    let mut _183: std::result::Result<std::process::Child, std::io::Error>; // in scope 0 at ui/backtrace.rs:107:17: 108:72
    let mut _184: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:107:17: 108:72
    let mut _185: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:107:17: 108:64
    let mut _186: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:107:17: 108:64
    let mut _187: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:107:17: 107:48
    let mut _188: &mut std::process::Command; // in scope 0 at ui/backtrace.rs:107:17: 107:48
    let mut _189: std::process::Command; // in scope 0 at ui/backtrace.rs:107:17: 107:29
    let mut _190: &str;                  // in scope 0 at ui/backtrace.rs:107:26: 107:28
    let mut _192: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/backtrace.rs:109:19: 109:39
    let mut _193: std::process::Child;   // in scope 0 at ui/backtrace.rs:109:19: 109:20
    let mut _194: bool;                  // in scope 0 at ui/backtrace.rs:110:9: 110:39
    let mut _195: bool;                  // in scope 0 at ui/backtrace.rs:110:17: 110:38
    let mut _196: bool;                  // in scope 0 at ui/backtrace.rs:110:18: 110:38
    let mut _197: &std::process::ExitStatus; // in scope 0 at ui/backtrace.rs:110:18: 110:38
    let mut _198: !;                     // in scope 0 at ui/backtrace.rs:110:9: 110:39
    let mut _200: std::result::Result<&str, std::str::Utf8Error>; // in scope 0 at ui/backtrace.rs:111:17: 111:44
    let mut _201: &[u8];                 // in scope 0 at ui/backtrace.rs:111:32: 111:43
    let _202: &[u8];                     // in scope 0 at ui/backtrace.rs:111:32: 111:43
    let mut _203: &std::vec::Vec<u8>;    // in scope 0 at ui/backtrace.rs:111:32: 111:43
    let _204: &std::vec::Vec<u8>;        // in scope 0 at ui/backtrace.rs:111:32: 111:43
    let mut _206: std::ops::Range<i32>;  // in scope 0 at ui/backtrace.rs:113:18: 113:22
    let mut _207: std::ops::Range<i32>;  // in scope 0 at ui/backtrace.rs:113:18: 113:22
    let mut _209: std::option::Option<i32>; // in scope 0 at ui/backtrace.rs:113:18: 113:22
    let mut _210: &mut std::ops::Range<i32>; // in scope 0 at ui/backtrace.rs:113:18: 113:22
    let mut _211: &mut std::ops::Range<i32>; // in scope 0 at ui/backtrace.rs:113:18: 113:22
    let mut _212: isize;                 // in scope 0 at ui/backtrace.rs:113:9: 115:10
    let mut _213: usize;                 // in scope 0 at ui/backtrace.rs:114:18: 114:67
    let mut _214: usize;                 // in scope 0 at ui/backtrace.rs:114:18: 114:62
    let mut _215: std::option::Option<usize>; // in scope 0 at ui/backtrace.rs:114:18: 114:53
    let mut _216: &str;                  // in scope 0 at ui/backtrace.rs:114:18: 114:53
    let _217: &str;                      // in scope 0 at ui/backtrace.rs:114:18: 114:29
    let mut _218: &str;                  // in scope 0 at ui/backtrace.rs:114:18: 114:19
    let mut _219: std::ops::RangeFrom<usize>; // in scope 0 at ui/backtrace.rs:114:20: 114:28
    let mut _220: usize;                 // in scope 0 at ui/backtrace.rs:114:20: 114:26
    let mut _221: usize;                 // in scope 0 at ui/backtrace.rs:114:20: 114:21
    let mut _222: (usize, bool);         // in scope 0 at ui/backtrace.rs:114:20: 114:26
    let mut _223: (usize, bool);         // in scope 0 at ui/backtrace.rs:114:18: 114:67
    let mut _224: (usize, bool);         // in scope 0 at ui/backtrace.rs:114:13: 114:67
    let mut _225: bool;                  // in scope 0 at ui/backtrace.rs:116:9: 117:38
    let mut _226: bool;                  // in scope 0 at ui/backtrace.rs:116:17: 116:62
    let mut _227: &std::option::Option<usize>; // in scope 0 at ui/backtrace.rs:116:17: 116:62
    let _228: std::option::Option<usize>; // in scope 0 at ui/backtrace.rs:116:17: 116:52
    let mut _229: &str;                  // in scope 0 at ui/backtrace.rs:116:17: 116:52
    let _230: &str;                      // in scope 0 at ui/backtrace.rs:116:17: 116:28
    let mut _231: &str;                  // in scope 0 at ui/backtrace.rs:116:17: 116:18
    let mut _232: std::ops::RangeFrom<usize>; // in scope 0 at ui/backtrace.rs:116:19: 116:27
    let mut _233: usize;                 // in scope 0 at ui/backtrace.rs:116:19: 116:25
    let mut _234: usize;                 // in scope 0 at ui/backtrace.rs:116:19: 116:20
    let mut _235: (usize, bool);         // in scope 0 at ui/backtrace.rs:116:19: 116:25
    let mut _236: !;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _237: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _238: &[&str];               // in scope 0 at ui/backtrace.rs:117:17: 117:34
    let mut _239: &[&str; 1];            // in scope 0 at ui/backtrace.rs:117:17: 117:34
    let _240: &[&str; 1];                // in scope 0 at ui/backtrace.rs:117:17: 117:34
    let mut _241: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _242: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _243: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _244: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _245: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/backtrace.rs:117:36: 117:37
    let mut _246: &&str;                 // in scope 0 at ui/backtrace.rs:117:36: 117:37
    let _247: &&str;                     // in scope 0 at ui/backtrace.rs:117:36: 117:37
    let mut _253: bool;                  // in scope 0 at ui/backtrace.rs:118:5: 118:6
    let mut _254: bool;                  // in scope 0 at ui/backtrace.rs:118:5: 118:6
    let mut _255: bool;                  // in scope 0 at ui/backtrace.rs:119:1: 119:2
    let mut _256: bool;                  // in scope 0 at ui/backtrace.rs:119:1: 119:2
    let mut _257: bool;                  // in scope 0 at ui/backtrace.rs:119:1: 119:2
    scope 1 {
        debug p => _2;                   // in scope 1 at ui/backtrace.rs:66:9: 66:10
        let _11: std::process::Output;   // in scope 1 at ui/backtrace.rs:67:9: 67:12
        scope 2 {
            debug out => _11;            // in scope 2 at ui/backtrace.rs:67:9: 67:12
            let _19: &str;               // in scope 2 at ui/backtrace.rs:69:9: 69:10
            scope 3 {
                debug s => _19;          // in scope 3 at ui/backtrace.rs:69:9: 69:10
                let _51: std::process::Child; // in scope 3 at ui/backtrace.rs:77:9: 77:10
                let mut _252: &[&str; 1]; // in scope 3 at ui/backtrace.rs:71:13: 71:29
                scope 4 {
                    debug p => _51;      // in scope 4 at ui/backtrace.rs:77:9: 77:10
                    let _60: std::process::Output; // in scope 4 at ui/backtrace.rs:78:9: 78:12
                    scope 5 {
                        debug out => _60; // in scope 5 at ui/backtrace.rs:78:9: 78:12
                        let _68: &str;   // in scope 5 at ui/backtrace.rs:80:9: 80:10
                        scope 6 {
                            debug s => _68; // in scope 6 at ui/backtrace.rs:80:9: 80:10
                            let _98: std::process::Child; // in scope 6 at ui/backtrace.rs:87:9: 87:10
                            let mut _251: &[&str; 1]; // in scope 6 at ui/backtrace.rs:82:13: 82:30
                            scope 7 {
                                debug p => _98; // in scope 7 at ui/backtrace.rs:87:9: 87:10
                                let _107: std::process::Output; // in scope 7 at ui/backtrace.rs:88:9: 88:12
                                scope 8 {
                                    debug out => _107; // in scope 8 at ui/backtrace.rs:88:9: 88:12
                                    let _115: &str; // in scope 8 at ui/backtrace.rs:90:9: 90:10
                                    scope 9 {
                                        debug s => _115; // in scope 9 at ui/backtrace.rs:90:9: 90:10
                                        let _141: std::process::Child; // in scope 9 at ui/backtrace.rs:97:13: 97:14
                                        let mut _250: &[&str; 1]; // in scope 9 at ui/backtrace.rs:92:13: 92:30
                                        scope 10 {
                                            debug p => _141; // in scope 10 at ui/backtrace.rs:97:13: 97:14
                                            let _148: std::process::Output; // in scope 10 at ui/backtrace.rs:98:13: 98:16
                                            scope 11 {
                                                debug out => _148; // in scope 11 at ui/backtrace.rs:98:13: 98:16
                                                let _156: &str; // in scope 11 at ui/backtrace.rs:100:13: 100:14
                                                scope 12 {
                                                    debug s => _156; // in scope 12 at ui/backtrace.rs:100:13: 100:14
                                                    let _182: std::process::Child; // in scope 12 at ui/backtrace.rs:107:13: 107:14
                                                    let mut _249: &[&str; 1]; // in scope 12 at ui/backtrace.rs:104:17: 104:34
                                                    scope 13 {
                                                        debug p => _182; // in scope 13 at ui/backtrace.rs:107:13: 107:14
                                                        let _191: std::process::Output; // in scope 13 at ui/backtrace.rs:109:13: 109:16
                                                        scope 14 {
                                                            debug out => _191; // in scope 14 at ui/backtrace.rs:109:13: 109:16
                                                            let _199: &str; // in scope 14 at ui/backtrace.rs:111:13: 111:14
                                                            scope 15 {
                                                                debug s => _199; // in scope 15 at ui/backtrace.rs:111:13: 111:14
                                                                let mut _205: usize; // in scope 15 at ui/backtrace.rs:112:13: 112:18
                                                                scope 16 {
                                                                    debug i => _205; // in scope 16 at ui/backtrace.rs:112:13: 112:18
                                                                    let mut _208: std::ops::Range<i32>; // in scope 16 at ui/backtrace.rs:113:18: 113:22
                                                                    let mut _248: &[&str; 1]; // in scope 16 at ui/backtrace.rs:117:17: 117:34
                                                                    scope 17 {
                                                                        debug iter => _208; // in scope 17 at ui/backtrace.rs:113:18: 113:22
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _257 = const false;              // scope 0 at ui/backtrace.rs:66:9: 66:10
        _254 = const false;              // scope 0 at ui/backtrace.rs:66:9: 66:10
        _256 = const false;              // scope 0 at ui/backtrace.rs:66:9: 66:10
        _255 = const false;              // scope 0 at ui/backtrace.rs:66:9: 66:10
        _253 = const false;              // scope 0 at ui/backtrace.rs:66:9: 66:10
        _10 = _1;                        // scope 0 at ui/backtrace.rs:66:22: 66:24
        _9 = template(move _10) -> bb1;  // scope 0 at ui/backtrace.rs:66:13: 66:25
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:66:13: 66:21
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Command {template}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &mut _9;                    // scope 0 at ui/backtrace.rs:66:13: 66:37
        _7 = Command::arg::<&str>(move _8, const "fail") -> [return: bb2, unwind: bb149]; // scope 0 at ui/backtrace.rs:66:13: 66:37
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:66:26: 66:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:66:30: 66:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _6 = &mut (*_7);                 // scope 0 at ui/backtrace.rs:66:13: 66:64
        _5 = Command::env::<&str, &str>(move _6, const "RUST_BACKTRACE", const "1") -> [return: bb3, unwind: bb149]; // scope 0 at ui/backtrace.rs:66:13: 66:64
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:66:38: 66:41
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str, &str) -> &'a mut Command {Command::env::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:66:42: 66:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:66:60: 66:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _4 = &mut (*_5);                 // scope 0 at ui/backtrace.rs:66:13: 66:72
        _3 = Command::spawn(move _4) -> [return: bb4, unwind: bb149]; // scope 0 at ui/backtrace.rs:66:13: 66:72
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:66:65: 66:70
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Child, std::io::Error> {Command::spawn}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = Result::<Child, std::io::Error>::unwrap(move _3) -> [return: bb5, unwind: bb149]; // scope 0 at ui/backtrace.rs:66:13: 66:81
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:66:73: 66:79
                                         // + literal: Const { ty: fn(Result<Child, std::io::Error>) -> Child {Result::<Child, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb5: {
        _257 = const true;               // scope 0 at ui/backtrace.rs:66:80: 66:81
        drop(_9) -> [return: bb6, unwind: bb160]; // scope 0 at ui/backtrace.rs:66:81: 66:82
    }

    bb6: {
        _257 = const false;              // scope 1 at ui/backtrace.rs:67:15: 67:16
        _13 = move _2;                   // scope 1 at ui/backtrace.rs:67:15: 67:16
        _12 = Child::wait_with_output(move _13) -> [return: bb7, unwind: bb160]; // scope 1 at ui/backtrace.rs:67:15: 67:35
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:67:17: 67:33
                                         // + literal: Const { ty: fn(Child) -> Result<Output, std::io::Error> {Child::wait_with_output}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = Result::<Output, std::io::Error>::unwrap(move _12) -> [return: bb8, unwind: bb160]; // scope 1 at ui/backtrace.rs:67:15: 67:44
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:67:36: 67:42
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = &(_11.0: std::process::ExitStatus); // scope 2 at ui/backtrace.rs:68:14: 68:34
        _16 = ExitStatus::success(move _17) -> [return: bb9, unwind: bb148]; // scope 2 at ui/backtrace.rs:68:14: 68:34
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:68:25: 68:32
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = Not(move _16);             // scope 2 at ui/backtrace.rs:68:13: 68:34
        _14 = Not(move _15);             // scope 2 at ui/backtrace.rs:68:5: 68:35
        switchInt(move _14) -> [0: bb11, otherwise: bb10]; // scope 2 at ui/backtrace.rs:68:5: 68:35
    }

    bb10: {
        _18 = core::panicking::panic(const "assertion failed: !out.status.success()") -> bb148; // scope 2 at ui/backtrace.rs:68:5: 68:35
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:68:5: 68:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        _24 = &(_11.2: std::vec::Vec<u8>); // scope 2 at ui/backtrace.rs:69:28: 69:39
        _23 = _24;                       // scope 2 at ui/backtrace.rs:69:28: 69:39
        _22 = <Vec<u8> as Deref>::deref(move _23) -> [return: bb12, unwind: bb148]; // scope 2 at ui/backtrace.rs:69:28: 69:39
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:69:28: 69:39
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb12: {
        _21 = _22;                       // scope 2 at ui/backtrace.rs:69:28: 69:39
        _20 = from_utf8(move _21) -> [return: bb13, unwind: bb148]; // scope 2 at ui/backtrace.rs:69:13: 69:40
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:69:13: 69:27
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Result<&'a str, Utf8Error> {from_utf8}, val: Value(<ZST>) }
    }

    bb13: {
        _19 = Result::<&str, Utf8Error>::unwrap(move _20) -> [return: bb14, unwind: bb148]; // scope 2 at ui/backtrace.rs:69:13: 69:49
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:69:41: 69:47
                                         // + literal: Const { ty: fn(Result<&str, Utf8Error>) -> &str {Result::<&str, Utf8Error>::unwrap}, val: Value(<ZST>) }
    }

    bb14: {
        _28 = _19;                       // scope 3 at ui/backtrace.rs:70:13: 70:42
        _27 = core::str::<impl str>::contains::<'_, &str>(move _28, const "stack backtrace") -> [return: bb18, unwind: bb148]; // scope 3 at ui/backtrace.rs:70:13: 70:42
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:70:15: 70:23
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:70:24: 70:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _26 = const false;               // scope 3 at ui/backtrace.rs:70:13: 70:74
        goto -> bb17;                    // scope 3 at ui/backtrace.rs:70:13: 70:74
    }

    bb16: {
        _30 = _19;                       // scope 3 at ui/backtrace.rs:70:46: 70:74
        _34 = const "foo";               // scope 3 at ui/backtrace.rs:70:67: 70:72
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:70:67: 70:72
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _33 = _34;                       // scope 3 at ui/backtrace.rs:70:67: 70:72
        _32 = expected(move _33) -> [return: bb19, unwind: bb148]; // scope 3 at ui/backtrace.rs:70:58: 70:73
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:70:58: 70:66
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {expected}, val: Value(<ZST>) }
    }

    bb17: {
        _25 = Not(move _26);             // scope 3 at ui/backtrace.rs:70:5: 71:33
        switchInt(move _25) -> [0: bb25, otherwise: bb22]; // scope 3 at ui/backtrace.rs:70:5: 71:33
    }

    bb18: {
        switchInt(move _27) -> [0: bb15, otherwise: bb16]; // scope 3 at ui/backtrace.rs:70:13: 70:74
    }

    bb19: {
        _31 = &_32;                      // scope 3 at ui/backtrace.rs:70:57: 70:73
        _29 = core::str::<impl str>::contains::<'_, &String>(move _30, move _31) -> [return: bb20, unwind: bb147]; // scope 3 at ui/backtrace.rs:70:46: 70:74
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:70:48: 70:56
                                         // + literal: Const { ty: fn(&str, &String) -> bool {core::str::<impl str>::contains::<'_, &String>}, val: Value(<ZST>) }
    }

    bb20: {
        drop(_32) -> [return: bb21, unwind: bb148]; // scope 3 at ui/backtrace.rs:70:73: 70:74
    }

    bb21: {
        _26 = move _29;                  // scope 3 at ui/backtrace.rs:70:13: 70:74
        goto -> bb17;                    // scope 3 at ui/backtrace.rs:70:13: 70:74
    }

    bb22: {
        _252 = const _;                  // scope 3 at ui/backtrace.rs:71:13: 71:29
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:71:13: 71:29
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(runtest, [], Some(promoted[4])) }
        _39 = _252;                      // scope 3 at ui/backtrace.rs:71:13: 71:29
        _38 = _39;                       // scope 3 at ui/backtrace.rs:71:13: 71:29
        _37 = move _38 as &[&str] (Pointer(Unsize)); // scope 3 at ui/backtrace.rs:71:13: 71:29
        _46 = &_19;                      // scope 3 at ui/backtrace.rs:71:31: 71:32
        _45 = _46;                       // scope 3 at ui/backtrace.rs:71:31: 71:32
        _44 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _45) -> [return: bb23, unwind: bb148]; // scope 3 at ui/backtrace.rs:71:31: 71:32
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:71:31: 71:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb23: {
        _43 = [move _44];                // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _42 = &_43;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _41 = _42;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _40 = move _41 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _36 = Arguments::<'_>::new_v1(move _37, move _40) -> [return: bb24, unwind: bb148]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb24: {
        _35 = panic_fmt(move _36) -> bb148; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb25: {
        _49 = _19;                       // scope 3 at ui/backtrace.rs:72:13: 72:30
        _48 = core::str::<impl str>::contains::<'_, &str>(move _49, const " 0:") -> [return: bb26, unwind: bb148]; // scope 3 at ui/backtrace.rs:72:13: 72:30
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:72:15: 72:23
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:72:24: 72:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb26: {
        _47 = Not(move _48);             // scope 3 at ui/backtrace.rs:72:5: 72:69
        switchInt(move _47) -> [0: bb28, otherwise: bb27]; // scope 3 at ui/backtrace.rs:72:5: 72:69
    }

    bb27: {
        _50 = begin_panic::<&str>(const "the frame number should start at 0") -> bb148; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:72:32: 72:68
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb28: {
        _59 = _1;                        // scope 3 at ui/backtrace.rs:77:22: 77:24
        _58 = template(move _59) -> [return: bb29, unwind: bb148]; // scope 3 at ui/backtrace.rs:77:13: 77:25
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:77:13: 77:21
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Command {template}, val: Value(<ZST>) }
    }

    bb29: {
        _57 = &mut _58;                  // scope 3 at ui/backtrace.rs:77:13: 77:37
        _56 = Command::arg::<&str>(move _57, const "fail") -> [return: bb30, unwind: bb146]; // scope 3 at ui/backtrace.rs:77:13: 77:37
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:77:26: 77:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:77:30: 77:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        _55 = &mut (*_56);               // scope 3 at ui/backtrace.rs:77:13: 77:66
        _54 = Command::env_remove::<&str>(move _55, const "RUST_BACKTRACE") -> [return: bb31, unwind: bb146]; // scope 3 at ui/backtrace.rs:77:13: 77:66
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:77:38: 77:48
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::env_remove::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:77:49: 77:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb31: {
        _53 = &mut (*_54);               // scope 3 at ui/backtrace.rs:77:13: 77:74
        _52 = Command::spawn(move _53) -> [return: bb32, unwind: bb146]; // scope 3 at ui/backtrace.rs:77:13: 77:74
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:77:67: 77:72
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Child, std::io::Error> {Command::spawn}, val: Value(<ZST>) }
    }

    bb32: {
        _51 = Result::<Child, std::io::Error>::unwrap(move _52) -> [return: bb33, unwind: bb146]; // scope 3 at ui/backtrace.rs:77:13: 77:83
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:77:75: 77:81
                                         // + literal: Const { ty: fn(Result<Child, std::io::Error>) -> Child {Result::<Child, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb33: {
        _256 = const true;               // scope 3 at ui/backtrace.rs:77:82: 77:83
        drop(_58) -> [return: bb34, unwind: bb158]; // scope 3 at ui/backtrace.rs:77:83: 77:84
    }

    bb34: {
        _256 = const false;              // scope 4 at ui/backtrace.rs:78:15: 78:16
        _62 = move _51;                  // scope 4 at ui/backtrace.rs:78:15: 78:16
        _61 = Child::wait_with_output(move _62) -> [return: bb35, unwind: bb158]; // scope 4 at ui/backtrace.rs:78:15: 78:35
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:78:17: 78:33
                                         // + literal: Const { ty: fn(Child) -> Result<Output, std::io::Error> {Child::wait_with_output}, val: Value(<ZST>) }
    }

    bb35: {
        _60 = Result::<Output, std::io::Error>::unwrap(move _61) -> [return: bb36, unwind: bb158]; // scope 4 at ui/backtrace.rs:78:15: 78:44
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:78:36: 78:42
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb36: {
        _66 = &(_60.0: std::process::ExitStatus); // scope 5 at ui/backtrace.rs:79:14: 79:34
        _65 = ExitStatus::success(move _66) -> [return: bb37, unwind: bb145]; // scope 5 at ui/backtrace.rs:79:14: 79:34
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:79:25: 79:32
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb37: {
        _64 = Not(move _65);             // scope 5 at ui/backtrace.rs:79:13: 79:34
        _63 = Not(move _64);             // scope 5 at ui/backtrace.rs:79:5: 79:35
        switchInt(move _63) -> [0: bb39, otherwise: bb38]; // scope 5 at ui/backtrace.rs:79:5: 79:35
    }

    bb38: {
        _67 = core::panicking::panic(const "assertion failed: !out.status.success()") -> bb145; // scope 5 at ui/backtrace.rs:79:5: 79:35
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:79:5: 79:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb39: {
        _73 = &(_60.2: std::vec::Vec<u8>); // scope 5 at ui/backtrace.rs:80:28: 80:39
        _72 = _73;                       // scope 5 at ui/backtrace.rs:80:28: 80:39
        _71 = <Vec<u8> as Deref>::deref(move _72) -> [return: bb40, unwind: bb145]; // scope 5 at ui/backtrace.rs:80:28: 80:39
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:80:28: 80:39
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb40: {
        _70 = _71;                       // scope 5 at ui/backtrace.rs:80:28: 80:39
        _69 = from_utf8(move _70) -> [return: bb41, unwind: bb145]; // scope 5 at ui/backtrace.rs:80:13: 80:40
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:80:13: 80:27
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Result<&'a str, Utf8Error> {from_utf8}, val: Value(<ZST>) }
    }

    bb41: {
        _68 = Result::<&str, Utf8Error>::unwrap(move _69) -> [return: bb42, unwind: bb145]; // scope 5 at ui/backtrace.rs:80:13: 80:49
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:80:41: 80:47
                                         // + literal: Const { ty: fn(Result<&str, Utf8Error>) -> &str {Result::<&str, Utf8Error>::unwrap}, val: Value(<ZST>) }
    }

    bb42: {
        _78 = _68;                       // scope 6 at ui/backtrace.rs:81:14: 81:43
        _77 = core::str::<impl str>::contains::<'_, &str>(move _78, const "stack backtrace") -> [return: bb46, unwind: bb145]; // scope 6 at ui/backtrace.rs:81:14: 81:43
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:81:16: 81:24
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:81:25: 81:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb43: {
        _75 = const false;               // scope 6 at ui/backtrace.rs:81:13: 81:76
        goto -> bb45;                    // scope 6 at ui/backtrace.rs:81:13: 81:76
    }

    bb44: {
        _81 = _68;                       // scope 6 at ui/backtrace.rs:81:48: 81:76
        _85 = const "foo";               // scope 6 at ui/backtrace.rs:81:69: 81:74
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:81:69: 81:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _84 = _85;                       // scope 6 at ui/backtrace.rs:81:69: 81:74
        _83 = expected(move _84) -> [return: bb47, unwind: bb145]; // scope 6 at ui/backtrace.rs:81:60: 81:75
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:81:60: 81:68
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {expected}, val: Value(<ZST>) }
    }

    bb45: {
        _74 = Not(move _75);             // scope 6 at ui/backtrace.rs:81:5: 82:34
        switchInt(move _74) -> [0: bb53, otherwise: bb50]; // scope 6 at ui/backtrace.rs:81:5: 82:34
    }

    bb46: {
        _76 = Not(move _77);             // scope 6 at ui/backtrace.rs:81:13: 81:43
        switchInt(move _76) -> [0: bb43, otherwise: bb44]; // scope 6 at ui/backtrace.rs:81:13: 81:76
    }

    bb47: {
        _82 = &_83;                      // scope 6 at ui/backtrace.rs:81:59: 81:75
        _80 = core::str::<impl str>::contains::<'_, &String>(move _81, move _82) -> [return: bb48, unwind: bb144]; // scope 6 at ui/backtrace.rs:81:48: 81:76
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:81:50: 81:58
                                         // + literal: Const { ty: fn(&str, &String) -> bool {core::str::<impl str>::contains::<'_, &String>}, val: Value(<ZST>) }
    }

    bb48: {
        _79 = Not(move _80);             // scope 6 at ui/backtrace.rs:81:47: 81:76
        drop(_83) -> [return: bb49, unwind: bb145]; // scope 6 at ui/backtrace.rs:81:75: 81:76
    }

    bb49: {
        _75 = move _79;                  // scope 6 at ui/backtrace.rs:81:13: 81:76
        goto -> bb45;                    // scope 6 at ui/backtrace.rs:81:13: 81:76
    }

    bb50: {
        _251 = const _;                  // scope 6 at ui/backtrace.rs:82:13: 82:30
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:82:13: 82:30
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(runtest, [], Some(promoted[3])) }
        _90 = _251;                      // scope 6 at ui/backtrace.rs:82:13: 82:30
        _89 = _90;                       // scope 6 at ui/backtrace.rs:82:13: 82:30
        _88 = move _89 as &[&str] (Pointer(Unsize)); // scope 6 at ui/backtrace.rs:82:13: 82:30
        _97 = &_68;                      // scope 6 at ui/backtrace.rs:82:32: 82:33
        _96 = _97;                       // scope 6 at ui/backtrace.rs:82:32: 82:33
        _95 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _96) -> [return: bb51, unwind: bb145]; // scope 6 at ui/backtrace.rs:82:32: 82:33
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:82:32: 82:33
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb51: {
        _94 = [move _95];                // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _93 = &_94;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _92 = _93;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _91 = move _92 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _87 = Arguments::<'_>::new_v1(move _88, move _91) -> [return: bb52, unwind: bb145]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb52: {
        _86 = panic_fmt(move _87) -> bb145; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb53: {
        _106 = _1;                       // scope 6 at ui/backtrace.rs:87:22: 87:24
        _105 = template(move _106) -> [return: bb54, unwind: bb145]; // scope 6 at ui/backtrace.rs:87:13: 87:25
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:87:13: 87:21
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Command {template}, val: Value(<ZST>) }
    }

    bb54: {
        _104 = &mut _105;                // scope 6 at ui/backtrace.rs:87:13: 87:37
        _103 = Command::arg::<&str>(move _104, const "fail") -> [return: bb55, unwind: bb143]; // scope 6 at ui/backtrace.rs:87:13: 87:37
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:87:26: 87:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:87:30: 87:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb55: {
        _102 = &mut (*_103);             // scope 6 at ui/backtrace.rs:87:13: 87:63
        _101 = Command::env::<&str, &str>(move _102, const "RUST_BACKTRACE", const "0") -> [return: bb56, unwind: bb143]; // scope 6 at ui/backtrace.rs:87:13: 87:63
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:87:38: 87:41
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str, &str) -> &'a mut Command {Command::env::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:87:42: 87:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:87:59: 87:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb56: {
        _100 = &mut (*_101);             // scope 6 at ui/backtrace.rs:87:13: 87:71
        _99 = Command::spawn(move _100) -> [return: bb57, unwind: bb143]; // scope 6 at ui/backtrace.rs:87:13: 87:71
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:87:64: 87:69
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Child, std::io::Error> {Command::spawn}, val: Value(<ZST>) }
    }

    bb57: {
        _98 = Result::<Child, std::io::Error>::unwrap(move _99) -> [return: bb58, unwind: bb143]; // scope 6 at ui/backtrace.rs:87:13: 87:80
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:87:72: 87:78
                                         // + literal: Const { ty: fn(Result<Child, std::io::Error>) -> Child {Result::<Child, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb58: {
        _255 = const true;               // scope 6 at ui/backtrace.rs:87:79: 87:80
        drop(_105) -> [return: bb59, unwind: bb156]; // scope 6 at ui/backtrace.rs:87:80: 87:81
    }

    bb59: {
        _255 = const false;              // scope 7 at ui/backtrace.rs:88:15: 88:16
        _109 = move _98;                 // scope 7 at ui/backtrace.rs:88:15: 88:16
        _108 = Child::wait_with_output(move _109) -> [return: bb60, unwind: bb156]; // scope 7 at ui/backtrace.rs:88:15: 88:35
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:88:17: 88:33
                                         // + literal: Const { ty: fn(Child) -> Result<Output, std::io::Error> {Child::wait_with_output}, val: Value(<ZST>) }
    }

    bb60: {
        _107 = Result::<Output, std::io::Error>::unwrap(move _108) -> [return: bb61, unwind: bb156]; // scope 7 at ui/backtrace.rs:88:15: 88:44
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:88:36: 88:42
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb61: {
        _113 = &(_107.0: std::process::ExitStatus); // scope 8 at ui/backtrace.rs:89:14: 89:34
        _112 = ExitStatus::success(move _113) -> [return: bb62, unwind: bb142]; // scope 8 at ui/backtrace.rs:89:14: 89:34
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:89:25: 89:32
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb62: {
        _111 = Not(move _112);           // scope 8 at ui/backtrace.rs:89:13: 89:34
        _110 = Not(move _111);           // scope 8 at ui/backtrace.rs:89:5: 89:35
        switchInt(move _110) -> [0: bb64, otherwise: bb63]; // scope 8 at ui/backtrace.rs:89:5: 89:35
    }

    bb63: {
        _114 = core::panicking::panic(const "assertion failed: !out.status.success()") -> bb142; // scope 8 at ui/backtrace.rs:89:5: 89:35
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:89:5: 89:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb64: {
        _120 = &(_107.2: std::vec::Vec<u8>); // scope 8 at ui/backtrace.rs:90:28: 90:39
        _119 = _120;                     // scope 8 at ui/backtrace.rs:90:28: 90:39
        _118 = <Vec<u8> as Deref>::deref(move _119) -> [return: bb65, unwind: bb142]; // scope 8 at ui/backtrace.rs:90:28: 90:39
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:90:28: 90:39
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb65: {
        _117 = _118;                     // scope 8 at ui/backtrace.rs:90:28: 90:39
        _116 = from_utf8(move _117) -> [return: bb66, unwind: bb142]; // scope 8 at ui/backtrace.rs:90:13: 90:40
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:90:13: 90:27
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Result<&'a str, Utf8Error> {from_utf8}, val: Value(<ZST>) }
    }

    bb66: {
        _115 = Result::<&str, Utf8Error>::unwrap(move _116) -> [return: bb67, unwind: bb142]; // scope 8 at ui/backtrace.rs:90:13: 90:49
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:90:41: 90:47
                                         // + literal: Const { ty: fn(Result<&str, Utf8Error>) -> &str {Result::<&str, Utf8Error>::unwrap}, val: Value(<ZST>) }
    }

    bb67: {
        _125 = _115;                     // scope 9 at ui/backtrace.rs:91:14: 91:43
        _124 = core::str::<impl str>::contains::<'_, &str>(move _125, const "stack backtrace") -> [return: bb71, unwind: bb142]; // scope 9 at ui/backtrace.rs:91:14: 91:43
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:91:16: 91:24
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:91:25: 91:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb68: {
        _122 = const false;              // scope 9 at ui/backtrace.rs:91:13: 91:68
        goto -> bb70;                    // scope 9 at ui/backtrace.rs:91:13: 91:68
    }

    bb69: {
        _128 = _115;                     // scope 9 at ui/backtrace.rs:91:48: 91:68
        _127 = core::str::<impl str>::contains::<'_, &str>(move _128, const " - foo") -> [return: bb72, unwind: bb142]; // scope 9 at ui/backtrace.rs:91:48: 91:68
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:91:50: 91:58
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:91:59: 91:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb70: {
        _121 = Not(move _122);           // scope 9 at ui/backtrace.rs:91:5: 92:34
        switchInt(move _121) -> [0: bb76, otherwise: bb73]; // scope 9 at ui/backtrace.rs:91:5: 92:34
    }

    bb71: {
        _123 = Not(move _124);           // scope 9 at ui/backtrace.rs:91:13: 91:43
        switchInt(move _123) -> [0: bb68, otherwise: bb69]; // scope 9 at ui/backtrace.rs:91:13: 91:68
    }

    bb72: {
        _126 = Not(move _127);           // scope 9 at ui/backtrace.rs:91:47: 91:68
        _122 = move _126;                // scope 9 at ui/backtrace.rs:91:13: 91:68
        goto -> bb70;                    // scope 9 at ui/backtrace.rs:91:13: 91:68
    }

    bb73: {
        _250 = const _;                  // scope 9 at ui/backtrace.rs:92:13: 92:30
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:92:13: 92:30
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(runtest, [], Some(promoted[2])) }
        _133 = _250;                     // scope 9 at ui/backtrace.rs:92:13: 92:30
        _132 = _133;                     // scope 9 at ui/backtrace.rs:92:13: 92:30
        _131 = move _132 as &[&str] (Pointer(Unsize)); // scope 9 at ui/backtrace.rs:92:13: 92:30
        _140 = &_115;                    // scope 9 at ui/backtrace.rs:92:32: 92:33
        _139 = _140;                     // scope 9 at ui/backtrace.rs:92:32: 92:33
        _138 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _139) -> [return: bb74, unwind: bb142]; // scope 9 at ui/backtrace.rs:92:32: 92:33
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:92:32: 92:33
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb74: {
        _137 = [move _138];              // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _136 = &_137;                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _135 = _136;                     // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _134 = move _135 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _130 = Arguments::<'_>::new_v1(move _131, move _134) -> [return: bb75, unwind: bb142]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb75: {
        _129 = panic_fmt(move _130) -> bb142; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb76: {
        _147 = _1;                       // scope 9 at ui/backtrace.rs:97:26: 97:28
        _146 = template(move _147) -> [return: bb77, unwind: bb142]; // scope 9 at ui/backtrace.rs:97:17: 97:29
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:97:17: 97:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Command {template}, val: Value(<ZST>) }
    }

    bb77: {
        _145 = &mut _146;                // scope 9 at ui/backtrace.rs:97:17: 97:48
        _144 = Command::arg::<&str>(move _145, const "double-fail") -> [return: bb78, unwind: bb141]; // scope 9 at ui/backtrace.rs:97:17: 97:48
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:97:30: 97:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:97:34: 97:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb78: {
        _143 = &mut (*_144);             // scope 9 at ui/backtrace.rs:97:17: 97:56
        _142 = Command::spawn(move _143) -> [return: bb79, unwind: bb141]; // scope 9 at ui/backtrace.rs:97:17: 97:56
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:97:49: 97:54
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Child, std::io::Error> {Command::spawn}, val: Value(<ZST>) }
    }

    bb79: {
        _141 = Result::<Child, std::io::Error>::unwrap(move _142) -> [return: bb80, unwind: bb141]; // scope 9 at ui/backtrace.rs:97:17: 97:65
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:97:57: 97:63
                                         // + literal: Const { ty: fn(Result<Child, std::io::Error>) -> Child {Result::<Child, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb80: {
        _254 = const true;               // scope 9 at ui/backtrace.rs:97:64: 97:65
        drop(_146) -> [return: bb81, unwind: bb154]; // scope 9 at ui/backtrace.rs:97:65: 97:66
    }

    bb81: {
        _254 = const false;              // scope 10 at ui/backtrace.rs:98:19: 98:20
        _150 = move _141;                // scope 10 at ui/backtrace.rs:98:19: 98:20
        _149 = Child::wait_with_output(move _150) -> [return: bb82, unwind: bb154]; // scope 10 at ui/backtrace.rs:98:19: 98:39
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:98:21: 98:37
                                         // + literal: Const { ty: fn(Child) -> Result<Output, std::io::Error> {Child::wait_with_output}, val: Value(<ZST>) }
    }

    bb82: {
        _148 = Result::<Output, std::io::Error>::unwrap(move _149) -> [return: bb83, unwind: bb154]; // scope 10 at ui/backtrace.rs:98:19: 98:48
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:98:40: 98:46
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb83: {
        _154 = &(_148.0: std::process::ExitStatus); // scope 11 at ui/backtrace.rs:99:18: 99:38
        _153 = ExitStatus::success(move _154) -> [return: bb84, unwind: bb140]; // scope 11 at ui/backtrace.rs:99:18: 99:38
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:99:29: 99:36
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb84: {
        _152 = Not(move _153);           // scope 11 at ui/backtrace.rs:99:17: 99:38
        _151 = Not(move _152);           // scope 11 at ui/backtrace.rs:99:9: 99:39
        switchInt(move _151) -> [0: bb86, otherwise: bb85]; // scope 11 at ui/backtrace.rs:99:9: 99:39
    }

    bb85: {
        _155 = core::panicking::panic(const "assertion failed: !out.status.success()") -> bb140; // scope 11 at ui/backtrace.rs:99:9: 99:39
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:99:9: 99:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb86: {
        _161 = &(_148.2: std::vec::Vec<u8>); // scope 11 at ui/backtrace.rs:100:32: 100:43
        _160 = _161;                     // scope 11 at ui/backtrace.rs:100:32: 100:43
        _159 = <Vec<u8> as Deref>::deref(move _160) -> [return: bb87, unwind: bb140]; // scope 11 at ui/backtrace.rs:100:32: 100:43
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:100:32: 100:43
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb87: {
        _158 = _159;                     // scope 11 at ui/backtrace.rs:100:32: 100:43
        _157 = from_utf8(move _158) -> [return: bb88, unwind: bb140]; // scope 11 at ui/backtrace.rs:100:17: 100:44
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:100:17: 100:31
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Result<&'a str, Utf8Error> {from_utf8}, val: Value(<ZST>) }
    }

    bb88: {
        _156 = Result::<&str, Utf8Error>::unwrap(move _157) -> [return: bb89, unwind: bb140]; // scope 11 at ui/backtrace.rs:100:17: 100:53
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:100:45: 100:51
                                         // + literal: Const { ty: fn(Result<&str, Utf8Error>) -> &str {Result::<&str, Utf8Error>::unwrap}, val: Value(<ZST>) }
    }

    bb89: {
        _165 = _156;                     // scope 12 at ui/backtrace.rs:103:17: 103:46
        _164 = core::str::<impl str>::contains::<'_, &str>(move _165, const "stack backtrace") -> [return: bb93, unwind: bb140]; // scope 12 at ui/backtrace.rs:103:17: 103:46
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:103:19: 103:27
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:103:28: 103:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb90: {
        _163 = const false;              // scope 12 at ui/backtrace.rs:103:17: 103:88
        goto -> bb92;                    // scope 12 at ui/backtrace.rs:103:17: 103:88
    }

    bb91: {
        _167 = _156;                     // scope 12 at ui/backtrace.rs:103:76: 103:77
        _169 = const "double";           // scope 12 at ui/backtrace.rs:103:79: 103:87
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:103:79: 103:87
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _168 = _169;                     // scope 12 at ui/backtrace.rs:103:79: 103:87
        _166 = contains_verbose_expected(move _167, move _168) -> [return: bb94, unwind: bb140]; // scope 12 at ui/backtrace.rs:103:50: 103:88
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:103:50: 103:75
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {contains_verbose_expected}, val: Value(<ZST>) }
    }

    bb92: {
        _162 = Not(move _163);           // scope 12 at ui/backtrace.rs:103:9: 104:38
        switchInt(move _162) -> [0: bb98, otherwise: bb95]; // scope 12 at ui/backtrace.rs:103:9: 104:38
    }

    bb93: {
        switchInt(move _164) -> [0: bb90, otherwise: bb91]; // scope 12 at ui/backtrace.rs:103:17: 103:88
    }

    bb94: {
        _163 = move _166;                // scope 12 at ui/backtrace.rs:103:17: 103:88
        goto -> bb92;                    // scope 12 at ui/backtrace.rs:103:17: 103:88
    }

    bb95: {
        _249 = const _;                  // scope 12 at ui/backtrace.rs:104:17: 104:34
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:104:17: 104:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(runtest, [], Some(promoted[1])) }
        _174 = _249;                     // scope 12 at ui/backtrace.rs:104:17: 104:34
        _173 = _174;                     // scope 12 at ui/backtrace.rs:104:17: 104:34
        _172 = move _173 as &[&str] (Pointer(Unsize)); // scope 12 at ui/backtrace.rs:104:17: 104:34
        _181 = &_156;                    // scope 12 at ui/backtrace.rs:104:36: 104:37
        _180 = _181;                     // scope 12 at ui/backtrace.rs:104:36: 104:37
        _179 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _180) -> [return: bb96, unwind: bb140]; // scope 12 at ui/backtrace.rs:104:36: 104:37
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:104:36: 104:37
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb96: {
        _178 = [move _179];              // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _177 = &_178;                    // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _176 = _177;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _175 = move _176 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _171 = Arguments::<'_>::new_v1(move _172, move _175) -> [return: bb97, unwind: bb140]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb97: {
        _170 = panic_fmt(move _171) -> bb140; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb98: {
        _190 = _1;                       // scope 12 at ui/backtrace.rs:107:26: 107:28
        _189 = template(move _190) -> [return: bb99, unwind: bb140]; // scope 12 at ui/backtrace.rs:107:17: 107:29
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:107:17: 107:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Command {template}, val: Value(<ZST>) }
    }

    bb99: {
        _188 = &mut _189;                // scope 12 at ui/backtrace.rs:107:17: 107:48
        _187 = Command::arg::<&str>(move _188, const "double-fail") -> [return: bb100, unwind: bb139]; // scope 12 at ui/backtrace.rs:107:17: 107:48
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:107:30: 107:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:107:34: 107:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb100: {
        _186 = &mut (*_187);             // scope 12 at ui/backtrace.rs:107:17: 108:64
        _185 = Command::env::<&str, &str>(move _186, const "RUST_BACKTRACE", const "1") -> [return: bb101, unwind: bb139]; // scope 12 at ui/backtrace.rs:107:17: 108:64
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:108:38: 108:41
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str, &str) -> &'a mut Command {Command::env::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:108:42: 108:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:108:60: 108:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb101: {
        _184 = &mut (*_185);             // scope 12 at ui/backtrace.rs:107:17: 108:72
        _183 = Command::spawn(move _184) -> [return: bb102, unwind: bb139]; // scope 12 at ui/backtrace.rs:107:17: 108:72
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:108:65: 108:70
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Child, std::io::Error> {Command::spawn}, val: Value(<ZST>) }
    }

    bb102: {
        _182 = Result::<Child, std::io::Error>::unwrap(move _183) -> [return: bb103, unwind: bb139]; // scope 12 at ui/backtrace.rs:107:17: 108:81
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:108:73: 108:79
                                         // + literal: Const { ty: fn(Result<Child, std::io::Error>) -> Child {Result::<Child, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb103: {
        _253 = const true;               // scope 12 at ui/backtrace.rs:108:80: 108:81
        drop(_189) -> [return: bb104, unwind: bb152]; // scope 12 at ui/backtrace.rs:108:81: 108:82
    }

    bb104: {
        _253 = const false;              // scope 13 at ui/backtrace.rs:109:19: 109:20
        _193 = move _182;                // scope 13 at ui/backtrace.rs:109:19: 109:20
        _192 = Child::wait_with_output(move _193) -> [return: bb105, unwind: bb152]; // scope 13 at ui/backtrace.rs:109:19: 109:39
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:109:21: 109:37
                                         // + literal: Const { ty: fn(Child) -> Result<Output, std::io::Error> {Child::wait_with_output}, val: Value(<ZST>) }
    }

    bb105: {
        _191 = Result::<Output, std::io::Error>::unwrap(move _192) -> [return: bb106, unwind: bb152]; // scope 13 at ui/backtrace.rs:109:19: 109:48
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:109:40: 109:46
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb106: {
        _197 = &(_191.0: std::process::ExitStatus); // scope 14 at ui/backtrace.rs:110:18: 110:38
        _196 = ExitStatus::success(move _197) -> [return: bb107, unwind: bb138]; // scope 14 at ui/backtrace.rs:110:18: 110:38
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:110:29: 110:36
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb107: {
        _195 = Not(move _196);           // scope 14 at ui/backtrace.rs:110:17: 110:38
        _194 = Not(move _195);           // scope 14 at ui/backtrace.rs:110:9: 110:39
        switchInt(move _194) -> [0: bb109, otherwise: bb108]; // scope 14 at ui/backtrace.rs:110:9: 110:39
    }

    bb108: {
        _198 = core::panicking::panic(const "assertion failed: !out.status.success()") -> bb138; // scope 14 at ui/backtrace.rs:110:9: 110:39
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:110:9: 110:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb109: {
        _204 = &(_191.2: std::vec::Vec<u8>); // scope 14 at ui/backtrace.rs:111:32: 111:43
        _203 = _204;                     // scope 14 at ui/backtrace.rs:111:32: 111:43
        _202 = <Vec<u8> as Deref>::deref(move _203) -> [return: bb110, unwind: bb138]; // scope 14 at ui/backtrace.rs:111:32: 111:43
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:111:32: 111:43
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb110: {
        _201 = _202;                     // scope 14 at ui/backtrace.rs:111:32: 111:43
        _200 = from_utf8(move _201) -> [return: bb111, unwind: bb138]; // scope 14 at ui/backtrace.rs:111:17: 111:44
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:111:17: 111:31
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Result<&'a str, Utf8Error> {from_utf8}, val: Value(<ZST>) }
    }

    bb111: {
        _199 = Result::<&str, Utf8Error>::unwrap(move _200) -> [return: bb112, unwind: bb138]; // scope 14 at ui/backtrace.rs:111:17: 111:53
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:111:45: 111:51
                                         // + literal: Const { ty: fn(Result<&str, Utf8Error>) -> &str {Result::<&str, Utf8Error>::unwrap}, val: Value(<ZST>) }
    }

    bb112: {
        _205 = const 0_usize;            // scope 15 at ui/backtrace.rs:112:21: 112:22
        _207 = std::ops::Range::<i32> { start: const 0_i32, end: const 2_i32 }; // scope 16 at ui/backtrace.rs:113:18: 113:22
        _206 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _207) -> [return: bb113, unwind: bb138]; // scope 16 at ui/backtrace.rs:113:18: 113:22
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:113:18: 113:22
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb113: {
        _208 = move _206;                // scope 16 at ui/backtrace.rs:113:18: 113:22
        goto -> bb114;                   // scope 17 at ui/backtrace.rs:113:9: 115:10
    }

    bb114: {
        _211 = &mut _208;                // scope 17 at ui/backtrace.rs:113:18: 113:22
        _210 = &mut (*_211);             // scope 17 at ui/backtrace.rs:113:18: 113:22
        _209 = <std::ops::Range<i32> as Iterator>::next(move _210) -> [return: bb115, unwind: bb138]; // scope 17 at ui/backtrace.rs:113:18: 113:22
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:113:18: 113:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb115: {
        _212 = discriminant(_209);       // scope 17 at ui/backtrace.rs:113:18: 113:22
        switchInt(move _212) -> [0: bb118, 1: bb116, otherwise: bb117]; // scope 17 at ui/backtrace.rs:113:18: 113:22
    }

    bb116: {
        _218 = _199;                     // scope 17 at ui/backtrace.rs:114:18: 114:19
        _221 = _205;                     // scope 17 at ui/backtrace.rs:114:20: 114:21
        _222 = CheckedAdd(_221, const 10_usize); // scope 17 at ui/backtrace.rs:114:20: 114:26
        assert(!move (_222.1: bool), "attempt to compute `{} + {}`, which would overflow", move _221, const 10_usize) -> [success: bb119, unwind: bb138]; // scope 17 at ui/backtrace.rs:114:20: 114:26
    }

    bb117: {
        unreachable;                     // scope 17 at ui/backtrace.rs:113:18: 113:22
    }

    bb118: {
        _231 = _199;                     // scope 16 at ui/backtrace.rs:116:17: 116:18
        _234 = _205;                     // scope 16 at ui/backtrace.rs:116:19: 116:20
        _235 = CheckedAdd(_234, const 10_usize); // scope 16 at ui/backtrace.rs:116:19: 116:25
        assert(!move (_235.1: bool), "attempt to compute `{} + {}`, which would overflow", move _234, const 10_usize) -> [success: bb125, unwind: bb138]; // scope 16 at ui/backtrace.rs:116:19: 116:25
    }

    bb119: {
        _220 = move (_222.0: usize);     // scope 17 at ui/backtrace.rs:114:20: 114:26
        _219 = RangeFrom::<usize> { start: move _220 }; // scope 17 at ui/backtrace.rs:114:20: 114:28
        _217 = <str as Index<RangeFrom<usize>>>::index(move _218, move _219) -> [return: bb120, unwind: bb138]; // scope 17 at ui/backtrace.rs:114:18: 114:29
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:114:18: 114:29
                                         // + literal: Const { ty: for<'a> fn(&'a str, RangeFrom<usize>) -> &'a <str as Index<RangeFrom<usize>>>::Output {<str as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb120: {
        _216 = _217;                     // scope 17 at ui/backtrace.rs:114:18: 114:53
        _215 = core::str::<impl str>::find::<'_, &str>(move _216, const "stack backtrace") -> [return: bb121, unwind: bb138]; // scope 17 at ui/backtrace.rs:114:18: 114:53
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:114:30: 114:34
                                         // + literal: Const { ty: fn(&str, &str) -> Option<usize> {core::str::<impl str>::find::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:114:35: 114:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb121: {
        _214 = Option::<usize>::unwrap(move _215) -> [return: bb122, unwind: bb138]; // scope 17 at ui/backtrace.rs:114:18: 114:62
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:114:54: 114:60
                                         // + literal: Const { ty: fn(Option<usize>) -> usize {Option::<usize>::unwrap}, val: Value(<ZST>) }
    }

    bb122: {
        _223 = CheckedAdd(_214, const 10_usize); // scope 17 at ui/backtrace.rs:114:18: 114:67
        assert(!move (_223.1: bool), "attempt to compute `{} + {}`, which would overflow", move _214, const 10_usize) -> [success: bb123, unwind: bb138]; // scope 17 at ui/backtrace.rs:114:18: 114:67
    }

    bb123: {
        _213 = move (_223.0: usize);     // scope 17 at ui/backtrace.rs:114:18: 114:67
        _224 = CheckedAdd(_205, _213);   // scope 17 at ui/backtrace.rs:114:13: 114:67
        assert(!move (_224.1: bool), "attempt to compute `{} + {}`, which would overflow", _205, move _213) -> [success: bb124, unwind: bb138]; // scope 17 at ui/backtrace.rs:114:13: 114:67
    }

    bb124: {
        _205 = move (_224.0: usize);     // scope 17 at ui/backtrace.rs:114:13: 114:67
        goto -> bb114;                   // scope 17 at ui/backtrace.rs:113:9: 115:10
    }

    bb125: {
        _233 = move (_235.0: usize);     // scope 16 at ui/backtrace.rs:116:19: 116:25
        _232 = RangeFrom::<usize> { start: move _233 }; // scope 16 at ui/backtrace.rs:116:19: 116:27
        _230 = <str as Index<RangeFrom<usize>>>::index(move _231, move _232) -> [return: bb126, unwind: bb138]; // scope 16 at ui/backtrace.rs:116:17: 116:28
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:116:17: 116:28
                                         // + literal: Const { ty: for<'a> fn(&'a str, RangeFrom<usize>) -> &'a <str as Index<RangeFrom<usize>>>::Output {<str as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb126: {
        _229 = _230;                     // scope 16 at ui/backtrace.rs:116:17: 116:52
        _228 = core::str::<impl str>::find::<'_, &str>(move _229, const "stack backtrace") -> [return: bb127, unwind: bb138]; // scope 16 at ui/backtrace.rs:116:17: 116:52
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:116:29: 116:33
                                         // + literal: Const { ty: fn(&str, &str) -> Option<usize> {core::str::<impl str>::find::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:116:34: 116:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb127: {
        _227 = &_228;                    // scope 16 at ui/backtrace.rs:116:17: 116:62
        _226 = Option::<usize>::is_none(move _227) -> [return: bb128, unwind: bb138]; // scope 16 at ui/backtrace.rs:116:17: 116:62
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:116:53: 116:60
                                         // + literal: Const { ty: for<'a> fn(&'a Option<usize>) -> bool {Option::<usize>::is_none}, val: Value(<ZST>) }
    }

    bb128: {
        _225 = Not(move _226);           // scope 16 at ui/backtrace.rs:116:9: 117:38
        switchInt(move _225) -> [0: bb132, otherwise: bb129]; // scope 16 at ui/backtrace.rs:116:9: 117:38
    }

    bb129: {
        _248 = const _;                  // scope 16 at ui/backtrace.rs:117:17: 117:34
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:117:17: 117:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(runtest, [], Some(promoted[0])) }
        _240 = _248;                     // scope 16 at ui/backtrace.rs:117:17: 117:34
        _239 = _240;                     // scope 16 at ui/backtrace.rs:117:17: 117:34
        _238 = move _239 as &[&str] (Pointer(Unsize)); // scope 16 at ui/backtrace.rs:117:17: 117:34
        _247 = &_199;                    // scope 16 at ui/backtrace.rs:117:36: 117:37
        _246 = _247;                     // scope 16 at ui/backtrace.rs:117:36: 117:37
        _245 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _246) -> [return: bb130, unwind: bb138]; // scope 16 at ui/backtrace.rs:117:36: 117:37
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:117:36: 117:37
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb130: {
        _244 = [move _245];              // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _243 = &_244;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _242 = _243;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _241 = move _242 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _237 = Arguments::<'_>::new_v1(move _238, move _241) -> [return: bb131, unwind: bb138]; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb131: {
        _236 = panic_fmt(move _237) -> bb138; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb132: {
        drop(_191) -> [return: bb133, unwind: bb152]; // scope 13 at ui/backtrace.rs:118:5: 118:6
    }

    bb133: {
        _253 = const false;              // scope 12 at ui/backtrace.rs:118:5: 118:6
        drop(_148) -> [return: bb134, unwind: bb154]; // scope 10 at ui/backtrace.rs:118:5: 118:6
    }

    bb134: {
        _254 = const false;              // scope 9 at ui/backtrace.rs:118:5: 118:6
        drop(_107) -> [return: bb135, unwind: bb156]; // scope 7 at ui/backtrace.rs:119:1: 119:2
    }

    bb135: {
        _255 = const false;              // scope 6 at ui/backtrace.rs:119:1: 119:2
        drop(_60) -> [return: bb136, unwind: bb158]; // scope 4 at ui/backtrace.rs:119:1: 119:2
    }

    bb136: {
        _256 = const false;              // scope 3 at ui/backtrace.rs:119:1: 119:2
        drop(_11) -> [return: bb137, unwind: bb160]; // scope 1 at ui/backtrace.rs:119:1: 119:2
    }

    bb137: {
        _257 = const false;              // scope 0 at ui/backtrace.rs:119:1: 119:2
        return;                          // scope 0 at ui/backtrace.rs:119:2: 119:2
    }

    bb138 (cleanup): {
        drop(_191) -> bb152;             // scope 13 at ui/backtrace.rs:118:5: 118:6
    }

    bb139 (cleanup): {
        drop(_189) -> bb140;             // scope 12 at ui/backtrace.rs:108:81: 108:82
    }

    bb140 (cleanup): {
        drop(_148) -> bb154;             // scope 10 at ui/backtrace.rs:118:5: 118:6
    }

    bb141 (cleanup): {
        drop(_146) -> bb142;             // scope 9 at ui/backtrace.rs:97:65: 97:66
    }

    bb142 (cleanup): {
        drop(_107) -> bb156;             // scope 7 at ui/backtrace.rs:119:1: 119:2
    }

    bb143 (cleanup): {
        drop(_105) -> bb145;             // scope 6 at ui/backtrace.rs:87:80: 87:81
    }

    bb144 (cleanup): {
        drop(_83) -> bb145;              // scope 6 at ui/backtrace.rs:81:75: 81:76
    }

    bb145 (cleanup): {
        drop(_60) -> bb158;              // scope 4 at ui/backtrace.rs:119:1: 119:2
    }

    bb146 (cleanup): {
        drop(_58) -> bb148;              // scope 3 at ui/backtrace.rs:77:83: 77:84
    }

    bb147 (cleanup): {
        drop(_32) -> bb148;              // scope 3 at ui/backtrace.rs:70:73: 70:74
    }

    bb148 (cleanup): {
        drop(_11) -> bb160;              // scope 1 at ui/backtrace.rs:119:1: 119:2
    }

    bb149 (cleanup): {
        drop(_9) -> bb150;               // scope 0 at ui/backtrace.rs:66:81: 66:82
    }

    bb150 (cleanup): {
        resume;                          // scope 0 at ui/backtrace.rs:64:1: 119:2
    }

    bb151 (cleanup): {
        drop(_182) -> bb140;             // scope 12 at ui/backtrace.rs:118:5: 118:6
    }

    bb152 (cleanup): {
        switchInt(_253) -> [0: bb140, otherwise: bb151]; // scope 12 at ui/backtrace.rs:118:5: 118:6
    }

    bb153 (cleanup): {
        drop(_141) -> bb142;             // scope 9 at ui/backtrace.rs:118:5: 118:6
    }

    bb154 (cleanup): {
        switchInt(_254) -> [0: bb142, otherwise: bb153]; // scope 9 at ui/backtrace.rs:118:5: 118:6
    }

    bb155 (cleanup): {
        drop(_98) -> bb145;              // scope 6 at ui/backtrace.rs:119:1: 119:2
    }

    bb156 (cleanup): {
        switchInt(_255) -> [0: bb145, otherwise: bb155]; // scope 6 at ui/backtrace.rs:119:1: 119:2
    }

    bb157 (cleanup): {
        drop(_51) -> bb148;              // scope 3 at ui/backtrace.rs:119:1: 119:2
    }

    bb158 (cleanup): {
        switchInt(_256) -> [0: bb148, otherwise: bb157]; // scope 3 at ui/backtrace.rs:119:1: 119:2
    }

    bb159 (cleanup): {
        drop(_2) -> bb150;               // scope 0 at ui/backtrace.rs:119:1: 119:2
    }

    bb160 (cleanup): {
        switchInt(_257) -> [0: bb150, otherwise: bb159]; // scope 0 at ui/backtrace.rs:119:1: 119:2
    }
}

promoted[0] in runtest: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/backtrace.rs:117:17: 117:34
    let mut _1: [&str; 1];               // in scope 0 at ui/backtrace.rs:117:17: 117:34

    bb0: {
        _1 = [const "bad output4: "];    // scope 0 at ui/backtrace.rs:117:17: 117:34
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:117:17: 117:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/backtrace.rs:117:17: 117:34
        return;                          // scope 0 at ui/backtrace.rs:117:17: 117:34
    }
}

promoted[1] in runtest: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/backtrace.rs:104:17: 104:34
    let mut _1: [&str; 1];               // in scope 0 at ui/backtrace.rs:104:17: 104:34

    bb0: {
        _1 = [const "bad output3: "];    // scope 0 at ui/backtrace.rs:104:17: 104:34
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:104:17: 104:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/backtrace.rs:104:17: 104:34
        return;                          // scope 0 at ui/backtrace.rs:104:17: 104:34
    }
}

promoted[2] in runtest: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/backtrace.rs:92:13: 92:30
    let mut _1: [&str; 1];               // in scope 0 at ui/backtrace.rs:92:13: 92:30

    bb0: {
        _1 = [const "bad output3: "];    // scope 0 at ui/backtrace.rs:92:13: 92:30
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:92:13: 92:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/backtrace.rs:92:13: 92:30
        return;                          // scope 0 at ui/backtrace.rs:92:13: 92:30
    }
}

promoted[3] in runtest: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/backtrace.rs:82:13: 82:30
    let mut _1: [&str; 1];               // in scope 0 at ui/backtrace.rs:82:13: 82:30

    bb0: {
        _1 = [const "bad output2: "];    // scope 0 at ui/backtrace.rs:82:13: 82:30
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:82:13: 82:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/backtrace.rs:82:13: 82:30
        return;                          // scope 0 at ui/backtrace.rs:82:13: 82:30
    }
}

promoted[4] in runtest: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/backtrace.rs:71:13: 71:29
    let mut _1: [&str; 1];               // in scope 0 at ui/backtrace.rs:71:13: 71:29

    bb0: {
        _1 = [const "bad output: "];     // scope 0 at ui/backtrace.rs:71:13: 71:29
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:71:13: 71:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/backtrace.rs:71:13: 71:29
        return;                          // scope 0 at ui/backtrace.rs:71:13: 71:29
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/backtrace.rs:121:11: 121:11
    let _1: std::vec::Vec<std::string::String>; // in scope 0 at ui/backtrace.rs:122:9: 122:13
    let mut _2: std::env::Args;          // in scope 0 at ui/backtrace.rs:122:29: 122:40
    let mut _3: bool;                    // in scope 0 at ui/backtrace.rs:123:8: 123:44
    let mut _4: bool;                    // in scope 0 at ui/backtrace.rs:123:8: 123:23
    let mut _5: usize;                   // in scope 0 at ui/backtrace.rs:123:8: 123:18
    let mut _6: &std::vec::Vec<std::string::String>; // in scope 0 at ui/backtrace.rs:123:8: 123:18
    let mut _7: bool;                    // in scope 0 at ui/backtrace.rs:123:27: 123:44
    let mut _8: &std::string::String;    // in scope 0 at ui/backtrace.rs:123:27: 123:34
    let _9: &std::string::String;        // in scope 0 at ui/backtrace.rs:123:27: 123:34
    let mut _10: &std::vec::Vec<std::string::String>; // in scope 0 at ui/backtrace.rs:123:27: 123:31
    let mut _11: &&str;                  // in scope 0 at ui/backtrace.rs:123:38: 123:44
    let _12: ();                         // in scope 0 at ui/backtrace.rs:124:9: 124:14
    let mut _13: bool;                   // in scope 0 at ui/backtrace.rs:125:15: 125:58
    let mut _14: bool;                   // in scope 0 at ui/backtrace.rs:125:15: 125:30
    let mut _15: usize;                  // in scope 0 at ui/backtrace.rs:125:15: 125:25
    let mut _16: &std::vec::Vec<std::string::String>; // in scope 0 at ui/backtrace.rs:125:15: 125:25
    let mut _17: bool;                   // in scope 0 at ui/backtrace.rs:125:34: 125:58
    let mut _18: &std::string::String;   // in scope 0 at ui/backtrace.rs:125:34: 125:41
    let _19: &std::string::String;       // in scope 0 at ui/backtrace.rs:125:34: 125:41
    let mut _20: &std::vec::Vec<std::string::String>; // in scope 0 at ui/backtrace.rs:125:34: 125:38
    let mut _21: &&str;                  // in scope 0 at ui/backtrace.rs:125:45: 125:58
    let _22: ();                         // in scope 0 at ui/backtrace.rs:126:9: 126:17
    let _23: ();                         // in scope 0 at ui/backtrace.rs:128:9: 128:26
    let mut _24: &str;                   // in scope 0 at ui/backtrace.rs:128:17: 128:25
    let _25: &str;                       // in scope 0 at ui/backtrace.rs:128:17: 128:25
    let mut _26: &std::string::String;   // in scope 0 at ui/backtrace.rs:128:17: 128:25
    let _27: &std::string::String;       // in scope 0 at ui/backtrace.rs:128:17: 128:25
    let _28: &std::string::String;       // in scope 0 at ui/backtrace.rs:128:18: 128:25
    let mut _29: &std::vec::Vec<std::string::String>; // in scope 0 at ui/backtrace.rs:128:18: 128:22
    scope 1 {
        debug args => _1;                // in scope 1 at ui/backtrace.rs:122:9: 122:13
        let mut _30: &&str;              // in scope 1 at ui/backtrace.rs:125:45: 125:58
        let mut _31: &&str;              // in scope 1 at ui/backtrace.rs:123:38: 123:44
    }

    bb0: {
        _2 = args() -> bb1;              // scope 0 at ui/backtrace.rs:122:29: 122:40
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:122:29: 122:38
                                         // + literal: Const { ty: fn() -> Args {args}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> bb2; // scope 0 at ui/backtrace.rs:122:29: 122:50
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:122:41: 122:48
                                         // + literal: Const { ty: fn(Args) -> Vec<String> {<Args as Iterator>::collect::<Vec<String>>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &_1;                        // scope 1 at ui/backtrace.rs:123:8: 123:18
        _5 = Vec::<String>::len(move _6) -> [return: bb6, unwind: bb23]; // scope 1 at ui/backtrace.rs:123:8: 123:18
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:123:13: 123:16
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> usize {Vec::<String>::len}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = const false;                // scope 1 at ui/backtrace.rs:123:8: 123:44
        goto -> bb5;                     // scope 1 at ui/backtrace.rs:123:8: 123:44
    }

    bb4: {
        _10 = &_1;                       // scope 1 at ui/backtrace.rs:123:27: 123:31
        _9 = <Vec<String> as Index<usize>>::index(move _10, const 1_usize) -> [return: bb7, unwind: bb23]; // scope 1 at ui/backtrace.rs:123:27: 123:34
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:123:27: 123:34
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, usize) -> &'a <Vec<String> as Index<usize>>::Output {<Vec<String> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb5: {
        switchInt(move _3) -> [0: bb10, otherwise: bb9]; // scope 1 at ui/backtrace.rs:123:8: 123:44
    }

    bb6: {
        _4 = Ge(move _5, const 2_usize); // scope 1 at ui/backtrace.rs:123:8: 123:23
        switchInt(move _4) -> [0: bb3, otherwise: bb4]; // scope 1 at ui/backtrace.rs:123:8: 123:44
    }

    bb7: {
        _8 = _9;                         // scope 1 at ui/backtrace.rs:123:27: 123:34
        _31 = const _;                   // scope 1 at ui/backtrace.rs:123:38: 123:44
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:123:38: 123:44
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[1])) }
        _11 = _31;                       // scope 1 at ui/backtrace.rs:123:38: 123:44
        _7 = <String as PartialEq<&str>>::eq(move _8, move _11) -> [return: bb8, unwind: bb23]; // scope 1 at ui/backtrace.rs:123:27: 123:44
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:123:27: 123:44
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _3 = move _7;                    // scope 1 at ui/backtrace.rs:123:8: 123:44
        goto -> bb5;                     // scope 1 at ui/backtrace.rs:123:8: 123:44
    }

    bb9: {
        _12 = foo() -> [return: bb25, unwind: bb23]; // scope 1 at ui/backtrace.rs:124:9: 124:14
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:124:9: 124:12
                                         // + literal: Const { ty: fn() {foo}, val: Value(<ZST>) }
    }

    bb10: {
        _16 = &_1;                       // scope 1 at ui/backtrace.rs:125:15: 125:25
        _15 = Vec::<String>::len(move _16) -> [return: bb14, unwind: bb23]; // scope 1 at ui/backtrace.rs:125:15: 125:25
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:125:20: 125:23
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> usize {Vec::<String>::len}, val: Value(<ZST>) }
    }

    bb11: {
        _13 = const false;               // scope 1 at ui/backtrace.rs:125:15: 125:58
        goto -> bb13;                    // scope 1 at ui/backtrace.rs:125:15: 125:58
    }

    bb12: {
        _20 = &_1;                       // scope 1 at ui/backtrace.rs:125:34: 125:38
        _19 = <Vec<String> as Index<usize>>::index(move _20, const 1_usize) -> [return: bb15, unwind: bb23]; // scope 1 at ui/backtrace.rs:125:34: 125:41
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:125:34: 125:41
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, usize) -> &'a <Vec<String> as Index<usize>>::Output {<Vec<String> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb13: {
        switchInt(move _13) -> [0: bb18, otherwise: bb17]; // scope 1 at ui/backtrace.rs:125:15: 125:58
    }

    bb14: {
        _14 = Ge(move _15, const 2_usize); // scope 1 at ui/backtrace.rs:125:15: 125:30
        switchInt(move _14) -> [0: bb11, otherwise: bb12]; // scope 1 at ui/backtrace.rs:125:15: 125:58
    }

    bb15: {
        _18 = _19;                       // scope 1 at ui/backtrace.rs:125:34: 125:41
        _30 = const _;                   // scope 1 at ui/backtrace.rs:125:45: 125:58
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:125:45: 125:58
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _21 = _30;                       // scope 1 at ui/backtrace.rs:125:45: 125:58
        _17 = <String as PartialEq<&str>>::eq(move _18, move _21) -> [return: bb16, unwind: bb23]; // scope 1 at ui/backtrace.rs:125:34: 125:58
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:125:34: 125:58
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb16: {
        _13 = move _17;                  // scope 1 at ui/backtrace.rs:125:15: 125:58
        goto -> bb13;                    // scope 1 at ui/backtrace.rs:125:15: 125:58
    }

    bb17: {
        _22 = double() -> [return: bb26, unwind: bb23]; // scope 1 at ui/backtrace.rs:126:9: 126:17
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:126:9: 126:15
                                         // + literal: Const { ty: fn() {double}, val: Value(<ZST>) }
    }

    bb18: {
        _29 = &_1;                       // scope 1 at ui/backtrace.rs:128:18: 128:22
        _28 = <Vec<String> as Index<usize>>::index(move _29, const 0_usize) -> [return: bb19, unwind: bb23]; // scope 1 at ui/backtrace.rs:128:18: 128:25
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:128:18: 128:25
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, usize) -> &'a <Vec<String> as Index<usize>>::Output {<Vec<String> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb19: {
        _27 = _28;                       // scope 1 at ui/backtrace.rs:128:17: 128:25
        _26 = _27;                       // scope 1 at ui/backtrace.rs:128:17: 128:25
        _25 = <String as Deref>::deref(move _26) -> [return: bb20, unwind: bb23]; // scope 1 at ui/backtrace.rs:128:17: 128:25
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:128:17: 128:25
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb20: {
        _24 = _25;                       // scope 1 at ui/backtrace.rs:128:17: 128:25
        _23 = runtest(move _24) -> [return: bb27, unwind: bb23]; // scope 1 at ui/backtrace.rs:128:9: 128:26
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:128:9: 128:16
                                         // + literal: Const { ty: for<'a> fn(&'a str) {runtest}, val: Value(<ZST>) }
    }

    bb21: {
        drop(_1) -> bb22;                // scope 0 at ui/backtrace.rs:130:1: 130:2
    }

    bb22: {
        return;                          // scope 0 at ui/backtrace.rs:130:2: 130:2
    }

    bb23 (cleanup): {
        drop(_1) -> bb24;                // scope 0 at ui/backtrace.rs:130:1: 130:2
    }

    bb24 (cleanup): {
        resume;                          // scope 0 at ui/backtrace.rs:121:1: 130:2
    }

    bb25: {
        goto -> bb21;                    // scope 1 at ui/backtrace.rs:124:9: 124:14
    }

    bb26: {
        goto -> bb21;                    // scope 1 at ui/backtrace.rs:126:9: 126:17
    }

    bb27: {
        goto -> bb21;                    // scope 1 at ui/backtrace.rs:128:9: 128:26
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/backtrace.rs:125:45: 125:58
    let mut _1: &str;                    // in scope 0 at ui/backtrace.rs:125:45: 125:58

    bb0: {
        _1 = const "double-fail";        // scope 0 at ui/backtrace.rs:125:45: 125:58
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:125:45: 125:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/backtrace.rs:125:45: 125:58
        return;                          // scope 0 at ui/backtrace.rs:125:45: 125:58
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/backtrace.rs:123:38: 123:44
    let mut _1: &str;                    // in scope 0 at ui/backtrace.rs:123:38: 123:44

    bb0: {
        _1 = const "fail";               // scope 0 at ui/backtrace.rs:123:38: 123:44
                                         // mir::Constant
                                         // + span: ui/backtrace.rs:123:38: 123:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/backtrace.rs:123:38: 123:44
        return;                          // scope 0 at ui/backtrace.rs:123:38: 123:44
    }
}
