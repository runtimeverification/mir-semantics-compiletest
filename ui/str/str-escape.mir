// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &str;
    let mut _2: (&&str, &&str);
    let mut _3: &&str;
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: (&&str, &&str);
    let mut _13: &&str;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: (&&str, &&str);
    let mut _23: &&str;
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&&str, &&str);
    let mut _33: &&str;
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: (&&str, &&str);
    let mut _43: &&str;
    let mut _46: bool;
    let mut _47: bool;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug s => const "";
        let _4: &&str;
        let _5: &&str;
        let _11: &str;
        let mut _55: &&str;
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _8: core::panicking::AssertKind;
            scope 3 {
                debug kind => _8;
            }
        }
        scope 4 {
            debug s => const "foo\u{a0}          bar\n             ";
            let _14: &&str;
            let _15: &&str;
            let _21: &str;
            let mut _54: &&str;
            scope 5 {
                debug left_val => _14;
                debug right_val => _15;
                let _18: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _18;
                }
            }
            scope 7 {
                debug s => const "ab";
                let _24: &&str;
                let _25: &&str;
                let _31: &str;
                let mut _53: &&str;
                scope 8 {
                    debug left_val => _24;
                    debug right_val => _25;
                    let _28: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _28;
                    }
                }
                scope 10 {
                    debug s => const "ab";
                    let _34: &&str;
                    let _35: &&str;
                    let _41: &str;
                    let mut _52: &&str;
                    scope 11 {
                        debug left_val => _34;
                        debug right_val => _35;
                        let _38: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _38;
                        }
                    }
                    scope 13 {
                        debug s => const "a\u{c}b";
                        let _44: &&str;
                        let _45: &&str;
                        let mut _51: &&str;
                        scope 14 {
                            debug left_val => _44;
                            debug right_val => _45;
                            let _48: core::panicking::AssertKind;
                            scope 15 {
                                debug kind => _48;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const "";
        _3 = &_1;
        _55 = const _;
        _2 = (move _3, _55);
        _4 = (_2.0: &&str);
        _5 = (_2.1: &&str);
        _7 = <&str as PartialEq>::eq(_4, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<&str, &str>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb3: {
        _11 = const "foo\u{a0}          bar\n             ";
        _13 = &_11;
        _54 = const _;
        _12 = (move _13, _54);
        _14 = (_12.0: &&str);
        _15 = (_12.1: &&str);
        _17 = <&str as PartialEq>::eq(_14, _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<&str, &str>(move _18, _14, _15, move _20) -> unwind continue;
    }

    bb6: {
        _21 = const "ab";
        _23 = &_21;
        _53 = const _;
        _22 = (move _23, _53);
        _24 = (_22.0: &&str);
        _25 = (_22.1: &&str);
        _27 = <&str as PartialEq>::eq(_24, _25) -> [return: bb7, unwind continue];
    }

    bb7: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<&str, &str>(move _28, _24, _25, move _30) -> unwind continue;
    }

    bb9: {
        _31 = const "ab";
        _33 = &_31;
        _52 = const _;
        _32 = (move _33, _52);
        _34 = (_32.0: &&str);
        _35 = (_32.1: &&str);
        _37 = <&str as PartialEq>::eq(_34, _35) -> [return: bb10, unwind continue];
    }

    bb10: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<&str, &str>(move _38, _34, _35, move _40) -> unwind continue;
    }

    bb12: {
        _41 = const "a\u{c}b";
        _43 = &_41;
        _51 = const _;
        _42 = (move _43, _51);
        _44 = (_42.0: &&str);
        _45 = (_42.1: &&str);
        _47 = <&str as PartialEq>::eq(_44, _45) -> [return: bb13, unwind continue];
    }

    bb13: {
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<&str, &str>(move _48, _44, _45, move _50) -> unwind continue;
    }

    bb15: {
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "a\u{c}b";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "ab";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "ab";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "foo\u{a0}          bar\n             ";
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "";
        _0 = &_1;
        return;
    }
}
