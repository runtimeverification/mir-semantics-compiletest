// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn InsufficientlyConstrainedGeneric::return_the_constrained_type(_1: &Self, _2: X) -> ConstrainedStruct<X> {
    debug self => _1;                    // in scope 0 at ui/trait-impl-bound-suggestions_fixed.rs:14:36: 14:41
    debug x => _2;                       // in scope 0 at ui/trait-impl-bound-suggestions_fixed.rs:14:43: 14:44
    let mut _0: ConstrainedStruct<X>;    // return place in scope 0 at ui/trait-impl-bound-suggestions_fixed.rs:14:52: 14:72
    let mut _3: X;                       // in scope 0 at ui/trait-impl-bound-suggestions_fixed.rs:16:29: 16:30

    bb0: {
        _3 = _2;                         // scope 0 at ui/trait-impl-bound-suggestions_fixed.rs:16:29: 16:30
        _0 = ConstrainedStruct::<X> { x: move _3 }; // scope 0 at ui/trait-impl-bound-suggestions_fixed.rs:16:9: 16:32
        return;                          // scope 0 at ui/trait-impl-bound-suggestions_fixed.rs:17:6: 17:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/trait-impl-bound-suggestions_fixed.rs:20:15: 20:15

    bb0: {
        return;                          // scope 0 at ui/trait-impl-bound-suggestions_fixed.rs:20:18: 20:18
    }
}
