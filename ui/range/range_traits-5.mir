// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/range/range_traits-5.rs:5:16: 5:21>::clone(_1: &R) -> R {
    debug self => _1;                    // in scope 0 at ui/range/range_traits-5.rs:5:16: 5:21
    let mut _0: R;                       // return place in scope 0 at ui/range/range_traits-5.rs:5:16: 5:21
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/range/range_traits-5.rs:5:21: 5:21
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/range/range_traits-5.rs:9:11: 9:11

    bb0: {
        return;                          // scope 0 at ui/range/range_traits-5.rs:9:13: 9:13
    }
}

fn R(_1: std::ops::RangeFull) -> R {
    let mut _0: R;                       // return place in scope 0 at ui/range/range_traits-5.rs:6:1: 6:9

    bb0: {
        _0 = R(move _1);                 // scope 0 at ui/range/range_traits-5.rs:6:1: 6:9
        return;                          // scope 0 at ui/range/range_traits-5.rs:6:1: 6:9
    }
}

// MIR FOR CTFE
fn R(_1: std::ops::RangeFull) -> R {
    let mut _0: R;                       // return place in scope 0 at ui/range/range_traits-5.rs:6:1: 6:9

    bb0: {
        _0 = R(move _1);                 // scope 0 at ui/range/range_traits-5.rs:6:1: 6:9
        return;                          // scope 0 at ui/range/range_traits-5.rs:6:1: 6:9
    }
}
