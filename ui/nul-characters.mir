// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &str;
    let mut _5: (&usize, &usize);
    let mut _6: &usize;
    let _7: usize;
    let mut _8: &str;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&usize, &usize);
    let mut _19: &usize;
    let _20: usize;
    let mut _21: &str;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: usize;
    let mut _27: usize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&&str, &&str);
    let mut _32: &&str;
    let mut _33: &&str;
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&&str, &&str);
    let mut _42: &&str;
    let mut _43: &&str;
    let mut _46: bool;
    let mut _47: bool;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&&str, &&str);
    let mut _52: &&str;
    let mut _53: &&str;
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: std::str::Chars<'_>;
    let mut _62: std::str::Chars<'_>;
    let mut _63: &str;
    let mut _65: std::option::Option<char>;
    let mut _66: &mut std::str::Chars<'_>;
    let mut _67: isize;
    let mut _69: std::str::Chars<'_>;
    let mut _70: std::str::Chars<'_>;
    let mut _71: &str;
    let mut _73: std::option::Option<char>;
    let mut _74: &mut std::str::Chars<'_>;
    let mut _75: isize;
    let mut _77: (&char, &char);
    let mut _78: &char;
    let mut _79: &char;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: char;
    let mut _85: char;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _89: (&char, &char);
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: char;
    let mut _95: char;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&char, &char);
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: char;
    let mut _105: char;
    let _107: !;
    let mut _108: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _109: (&char, &char);
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: char;
    let mut _115: char;
    let _117: !;
    let mut _118: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _119: bool;
    let mut _120: bool;
    let mut _121: !;
    let mut _122: bool;
    let mut _123: bool;
    let mut _124: !;
    scope 1 {
        debug all_nuls1 => const "\0\0\0\0";
        let _2: &str;
        scope 2 {
            debug all_nuls2 => const "\0\0\0\0";
            let _3: &str;
            scope 3 {
                debug all_nuls3 => const "\0\0\0\0";
                let _4: &str;
                scope 4 {
                    debug all_nuls4 => const "\0\0\0\0";
                    let _9: &usize;
                    let _10: &usize;
                    let _22: &usize;
                    let _23: &usize;
                    let _34: &&str;
                    let _35: &&str;
                    let _44: &&str;
                    let _45: &&str;
                    let _54: &&str;
                    let _55: &&str;
                    let mut _64: std::str::Chars<'_>;
                    let _90: &char;
                    let _91: &char;
                    let _100: &char;
                    let _101: &char;
                    let _110: &char;
                    let _111: &char;
                    let mut _125: &&str;
                    let mut _126: &&str;
                    let mut _127: &&str;
                    let mut _128: &&str;
                    let mut _129: &char;
                    let mut _130: &char;
                    let mut _131: &char;
                    let mut _132: &char;
                    let mut _133: &char;
                    let mut _134: &char;
                    let mut _135: &usize;
                    let mut _136: &usize;
                    scope 5 {
                        debug left_val => _9;
                        debug right_val => _10;
                        let _15: core::panicking::AssertKind;
                        scope 6 {
                            debug kind => _15;
                        }
                    }
                    scope 7 {
                        debug left_val => _22;
                        debug right_val => _23;
                        let _28: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _28;
                        }
                    }
                    scope 9 {
                        debug left_val => _34;
                        debug right_val => _35;
                        let _38: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _38;
                        }
                    }
                    scope 11 {
                        debug left_val => _44;
                        debug right_val => _45;
                        let _48: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _48;
                        }
                    }
                    scope 13 {
                        debug left_val => _54;
                        debug right_val => _55;
                        let _58: core::panicking::AssertKind;
                        scope 14 {
                            debug kind => _58;
                        }
                    }
                    scope 15 {
                        debug iter => _64;
                        let _68: char;
                        scope 16 {
                            debug c1 => _68;
                            let mut _72: std::str::Chars<'_>;
                            scope 17 {
                                debug iter => _72;
                                let _76: char;
                                scope 18 {
                                    debug c2 => _76;
                                    let _80: &char;
                                    let _81: &char;
                                    scope 19 {
                                        debug left_val => _80;
                                        debug right_val => _81;
                                        let _86: core::panicking::AssertKind;
                                        scope 20 {
                                            debug kind => _86;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 21 {
                        debug left_val => _90;
                        debug right_val => _91;
                        let _96: core::panicking::AssertKind;
                        scope 22 {
                            debug kind => _96;
                        }
                    }
                    scope 23 {
                        debug left_val => _100;
                        debug right_val => _101;
                        let _106: core::panicking::AssertKind;
                        scope 24 {
                            debug kind => _106;
                        }
                    }
                    scope 25 {
                        debug left_val => _110;
                        debug right_val => _111;
                        let _116: core::panicking::AssertKind;
                        scope 26 {
                            debug kind => _116;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const "\0\0\0\0";
        _2 = const "\0\0\0\0";
        _3 = const "\0\0\0\0";
        _4 = const "\0\0\0\0";
        _8 = _1;
        _7 = core::str::<impl str>::len(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_7;
        _136 = const _;
        _5 = (move _6, _136);
        _9 = (_5.0: &usize);
        _10 = (_5.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb3: {
        _21 = _2;
        _20 = core::str::<impl str>::len(move _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        _19 = &_20;
        _135 = const _;
        _18 = (move _19, _135);
        _22 = (_18.0: &usize);
        _23 = (_18.1: &usize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<usize, usize>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _32 = &_1;
        _33 = &_2;
        _31 = (move _32, move _33);
        _34 = (_31.0: &&str);
        _35 = (_31.1: &&str);
        _37 = <&str as PartialEq>::eq(_34, _35) -> [return: bb7, unwind continue];
    }

    bb7: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<&str, &str>(move _38, _34, _35, move _40) -> unwind continue;
    }

    bb9: {
        _42 = &_2;
        _43 = &_3;
        _41 = (move _42, move _43);
        _44 = (_41.0: &&str);
        _45 = (_41.1: &&str);
        _47 = <&str as PartialEq>::eq(_44, _45) -> [return: bb10, unwind continue];
    }

    bb10: {
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<&str, &str>(move _48, _44, _45, move _50) -> unwind continue;
    }

    bb12: {
        _52 = &_3;
        _53 = &_4;
        _51 = (move _52, move _53);
        _54 = (_51.0: &&str);
        _55 = (_51.1: &&str);
        _57 = <&str as PartialEq>::eq(_54, _55) -> [return: bb13, unwind continue];
    }

    bb13: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<&str, &str>(move _58, _54, _55, move _60) -> unwind continue;
    }

    bb15: {
        _63 = _1;
        _62 = core::str::<impl str>::chars(move _63) -> [return: bb16, unwind continue];
    }

    bb16: {
        _61 = <Chars<'_> as IntoIterator>::into_iter(move _62) -> [return: bb17, unwind continue];
    }

    bb17: {
        _64 = move _61;
        goto -> bb18;
    }

    bb18: {
        _66 = &mut _64;
        _65 = <Chars<'_> as Iterator>::next(_66) -> [return: bb19, unwind continue];
    }

    bb19: {
        _67 = discriminant(_65);
        switchInt(move _67) -> [0: bb22, 1: bb20, otherwise: bb21];
    }

    bb20: {
        _68 = ((_65 as Some).0: char);
        _71 = _1;
        _70 = core::str::<impl str>::chars(move _71) -> [return: bb23, unwind continue];
    }

    bb21: {
        unreachable;
    }

    bb22: {
        _134 = const _;
        _133 = const _;
        _89 = (_134, _133);
        _90 = (_89.0: &char);
        _91 = (_89.1: &char);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb30, otherwise: bb29];
    }

    bb23: {
        _69 = <Chars<'_> as IntoIterator>::into_iter(move _70) -> [return: bb24, unwind continue];
    }

    bb24: {
        _72 = move _69;
        goto -> bb25;
    }

    bb25: {
        _74 = &mut _72;
        _73 = <Chars<'_> as Iterator>::next(_74) -> [return: bb26, unwind continue];
    }

    bb26: {
        _75 = discriminant(_73);
        switchInt(move _75) -> [0: bb18, 1: bb27, otherwise: bb21];
    }

    bb27: {
        _76 = ((_73 as Some).0: char);
        _78 = &_68;
        _79 = &_76;
        _77 = (move _78, move _79);
        _80 = (_77.0: &char);
        _81 = (_77.1: &char);
        _84 = (*_80);
        _85 = (*_81);
        _83 = Eq(move _84, move _85);
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb25, otherwise: bb28];
    }

    bb28: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<char, char>(move _86, _80, _81, move _88) -> unwind continue;
    }

    bb29: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<char, char>(move _96, _90, _91, move _98) -> unwind continue;
    }

    bb30: {
        _132 = const _;
        _131 = const _;
        _99 = (_132, _131);
        _100 = (_99.0: &char);
        _101 = (_99.1: &char);
        _104 = (*_100);
        _105 = (*_101);
        _103 = Eq(move _104, move _105);
        _102 = Not(move _103);
        switchInt(move _102) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _106 = core::panicking::AssertKind::Eq;
        _108 = Option::<Arguments<'_>>::None;
        _107 = core::panicking::assert_failed::<char, char>(move _106, _100, _101, move _108) -> unwind continue;
    }

    bb32: {
        _130 = const _;
        _129 = const _;
        _109 = (_130, _129);
        _110 = (_109.0: &char);
        _111 = (_109.1: &char);
        _114 = (*_110);
        _115 = (*_111);
        _113 = Eq(move _114, move _115);
        _112 = Not(move _113);
        switchInt(move _112) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _116 = core::panicking::AssertKind::Eq;
        _118 = Option::<Arguments<'_>>::None;
        _117 = core::panicking::assert_failed::<char, char>(move _116, _110, _111, move _118) -> unwind continue;
    }

    bb34: {
        _128 = const _;
        _127 = const _;
        _120 = <&str as PartialEq>::ne(_128, _127) -> [return: bb35, unwind continue];
    }

    bb35: {
        _119 = Not(move _120);
        switchInt(move _119) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _121 = core::panicking::panic(const "assertion failed: \\\"Hello World\\\" != \\\"Hello \\\\0World\\\"") -> unwind continue;
    }

    bb37: {
        _126 = const _;
        _125 = const _;
        _123 = <&str as PartialEq>::ne(_126, _125) -> [return: bb38, unwind continue];
    }

    bb38: {
        _122 = Not(move _123);
        switchInt(move _122) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _124 = core::panicking::panic(const "assertion failed: \\\"Hello World\\\" != \\\"Hello World\\\\0\\\"") -> unwind continue;
    }

    bb40: {
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Hello World\0";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Hello World";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Hello \0World";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Hello World";
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const '\0';
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const '\0';
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const '\0';
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const '\0';
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const '\0';
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const '\0';
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}
