// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/objects-coerce-freeze-borrored.rs:10:1: 10:19>::foo(_1: &usize) -> usize {
    debug self => _1;                    // in scope 0 at ui/objects-coerce-freeze-borrored.rs:11:12: 11:17
    let mut _0: usize;                   // return place in scope 0 at ui/objects-coerce-freeze-borrored.rs:11:22: 11:27

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/objects-coerce-freeze-borrored.rs:12:9: 12:14
        return;                          // scope 0 at ui/objects-coerce-freeze-borrored.rs:13:6: 13:6
    }
}

fn <impl at ui/objects-coerce-freeze-borrored.rs:10:1: 10:19>::bar(_1: &mut usize) -> usize {
    debug self => _1;                    // in scope 0 at ui/objects-coerce-freeze-borrored.rs:15:12: 15:21
    let mut _0: usize;                   // return place in scope 0 at ui/objects-coerce-freeze-borrored.rs:15:26: 15:31
    let mut _2: (usize, bool);           // in scope 0 at ui/objects-coerce-freeze-borrored.rs:16:9: 16:19

    bb0: {
        _2 = CheckedAdd((*_1), const 1_usize); // scope 0 at ui/objects-coerce-freeze-borrored.rs:16:9: 16:19
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_1), const 1_usize) -> bb1; // scope 0 at ui/objects-coerce-freeze-borrored.rs:16:9: 16:19
    }

    bb1: {
        (*_1) = move (_2.0: usize);      // scope 0 at ui/objects-coerce-freeze-borrored.rs:16:9: 16:19
        _0 = (*_1);                      // scope 0 at ui/objects-coerce-freeze-borrored.rs:17:9: 17:14
        return;                          // scope 0 at ui/objects-coerce-freeze-borrored.rs:18:6: 18:6
    }
}

fn do_it_mut(_1: &mut dyn Foo) -> () {
    debug obj => _1;                     // in scope 0 at ui/objects-coerce-freeze-borrored.rs:21:14: 21:17
    let mut _0: ();                      // return place in scope 0 at ui/objects-coerce-freeze-borrored.rs:21:33: 21:33
    let _2: usize;                       // in scope 0 at ui/objects-coerce-freeze-borrored.rs:22:9: 22:10
    let mut _3: &mut dyn Foo;            // in scope 0 at ui/objects-coerce-freeze-borrored.rs:22:13: 22:22
    let mut _5: &dyn Foo;                // in scope 0 at ui/objects-coerce-freeze-borrored.rs:23:13: 23:22
    let mut _6: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _8: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _23: ();                         // in scope 0 at ui/objects-coerce-freeze-borrored.rs:26:5: 26:22
    let mut _24: &dyn Foo;               // in scope 0 at ui/objects-coerce-freeze-borrored.rs:26:15: 26:18
    let mut _25: &dyn Foo;               // in scope 0 at ui/objects-coerce-freeze-borrored.rs:26:15: 26:18
    let mut _26: usize;                  // in scope 0 at ui/objects-coerce-freeze-borrored.rs:26:20: 26:21
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/objects-coerce-freeze-borrored.rs:22:9: 22:10
        let _4: usize;                   // in scope 1 at ui/objects-coerce-freeze-borrored.rs:23:9: 23:10
        scope 2 {
            debug y => _4;               // in scope 2 at ui/objects-coerce-freeze-borrored.rs:23:9: 23:10
            let _9: &usize;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _10: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _9;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _10;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _15: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _15;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _3 = &mut (*_1);                 // scope 0 at ui/objects-coerce-freeze-borrored.rs:22:13: 22:22
        _2 = <dyn Foo as Foo>::bar(move _3) -> bb1; // scope 0 at ui/objects-coerce-freeze-borrored.rs:22:13: 22:22
                                         // mir::Constant
                                         // + span: ui/objects-coerce-freeze-borrored.rs:22:17: 22:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut dyn Foo) -> usize {<dyn Foo as Foo>::bar}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &(*_1);                     // scope 1 at ui/objects-coerce-freeze-borrored.rs:23:13: 23:22
        _4 = <dyn Foo as Foo>::foo(move _5) -> bb2; // scope 1 at ui/objects-coerce-freeze-borrored.rs:23:13: 23:22
                                         // mir::Constant
                                         // + span: ui/objects-coerce-freeze-borrored.rs:23:17: 23:20
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Foo) -> usize {<dyn Foo as Foo>::foo}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _8 = &_4;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _8);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_6.0: &usize);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_6.1: &usize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = (*_10);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<usize, usize>(move _17, move _18, move _20, move _22); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        _25 = &(*_1);                    // scope 2 at ui/objects-coerce-freeze-borrored.rs:26:15: 26:18
        _24 = move _25 as &dyn Foo (Pointer(Unsize)); // scope 2 at ui/objects-coerce-freeze-borrored.rs:26:15: 26:18
        _26 = _4;                        // scope 2 at ui/objects-coerce-freeze-borrored.rs:26:20: 26:21
        _23 = do_it_imm(move _24, move _26) -> bb5; // scope 2 at ui/objects-coerce-freeze-borrored.rs:26:5: 26:22
                                         // mir::Constant
                                         // + span: ui/objects-coerce-freeze-borrored.rs:26:5: 26:14
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Foo + 'a), usize) {do_it_imm}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/objects-coerce-freeze-borrored.rs:27:2: 27:2
    }
}

fn do_it_imm(_1: &dyn Foo, _2: usize) -> () {
    debug obj => _1;                     // in scope 0 at ui/objects-coerce-freeze-borrored.rs:29:14: 29:17
    debug v => _2;                       // in scope 0 at ui/objects-coerce-freeze-borrored.rs:29:29: 29:30
    let mut _0: ();                      // return place in scope 0 at ui/objects-coerce-freeze-borrored.rs:29:39: 29:39
    let _3: usize;                       // in scope 0 at ui/objects-coerce-freeze-borrored.rs:30:9: 30:10
    let mut _4: &dyn Foo;                // in scope 0 at ui/objects-coerce-freeze-borrored.rs:30:13: 30:22
    let mut _5: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _7: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug y => _3;                   // in scope 1 at ui/objects-coerce-freeze-borrored.rs:30:9: 30:10
        let _8: &usize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _9: &usize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        scope 2 {
            debug left_val => _8;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _9;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _14: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _14;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/objects-coerce-freeze-borrored.rs:30:13: 30:22
        _3 = <dyn Foo as Foo>::foo(move _4) -> bb1; // scope 0 at ui/objects-coerce-freeze-borrored.rs:30:13: 30:22
                                         // mir::Constant
                                         // + span: ui/objects-coerce-freeze-borrored.rs:30:17: 30:20
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Foo) -> usize {<dyn Foo as Foo>::foo}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_2;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = &_3;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _7);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_5.0: &usize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_5.1: &usize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = (*_9);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<usize, usize>(move _16, move _17, move _19, move _21); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/objects-coerce-freeze-borrored.rs:32:2: 32:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/objects-coerce-freeze-borrored.rs:34:15: 34:15
    let mut _1: usize;                   // in scope 0 at ui/objects-coerce-freeze-borrored.rs:35:9: 35:14
    let mut _3: &mut dyn Foo;            // in scope 0 at ui/objects-coerce-freeze-borrored.rs:36:15: 36:37
    let mut _4: &mut usize;              // in scope 0 at ui/objects-coerce-freeze-borrored.rs:36:15: 36:21
    let mut _5: &mut usize;              // in scope 0 at ui/objects-coerce-freeze-borrored.rs:36:15: 36:21
    let _6: ();                          // in scope 0 at ui/objects-coerce-freeze-borrored.rs:37:5: 37:19
    let mut _7: &mut dyn Foo;            // in scope 0 at ui/objects-coerce-freeze-borrored.rs:37:15: 37:18
    let mut _8: &mut dyn Foo;            // in scope 0 at ui/objects-coerce-freeze-borrored.rs:37:15: 37:18
    let _9: ();                          // in scope 0 at ui/objects-coerce-freeze-borrored.rs:38:5: 38:23
    let mut _10: &dyn Foo;               // in scope 0 at ui/objects-coerce-freeze-borrored.rs:38:15: 38:18
    let mut _11: &dyn Foo;               // in scope 0 at ui/objects-coerce-freeze-borrored.rs:38:15: 38:18
    let _12: ();                         // in scope 0 at ui/objects-coerce-freeze-borrored.rs:39:5: 39:19
    let mut _13: &mut dyn Foo;           // in scope 0 at ui/objects-coerce-freeze-borrored.rs:39:15: 39:18
    let mut _14: &mut dyn Foo;           // in scope 0 at ui/objects-coerce-freeze-borrored.rs:39:15: 39:18
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/objects-coerce-freeze-borrored.rs:35:9: 35:14
        let _2: &mut dyn Foo;            // in scope 1 at ui/objects-coerce-freeze-borrored.rs:36:9: 36:12
        scope 2 {
            debug obj => _2;             // in scope 2 at ui/objects-coerce-freeze-borrored.rs:36:9: 36:12
        }
    }

    bb0: {
        _1 = const 22_usize;             // scope 0 at ui/objects-coerce-freeze-borrored.rs:35:24: 35:26
        _5 = &mut _1;                    // scope 1 at ui/objects-coerce-freeze-borrored.rs:36:15: 36:21
        _4 = &mut (*_5);                 // scope 1 at ui/objects-coerce-freeze-borrored.rs:36:15: 36:21
        _3 = move _4 as &mut dyn Foo (Pointer(Unsize)); // scope 1 at ui/objects-coerce-freeze-borrored.rs:36:15: 36:21
        _2 = move _3;                    // scope 1 at ui/objects-coerce-freeze-borrored.rs:36:15: 36:37
        _8 = &mut (*_2);                 // scope 2 at ui/objects-coerce-freeze-borrored.rs:37:15: 37:18
        _7 = move _8 as &mut dyn Foo (Pointer(Unsize)); // scope 2 at ui/objects-coerce-freeze-borrored.rs:37:15: 37:18
        _6 = do_it_mut(move _7) -> bb1;  // scope 2 at ui/objects-coerce-freeze-borrored.rs:37:5: 37:19
                                         // mir::Constant
                                         // + span: ui/objects-coerce-freeze-borrored.rs:37:5: 37:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut (dyn Foo + 'a)) {do_it_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = &(*_2);                    // scope 2 at ui/objects-coerce-freeze-borrored.rs:38:15: 38:18
        _10 = move _11 as &dyn Foo (Pointer(Unsize)); // scope 2 at ui/objects-coerce-freeze-borrored.rs:38:15: 38:18
        _9 = do_it_imm(move _10, const 23_usize) -> bb2; // scope 2 at ui/objects-coerce-freeze-borrored.rs:38:5: 38:23
                                         // mir::Constant
                                         // + span: ui/objects-coerce-freeze-borrored.rs:38:5: 38:14
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Foo + 'a), usize) {do_it_imm}, val: Value(<ZST>) }
    }

    bb2: {
        _14 = &mut (*_2);                // scope 2 at ui/objects-coerce-freeze-borrored.rs:39:15: 39:18
        _13 = move _14 as &mut dyn Foo (Pointer(Unsize)); // scope 2 at ui/objects-coerce-freeze-borrored.rs:39:15: 39:18
        _12 = do_it_mut(move _13) -> bb3; // scope 2 at ui/objects-coerce-freeze-borrored.rs:39:5: 39:19
                                         // mir::Constant
                                         // + span: ui/objects-coerce-freeze-borrored.rs:39:5: 39:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut (dyn Foo + 'a)) {do_it_mut}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/objects-coerce-freeze-borrored.rs:40:2: 40:2
    }
}
