// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:6:1: 6:16>::drop(_1: &mut X) -> () {
    debug self => _1;                    // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:7:13: 7:22
    let mut _0: ();                      // return place in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:7:24: 7:24
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:18: 8:29
    let mut _5: &[&str; 2];              // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:18: 8:29
    let _6: &[&str; 2];                  // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:18: 8:29
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:31: 8:37
    let mut _12: &std::string::String;   // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:31: 8:37
    let _13: &std::string::String;       // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:31: 8:37
    let mut _14: &[&str; 2];             // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:18: 8:29

    bb0: {
        _14 = const _;                   // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:18: 8:29
                                         // mir::Constant
                                         // + span: ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:18: 8:29
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(<X as Drop>::drop, [], Some(promoted[0])) }
        _6 = _14;                        // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:18: 8:29
        _5 = _6;                         // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:18: 8:29
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:18: 8:29
        _13 = &((*_1).0: std::string::String); // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:31: 8:37
        _12 = _13;                       // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:31: 8:37
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _12) -> bb1; // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:31: 8:37
                                         // mir::Constant
                                         // + span: ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:31: 8:37
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:9:6: 9:6
    }
}

promoted[0] in <impl at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:6:1: 6:16>::drop: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:18: 8:29
    let mut _1: [&str; 2];               // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:18: 8:29

    bb0: {
        _1 = [const "value: ", const "\n"]; // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:18: 8:29
                                         // mir::Constant
                                         // + span: ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:18: 8:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:18: 8:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:18: 8:29
        return;                          // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:8:18: 8:29
    }
}

fn unwrap(_1: X) -> String {
    debug x => _1;                       // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:12:11: 12:12
    let mut _0: std::string::String;     // return place in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:12:20: 12:26
    let _2: &std::string::String;        // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:13:16: 13:21
    let mut _3: &std::string::String;    // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:14:5: 14:18
    scope 1 {
        debug y => _2;                   // in scope 1 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:13:16: 13:21
    }

    bb0: {
        _2 = &(_1.0: std::string::String); // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:13:16: 13:21
        _3 = _2;                         // scope 1 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:14:5: 14:18
        _0 = <String as ToString>::to_string(move _3) -> [return: bb1, unwind: bb3]; // scope 1 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:14:5: 14:18
                                         // mir::Constant
                                         // + span: ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:14:7: 14:16
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> String {<String as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:15:1: 15:2
    }

    bb2: {
        return;                          // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:15:2: 15:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:15:1: 15:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:12:1: 15:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:17:11: 17:11
    let _1: X;                           // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:18:9: 18:10
    let mut _2: std::string::String;     // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:18:20: 18:39
    let mut _3: &str;                    // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:18:20: 18:39
    let _4: &str;                        // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:18:20: 18:27
    let mut _6: X;                       // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:19:20: 19:21
    let _7: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _8: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[&str];                 // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:14: 20:28
    let mut _10: &[&str; 2];             // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:14: 20:28
    let _11: &[&str; 2];                 // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:14: 20:28
    let mut _12: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _15: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _16: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:30: 20:31
    let mut _17: &std::string::String;   // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:30: 20:31
    let _18: &std::string::String;       // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:30: 20:31
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:18:9: 18:10
        let _5: std::string::String;     // in scope 1 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:19:9: 19:10
        scope 2 {
            debug y => _5;               // in scope 2 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:19:9: 19:10
            let mut _19: &[&str; 2];     // in scope 2 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:14: 20:28
        }
    }

    bb0: {
        _4 = const "hello";              // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:18:20: 18:27
                                         // mir::Constant
                                         // + span: ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:18:20: 18:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:18:20: 18:39
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:18:20: 18:39
                                         // mir::Constant
                                         // + span: ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:18:28: 18:37
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = X { x: move _2 };           // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:18:13: 18:41
        _6 = move _1;                    // scope 1 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:19:20: 19:21
        _5 = unwrap(move _6) -> bb2;     // scope 1 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:19:13: 19:22
                                         // mir::Constant
                                         // + span: ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:19:13: 19:19
                                         // + literal: Const { ty: fn(X) -> String {unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _19 = const _;                   // scope 2 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:14: 20:28
                                         // mir::Constant
                                         // + span: ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:14: 20:28
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _11 = _19;                       // scope 2 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:14: 20:28
        _10 = _11;                       // scope 2 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:14: 20:28
        _9 = move _10 as &[&str] (Pointer(Unsize)); // scope 2 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:14: 20:28
        _18 = &_5;                       // scope 2 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:30: 20:31
        _17 = _18;                       // scope 2 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:30: 20:31
        _16 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _17) -> [return: bb3, unwind: bb7]; // scope 2 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:30: 20:31
                                         // mir::Constant
                                         // + span: ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:30: 20:31
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb3: {
        _15 = [move _16];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = &_15;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _13 = _14;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = move _13 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = Arguments::<'_>::new_v1(move _9, move _12) -> [return: bb4, unwind: bb7]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = _print(move _8) -> [return: bb5, unwind: bb7]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_5) -> bb6;                 // scope 1 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:21:1: 21:2
    }

    bb6: {
        return;                          // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:21:2: 21:2
    }

    bb7 (cleanup): {
        drop(_5) -> bb8;                 // scope 1 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:21:1: 21:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:17:1: 21:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:14: 20:28
    let mut _1: [&str; 2];               // in scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:14: 20:28

    bb0: {
        _1 = [const "contents: ", const "\n"]; // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:14: 20:28
                                         // mir::Constant
                                         // + span: ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:14: 20:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:14: 20:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:14: 20:28
        return;                          // scope 0 at ui/disallowed-deconstructing/disallowed-deconstructing-destructing-struct-let_fixed.rs:20:14: 20:28
    }
}
