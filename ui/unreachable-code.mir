// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn id(_1: bool) -> bool {
    debug x => _1;                       // in scope 0 at ui/unreachable-code.rs:10:7: 10:8
    let mut _0: bool;                    // return place in scope 0 at ui/unreachable-code.rs:10:19: 10:23

    bb0: {
        _0 = _1;                         // scope 0 at ui/unreachable-code.rs:10:26: 10:27
        return;                          // scope 0 at ui/unreachable-code.rs:10:29: 10:29
    }
}

fn call_id() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unreachable-code.rs:12:14: 12:14
    let _1: bool;                        // in scope 0 at ui/unreachable-code.rs:13:9: 13:10
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    scope 1 {
        debug c => _1;                   // in scope 1 at ui/unreachable-code.rs:13:9: 13:10
    }

    bb0: {
        _2 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn call_id_2() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unreachable-code.rs:17:16: 17:16
    let mut _1: bool;                    // in scope 0 at ui/unreachable-code.rs:17:18: 17:26

    bb0: {
        _1 = id(const true) -> bb1;      // scope 0 at ui/unreachable-code.rs:17:18: 17:26
                                         // mir::Constant
                                         // + span: ui/unreachable-code.rs:17:18: 17:20
                                         // + literal: Const { ty: fn(bool) -> bool {id}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/unreachable-code.rs:17:43: 17:43
    }
}

fn call_id_3() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unreachable-code.rs:19:16: 19:16

    bb0: {
        return;                          // scope 0 at ui/unreachable-code.rs:19:45: 19:45
    }
}

fn ret_guard() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unreachable-code.rs:21:16: 21:16
    let _1: i32;                         // in scope 0 at ui/unreachable-code.rs:23:7: 23:8
    let _2: &i32;                        // in scope 0 at ui/unreachable-code.rs:23:7: 23:8
    let mut _3: &i32;                    // in scope 0 at ui/unreachable-code.rs:23:7: 23:8
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/unreachable-code.rs:23:7: 23:8
        debug x => _2;                   // in scope 1 at ui/unreachable-code.rs:23:7: 23:8
    }

    bb0: {
        _3 = const _;                    // scope 0 at ui/unreachable-code.rs:23:7: 23:8
                                         // mir::Constant
                                         // + span: ui/unreachable-code.rs:23:7: 23:8
                                         // + literal: Const { ty: &i32, val: Unevaluated(ret_guard, [], Some(promoted[0])) }
        _2 = _3;                         // scope 0 at ui/unreachable-code.rs:23:7: 23:8
        return;                          // scope 0 at ui/unreachable-code.rs:26:2: 26:2
    }
}

promoted[0] in ret_guard: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/unreachable-code.rs:23:7: 23:8
    let mut _1: i32;                     // in scope 0 at ui/unreachable-code.rs:22:11: 22:12

    bb0: {
        _1 = const 2_i32;                // scope 0 at ui/unreachable-code.rs:22:11: 22:12
        _0 = &_1;                        // scope 0 at ui/unreachable-code.rs:23:7: 23:8
        return;                          // scope 0 at ui/unreachable-code.rs:23:7: 23:8
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unreachable-code.rs:28:15: 28:15

    bb0: {
        return;                          // scope 0 at ui/unreachable-code.rs:28:17: 28:17
    }
}
