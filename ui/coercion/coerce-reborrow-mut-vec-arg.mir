// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn reverse(_1: &mut [usize]) -> () {
    debug v => _1;                       // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:4:12: 4:13
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:4:29: 4:29
    let _2: ();                          // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:5:5: 5:16
    let mut _3: &mut [usize];            // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:5:5: 5:16

    bb0: {
        _3 = &mut (*_1);                 // scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:5:5: 5:16
        _2 = core::slice::<impl [usize]>::reverse(move _3) -> bb1; // scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:5:5: 5:16
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-mut-vec-arg.rs:5:7: 5:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut [usize]) {core::slice::<impl [usize]>::reverse}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:6:2: 6:2
    }
}

fn bar(_1: &mut [usize]) -> () {
    debug v => _1;                       // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:8:8: 8:9
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:8:25: 8:25
    let _2: ();                          // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:9:5: 9:15
    let mut _3: &mut [usize];            // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:9:13: 9:14
    let _4: ();                          // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:10:5: 10:15
    let mut _5: &mut [usize];            // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:10:13: 10:14
    let _6: ();                          // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:11:5: 11:15
    let mut _7: &mut [usize];            // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:11:13: 11:14

    bb0: {
        _3 = &mut (*_1);                 // scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:9:13: 9:14
        _2 = reverse(move _3) -> bb1;    // scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:9:5: 9:15
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-mut-vec-arg.rs:9:5: 9:12
                                         // + literal: Const { ty: for<'a> fn(&'a mut [usize]) {reverse}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut (*_1);                 // scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:10:13: 10:14
        _4 = reverse(move _5) -> bb2;    // scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:10:5: 10:15
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-mut-vec-arg.rs:10:5: 10:12
                                         // + literal: Const { ty: for<'a> fn(&'a mut [usize]) {reverse}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut (*_1);                 // scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:11:13: 11:14
        _6 = reverse(move _7) -> bb3;    // scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:11:5: 11:15
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-mut-vec-arg.rs:11:5: 11:12
                                         // + literal: Const { ty: for<'a> fn(&'a mut [usize]) {reverse}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:12:2: 12:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:14:15: 14:15
    let mut _1: std::vec::Vec<usize>;    // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:15:9: 15:20
    let mut _2: std::boxed::Box<[usize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[usize; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[usize; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let _8: ();                          // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:16:5: 16:22
    let mut _9: &mut [usize];            // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:16:9: 16:21
    let mut _10: &mut [usize];           // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:16:9: 16:21
    let mut _11: &mut std::vec::Vec<usize>; // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:16:9: 16:21
    let mut _12: &mut std::vec::Vec<usize>; // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:16:9: 16:21
    let mut _13: (&std::vec::Vec<usize>, &[usize; 4]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _14: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _15: &[usize; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: &[usize; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &std::vec::Vec<usize>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &[usize; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &[usize; 4];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _31: *const [usize; 4];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug the_vec => _1;             // in scope 1 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:15:9: 15:20
        let _16: &std::vec::Vec<usize>;  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _17: &[usize; 4];            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _30: &[usize; 4];        // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 3 {
            debug left_val => _16;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _17;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _22: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _22;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 32_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [usize; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _31 = (((_7.0: std::ptr::Unique<[usize; 4]>).0: std::ptr::NonNull<[usize; 4]>).0: *const [usize; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_31) = [const 1_usize, const 2_usize, const 3_usize, const 100_usize]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[usize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[usize]>) -> Vec<usize> {slice::<impl [usize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = &mut _1;                   // scope 1 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:16:9: 16:21
        _11 = &mut (*_12);               // scope 1 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:16:9: 16:21
        _10 = <Vec<usize> as DerefMut>::deref_mut(move _11) -> [return: bb3, unwind: bb9]; // scope 1 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:16:9: 16:21
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-mut-vec-arg.rs:16:9: 16:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<usize>) -> &'a mut <Vec<usize> as Deref>::Target {<Vec<usize> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &mut (*_10);                // scope 1 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:16:9: 16:21
        _8 = bar(move _9) -> [return: bb4, unwind: bb9]; // scope 1 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:16:5: 16:22
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-mut-vec-arg.rs:16:5: 16:8
                                         // + literal: Const { ty: for<'a> fn(&'a mut [usize]) {bar}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _30 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[usize; 4], val: Unevaluated(main, [], Some(promoted[0])) }
        _15 = _30;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _13 = (move _14, move _15);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_13.0: &std::vec::Vec<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_13.1: &[usize; 4]);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = <Vec<usize> as PartialEq<[usize; 4]>>::eq(move _20, move _21) -> [return: bb5, unwind: bb9]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<usize>, &'b [usize; 4]) -> bool {<Vec<usize> as PartialEq<[usize; 4]>>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = Not(move _19);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _22 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<Vec<usize>, [usize; 4]>(move _24, move _25, move _27, move _29) -> bb9; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<usize>, &'b [usize; 4], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<usize>, [usize; 4]>}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_1) -> bb8;                 // scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:18:1: 18:2
    }

    bb8: {
        return;                          // scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:18:2: 18:2
    }

    bb9 (cleanup): {
        drop(_1) -> bb10;                // scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:18:1: 18:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:14:1: 18:2
    }
}

promoted[0] in main: &[usize; 4] = {
    let mut _0: &[usize; 4];             // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [usize; 4];              // in scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:17:25: 17:39

    bb0: {
        _1 = [const 100_usize, const 3_usize, const 2_usize, const 1_usize]; // scope 0 at ui/coercion/coerce-reborrow-mut-vec-arg.rs:17:25: 17:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
