// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bar(_1: &mut [usize]) -> Vec<usize> {
    debug v => _1;                       // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:4:8: 4:9
    let mut _0: std::vec::Vec<usize>;    // return place in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:4:28: 4:38
    let mut _2: &[usize];                // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:5:5: 5:15

    bb0: {
        _2 = &(*_1);                     // scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:5:5: 5:15
        _0 = slice::<impl [usize]>::to_vec(move _2) -> bb1; // scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:5:5: 5:15
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:5:7: 5:13
                                         // + literal: Const { ty: for<'a> fn(&'a [usize]) -> Vec<usize> {slice::<impl [usize]>::to_vec}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:6:2: 6:2
    }
}

fn bip(_1: &[usize]) -> Vec<usize> {
    debug v => _1;                       // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:8:8: 8:9
    let mut _0: std::vec::Vec<usize>;    // return place in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:8:24: 8:34
    let mut _2: &[usize];                // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:9:5: 9:15

    bb0: {
        _2 = _1;                         // scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:9:5: 9:15
        _0 = slice::<impl [usize]>::to_vec(move _2) -> bb1; // scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:9:5: 9:15
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:9:7: 9:13
                                         // + literal: Const { ty: for<'a> fn(&'a [usize]) -> Vec<usize> {slice::<impl [usize]>::to_vec}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:10:2: 10:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:12:15: 12:15
    let mut _1: std::vec::Vec<usize>;    // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:13:9: 13:20
    let mut _2: std::boxed::Box<[usize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[usize; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[usize; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: (&std::vec::Vec<usize>, &std::vec::Vec<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &std::vec::Vec<usize>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _10: std::vec::Vec<usize>;       // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:16: 14:31
    let mut _11: &std::vec::Vec<usize>;  // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:16: 14:31
    let mut _12: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _13: std::vec::Vec<usize>;       // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:33: 14:50
    let mut _14: &mut [usize];           // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:37: 14:49
    let mut _15: &mut [usize];           // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:37: 14:49
    let mut _16: &mut std::vec::Vec<usize>; // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:37: 14:49
    let mut _17: &mut std::vec::Vec<usize>; // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:37: 14:49
    let mut _20: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _22: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _23: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _25: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _26: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _27: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _28: &std::vec::Vec<usize>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _29: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _30: &std::vec::Vec<usize>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _32: (&std::vec::Vec<usize>, &std::vec::Vec<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _33: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _34: std::vec::Vec<usize>;       // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:16: 15:31
    let mut _35: &std::vec::Vec<usize>;  // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:16: 15:31
    let mut _36: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _37: std::vec::Vec<usize>;       // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:33: 15:46
    let mut _38: &[usize];               // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:37: 15:45
    let _39: &[usize];                   // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:37: 15:45
    let mut _40: &std::vec::Vec<usize>;  // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:37: 15:45
    let _41: &std::vec::Vec<usize>;      // in scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:37: 15:45
    let mut _44: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _45: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _46: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _47: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _49: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _50: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _51: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _52: &std::vec::Vec<usize>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _53: &std::vec::Vec<usize>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _54: &std::vec::Vec<usize>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _56: *const [usize; 4];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug the_vec => _1;             // in scope 1 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:13:9: 13:20
        let _18: &std::vec::Vec<usize>;  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _19: &std::vec::Vec<usize>;  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _42: &std::vec::Vec<usize>;  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _43: &std::vec::Vec<usize>;  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        scope 3 {
            debug left_val => _18;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _19;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _24: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _24;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 5 {
            debug left_val => _42;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _43;      // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _48: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 6 {
                debug kind => _48;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 32_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [usize; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _56 = (((_7.0: std::ptr::Unique<[usize; 4]>).0: std::ptr::NonNull<[usize; 4]>).0: *const [usize; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_56) = [const 1_usize, const 2_usize, const 3_usize, const 100_usize]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[usize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[usize]>) -> Vec<usize> {slice::<impl [usize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &_1;                       // scope 1 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:16: 14:31
        _10 = <Vec<usize> as Clone>::clone(move _11) -> [return: bb3, unwind: bb24]; // scope 1 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:16: 14:31
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:24: 14:29
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<usize>) -> Vec<usize> {<Vec<usize> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &_10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _17 = &mut _1;                   // scope 1 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:37: 14:49
        _16 = &mut (*_17);               // scope 1 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:37: 14:49
        _15 = <Vec<usize> as DerefMut>::deref_mut(move _16) -> [return: bb4, unwind: bb23]; // scope 1 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:37: 14:49
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:37: 14:49
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<usize>) -> &'a mut <Vec<usize> as Deref>::Target {<Vec<usize> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = &mut (*_15);               // scope 1 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:37: 14:49
        _13 = bar(move _14) -> [return: bb5, unwind: bb23]; // scope 1 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:33: 14:50
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:14:33: 14:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut [usize]) -> Vec<usize> {bar}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = &_13;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _12);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _18 = (_8.0: &std::vec::Vec<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _19 = (_8.1: &std::vec::Vec<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _22 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _23 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _21 = <Vec<usize> as PartialEq>::eq(move _22, move _23) -> [return: bb6, unwind: bb22]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<usize>, &'b Vec<usize>) -> bool {<Vec<usize> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _20 = Not(move _21);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _20) -> [0: bb8, otherwise: bb7]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _24 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _30 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _25 = core::panicking::assert_failed::<Vec<usize>, Vec<usize>>(move _26, move _27, move _29, move _31) -> bb22; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<usize>, &'b Vec<usize>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<usize>, Vec<usize>>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_13) -> [return: bb9, unwind: bb23]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9: {
        drop(_10) -> [return: bb10, unwind: bb24]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb10: {
        _35 = &_1;                       // scope 1 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:16: 15:31
        _34 = <Vec<usize> as Clone>::clone(move _35) -> [return: bb11, unwind: bb24]; // scope 1 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:16: 15:31
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:24: 15:29
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<usize>) -> Vec<usize> {<Vec<usize> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb11: {
        _33 = &_34;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _41 = &_1;                       // scope 1 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:37: 15:45
        _40 = _41;                       // scope 1 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:37: 15:45
        _39 = <Vec<usize> as Deref>::deref(move _40) -> [return: bb12, unwind: bb21]; // scope 1 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:37: 15:45
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:37: 15:45
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<usize>) -> &'a <Vec<usize> as Deref>::Target {<Vec<usize> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb12: {
        _38 = _39;                       // scope 1 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:37: 15:45
        _37 = bip(move _38) -> [return: bb13, unwind: bb21]; // scope 1 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:33: 15:46
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:15:33: 15:36
                                         // + literal: Const { ty: for<'a> fn(&'a [usize]) -> Vec<usize> {bip}, val: Value(<ZST>) }
    }

    bb13: {
        _36 = &_37;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _32 = (move _33, move _36);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _42 = (_32.0: &std::vec::Vec<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _43 = (_32.1: &std::vec::Vec<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _46 = _42;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _47 = _43;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _45 = <Vec<usize> as PartialEq>::eq(move _46, move _47) -> [return: bb14, unwind: bb20]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<usize>, &'b Vec<usize>) -> bool {<Vec<usize> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _44 = Not(move _45);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _44) -> [0: bb16, otherwise: bb15]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _48 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _50 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _52 = _42;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _51 = _52;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _54 = _43;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _53 = _54;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _55 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _49 = core::panicking::assert_failed::<Vec<usize>, Vec<usize>>(move _50, move _51, move _53, move _55) -> bb20; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<usize>, &'b Vec<usize>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<usize>, Vec<usize>>}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_37) -> [return: bb17, unwind: bb21]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb17: {
        drop(_34) -> [return: bb18, unwind: bb24]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb18: {
        drop(_1) -> bb19;                // scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:16:1: 16:2
    }

    bb19: {
        return;                          // scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:16:2: 16:2
    }

    bb20 (cleanup): {
        drop(_37) -> bb21;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb21 (cleanup): {
        drop(_34) -> bb24;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb22 (cleanup): {
        drop(_13) -> bb23;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb23 (cleanup): {
        drop(_10) -> bb24;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb24 (cleanup): {
        drop(_1) -> bb25;                // scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:16:1: 16:2
    }

    bb25 (cleanup): {
        resume;                          // scope 0 at ui/coercion/coerce-reborrow-imm-vec-rcvr.rs:12:1: 16:2
    }
}
