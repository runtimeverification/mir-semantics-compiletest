// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn FieldElement::valid_integer_try_from(_1: N) -> Result<<Self as FieldElement>::Integer, ()> {
    debug i => _1;                       // in scope 0 at ui/coercion/issue-101066.rs:8:34: 8:35
    let mut _0: std::result::Result<<Self as FieldElement>::Integer, ()>; // return place in scope 0 at ui/coercion/issue-101066.rs:8:43: 8:68
    let mut _2: std::result::Result<<Self as FieldElement>::Integer, <<Self as FieldElement>::Integer as std::convert::TryFrom<N>>::Error>; // in scope 0 at ui/coercion/issue-101066.rs:12:9: 12:35
    let mut _3: N;                       // in scope 0 at ui/coercion/issue-101066.rs:12:33: 12:34
    let mut _4: [closure@ui/coercion/issue-101066.rs:12:44: 12:47]; // in scope 0 at ui/coercion/issue-101066.rs:12:44: 12:50

    bb0: {
        _3 = move _1;                    // scope 0 at ui/coercion/issue-101066.rs:12:33: 12:34
        _2 = <<Self as FieldElement>::Integer as TryFrom<N>>::try_from(move _3) -> bb1; // scope 0 at ui/coercion/issue-101066.rs:12:9: 12:35
                                         // mir::Constant
                                         // + span: ui/coercion/issue-101066.rs:12:9: 12:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(N) -> Result<<Self as FieldElement>::Integer, <<Self as FieldElement>::Integer as TryFrom<N>>::Error> {<<Self as FieldElement>::Integer as TryFrom<N>>::try_from}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Result::<<Self as FieldElement>::Integer, <<Self as FieldElement>::Integer as TryFrom<N>>::Error>::map_err::<(), [closure@ui/coercion/issue-101066.rs:12:44: 12:47]>(move _2, move _4) -> bb2; // scope 0 at ui/coercion/issue-101066.rs:12:9: 12:51
                                         // mir::Constant
                                         // + span: ui/coercion/issue-101066.rs:12:36: 12:43
                                         // + literal: Const { ty: fn(Result<<Self as FieldElement>::Integer, <<Self as FieldElement>::Integer as TryFrom<N>>::Error>, [closure@ui/coercion/issue-101066.rs:12:44: 12:47]) -> Result<<Self as FieldElement>::Integer, ()> {Result::<<Self as FieldElement>::Integer, <<Self as FieldElement>::Integer as TryFrom<N>>::Error>::map_err::<(), [closure@ui/coercion/issue-101066.rs:12:44: 12:47]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/coercion/issue-101066.rs:13:6: 13:6
    }
}

fn FieldElement::valid_integer_try_from::{closure#0}(_1: [closure@ui/coercion/issue-101066.rs:12:44: 12:47], _2: <<Self as FieldElement>::Integer as TryFrom<N>>::Error) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/issue-101066.rs:12:48: 12:48

    bb0: {
        drop(_2) -> bb1;                 // scope 0 at ui/coercion/issue-101066.rs:12:49: 12:50
    }

    bb1: {
        return;                          // scope 0 at ui/coercion/issue-101066.rs:12:50: 12:50
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/issue-101066.rs:16:11: 16:11

    bb0: {
        return;                          // scope 0 at ui/coercion/issue-101066.rs:16:13: 16:13
    }
}
