// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn talk(_1: &mut SpeechMaker) -> () {
    debug x => _1;                       // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:8:9: 8:10
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:8:30: 8:30
    let mut _2: (usize, bool);           // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:9:5: 9:20

    bb0: {
        _2 = CheckedAdd(((*_1).0: usize), const 1_usize); // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:9:5: 9:20
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: usize), const 1_usize) -> bb1; // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:9:5: 9:20
    }

    bb1: {
        ((*_1).0: usize) = move (_2.0: usize); // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:9:5: 9:20
        return;                          // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:10:2: 10:2
    }
}

fn give_a_few_speeches(_1: &mut SpeechMaker) -> () {
    debug speaker => _1;                 // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:12:24: 12:31
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:12:51: 12:51
    let _2: ();                          // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:17:5: 17:18
    let mut _3: &mut SpeechMaker;        // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:17:10: 17:17
    let _4: ();                          // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:18:5: 18:18
    let mut _5: &mut SpeechMaker;        // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:18:10: 18:17
    let _6: ();                          // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:19:5: 19:18
    let mut _7: &mut SpeechMaker;        // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:19:10: 19:17

    bb0: {
        _3 = &mut (*_1);                 // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:17:10: 17:17
        _2 = talk(move _3) -> bb1;       // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:17:5: 17:18
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-mut-ptr-arg.rs:17:5: 17:9
                                         // + literal: Const { ty: for<'a> fn(&'a mut SpeechMaker) {talk}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut (*_1);                 // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:18:10: 18:17
        _4 = talk(move _5) -> bb2;       // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:18:5: 18:18
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-mut-ptr-arg.rs:18:5: 18:9
                                         // + literal: Const { ty: for<'a> fn(&'a mut SpeechMaker) {talk}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut (*_1);                 // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:19:10: 19:17
        _6 = talk(move _7) -> bb3;       // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:19:5: 19:18
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-mut-ptr-arg.rs:19:5: 19:9
                                         // + literal: Const { ty: for<'a> fn(&'a mut SpeechMaker) {talk}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:20:2: 20:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:22:15: 22:15
    let mut _1: SpeechMaker;             // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:23:9: 23:20
    let _2: ();                          // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:24:5: 24:38
    let mut _3: &mut SpeechMaker;        // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:24:25: 24:37
    let mut _4: &mut SpeechMaker;        // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:24:25: 24:37
    scope 1 {
        debug lincoln => _1;             // in scope 1 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:23:9: 23:20
    }

    bb0: {
        _1 = SpeechMaker { speeches: const 22_usize }; // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:23:23: 23:49
        _4 = &mut _1;                    // scope 1 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:24:25: 24:37
        _3 = &mut (*_4);                 // scope 1 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:24:25: 24:37
        _2 = give_a_few_speeches(move _3) -> bb1; // scope 1 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:24:5: 24:38
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-mut-ptr-arg.rs:24:5: 24:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut SpeechMaker) {give_a_few_speeches}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-arg.rs:25:2: 25:2
    }
}
