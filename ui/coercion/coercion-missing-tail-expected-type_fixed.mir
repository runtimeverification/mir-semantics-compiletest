// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn plus_one(_1: i32) -> i32 {
    debug x => _1;                       // in scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:4:13: 4:14
    let mut _0: i32;                     // return place in scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:4:24: 4:27
    let mut _2: i32;                     // in scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:5:5: 5:6
    let mut _3: (i32, bool);             // in scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:5:5: 5:10

    bb0: {
        _2 = _1;                         // scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:5:5: 5:6
        _3 = CheckedAdd(_2, const 1_i32); // scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:5:5: 5:10
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, const 1_i32) -> bb1; // scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:5:5: 5:10
    }

    bb1: {
        _0 = move (_3.0: i32);           // scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:5:5: 5:10
        return;                          // scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:6:2: 6:2
    }
}

fn foo() -> Result<u8, u64> {
    let mut _0: std::result::Result<u8, u64>; // return place in scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:8:13: 8:28

    bb0: {
        _0 = Result::<u8, u64>::Ok(const 1_u8); // scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:9:5: 9:10
        return;                          // scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:10:2: 10:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:12:11: 12:11
    let _1: i32;                         // in scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:13:9: 13:10
    let mut _2: std::result::Result<u8, u64>; // in scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:14:13: 14:18
    let _3: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _5: &[&str];                 // in scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:14: 15:22
    let mut _6: &[&str; 2];              // in scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:14: 15:22
    let _7: &[&str; 2];                  // in scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:14: 15:22
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:24: 15:25
    let mut _13: &i32;                   // in scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:24: 15:25
    let _14: &i32;                       // in scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:24: 15:25
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:13:9: 13:10
        scope 2 {
            let mut _15: &[&str; 2];     // in scope 2 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:14: 15:22
        }
    }

    bb0: {
        _1 = plus_one(const 5_i32) -> bb1; // scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:13:13: 13:24
                                         // mir::Constant
                                         // + span: ui/coercion/coercion-missing-tail-expected-type_fixed.rs:13:13: 13:21
                                         // + literal: Const { ty: fn(i32) -> i32 {plus_one}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = foo() -> bb2;               // scope 1 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:14:13: 14:18
                                         // mir::Constant
                                         // + span: ui/coercion/coercion-missing-tail-expected-type_fixed.rs:14:13: 14:16
                                         // + literal: Const { ty: fn() -> Result<u8, u64> {foo}, val: Value(<ZST>) }
    }

    bb2: {
        _15 = const _;                   // scope 2 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:14: 15:22
                                         // mir::Constant
                                         // + span: ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:14: 15:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _15;                        // scope 2 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:14: 15:22
        _6 = _7;                         // scope 2 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:14: 15:22
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 2 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:14: 15:22
        _14 = &_1;                       // scope 2 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:24: 15:25
        _13 = _14;                       // scope 2 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:24: 15:25
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _13) -> bb3; // scope 2 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:24: 15:25
                                         // mir::Constant
                                         // + span: ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:24: 15:25
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = [move _12];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = &_11;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = _10;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb4; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _3 = _print(move _4) -> bb5;     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:16:2: 16:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:14: 15:22
    let mut _1: [&str; 2];               // in scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:14: 15:22

    bb0: {
        _1 = [const "X = ", const "\n"]; // scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:14: 15:22
                                         // mir::Constant
                                         // + span: ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:14: 15:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:14: 15:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:14: 15:22
        return;                          // scope 0 at ui/coercion/coercion-missing-tail-expected-type_fixed.rs:15:14: 15:22
    }
}
