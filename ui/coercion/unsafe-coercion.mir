// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: i32) -> i32 {
    debug x => _1;
    let mut _0: i32;

    bb0: {
        _0 = Mul(_1, const 22_i32);
        return;
    }
}

fn bar(_1: fn(i32) -> i32) -> unsafe fn(i32) -> i32 {
    debug x => _1;
    let mut _0: unsafe fn(i32) -> i32;

    bb0: {
        _0 = _1 as unsafe fn(i32) -> i32 (Pointer(UnsafeFnPointer));
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: unsafe fn(i32) -> i32;
    let mut _2: fn(i32) -> i32;
    let mut _4: unsafe fn(i32) -> i32;
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug f => _1;
        let _3: i32;
        scope 2 {
            debug x => _3;
            let _7: &i32;
            let _8: &i32;
            let mut _16: &i32;
            scope 4 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _13;
                }
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _2 = foo as fn(i32) -> i32 (Pointer(ReifyFnPointer));
        _1 = bar(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = _1;
        _3 = move _4(const 2_i32) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_3;
        _16 = const _;
        _5 = (move _6, _16);
        _7 = (_5.0: &i32);
        _8 = (_5.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 44_i32;
        _0 = &_1;
        return;
    }
}
