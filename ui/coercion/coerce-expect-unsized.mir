// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-expect-unsized.rs:11:15: 11:15
    let mut _1: std::boxed::Box<[isize]>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:12:27: 12:50
    let mut _2: std::boxed::Box<[isize; 3]>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:12:27: 12:50
    let mut _3: [isize; 3];              // in scope 0 at ui/coercion/coerce-expect-unsized.rs:12:36: 12:49
    let mut _4: std::boxed::Box<[isize]>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:13:27: 13:77
    let mut _5: std::boxed::Box<[isize; 3]>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:13:27: 13:77
    let mut _6: [isize; 3];              // in scope 0 at ui/coercion/coerce-expect-unsized.rs:13:36: 13:76
    let mut _7: std::boxed::Box<[isize]>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:14:27: 14:89
    let mut _8: std::boxed::Box<[isize; 3]>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:14:27: 14:89
    let mut _9: [isize; 3];              // in scope 0 at ui/coercion/coerce-expect-unsized.rs:14:36: 14:88
    let mut _10: std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:15:38: 15:65
    let mut _11: std::boxed::Box<[closure@ui/coercion/coerce-expect-unsized.rs:15:49: 15:52]>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:15:38: 15:65
    let mut _12: [closure@ui/coercion/coerce-expect-unsized.rs:15:49: 15:52]; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:15:47: 15:64
    let mut _13: std::boxed::Box<dyn std::fmt::Debug>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:16:29: 16:70
    let mut _14: std::boxed::Box<bool>;  // in scope 0 at ui/coercion/coerce-expect-unsized.rs:16:29: 16:70
    let mut _15: bool;                   // in scope 0 at ui/coercion/coerce-expect-unsized.rs:16:38: 16:69
    let mut _16: std::boxed::Box<dyn std::fmt::Debug>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:17:29: 17:79
    let mut _17: std::boxed::Box<char>;  // in scope 0 at ui/coercion/coerce-expect-unsized.rs:17:29: 17:79
    let mut _18: char;                   // in scope 0 at ui/coercion/coerce-expect-unsized.rs:17:38: 17:78
    let _19: &str;                       // in scope 0 at ui/coercion/coerce-expect-unsized.rs:26:19: 26:37
    let mut _20: &std::string::String;   // in scope 0 at ui/coercion/coerce-expect-unsized.rs:26:19: 26:37
    let _21: &std::string::String;       // in scope 0 at ui/coercion/coerce-expect-unsized.rs:26:19: 26:37
    let _22: std::string::String;        // in scope 0 at ui/coercion/coerce-expect-unsized.rs:26:20: 26:37
    let _23: &str;                       // in scope 0 at ui/coercion/coerce-expect-unsized.rs:27:19: 27:74
    let mut _24: &std::string::String;   // in scope 0 at ui/coercion/coerce-expect-unsized.rs:27:19: 27:74
    let _25: &std::string::String;       // in scope 0 at ui/coercion/coerce-expect-unsized.rs:27:19: 27:74
    let _26: std::string::String;        // in scope 0 at ui/coercion/coerce-expect-unsized.rs:27:20: 27:74
    let _27: &str;                       // in scope 0 at ui/coercion/coerce-expect-unsized.rs:28:19: 31:6
    let mut _28: &std::string::String;   // in scope 0 at ui/coercion/coerce-expect-unsized.rs:28:19: 31:6
    let _29: &std::string::String;       // in scope 0 at ui/coercion/coerce-expect-unsized.rs:28:19: 31:6
    let _30: std::string::String;        // in scope 0 at ui/coercion/coerce-expect-unsized.rs:28:20: 31:6
    let mut _32: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _33: &[&str];                // in scope 0 at ui/coercion/coerce-expect-unsized.rs:29:25: 29:29
    let mut _34: &[&str; 1];             // in scope 0 at ui/coercion/coerce-expect-unsized.rs:29:25: 29:29
    let _35: &[&str; 1];                 // in scope 0 at ui/coercion/coerce-expect-unsized.rs:29:25: 29:29
    let mut _36: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _37: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _38: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _39: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _40: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:29:31: 29:36
    let mut _41: &bool;                  // in scope 0 at ui/coercion/coerce-expect-unsized.rs:29:31: 29:36
    let _42: &bool;                      // in scope 0 at ui/coercion/coerce-expect-unsized.rs:29:31: 29:36
    let mut _43: std::boxed::Box<[isize]>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:33:27: 33:46
    let mut _44: std::boxed::Box<[isize; 3]>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:33:27: 33:46
    let mut _45: [isize; 3];             // in scope 0 at ui/coercion/coerce-expect-unsized.rs:33:36: 33:45
    let mut _46: std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:34:38: 34:61
    let mut _47: std::boxed::Box<[closure@ui/coercion/coerce-expect-unsized.rs:34:47: 34:50]>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:34:38: 34:61
    let mut _48: [closure@ui/coercion/coerce-expect-unsized.rs:34:47: 34:50]; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:34:47: 34:60
    let mut _49: std::rc::Rc<std::cell::RefCell<[isize]>>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:36:35: 36:67
    let mut _50: std::rc::Rc<std::cell::RefCell<[isize; 3]>>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:36:35: 36:67
    let mut _51: std::cell::RefCell<[isize; 3]>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:36:43: 36:66
    let mut _52: [isize; 3];             // in scope 0 at ui/coercion/coerce-expect-unsized.rs:36:56: 36:65
    let mut _53: std::rc::Rc<std::cell::RefCell<dyn std::ops::FnMut(isize) -> u8>>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:37:49: 37:85
    let mut _54: std::rc::Rc<std::cell::RefCell<[closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73]>>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:37:49: 37:85
    let mut _55: std::cell::RefCell<[closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73]>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:37:57: 37:84
    let mut _56: [closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73]; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:37:70: 37:83
    let mut _57: std::vec::Vec<std::boxed::Box<dyn std::ops::Fn(isize) -> u8>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _58: std::boxed::Box<[std::boxed::Box<dyn std::ops::Fn(isize) -> u8>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _59: std::boxed::Box<[std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _60: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _61: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _62: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _63: std::boxed::Box<[std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _64: std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:40:9: 40:32
    let mut _65: std::boxed::Box<[closure@ui/coercion/coerce-expect-unsized.rs:40:18: 40:21]>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:40:9: 40:32
    let mut _66: [closure@ui/coercion/coerce-expect-unsized.rs:40:18: 40:21]; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:40:18: 40:31
    let mut _67: std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:41:9: 41:39
    let mut _68: std::boxed::Box<[closure@ui/coercion/coerce-expect-unsized.rs:41:18: 41:21]>; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:41:9: 41:39
    let mut _69: [closure@ui/coercion/coerce-expect-unsized.rs:41:18: 41:21]; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:41:18: 41:38
    let mut _72: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _73: *const [std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                            scope 7 {
                                scope 8 {
                                    scope 9 {
                                        scope 10 {
                                            scope 11 {
                                                scope 12 {
                                                    scope 13 {
                                                        scope 14 {
                                                            let _31: std::string::String; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                                                            let mut _70: &bool; // in scope 14 at ui/coercion/coerce-expect-unsized.rs:29:31: 29:36
                                                            let mut _71: &[&str; 1]; // in scope 14 at ui/coercion/coerce-expect-unsized.rs:29:25: 29:29
                                                            scope 15 {
                                                                scope 17 {
                                                                    scope 18 {
                                                                        scope 19 {
                                                                            scope 20 {
                                                                                scope 21 {
                                                                                }
                                                                                scope 22 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 16 {
                                                                debug res => _31; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = [const 1_isize, const 2_isize, const 3_isize]; // scope 0 at ui/coercion/coerce-expect-unsized.rs:12:38: 12:47
        _2 = Box::<[isize; 3]>::new(move _3) -> bb1; // scope 0 at ui/coercion/coerce-expect-unsized.rs:12:27: 12:50
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:12:27: 12:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn([isize; 3]) -> Box<[isize; 3]> {Box::<[isize; 3]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = move _2 as std::boxed::Box<[isize]> (Pointer(Unsize)); // scope 0 at ui/coercion/coerce-expect-unsized.rs:12:27: 12:50
        drop(_1) -> bb2;                 // scope 0 at ui/coercion/coerce-expect-unsized.rs:12:50: 12:51
    }

    bb2: {
        _6 = [const 1_isize, const 2_isize, const 3_isize]; // scope 1 at ui/coercion/coerce-expect-unsized.rs:13:46: 13:55
        _5 = Box::<[isize; 3]>::new(move _6) -> bb3; // scope 1 at ui/coercion/coerce-expect-unsized.rs:13:27: 13:77
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:13:27: 13:35
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn([isize; 3]) -> Box<[isize; 3]> {Box::<[isize; 3]>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = move _5 as std::boxed::Box<[isize]> (Pointer(Unsize)); // scope 1 at ui/coercion/coerce-expect-unsized.rs:13:27: 13:77
        drop(_4) -> bb4;                 // scope 1 at ui/coercion/coerce-expect-unsized.rs:13:77: 13:78
    }

    bb4: {
        _9 = [const 1_isize, const 2_isize, const 3_isize]; // scope 2 at ui/coercion/coerce-expect-unsized.rs:14:57: 14:66
        _8 = Box::<[isize; 3]>::new(move _9) -> bb5; // scope 2 at ui/coercion/coerce-expect-unsized.rs:14:27: 14:89
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:14:27: 14:35
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn([isize; 3]) -> Box<[isize; 3]> {Box::<[isize; 3]>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = move _8 as std::boxed::Box<[isize]> (Pointer(Unsize)); // scope 2 at ui/coercion/coerce-expect-unsized.rs:14:27: 14:89
        drop(_7) -> bb6;                 // scope 2 at ui/coercion/coerce-expect-unsized.rs:14:89: 14:90
    }

    bb6: {
        _11 = Box::<[closure@ui/coercion/coerce-expect-unsized.rs:15:49: 15:52]>::new(move _12) -> bb7; // scope 3 at ui/coercion/coerce-expect-unsized.rs:15:38: 15:65
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:15:38: 15:46
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn([closure@ui/coercion/coerce-expect-unsized.rs:15:49: 15:52]) -> Box<[closure@ui/coercion/coerce-expect-unsized.rs:15:49: 15:52]> {Box::<[closure@ui/coercion/coerce-expect-unsized.rs:15:49: 15:52]>::new}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = move _11 as std::boxed::Box<dyn std::ops::Fn(isize) -> u8> (Pointer(Unsize)); // scope 3 at ui/coercion/coerce-expect-unsized.rs:15:38: 15:65
        drop(_10) -> bb8;                // scope 3 at ui/coercion/coerce-expect-unsized.rs:15:65: 15:66
    }

    bb8: {
        _15 = const false;               // scope 4 at ui/coercion/coerce-expect-unsized.rs:16:48: 16:53
        _14 = Box::<bool>::new(move _15) -> bb9; // scope 4 at ui/coercion/coerce-expect-unsized.rs:16:29: 16:70
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:16:29: 16:37
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: fn(bool) -> Box<bool> {Box::<bool>::new}, val: Value(<ZST>) }
    }

    bb9: {
        _13 = move _14 as std::boxed::Box<dyn std::fmt::Debug> (Pointer(Unsize)); // scope 4 at ui/coercion/coerce-expect-unsized.rs:16:29: 16:70
        drop(_13) -> bb10;               // scope 4 at ui/coercion/coerce-expect-unsized.rs:16:70: 16:71
    }

    bb10: {
        _18 = const 'a';                 // scope 5 at ui/coercion/coerce-expect-unsized.rs:17:59: 17:62
        _17 = Box::<char>::new(move _18) -> bb11; // scope 5 at ui/coercion/coerce-expect-unsized.rs:17:29: 17:79
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:17:29: 17:37
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: fn(char) -> Box<char> {Box::<char>::new}, val: Value(<ZST>) }
    }

    bb11: {
        _16 = move _17 as std::boxed::Box<dyn std::fmt::Debug> (Pointer(Unsize)); // scope 5 at ui/coercion/coerce-expect-unsized.rs:17:29: 17:79
        drop(_16) -> bb12;               // scope 5 at ui/coercion/coerce-expect-unsized.rs:17:79: 17:80
    }

    bb12: {
        _22 = String::new() -> bb13;     // scope 12 at ui/coercion/coerce-expect-unsized.rs:26:22: 26:35
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:26:22: 26:33
                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(<ZST>) }
    }

    bb13: {
        _21 = &_22;                      // scope 12 at ui/coercion/coerce-expect-unsized.rs:26:19: 26:37
        _20 = _21;                       // scope 12 at ui/coercion/coerce-expect-unsized.rs:26:19: 26:37
        _19 = <String as Deref>::deref(move _20) -> [return: bb14, unwind: bb42]; // scope 12 at ui/coercion/coerce-expect-unsized.rs:26:19: 26:37
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:26:19: 26:37
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb14: {
        _26 = <String as From<&str>>::from(const "...") -> [return: bb15, unwind: bb42]; // scope 13 at ui/coercion/coerce-expect-unsized.rs:27:30: 27:49
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:27:30: 27:42
                                         // + user_ty: UserType(33)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:27:43: 27:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _25 = &_26;                      // scope 13 at ui/coercion/coerce-expect-unsized.rs:27:19: 27:74
        _24 = _25;                       // scope 13 at ui/coercion/coerce-expect-unsized.rs:27:19: 27:74
        _23 = <String as Deref>::deref(move _24) -> [return: bb16, unwind: bb41]; // scope 13 at ui/coercion/coerce-expect-unsized.rs:27:19: 27:74
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:27:19: 27:74
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb16: {
        _71 = const _;                   // scope 14 at ui/coercion/coerce-expect-unsized.rs:29:25: 29:29
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:29:25: 29:29
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[2])) }
        _35 = _71;                       // scope 14 at ui/coercion/coerce-expect-unsized.rs:29:25: 29:29
        _34 = _35;                       // scope 14 at ui/coercion/coerce-expect-unsized.rs:29:25: 29:29
        _33 = move _34 as &[&str] (Pointer(Unsize)); // scope 14 at ui/coercion/coerce-expect-unsized.rs:29:25: 29:29
        _70 = const _;                   // scope 14 at ui/coercion/coerce-expect-unsized.rs:29:31: 29:36
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:29:31: 29:36
                                         // + literal: Const { ty: &bool, val: Unevaluated(main, [], Some(promoted[1])) }
        _42 = _70;                       // scope 14 at ui/coercion/coerce-expect-unsized.rs:29:31: 29:36
        _41 = _42;                       // scope 14 at ui/coercion/coerce-expect-unsized.rs:29:31: 29:36
        _40 = core::fmt::ArgumentV1::<'_>::new_display::<bool>(move _41) -> [return: bb17, unwind: bb41]; // scope 14 at ui/coercion/coerce-expect-unsized.rs:29:31: 29:36
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:29:31: 29:36
                                         // + user_ty: UserType(37)
                                         // + literal: Const { ty: for<'b> fn(&'b bool) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<bool>}, val: Value(<ZST>) }
    }

    bb17: {
        _39 = [move _40];                // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _38 = &_39;                      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _37 = _38;                       // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _36 = move _37 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _32 = Arguments::<'_>::new_v1(move _33, move _36) -> [return: bb18, unwind: bb41]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(36)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb18: {
        _31 = format(move _32) -> [return: bb19, unwind: bb41]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb19: {
        _30 = move _31;                  // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _29 = &_30;                      // scope 14 at ui/coercion/coerce-expect-unsized.rs:28:19: 31:6
        _28 = _29;                       // scope 14 at ui/coercion/coerce-expect-unsized.rs:28:19: 31:6
        _27 = <String as Deref>::deref(move _28) -> [return: bb20, unwind: bb40]; // scope 14 at ui/coercion/coerce-expect-unsized.rs:28:19: 31:6
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:28:19: 31:6
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb20: {
        _45 = [const 1_isize, const 2_isize, const 3_isize]; // scope 15 at ui/coercion/coerce-expect-unsized.rs:33:36: 33:45
        _44 = Box::<[isize; 3]>::new(move _45) -> [return: bb21, unwind: bb40]; // scope 15 at ui/coercion/coerce-expect-unsized.rs:33:27: 33:46
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:33:27: 33:35
                                         // + user_ty: UserType(40)
                                         // + literal: Const { ty: fn([isize; 3]) -> Box<[isize; 3]> {Box::<[isize; 3]>::new}, val: Value(<ZST>) }
    }

    bb21: {
        _43 = move _44 as std::boxed::Box<[isize]> (Pointer(Unsize)); // scope 15 at ui/coercion/coerce-expect-unsized.rs:33:27: 33:46
        drop(_43) -> [return: bb22, unwind: bb40]; // scope 15 at ui/coercion/coerce-expect-unsized.rs:33:46: 33:47
    }

    bb22: {
        _47 = Box::<[closure@ui/coercion/coerce-expect-unsized.rs:34:47: 34:50]>::new(move _48) -> [return: bb23, unwind: bb40]; // scope 17 at ui/coercion/coerce-expect-unsized.rs:34:38: 34:61
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:34:38: 34:46
                                         // + user_ty: UserType(43)
                                         // + literal: Const { ty: fn([closure@ui/coercion/coerce-expect-unsized.rs:34:47: 34:50]) -> Box<[closure@ui/coercion/coerce-expect-unsized.rs:34:47: 34:50]> {Box::<[closure@ui/coercion/coerce-expect-unsized.rs:34:47: 34:50]>::new}, val: Value(<ZST>) }
    }

    bb23: {
        _46 = move _47 as std::boxed::Box<dyn std::ops::Fn(isize) -> u8> (Pointer(Unsize)); // scope 17 at ui/coercion/coerce-expect-unsized.rs:34:38: 34:61
        drop(_46) -> [return: bb24, unwind: bb40]; // scope 17 at ui/coercion/coerce-expect-unsized.rs:34:61: 34:62
    }

    bb24: {
        _52 = [const 1_isize, const 2_isize, const 3_isize]; // scope 18 at ui/coercion/coerce-expect-unsized.rs:36:56: 36:65
        _51 = RefCell::<[isize; 3]>::new(move _52) -> [return: bb25, unwind: bb40]; // scope 18 at ui/coercion/coerce-expect-unsized.rs:36:43: 36:66
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:36:43: 36:55
                                         // + user_ty: UserType(47)
                                         // + literal: Const { ty: fn([isize; 3]) -> RefCell<[isize; 3]> {RefCell::<[isize; 3]>::new}, val: Value(<ZST>) }
    }

    bb25: {
        _50 = Rc::<RefCell<[isize; 3]>>::new(move _51) -> [return: bb26, unwind: bb40]; // scope 18 at ui/coercion/coerce-expect-unsized.rs:36:35: 36:67
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:36:35: 36:42
                                         // + user_ty: UserType(46)
                                         // + literal: Const { ty: fn(RefCell<[isize; 3]>) -> Rc<RefCell<[isize; 3]>> {Rc::<RefCell<[isize; 3]>>::new}, val: Value(<ZST>) }
    }

    bb26: {
        _49 = move _50 as std::rc::Rc<std::cell::RefCell<[isize]>> (Pointer(Unsize)); // scope 18 at ui/coercion/coerce-expect-unsized.rs:36:35: 36:67
        drop(_49) -> [return: bb27, unwind: bb40]; // scope 18 at ui/coercion/coerce-expect-unsized.rs:36:67: 36:68
    }

    bb27: {
        _55 = RefCell::<[closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73]>::new(move _56) -> [return: bb28, unwind: bb40]; // scope 19 at ui/coercion/coerce-expect-unsized.rs:37:57: 37:84
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:37:57: 37:69
                                         // + user_ty: UserType(51)
                                         // + literal: Const { ty: fn([closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73]) -> RefCell<[closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73]> {RefCell::<[closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73]>::new}, val: Value(<ZST>) }
    }

    bb28: {
        _54 = Rc::<RefCell<[closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73]>>::new(move _55) -> [return: bb29, unwind: bb40]; // scope 19 at ui/coercion/coerce-expect-unsized.rs:37:49: 37:85
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:37:49: 37:56
                                         // + user_ty: UserType(50)
                                         // + literal: Const { ty: fn(RefCell<[closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73]>) -> Rc<RefCell<[closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73]>> {Rc::<RefCell<[closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73]>>::new}, val: Value(<ZST>) }
    }

    bb29: {
        _53 = move _54 as std::rc::Rc<std::cell::RefCell<dyn std::ops::FnMut(isize) -> u8>> (Pointer(Unsize)); // scope 19 at ui/coercion/coerce-expect-unsized.rs:37:49: 37:85
        drop(_53) -> [return: bb30, unwind: bb40]; // scope 19 at ui/coercion/coerce-expect-unsized.rs:37:85: 37:86
    }

    bb30: {
        _60 = const 32_usize;            // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _61 = const 8_usize;             // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _62 = alloc::alloc::exchange_malloc(move _60, move _61) -> [return: bb31, unwind: bb40]; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb31: {
        _63 = ShallowInitBox(move _62, [std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _65 = Box::<[closure@ui/coercion/coerce-expect-unsized.rs:40:18: 40:21]>::new(move _66) -> [return: bb32, unwind: bb44]; // scope 20 at ui/coercion/coerce-expect-unsized.rs:40:9: 40:32
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:40:9: 40:17
                                         // + user_ty: UserType(55)
                                         // + literal: Const { ty: fn([closure@ui/coercion/coerce-expect-unsized.rs:40:18: 40:21]) -> Box<[closure@ui/coercion/coerce-expect-unsized.rs:40:18: 40:21]> {Box::<[closure@ui/coercion/coerce-expect-unsized.rs:40:18: 40:21]>::new}, val: Value(<ZST>) }
    }

    bb32: {
        _64 = move _65 as std::boxed::Box<dyn std::ops::Fn(isize) -> u8> (Pointer(Unsize)); // scope 20 at ui/coercion/coerce-expect-unsized.rs:40:9: 40:32
        _68 = Box::<[closure@ui/coercion/coerce-expect-unsized.rs:41:18: 41:21]>::new(move _69) -> [return: bb33, unwind: bb39]; // scope 20 at ui/coercion/coerce-expect-unsized.rs:41:9: 41:39
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:41:9: 41:17
                                         // + user_ty: UserType(56)
                                         // + literal: Const { ty: fn([closure@ui/coercion/coerce-expect-unsized.rs:41:18: 41:21]) -> Box<[closure@ui/coercion/coerce-expect-unsized.rs:41:18: 41:21]> {Box::<[closure@ui/coercion/coerce-expect-unsized.rs:41:18: 41:21]>::new}, val: Value(<ZST>) }
    }

    bb33: {
        _67 = move _68 as std::boxed::Box<dyn std::ops::Fn(isize) -> u8> (Pointer(Unsize)); // scope 20 at ui/coercion/coerce-expect-unsized.rs:41:9: 41:39
        _73 = (((_63.0: std::ptr::Unique<[std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]>).0: std::ptr::NonNull<[std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]>).0: *const [std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_73) = [move _64, move _67];   // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _59 = move _63;                  // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _58 = move _59 as std::boxed::Box<[std::boxed::Box<dyn std::ops::Fn(isize) -> u8>]> (Pointer(Unsize)); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _57 = slice::<impl [Box<dyn Fn(isize) -> u8>]>::into_vec::<std::alloc::Global>(move _58) -> [return: bb34, unwind: bb40]; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(54)
                                         // + literal: Const { ty: fn(Box<[Box<dyn Fn(isize) -> u8>]>) -> Vec<Box<dyn Fn(isize) -> u8>> {slice::<impl [Box<dyn Fn(isize) -> u8>]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb34: {
        drop(_57) -> [return: bb35, unwind: bb40]; // scope 20 at ui/coercion/coerce-expect-unsized.rs:42:6: 42:7
    }

    bb35: {
        drop(_30) -> [return: bb36, unwind: bb41]; // scope 14 at ui/coercion/coerce-expect-unsized.rs:43:1: 43:2
    }

    bb36: {
        drop(_26) -> [return: bb37, unwind: bb42]; // scope 13 at ui/coercion/coerce-expect-unsized.rs:43:1: 43:2
    }

    bb37: {
        drop(_22) -> bb38;               // scope 12 at ui/coercion/coerce-expect-unsized.rs:43:1: 43:2
    }

    bb38: {
        return;                          // scope 0 at ui/coercion/coerce-expect-unsized.rs:43:2: 43:2
    }

    bb39 (cleanup): {
        drop(_64) -> bb44;               // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb40 (cleanup): {
        drop(_30) -> bb41;               // scope 14 at ui/coercion/coerce-expect-unsized.rs:43:1: 43:2
    }

    bb41 (cleanup): {
        drop(_26) -> bb42;               // scope 13 at ui/coercion/coerce-expect-unsized.rs:43:1: 43:2
    }

    bb42 (cleanup): {
        drop(_22) -> bb43;               // scope 12 at ui/coercion/coerce-expect-unsized.rs:43:1: 43:2
    }

    bb43 (cleanup): {
        resume;                          // scope 0 at ui/coercion/coerce-expect-unsized.rs:11:1: 43:2
    }

    bb44 (cleanup): {
        _72 = alloc::alloc::box_free::<[Box<dyn Fn(isize) -> u8>; 2], std::alloc::Global>(move (_63.0: std::ptr::Unique<[std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]>), move (_63.1: std::alloc::Global)) -> bb40; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[Box<dyn Fn(isize) -> u8>; 2]>, std::alloc::Global) {alloc::alloc::box_free::<[Box<dyn Fn(isize) -> u8>; 2], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/coercion/coerce-expect-unsized.rs:30:18: 30:38
    let mut _1: [&str; 2];               // in scope 0 at ui/coercion/coerce-expect-unsized.rs:30:18: 30:28
    let mut _2: &str;                    // in scope 0 at ui/coercion/coerce-expect-unsized.rs:30:24: 30:27
    let mut _3: &str;                    // in scope 0 at ui/coercion/coerce-expect-unsized.rs:30:24: 30:27

    bb0: {
        _3 = const "y";                  // scope 0 at ui/coercion/coerce-expect-unsized.rs:30:24: 30:27
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:30:24: 30:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at ui/coercion/coerce-expect-unsized.rs:30:24: 30:27
        _1 = [const "x", move _2];       // scope 0 at ui/coercion/coerce-expect-unsized.rs:30:18: 30:28
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:30:19: 30:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/coercion/coerce-expect-unsized.rs:30:18: 30:38
        return;                          // scope 0 at ui/coercion/coerce-expect-unsized.rs:30:18: 30:38
    }
}

promoted[1] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at ui/coercion/coerce-expect-unsized.rs:29:31: 29:36
    let mut _1: bool;                    // in scope 0 at ui/coercion/coerce-expect-unsized.rs:29:31: 29:36

    bb0: {
        _1 = const false;                // scope 0 at ui/coercion/coerce-expect-unsized.rs:29:31: 29:36
        _0 = &_1;                        // scope 0 at ui/coercion/coerce-expect-unsized.rs:29:31: 29:36
        return;                          // scope 0 at ui/coercion/coerce-expect-unsized.rs:29:31: 29:36
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/coercion/coerce-expect-unsized.rs:29:25: 29:29
    let mut _1: [&str; 1];               // in scope 0 at ui/coercion/coerce-expect-unsized.rs:29:25: 29:29

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/coercion/coerce-expect-unsized.rs:29:25: 29:29
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-expect-unsized.rs:29:25: 29:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/coercion/coerce-expect-unsized.rs:29:25: 29:29
        return;                          // scope 0 at ui/coercion/coerce-expect-unsized.rs:29:25: 29:29
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/coercion/coerce-expect-unsized.rs:27:59: 27:72
    let mut _1: i32;                     // in scope 0 at ui/coercion/coerce-expect-unsized.rs:27:59: 27:60

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/coercion/coerce-expect-unsized.rs:27:59: 27:60
        _0 = &_1;                        // scope 0 at ui/coercion/coerce-expect-unsized.rs:27:59: 27:72
        return;                          // scope 0 at ui/coercion/coerce-expect-unsized.rs:27:59: 27:72
    }
}

promoted[4] in main: &[closure@ui/coercion/coerce-expect-unsized.rs:22:37: 22:40] = {
    let mut _0: &[closure@ui/coercion/coerce-expect-unsized.rs:22:37: 22:40]; // return place in scope 0 at ui/coercion/coerce-expect-unsized.rs:22:34: 22:52
    let mut _1: [closure@ui/coercion/coerce-expect-unsized.rs:22:37: 22:40]; // in scope 0 at ui/coercion/coerce-expect-unsized.rs:22:35: 22:52

    bb0: {
        _1 = [closure@ui/coercion/coerce-expect-unsized.rs:22:37: 22:40]; // scope 0 at ui/coercion/coerce-expect-unsized.rs:22:37: 22:50
                                         // closure
                                         // + def_id: DefId(0:8 ~ coerce_expect_unsized[b14d]::main::{closure#1})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn((isize,)) -> u8,
                                         //     (),
                                         // ]
        _0 = &_1;                        // scope 0 at ui/coercion/coerce-expect-unsized.rs:22:34: 22:52
        return;                          // scope 0 at ui/coercion/coerce-expect-unsized.rs:22:34: 22:52
    }
}

promoted[5] in main: &[isize; 3] = {
    let mut _0: &[isize; 3];             // return place in scope 0 at ui/coercion/coerce-expect-unsized.rs:19:23: 19:37
    let mut _1: [isize; 3];              // in scope 0 at ui/coercion/coerce-expect-unsized.rs:19:24: 19:37

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize]; // scope 0 at ui/coercion/coerce-expect-unsized.rs:19:26: 19:35
        _0 = &_1;                        // scope 0 at ui/coercion/coerce-expect-unsized.rs:19:23: 19:37
        return;                          // scope 0 at ui/coercion/coerce-expect-unsized.rs:19:23: 19:37
    }
}

fn main::{closure#0}(_1: &[closure@ui/coercion/coerce-expect-unsized.rs:15:49: 15:52], _2: isize) -> u8 {
    debug x => _2;                       // in scope 0 at ui/coercion/coerce-expect-unsized.rs:15:50: 15:51
    let mut _0: u8;                      // return place in scope 0 at ui/coercion/coerce-expect-unsized.rs:15:53: 15:53
    let mut _3: isize;                   // in scope 0 at ui/coercion/coerce-expect-unsized.rs:15:54: 15:55

    bb0: {
        _3 = _2;                         // scope 0 at ui/coercion/coerce-expect-unsized.rs:15:54: 15:55
        _0 = move _3 as u8 (IntToInt);   // scope 0 at ui/coercion/coerce-expect-unsized.rs:15:53: 15:62
        return;                          // scope 0 at ui/coercion/coerce-expect-unsized.rs:15:62: 15:62
    }
}

fn main::{closure#1}(_1: &[closure@ui/coercion/coerce-expect-unsized.rs:22:37: 22:40], _2: isize) -> u8 {
    debug x => _2;                       // in scope 0 at ui/coercion/coerce-expect-unsized.rs:22:38: 22:39
    let mut _0: u8;                      // return place in scope 0 at ui/coercion/coerce-expect-unsized.rs:22:41: 22:41
    let mut _3: isize;                   // in scope 0 at ui/coercion/coerce-expect-unsized.rs:22:42: 22:43

    bb0: {
        _3 = _2;                         // scope 0 at ui/coercion/coerce-expect-unsized.rs:22:42: 22:43
        _0 = move _3 as u8 (IntToInt);   // scope 0 at ui/coercion/coerce-expect-unsized.rs:22:41: 22:50
        return;                          // scope 0 at ui/coercion/coerce-expect-unsized.rs:22:50: 22:50
    }
}

fn main::{closure#2}(_1: &[closure@ui/coercion/coerce-expect-unsized.rs:34:47: 34:50], _2: isize) -> u8 {
    debug x => _2;                       // in scope 0 at ui/coercion/coerce-expect-unsized.rs:34:48: 34:49
    let mut _0: u8;                      // return place in scope 0 at ui/coercion/coerce-expect-unsized.rs:34:51: 34:51
    let mut _3: isize;                   // in scope 0 at ui/coercion/coerce-expect-unsized.rs:34:52: 34:53

    bb0: {
        _3 = _2;                         // scope 0 at ui/coercion/coerce-expect-unsized.rs:34:52: 34:53
        _0 = move _3 as u8 (IntToInt);   // scope 0 at ui/coercion/coerce-expect-unsized.rs:34:51: 34:60
        return;                          // scope 0 at ui/coercion/coerce-expect-unsized.rs:34:60: 34:60
    }
}

fn main::{closure#3}(_1: &[closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73], _2: isize) -> u8 {
    debug x => _2;                       // in scope 0 at ui/coercion/coerce-expect-unsized.rs:37:71: 37:72
    let mut _0: u8;                      // return place in scope 0 at ui/coercion/coerce-expect-unsized.rs:37:74: 37:74
    let mut _3: isize;                   // in scope 0 at ui/coercion/coerce-expect-unsized.rs:37:75: 37:76

    bb0: {
        _3 = _2;                         // scope 0 at ui/coercion/coerce-expect-unsized.rs:37:75: 37:76
        _0 = move _3 as u8 (IntToInt);   // scope 0 at ui/coercion/coerce-expect-unsized.rs:37:74: 37:83
        return;                          // scope 0 at ui/coercion/coerce-expect-unsized.rs:37:83: 37:83
    }
}

fn main::{closure#4}(_1: &[closure@ui/coercion/coerce-expect-unsized.rs:40:18: 40:21], _2: isize) -> u8 {
    debug x => _2;                       // in scope 0 at ui/coercion/coerce-expect-unsized.rs:40:19: 40:20
    let mut _0: u8;                      // return place in scope 0 at ui/coercion/coerce-expect-unsized.rs:40:22: 40:22
    let mut _3: isize;                   // in scope 0 at ui/coercion/coerce-expect-unsized.rs:40:23: 40:24

    bb0: {
        _3 = _2;                         // scope 0 at ui/coercion/coerce-expect-unsized.rs:40:23: 40:24
        _0 = move _3 as u8 (IntToInt);   // scope 0 at ui/coercion/coerce-expect-unsized.rs:40:22: 40:31
        return;                          // scope 0 at ui/coercion/coerce-expect-unsized.rs:40:31: 40:31
    }
}

fn main::{closure#5}(_1: &[closure@ui/coercion/coerce-expect-unsized.rs:41:18: 41:21], _2: isize) -> u8 {
    debug x => _2;                       // in scope 0 at ui/coercion/coerce-expect-unsized.rs:41:19: 41:20
    let mut _0: u8;                      // return place in scope 0 at ui/coercion/coerce-expect-unsized.rs:41:22: 41:22
    let mut _3: i16;                     // in scope 0 at ui/coercion/coerce-expect-unsized.rs:41:23: 41:31
    let mut _4: isize;                   // in scope 0 at ui/coercion/coerce-expect-unsized.rs:41:23: 41:24

    bb0: {
        _4 = _2;                         // scope 0 at ui/coercion/coerce-expect-unsized.rs:41:23: 41:24
        _3 = move _4 as i16 (IntToInt);  // scope 0 at ui/coercion/coerce-expect-unsized.rs:41:23: 41:31
        _0 = move _3 as u8 (IntToInt);   // scope 0 at ui/coercion/coerce-expect-unsized.rs:41:22: 41:38
        return;                          // scope 0 at ui/coercion/coerce-expect-unsized.rs:41:38: 41:38
    }
}
