// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<[isize]>;
    let mut _2: std::boxed::Box<[isize; 3]>;
    let mut _3: [isize; 3];
    let mut _4: std::boxed::Box<[isize]>;
    let mut _5: std::boxed::Box<[isize; 3]>;
    let mut _6: [isize; 3];
    let mut _7: bool;
    let mut _8: std::boxed::Box<[isize]>;
    let mut _9: std::boxed::Box<[isize; 3]>;
    let mut _10: [isize; 3];
    let mut _11: bool;
    let mut _12: std::boxed::Box<dyn std::ops::Fn(isize) -> u8>;
    let mut _13: std::boxed::Box<[closure@ui/coercion/coerce-expect-unsized.rs:15:49: 15:52]>;
    let mut _14: std::boxed::Box<dyn std::fmt::Debug>;
    let mut _15: std::boxed::Box<bool>;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: std::boxed::Box<dyn std::fmt::Debug>;
    let mut _19: std::boxed::Box<char>;
    let mut _20: char;
    let mut _21: bool;
    let _22: &str;
    let _23: &std::string::String;
    let _24: std::string::String;
    let _25: &str;
    let _26: &std::string::String;
    let _27: std::string::String;
    let mut _28: bool;
    let _29: &str;
    let _30: &std::string::String;
    let _31: std::string::String;
    let mut _32: bool;
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let mut _40: &[&str];
    let _41: &str;
    let mut _42: std::boxed::Box<[isize]>;
    let mut _43: std::boxed::Box<[isize; 3]>;
    let mut _44: [isize; 3];
    let mut _45: std::boxed::Box<dyn std::ops::Fn(isize) -> u8>;
    let mut _46: std::boxed::Box<[closure@ui/coercion/coerce-expect-unsized.rs:34:47: 34:50]>;
    let mut _47: std::rc::Rc<std::cell::RefCell<[isize]>>;
    let mut _48: std::rc::Rc<std::cell::RefCell<[isize; 3]>>;
    let mut _49: std::cell::RefCell<[isize; 3]>;
    let mut _50: [isize; 3];
    let mut _51: std::rc::Rc<std::cell::RefCell<dyn std::ops::FnMut(isize) -> u8>>;
    let mut _52: std::rc::Rc<std::cell::RefCell<[closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73]>>;
    let mut _53: std::cell::RefCell<[closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73]>;
    let mut _54: std::vec::Vec<std::boxed::Box<dyn std::ops::Fn(isize) -> u8>>;
    let mut _55: std::boxed::Box<[std::boxed::Box<dyn std::ops::Fn(isize) -> u8>]>;
    let mut _56: std::boxed::Box<[std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]>;
    let mut _57: usize;
    let mut _58: usize;
    let mut _59: *mut u8;
    let mut _60: std::boxed::Box<[std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]>;
    let mut _61: std::boxed::Box<dyn std::ops::Fn(isize) -> u8>;
    let mut _62: std::boxed::Box<[closure@ui/coercion/coerce-expect-unsized.rs:40:18: 40:21]>;
    let mut _63: std::boxed::Box<dyn std::ops::Fn(isize) -> u8>;
    let mut _64: std::boxed::Box<[closure@ui/coercion/coerce-expect-unsized.rs:41:18: 41:21]>;
    let mut _69: &mut std::boxed::Box<[std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]>;
    let mut _70: ();
    let mut _71: *const [std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2];
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                            scope 7 {
                                scope 8 {
                                    scope 9 {
                                        scope 10 {
                                            scope 11 {
                                                scope 12 {
                                                    scope 13 {
                                                        let mut _68: &i32;
                                                        scope 14 {
                                                            let _33: std::string::String;
                                                            let mut _65: &[&str; 2];
                                                            let mut _66: &bool;
                                                            let mut _67: &[&str; 1];
                                                            scope 15 {
                                                                scope 17 {
                                                                    scope 18 {
                                                                        scope 19 {
                                                                            scope 20 {
                                                                                let mut _72: *const ();
                                                                                let mut _73: usize;
                                                                                let mut _74: usize;
                                                                                let mut _75: usize;
                                                                                let mut _76: usize;
                                                                                let mut _77: bool;
                                                                                scope 21 {
                                                                                }
                                                                                scope 22 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 16 {
                                                                debug res => _33;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = [const 1_isize, const 2_isize, const 3_isize];
        _2 = Box::<[isize; 3]>::new(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2 as std::boxed::Box<[isize]> (Pointer(Unsize));
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = const true;
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _6 = [const 1_isize, const 2_isize, const 3_isize];
        goto -> bb5;
    }

    bb4: {
        _6 = [const 1_isize, const 3_isize, const 4_isize];
        goto -> bb5;
    }

    bb5: {
        _5 = Box::<[isize; 3]>::new(move _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        _4 = move _5 as std::boxed::Box<[isize]> (Pointer(Unsize));
        drop(_4) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = const true;
        switchInt(_11) -> [0: bb8, otherwise: bb9];
    }

    bb8: {
        _10 = [const 1_isize, const 3_isize, const 4_isize];
        goto -> bb10;
    }

    bb9: {
        _10 = [const 1_isize, const 2_isize, const 3_isize];
        goto -> bb10;
    }

    bb10: {
        _9 = Box::<[isize; 3]>::new(move _10) -> [return: bb11, unwind continue];
    }

    bb11: {
        _8 = move _9 as std::boxed::Box<[isize]> (Pointer(Unsize));
        drop(_8) -> [return: bb12, unwind continue];
    }

    bb12: {
        _13 = Box::<[closure@ui/coercion/coerce-expect-unsized.rs:15:49: 15:52]>::new(const ZeroSized: [closure@ui/coercion/coerce-expect-unsized.rs:15:49: 15:52]) -> [return: bb13, unwind continue];
    }

    bb13: {
        _12 = move _13 as std::boxed::Box<dyn std::ops::Fn(isize) -> u8> (Pointer(Unsize));
        drop(_12) -> [return: bb14, unwind continue];
    }

    bb14: {
        _17 = const true;
        _16 = Not(_17);
        _15 = Box::<bool>::new(move _16) -> [return: bb15, unwind continue];
    }

    bb15: {
        _14 = move _15 as std::boxed::Box<dyn std::fmt::Debug> (Pointer(Unsize));
        drop(_14) -> [return: bb16, unwind continue];
    }

    bb16: {
        _21 = const true;
        switchInt(_21) -> [0: bb17, otherwise: bb18];
    }

    bb17: {
        _20 = const 'b';
        goto -> bb19;
    }

    bb18: {
        _20 = const 'a';
        goto -> bb19;
    }

    bb19: {
        _19 = Box::<char>::new(move _20) -> [return: bb20, unwind continue];
    }

    bb20: {
        _18 = move _19 as std::boxed::Box<dyn std::fmt::Debug> (Pointer(Unsize));
        drop(_18) -> [return: bb21, unwind continue];
    }

    bb21: {
        _24 = String::new() -> [return: bb22, unwind continue];
    }

    bb22: {
        _23 = &_24;
        _22 = <String as Deref>::deref(_23) -> [return: bb23, unwind: bb56];
    }

    bb23: {
        _28 = const true;
        switchInt(move _28) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _27 = <String as From<&str>>::from(const "...") -> [return: bb60, unwind: bb56];
    }

    bb25: {
        _68 = const _;
        _27 = <i32 as ToString>::to_string(_68) -> [return: bb61, unwind: bb56];
    }

    bb26: {
        _26 = &_27;
        _25 = <String as Deref>::deref(_26) -> [return: bb27, unwind: bb55];
    }

    bb27: {
        _32 = const true;
        switchInt(_32) -> [0: bb28, otherwise: bb29];
    }

    bb28: {
        _65 = const _;
        _40 = _65 as &[&str] (Pointer(Unsize));
        _41 = const "+";
        _31 = slice::<impl [&str]>::join::<&str>(move _40, _41) -> [return: bb62, unwind: bb55];
    }

    bb29: {
        _67 = const _;
        _35 = _67 as &[&str] (Pointer(Unsize));
        _66 = const _;
        _39 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_66) -> [return: bb30, unwind: bb55];
    }

    bb30: {
        _38 = [move _39];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _34 = Arguments::<'_>::new_v1(move _35, move _36) -> [return: bb31, unwind: bb55];
    }

    bb31: {
        _33 = format(move _34) -> [return: bb32, unwind: bb55];
    }

    bb32: {
        _31 = move _33;
        goto -> bb33;
    }

    bb33: {
        _30 = &_31;
        _29 = <String as Deref>::deref(_30) -> [return: bb34, unwind: bb54];
    }

    bb34: {
        _44 = [const 1_isize, const 2_isize, const 3_isize];
        _43 = Box::<[isize; 3]>::new(move _44) -> [return: bb35, unwind: bb54];
    }

    bb35: {
        _42 = move _43 as std::boxed::Box<[isize]> (Pointer(Unsize));
        drop(_42) -> [return: bb36, unwind: bb54];
    }

    bb36: {
        _46 = Box::<[closure@ui/coercion/coerce-expect-unsized.rs:34:47: 34:50]>::new(const ZeroSized: [closure@ui/coercion/coerce-expect-unsized.rs:34:47: 34:50]) -> [return: bb37, unwind: bb54];
    }

    bb37: {
        _45 = move _46 as std::boxed::Box<dyn std::ops::Fn(isize) -> u8> (Pointer(Unsize));
        drop(_45) -> [return: bb38, unwind: bb54];
    }

    bb38: {
        _50 = [const 1_isize, const 2_isize, const 3_isize];
        _49 = RefCell::<[isize; 3]>::new(move _50) -> [return: bb39, unwind: bb54];
    }

    bb39: {
        _48 = Rc::<RefCell<[isize; 3]>>::new(move _49) -> [return: bb40, unwind: bb54];
    }

    bb40: {
        _47 = move _48 as std::rc::Rc<std::cell::RefCell<[isize]>> (Pointer(Unsize));
        drop(_47) -> [return: bb41, unwind: bb54];
    }

    bb41: {
        _53 = RefCell::<[closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73]>::new(const ZeroSized: [closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73]) -> [return: bb42, unwind: bb54];
    }

    bb42: {
        _52 = Rc::<RefCell<[closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73]>>::new(move _53) -> [return: bb43, unwind: bb54];
    }

    bb43: {
        _51 = move _52 as std::rc::Rc<std::cell::RefCell<dyn std::ops::FnMut(isize) -> u8>> (Pointer(Unsize));
        drop(_51) -> [return: bb44, unwind: bb54];
    }

    bb44: {
        _57 = SizeOf([std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]);
        _58 = AlignOf([std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]);
        _59 = alloc::alloc::exchange_malloc(move _57, move _58) -> [return: bb45, unwind: bb54];
    }

    bb45: {
        _60 = ShallowInitBox(move _59, [std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]);
        _62 = Box::<[closure@ui/coercion/coerce-expect-unsized.rs:40:18: 40:21]>::new(const ZeroSized: [closure@ui/coercion/coerce-expect-unsized.rs:40:18: 40:21]) -> [return: bb46, unwind: bb58];
    }

    bb46: {
        _61 = move _62 as std::boxed::Box<dyn std::ops::Fn(isize) -> u8> (Pointer(Unsize));
        _64 = Box::<[closure@ui/coercion/coerce-expect-unsized.rs:41:18: 41:21]>::new(const ZeroSized: [closure@ui/coercion/coerce-expect-unsized.rs:41:18: 41:21]) -> [return: bb47, unwind: bb53];
    }

    bb47: {
        _63 = move _64 as std::boxed::Box<dyn std::ops::Fn(isize) -> u8> (Pointer(Unsize));
        _71 = (((_60.0: std::ptr::Unique<[std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]>).0: std::ptr::NonNull<[std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]>).0: *const [std::boxed::Box<dyn std::ops::Fn(isize) -> u8>; 2]);
        _72 = _71 as *const () (PtrToPtr);
        _73 = _72 as usize (Transmute);
        _74 = AlignOf(std::boxed::Box<dyn std::ops::Fn(isize) -> u8>);
        _75 = Sub(_74, const 1_usize);
        _76 = BitAnd(_73, _75);
        _77 = Eq(_76, const 0_usize);
        assert(_77, "misaligned pointer dereference: address must be a multiple of {} but is {}", _74, _73) -> [success: bb59, unwind unreachable];
    }

    bb48: {
        drop(_54) -> [return: bb49, unwind: bb54];
    }

    bb49: {
        drop(_31) -> [return: bb50, unwind: bb55];
    }

    bb50: {
        drop(_27) -> [return: bb51, unwind: bb56];
    }

    bb51: {
        drop(_24) -> [return: bb52, unwind continue];
    }

    bb52: {
        return;
    }

    bb53 (cleanup): {
        drop(_61) -> [return: bb58, unwind terminate];
    }

    bb54 (cleanup): {
        drop(_31) -> [return: bb55, unwind terminate];
    }

    bb55 (cleanup): {
        drop(_27) -> [return: bb56, unwind terminate];
    }

    bb56 (cleanup): {
        drop(_24) -> [return: bb57, unwind terminate];
    }

    bb57 (cleanup): {
        resume;
    }

    bb58 (cleanup): {
        _69 = &mut _60;
        _70 = <Box<[Box<dyn Fn(isize) -> u8>; 2]> as Drop>::drop(move _69) -> [return: bb63, unwind terminate];
    }

    bb59: {
        (*_71) = [move _61, move _63];
        _56 = move _60;
        _55 = move _56 as std::boxed::Box<[std::boxed::Box<dyn std::ops::Fn(isize) -> u8>]> (Pointer(Unsize));
        _54 = slice::<impl [Box<dyn Fn(isize) -> u8>]>::into_vec::<std::alloc::Global>(move _55) -> [return: bb48, unwind: bb54];
    }

    bb60: {
        goto -> bb26;
    }

    bb61: {
        goto -> bb26;
    }

    bb62: {
        goto -> bb33;
    }

    bb63 (cleanup): {
        goto -> bb54;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];
    let mut _2: &str;
    let mut _3: &str;

    bb0: {
        _3 = const "y";
        _2 = &(*_3);
        _1 = [const "x", move _2];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[closure@ui/coercion/coerce-expect-unsized.rs:22:37: 22:40] = {
    let mut _0: &[closure@ui/coercion/coerce-expect-unsized.rs:22:37: 22:40];
    let mut _1: [closure@ui/coercion/coerce-expect-unsized.rs:22:37: 22:40];

    bb0: {
        _1 = [closure@ui/coercion/coerce-expect-unsized.rs:22:37: 22:40];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[isize; 3] = {
    let mut _0: &[isize; 3];
    let mut _1: [isize; 3];

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize];
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/coercion/coerce-expect-unsized.rs:15:49: 15:52], _2: isize) -> u8 {
    debug x => _2;
    let mut _0: u8;

    bb0: {
        _0 = _2 as u8 (IntToInt);
        return;
    }
}

fn main::{closure#1}(_1: &[closure@ui/coercion/coerce-expect-unsized.rs:22:37: 22:40], _2: isize) -> u8 {
    debug x => _2;
    let mut _0: u8;

    bb0: {
        _0 = _2 as u8 (IntToInt);
        return;
    }
}

fn main::{closure#2}(_1: &[closure@ui/coercion/coerce-expect-unsized.rs:34:47: 34:50], _2: isize) -> u8 {
    debug x => _2;
    let mut _0: u8;

    bb0: {
        _0 = _2 as u8 (IntToInt);
        return;
    }
}

fn main::{closure#3}(_1: &[closure@ui/coercion/coerce-expect-unsized.rs:37:70: 37:73], _2: isize) -> u8 {
    debug x => _2;
    let mut _0: u8;

    bb0: {
        _0 = _2 as u8 (IntToInt);
        return;
    }
}

fn main::{closure#4}(_1: &[closure@ui/coercion/coerce-expect-unsized.rs:40:18: 40:21], _2: isize) -> u8 {
    debug x => _2;
    let mut _0: u8;

    bb0: {
        _0 = _2 as u8 (IntToInt);
        return;
    }
}

fn main::{closure#5}(_1: &[closure@ui/coercion/coerce-expect-unsized.rs:41:18: 41:21], _2: isize) -> u8 {
    debug x => _2;
    let mut _0: u8;
    let mut _3: i16;

    bb0: {
        _3 = _2 as i16 (IntToInt);
        _0 = move _3 as u8 (IntToInt);
        return;
    }
}
