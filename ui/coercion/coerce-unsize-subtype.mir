// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn lub_short(_1: &[&T], _2: &[&T]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-unsize-subtype.rs:7:47: 7:47

    bb0: {
        return;                          // scope 0 at ui/coercion/coerce-unsize-subtype.rs:7:49: 7:49
    }
}

fn long_and_short(_1: &[&T; 1], _2: &[&T; 1]) -> () {
    debug xs => _1;                      // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:10:26: 10:28
    debug ys => _2;                      // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:10:48: 10:50
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-unsize-subtype.rs:10:65: 10:65
    let _3: ();                          // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:11:5: 11:22
    let mut _4: &[&T];                   // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:11:15: 11:17
    let mut _5: &[&T; 1];                // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:11:15: 11:17
    let mut _6: &[&T];                   // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:11:19: 11:21
    let mut _7: &[&T; 1];                // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:11:19: 11:21

    bb0: {
        _5 = _1;                         // scope 0 at ui/coercion/coerce-unsize-subtype.rs:11:15: 11:17
        _4 = move _5 as &[&T] (Pointer(Unsize)); // scope 0 at ui/coercion/coerce-unsize-subtype.rs:11:15: 11:17
        _7 = _2;                         // scope 0 at ui/coercion/coerce-unsize-subtype.rs:11:19: 11:21
        _6 = move _7 as &[&T] (Pointer(Unsize)); // scope 0 at ui/coercion/coerce-unsize-subtype.rs:11:19: 11:21
        _3 = lub_short::<T>(move _4, move _6) -> bb1; // scope 0 at ui/coercion/coerce-unsize-subtype.rs:11:5: 11:22
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-unsize-subtype.rs:11:5: 11:14
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b [&'a T], &'c [&'a T]) {lub_short::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/coercion/coerce-unsize-subtype.rs:12:2: 12:2
    }
}

long_and_short::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/coercion/coerce-unsize-subtype.rs:10:44: 10:45

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/coercion/coerce-unsize-subtype.rs:10:44: 10:45
        return;                          // scope 0 at ui/coercion/coerce-unsize-subtype.rs:10:44: 10:45
    }
}

long_and_short::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/coercion/coerce-unsize-subtype.rs:10:61: 10:62

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/coercion/coerce-unsize-subtype.rs:10:61: 10:62
        return;                          // scope 0 at ui/coercion/coerce-unsize-subtype.rs:10:61: 10:62
    }
}

fn long_to_short(_1: &[&T; 1]) -> &[&T] {
    debug xs => _1;                      // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:15:29: 15:31
    let mut _0: &[&T];                   // return place in scope 0 at ui/coercion/coerce-unsize-subtype.rs:15:57: 15:68
    let mut _2: &[&T; 1];                // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:16:5: 16:7

    bb0: {
        _2 = _1;                         // scope 0 at ui/coercion/coerce-unsize-subtype.rs:16:5: 16:7
        _0 = move _2 as &[&T] (Pointer(Unsize)); // scope 0 at ui/coercion/coerce-unsize-subtype.rs:16:5: 16:7
        return;                          // scope 0 at ui/coercion/coerce-unsize-subtype.rs:17:2: 17:2
    }
}

long_to_short::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/coercion/coerce-unsize-subtype.rs:15:50: 15:51

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/coercion/coerce-unsize-subtype.rs:15:50: 15:51
        return;                          // scope 0 at ui/coercion/coerce-unsize-subtype.rs:15:50: 15:51
    }
}

fn long_to_short_rc(_1: Rc<[&T; 1]>) -> Rc<[&T]> {
    debug xs => _1;                      // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:20:28: 20:30
    let mut _0: std::rc::Rc<[&T]>;       // return place in scope 0 at ui/coercion/coerce-unsize-subtype.rs:20:56: 20:67
    let mut _2: std::rc::Rc<[&T; 1]>;    // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:21:5: 21:7

    bb0: {
        _2 = move _1;                    // scope 0 at ui/coercion/coerce-unsize-subtype.rs:21:5: 21:7
        _0 = move _2 as std::rc::Rc<[&T]> (Pointer(Unsize)); // scope 0 at ui/coercion/coerce-unsize-subtype.rs:21:5: 21:7
        return;                          // scope 0 at ui/coercion/coerce-unsize-subtype.rs:22:2: 22:2
    }
}

long_to_short_rc::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/coercion/coerce-unsize-subtype.rs:20:48: 20:49

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/coercion/coerce-unsize-subtype.rs:20:48: 20:49
        return;                          // scope 0 at ui/coercion/coerce-unsize-subtype.rs:20:48: 20:49
    }
}

fn long_and_short_lub1(_1: &[&T; 1], _2: &[&T]) -> () {
    debug xs => _1;                      // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:27:35: 27:37
    debug ys => _2;                      // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:27:60: 27:62
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-unsize-subtype.rs:27:77: 27:77
    let _3: [&[&T]; 2];                  // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:28:9: 28:16
    let mut _4: &[&T];                   // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:28:20: 28:22
    let mut _5: &[&T; 1];                // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:28:20: 28:22
    let mut _6: &[&T];                   // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:28:24: 28:26
    let mut _8: &[&T];                   // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:29:20: 29:22
    let mut _9: &[&T];                   // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:29:24: 29:26
    let mut _10: &[&T; 1];               // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:29:24: 29:26
    scope 1 {
        debug _order1 => _3;             // in scope 1 at ui/coercion/coerce-unsize-subtype.rs:28:9: 28:16
        let _7: [&[&T]; 2];              // in scope 1 at ui/coercion/coerce-unsize-subtype.rs:29:9: 29:16
        scope 2 {
            debug _order2 => _7;         // in scope 2 at ui/coercion/coerce-unsize-subtype.rs:29:9: 29:16
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at ui/coercion/coerce-unsize-subtype.rs:28:20: 28:22
        _4 = move _5 as &[&T] (Pointer(Unsize)); // scope 0 at ui/coercion/coerce-unsize-subtype.rs:28:20: 28:22
        _6 = _2;                         // scope 0 at ui/coercion/coerce-unsize-subtype.rs:28:24: 28:26
        _3 = [move _4, move _6];         // scope 0 at ui/coercion/coerce-unsize-subtype.rs:28:19: 28:27
        _8 = _2;                         // scope 1 at ui/coercion/coerce-unsize-subtype.rs:29:20: 29:22
        _10 = _1;                        // scope 1 at ui/coercion/coerce-unsize-subtype.rs:29:24: 29:26
        _9 = move _10 as &[&T] (Pointer(Unsize)); // scope 1 at ui/coercion/coerce-unsize-subtype.rs:29:24: 29:26
        _7 = [move _8, move _9];         // scope 1 at ui/coercion/coerce-unsize-subtype.rs:29:19: 29:27
        return;                          // scope 0 at ui/coercion/coerce-unsize-subtype.rs:30:2: 30:2
    }
}

long_and_short_lub1::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/coercion/coerce-unsize-subtype.rs:27:56: 27:57

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/coercion/coerce-unsize-subtype.rs:27:56: 27:57
        return;                          // scope 0 at ui/coercion/coerce-unsize-subtype.rs:27:56: 27:57
    }
}

fn long_and_short_lub2(_1: &[&T], _2: &[&T; 1]) -> () {
    debug xs => _1;                      // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:35:35: 35:37
    debug ys => _2;                      // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:35:57: 35:59
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-unsize-subtype.rs:35:77: 35:77
    let _3: [&[&T]; 2];                  // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:36:9: 36:16
    let mut _4: &[&T];                   // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:36:20: 36:22
    let mut _5: &[&T];                   // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:36:24: 36:26
    let mut _6: &[&T; 1];                // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:36:24: 36:26
    let mut _8: &[&T];                   // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:37:20: 37:22
    let mut _9: &[&T; 1];                // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:37:20: 37:22
    let mut _10: &[&T];                  // in scope 0 at ui/coercion/coerce-unsize-subtype.rs:37:24: 37:26
    scope 1 {
        debug _order1 => _3;             // in scope 1 at ui/coercion/coerce-unsize-subtype.rs:36:9: 36:16
        let _7: [&[&T]; 2];              // in scope 1 at ui/coercion/coerce-unsize-subtype.rs:37:9: 37:16
        scope 2 {
            debug _order2 => _7;         // in scope 2 at ui/coercion/coerce-unsize-subtype.rs:37:9: 37:16
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/coercion/coerce-unsize-subtype.rs:36:20: 36:22
        _6 = _2;                         // scope 0 at ui/coercion/coerce-unsize-subtype.rs:36:24: 36:26
        _5 = move _6 as &[&T] (Pointer(Unsize)); // scope 0 at ui/coercion/coerce-unsize-subtype.rs:36:24: 36:26
        _3 = [move _4, move _5];         // scope 0 at ui/coercion/coerce-unsize-subtype.rs:36:19: 36:27
        _9 = _2;                         // scope 1 at ui/coercion/coerce-unsize-subtype.rs:37:20: 37:22
        _8 = move _9 as &[&T] (Pointer(Unsize)); // scope 1 at ui/coercion/coerce-unsize-subtype.rs:37:20: 37:22
        _10 = _1;                        // scope 1 at ui/coercion/coerce-unsize-subtype.rs:37:24: 37:26
        _7 = [move _8, move _10];        // scope 1 at ui/coercion/coerce-unsize-subtype.rs:37:19: 37:27
        return;                          // scope 0 at ui/coercion/coerce-unsize-subtype.rs:38:2: 38:2
    }
}

long_and_short_lub2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/coercion/coerce-unsize-subtype.rs:35:73: 35:74

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/coercion/coerce-unsize-subtype.rs:35:73: 35:74
        return;                          // scope 0 at ui/coercion/coerce-unsize-subtype.rs:35:73: 35:74
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-unsize-subtype.rs:40:11: 40:11

    bb0: {
        return;                          // scope 0 at ui/coercion/coerce-unsize-subtype.rs:40:13: 40:13
    }
}
