// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:8:1: 8:17>::talk(_1: &mut SpeechMaker) -> () {
    debug self => _1;                    // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:9:17: 9:26
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:9:28: 9:28
    let mut _2: (usize, bool);           // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:10:9: 10:27

    bb0: {
        _2 = CheckedAdd(((*_1).0: usize), const 1_usize); // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:10:9: 10:27
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: usize), const 1_usize) -> bb1; // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:10:9: 10:27
    }

    bb1: {
        ((*_1).0: usize) = move (_2.0: usize); // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:10:9: 10:27
        return;                          // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:11:6: 11:6
    }
}

fn give_a_few_speeches(_1: &mut SpeechMaker) -> () {
    debug speaker => _1;                 // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:14:24: 14:31
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:14:51: 14:51
    let _2: ();                          // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:19:5: 19:19
    let mut _3: &mut SpeechMaker;        // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:19:5: 19:19
    let _4: ();                          // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:20:5: 20:19
    let mut _5: &mut SpeechMaker;        // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:20:5: 20:19
    let _6: ();                          // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:21:5: 21:19
    let mut _7: &mut SpeechMaker;        // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:21:5: 21:19

    bb0: {
        _3 = &mut (*_1);                 // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:19:5: 19:19
        _2 = SpeechMaker::talk(move _3) -> bb1; // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:19:5: 19:19
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:19:13: 19:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut SpeechMaker) {SpeechMaker::talk}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut (*_1);                 // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:20:5: 20:19
        _4 = SpeechMaker::talk(move _5) -> bb2; // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:20:5: 20:19
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:20:13: 20:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut SpeechMaker) {SpeechMaker::talk}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut (*_1);                 // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:21:5: 21:19
        _6 = SpeechMaker::talk(move _7) -> bb3; // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:21:5: 21:19
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:21:13: 21:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut SpeechMaker) {SpeechMaker::talk}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:22:2: 22:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:24:15: 24:15
    let mut _1: SpeechMaker;             // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:25:9: 25:20
    let _2: ();                          // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:26:5: 26:38
    let mut _3: &mut SpeechMaker;        // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:26:25: 26:37
    let mut _4: &mut SpeechMaker;        // in scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:26:25: 26:37
    scope 1 {
        debug lincoln => _1;             // in scope 1 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:25:9: 25:20
    }

    bb0: {
        _1 = SpeechMaker { speeches: const 22_usize }; // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:25:23: 25:49
        _4 = &mut _1;                    // scope 1 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:26:25: 26:37
        _3 = &mut (*_4);                 // scope 1 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:26:25: 26:37
        _2 = give_a_few_speeches(move _3) -> bb1; // scope 1 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:26:5: 26:38
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:26:5: 26:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut SpeechMaker) {give_a_few_speeches}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/coercion/coerce-reborrow-mut-ptr-rcvr.rs:27:2: 27:2
    }
}
