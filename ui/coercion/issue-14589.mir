// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/issue-14589.rs:7:11: 7:11
    let _1: ();                          // in scope 0 at ui/coercion/issue-14589.rs:8:5: 8:46
    let mut _2: std::boxed::Box<dyn Foo>; // in scope 0 at ui/coercion/issue-14589.rs:8:26: 8:45
    let mut _3: std::boxed::Box<Output>; // in scope 0 at ui/coercion/issue-14589.rs:8:26: 8:45
    let mut _4: Output;                  // in scope 0 at ui/coercion/issue-14589.rs:8:35: 8:44
    let _5: ();                          // in scope 0 at ui/coercion/issue-14589.rs:9:5: 9:51
    let mut _6: std::boxed::Box<dyn Foo>; // in scope 0 at ui/coercion/issue-14589.rs:9:31: 9:50
    let mut _7: std::boxed::Box<Output>; // in scope 0 at ui/coercion/issue-14589.rs:9:31: 9:50
    let mut _8: Output;                  // in scope 0 at ui/coercion/issue-14589.rs:9:40: 9:49
    let _9: ();                          // in scope 0 at ui/coercion/issue-14589.rs:10:5: 10:58
    let mut _10: &Test<std::boxed::Box<dyn Foo>>; // in scope 0 at ui/coercion/issue-14589.rs:10:5: 10:58
    let _11: Test<std::boxed::Box<dyn Foo>>; // in scope 0 at ui/coercion/issue-14589.rs:10:5: 10:32
    let mut _12: std::boxed::Box<dyn Foo>; // in scope 0 at ui/coercion/issue-14589.rs:10:38: 10:57
    let mut _13: std::boxed::Box<Output>; // in scope 0 at ui/coercion/issue-14589.rs:10:38: 10:57
    let mut _14: Output;                 // in scope 0 at ui/coercion/issue-14589.rs:10:47: 10:56

    bb0: {
        _4 = const Output(0_isize);      // scope 0 at ui/coercion/issue-14589.rs:8:35: 8:44
                                         // mir::Constant
                                         // + span: ui/coercion/issue-14589.rs:8:35: 8:44
                                         // + literal: Const { ty: Output, val: Value(Scalar(0x0000000000000000)) }
        _3 = Box::<Output>::new(move _4) -> bb1; // scope 0 at ui/coercion/issue-14589.rs:8:26: 8:45
                                         // mir::Constant
                                         // + span: ui/coercion/issue-14589.rs:8:26: 8:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Output) -> Box<Output> {Box::<Output>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = move _3 as std::boxed::Box<dyn Foo> (Pointer(Unsize)); // scope 0 at ui/coercion/issue-14589.rs:8:26: 8:45
        _1 = send::<Box<dyn Foo>>(move _2) -> bb2; // scope 0 at ui/coercion/issue-14589.rs:8:5: 8:46
                                         // mir::Constant
                                         // + span: ui/coercion/issue-14589.rs:8:5: 8:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<dyn Foo>) {send::<Box<dyn Foo>>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const Output(0_isize);      // scope 0 at ui/coercion/issue-14589.rs:9:40: 9:49
                                         // mir::Constant
                                         // + span: ui/coercion/issue-14589.rs:9:40: 9:49
                                         // + literal: Const { ty: Output, val: Value(Scalar(0x0000000000000000)) }
        _7 = Box::<Output>::new(move _8) -> bb3; // scope 0 at ui/coercion/issue-14589.rs:9:31: 9:50
                                         // mir::Constant
                                         // + span: ui/coercion/issue-14589.rs:9:31: 9:39
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Output) -> Box<Output> {Box::<Output>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = move _7 as std::boxed::Box<dyn Foo> (Pointer(Unsize)); // scope 0 at ui/coercion/issue-14589.rs:9:31: 9:50
        _5 = Test::<Box<dyn Foo>>::foo(move _6) -> bb4; // scope 0 at ui/coercion/issue-14589.rs:9:5: 9:51
                                         // mir::Constant
                                         // + span: ui/coercion/issue-14589.rs:9:5: 9:30
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Box<dyn Foo>) {Test::<Box<dyn Foo>>::foo}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = Test::<Box<dyn Foo>>::new() -> bb5; // scope 0 at ui/coercion/issue-14589.rs:10:5: 10:32
                                         // mir::Constant
                                         // + span: ui/coercion/issue-14589.rs:10:5: 10:30
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn() -> Test<Box<dyn Foo>> {Test::<Box<dyn Foo>>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = &_11;                      // scope 0 at ui/coercion/issue-14589.rs:10:5: 10:58
        _14 = const Output(0_isize);     // scope 0 at ui/coercion/issue-14589.rs:10:47: 10:56
                                         // mir::Constant
                                         // + span: ui/coercion/issue-14589.rs:10:47: 10:56
                                         // + literal: Const { ty: Output, val: Value(Scalar(0x0000000000000000)) }
        _13 = Box::<Output>::new(move _14) -> bb6; // scope 0 at ui/coercion/issue-14589.rs:10:38: 10:57
                                         // mir::Constant
                                         // + span: ui/coercion/issue-14589.rs:10:38: 10:46
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(Output) -> Box<Output> {Box::<Output>::new}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = move _13 as std::boxed::Box<dyn Foo> (Pointer(Unsize)); // scope 0 at ui/coercion/issue-14589.rs:10:38: 10:57
        _9 = Test::<Box<dyn Foo>>::send(move _10, move _12) -> bb7; // scope 0 at ui/coercion/issue-14589.rs:10:5: 10:58
                                         // mir::Constant
                                         // + span: ui/coercion/issue-14589.rs:10:33: 10:37
                                         // + literal: Const { ty: for<'a> fn(&'a Test<Box<dyn Foo>>, Box<dyn Foo>) {Test::<Box<dyn Foo>>::send}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/coercion/issue-14589.rs:11:2: 11:2
    }
}

fn send(_1: T) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/issue-14589.rs:13:18: 13:18

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/coercion/issue-14589.rs:13:19: 13:20
    }

    bb1: {
        return;                          // scope 0 at ui/coercion/issue-14589.rs:13:20: 13:20
    }
}

fn <impl at ui/coercion/issue-14589.rs:16:1: 16:16>::new() -> Test<T> {
    let mut _0: Test<T>;                 // return place in scope 0 at ui/coercion/issue-14589.rs:17:17: 17:24

    bb0: {
        return;                          // scope 0 at ui/coercion/issue-14589.rs:17:72: 17:72
    }
}

fn <impl at ui/coercion/issue-14589.rs:16:1: 16:16>::foo(_1: T) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/issue-14589.rs:18:18: 18:18

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/coercion/issue-14589.rs:18:19: 18:20
    }

    bb1: {
        return;                          // scope 0 at ui/coercion/issue-14589.rs:18:20: 18:20
    }
}

fn <impl at ui/coercion/issue-14589.rs:16:1: 16:16>::send(_1: &Test<T>, _2: T) -> () {
    debug self => _1;                    // in scope 0 at ui/coercion/issue-14589.rs:19:13: 19:18
    let mut _0: ();                      // return place in scope 0 at ui/coercion/issue-14589.rs:19:26: 19:26

    bb0: {
        drop(_2) -> bb1;                 // scope 0 at ui/coercion/issue-14589.rs:19:27: 19:28
    }

    bb1: {
        return;                          // scope 0 at ui/coercion/issue-14589.rs:19:28: 19:28
    }
}

fn Foo::dummy(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/coercion/issue-14589.rs:22:22: 22:27
    let mut _0: ();                      // return place in scope 0 at ui/coercion/issue-14589.rs:22:29: 22:29

    bb0: {
        return;                          // scope 0 at ui/coercion/issue-14589.rs:22:32: 22:32
    }
}

fn Output(_1: isize) -> Output {
    let mut _0: Output;                  // return place in scope 0 at ui/coercion/issue-14589.rs:23:1: 23:14

    bb0: {
        _0 = Output(move _1);            // scope 0 at ui/coercion/issue-14589.rs:23:1: 23:14
        return;                          // scope 0 at ui/coercion/issue-14589.rs:23:1: 23:14
    }
}

// MIR FOR CTFE
fn Output(_1: isize) -> Output {
    let mut _0: Output;                  // return place in scope 0 at ui/coercion/issue-14589.rs:23:1: 23:14

    bb0: {
        _0 = Output(move _1);            // scope 0 at ui/coercion/issue-14589.rs:23:1: 23:14
        return;                          // scope 0 at ui/coercion/issue-14589.rs:23:1: 23:14
    }
}
