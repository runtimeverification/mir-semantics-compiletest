// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn use_ref(_1: &T) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:10:22: 10:22

    bb0: {
        return;                          // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:10:24: 10:24
    }
}

fn use_mut(_1: &mut T) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:11:26: 11:26

    bb0: {
        return;                          // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:11:28: 11:28
    }
}

fn use_rc(_1: Rc<T>) -> () {
    debug t => _1;                       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:13:14: 13:15
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:13:24: 13:24
    let _2: ();                          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:14:5: 14:17
    let mut _3: &T;                      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:14:13: 14:16
    let _4: &T;                          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:14:13: 14:16
    let _5: &T;                          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:14:14: 14:16
    let mut _6: &std::rc::Rc<T>;         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:14:15: 14:16
    let _7: ();                          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:15:5: 15:16
    let mut _8: &std::rc::Rc<T>;         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:15:13: 15:15
    let _9: &std::rc::Rc<T>;             // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:15:13: 15:15
    let _10: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:16:5: 16:21
    let mut _11: &&&&&&std::rc::Rc<T>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:16:13: 16:20
    let _12: &&&&&&std::rc::Rc<T>;       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:16:13: 16:20
    let _13: &&&&&std::rc::Rc<T>;        // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:16:14: 16:20
    let _14: &&&&std::rc::Rc<T>;         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:16:15: 16:20
    let _15: &&&std::rc::Rc<T>;          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:16:16: 16:20
    let _16: &&std::rc::Rc<T>;           // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:16:17: 16:20
    let _17: &std::rc::Rc<T>;            // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:16:18: 16:20
    let _18: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:17:5: 17:25
    let mut _19: &&&&&&std::rc::Rc<T>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:17:13: 17:24
    let _20: &mut &&&&&std::rc::Rc<T>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:17:13: 17:24
    let mut _21: &&&&&std::rc::Rc<T>;    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:17:18: 17:24
    let _22: &&&&std::rc::Rc<T>;         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:17:19: 17:24
    let _23: &&&std::rc::Rc<T>;          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:17:20: 17:24
    let _24: &&std::rc::Rc<T>;           // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:17:21: 17:24
    let _25: &std::rc::Rc<T>;            // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:17:22: 17:24
    let _26: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:18:5: 18:25
    let mut _27: &&&mut &&&std::rc::Rc<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:18:13: 18:24
    let _28: &&&mut &&&std::rc::Rc<T>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:18:13: 18:24
    let _29: &&mut &&&std::rc::Rc<T>;    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:18:14: 18:24
    let _30: &mut &&&std::rc::Rc<T>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:18:15: 18:24
    let mut _31: &&&std::rc::Rc<T>;      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:18:20: 18:24
    let _32: &&std::rc::Rc<T>;           // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:18:21: 18:24
    let _33: &std::rc::Rc<T>;            // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:18:22: 18:24

    bb0: {
        _6 = &_1;                        // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:14:15: 14:16
        _5 = <Rc<T> as Deref>::deref(move _6) -> [return: bb1, unwind: bb8]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:14:14: 14:16
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:14:14: 14:16
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<T>) -> &'a <Rc<T> as Deref>::Target {<Rc<T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:14:13: 14:16
        _3 = _4;                         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:14:13: 14:16
        _2 = use_ref::<T>(move _3) -> [return: bb2, unwind: bb8]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:14:5: 14:17
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:14:5: 14:12
                                         // + literal: Const { ty: for<'a> fn(&'a T) {use_ref::<T>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &_1;                        // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:15:13: 15:15
        _8 = _9;                         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:15:13: 15:15
        _7 = use_ref::<Rc<T>>(move _8) -> [return: bb3, unwind: bb8]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:15:5: 15:16
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:15:5: 15:12
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<T>) {use_ref::<Rc<T>>}, val: Value(<ZST>) }
    }

    bb3: {
        _17 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:16:18: 16:20
        _16 = &_17;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:16:17: 16:20
        _15 = &_16;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:16:16: 16:20
        _14 = &_15;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:16:15: 16:20
        _13 = &_14;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:16:14: 16:20
        _12 = &_13;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:16:13: 16:20
        _11 = _12;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:16:13: 16:20
        _10 = use_ref::<&&&&&Rc<T>>(move _11) -> [return: bb4, unwind: bb8]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:16:5: 16:21
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:16:5: 16:12
                                         // + literal: Const { ty: for<'a> fn(&'a &&&&&Rc<T>) {use_ref::<&&&&&Rc<T>>}, val: Value(<ZST>) }
    }

    bb4: {
        _25 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:17:22: 17:24
        _24 = &_25;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:17:21: 17:24
        _23 = &_24;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:17:20: 17:24
        _22 = &_23;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:17:19: 17:24
        _21 = &_22;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:17:18: 17:24
        _20 = &mut _21;                  // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:17:13: 17:24
        _19 = &(*_20);                   // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:17:13: 17:24
        _18 = use_ref::<&&&&&Rc<T>>(move _19) -> [return: bb5, unwind: bb8]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:17:5: 17:25
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:17:5: 17:12
                                         // + literal: Const { ty: for<'a> fn(&'a &&&&&Rc<T>) {use_ref::<&&&&&Rc<T>>}, val: Value(<ZST>) }
    }

    bb5: {
        _33 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:18:22: 18:24
        _32 = &_33;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:18:21: 18:24
        _31 = &_32;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:18:20: 18:24
        _30 = &mut _31;                  // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:18:15: 18:24
        _29 = &_30;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:18:14: 18:24
        _28 = &_29;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:18:13: 18:24
        _27 = _28;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:18:13: 18:24
        _26 = use_ref::<&&mut &&&Rc<T>>(move _27) -> [return: bb6, unwind: bb8]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:18:5: 18:25
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:18:5: 18:12
                                         // + literal: Const { ty: for<'a> fn(&'a &&mut &&&Rc<T>) {use_ref::<&&mut &&&Rc<T>>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:19:1: 19:2
    }

    bb7: {
        return;                          // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:19:2: 19:2
    }

    bb8 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:19:1: 19:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:13:1: 19:2
    }
}

fn use_mut_box(_1: &mut Box<T>) -> () {
    debug t => _1;                       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:21:19: 21:24
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:21:39: 21:39
    let _2: ();                          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:22:5: 22:21
    let mut _3: &mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:22:13: 22:20
    let mut _4: &mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:22:13: 22:20
    let _5: ();                          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:23:5: 23:15
    let mut _6: &mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:23:13: 23:14
    let _7: ();                          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:24:5: 24:30
    let mut _8: &mut &mut &mut &mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:24:13: 24:29
    let mut _9: &mut &mut &mut &mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:24:13: 24:29
    let mut _10: &mut &mut &mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:24:18: 24:29
    let mut _11: &mut &mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:24:23: 24:29
    let _12: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:26:5: 26:17
    let mut _13: &std::boxed::Box<T>;    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:26:13: 26:16
    let _14: &std::boxed::Box<T>;        // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:26:13: 26:16
    let _15: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:27:5: 27:15
    let mut _16: &std::boxed::Box<T>;    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:27:13: 27:14
    let _17: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:28:5: 28:21
    let mut _18: &&&&&&&mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:28:13: 28:20
    let _19: &&&&&&&mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:28:13: 28:20
    let _20: &&&&&&mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:28:14: 28:20
    let _21: &&&&&mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:28:15: 28:20
    let _22: &&&&mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:28:16: 28:20
    let _23: &&&mut std::boxed::Box<T>;  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:28:17: 28:20
    let _24: &&mut std::boxed::Box<T>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:28:18: 28:20
    let _25: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:29:5: 29:25
    let mut _26: &&&&&&&mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:29:13: 29:24
    let _27: &mut &&&&&&mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:29:13: 29:24
    let mut _28: &&&&&&mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:29:18: 29:24
    let _29: &&&&&mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:29:19: 29:24
    let _30: &&&&mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:29:20: 29:24
    let _31: &&&mut std::boxed::Box<T>;  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:29:21: 29:24
    let _32: &&mut std::boxed::Box<T>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:29:22: 29:24
    let _33: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:30:5: 30:25
    let mut _34: &&&mut &&&&mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:30:13: 30:24
    let _35: &&&mut &&&&mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:30:13: 30:24
    let _36: &&mut &&&&mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:30:14: 30:24
    let _37: &mut &&&&mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:30:15: 30:24
    let mut _38: &&&&mut std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:30:20: 30:24
    let _39: &&&mut std::boxed::Box<T>;  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:30:21: 30:24
    let _40: &&mut std::boxed::Box<T>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:30:22: 30:24

    bb0: {
        _4 = &mut (*_1);                 // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:22:13: 22:20
        _3 = &mut (*_4);                 // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:22:13: 22:20
        _2 = use_mut::<Box<T>>(move _3) -> bb1; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:22:5: 22:21
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:22:5: 22:12
                                         // + literal: Const { ty: for<'a> fn(&'a mut Box<T>) {use_mut::<Box<T>>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &mut (*_1);                 // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:23:13: 23:14
        _5 = use_mut::<Box<T>>(move _6) -> bb2; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:23:5: 23:15
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:23:5: 23:12
                                         // + literal: Const { ty: for<'a> fn(&'a mut Box<T>) {use_mut::<Box<T>>}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &mut _1;                   // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:24:23: 24:29
        _10 = &mut _11;                  // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:24:18: 24:29
        _9 = &mut _10;                   // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:24:13: 24:29
        _8 = &mut (*_9);                 // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:24:13: 24:29
        _7 = use_mut::<&mut &mut &mut Box<T>>(move _8) -> bb3; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:24:5: 24:30
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:24:5: 24:12
                                         // + literal: Const { ty: for<'a> fn(&'a mut &mut &mut &mut Box<T>) {use_mut::<&mut &mut &mut Box<T>>}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = &(*_1);                    // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:26:13: 26:16
        _13 = _14;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:26:13: 26:16
        _12 = use_ref::<Box<T>>(move _13) -> bb4; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:26:5: 26:17
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:26:5: 26:12
                                         // + literal: Const { ty: for<'a> fn(&'a Box<T>) {use_ref::<Box<T>>}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = &(*_1);                    // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:27:13: 27:14
        _15 = use_ref::<Box<T>>(move _16) -> bb5; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:27:5: 27:15
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:27:5: 27:12
                                         // + literal: Const { ty: for<'a> fn(&'a Box<T>) {use_ref::<Box<T>>}, val: Value(<ZST>) }
    }

    bb5: {
        _24 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:28:18: 28:20
        _23 = &_24;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:28:17: 28:20
        _22 = &_23;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:28:16: 28:20
        _21 = &_22;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:28:15: 28:20
        _20 = &_21;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:28:14: 28:20
        _19 = &_20;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:28:13: 28:20
        _18 = _19;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:28:13: 28:20
        _17 = use_ref::<&&&&&&mut Box<T>>(move _18) -> bb6; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:28:5: 28:21
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:28:5: 28:12
                                         // + literal: Const { ty: for<'a> fn(&'a &&&&&&mut Box<T>) {use_ref::<&&&&&&mut Box<T>>}, val: Value(<ZST>) }
    }

    bb6: {
        _32 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:29:22: 29:24
        _31 = &_32;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:29:21: 29:24
        _30 = &_31;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:29:20: 29:24
        _29 = &_30;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:29:19: 29:24
        _28 = &_29;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:29:18: 29:24
        _27 = &mut _28;                  // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:29:13: 29:24
        _26 = &(*_27);                   // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:29:13: 29:24
        _25 = use_ref::<&&&&&&mut Box<T>>(move _26) -> bb7; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:29:5: 29:25
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:29:5: 29:12
                                         // + literal: Const { ty: for<'a> fn(&'a &&&&&&mut Box<T>) {use_ref::<&&&&&&mut Box<T>>}, val: Value(<ZST>) }
    }

    bb7: {
        _40 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:30:22: 30:24
        _39 = &_40;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:30:21: 30:24
        _38 = &_39;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:30:20: 30:24
        _37 = &mut _38;                  // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:30:15: 30:24
        _36 = &_37;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:30:14: 30:24
        _35 = &_36;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:30:13: 30:24
        _34 = _35;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:30:13: 30:24
        _33 = use_ref::<&&mut &&&&mut Box<T>>(move _34) -> bb8; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:30:5: 30:25
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:30:5: 30:12
                                         // + literal: Const { ty: for<'a> fn(&'a &&mut &&&&mut Box<T>) {use_ref::<&&mut &&&&mut Box<T>>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:31:2: 31:2
    }
}

fn use_nested(_1: &Box<T>) -> () {
    debug t => _1;                       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:33:18: 33:19
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:33:30: 33:30
    let _2: ();                          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:34:5: 34:18
    let mut _3: &T;                      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:34:13: 34:17
    let _4: &T;                          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:34:13: 34:17
    let _5: ();                          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:35:5: 35:15
    let mut _6: &std::boxed::Box<T>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:35:13: 35:14
    let _7: ();                          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:36:5: 36:21
    let mut _8: &&&&&&&std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:36:13: 36:20
    let _9: &&&&&&&std::boxed::Box<T>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:36:13: 36:20
    let _10: &&&&&&std::boxed::Box<T>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:36:14: 36:20
    let _11: &&&&&std::boxed::Box<T>;    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:36:15: 36:20
    let _12: &&&&std::boxed::Box<T>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:36:16: 36:20
    let _13: &&&std::boxed::Box<T>;      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:36:17: 36:20
    let _14: &&std::boxed::Box<T>;       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:36:18: 36:20
    let _15: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:37:5: 37:25
    let mut _16: &&&&&&&std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:37:13: 37:24
    let _17: &mut &&&&&&std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:37:13: 37:24
    let mut _18: &&&&&&std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:37:18: 37:24
    let _19: &&&&&std::boxed::Box<T>;    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:37:19: 37:24
    let _20: &&&&std::boxed::Box<T>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:37:20: 37:24
    let _21: &&&std::boxed::Box<T>;      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:37:21: 37:24
    let _22: &&std::boxed::Box<T>;       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:37:22: 37:24
    let _23: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:38:5: 38:25
    let mut _24: &&&mut &&&&std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:38:13: 38:24
    let _25: &&&mut &&&&std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:38:13: 38:24
    let _26: &&mut &&&&std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:38:14: 38:24
    let _27: &mut &&&&std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:38:15: 38:24
    let mut _28: &&&&std::boxed::Box<T>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:38:20: 38:24
    let _29: &&&std::boxed::Box<T>;      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:38:21: 38:24
    let _30: &&std::boxed::Box<T>;       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:38:22: 38:24
    let mut _31: std::boxed::Box<T>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:33:18: 33:19
    let mut _32: *const T;               // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:33:18: 33:19

    bb0: {
        _31 = deref_copy (*_1);          // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:34:13: 34:17
        _32 = (((_31.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T); // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:34:13: 34:17
        _4 = &(*_32);                    // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:34:13: 34:17
        _3 = _4;                         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:34:13: 34:17
        _2 = use_ref::<T>(move _3) -> bb1; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:34:5: 34:18
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:34:5: 34:12
                                         // + literal: Const { ty: for<'a> fn(&'a T) {use_ref::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _1;                         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:35:13: 35:14
        _5 = use_ref::<Box<T>>(move _6) -> bb2; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:35:5: 35:15
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:35:5: 35:12
                                         // + literal: Const { ty: for<'a> fn(&'a Box<T>) {use_ref::<Box<T>>}, val: Value(<ZST>) }
    }

    bb2: {
        _14 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:36:18: 36:20
        _13 = &_14;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:36:17: 36:20
        _12 = &_13;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:36:16: 36:20
        _11 = &_12;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:36:15: 36:20
        _10 = &_11;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:36:14: 36:20
        _9 = &_10;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:36:13: 36:20
        _8 = _9;                         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:36:13: 36:20
        _7 = use_ref::<&&&&&&Box<T>>(move _8) -> bb3; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:36:5: 36:21
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:36:5: 36:12
                                         // + literal: Const { ty: for<'a> fn(&'a &&&&&&Box<T>) {use_ref::<&&&&&&Box<T>>}, val: Value(<ZST>) }
    }

    bb3: {
        _22 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:37:22: 37:24
        _21 = &_22;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:37:21: 37:24
        _20 = &_21;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:37:20: 37:24
        _19 = &_20;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:37:19: 37:24
        _18 = &_19;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:37:18: 37:24
        _17 = &mut _18;                  // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:37:13: 37:24
        _16 = &(*_17);                   // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:37:13: 37:24
        _15 = use_ref::<&&&&&&Box<T>>(move _16) -> bb4; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:37:5: 37:25
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:37:5: 37:12
                                         // + literal: Const { ty: for<'a> fn(&'a &&&&&&Box<T>) {use_ref::<&&&&&&Box<T>>}, val: Value(<ZST>) }
    }

    bb4: {
        _30 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:38:22: 38:24
        _29 = &_30;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:38:21: 38:24
        _28 = &_29;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:38:20: 38:24
        _27 = &mut _28;                  // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:38:15: 38:24
        _26 = &_27;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:38:14: 38:24
        _25 = &_26;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:38:13: 38:24
        _24 = _25;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:38:13: 38:24
        _23 = use_ref::<&&mut &&&&Box<T>>(move _24) -> bb5; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:38:5: 38:25
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:38:5: 38:12
                                         // + literal: Const { ty: for<'a> fn(&'a &&mut &&&&Box<T>) {use_ref::<&&mut &&&&Box<T>>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:39:2: 39:2
    }
}

fn use_slice(_1: &[u8]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:41:24: 41:24

    bb0: {
        return;                          // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:41:26: 41:26
    }
}

fn use_slice_mut(_1: &mut [u8]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:42:32: 42:32

    bb0: {
        return;                          // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:42:34: 42:34
    }
}

fn use_vec(_1: Vec<u8>) -> () {
    debug v => _1;                       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:44:12: 44:17
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:44:28: 44:28
    let _2: ();                          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:45:5: 45:30
    let mut _3: &mut [u8];               // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:45:19: 45:29
    let mut _4: &mut [u8];               // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:45:19: 45:29
    let mut _5: &mut [u8];               // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:45:24: 45:29
    let mut _6: &mut std::vec::Vec<u8>;  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:45:24: 45:25
    let mut _7: std::ops::RangeFull;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:45:26: 45:28
    let _8: ();                          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:46:5: 46:26
    let mut _9: &mut [u8];               // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:46:19: 46:25
    let mut _10: &mut [u8];              // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:46:19: 46:25
    let mut _11: &mut std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:46:19: 46:25
    let mut _12: &mut std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:46:19: 46:25
    let _13: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:5: 47:36
    let mut _14: &mut [u8];              // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:19: 47:35
    let mut _15: &mut [u8];              // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:19: 47:35
    let mut _16: &mut std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:19: 47:35
    let mut _17: &mut &mut &mut std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:19: 47:35
    let mut _18: &mut &mut std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:24: 47:35
    let mut _19: &mut std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:29: 47:35
    let _20: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:49:5: 49:22
    let mut _21: &[u8];                  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:49:15: 49:21
    let _22: &[u8];                      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:49:15: 49:21
    let _23: &[u8];                      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:49:16: 49:21
    let mut _24: &std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:49:16: 49:17
    let mut _25: std::ops::RangeFull;    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:49:18: 49:20
    let _26: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:50:5: 50:18
    let mut _27: &[u8];                  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:50:15: 50:17
    let _28: &[u8];                      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:50:15: 50:17
    let mut _29: &std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:50:15: 50:17
    let _30: &std::vec::Vec<u8>;         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:50:15: 50:17
    let _31: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:5: 51:23
    let mut _32: &[u8];                  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
    let _33: &[u8];                      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
    let mut _34: &std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
    let _35: &&&&&&std::vec::Vec<u8>;    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
    let _36: &&&&&std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:16: 51:22
    let _37: &&&&std::vec::Vec<u8>;      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:17: 51:22
    let _38: &&&std::vec::Vec<u8>;       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:18: 51:22
    let _39: &&std::vec::Vec<u8>;        // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:19: 51:22
    let _40: &std::vec::Vec<u8>;         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:20: 51:22
    let _41: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:5: 52:27
    let mut _42: &[u8];                  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
    let _43: &[u8];                      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
    let mut _44: &std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
    let _45: &mut &&&&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
    let mut _46: &&&&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:20: 52:26
    let _47: &&&&std::vec::Vec<u8>;      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:21: 52:26
    let _48: &&&std::vec::Vec<u8>;       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:22: 52:26
    let _49: &&std::vec::Vec<u8>;        // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:23: 52:26
    let _50: &std::vec::Vec<u8>;         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:24: 52:26
    let _51: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:5: 53:27
    let mut _52: &[u8];                  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
    let _53: &[u8];                      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
    let mut _54: &std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
    let _55: &&&mut &&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
    let _56: &&mut &&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:16: 53:26
    let _57: &mut &&&std::vec::Vec<u8>;  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:17: 53:26
    let mut _58: &&&std::vec::Vec<u8>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:22: 53:26
    let _59: &&std::vec::Vec<u8>;        // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:23: 53:26
    let _60: &std::vec::Vec<u8>;         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:24: 53:26
    let mut _61: &mut &mut std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:19: 47:35
    let mut _62: &mut std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:19: 47:35
    let mut _63: &&&&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
    let mut _64: &&&&std::vec::Vec<u8>;  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
    let mut _65: &&&std::vec::Vec<u8>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
    let mut _66: &&std::vec::Vec<u8>;    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
    let mut _67: &std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
    let mut _68: &&&&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
    let mut _69: &&&&std::vec::Vec<u8>;  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
    let mut _70: &&&std::vec::Vec<u8>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
    let mut _71: &&std::vec::Vec<u8>;    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
    let mut _72: &std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
    let mut _73: &&mut &&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
    let mut _74: &mut &&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
    let mut _75: &&&std::vec::Vec<u8>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
    let mut _76: &&std::vec::Vec<u8>;    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
    let mut _77: &std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26

    bb0: {
        _6 = &mut _1;                    // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:45:24: 45:25
        _5 = <Vec<u8> as IndexMut<RangeFull>>::index_mut(move _6, move _7) -> [return: bb1, unwind: bb18]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:45:24: 45:29
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:45:24: 45:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u8>, RangeFull) -> &'a mut <Vec<u8> as Index<RangeFull>>::Output {<Vec<u8> as IndexMut<RangeFull>>::index_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut (*_5);                 // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:45:19: 45:29
        _3 = &mut (*_4);                 // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:45:19: 45:29
        _2 = use_slice_mut(move _3) -> [return: bb2, unwind: bb18]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:45:5: 45:30
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:45:5: 45:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut [u8]) {use_slice_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = &mut _1;                   // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:46:19: 46:25
        _11 = &mut (*_12);               // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:46:19: 46:25
        _10 = <Vec<u8> as DerefMut>::deref_mut(move _11) -> [return: bb3, unwind: bb18]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:46:19: 46:25
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:46:19: 46:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u8>) -> &'a mut <Vec<u8> as Deref>::Target {<Vec<u8> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &mut (*_10);                // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:46:19: 46:25
        _8 = use_slice_mut(move _9) -> [return: bb4, unwind: bb18]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:46:5: 46:26
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:46:5: 46:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut [u8]) {use_slice_mut}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = &mut _1;                   // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:29: 47:35
        _18 = &mut _19;                  // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:24: 47:35
        _17 = &mut _18;                  // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:19: 47:35
        _61 = deref_copy (*_17);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:19: 47:35
        _62 = deref_copy (*_61);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:19: 47:35
        _16 = &mut (*_62);               // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:19: 47:35
        _15 = <Vec<u8> as DerefMut>::deref_mut(move _16) -> [return: bb5, unwind: bb18]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:19: 47:35
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:47:19: 47:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u8>) -> &'a mut <Vec<u8> as Deref>::Target {<Vec<u8> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = &mut (*_15);               // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:19: 47:35
        _13 = use_slice_mut(move _14) -> [return: bb6, unwind: bb18]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:47:5: 47:36
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:47:5: 47:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut [u8]) {use_slice_mut}, val: Value(<ZST>) }
    }

    bb6: {
        _24 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:49:16: 49:17
        _23 = <Vec<u8> as Index<RangeFull>>::index(move _24, move _25) -> [return: bb7, unwind: bb18]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:49:16: 49:21
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:49:16: 49:21
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>, RangeFull) -> &'a <Vec<u8> as Index<RangeFull>>::Output {<Vec<u8> as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb7: {
        _22 = _23;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:49:15: 49:21
        _21 = _22;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:49:15: 49:21
        _20 = use_slice(move _21) -> [return: bb8, unwind: bb18]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:49:5: 49:22
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:49:5: 49:14
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) {use_slice}, val: Value(<ZST>) }
    }

    bb8: {
        _30 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:50:15: 50:17
        _29 = _30;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:50:15: 50:17
        _28 = <Vec<u8> as Deref>::deref(move _29) -> [return: bb9, unwind: bb18]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:50:15: 50:17
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:50:15: 50:17
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _27 = _28;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:50:15: 50:17
        _26 = use_slice(move _27) -> [return: bb10, unwind: bb18]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:50:5: 50:18
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:50:5: 50:14
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) {use_slice}, val: Value(<ZST>) }
    }

    bb10: {
        _40 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:20: 51:22
        _39 = &_40;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:19: 51:22
        _38 = &_39;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:18: 51:22
        _37 = &_38;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:17: 51:22
        _36 = &_37;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:16: 51:22
        _35 = &_36;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
        _63 = deref_copy (*_35);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
        _64 = deref_copy (*_63);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
        _65 = deref_copy (*_64);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
        _66 = deref_copy (*_65);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
        _67 = deref_copy (*_66);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
        _34 = _67;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
        _33 = <Vec<u8> as Deref>::deref(move _34) -> [return: bb11, unwind: bb18]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb11: {
        _32 = _33;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:15: 51:22
        _31 = use_slice(move _32) -> [return: bb12, unwind: bb18]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:51:5: 51:23
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:51:5: 51:14
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) {use_slice}, val: Value(<ZST>) }
    }

    bb12: {
        _50 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:24: 52:26
        _49 = &_50;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:23: 52:26
        _48 = &_49;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:22: 52:26
        _47 = &_48;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:21: 52:26
        _46 = &_47;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:20: 52:26
        _45 = &mut _46;                  // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
        _68 = deref_copy (*_45);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
        _69 = deref_copy (*_68);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
        _70 = deref_copy (*_69);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
        _71 = deref_copy (*_70);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
        _72 = deref_copy (*_71);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
        _44 = _72;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
        _43 = <Vec<u8> as Deref>::deref(move _44) -> [return: bb13, unwind: bb18]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb13: {
        _42 = _43;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:15: 52:26
        _41 = use_slice(move _42) -> [return: bb14, unwind: bb18]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:52:5: 52:27
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:52:5: 52:14
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) {use_slice}, val: Value(<ZST>) }
    }

    bb14: {
        _60 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:24: 53:26
        _59 = &_60;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:23: 53:26
        _58 = &_59;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:22: 53:26
        _57 = &mut _58;                  // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:17: 53:26
        _56 = &_57;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:16: 53:26
        _55 = &_56;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
        _73 = deref_copy (*_55);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
        _74 = deref_copy (*_73);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
        _75 = deref_copy (*_74);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
        _76 = deref_copy (*_75);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
        _77 = deref_copy (*_76);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
        _54 = _77;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
        _53 = <Vec<u8> as Deref>::deref(move _54) -> [return: bb15, unwind: bb18]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb15: {
        _52 = _53;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:15: 53:26
        _51 = use_slice(move _52) -> [return: bb16, unwind: bb18]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:53:5: 53:27
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:53:5: 53:14
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) {use_slice}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_1) -> bb17;                // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:54:1: 54:2
    }

    bb17: {
        return;                          // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:54:2: 54:2
    }

    bb18 (cleanup): {
        drop(_1) -> bb19;                // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:54:1: 54:2
    }

    bb19 (cleanup): {
        resume;                          // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:44:1: 54:2
    }
}

fn use_vec_ref(_1: &Vec<u8>) -> () {
    debug v => _1;                       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:56:16: 56:17
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:56:29: 56:29
    let _2: ();                          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:57:5: 57:22
    let mut _3: &[u8];                   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:57:15: 57:21
    let _4: &[u8];                       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:57:15: 57:21
    let _5: &[u8];                       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:57:16: 57:21
    let mut _6: &std::vec::Vec<u8>;      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:57:16: 57:17
    let mut _7: std::ops::RangeFull;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:57:18: 57:20
    let _8: ();                          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:58:5: 58:17
    let mut _9: &[u8];                   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:58:15: 58:16
    let _10: &[u8];                      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:58:15: 58:16
    let mut _11: &std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:58:15: 58:16
    let _12: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:5: 59:23
    let mut _13: &[u8];                  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
    let _14: &[u8];                      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
    let mut _15: &std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
    let _16: &&&&&&&std::vec::Vec<u8>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
    let _17: &&&&&&std::vec::Vec<u8>;    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:16: 59:22
    let _18: &&&&&std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:17: 59:22
    let _19: &&&&std::vec::Vec<u8>;      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:18: 59:22
    let _20: &&&std::vec::Vec<u8>;       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:19: 59:22
    let _21: &&std::vec::Vec<u8>;        // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:20: 59:22
    let _22: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:5: 60:27
    let mut _23: &[u8];                  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
    let _24: &[u8];                      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
    let mut _25: &std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
    let _26: &mut &&&&&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
    let mut _27: &&&&&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:20: 60:26
    let _28: &&&&&std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:21: 60:26
    let _29: &&&&std::vec::Vec<u8>;      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:22: 60:26
    let _30: &&&std::vec::Vec<u8>;       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:23: 60:26
    let _31: &&std::vec::Vec<u8>;        // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:24: 60:26
    let _32: ();                         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:5: 61:27
    let mut _33: &[u8];                  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
    let _34: &[u8];                      // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
    let mut _35: &std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
    let _36: &&&mut &&&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
    let _37: &&mut &&&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:16: 61:26
    let _38: &mut &&&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:17: 61:26
    let mut _39: &&&&std::vec::Vec<u8>;  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:22: 61:26
    let _40: &&&std::vec::Vec<u8>;       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:23: 61:26
    let _41: &&std::vec::Vec<u8>;        // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:24: 61:26
    let mut _42: &&&&&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
    let mut _43: &&&&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
    let mut _44: &&&&std::vec::Vec<u8>;  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
    let mut _45: &&&std::vec::Vec<u8>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
    let mut _46: &&std::vec::Vec<u8>;    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
    let mut _47: &std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
    let mut _48: &&&&&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
    let mut _49: &&&&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
    let mut _50: &&&&std::vec::Vec<u8>;  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
    let mut _51: &&&std::vec::Vec<u8>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
    let mut _52: &&std::vec::Vec<u8>;    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
    let mut _53: &std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
    let mut _54: &&mut &&&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
    let mut _55: &mut &&&&std::vec::Vec<u8>; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
    let mut _56: &&&&std::vec::Vec<u8>;  // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
    let mut _57: &&&std::vec::Vec<u8>;   // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
    let mut _58: &&std::vec::Vec<u8>;    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
    let mut _59: &std::vec::Vec<u8>;     // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26

    bb0: {
        _6 = _1;                         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:57:16: 57:17
        _5 = <Vec<u8> as Index<RangeFull>>::index(move _6, move _7) -> bb1; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:57:16: 57:21
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:57:16: 57:21
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>, RangeFull) -> &'a <Vec<u8> as Index<RangeFull>>::Output {<Vec<u8> as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:57:15: 57:21
        _3 = _4;                         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:57:15: 57:21
        _2 = use_slice(move _3) -> bb2;  // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:57:5: 57:22
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:57:5: 57:14
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) {use_slice}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = _1;                        // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:58:15: 58:16
        _10 = <Vec<u8> as Deref>::deref(move _11) -> bb3; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:58:15: 58:16
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:58:15: 58:16
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = _10;                        // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:58:15: 58:16
        _8 = use_slice(move _9) -> bb4;  // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:58:5: 58:17
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:58:5: 58:14
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) {use_slice}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:20: 59:22
        _20 = &_21;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:19: 59:22
        _19 = &_20;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:18: 59:22
        _18 = &_19;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:17: 59:22
        _17 = &_18;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:16: 59:22
        _16 = &_17;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
        _42 = deref_copy (*_16);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
        _43 = deref_copy (*_42);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
        _44 = deref_copy (*_43);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
        _45 = deref_copy (*_44);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
        _46 = deref_copy (*_45);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
        _47 = deref_copy (*_46);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
        _15 = _47;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
        _14 = <Vec<u8> as Deref>::deref(move _15) -> bb5; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = _14;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:15: 59:22
        _12 = use_slice(move _13) -> bb6; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:59:5: 59:23
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:59:5: 59:14
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) {use_slice}, val: Value(<ZST>) }
    }

    bb6: {
        _31 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:24: 60:26
        _30 = &_31;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:23: 60:26
        _29 = &_30;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:22: 60:26
        _28 = &_29;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:21: 60:26
        _27 = &_28;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:20: 60:26
        _26 = &mut _27;                  // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
        _48 = deref_copy (*_26);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
        _49 = deref_copy (*_48);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
        _50 = deref_copy (*_49);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
        _51 = deref_copy (*_50);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
        _52 = deref_copy (*_51);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
        _53 = deref_copy (*_52);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
        _25 = _53;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
        _24 = <Vec<u8> as Deref>::deref(move _25) -> bb7; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb7: {
        _23 = _24;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:15: 60:26
        _22 = use_slice(move _23) -> bb8; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:60:5: 60:27
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:60:5: 60:14
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) {use_slice}, val: Value(<ZST>) }
    }

    bb8: {
        _41 = &_1;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:24: 61:26
        _40 = &_41;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:23: 61:26
        _39 = &_40;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:22: 61:26
        _38 = &mut _39;                  // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:17: 61:26
        _37 = &_38;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:16: 61:26
        _36 = &_37;                      // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
        _54 = deref_copy (*_36);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
        _55 = deref_copy (*_54);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
        _56 = deref_copy (*_55);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
        _57 = deref_copy (*_56);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
        _58 = deref_copy (*_57);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
        _59 = deref_copy (*_58);         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
        _35 = _59;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
        _34 = <Vec<u8> as Deref>::deref(move _35) -> bb9; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _33 = _34;                       // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:15: 61:26
        _32 = use_slice(move _33) -> bb10; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:61:5: 61:27
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:61:5: 61:14
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) {use_slice}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:62:2: 62:2
    }
}

fn use_op_rhs(_1: &mut String) -> () {
    debug s => _1;                       // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:64:15: 64:16
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:64:31: 64:31
    let _2: ();                          // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:65:5: 65:31
    let mut _3: &mut std::string::String; // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:65:5: 65:7
    let mut _4: &str;                    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:65:11: 65:31
    let _5: &str;                        // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:65:12: 65:30
    let mut _6: &std::string::String;    // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:65:12: 65:30
    let _7: &std::string::String;        // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:65:12: 65:30
    let _8: std::string::String;         // in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:65:13: 65:30

    bb0: {
        _3 = &mut (*_1);                 // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:65:5: 65:7
        _8 = <String as From<&str>>::from(const " ") -> bb1; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:65:13: 65:30
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:65:13: 65:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:65:26: 65:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _7 = &_8;                        // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:65:12: 65:30
        _6 = _7;                         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:65:12: 65:30
        _5 = <String as Deref>::deref(move _6) -> [return: bb2, unwind: bb5]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:65:12: 65:30
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:65:12: 65:30
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = _5;                         // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:65:12: 65:30
        _2 = <String as AddAssign<&str>>::add_assign(move _3, move _4) -> [return: bb3, unwind: bb5]; // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:65:5: 65:31
                                         // mir::Constant
                                         // + span: ui/coercion/coerce-overloaded-autoderef.rs:65:5: 65:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut String, &str) {<String as AddAssign<&str>>::add_assign}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_8) -> bb4;                 // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:65:31: 65:32
    }

    bb4: {
        return;                          // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:66:2: 66:2
    }

    bb5 (cleanup): {
        drop(_8) -> bb6;                 // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:65:31: 65:32
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:64:1: 66:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:68:15: 68:15

    bb0: {
        return;                          // scope 0 at ui/coercion/coerce-overloaded-autoderef.rs:68:17: 68:17
    }
}
