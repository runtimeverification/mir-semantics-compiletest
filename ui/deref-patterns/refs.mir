// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &String) -> i32 {
    debug s => _1;                       // in scope 0 at ui/deref-patterns/refs.rs:4:8: 4:9
    let mut _0: i32;                     // return place in scope 0 at ui/deref-patterns/refs.rs:4:23: 4:26
    let mut _2: &std::string::String;    // in scope 0 at ui/deref-patterns/refs.rs:6:9: 6:12
    let mut _3: &str;                    // in scope 0 at ui/deref-patterns/refs.rs:6:9: 6:12
    let mut _4: bool;                    // in scope 0 at ui/deref-patterns/refs.rs:6:9: 6:12

    bb0: {
        _2 = _1;                         // scope 0 at ui/deref-patterns/refs.rs:6:9: 6:12
        _3 = <String as Deref>::deref(move _2) -> bb1; // scope 0 at ui/deref-patterns/refs.rs:6:9: 6:12
                                         // mir::Constant
                                         // + span: ui/deref-patterns/refs.rs:6:9: 6:12
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <str as PartialEq>::eq(_3, const "a") -> bb2; // scope 0 at ui/deref-patterns/refs.rs:6:9: 6:12
                                         // mir::Constant
                                         // + span: ui/deref-patterns/refs.rs:6:9: 6:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/deref-patterns/refs.rs:6:9: 6:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        switchInt(move _4) -> [0: bb3, otherwise: bb4]; // scope 0 at ui/deref-patterns/refs.rs:6:9: 6:12
    }

    bb3: {
        _0 = const -1_i32;               // scope 0 at ui/deref-patterns/refs.rs:7:14: 7:16
        goto -> bb5;                     // scope 0 at ui/deref-patterns/refs.rs:7:14: 7:16
    }

    bb4: {
        _0 = const 42_i32;               // scope 0 at ui/deref-patterns/refs.rs:6:16: 6:18
        goto -> bb5;                     // scope 0 at ui/deref-patterns/refs.rs:6:16: 6:18
    }

    bb5: {
        return;                          // scope 0 at ui/deref-patterns/refs.rs:9:2: 9:2
    }
}

fn bar(_1: Option<&&&&String>) -> i32 {
    debug s => _1;                       // in scope 0 at ui/deref-patterns/refs.rs:11:8: 11:9
    let mut _0: i32;                     // return place in scope 0 at ui/deref-patterns/refs.rs:11:34: 11:37
    let mut _2: &std::string::String;    // in scope 0 at ui/deref-patterns/refs.rs:13:18: 13:24
    let mut _3: &str;                    // in scope 0 at ui/deref-patterns/refs.rs:13:18: 13:24
    let mut _4: bool;                    // in scope 0 at ui/deref-patterns/refs.rs:13:18: 13:24
    let mut _5: isize;                   // in scope 0 at ui/deref-patterns/refs.rs:13:9: 13:25
    let mut _6: &&&&std::string::String; // in scope 0 at ui/deref-patterns/refs.rs:11:8: 11:9
    let mut _7: &&&std::string::String;  // in scope 0 at ui/deref-patterns/refs.rs:11:8: 11:9
    let mut _8: &&std::string::String;   // in scope 0 at ui/deref-patterns/refs.rs:11:8: 11:9
    let mut _9: &std::string::String;    // in scope 0 at ui/deref-patterns/refs.rs:11:8: 11:9

    bb0: {
        _5 = discriminant(_1);           // scope 0 at ui/deref-patterns/refs.rs:12:11: 12:12
        switchInt(move _5) -> [1: bb2, otherwise: bb1]; // scope 0 at ui/deref-patterns/refs.rs:12:5: 12:12
    }

    bb1: {
        _0 = const -1_i32;               // scope 0 at ui/deref-patterns/refs.rs:14:14: 14:16
        goto -> bb6;                     // scope 0 at ui/deref-patterns/refs.rs:14:14: 14:16
    }

    bb2: {
        _6 = deref_copy ((_1 as Some).0: &&&&std::string::String); // scope 0 at ui/deref-patterns/refs.rs:13:18: 13:24
        _7 = deref_copy (*_6);           // scope 0 at ui/deref-patterns/refs.rs:13:18: 13:24
        _8 = deref_copy (*_7);           // scope 0 at ui/deref-patterns/refs.rs:13:18: 13:24
        _9 = deref_copy (*_8);           // scope 0 at ui/deref-patterns/refs.rs:13:18: 13:24
        _2 = _9;                         // scope 0 at ui/deref-patterns/refs.rs:13:18: 13:24
        _3 = <String as Deref>::deref(move _2) -> bb3; // scope 0 at ui/deref-patterns/refs.rs:13:18: 13:24
                                         // mir::Constant
                                         // + span: ui/deref-patterns/refs.rs:13:18: 13:24
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = <str as PartialEq>::eq(_3, const "&&&&") -> bb4; // scope 0 at ui/deref-patterns/refs.rs:13:18: 13:24
                                         // mir::Constant
                                         // + span: ui/deref-patterns/refs.rs:13:18: 13:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/deref-patterns/refs.rs:13:18: 13:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        switchInt(move _4) -> [0: bb1, otherwise: bb5]; // scope 0 at ui/deref-patterns/refs.rs:13:18: 13:24
    }

    bb5: {
        _0 = const 1_i32;                // scope 0 at ui/deref-patterns/refs.rs:13:29: 13:30
        goto -> bb6;                     // scope 0 at ui/deref-patterns/refs.rs:13:29: 13:30
    }

    bb6: {
        return;                          // scope 0 at ui/deref-patterns/refs.rs:16:2: 16:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deref-patterns/refs.rs:18:11: 18:11

    bb0: {
        return;                          // scope 0 at ui/deref-patterns/refs.rs:18:13: 18:13
    }
}
