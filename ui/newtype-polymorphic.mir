// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/newtype-polymorphic.rs:6:10: 6:15>::clone(_1: &myvec<X>) -> myvec<X> {
    debug self => _1;                    // in scope 0 at ui/newtype-polymorphic.rs:6:10: 6:15
    let mut _0: myvec<X>;                // return place in scope 0 at ui/newtype-polymorphic.rs:6:10: 6:15
    let mut _2: std::vec::Vec<X>;        // in scope 0 at ui/newtype-polymorphic.rs:7:17: 7:23
    let mut _3: &std::vec::Vec<X>;       // in scope 0 at ui/newtype-polymorphic.rs:7:17: 7:23
    let _4: &std::vec::Vec<X>;           // in scope 0 at ui/newtype-polymorphic.rs:7:17: 7:23

    bb0: {
        _4 = &((*_1).0: std::vec::Vec<X>); // scope 0 at ui/newtype-polymorphic.rs:7:17: 7:23
        _3 = _4;                         // scope 0 at ui/newtype-polymorphic.rs:7:17: 7:23
        _2 = <Vec<X> as Clone>::clone(move _3) -> bb1; // scope 0 at ui/newtype-polymorphic.rs:7:17: 7:23
                                         // mir::Constant
                                         // + span: ui/newtype-polymorphic.rs:7:17: 7:23
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<X>) -> Vec<X> {<Vec<X> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = myvec::<X>(move _2);        // scope 0 at ui/newtype-polymorphic.rs:6:10: 6:15
        return;                          // scope 0 at ui/newtype-polymorphic.rs:6:15: 6:15
    }
}

fn myvec_deref(_1: myvec<X>) -> Vec<X> {
    debug mv => _1;                      // in scope 0 at ui/newtype-polymorphic.rs:9:25: 9:27
    let mut _0: std::vec::Vec<X>;        // return place in scope 0 at ui/newtype-polymorphic.rs:9:42: 9:48
    let _2: std::vec::Vec<X>;            // in scope 0 at ui/newtype-polymorphic.rs:10:15: 10:16
    let mut _3: &std::vec::Vec<X>;       // in scope 0 at ui/newtype-polymorphic.rs:11:12: 11:21
    scope 1 {
        debug v => _2;                   // in scope 1 at ui/newtype-polymorphic.rs:10:15: 10:16
    }

    bb0: {
        _2 = move (_1.0: std::vec::Vec<X>); // scope 0 at ui/newtype-polymorphic.rs:10:15: 10:16
        _3 = &_2;                        // scope 1 at ui/newtype-polymorphic.rs:11:12: 11:21
        _0 = <Vec<X> as Clone>::clone(move _3) -> [return: bb1, unwind: bb3]; // scope 1 at ui/newtype-polymorphic.rs:11:12: 11:21
                                         // mir::Constant
                                         // + span: ui/newtype-polymorphic.rs:11:14: 11:19
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<X>) -> Vec<X> {<Vec<X> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at ui/newtype-polymorphic.rs:12:1: 12:2
    }

    bb2: {
        return;                          // scope 0 at ui/newtype-polymorphic.rs:12:2: 12:2
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/newtype-polymorphic.rs:12:1: 12:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/newtype-polymorphic.rs:9:1: 12:2
    }
}

fn myvec_elt(_1: myvec<X>) -> X {
    debug mv => _1;                      // in scope 0 at ui/newtype-polymorphic.rs:14:17: 14:19
    let mut _0: X;                       // return place in scope 0 at ui/newtype-polymorphic.rs:14:34: 14:35
    let _2: std::vec::Vec<X>;            // in scope 0 at ui/newtype-polymorphic.rs:15:15: 15:16
    let mut _3: std::option::Option<X>;  // in scope 0 at ui/newtype-polymorphic.rs:16:12: 16:32
    let mut _4: &mut std::vec::IntoIter<X>; // in scope 0 at ui/newtype-polymorphic.rs:16:12: 16:32
    let mut _5: std::vec::IntoIter<X>;   // in scope 0 at ui/newtype-polymorphic.rs:16:12: 16:25
    let mut _6: std::vec::Vec<X>;        // in scope 0 at ui/newtype-polymorphic.rs:16:12: 16:13
    scope 1 {
        debug v => _2;                   // in scope 1 at ui/newtype-polymorphic.rs:15:15: 15:16
    }

    bb0: {
        _2 = move (_1.0: std::vec::Vec<X>); // scope 0 at ui/newtype-polymorphic.rs:15:15: 15:16
        _6 = move _2;                    // scope 1 at ui/newtype-polymorphic.rs:16:12: 16:13
        _5 = <Vec<X> as IntoIterator>::into_iter(move _6) -> bb1; // scope 1 at ui/newtype-polymorphic.rs:16:12: 16:25
                                         // mir::Constant
                                         // + span: ui/newtype-polymorphic.rs:16:14: 16:23
                                         // + literal: Const { ty: fn(Vec<X>) -> <Vec<X> as IntoIterator>::IntoIter {<Vec<X> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _5;                    // scope 1 at ui/newtype-polymorphic.rs:16:12: 16:32
        _3 = <std::vec::IntoIter<X> as Iterator>::next(move _4) -> [return: bb2, unwind: bb5]; // scope 1 at ui/newtype-polymorphic.rs:16:12: 16:32
                                         // mir::Constant
                                         // + span: ui/newtype-polymorphic.rs:16:26: 16:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<X>) -> Option<<std::vec::IntoIter<X> as Iterator>::Item> {<std::vec::IntoIter<X> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Option::<X>::unwrap(move _3) -> [return: bb3, unwind: bb5]; // scope 1 at ui/newtype-polymorphic.rs:16:12: 16:41
                                         // mir::Constant
                                         // + span: ui/newtype-polymorphic.rs:16:33: 16:39
                                         // + literal: Const { ty: fn(Option<X>) -> X {Option::<X>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_5) -> bb4;                 // scope 1 at ui/newtype-polymorphic.rs:16:41: 16:42
    }

    bb4: {
        return;                          // scope 0 at ui/newtype-polymorphic.rs:17:2: 17:2
    }

    bb5 (cleanup): {
        drop(_5) -> bb6;                 // scope 1 at ui/newtype-polymorphic.rs:16:41: 16:42
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/newtype-polymorphic.rs:14:1: 17:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/newtype-polymorphic.rs:19:15: 19:15
    let _1: myvec<i32>;                  // in scope 0 at ui/newtype-polymorphic.rs:20:9: 20:11
    let mut _2: std::vec::Vec<i32>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _3: std::boxed::Box<[i32]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: &myvec<i32>;            // in scope 0 at ui/newtype-polymorphic.rs:21:20: 21:30
    let mut _12: myvec<i32>;             // in scope 0 at ui/newtype-polymorphic.rs:22:32: 22:40
    let mut _13: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _14: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _15: &i32;                       // in scope 0 at ui/newtype-polymorphic.rs:23:16: 23:27
    let mut _16: &std::vec::Vec<i32>;    // in scope 0 at ui/newtype-polymorphic.rs:23:16: 23:24
    let mut _17: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _20: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _22: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _23: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _25: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _26: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _27: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _28: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _29: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _30: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _32: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _33: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _34: i32;                        // in scope 0 at ui/newtype-polymorphic.rs:24:16: 24:37
    let mut _35: myvec<i32>;             // in scope 0 at ui/newtype-polymorphic.rs:24:26: 24:36
    let mut _36: &myvec<i32>;            // in scope 0 at ui/newtype-polymorphic.rs:24:26: 24:36
    let mut _37: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _40: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _41: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _42: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _43: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _45: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _46: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _47: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _48: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _49: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _50: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _53: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _54: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _55: &i32;                       // in scope 0 at ui/newtype-polymorphic.rs:26:16: 26:20
    let mut _56: &std::vec::Vec<i32>;    // in scope 0 at ui/newtype-polymorphic.rs:26:16: 26:17
    let mut _57: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _60: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _61: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _62: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _63: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _65: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _66: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _67: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _68: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _69: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _70: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _71: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _75: bool;                   // in scope 0 at ui/newtype-polymorphic.rs:27:1: 27:2
    let mut _76: *const [i32; 3];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug mv => _1;                  // in scope 1 at ui/newtype-polymorphic.rs:20:9: 20:11
        let _9: myvec<i32>;              // in scope 1 at ui/newtype-polymorphic.rs:21:9: 21:17
        scope 3 {
            debug mv_clone => _9;        // in scope 3 at ui/newtype-polymorphic.rs:21:9: 21:17
            let _11: std::vec::Vec<i32>; // in scope 3 at ui/newtype-polymorphic.rs:22:9: 22:17
            scope 4 {
                debug mv_clone => _11;   // in scope 4 at ui/newtype-polymorphic.rs:22:9: 22:17
                let _18: &i32;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _19: &i32;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _38: &i32;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _39: &i32;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _52: std::vec::Vec<i32>; // in scope 4 at ui/newtype-polymorphic.rs:25:15: 25:16
                let mut _73: &i32;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _74: &i32;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 5 {
                    debug left_val => _18; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _19; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _24: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 6 {
                        debug kind => _24; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 7 {
                    debug left_val => _38; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _39; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _44: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 8 {
                        debug kind => _44; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 9 {
                    debug v => _52;      // in scope 9 at ui/newtype-polymorphic.rs:25:15: 25:16
                    let _58: &i32;       // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _59: &i32;       // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let mut _72: &i32;   // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 10 {
                        debug left_val => _58; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _59; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _64: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 11 {
                            debug kind => _64; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _75 = const false;               // scope 0 at ui/newtype-polymorphic.rs:20:9: 20:11
        _5 = const 12_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 4_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [i32; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _76 = (((_8.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_76) = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _3) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _75 = const true;                // scope 0 at ui/newtype-polymorphic.rs:20:14: 20:34
        _1 = myvec::<i32>(move _2);      // scope 0 at ui/newtype-polymorphic.rs:20:14: 20:34
        _10 = &_1;                       // scope 1 at ui/newtype-polymorphic.rs:21:20: 21:30
        _9 = <myvec<i32> as Clone>::clone(move _10) -> [return: bb3, unwind: bb21]; // scope 1 at ui/newtype-polymorphic.rs:21:20: 21:30
                                         // mir::Constant
                                         // + span: ui/newtype-polymorphic.rs:21:23: 21:28
                                         // + literal: Const { ty: for<'a> fn(&'a myvec<i32>) -> myvec<i32> {<myvec<i32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = move _9;                   // scope 3 at ui/newtype-polymorphic.rs:22:32: 22:40
        _11 = myvec_deref::<i32>(move _12) -> [return: bb4, unwind: bb21]; // scope 3 at ui/newtype-polymorphic.rs:22:20: 22:41
                                         // mir::Constant
                                         // + span: ui/newtype-polymorphic.rs:22:20: 22:31
                                         // + literal: Const { ty: fn(myvec<i32>) -> Vec<i32> {myvec_deref::<i32>}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = &_11;                      // scope 4 at ui/newtype-polymorphic.rs:23:16: 23:24
        _15 = <Vec<i32> as Index<usize>>::index(move _16, const 1_usize) -> [return: bb5, unwind: bb18]; // scope 4 at ui/newtype-polymorphic.rs:23:16: 23:27
                                         // mir::Constant
                                         // + span: ui/newtype-polymorphic.rs:23:16: 23:27
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>, usize) -> &'a <Vec<i32> as Index<usize>>::Output {<Vec<i32> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = _15;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _74 = const _;                   // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[2])) }
        _17 = _74;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _13 = (move _14, move _17);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _18 = (_13.0: &i32);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _19 = (_13.1: &i32);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _22 = (*_18);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _23 = const 2_i32;               // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _21 = Eq(move _22, move _23);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _20 = Not(move _21);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _20) -> [0: bb7, otherwise: bb6]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _24 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = _18;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _28;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _30 = _19;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = _30;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _25 = core::panicking::assert_failed::<i32, i32>(move _26, move _27, move _29, move _31) -> bb18; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb7: {
        _36 = &_1;                       // scope 4 at ui/newtype-polymorphic.rs:24:26: 24:36
        _35 = <myvec<i32> as Clone>::clone(move _36) -> [return: bb8, unwind: bb18]; // scope 4 at ui/newtype-polymorphic.rs:24:26: 24:36
                                         // mir::Constant
                                         // + span: ui/newtype-polymorphic.rs:24:29: 24:34
                                         // + literal: Const { ty: for<'a> fn(&'a myvec<i32>) -> myvec<i32> {<myvec<i32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb8: {
        _34 = myvec_elt::<i32>(move _35) -> [return: bb9, unwind: bb18]; // scope 4 at ui/newtype-polymorphic.rs:24:16: 24:37
                                         // mir::Constant
                                         // + span: ui/newtype-polymorphic.rs:24:16: 24:25
                                         // + literal: Const { ty: fn(myvec<i32>) -> i32 {myvec_elt::<i32>}, val: Value(<ZST>) }
    }

    bb9: {
        _33 = &_34;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _73 = const _;                   // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _37 = _73;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _32 = (move _33, move _37);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _38 = (_32.0: &i32);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _39 = (_32.1: &i32);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _42 = (*_38);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _43 = const 1_i32;               // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _41 = Eq(move _42, move _43);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _40 = Not(move _41);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _40) -> [0: bb11, otherwise: bb10]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _44 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _46 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _48 = _38;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _47 = _48;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _50 = _39;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _49 = _50;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _51 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _45 = core::panicking::assert_failed::<i32, i32>(move _46, move _47, move _49, move _51) -> bb18; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb11: {
        _75 = const false;               // scope 4 at ui/newtype-polymorphic.rs:25:15: 25:16
        _52 = move (_1.0: std::vec::Vec<i32>); // scope 4 at ui/newtype-polymorphic.rs:25:15: 25:16
        _56 = &_52;                      // scope 9 at ui/newtype-polymorphic.rs:26:16: 26:17
        _55 = <Vec<i32> as Index<usize>>::index(move _56, const 2_usize) -> [return: bb12, unwind: bb17]; // scope 9 at ui/newtype-polymorphic.rs:26:16: 26:20
                                         // mir::Constant
                                         // + span: ui/newtype-polymorphic.rs:26:16: 26:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>, usize) -> &'a <Vec<i32> as Index<usize>>::Output {<Vec<i32> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb12: {
        _54 = _55;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _72 = const _;                   // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _57 = _72;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _53 = (move _54, move _57);      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _58 = (_53.0: &i32);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _59 = (_53.1: &i32);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _62 = (*_58);                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _63 = const 3_i32;               // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _61 = Eq(move _62, move _63);    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _60 = Not(move _61);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _60) -> [0: bb14, otherwise: bb13]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _64 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _66 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _68 = _58;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _67 = _68;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _70 = _59;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _69 = _70;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _71 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _65 = core::panicking::assert_failed::<i32, i32>(move _66, move _67, move _69, move _71) -> bb17; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_52) -> [return: bb15, unwind: bb18]; // scope 4 at ui/newtype-polymorphic.rs:27:1: 27:2
    }

    bb15: {
        drop(_11) -> [return: bb16, unwind: bb21]; // scope 3 at ui/newtype-polymorphic.rs:27:1: 27:2
    }

    bb16: {
        _75 = const false;               // scope 0 at ui/newtype-polymorphic.rs:27:1: 27:2
        return;                          // scope 0 at ui/newtype-polymorphic.rs:27:2: 27:2
    }

    bb17 (cleanup): {
        drop(_52) -> bb18;               // scope 4 at ui/newtype-polymorphic.rs:27:1: 27:2
    }

    bb18 (cleanup): {
        drop(_11) -> bb21;               // scope 3 at ui/newtype-polymorphic.rs:27:1: 27:2
    }

    bb19 (cleanup): {
        resume;                          // scope 0 at ui/newtype-polymorphic.rs:19:1: 27:2
    }

    bb20 (cleanup): {
        drop((_1.0: std::vec::Vec<i32>)) -> bb19; // scope 0 at ui/newtype-polymorphic.rs:27:1: 27:2
    }

    bb21 (cleanup): {
        switchInt(_75) -> [0: bb19, otherwise: bb20]; // scope 0 at ui/newtype-polymorphic.rs:27:1: 27:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/newtype-polymorphic.rs:26:22: 26:23

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/newtype-polymorphic.rs:26:22: 26:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/newtype-polymorphic.rs:24:39: 24:40

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/newtype-polymorphic.rs:24:39: 24:40
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/newtype-polymorphic.rs:23:29: 23:30

    bb0: {
        _1 = const 2_i32;                // scope 0 at ui/newtype-polymorphic.rs:23:29: 23:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn myvec(_1: Vec<X>) -> myvec<X> {
    let mut _0: myvec<X>;                // return place in scope 0 at ui/newtype-polymorphic.rs:7:1: 7:16

    bb0: {
        _0 = myvec::<X>(move _1);        // scope 0 at ui/newtype-polymorphic.rs:7:1: 7:16
        return;                          // scope 0 at ui/newtype-polymorphic.rs:7:1: 7:16
    }
}

// MIR FOR CTFE
fn myvec(_1: Vec<X>) -> myvec<X> {
    let mut _0: myvec<X>;                // return place in scope 0 at ui/newtype-polymorphic.rs:7:1: 7:16

    bb0: {
        _0 = myvec::<X>(move _1);        // scope 0 at ui/newtype-polymorphic.rs:7:1: 7:16
        return;                          // scope 0 at ui/newtype-polymorphic.rs:7:1: 7:16
    }
}
