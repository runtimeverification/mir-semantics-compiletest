// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/newtype-polymorphic.rs:6:10: 6:15>::clone(_1: &myvec<X>) -> myvec<X> {
    debug self => _1;
    let mut _0: myvec<X>;
    let mut _2: std::vec::Vec<X>;
    let _3: &std::vec::Vec<X>;

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<X>);
        _2 = <Vec<X> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = myvec::<X>(move _2);
        return;
    }
}

fn myvec_deref(_1: myvec<X>) -> Vec<X> {
    debug mv => _1;
    let mut _0: std::vec::Vec<X>;
    let _2: std::vec::Vec<X>;
    let mut _3: &std::vec::Vec<X>;
    scope 1 {
        debug v => _2;
    }

    bb0: {
        _2 = move (_1.0: std::vec::Vec<X>);
        _3 = &_2;
        _0 = <Vec<X> as Clone>::clone(move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn myvec_elt(_1: myvec<X>) -> X {
    debug mv => _1;
    let mut _0: X;
    let _2: std::vec::Vec<X>;
    let mut _3: std::option::Option<X>;
    let mut _4: &mut std::vec::IntoIter<X>;
    let mut _5: std::vec::IntoIter<X>;
    scope 1 {
        debug v => _2;
    }

    bb0: {
        _2 = move (_1.0: std::vec::Vec<X>);
        _5 = <Vec<X> as IntoIterator>::into_iter(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _3 = <std::vec::IntoIter<X> as Iterator>::next(move _4) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = Option::<X>::unwrap(move _3) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_5) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: myvec<i32>;
    let mut _2: std::vec::Vec<i32>;
    let mut _3: std::boxed::Box<[i32]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[i32; 3]>;
    let mut _9: &myvec<i32>;
    let mut _11: myvec<i32>;
    let mut _12: (&i32, &i32);
    let mut _13: &i32;
    let _14: &i32;
    let mut _15: &std::vec::Vec<i32>;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: i32;
    let mut _21: i32;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&i32, &i32);
    let mut _26: &i32;
    let _27: i32;
    let mut _28: myvec<i32>;
    let mut _29: &myvec<i32>;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: i32;
    let mut _35: i32;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&i32, &i32);
    let mut _41: &i32;
    let _42: &i32;
    let mut _43: &std::vec::Vec<i32>;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: i32;
    let mut _49: i32;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _56: bool;
    let mut _57: *const [i32; 3];
    let mut _58: *const ();
    let mut _59: usize;
    let mut _60: usize;
    let mut _61: usize;
    let mut _62: usize;
    let mut _63: bool;
    scope 1 {
        debug mv => _1;
        let _8: myvec<i32>;
        scope 3 {
            debug mv_clone => _8;
            let _10: std::vec::Vec<i32>;
            scope 4 {
                debug mv_clone => _10;
                let _16: &i32;
                let _17: &i32;
                let _30: &i32;
                let _31: &i32;
                let _39: std::vec::Vec<i32>;
                let mut _54: &i32;
                let mut _55: &i32;
                scope 5 {
                    debug left_val => _16;
                    debug right_val => _17;
                    let _22: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _22;
                    }
                }
                scope 7 {
                    debug left_val => _30;
                    debug right_val => _31;
                    let _36: core::panicking::AssertKind;
                    scope 8 {
                        debug kind => _36;
                    }
                }
                scope 9 {
                    debug v => _39;
                    let _44: &i32;
                    let _45: &i32;
                    let mut _53: &i32;
                    scope 10 {
                        debug left_val => _44;
                        debug right_val => _45;
                        let _50: core::panicking::AssertKind;
                        scope 11 {
                            debug kind => _50;
                        }
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _56 = const false;
        _4 = SizeOf([i32; 3]);
        _5 = AlignOf([i32; 3]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [i32; 3]);
        _57 = (((_7.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _58 = _57 as *const () (PtrToPtr);
        _59 = _58 as usize (Transmute);
        _60 = AlignOf(i32);
        _61 = Sub(_60, const 1_usize);
        _62 = BitAnd(_59, _61);
        _63 = Eq(_62, const 0_usize);
        assert(_63, "misaligned pointer dereference: address must be a multiple of {} but is {}", _60, _59) -> [success: bb22, unwind unreachable];
    }

    bb2: {
        _56 = const true;
        _1 = myvec::<i32>(move _2);
        _9 = &_1;
        _8 = <myvec<i32> as Clone>::clone(move _9) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _11 = move _8;
        _10 = myvec_deref::<i32>(move _11) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _15 = &_10;
        _14 = <Vec<i32> as Index<usize>>::index(move _15, const 1_usize) -> [return: bb5, unwind: bb18];
    }

    bb5: {
        _13 = _14;
        _55 = const _;
        _12 = (move _13, _55);
        _16 = (_12.0: &i32);
        _17 = (_12.1: &i32);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<i32, i32>(move _22, _16, _17, move _24) -> bb18;
    }

    bb7: {
        _29 = &_1;
        _28 = <myvec<i32> as Clone>::clone(move _29) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        _27 = myvec_elt::<i32>(move _28) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        _26 = &_27;
        _54 = const _;
        _25 = (move _26, _54);
        _30 = (_25.0: &i32);
        _31 = (_25.1: &i32);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<i32, i32>(move _36, _30, _31, move _38) -> bb18;
    }

    bb11: {
        _56 = const false;
        _39 = move (_1.0: std::vec::Vec<i32>);
        _43 = &_39;
        _42 = <Vec<i32> as Index<usize>>::index(move _43, const 2_usize) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _41 = _42;
        _53 = const _;
        _40 = (move _41, _53);
        _44 = (_40.0: &i32);
        _45 = (_40.1: &i32);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<i32, i32>(move _50, _44, _45, move _52) -> bb17;
    }

    bb14: {
        drop(_39) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        drop(_10) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _56 = const false;
        return;
    }

    bb17 (cleanup): {
        drop(_39) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_10) -> [return: bb21, unwind terminate];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20 (cleanup): {
        drop((_1.0: std::vec::Vec<i32>)) -> [return: bb19, unwind terminate];
    }

    bb21 (cleanup): {
        switchInt(_56) -> [0: bb19, otherwise: bb20];
    }

    bb22: {
        (*_57) = [const 1_i32, const 2_i32, const 3_i32];
        _3 = move _7 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _2 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _3) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

fn myvec(_1: Vec<X>) -> myvec<X> {
    let mut _0: myvec<X>;

    bb0: {
        _0 = myvec::<X>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn myvec(_1: Vec<X>) -> myvec<X> {
    let mut _0: myvec<X>;

    bb0: {
        _0 = myvec::<X>(move _1);
        return;
    }
}
