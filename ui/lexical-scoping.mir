// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/lexical-scoping.rs:6:1: 6:19>::foo(_1: &Foo<Bar>) -> () {
    debug self => _1;                    // in scope 0 at ui/lexical-scoping.rs:7:12: 7:17
    let mut _0: ();                      // return place in scope 0 at ui/lexical-scoping.rs:7:19: 7:19
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/lexical-scoping.rs:10:6: 10:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lexical-scoping.rs:13:11: 13:11
    let _1: i32;                         // in scope 0 at ui/lexical-scoping.rs:14:9: 14:10
    let _2: ();                          // in scope 0 at ui/lexical-scoping.rs:17:9: 17:12
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/lexical-scoping.rs:14:9: 14:10
    }

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/lexical-scoping.rs:14:13: 14:14
        _2 = f() -> bb1;                 // scope 1 at ui/lexical-scoping.rs:17:9: 17:12
                                         // mir::Constant
                                         // + span: ui/lexical-scoping.rs:17:9: 17:10
                                         // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/lexical-scoping.rs:19:2: 19:2
    }
}

fn f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lexical-scoping.rs:16:16: 16:16

    bb0: {
        return;                          // scope 0 at ui/lexical-scoping.rs:16:18: 16:18
    }
}
