// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/logging-only-prints-once.rs:11:1: 11:24>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug _fmt => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &std::cell::Cell<isize>;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let _6: isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let _16: ();
    scope 1 {
        debug f => _3;
        let _7: &isize;
        let _8: &isize;
        let mut _17: &isize;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
    }

    bb0: {
        _3 = &((*_1).0: std::cell::Cell<isize>);
        _6 = Cell::<isize>::get(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _17 = const _;
        _4 = (move _5, _17);
        _7 = (_4.0: &isize);
        _8 = (_4.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb3: {
        _16 = Cell::<isize>::set(_3, const 1_isize) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Result::<(), std::fmt::Error>::Ok(const ());
        return;
    }
}

promoted[0] in <impl at ui/logging-only-prints-once.rs:11:1: 11:24>::fmt: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 0_isize;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::option::Option<()>;
    let mut _3: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _4: std::thread::JoinHandle<()>;

    bb0: {
        _4 = spawn::<[closure@ui/logging-only-prints-once.rs:21:19: 21:26], ()>(const ZeroSized: [closure@ui/logging-only-prints-once.rs:21:19: 21:26]) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = JoinHandle::<()>::join(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = Result::<(), Box<dyn Any + Send>>::ok(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = Option::<()>::unwrap(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/logging-only-prints-once.rs:21:19: 21:26]) -> () {
    let mut _0: ();
    let mut _2: Foo;
    let mut _3: std::cell::Cell<isize>;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &Foo;
    let mut _13: (&isize, &isize);
    let mut _14: &isize;
    let _15: isize;
    let mut _16: &std::cell::Cell<isize>;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: isize;
    let mut _22: isize;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug f => _2;
        let _12: &mut std::cell::Cell<isize>;
        let mut _27: &[&str; 2];
        scope 2 {
            debug f => _12;
            let _17: &isize;
            let _18: &isize;
            let mut _26: &isize;
            scope 3 {
                debug left_val => _17;
                debug right_val => _18;
                let _23: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _23;
                }
            }
        }
    }

    bb0: {
        _3 = Cell::<isize>::new(const 0_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Foo(move _3);
        _27 = const _;
        _6 = _27 as &[&str] (Pointer(Unsize));
        _11 = &_2;
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<Foo>(_11) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = _print(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = &mut (_2.0: std::cell::Cell<isize>);
        _16 = &(*_12);
        _15 = Cell::<isize>::get(move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        _14 = &_15;
        _26 = const _;
        _13 = (move _14, _26);
        _17 = (_13.0: &isize);
        _18 = (_13.1: &isize);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<isize, isize>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb7: {
        return;
    }
}

promoted[0] in main::{closure#0}: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn Foo(_1: Cell<isize>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: Cell<isize>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}
