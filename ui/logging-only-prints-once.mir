// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/logging-only-prints-once.rs:11:1: 11:24>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/logging-only-prints-once.rs:12:12: 12:17
    debug _fmt => _2;                    // in scope 0 at ui/logging-only-prints-once.rs:12:19: 12:23
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/logging-only-prints-once.rs:12:49: 12:60
    let _3: &std::cell::Cell<isize>;     // in scope 0 at ui/logging-only-prints-once.rs:13:17: 13:22
    let mut _4: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: isize;                       // in scope 0 at ui/logging-only-prints-once.rs:14:20: 14:27
    let mut _7: &std::cell::Cell<isize>; // in scope 0 at ui/logging-only-prints-once.rs:14:20: 14:27
    let mut _8: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _23: ();                         // in scope 0 at ui/logging-only-prints-once.rs:15:9: 15:17
    let mut _24: &std::cell::Cell<isize>; // in scope 0 at ui/logging-only-prints-once.rs:15:9: 15:17
    scope 1 {
        debug f => _3;                   // in scope 1 at ui/logging-only-prints-once.rs:13:17: 13:22
        let _9: &isize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _10: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _25: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _9;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _10;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _15: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _15;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _3 = &((*_1).0: std::cell::Cell<isize>); // scope 0 at ui/logging-only-prints-once.rs:13:17: 13:22
        _7 = _3;                         // scope 1 at ui/logging-only-prints-once.rs:14:20: 14:27
        _6 = Cell::<isize>::get(move _7) -> bb1; // scope 1 at ui/logging-only-prints-once.rs:14:20: 14:27
                                         // mir::Constant
                                         // + span: ui/logging-only-prints-once.rs:14:22: 14:25
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<isize>) -> isize {Cell::<isize>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _25 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(<Foo as Debug>::fmt, [], Some(promoted[0])) }
        _8 = _25;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _8);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_4.0: &isize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_4.1: &isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = const 0_isize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<isize, isize>(move _17, move _18, move _20, move _22); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb3: {
        _24 = _3;                        // scope 1 at ui/logging-only-prints-once.rs:15:9: 15:17
        _23 = Cell::<isize>::set(move _24, const 1_isize) -> bb4; // scope 1 at ui/logging-only-prints-once.rs:15:9: 15:17
                                         // mir::Constant
                                         // + span: ui/logging-only-prints-once.rs:15:11: 15:14
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<isize>, isize) {Cell::<isize>::set}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = const Result::<(), std::fmt::Error>::Ok(()); // scope 1 at ui/logging-only-prints-once.rs:16:9: 16:15
                                         // mir::Constant
                                         // + span: ui/logging-only-prints-once.rs:16:9: 16:15
                                         // + literal: Const { ty: Result<(), std::fmt::Error>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/logging-only-prints-once.rs:17:6: 17:6
    }
}

promoted[0] in <impl at ui/logging-only-prints-once.rs:11:1: 11:24>::fmt: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/logging-only-prints-once.rs:14:29: 14:30

    bb0: {
        _1 = const 0_isize;              // scope 0 at ui/logging-only-prints-once.rs:14:29: 14:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/logging-only-prints-once.rs:20:15: 20:15
    let _1: ();                          // in scope 0 at ui/logging-only-prints-once.rs:21:5: 29:14
    let mut _2: std::option::Option<()>; // in scope 0 at ui/logging-only-prints-once.rs:21:5: 28:10
    let mut _3: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/logging-only-prints-once.rs:21:5: 27:12
    let mut _4: std::thread::JoinHandle<()>; // in scope 0 at ui/logging-only-prints-once.rs:21:5: 26:7
    let mut _5: [closure@ui/logging-only-prints-once.rs:21:19: 21:26]; // in scope 0 at ui/logging-only-prints-once.rs:21:19: 26:6

    bb0: {
        _4 = spawn::<[closure@ui/logging-only-prints-once.rs:21:19: 21:26], ()>(move _5) -> bb1; // scope 0 at ui/logging-only-prints-once.rs:21:5: 26:7
                                         // mir::Constant
                                         // + span: ui/logging-only-prints-once.rs:21:5: 21:18
                                         // + literal: Const { ty: fn([closure@ui/logging-only-prints-once.rs:21:19: 21:26]) -> JoinHandle<()> {spawn::<[closure@ui/logging-only-prints-once.rs:21:19: 21:26], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = JoinHandle::<()>::join(move _4) -> bb2; // scope 0 at ui/logging-only-prints-once.rs:21:5: 27:12
                                         // mir::Constant
                                         // + span: ui/logging-only-prints-once.rs:27:6: 27:10
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Result::<(), Box<dyn Any + Send>>::ok(move _3) -> bb3; // scope 0 at ui/logging-only-prints-once.rs:21:5: 28:10
                                         // mir::Constant
                                         // + span: ui/logging-only-prints-once.rs:28:6: 28:8
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Option<()> {Result::<(), Box<dyn Any + Send>>::ok}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = Option::<()>::unwrap(move _2) -> bb4; // scope 0 at ui/logging-only-prints-once.rs:21:5: 29:14
                                         // mir::Constant
                                         // + span: ui/logging-only-prints-once.rs:29:6: 29:12
                                         // + literal: Const { ty: fn(Option<()>) {Option::<()>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/logging-only-prints-once.rs:30:2: 30:2
    }
}

fn main::{closure#0}(_1: [closure@ui/logging-only-prints-once.rs:21:19: 21:26]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/logging-only-prints-once.rs:21:27: 21:27
    let mut _2: Foo;                     // in scope 0 at ui/logging-only-prints-once.rs:22:13: 22:18
    let mut _3: std::cell::Cell<isize>;  // in scope 0 at ui/logging-only-prints-once.rs:22:25: 22:37
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/logging-only-prints-once.rs:23:18: 23:24
    let mut _7: &[&str; 2];              // in scope 0 at ui/logging-only-prints-once.rs:23:18: 23:24
    let _8: &[&str; 2];                  // in scope 0 at ui/logging-only-prints-once.rs:23:18: 23:24
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/logging-only-prints-once.rs:23:26: 23:27
    let mut _14: &Foo;                   // in scope 0 at ui/logging-only-prints-once.rs:23:26: 23:27
    let _15: &Foo;                       // in scope 0 at ui/logging-only-prints-once.rs:23:26: 23:27
    let mut _17: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _18: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _19: isize;                      // in scope 0 at ui/logging-only-prints-once.rs:25:20: 25:27
    let mut _20: &std::cell::Cell<isize>; // in scope 0 at ui/logging-only-prints-once.rs:25:20: 25:27
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _26: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _27: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _29: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _30: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _31: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _32: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _33: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _34: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug f => _2;                   // in scope 1 at ui/logging-only-prints-once.rs:22:13: 22:18
        let _16: &mut std::cell::Cell<isize>; // in scope 1 at ui/logging-only-prints-once.rs:24:17: 24:26
        let mut _37: &[&str; 2];         // in scope 1 at ui/logging-only-prints-once.rs:23:18: 23:24
        scope 2 {
            debug f => _16;              // in scope 2 at ui/logging-only-prints-once.rs:24:17: 24:26
            let _22: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _23: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _36: &isize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _22;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _23;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _28: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _28;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _3 = Cell::<isize>::new(const 0_isize) -> bb1; // scope 0 at ui/logging-only-prints-once.rs:22:25: 22:37
                                         // mir::Constant
                                         // + span: ui/logging-only-prints-once.rs:22:25: 22:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Cell<isize> {Cell::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Foo(move _3);               // scope 0 at ui/logging-only-prints-once.rs:22:21: 22:38
        _37 = const _;                   // scope 1 at ui/logging-only-prints-once.rs:23:18: 23:24
                                         // mir::Constant
                                         // + span: ui/logging-only-prints-once.rs:23:18: 23:24
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _8 = _37;                        // scope 1 at ui/logging-only-prints-once.rs:23:18: 23:24
        _7 = _8;                         // scope 1 at ui/logging-only-prints-once.rs:23:18: 23:24
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 1 at ui/logging-only-prints-once.rs:23:18: 23:24
        _15 = &_2;                       // scope 1 at ui/logging-only-prints-once.rs:23:26: 23:27
        _14 = _15;                       // scope 1 at ui/logging-only-prints-once.rs:23:26: 23:27
        _13 = core::fmt::ArgumentV1::<'_>::new_debug::<Foo>(move _14) -> bb2; // scope 1 at ui/logging-only-prints-once.rs:23:26: 23:27
                                         // mir::Constant
                                         // + span: ui/logging-only-prints-once.rs:23:26: 23:27
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b Foo) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Foo>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = [move _13];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = &_12;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb3; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = _print(move _5) -> bb4;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = &mut (_2.0: std::cell::Cell<isize>); // scope 1 at ui/logging-only-prints-once.rs:24:17: 24:26
        _20 = &(*_16);                   // scope 2 at ui/logging-only-prints-once.rs:25:20: 25:27
        _19 = Cell::<isize>::get(move _20) -> bb5; // scope 2 at ui/logging-only-prints-once.rs:25:20: 25:27
                                         // mir::Constant
                                         // + span: ui/logging-only-prints-once.rs:25:22: 25:25
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<isize>) -> isize {Cell::<isize>::get}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = &_19;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _36 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _21 = _36;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _17 = (move _18, move _21);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _22 = (_17.0: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _23 = (_17.1: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _26 = (*_22);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _27 = (*_23);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _25 = Eq(move _26, move _27);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _24 = Not(move _25);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _24) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _28 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _32;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = _34;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _29 = core::panicking::assert_failed::<isize, isize>(move _30, move _31, move _33, move _35); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/logging-only-prints-once.rs:26:6: 26:6
    }
}

promoted[0] in main::{closure#0}: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/logging-only-prints-once.rs:25:29: 25:30

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/logging-only-prints-once.rs:25:29: 25:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/logging-only-prints-once.rs:23:18: 23:24
    let mut _1: [&str; 2];               // in scope 0 at ui/logging-only-prints-once.rs:23:18: 23:24

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/logging-only-prints-once.rs:23:18: 23:24
                                         // mir::Constant
                                         // + span: ui/logging-only-prints-once.rs:23:18: 23:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/logging-only-prints-once.rs:23:18: 23:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/logging-only-prints-once.rs:23:18: 23:24
        return;                          // scope 0 at ui/logging-only-prints-once.rs:23:18: 23:24
    }
}

fn Foo(_1: Cell<isize>) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/logging-only-prints-once.rs:9:1: 9:11

    bb0: {
        _0 = Foo(move _1);               // scope 0 at ui/logging-only-prints-once.rs:9:1: 9:11
        return;                          // scope 0 at ui/logging-only-prints-once.rs:9:1: 9:11
    }
}

// MIR FOR CTFE
fn Foo(_1: Cell<isize>) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/logging-only-prints-once.rs:9:1: 9:11

    bb0: {
        _0 = Foo(move _1);               // scope 0 at ui/logging-only-prints-once.rs:9:1: 9:11
        return;                          // scope 0 at ui/logging-only-prints-once.rs:9:1: 9:11
    }
}
