// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/realloc-16687.rs:13:11: 13:11
    let mut _1: bool;                    // in scope 0 at ui/realloc-16687.rs:15:9: 15:33
    let mut _2: bool;                    // in scope 0 at ui/realloc-16687.rs:15:17: 15:32
    let mut _3: !;                       // in scope 0 at ui/realloc-16687.rs:15:9: 15:33
    scope 1 {
    }

    bb0: {
        _2 = test_triangle() -> bb1;     // scope 1 at ui/realloc-16687.rs:15:17: 15:32
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:15:17: 15:30
                                         // + literal: Const { ty: unsafe fn() -> bool {test_triangle}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Not(move _2);               // scope 1 at ui/realloc-16687.rs:15:9: 15:33
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/realloc-16687.rs:15:9: 15:33
    }

    bb2: {
        _3 = core::panicking::panic(const "assertion failed: test_triangle()"); // scope 1 at ui/realloc-16687.rs:15:9: 15:33
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:15:9: 15:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        return;                          // scope 0 at ui/realloc-16687.rs:17:2: 17:2
    }
}

fn test_triangle() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/realloc-16687.rs:19:30: 19:34
    let mut _1: std::vec::Vec<*mut u8>;  // in scope 0 at ui/realloc-16687.rs:21:9: 21:19
    let mut _2: *mut u8;                 // in scope 0 at ui/realloc-16687.rs:21:27: 21:42
    let mut _3: usize;                   // in scope 0 at ui/realloc-16687.rs:21:44: 21:49
    let mut _5: &mut [*mut u8];          // in scope 0 at ui/realloc-16687.rs:22:23: 22:30
    let mut _6: &mut std::vec::Vec<*mut u8>; // in scope 0 at ui/realloc-16687.rs:22:24: 22:30
    let mut _7: std::ops::Range<usize>;  // in scope 0 at ui/realloc-16687.rs:89:14: 89:26
    let mut _8: std::ops::Range<usize>;  // in scope 0 at ui/realloc-16687.rs:89:14: 89:26
    let mut _9: usize;                   // in scope 0 at ui/realloc-16687.rs:89:17: 89:26
    let mut _11: std::option::Option<usize>; // in scope 0 at ui/realloc-16687.rs:89:14: 89:26
    let mut _12: &mut std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:89:14: 89:26
    let mut _13: &mut std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:89:14: 89:26
    let mut _14: isize;                  // in scope 0 at ui/realloc-16687.rs:89:5: 93:6
    let mut _17: usize;                  // in scope 0 at ui/realloc-16687.rs:90:32: 90:33
    let mut _18: *mut u8;                // in scope 0 at ui/realloc-16687.rs:91:25: 91:80
    let mut _19: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:91:34: 91:79
    let mut _20: std::result::Result<std::alloc::Layout, std::alloc::LayoutError>; // in scope 0 at ui/realloc-16687.rs:91:34: 91:70
    let mut _21: usize;                  // in scope 0 at ui/realloc-16687.rs:91:58: 91:62
    let mut _22: usize;                  // in scope 0 at ui/realloc-16687.rs:91:64: 91:69
    let _23: usize;                      // in scope 0 at ui/realloc-16687.rs:91:16: 91:21
    let mut _24: usize;                  // in scope 0 at ui/realloc-16687.rs:91:20: 91:21
    let mut _25: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:91:16: 91:21
    let mut _26: usize;                  // in scope 0 at ui/realloc-16687.rs:91:9: 91:22
    let mut _27: bool;                   // in scope 0 at ui/realloc-16687.rs:91:9: 91:22
    let mut _28: *mut u8;                // in scope 0 at ui/realloc-16687.rs:92:29: 92:84
    let mut _29: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:92:38: 92:83
    let mut _30: std::result::Result<std::alloc::Layout, std::alloc::LayoutError>; // in scope 0 at ui/realloc-16687.rs:92:38: 92:74
    let mut _31: usize;                  // in scope 0 at ui/realloc-16687.rs:92:62: 92:66
    let mut _32: usize;                  // in scope 0 at ui/realloc-16687.rs:92:68: 92:73
    let _33: usize;                      // in scope 0 at ui/realloc-16687.rs:92:16: 92:25
    let mut _34: usize;                  // in scope 0 at ui/realloc-16687.rs:92:16: 92:21
    let mut _35: usize;                  // in scope 0 at ui/realloc-16687.rs:92:20: 92:21
    let mut _36: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:92:16: 92:21
    let mut _37: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:92:16: 92:25
    let mut _38: usize;                  // in scope 0 at ui/realloc-16687.rs:92:9: 92:26
    let mut _39: bool;                   // in scope 0 at ui/realloc-16687.rs:92:9: 92:26
    let mut _40: std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:96:14: 96:26
    let mut _41: std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:96:14: 96:26
    let mut _42: usize;                  // in scope 0 at ui/realloc-16687.rs:96:17: 96:26
    let mut _44: std::option::Option<usize>; // in scope 0 at ui/realloc-16687.rs:96:14: 96:26
    let mut _45: &mut std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:96:14: 96:26
    let mut _46: &mut std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:96:14: 96:26
    let mut _47: isize;                  // in scope 0 at ui/realloc-16687.rs:96:5: 102:6
    let mut _52: (*mut u8, *mut u8, usize); // in scope 0 at ui/realloc-16687.rs:97:30: 97:80
    let mut _53: *mut u8;                // in scope 0 at ui/realloc-16687.rs:97:31: 97:44
    let _54: usize;                      // in scope 0 at ui/realloc-16687.rs:97:38: 97:43
    let mut _55: usize;                  // in scope 0 at ui/realloc-16687.rs:97:42: 97:43
    let mut _56: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:97:38: 97:43
    let mut _57: usize;                  // in scope 0 at ui/realloc-16687.rs:97:31: 97:44
    let mut _58: bool;                   // in scope 0 at ui/realloc-16687.rs:97:31: 97:44
    let mut _59: *mut u8;                // in scope 0 at ui/realloc-16687.rs:97:46: 97:63
    let _60: usize;                      // in scope 0 at ui/realloc-16687.rs:97:53: 97:62
    let mut _61: usize;                  // in scope 0 at ui/realloc-16687.rs:97:53: 97:58
    let mut _62: usize;                  // in scope 0 at ui/realloc-16687.rs:97:57: 97:58
    let mut _63: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:97:53: 97:58
    let mut _64: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:97:53: 97:62
    let mut _65: usize;                  // in scope 0 at ui/realloc-16687.rs:97:46: 97:63
    let mut _66: bool;                   // in scope 0 at ui/realloc-16687.rs:97:46: 97:63
    let mut _67: usize;                  // in scope 0 at ui/realloc-16687.rs:97:65: 97:79
    let mut _68: usize;                  // in scope 0 at ui/realloc-16687.rs:97:77: 97:78
    let mut _69: std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:98:18: 98:25
    let mut _70: std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:98:18: 98:25
    let mut _71: usize;                  // in scope 0 at ui/realloc-16687.rs:98:21: 98:25
    let mut _73: std::option::Option<usize>; // in scope 0 at ui/realloc-16687.rs:98:18: 98:25
    let mut _74: &mut std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:98:18: 98:25
    let mut _75: &mut std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:98:18: 98:25
    let mut _76: isize;                  // in scope 0 at ui/realloc-16687.rs:98:9: 101:10
    let mut _78: usize;                  // in scope 0 at ui/realloc-16687.rs:99:26: 99:27
    let mut _79: *mut u8;                // in scope 0 at ui/realloc-16687.rs:99:14: 99:23
    let mut _80: *mut u8;                // in scope 0 at ui/realloc-16687.rs:99:14: 99:16
    let mut _81: usize;                  // in scope 0 at ui/realloc-16687.rs:99:21: 99:22
    let mut _82: usize;                  // in scope 0 at ui/realloc-16687.rs:100:26: 100:27
    let mut _83: *mut u8;                // in scope 0 at ui/realloc-16687.rs:100:14: 100:23
    let mut _84: *mut u8;                // in scope 0 at ui/realloc-16687.rs:100:14: 100:16
    let mut _85: usize;                  // in scope 0 at ui/realloc-16687.rs:100:21: 100:22
    let _86: ();                         // in scope 0 at ui/realloc-16687.rs:104:5: 104:27
    let mut _87: &[*mut u8];             // in scope 0 at ui/realloc-16687.rs:104:18: 104:26
    let _88: &[*mut u8];                 // in scope 0 at ui/realloc-16687.rs:104:18: 104:26
    let _89: ();                         // in scope 0 at ui/realloc-16687.rs:105:5: 105:19
    let mut _90: &mut [*mut u8];         // in scope 0 at ui/realloc-16687.rs:105:12: 105:18
    let _91: ();                         // in scope 0 at ui/realloc-16687.rs:106:5: 106:19
    let mut _92: &mut [*mut u8];         // in scope 0 at ui/realloc-16687.rs:106:12: 106:18
    let _93: ();                         // in scope 0 at ui/realloc-16687.rs:107:5: 107:19
    let mut _94: &mut [*mut u8];         // in scope 0 at ui/realloc-16687.rs:107:12: 107:18
    let _95: ();                         // in scope 0 at ui/realloc-16687.rs:108:5: 108:19
    let mut _96: &mut [*mut u8];         // in scope 0 at ui/realloc-16687.rs:108:12: 108:18
    let mut _97: std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:110:14: 110:26
    let mut _98: std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:110:14: 110:26
    let mut _99: usize;                  // in scope 0 at ui/realloc-16687.rs:110:17: 110:26
    let mut _101: std::option::Option<usize>; // in scope 0 at ui/realloc-16687.rs:110:14: 110:26
    let mut _102: &mut std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:110:14: 110:26
    let mut _103: &mut std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:110:14: 110:26
    let mut _104: isize;                 // in scope 0 at ui/realloc-16687.rs:110:5: 114:6
    let mut _107: usize;                 // in scope 0 at ui/realloc-16687.rs:111:32: 111:33
    let _108: ();                        // in scope 0 at ui/realloc-16687.rs:112:9: 112:81
    let mut _109: *mut u8;               // in scope 0 at ui/realloc-16687.rs:112:20: 112:33
    let _110: usize;                     // in scope 0 at ui/realloc-16687.rs:112:27: 112:32
    let mut _111: usize;                 // in scope 0 at ui/realloc-16687.rs:112:31: 112:32
    let mut _112: (usize, bool);         // in scope 0 at ui/realloc-16687.rs:112:27: 112:32
    let mut _113: usize;                 // in scope 0 at ui/realloc-16687.rs:112:20: 112:33
    let mut _114: bool;                  // in scope 0 at ui/realloc-16687.rs:112:20: 112:33
    let mut _115: std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:112:35: 112:80
    let mut _116: std::result::Result<std::alloc::Layout, std::alloc::LayoutError>; // in scope 0 at ui/realloc-16687.rs:112:35: 112:71
    let mut _117: usize;                 // in scope 0 at ui/realloc-16687.rs:112:59: 112:63
    let mut _118: usize;                 // in scope 0 at ui/realloc-16687.rs:112:65: 112:70
    let _119: ();                        // in scope 0 at ui/realloc-16687.rs:113:9: 113:85
    let mut _120: *mut u8;               // in scope 0 at ui/realloc-16687.rs:113:20: 113:37
    let _121: usize;                     // in scope 0 at ui/realloc-16687.rs:113:27: 113:36
    let mut _122: usize;                 // in scope 0 at ui/realloc-16687.rs:113:27: 113:32
    let mut _123: usize;                 // in scope 0 at ui/realloc-16687.rs:113:31: 113:32
    let mut _124: (usize, bool);         // in scope 0 at ui/realloc-16687.rs:113:27: 113:32
    let mut _125: (usize, bool);         // in scope 0 at ui/realloc-16687.rs:113:27: 113:36
    let mut _126: usize;                 // in scope 0 at ui/realloc-16687.rs:113:20: 113:37
    let mut _127: bool;                  // in scope 0 at ui/realloc-16687.rs:113:20: 113:37
    let mut _128: std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:113:39: 113:84
    let mut _129: std::result::Result<std::alloc::Layout, std::alloc::LayoutError>; // in scope 0 at ui/realloc-16687.rs:113:39: 113:75
    let mut _130: usize;                 // in scope 0 at ui/realloc-16687.rs:113:63: 113:67
    let mut _131: usize;                 // in scope 0 at ui/realloc-16687.rs:113:69: 113:74
    scope 1 {
        debug ascend => _1;              // in scope 1 at ui/realloc-16687.rs:21:9: 21:19
        let _4: &mut [*mut u8];          // in scope 1 at ui/realloc-16687.rs:22:9: 22:15
        scope 2 {
            debug ascend => _4;          // in scope 2 at ui/realloc-16687.rs:22:9: 22:15
            let mut _10: std::ops::Range<usize>; // in scope 2 at ui/realloc-16687.rs:89:14: 89:26
            let mut _43: std::ops::Range<usize>; // in scope 2 at ui/realloc-16687.rs:96:14: 96:26
            let mut _100: std::ops::Range<usize>; // in scope 2 at ui/realloc-16687.rs:110:14: 110:26
            scope 3 {
                debug iter => _10;       // in scope 3 at ui/realloc-16687.rs:89:14: 89:26
                let _15: usize;          // in scope 3 at ui/realloc-16687.rs:89:9: 89:10
                scope 4 {
                    debug i => _15;      // in scope 4 at ui/realloc-16687.rs:89:9: 89:10
                    let _16: usize;      // in scope 4 at ui/realloc-16687.rs:90:13: 90:17
                    scope 5 {
                        debug size => _16; // in scope 5 at ui/realloc-16687.rs:90:13: 90:17
                    }
                }
            }
            scope 6 {
                debug iter => _43;       // in scope 6 at ui/realloc-16687.rs:96:14: 96:26
                let _48: usize;          // in scope 6 at ui/realloc-16687.rs:96:9: 96:10
                scope 7 {
                    debug i => _48;      // in scope 7 at ui/realloc-16687.rs:96:9: 96:10
                    let _49: *mut u8;    // in scope 7 at ui/realloc-16687.rs:97:14: 97:16
                    let _50: *mut u8;    // in scope 7 at ui/realloc-16687.rs:97:18: 97:20
                    let _51: usize;      // in scope 7 at ui/realloc-16687.rs:97:22: 97:26
                    scope 8 {
                        debug p0 => _49; // in scope 8 at ui/realloc-16687.rs:97:14: 97:16
                        debug p1 => _50; // in scope 8 at ui/realloc-16687.rs:97:18: 97:20
                        debug size => _51; // in scope 8 at ui/realloc-16687.rs:97:22: 97:26
                        let mut _72: std::ops::Range<usize>; // in scope 8 at ui/realloc-16687.rs:98:18: 98:25
                        scope 9 {
                            debug iter => _72; // in scope 9 at ui/realloc-16687.rs:98:18: 98:25
                            let _77: usize; // in scope 9 at ui/realloc-16687.rs:98:13: 98:14
                            scope 10 {
                                debug j => _77; // in scope 10 at ui/realloc-16687.rs:98:13: 98:14
                            }
                        }
                    }
                }
            }
            scope 11 {
                debug iter => _100;      // in scope 11 at ui/realloc-16687.rs:110:14: 110:26
                let _105: usize;         // in scope 11 at ui/realloc-16687.rs:110:9: 110:10
                scope 12 {
                    debug i => _105;     // in scope 12 at ui/realloc-16687.rs:110:9: 110:10
                    let _106: usize;     // in scope 12 at ui/realloc-16687.rs:111:13: 111:17
                    scope 13 {
                        debug size => _106; // in scope 13 at ui/realloc-16687.rs:111:13: 111:17
                    }
                }
            }
        }
    }

    bb0: {
        _2 = null_mut::<u8>() -> bb1;    // scope 0 at ui/realloc-16687.rs:21:27: 21:42
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:21:27: 21:40
                                         // + literal: Const { ty: fn() -> *mut u8 {null_mut::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = const 16_usize;             // scope 0 at ui/realloc-16687.rs:21:44: 21:49
        _1 = from_elem::<*mut u8>(move _2, move _3) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:47:36: 47:69
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:47:36: 47:58
                                         // + literal: Const { ty: fn(*mut u8, usize) -> Vec<*mut u8> {from_elem::<*mut u8>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &mut _1;                    // scope 1 at ui/realloc-16687.rs:22:24: 22:30
        _5 = <Vec<*mut u8> as DerefMut>::deref_mut(move _6) -> [return: bb3, unwind: bb64]; // scope 1 at ui/realloc-16687.rs:22:23: 22:30
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:22:23: 22:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<*mut u8>) -> &'a mut <Vec<*mut u8> as Deref>::Target {<Vec<*mut u8> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = &mut (*_5);                 // scope 1 at ui/realloc-16687.rs:22:18: 22:30
        _9 = const 8_usize;              // scope 2 at ui/realloc-16687.rs:89:17: 89:26
        _8 = std::ops::Range::<usize> { start: const 0_usize, end: move _9 }; // scope 2 at ui/realloc-16687.rs:89:14: 89:26
        _7 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _8) -> [return: bb4, unwind: bb64]; // scope 2 at ui/realloc-16687.rs:89:14: 89:26
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:89:14: 89:26
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = move _7;                   // scope 2 at ui/realloc-16687.rs:89:14: 89:26
        goto -> bb5;                     // scope 3 at ui/realloc-16687.rs:89:5: 93:6
    }

    bb5: {
        _13 = &mut _10;                  // scope 3 at ui/realloc-16687.rs:89:14: 89:26
        _12 = &mut (*_13);               // scope 3 at ui/realloc-16687.rs:89:14: 89:26
        _11 = <std::ops::Range<usize> as Iterator>::next(move _12) -> [return: bb6, unwind: bb64]; // scope 3 at ui/realloc-16687.rs:89:14: 89:26
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:89:14: 89:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = discriminant(_11);         // scope 3 at ui/realloc-16687.rs:89:14: 89:26
        switchInt(move _14) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 3 at ui/realloc-16687.rs:89:14: 89:26
    }

    bb7: {
        _15 = ((_11 as Some).0: usize);  // scope 3 at ui/realloc-16687.rs:89:9: 89:10
        _17 = _15;                       // scope 4 at ui/realloc-16687.rs:90:32: 90:33
        _16 = idx_to_size(move _17) -> [return: bb10, unwind: bb64]; // scope 4 at ui/realloc-16687.rs:90:20: 90:34
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:90:20: 90:31
                                         // + literal: Const { ty: fn(usize) -> usize {idx_to_size}, val: Value(<ZST>) }
    }

    bb8: {
        unreachable;                     // scope 3 at ui/realloc-16687.rs:89:14: 89:26
    }

    bb9: {
        _42 = const 8_usize;             // scope 2 at ui/realloc-16687.rs:96:17: 96:26
        _41 = std::ops::Range::<usize> { start: const 0_usize, end: move _42 }; // scope 2 at ui/realloc-16687.rs:96:14: 96:26
        _40 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _41) -> [return: bb22, unwind: bb64]; // scope 2 at ui/realloc-16687.rs:96:14: 96:26
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:96:14: 96:26
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb10: {
        _21 = _16;                       // scope 5 at ui/realloc-16687.rs:91:58: 91:62
        _22 = const 1_usize;             // scope 5 at ui/realloc-16687.rs:91:64: 91:69
        _20 = Layout::from_size_align(move _21, move _22) -> [return: bb11, unwind: bb64]; // scope 5 at ui/realloc-16687.rs:91:34: 91:70
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:91:34: 91:57
                                         // + literal: Const { ty: fn(usize, usize) -> Result<Layout, LayoutError> {Layout::from_size_align}, val: Value(<ZST>) }
    }

    bb11: {
        _19 = Result::<Layout, LayoutError>::unwrap(move _20) -> [return: bb12, unwind: bb64]; // scope 5 at ui/realloc-16687.rs:91:34: 91:79
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:91:71: 91:77
                                         // + literal: Const { ty: fn(Result<Layout, LayoutError>) -> Layout {Result::<Layout, LayoutError>::unwrap}, val: Value(<ZST>) }
    }

    bb12: {
        _18 = test_triangle::allocate(move _19) -> [return: bb13, unwind: bb64]; // scope 5 at ui/realloc-16687.rs:91:25: 91:80
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:91:25: 91:33
                                         // + literal: Const { ty: unsafe fn(Layout) -> *mut u8 {test_triangle::allocate}, val: Value(<ZST>) }
    }

    bb13: {
        _24 = _15;                       // scope 5 at ui/realloc-16687.rs:91:20: 91:21
        _25 = CheckedMul(const 2_usize, _24); // scope 5 at ui/realloc-16687.rs:91:16: 91:21
        assert(!move (_25.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _24) -> [success: bb14, unwind: bb64]; // scope 5 at ui/realloc-16687.rs:91:16: 91:21
    }

    bb14: {
        _23 = move (_25.0: usize);       // scope 5 at ui/realloc-16687.rs:91:16: 91:21
        _26 = Len((*_4));                // scope 5 at ui/realloc-16687.rs:91:9: 91:22
        _27 = Lt(_23, _26);              // scope 5 at ui/realloc-16687.rs:91:9: 91:22
        assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _23) -> [success: bb15, unwind: bb64]; // scope 5 at ui/realloc-16687.rs:91:9: 91:22
    }

    bb15: {
        (*_4)[_23] = move _18;           // scope 5 at ui/realloc-16687.rs:91:9: 91:80
        _31 = _16;                       // scope 5 at ui/realloc-16687.rs:92:62: 92:66
        _32 = const 1_usize;             // scope 5 at ui/realloc-16687.rs:92:68: 92:73
        _30 = Layout::from_size_align(move _31, move _32) -> [return: bb16, unwind: bb64]; // scope 5 at ui/realloc-16687.rs:92:38: 92:74
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:92:38: 92:61
                                         // + literal: Const { ty: fn(usize, usize) -> Result<Layout, LayoutError> {Layout::from_size_align}, val: Value(<ZST>) }
    }

    bb16: {
        _29 = Result::<Layout, LayoutError>::unwrap(move _30) -> [return: bb17, unwind: bb64]; // scope 5 at ui/realloc-16687.rs:92:38: 92:83
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:92:75: 92:81
                                         // + literal: Const { ty: fn(Result<Layout, LayoutError>) -> Layout {Result::<Layout, LayoutError>::unwrap}, val: Value(<ZST>) }
    }

    bb17: {
        _28 = test_triangle::allocate(move _29) -> [return: bb18, unwind: bb64]; // scope 5 at ui/realloc-16687.rs:92:29: 92:84
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:92:29: 92:37
                                         // + literal: Const { ty: unsafe fn(Layout) -> *mut u8 {test_triangle::allocate}, val: Value(<ZST>) }
    }

    bb18: {
        _35 = _15;                       // scope 5 at ui/realloc-16687.rs:92:20: 92:21
        _36 = CheckedMul(const 2_usize, _35); // scope 5 at ui/realloc-16687.rs:92:16: 92:21
        assert(!move (_36.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _35) -> [success: bb19, unwind: bb64]; // scope 5 at ui/realloc-16687.rs:92:16: 92:21
    }

    bb19: {
        _34 = move (_36.0: usize);       // scope 5 at ui/realloc-16687.rs:92:16: 92:21
        _37 = CheckedAdd(_34, const 1_usize); // scope 5 at ui/realloc-16687.rs:92:16: 92:25
        assert(!move (_37.1: bool), "attempt to compute `{} + {}`, which would overflow", move _34, const 1_usize) -> [success: bb20, unwind: bb64]; // scope 5 at ui/realloc-16687.rs:92:16: 92:25
    }

    bb20: {
        _33 = move (_37.0: usize);       // scope 5 at ui/realloc-16687.rs:92:16: 92:25
        _38 = Len((*_4));                // scope 5 at ui/realloc-16687.rs:92:9: 92:26
        _39 = Lt(_33, _38);              // scope 5 at ui/realloc-16687.rs:92:9: 92:26
        assert(move _39, "index out of bounds: the length is {} but the index is {}", move _38, _33) -> [success: bb21, unwind: bb64]; // scope 5 at ui/realloc-16687.rs:92:9: 92:26
    }

    bb21: {
        (*_4)[_33] = move _28;           // scope 5 at ui/realloc-16687.rs:92:9: 92:84
        goto -> bb5;                     // scope 3 at ui/realloc-16687.rs:89:5: 93:6
    }

    bb22: {
        _43 = move _40;                  // scope 2 at ui/realloc-16687.rs:96:14: 96:26
        goto -> bb23;                    // scope 6 at ui/realloc-16687.rs:96:5: 102:6
    }

    bb23: {
        _46 = &mut _43;                  // scope 6 at ui/realloc-16687.rs:96:14: 96:26
        _45 = &mut (*_46);               // scope 6 at ui/realloc-16687.rs:96:14: 96:26
        _44 = <std::ops::Range<usize> as Iterator>::next(move _45) -> [return: bb24, unwind: bb64]; // scope 6 at ui/realloc-16687.rs:96:14: 96:26
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:96:14: 96:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb24: {
        _47 = discriminant(_44);         // scope 6 at ui/realloc-16687.rs:96:14: 96:26
        switchInt(move _47) -> [0: bb27, 1: bb25, otherwise: bb26]; // scope 6 at ui/realloc-16687.rs:96:14: 96:26
    }

    bb25: {
        _48 = ((_44 as Some).0: usize);  // scope 6 at ui/realloc-16687.rs:96:9: 96:10
        _55 = _48;                       // scope 7 at ui/realloc-16687.rs:97:42: 97:43
        _56 = CheckedMul(const 2_usize, _55); // scope 7 at ui/realloc-16687.rs:97:38: 97:43
        assert(!move (_56.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _55) -> [success: bb28, unwind: bb64]; // scope 7 at ui/realloc-16687.rs:97:38: 97:43
    }

    bb26: {
        unreachable;                     // scope 6 at ui/realloc-16687.rs:96:14: 96:26
    }

    bb27: {
        _88 = &(*_4);                    // scope 2 at ui/realloc-16687.rs:104:18: 104:26
        _87 = _88;                       // scope 2 at ui/realloc-16687.rs:104:18: 104:26
        _86 = sanity_check(move _87) -> [return: bb41, unwind: bb64]; // scope 2 at ui/realloc-16687.rs:104:5: 104:27
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:104:5: 104:17
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a [*mut u8]) {sanity_check}, val: Value(<ZST>) }
    }

    bb28: {
        _54 = move (_56.0: usize);       // scope 7 at ui/realloc-16687.rs:97:38: 97:43
        _57 = Len((*_4));                // scope 7 at ui/realloc-16687.rs:97:31: 97:44
        _58 = Lt(_54, _57);              // scope 7 at ui/realloc-16687.rs:97:31: 97:44
        assert(move _58, "index out of bounds: the length is {} but the index is {}", move _57, _54) -> [success: bb29, unwind: bb64]; // scope 7 at ui/realloc-16687.rs:97:31: 97:44
    }

    bb29: {
        _53 = (*_4)[_54];                // scope 7 at ui/realloc-16687.rs:97:31: 97:44
        _62 = _48;                       // scope 7 at ui/realloc-16687.rs:97:57: 97:58
        _63 = CheckedMul(const 2_usize, _62); // scope 7 at ui/realloc-16687.rs:97:53: 97:58
        assert(!move (_63.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _62) -> [success: bb30, unwind: bb64]; // scope 7 at ui/realloc-16687.rs:97:53: 97:58
    }

    bb30: {
        _61 = move (_63.0: usize);       // scope 7 at ui/realloc-16687.rs:97:53: 97:58
        _64 = CheckedAdd(_61, const 1_usize); // scope 7 at ui/realloc-16687.rs:97:53: 97:62
        assert(!move (_64.1: bool), "attempt to compute `{} + {}`, which would overflow", move _61, const 1_usize) -> [success: bb31, unwind: bb64]; // scope 7 at ui/realloc-16687.rs:97:53: 97:62
    }

    bb31: {
        _60 = move (_64.0: usize);       // scope 7 at ui/realloc-16687.rs:97:53: 97:62
        _65 = Len((*_4));                // scope 7 at ui/realloc-16687.rs:97:46: 97:63
        _66 = Lt(_60, _65);              // scope 7 at ui/realloc-16687.rs:97:46: 97:63
        assert(move _66, "index out of bounds: the length is {} but the index is {}", move _65, _60) -> [success: bb32, unwind: bb64]; // scope 7 at ui/realloc-16687.rs:97:46: 97:63
    }

    bb32: {
        _59 = (*_4)[_60];                // scope 7 at ui/realloc-16687.rs:97:46: 97:63
        _68 = _48;                       // scope 7 at ui/realloc-16687.rs:97:77: 97:78
        _67 = idx_to_size(move _68) -> [return: bb33, unwind: bb64]; // scope 7 at ui/realloc-16687.rs:97:65: 97:79
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:97:65: 97:76
                                         // + literal: Const { ty: fn(usize) -> usize {idx_to_size}, val: Value(<ZST>) }
    }

    bb33: {
        _52 = (move _53, move _59, move _67); // scope 7 at ui/realloc-16687.rs:97:30: 97:80
        _49 = (_52.0: *mut u8);          // scope 7 at ui/realloc-16687.rs:97:14: 97:16
        _50 = (_52.1: *mut u8);          // scope 7 at ui/realloc-16687.rs:97:18: 97:20
        _51 = (_52.2: usize);            // scope 7 at ui/realloc-16687.rs:97:22: 97:26
        _71 = _51;                       // scope 8 at ui/realloc-16687.rs:98:21: 98:25
        _70 = std::ops::Range::<usize> { start: const 0_usize, end: move _71 }; // scope 8 at ui/realloc-16687.rs:98:18: 98:25
        _69 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _70) -> [return: bb34, unwind: bb64]; // scope 8 at ui/realloc-16687.rs:98:18: 98:25
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:98:18: 98:25
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb34: {
        _72 = move _69;                  // scope 8 at ui/realloc-16687.rs:98:18: 98:25
        goto -> bb35;                    // scope 9 at ui/realloc-16687.rs:98:9: 101:10
    }

    bb35: {
        _75 = &mut _72;                  // scope 9 at ui/realloc-16687.rs:98:18: 98:25
        _74 = &mut (*_75);               // scope 9 at ui/realloc-16687.rs:98:18: 98:25
        _73 = <std::ops::Range<usize> as Iterator>::next(move _74) -> [return: bb36, unwind: bb64]; // scope 9 at ui/realloc-16687.rs:98:18: 98:25
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:98:18: 98:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb36: {
        _76 = discriminant(_73);         // scope 9 at ui/realloc-16687.rs:98:18: 98:25
        switchInt(move _76) -> [0: bb23, 1: bb37, otherwise: bb38]; // scope 9 at ui/realloc-16687.rs:98:18: 98:25
    }

    bb37: {
        _77 = ((_73 as Some).0: usize);  // scope 9 at ui/realloc-16687.rs:98:13: 98:14
        _78 = _48;                       // scope 10 at ui/realloc-16687.rs:99:26: 99:27
        _80 = _49;                       // scope 10 at ui/realloc-16687.rs:99:14: 99:16
        _81 = _77;                       // scope 10 at ui/realloc-16687.rs:99:21: 99:22
        _79 = ptr::mut_ptr::<impl *mut u8>::add(move _80, move _81) -> [return: bb39, unwind: bb64]; // scope 10 at ui/realloc-16687.rs:99:14: 99:23
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:99:17: 99:20
                                         // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }
    }

    bb38: {
        unreachable;                     // scope 9 at ui/realloc-16687.rs:98:18: 98:25
    }

    bb39: {
        (*_79) = move _78 as u8 (IntToInt); // scope 10 at ui/realloc-16687.rs:99:13: 99:33
        _82 = _48;                       // scope 10 at ui/realloc-16687.rs:100:26: 100:27
        _84 = _50;                       // scope 10 at ui/realloc-16687.rs:100:14: 100:16
        _85 = _77;                       // scope 10 at ui/realloc-16687.rs:100:21: 100:22
        _83 = ptr::mut_ptr::<impl *mut u8>::add(move _84, move _85) -> [return: bb40, unwind: bb64]; // scope 10 at ui/realloc-16687.rs:100:14: 100:23
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:100:17: 100:20
                                         // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }
    }

    bb40: {
        (*_83) = move _82 as u8 (IntToInt); // scope 10 at ui/realloc-16687.rs:100:13: 100:33
        goto -> bb35;                    // scope 9 at ui/realloc-16687.rs:98:9: 101:10
    }

    bb41: {
        _90 = &mut (*_4);                // scope 2 at ui/realloc-16687.rs:105:12: 105:18
        _89 = test_1(move _90) -> [return: bb42, unwind: bb64]; // scope 2 at ui/realloc-16687.rs:105:5: 105:19
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:105:5: 105:11
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut [*mut u8]) {test_1}, val: Value(<ZST>) }
    }

    bb42: {
        _92 = &mut (*_4);                // scope 2 at ui/realloc-16687.rs:106:12: 106:18
        _91 = test_2(move _92) -> [return: bb43, unwind: bb64]; // scope 2 at ui/realloc-16687.rs:106:5: 106:19
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:106:5: 106:11
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut [*mut u8]) {test_2}, val: Value(<ZST>) }
    }

    bb43: {
        _94 = &mut (*_4);                // scope 2 at ui/realloc-16687.rs:107:12: 107:18
        _93 = test_3(move _94) -> [return: bb44, unwind: bb64]; // scope 2 at ui/realloc-16687.rs:107:5: 107:19
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:107:5: 107:11
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut [*mut u8]) {test_3}, val: Value(<ZST>) }
    }

    bb44: {
        _96 = &mut (*_4);                // scope 2 at ui/realloc-16687.rs:108:12: 108:18
        _95 = test_4(move _96) -> [return: bb45, unwind: bb64]; // scope 2 at ui/realloc-16687.rs:108:5: 108:19
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:108:5: 108:11
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut [*mut u8]) {test_4}, val: Value(<ZST>) }
    }

    bb45: {
        _99 = const 8_usize;             // scope 2 at ui/realloc-16687.rs:110:17: 110:26
        _98 = std::ops::Range::<usize> { start: const 0_usize, end: move _99 }; // scope 2 at ui/realloc-16687.rs:110:14: 110:26
        _97 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _98) -> [return: bb46, unwind: bb64]; // scope 2 at ui/realloc-16687.rs:110:14: 110:26
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:110:14: 110:26
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb46: {
        _100 = move _97;                 // scope 2 at ui/realloc-16687.rs:110:14: 110:26
        goto -> bb47;                    // scope 11 at ui/realloc-16687.rs:110:5: 114:6
    }

    bb47: {
        _103 = &mut _100;                // scope 11 at ui/realloc-16687.rs:110:14: 110:26
        _102 = &mut (*_103);             // scope 11 at ui/realloc-16687.rs:110:14: 110:26
        _101 = <std::ops::Range<usize> as Iterator>::next(move _102) -> [return: bb48, unwind: bb64]; // scope 11 at ui/realloc-16687.rs:110:14: 110:26
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:110:14: 110:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb48: {
        _104 = discriminant(_101);       // scope 11 at ui/realloc-16687.rs:110:14: 110:26
        switchInt(move _104) -> [0: bb51, 1: bb49, otherwise: bb50]; // scope 11 at ui/realloc-16687.rs:110:14: 110:26
    }

    bb49: {
        _105 = ((_101 as Some).0: usize); // scope 11 at ui/realloc-16687.rs:110:9: 110:10
        _107 = _105;                     // scope 12 at ui/realloc-16687.rs:111:32: 111:33
        _106 = idx_to_size(move _107) -> [return: bb52, unwind: bb64]; // scope 12 at ui/realloc-16687.rs:111:20: 111:34
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:111:20: 111:31
                                         // + literal: Const { ty: fn(usize) -> usize {idx_to_size}, val: Value(<ZST>) }
    }

    bb50: {
        unreachable;                     // scope 11 at ui/realloc-16687.rs:110:14: 110:26
    }

    bb51: {
        _0 = const true;                 // scope 2 at ui/realloc-16687.rs:116:12: 116:16
        drop(_1) -> bb63;                // scope 0 at ui/realloc-16687.rs:188:1: 188:2
    }

    bb52: {
        _111 = _105;                     // scope 13 at ui/realloc-16687.rs:112:31: 112:32
        _112 = CheckedMul(const 2_usize, _111); // scope 13 at ui/realloc-16687.rs:112:27: 112:32
        assert(!move (_112.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _111) -> [success: bb53, unwind: bb64]; // scope 13 at ui/realloc-16687.rs:112:27: 112:32
    }

    bb53: {
        _110 = move (_112.0: usize);     // scope 13 at ui/realloc-16687.rs:112:27: 112:32
        _113 = Len((*_4));               // scope 13 at ui/realloc-16687.rs:112:20: 112:33
        _114 = Lt(_110, _113);           // scope 13 at ui/realloc-16687.rs:112:20: 112:33
        assert(move _114, "index out of bounds: the length is {} but the index is {}", move _113, _110) -> [success: bb54, unwind: bb64]; // scope 13 at ui/realloc-16687.rs:112:20: 112:33
    }

    bb54: {
        _109 = (*_4)[_110];              // scope 13 at ui/realloc-16687.rs:112:20: 112:33
        _117 = _106;                     // scope 13 at ui/realloc-16687.rs:112:59: 112:63
        _118 = const 1_usize;            // scope 13 at ui/realloc-16687.rs:112:65: 112:70
        _116 = Layout::from_size_align(move _117, move _118) -> [return: bb55, unwind: bb64]; // scope 13 at ui/realloc-16687.rs:112:35: 112:71
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:112:35: 112:58
                                         // + literal: Const { ty: fn(usize, usize) -> Result<Layout, LayoutError> {Layout::from_size_align}, val: Value(<ZST>) }
    }

    bb55: {
        _115 = Result::<Layout, LayoutError>::unwrap(move _116) -> [return: bb56, unwind: bb64]; // scope 13 at ui/realloc-16687.rs:112:35: 112:80
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:112:72: 112:78
                                         // + literal: Const { ty: fn(Result<Layout, LayoutError>) -> Layout {Result::<Layout, LayoutError>::unwrap}, val: Value(<ZST>) }
    }

    bb56: {
        _108 = test_triangle::deallocate(move _109, move _115) -> [return: bb57, unwind: bb64]; // scope 13 at ui/realloc-16687.rs:112:9: 112:81
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:112:9: 112:19
                                         // + literal: Const { ty: unsafe fn(*mut u8, Layout) {test_triangle::deallocate}, val: Value(<ZST>) }
    }

    bb57: {
        _123 = _105;                     // scope 13 at ui/realloc-16687.rs:113:31: 113:32
        _124 = CheckedMul(const 2_usize, _123); // scope 13 at ui/realloc-16687.rs:113:27: 113:32
        assert(!move (_124.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _123) -> [success: bb58, unwind: bb64]; // scope 13 at ui/realloc-16687.rs:113:27: 113:32
    }

    bb58: {
        _122 = move (_124.0: usize);     // scope 13 at ui/realloc-16687.rs:113:27: 113:32
        _125 = CheckedAdd(_122, const 1_usize); // scope 13 at ui/realloc-16687.rs:113:27: 113:36
        assert(!move (_125.1: bool), "attempt to compute `{} + {}`, which would overflow", move _122, const 1_usize) -> [success: bb59, unwind: bb64]; // scope 13 at ui/realloc-16687.rs:113:27: 113:36
    }

    bb59: {
        _121 = move (_125.0: usize);     // scope 13 at ui/realloc-16687.rs:113:27: 113:36
        _126 = Len((*_4));               // scope 13 at ui/realloc-16687.rs:113:20: 113:37
        _127 = Lt(_121, _126);           // scope 13 at ui/realloc-16687.rs:113:20: 113:37
        assert(move _127, "index out of bounds: the length is {} but the index is {}", move _126, _121) -> [success: bb60, unwind: bb64]; // scope 13 at ui/realloc-16687.rs:113:20: 113:37
    }

    bb60: {
        _120 = (*_4)[_121];              // scope 13 at ui/realloc-16687.rs:113:20: 113:37
        _130 = _106;                     // scope 13 at ui/realloc-16687.rs:113:63: 113:67
        _131 = const 1_usize;            // scope 13 at ui/realloc-16687.rs:113:69: 113:74
        _129 = Layout::from_size_align(move _130, move _131) -> [return: bb61, unwind: bb64]; // scope 13 at ui/realloc-16687.rs:113:39: 113:75
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:113:39: 113:62
                                         // + literal: Const { ty: fn(usize, usize) -> Result<Layout, LayoutError> {Layout::from_size_align}, val: Value(<ZST>) }
    }

    bb61: {
        _128 = Result::<Layout, LayoutError>::unwrap(move _129) -> [return: bb62, unwind: bb64]; // scope 13 at ui/realloc-16687.rs:113:39: 113:84
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:113:76: 113:82
                                         // + literal: Const { ty: fn(Result<Layout, LayoutError>) -> Layout {Result::<Layout, LayoutError>::unwrap}, val: Value(<ZST>) }
    }

    bb62: {
        _119 = test_triangle::deallocate(move _120, move _128) -> [return: bb66, unwind: bb64]; // scope 13 at ui/realloc-16687.rs:113:9: 113:85
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:113:9: 113:19
                                         // + literal: Const { ty: unsafe fn(*mut u8, Layout) {test_triangle::deallocate}, val: Value(<ZST>) }
    }

    bb63: {
        return;                          // scope 0 at ui/realloc-16687.rs:188:2: 188:2
    }

    bb64 (cleanup): {
        drop(_1) -> bb65;                // scope 0 at ui/realloc-16687.rs:188:1: 188:2
    }

    bb65 (cleanup): {
        resume;                          // scope 0 at ui/realloc-16687.rs:19:1: 188:2
    }

    bb66: {
        goto -> bb47;                    // scope 13 at ui/realloc-16687.rs:113:9: 113:85
    }
}

static COUNT: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/realloc-16687.rs:20:19: 20:24

    bb0: {
        _0 = const 16_usize;             // scope 0 at ui/realloc-16687.rs:20:27: 20:29
        return;                          // scope 0 at ui/realloc-16687.rs:20:5: 20:30
    }
}

static ALIGN: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/realloc-16687.rs:23:19: 23:24

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/realloc-16687.rs:23:27: 23:28
        return;                          // scope 0 at ui/realloc-16687.rs:23:5: 23:29
    }
}

fn sanity_check(_1: &[*mut u8]) -> () {
    debug ascend => _1;                  // in scope 0 at ui/realloc-16687.rs:28:28: 28:34
    let mut _0: ();                      // return place in scope 0 at ui/realloc-16687.rs:28:48: 28:48
    let mut _2: std::ops::Range<usize>;  // in scope 0 at ui/realloc-16687.rs:29:18: 29:30
    let mut _3: std::ops::Range<usize>;  // in scope 0 at ui/realloc-16687.rs:29:18: 29:30
    let mut _4: usize;                   // in scope 0 at ui/realloc-16687.rs:29:21: 29:30
    let mut _5: std::ops::Range<usize>;  // in scope 0 at ui/realloc-16687.rs:29:18: 29:30
    let mut _6: std::option::Option<usize>; // in scope 0 at ui/realloc-16687.rs:29:18: 29:30
    let mut _7: &mut std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:29:18: 29:30
    let mut _8: &mut std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:29:18: 29:30
    let mut _9: isize;                   // in scope 0 at ui/realloc-16687.rs:29:9: 35:10
    let mut _14: (*mut u8, *mut u8, usize); // in scope 0 at ui/realloc-16687.rs:30:34: 30:84
    let mut _15: *mut u8;                // in scope 0 at ui/realloc-16687.rs:30:35: 30:48
    let _16: usize;                      // in scope 0 at ui/realloc-16687.rs:30:42: 30:47
    let mut _17: usize;                  // in scope 0 at ui/realloc-16687.rs:30:46: 30:47
    let mut _18: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:30:42: 30:47
    let mut _19: usize;                  // in scope 0 at ui/realloc-16687.rs:30:35: 30:48
    let mut _20: bool;                   // in scope 0 at ui/realloc-16687.rs:30:35: 30:48
    let mut _21: *mut u8;                // in scope 0 at ui/realloc-16687.rs:30:50: 30:67
    let _22: usize;                      // in scope 0 at ui/realloc-16687.rs:30:57: 30:66
    let mut _23: usize;                  // in scope 0 at ui/realloc-16687.rs:30:57: 30:62
    let mut _24: usize;                  // in scope 0 at ui/realloc-16687.rs:30:61: 30:62
    let mut _25: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:30:57: 30:62
    let mut _26: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:30:57: 30:66
    let mut _27: usize;                  // in scope 0 at ui/realloc-16687.rs:30:50: 30:67
    let mut _28: bool;                   // in scope 0 at ui/realloc-16687.rs:30:50: 30:67
    let mut _29: usize;                  // in scope 0 at ui/realloc-16687.rs:30:69: 30:83
    let mut _30: usize;                  // in scope 0 at ui/realloc-16687.rs:30:81: 30:82
    let mut _31: std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:31:22: 31:29
    let mut _32: std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:31:22: 31:29
    let mut _33: usize;                  // in scope 0 at ui/realloc-16687.rs:31:25: 31:29
    let mut _35: std::option::Option<usize>; // in scope 0 at ui/realloc-16687.rs:31:22: 31:29
    let mut _36: &mut std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:31:22: 31:29
    let mut _37: &mut std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:31:22: 31:29
    let mut _38: isize;                  // in scope 0 at ui/realloc-16687.rs:31:13: 34:14
    let mut _40: (&u8, &u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _41: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _42: *mut u8;                    // in scope 0 at ui/realloc-16687.rs:32:29: 32:38
    let mut _43: *mut u8;                // in scope 0 at ui/realloc-16687.rs:32:29: 32:31
    let mut _44: usize;                  // in scope 0 at ui/realloc-16687.rs:32:36: 32:37
    let mut _45: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _46: u8;                         // in scope 0 at ui/realloc-16687.rs:32:40: 32:47
    let mut _47: usize;                  // in scope 0 at ui/realloc-16687.rs:32:40: 32:41
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _51: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _52: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _53: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _55: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _56: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _57: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _58: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _59: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _60: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _62: (&u8, &u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _63: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _64: *mut u8;                    // in scope 0 at ui/realloc-16687.rs:33:29: 33:38
    let mut _65: *mut u8;                // in scope 0 at ui/realloc-16687.rs:33:29: 33:31
    let mut _66: usize;                  // in scope 0 at ui/realloc-16687.rs:33:36: 33:37
    let mut _67: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _68: u8;                         // in scope 0 at ui/realloc-16687.rs:33:40: 33:47
    let mut _69: usize;                  // in scope 0 at ui/realloc-16687.rs:33:40: 33:41
    let mut _72: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _73: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _74: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _75: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _77: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _78: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _79: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _80: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _81: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _82: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _83: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug iter => _5;                // in scope 1 at ui/realloc-16687.rs:29:18: 29:30
        let _10: usize;                  // in scope 1 at ui/realloc-16687.rs:29:13: 29:14
        scope 2 {
            debug i => _10;              // in scope 2 at ui/realloc-16687.rs:29:13: 29:14
            let _11: *mut u8;            // in scope 2 at ui/realloc-16687.rs:30:18: 30:20
            let _12: *mut u8;            // in scope 2 at ui/realloc-16687.rs:30:22: 30:24
            let _13: usize;              // in scope 2 at ui/realloc-16687.rs:30:26: 30:30
            scope 3 {
                debug p0 => _11;         // in scope 3 at ui/realloc-16687.rs:30:18: 30:20
                debug p1 => _12;         // in scope 3 at ui/realloc-16687.rs:30:22: 30:24
                debug size => _13;       // in scope 3 at ui/realloc-16687.rs:30:26: 30:30
                let mut _34: std::ops::Range<usize>; // in scope 3 at ui/realloc-16687.rs:31:22: 31:29
                scope 4 {
                    debug iter => _34;   // in scope 4 at ui/realloc-16687.rs:31:22: 31:29
                    let _39: usize;      // in scope 4 at ui/realloc-16687.rs:31:17: 31:18
                    scope 5 {
                        debug j => _39;  // in scope 5 at ui/realloc-16687.rs:31:17: 31:18
                        let _48: &u8;    // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _49: &u8;    // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _70: &u8;    // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _71: &u8;    // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        scope 6 {
                            debug left_val => _48; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _49; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _54: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 7 {
                                debug kind => _54; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                        scope 8 {
                            debug left_val => _70; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _71; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _76: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 9 {
                                debug kind => _76; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _4 = const 8_usize;              // scope 0 at ui/realloc-16687.rs:29:21: 29:30
        _3 = std::ops::Range::<usize> { start: const 0_usize, end: move _4 }; // scope 0 at ui/realloc-16687.rs:29:18: 29:30
        _2 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _3) -> bb1; // scope 0 at ui/realloc-16687.rs:29:18: 29:30
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:29:18: 29:30
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/realloc-16687.rs:29:18: 29:30
        goto -> bb2;                     // scope 1 at ui/realloc-16687.rs:29:9: 35:10
    }

    bb2: {
        _8 = &mut _5;                    // scope 1 at ui/realloc-16687.rs:29:18: 29:30
        _7 = &mut (*_8);                 // scope 1 at ui/realloc-16687.rs:29:18: 29:30
        _6 = <std::ops::Range<usize> as Iterator>::next(move _7) -> bb3; // scope 1 at ui/realloc-16687.rs:29:18: 29:30
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:29:18: 29:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = discriminant(_6);           // scope 1 at ui/realloc-16687.rs:29:18: 29:30
        switchInt(move _9) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/realloc-16687.rs:29:18: 29:30
    }

    bb4: {
        _10 = ((_6 as Some).0: usize);   // scope 1 at ui/realloc-16687.rs:29:13: 29:14
        _17 = _10;                       // scope 2 at ui/realloc-16687.rs:30:46: 30:47
        _18 = CheckedMul(const 2_usize, _17); // scope 2 at ui/realloc-16687.rs:30:42: 30:47
        assert(!move (_18.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _17) -> bb7; // scope 2 at ui/realloc-16687.rs:30:42: 30:47
    }

    bb5: {
        unreachable;                     // scope 1 at ui/realloc-16687.rs:29:18: 29:30
    }

    bb6: {
        return;                          // scope 0 at ui/realloc-16687.rs:36:6: 36:6
    }

    bb7: {
        _16 = move (_18.0: usize);       // scope 2 at ui/realloc-16687.rs:30:42: 30:47
        _19 = Len((*_1));                // scope 2 at ui/realloc-16687.rs:30:35: 30:48
        _20 = Lt(_16, _19);              // scope 2 at ui/realloc-16687.rs:30:35: 30:48
        assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _16) -> bb8; // scope 2 at ui/realloc-16687.rs:30:35: 30:48
    }

    bb8: {
        _15 = (*_1)[_16];                // scope 2 at ui/realloc-16687.rs:30:35: 30:48
        _24 = _10;                       // scope 2 at ui/realloc-16687.rs:30:61: 30:62
        _25 = CheckedMul(const 2_usize, _24); // scope 2 at ui/realloc-16687.rs:30:57: 30:62
        assert(!move (_25.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _24) -> bb9; // scope 2 at ui/realloc-16687.rs:30:57: 30:62
    }

    bb9: {
        _23 = move (_25.0: usize);       // scope 2 at ui/realloc-16687.rs:30:57: 30:62
        _26 = CheckedAdd(_23, const 1_usize); // scope 2 at ui/realloc-16687.rs:30:57: 30:66
        assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", move _23, const 1_usize) -> bb10; // scope 2 at ui/realloc-16687.rs:30:57: 30:66
    }

    bb10: {
        _22 = move (_26.0: usize);       // scope 2 at ui/realloc-16687.rs:30:57: 30:66
        _27 = Len((*_1));                // scope 2 at ui/realloc-16687.rs:30:50: 30:67
        _28 = Lt(_22, _27);              // scope 2 at ui/realloc-16687.rs:30:50: 30:67
        assert(move _28, "index out of bounds: the length is {} but the index is {}", move _27, _22) -> bb11; // scope 2 at ui/realloc-16687.rs:30:50: 30:67
    }

    bb11: {
        _21 = (*_1)[_22];                // scope 2 at ui/realloc-16687.rs:30:50: 30:67
        _30 = _10;                       // scope 2 at ui/realloc-16687.rs:30:81: 30:82
        _29 = idx_to_size(move _30) -> bb12; // scope 2 at ui/realloc-16687.rs:30:69: 30:83
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:30:69: 30:80
                                         // + literal: Const { ty: fn(usize) -> usize {idx_to_size}, val: Value(<ZST>) }
    }

    bb12: {
        _14 = (move _15, move _21, move _29); // scope 2 at ui/realloc-16687.rs:30:34: 30:84
        _11 = (_14.0: *mut u8);          // scope 2 at ui/realloc-16687.rs:30:18: 30:20
        _12 = (_14.1: *mut u8);          // scope 2 at ui/realloc-16687.rs:30:22: 30:24
        _13 = (_14.2: usize);            // scope 2 at ui/realloc-16687.rs:30:26: 30:30
        _33 = _13;                       // scope 3 at ui/realloc-16687.rs:31:25: 31:29
        _32 = std::ops::Range::<usize> { start: const 0_usize, end: move _33 }; // scope 3 at ui/realloc-16687.rs:31:22: 31:29
        _31 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _32) -> bb13; // scope 3 at ui/realloc-16687.rs:31:22: 31:29
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:31:22: 31:29
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb13: {
        _34 = move _31;                  // scope 3 at ui/realloc-16687.rs:31:22: 31:29
        goto -> bb14;                    // scope 4 at ui/realloc-16687.rs:31:13: 34:14
    }

    bb14: {
        _37 = &mut _34;                  // scope 4 at ui/realloc-16687.rs:31:22: 31:29
        _36 = &mut (*_37);               // scope 4 at ui/realloc-16687.rs:31:22: 31:29
        _35 = <std::ops::Range<usize> as Iterator>::next(move _36) -> bb15; // scope 4 at ui/realloc-16687.rs:31:22: 31:29
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:31:22: 31:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb15: {
        _38 = discriminant(_35);         // scope 4 at ui/realloc-16687.rs:31:22: 31:29
        switchInt(move _38) -> [0: bb2, 1: bb16, otherwise: bb17]; // scope 4 at ui/realloc-16687.rs:31:22: 31:29
    }

    bb16: {
        _39 = ((_35 as Some).0: usize);  // scope 4 at ui/realloc-16687.rs:31:17: 31:18
        _43 = _11;                       // scope 5 at ui/realloc-16687.rs:32:29: 32:31
        _44 = _39;                       // scope 5 at ui/realloc-16687.rs:32:36: 32:37
        _42 = ptr::mut_ptr::<impl *mut u8>::add(move _43, move _44) -> bb18; // scope 5 at ui/realloc-16687.rs:32:29: 32:38
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:32:32: 32:35
                                         // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }
    }

    bb17: {
        unreachable;                     // scope 4 at ui/realloc-16687.rs:31:22: 31:29
    }

    bb18: {
        _41 = &(*_42);                   // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _47 = _10;                       // scope 5 at ui/realloc-16687.rs:32:40: 32:41
        _46 = move _47 as u8 (IntToInt); // scope 5 at ui/realloc-16687.rs:32:40: 32:47
        _45 = &_46;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _40 = (move _41, move _45);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _48 = (_40.0: &u8);              // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _49 = (_40.1: &u8);              // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _52 = (*_48);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _53 = (*_49);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _51 = Eq(move _52, move _53);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _50 = Not(move _51);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _50) -> [0: bb20, otherwise: bb19]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _54 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _56 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = _48;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _58;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _49;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _59 = _60;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _55 = core::panicking::assert_failed::<u8, u8>(move _56, move _57, move _59, move _61); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb20: {
        _65 = _12;                       // scope 5 at ui/realloc-16687.rs:33:29: 33:31
        _66 = _39;                       // scope 5 at ui/realloc-16687.rs:33:36: 33:37
        _64 = ptr::mut_ptr::<impl *mut u8>::add(move _65, move _66) -> bb21; // scope 5 at ui/realloc-16687.rs:33:29: 33:38
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:33:32: 33:35
                                         // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }
    }

    bb21: {
        _63 = &(*_64);                   // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _69 = _10;                       // scope 5 at ui/realloc-16687.rs:33:40: 33:41
        _68 = move _69 as u8 (IntToInt); // scope 5 at ui/realloc-16687.rs:33:40: 33:47
        _67 = &_68;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _62 = (move _63, move _67);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _70 = (_62.0: &u8);              // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _71 = (_62.1: &u8);              // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _74 = (*_70);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _75 = (*_71);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _73 = Eq(move _74, move _75);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _72 = Not(move _73);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _72) -> [0: bb14, otherwise: bb22]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb22: {
        _76 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _78 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _80 = _70;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _79 = _80;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _82 = _71;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _81 = _82;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _83 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _77 = core::panicking::assert_failed::<u8, u8>(move _78, move _79, move _81, move _83); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }
}

static PRINT: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/realloc-16687.rs:38:19: 38:23

    bb0: {
        _0 = const false;                // scope 0 at ui/realloc-16687.rs:38:26: 38:31
        return;                          // scope 0 at ui/realloc-16687.rs:38:5: 38:32
    }
}

fn test_triangle::allocate(_1: Layout) -> *mut u8 {
    debug layout => _1;                  // in scope 0 at ui/realloc-16687.rs:40:24: 40:30
    let mut _0: *mut u8;                 // return place in scope 0 at ui/realloc-16687.rs:40:43: 40:50
    let _2: std::ptr::NonNull<[u8]>;     // in scope 0 at ui/realloc-16687.rs:45:13: 45:16
    let mut _3: std::result::Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError>; // in scope 0 at ui/realloc-16687.rs:45:19: 45:42
    let mut _4: &std::alloc::Global;     // in scope 0 at ui/realloc-16687.rs:45:19: 45:42
    let mut _5: std::alloc::Layout;      // in scope 0 at ui/realloc-16687.rs:45:35: 45:41
    let mut _6: [closure@ui/realloc-16687.rs:45:58: 45:61]; // in scope 0 at ui/realloc-16687.rs:45:58: 45:88
    let mut _7: &std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:45:58: 45:88
    let mut _8: std::ptr::NonNull<[u8]>; // in scope 0 at ui/realloc-16687.rs:51:9: 51:12
    let mut _9: &std::alloc::Global;     // in scope 0 at ui/realloc-16687.rs:45:19: 45:42
    scope 1 {
        debug ptr => _2;                 // in scope 1 at ui/realloc-16687.rs:45:13: 45:16
    }

    bb0: {
        _9 = const _;                    // scope 0 at ui/realloc-16687.rs:45:19: 45:42
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:45:19: 45:42
                                         // + literal: Const { ty: &std::alloc::Global, val: Unevaluated(test_triangle::allocate, [], Some(promoted[1])) }
        _4 = _9;                         // scope 0 at ui/realloc-16687.rs:45:19: 45:42
        _5 = _1;                         // scope 0 at ui/realloc-16687.rs:45:35: 45:41
        _3 = <std::alloc::Global as Allocator>::allocate(move _4, move _5) -> bb1; // scope 0 at ui/realloc-16687.rs:45:19: 45:42
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:45:26: 45:34
                                         // + literal: Const { ty: for<'a> fn(&'a std::alloc::Global, Layout) -> Result<NonNull<[u8]>, std::alloc::AllocError> {<std::alloc::Global as Allocator>::allocate}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_1;                        // scope 0 at ui/realloc-16687.rs:45:58: 45:88
        _6 = [closure@ui/realloc-16687.rs:45:58: 45:61] { layout: move _7 }; // scope 0 at ui/realloc-16687.rs:45:58: 45:88
                                         // closure
                                         // + def_id: DefId(0:18 ~ realloc_16687[35db]::test_triangle::allocate::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::alloc::AllocError,)) -> std::ptr::NonNull<[u8]>,
                                         //     (&std::alloc::Layout,),
                                         // ]
        _2 = Result::<NonNull<[u8]>, std::alloc::AllocError>::unwrap_or_else::<[closure@ui/realloc-16687.rs:45:58: 45:61]>(move _3, move _6) -> bb2; // scope 0 at ui/realloc-16687.rs:45:19: 45:89
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:45:43: 45:57
                                         // + literal: Const { ty: fn(Result<NonNull<[u8]>, std::alloc::AllocError>, [closure@ui/realloc-16687.rs:45:58: 45:61]) -> NonNull<[u8]> {Result::<NonNull<[u8]>, std::alloc::AllocError>::unwrap_or_else::<[closure@ui/realloc-16687.rs:45:58: 45:61]>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _2;                         // scope 1 at ui/realloc-16687.rs:51:9: 51:12
        _0 = NonNull::<[u8]>::as_mut_ptr(move _8) -> bb3; // scope 1 at ui/realloc-16687.rs:51:9: 51:25
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:51:13: 51:23
                                         // + literal: Const { ty: fn(NonNull<[u8]>) -> *mut u8 {NonNull::<[u8]>::as_mut_ptr}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/realloc-16687.rs:52:6: 52:6
    }
}

promoted[0] in test_triangle::allocate: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/realloc-16687.rs:48:22: 48:45
    let mut _1: [&str; 3];               // in scope 0 at ui/realloc-16687.rs:48:22: 48:45

    bb0: {
        _1 = [const "allocate(", const ") = ", const "\n"]; // scope 0 at ui/realloc-16687.rs:48:22: 48:45
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:48:22: 48:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:48:22: 48:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:48:22: 48:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/realloc-16687.rs:48:22: 48:45
        return;                          // scope 0 at ui/realloc-16687.rs:48:22: 48:45
    }
}

promoted[1] in test_triangle::allocate: &std::alloc::Global = {
    let mut _0: &std::alloc::Global;     // return place in scope 0 at ui/realloc-16687.rs:45:19: 45:42
    let mut _1: std::alloc::Global;      // in scope 0 at ui/realloc-16687.rs:45:19: 45:25

    bb0: {
        _1 = std::alloc::Global;         // scope 0 at ui/realloc-16687.rs:45:19: 45:25
        _0 = &_1;                        // scope 0 at ui/realloc-16687.rs:45:19: 45:42
        return;                          // scope 0 at ui/realloc-16687.rs:45:19: 45:42
    }
}

promoted[2] in test_triangle::allocate: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/realloc-16687.rs:42:22: 42:38
    let mut _1: [&str; 2];               // in scope 0 at ui/realloc-16687.rs:42:22: 42:38

    bb0: {
        _1 = [const "allocate(", const ")\n"]; // scope 0 at ui/realloc-16687.rs:42:22: 42:38
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:42:22: 42:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:42:22: 42:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/realloc-16687.rs:42:22: 42:38
        return;                          // scope 0 at ui/realloc-16687.rs:42:22: 42:38
    }
}

fn test_triangle::allocate::{closure#0}(_1: [closure@ui/realloc-16687.rs:45:58: 45:61], _2: std::alloc::AllocError) -> NonNull<[u8]> {
    debug layout => (*(_1.0: &std::alloc::Layout)); // in scope 0 at ui/realloc-16687.rs:40:24: 40:30
    let mut _0: std::ptr::NonNull<[u8]>; // return place in scope 0 at ui/realloc-16687.rs:45:62: 45:62
    let mut _3: !;                       // in scope 0 at ui/realloc-16687.rs:45:62: 45:88
    let mut _4: std::alloc::Layout;      // in scope 0 at ui/realloc-16687.rs:45:81: 45:87
    let mut _5: &std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:45:58: 45:88

    bb0: {
        _5 = deref_copy (_1.0: &std::alloc::Layout); // scope 0 at ui/realloc-16687.rs:45:81: 45:87
        _4 = (*_5);                      // scope 0 at ui/realloc-16687.rs:45:81: 45:87
        _3 = handle_alloc_error(move _4); // scope 0 at ui/realloc-16687.rs:45:62: 45:88
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:45:62: 45:80
                                         // + literal: Const { ty: fn(Layout) -> ! {handle_alloc_error}, val: Value(<ZST>) }
    }
}

fn test_triangle::deallocate(_1: *mut u8, _2: Layout) -> () {
    debug ptr => _1;                     // in scope 0 at ui/realloc-16687.rs:54:26: 54:29
    debug layout => _2;                  // in scope 0 at ui/realloc-16687.rs:54:40: 54:46
    let mut _0: ();                      // return place in scope 0 at ui/realloc-16687.rs:54:56: 54:56
    let _3: ();                          // in scope 0 at ui/realloc-16687.rs:59:9: 59:63
    let mut _4: &std::alloc::Global;     // in scope 0 at ui/realloc-16687.rs:59:9: 59:63
    let mut _5: std::ptr::NonNull<u8>;   // in scope 0 at ui/realloc-16687.rs:59:27: 59:54
    let mut _6: *mut u8;                 // in scope 0 at ui/realloc-16687.rs:59:50: 59:53
    let mut _7: std::alloc::Layout;      // in scope 0 at ui/realloc-16687.rs:59:56: 59:62
    let mut _8: &std::alloc::Global;     // in scope 0 at ui/realloc-16687.rs:59:9: 59:63

    bb0: {
        _8 = const _;                    // scope 0 at ui/realloc-16687.rs:59:9: 59:63
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:59:9: 59:63
                                         // + literal: Const { ty: &std::alloc::Global, val: Unevaluated(test_triangle::deallocate, [], Some(promoted[0])) }
        _4 = _8;                         // scope 0 at ui/realloc-16687.rs:59:9: 59:63
        _6 = _1;                         // scope 0 at ui/realloc-16687.rs:59:50: 59:53
        _5 = NonNull::<u8>::new_unchecked(move _6) -> bb1; // scope 0 at ui/realloc-16687.rs:59:27: 59:54
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:59:27: 59:49
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: unsafe fn(*mut u8) -> NonNull<u8> {NonNull::<u8>::new_unchecked}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _2;                         // scope 0 at ui/realloc-16687.rs:59:56: 59:62
        _3 = <std::alloc::Global as Allocator>::deallocate(move _4, move _5, move _7) -> bb2; // scope 0 at ui/realloc-16687.rs:59:9: 59:63
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:59:16: 59:26
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a std::alloc::Global, NonNull<u8>, Layout) {<std::alloc::Global as Allocator>::deallocate}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/realloc-16687.rs:60:6: 60:6
    }
}

promoted[0] in test_triangle::deallocate: &std::alloc::Global = {
    let mut _0: &std::alloc::Global;     // return place in scope 0 at ui/realloc-16687.rs:59:9: 59:63
    let mut _1: std::alloc::Global;      // in scope 0 at ui/realloc-16687.rs:59:9: 59:15

    bb0: {
        _1 = std::alloc::Global;         // scope 0 at ui/realloc-16687.rs:59:9: 59:15
        _0 = &_1;                        // scope 0 at ui/realloc-16687.rs:59:9: 59:63
        return;                          // scope 0 at ui/realloc-16687.rs:59:9: 59:63
    }
}

promoted[1] in test_triangle::deallocate: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/realloc-16687.rs:56:22: 56:45
    let mut _1: [&str; 3];               // in scope 0 at ui/realloc-16687.rs:56:22: 56:45

    bb0: {
        _1 = [const "deallocate(", const ", ", const "\n"]; // scope 0 at ui/realloc-16687.rs:56:22: 56:45
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:56:22: 56:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:56:22: 56:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:56:22: 56:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/realloc-16687.rs:56:22: 56:45
        return;                          // scope 0 at ui/realloc-16687.rs:56:22: 56:45
    }
}

fn reallocate(_1: *mut u8, _2: Layout, _3: Layout) -> *mut u8 {
    debug ptr => _1;                     // in scope 0 at ui/realloc-16687.rs:62:26: 62:29
    debug old => _2;                     // in scope 0 at ui/realloc-16687.rs:62:40: 62:43
    debug new => _3;                     // in scope 0 at ui/realloc-16687.rs:62:53: 62:56
    let mut _0: *mut u8;                 // return place in scope 0 at ui/realloc-16687.rs:62:69: 62:76
    let _4: std::result::Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError>; // in scope 0 at ui/realloc-16687.rs:67:13: 67:19
    let mut _5: bool;                    // in scope 0 at ui/realloc-16687.rs:67:25: 67:48
    let mut _6: usize;                   // in scope 0 at ui/realloc-16687.rs:67:25: 67:35
    let mut _7: &std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:67:25: 67:35
    let mut _8: usize;                   // in scope 0 at ui/realloc-16687.rs:67:38: 67:48
    let mut _9: &std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:67:38: 67:48
    let mut _10: &std::alloc::Global;    // in scope 0 at ui/realloc-16687.rs:68:13: 68:63
    let mut _11: std::ptr::NonNull<u8>;  // in scope 0 at ui/realloc-16687.rs:68:25: 68:52
    let mut _12: *mut u8;                // in scope 0 at ui/realloc-16687.rs:68:48: 68:51
    let mut _13: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:68:54: 68:57
    let mut _14: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:68:59: 68:62
    let mut _15: &std::alloc::Global;    // in scope 0 at ui/realloc-16687.rs:70:13: 70:65
    let mut _16: std::ptr::NonNull<u8>;  // in scope 0 at ui/realloc-16687.rs:70:27: 70:54
    let mut _17: *mut u8;                // in scope 0 at ui/realloc-16687.rs:70:50: 70:53
    let mut _18: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:70:56: 70:59
    let mut _19: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:70:61: 70:64
    let mut _21: std::result::Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError>; // in scope 0 at ui/realloc-16687.rs:73:19: 73:25
    let mut _22: [closure@ui/realloc-16687.rs:73:41: 73:44]; // in scope 0 at ui/realloc-16687.rs:73:41: 73:68
    let mut _23: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:73:41: 73:68
    let mut _24: std::ptr::NonNull<[u8]>; // in scope 0 at ui/realloc-16687.rs:78:9: 78:12
    let mut _25: &std::alloc::Global;    // in scope 0 at ui/realloc-16687.rs:70:13: 70:65
    let mut _26: &std::alloc::Global;    // in scope 0 at ui/realloc-16687.rs:68:13: 68:63
    scope 1 {
        debug memory => _4;              // in scope 1 at ui/realloc-16687.rs:67:13: 67:19
        let _20: std::ptr::NonNull<[u8]>; // in scope 1 at ui/realloc-16687.rs:73:13: 73:16
        scope 2 {
            debug ptr => _20;            // in scope 2 at ui/realloc-16687.rs:73:13: 73:16
        }
    }

    bb0: {
        _7 = &_3;                        // scope 0 at ui/realloc-16687.rs:67:25: 67:35
        _6 = Layout::size(move _7) -> bb1; // scope 0 at ui/realloc-16687.rs:67:25: 67:35
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:67:29: 67:33
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> usize {Layout::size}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &_2;                        // scope 0 at ui/realloc-16687.rs:67:38: 67:48
        _8 = Layout::size(move _9) -> bb2; // scope 0 at ui/realloc-16687.rs:67:38: 67:48
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:67:42: 67:46
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> usize {Layout::size}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Gt(move _6, move _8);       // scope 0 at ui/realloc-16687.rs:67:25: 67:48
        switchInt(move _5) -> [0: bb5, otherwise: bb3]; // scope 0 at ui/realloc-16687.rs:67:25: 67:48
    }

    bb3: {
        _26 = const _;                   // scope 0 at ui/realloc-16687.rs:68:13: 68:63
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:68:13: 68:63
                                         // + literal: Const { ty: &std::alloc::Global, val: Unevaluated(reallocate, [], Some(promoted[2])) }
        _10 = _26;                       // scope 0 at ui/realloc-16687.rs:68:13: 68:63
        _12 = _1;                        // scope 0 at ui/realloc-16687.rs:68:48: 68:51
        _11 = NonNull::<u8>::new_unchecked(move _12) -> bb4; // scope 0 at ui/realloc-16687.rs:68:25: 68:52
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:68:25: 68:47
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: unsafe fn(*mut u8) -> NonNull<u8> {NonNull::<u8>::new_unchecked}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = _2;                        // scope 0 at ui/realloc-16687.rs:68:54: 68:57
        _14 = _3;                        // scope 0 at ui/realloc-16687.rs:68:59: 68:62
        _4 = <std::alloc::Global as Allocator>::grow(move _10, move _11, move _13, move _14) -> bb7; // scope 0 at ui/realloc-16687.rs:68:13: 68:63
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:68:20: 68:24
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a std::alloc::Global, NonNull<u8>, Layout, Layout) -> Result<NonNull<[u8]>, std::alloc::AllocError> {<std::alloc::Global as Allocator>::grow}, val: Value(<ZST>) }
    }

    bb5: {
        _25 = const _;                   // scope 0 at ui/realloc-16687.rs:70:13: 70:65
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:70:13: 70:65
                                         // + literal: Const { ty: &std::alloc::Global, val: Unevaluated(reallocate, [], Some(promoted[1])) }
        _15 = _25;                       // scope 0 at ui/realloc-16687.rs:70:13: 70:65
        _17 = _1;                        // scope 0 at ui/realloc-16687.rs:70:50: 70:53
        _16 = NonNull::<u8>::new_unchecked(move _17) -> bb6; // scope 0 at ui/realloc-16687.rs:70:27: 70:54
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:70:27: 70:49
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: unsafe fn(*mut u8) -> NonNull<u8> {NonNull::<u8>::new_unchecked}, val: Value(<ZST>) }
    }

    bb6: {
        _18 = _2;                        // scope 0 at ui/realloc-16687.rs:70:56: 70:59
        _19 = _3;                        // scope 0 at ui/realloc-16687.rs:70:61: 70:64
        _4 = <std::alloc::Global as Allocator>::shrink(move _15, move _16, move _18, move _19) -> bb7; // scope 0 at ui/realloc-16687.rs:70:13: 70:65
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:70:20: 70:26
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a std::alloc::Global, NonNull<u8>, Layout, Layout) -> Result<NonNull<[u8]>, std::alloc::AllocError> {<std::alloc::Global as Allocator>::shrink}, val: Value(<ZST>) }
    }

    bb7: {
        _21 = _4;                        // scope 1 at ui/realloc-16687.rs:73:19: 73:25
        _23 = &_3;                       // scope 1 at ui/realloc-16687.rs:73:41: 73:68
        _22 = [closure@ui/realloc-16687.rs:73:41: 73:44] { new: move _23 }; // scope 1 at ui/realloc-16687.rs:73:41: 73:68
                                         // closure
                                         // + def_id: DefId(0:21 ~ realloc_16687[35db]::test_triangle::reallocate::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::alloc::AllocError,)) -> std::ptr::NonNull<[u8]>,
                                         //     (&std::alloc::Layout,),
                                         // ]
        _20 = Result::<NonNull<[u8]>, std::alloc::AllocError>::unwrap_or_else::<[closure@ui/realloc-16687.rs:73:41: 73:44]>(move _21, move _22) -> bb8; // scope 1 at ui/realloc-16687.rs:73:19: 73:69
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:73:26: 73:40
                                         // + literal: Const { ty: fn(Result<NonNull<[u8]>, std::alloc::AllocError>, [closure@ui/realloc-16687.rs:73:41: 73:44]) -> NonNull<[u8]> {Result::<NonNull<[u8]>, std::alloc::AllocError>::unwrap_or_else::<[closure@ui/realloc-16687.rs:73:41: 73:44]>}, val: Value(<ZST>) }
    }

    bb8: {
        _24 = _20;                       // scope 2 at ui/realloc-16687.rs:78:9: 78:12
        _0 = NonNull::<[u8]>::as_mut_ptr(move _24) -> bb9; // scope 2 at ui/realloc-16687.rs:78:9: 78:25
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:78:13: 78:23
                                         // + literal: Const { ty: fn(NonNull<[u8]>) -> *mut u8 {NonNull::<[u8]>::as_mut_ptr}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/realloc-16687.rs:79:6: 79:6
    }
}

promoted[0] in reallocate: &[&str; 5] = {
    let mut _0: &[&str; 5];              // return place in scope 0 at ui/realloc-16687.rs:76:22: 76:67
    let mut _1: [&str; 5];               // in scope 0 at ui/realloc-16687.rs:76:22: 76:67

    bb0: {
        _1 = [const "reallocate(", const ", old=", const ", new=", const ") = ", const "\n"]; // scope 0 at ui/realloc-16687.rs:76:22: 76:67
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:76:22: 76:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:76:22: 76:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:76:22: 76:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:76:22: 76:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:76:22: 76:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/realloc-16687.rs:76:22: 76:67
        return;                          // scope 0 at ui/realloc-16687.rs:76:22: 76:67
    }
}

promoted[1] in reallocate: &std::alloc::Global = {
    let mut _0: &std::alloc::Global;     // return place in scope 0 at ui/realloc-16687.rs:70:13: 70:65
    let mut _1: std::alloc::Global;      // in scope 0 at ui/realloc-16687.rs:70:13: 70:19

    bb0: {
        _1 = std::alloc::Global;         // scope 0 at ui/realloc-16687.rs:70:13: 70:19
        _0 = &_1;                        // scope 0 at ui/realloc-16687.rs:70:13: 70:65
        return;                          // scope 0 at ui/realloc-16687.rs:70:13: 70:65
    }
}

promoted[2] in reallocate: &std::alloc::Global = {
    let mut _0: &std::alloc::Global;     // return place in scope 0 at ui/realloc-16687.rs:68:13: 68:63
    let mut _1: std::alloc::Global;      // in scope 0 at ui/realloc-16687.rs:68:13: 68:19

    bb0: {
        _1 = std::alloc::Global;         // scope 0 at ui/realloc-16687.rs:68:13: 68:19
        _0 = &_1;                        // scope 0 at ui/realloc-16687.rs:68:13: 68:63
        return;                          // scope 0 at ui/realloc-16687.rs:68:13: 68:63
    }
}

promoted[3] in reallocate: &[&str; 4] = {
    let mut _0: &[&str; 4];              // return place in scope 0 at ui/realloc-16687.rs:64:22: 64:60
    let mut _1: [&str; 4];               // in scope 0 at ui/realloc-16687.rs:64:22: 64:60

    bb0: {
        _1 = [const "reallocate(", const ", old=", const ", new=", const ")\n"]; // scope 0 at ui/realloc-16687.rs:64:22: 64:60
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:64:22: 64:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:64:22: 64:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:64:22: 64:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:64:22: 64:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/realloc-16687.rs:64:22: 64:60
        return;                          // scope 0 at ui/realloc-16687.rs:64:22: 64:60
    }
}

fn reallocate::{closure#0}(_1: [closure@ui/realloc-16687.rs:73:41: 73:44], _2: std::alloc::AllocError) -> NonNull<[u8]> {
    debug new => (*(_1.0: &std::alloc::Layout)); // in scope 0 at ui/realloc-16687.rs:62:53: 62:56
    let mut _0: std::ptr::NonNull<[u8]>; // return place in scope 0 at ui/realloc-16687.rs:73:45: 73:45
    let mut _3: !;                       // in scope 0 at ui/realloc-16687.rs:73:45: 73:68
    let mut _4: std::alloc::Layout;      // in scope 0 at ui/realloc-16687.rs:73:64: 73:67
    let mut _5: &std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:73:41: 73:68

    bb0: {
        _5 = deref_copy (_1.0: &std::alloc::Layout); // scope 0 at ui/realloc-16687.rs:73:64: 73:67
        _4 = (*_5);                      // scope 0 at ui/realloc-16687.rs:73:64: 73:67
        _3 = handle_alloc_error(move _4); // scope 0 at ui/realloc-16687.rs:73:45: 73:68
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:73:45: 73:63
                                         // + literal: Const { ty: fn(Layout) -> ! {handle_alloc_error}, val: Value(<ZST>) }
    }
}

fn idx_to_size(_1: usize) -> usize {
    debug i => _1;                       // in scope 0 at ui/realloc-16687.rs:81:20: 81:21
    let mut _0: usize;                   // return place in scope 0 at ui/realloc-16687.rs:81:33: 81:38
    let mut _2: usize;                   // in scope 0 at ui/realloc-16687.rs:82:9: 82:16
    let mut _3: usize;                   // in scope 0 at ui/realloc-16687.rs:82:10: 82:11
    let mut _4: (usize, bool);           // in scope 0 at ui/realloc-16687.rs:82:9: 82:16
    let mut _5: (usize, bool);           // in scope 0 at ui/realloc-16687.rs:82:9: 82:21

    bb0: {
        _3 = _1;                         // scope 0 at ui/realloc-16687.rs:82:10: 82:11
        _4 = CheckedAdd(_3, const 1_usize); // scope 0 at ui/realloc-16687.rs:82:9: 82:16
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 1_usize) -> bb1; // scope 0 at ui/realloc-16687.rs:82:9: 82:16
    }

    bb1: {
        _2 = move (_4.0: usize);         // scope 0 at ui/realloc-16687.rs:82:9: 82:16
        _5 = CheckedMul(_2, const 10_usize); // scope 0 at ui/realloc-16687.rs:82:9: 82:21
        assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const 10_usize) -> bb2; // scope 0 at ui/realloc-16687.rs:82:9: 82:21
    }

    bb2: {
        _0 = move (_5.0: usize);         // scope 0 at ui/realloc-16687.rs:82:9: 82:21
        return;                          // scope 0 at ui/realloc-16687.rs:83:6: 83:6
    }
}

fn test_1(_1: &mut [*mut u8]) -> () {
    debug ascend => _1;                  // in scope 0 at ui/realloc-16687.rs:122:22: 122:28
    let mut _0: ();                      // return place in scope 0 at ui/realloc-16687.rs:122:46: 122:46
    let _2: usize;                       // in scope 0 at ui/realloc-16687.rs:123:13: 123:21
    let mut _3: usize;                   // in scope 0 at ui/realloc-16687.rs:123:36: 123:45
    let mut _5: std::result::Result<std::alloc::Layout, std::alloc::LayoutError>; // in scope 0 at ui/realloc-16687.rs:124:19: 124:59
    let mut _6: usize;                   // in scope 0 at ui/realloc-16687.rs:124:43: 124:51
    let mut _7: usize;                   // in scope 0 at ui/realloc-16687.rs:124:53: 124:58
    let mut _8: std::ops::Range<usize>;  // in scope 0 at ui/realloc-16687.rs:125:18: 125:30
    let mut _9: std::ops::Range<usize>;  // in scope 0 at ui/realloc-16687.rs:125:18: 125:30
    let mut _10: usize;                  // in scope 0 at ui/realloc-16687.rs:125:21: 125:30
    let mut _12: std::option::Option<usize>; // in scope 0 at ui/realloc-16687.rs:125:18: 125:30
    let mut _13: &mut std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:125:18: 125:30
    let mut _14: &mut std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:125:18: 125:30
    let mut _15: isize;                  // in scope 0 at ui/realloc-16687.rs:125:9: 135:10
    let mut _20: (*mut u8, *mut u8, usize); // in scope 0 at ui/realloc-16687.rs:126:38: 126:88
    let mut _21: *mut u8;                // in scope 0 at ui/realloc-16687.rs:126:39: 126:52
    let _22: usize;                      // in scope 0 at ui/realloc-16687.rs:126:46: 126:51
    let mut _23: usize;                  // in scope 0 at ui/realloc-16687.rs:126:50: 126:51
    let mut _24: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:126:46: 126:51
    let mut _25: usize;                  // in scope 0 at ui/realloc-16687.rs:126:39: 126:52
    let mut _26: bool;                   // in scope 0 at ui/realloc-16687.rs:126:39: 126:52
    let mut _27: *mut u8;                // in scope 0 at ui/realloc-16687.rs:126:54: 126:71
    let _28: usize;                      // in scope 0 at ui/realloc-16687.rs:126:61: 126:70
    let mut _29: usize;                  // in scope 0 at ui/realloc-16687.rs:126:61: 126:66
    let mut _30: usize;                  // in scope 0 at ui/realloc-16687.rs:126:65: 126:66
    let mut _31: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:126:61: 126:66
    let mut _32: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:126:61: 126:70
    let mut _33: usize;                  // in scope 0 at ui/realloc-16687.rs:126:54: 126:71
    let mut _34: bool;                   // in scope 0 at ui/realloc-16687.rs:126:54: 126:71
    let mut _35: usize;                  // in scope 0 at ui/realloc-16687.rs:126:73: 126:87
    let mut _36: usize;                  // in scope 0 at ui/realloc-16687.rs:126:85: 126:86
    let mut _37: bool;                   // in scope 0 at ui/realloc-16687.rs:127:13: 127:41
    let mut _38: bool;                   // in scope 0 at ui/realloc-16687.rs:127:21: 127:40
    let mut _39: usize;                  // in scope 0 at ui/realloc-16687.rs:127:21: 127:29
    let mut _40: usize;                  // in scope 0 at ui/realloc-16687.rs:127:32: 127:40
    let mut _41: !;                      // in scope 0 at ui/realloc-16687.rs:127:13: 127:41
    let mut _43: std::result::Result<std::alloc::Layout, std::alloc::LayoutError>; // in scope 0 at ui/realloc-16687.rs:128:23: 128:63
    let mut _44: usize;                  // in scope 0 at ui/realloc-16687.rs:128:47: 128:55
    let mut _45: usize;                  // in scope 0 at ui/realloc-16687.rs:128:57: 128:62
    let mut _46: *mut u8;                // in scope 0 at ui/realloc-16687.rs:130:29: 130:69
    let mut _47: *mut u8;                // in scope 0 at ui/realloc-16687.rs:130:40: 130:42
    let mut _48: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:130:44: 130:55
    let mut _49: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:130:44: 130:55
    let mut _50: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:130:57: 130:68
    let mut _51: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:130:57: 130:68
    let _52: usize;                      // in scope 0 at ui/realloc-16687.rs:130:20: 130:25
    let mut _53: usize;                  // in scope 0 at ui/realloc-16687.rs:130:24: 130:25
    let mut _54: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:130:20: 130:25
    let mut _55: usize;                  // in scope 0 at ui/realloc-16687.rs:130:13: 130:26
    let mut _56: bool;                   // in scope 0 at ui/realloc-16687.rs:130:13: 130:26
    let _57: ();                         // in scope 0 at ui/realloc-16687.rs:131:13: 131:35
    let mut _58: &[*mut u8];             // in scope 0 at ui/realloc-16687.rs:131:26: 131:34
    let _59: &[*mut u8];                 // in scope 0 at ui/realloc-16687.rs:131:26: 131:34
    let mut _60: *mut u8;                // in scope 0 at ui/realloc-16687.rs:133:33: 133:73
    let mut _61: *mut u8;                // in scope 0 at ui/realloc-16687.rs:133:44: 133:46
    let mut _62: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:133:48: 133:59
    let mut _63: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:133:48: 133:59
    let mut _64: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:133:61: 133:72
    let mut _65: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:133:61: 133:72
    let _66: usize;                      // in scope 0 at ui/realloc-16687.rs:133:20: 133:29
    let mut _67: usize;                  // in scope 0 at ui/realloc-16687.rs:133:20: 133:25
    let mut _68: usize;                  // in scope 0 at ui/realloc-16687.rs:133:24: 133:25
    let mut _69: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:133:20: 133:25
    let mut _70: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:133:20: 133:29
    let mut _71: usize;                  // in scope 0 at ui/realloc-16687.rs:133:13: 133:30
    let mut _72: bool;                   // in scope 0 at ui/realloc-16687.rs:133:13: 133:30
    let _73: ();                         // in scope 0 at ui/realloc-16687.rs:134:13: 134:35
    let mut _74: &[*mut u8];             // in scope 0 at ui/realloc-16687.rs:134:26: 134:34
    let _75: &[*mut u8];                 // in scope 0 at ui/realloc-16687.rs:134:26: 134:34
    scope 1 {
        debug new_size => _2;            // in scope 1 at ui/realloc-16687.rs:123:13: 123:21
        let _4: std::alloc::Layout;      // in scope 1 at ui/realloc-16687.rs:124:13: 124:16
        scope 2 {
            debug new => _4;             // in scope 2 at ui/realloc-16687.rs:124:13: 124:16
            let mut _11: std::ops::Range<usize>; // in scope 2 at ui/realloc-16687.rs:125:18: 125:30
            scope 3 {
                debug iter => _11;       // in scope 3 at ui/realloc-16687.rs:125:18: 125:30
                let _16: usize;          // in scope 3 at ui/realloc-16687.rs:125:13: 125:14
                scope 4 {
                    debug i => _16;      // in scope 4 at ui/realloc-16687.rs:125:13: 125:14
                    let _17: *mut u8;    // in scope 4 at ui/realloc-16687.rs:126:18: 126:20
                    let _18: *mut u8;    // in scope 4 at ui/realloc-16687.rs:126:22: 126:24
                    let _19: usize;      // in scope 4 at ui/realloc-16687.rs:126:26: 126:34
                    scope 5 {
                        debug p0 => _17; // in scope 5 at ui/realloc-16687.rs:126:18: 126:20
                        debug p1 => _18; // in scope 5 at ui/realloc-16687.rs:126:22: 126:24
                        debug old_size => _19; // in scope 5 at ui/realloc-16687.rs:126:26: 126:34
                        let _42: std::alloc::Layout; // in scope 5 at ui/realloc-16687.rs:128:17: 128:20
                        scope 6 {
                            debug old => _42; // in scope 6 at ui/realloc-16687.rs:128:17: 128:20
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const 15_usize;             // scope 0 at ui/realloc-16687.rs:123:36: 123:45
        _2 = idx_to_size(move _3) -> bb1; // scope 0 at ui/realloc-16687.rs:123:24: 123:46
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:123:24: 123:35
                                         // + literal: Const { ty: fn(usize) -> usize {idx_to_size}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _2;                         // scope 1 at ui/realloc-16687.rs:124:43: 124:51
        _7 = const 1_usize;              // scope 1 at ui/realloc-16687.rs:124:53: 124:58
        _5 = Layout::from_size_align(move _6, move _7) -> bb2; // scope 1 at ui/realloc-16687.rs:124:19: 124:59
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:124:19: 124:42
                                         // + literal: Const { ty: fn(usize, usize) -> Result<Layout, LayoutError> {Layout::from_size_align}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = Result::<Layout, LayoutError>::unwrap(move _5) -> bb3; // scope 1 at ui/realloc-16687.rs:124:19: 124:68
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:124:60: 124:66
                                         // + literal: Const { ty: fn(Result<Layout, LayoutError>) -> Layout {Result::<Layout, LayoutError>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = const 8_usize;             // scope 2 at ui/realloc-16687.rs:125:21: 125:30
        _9 = std::ops::Range::<usize> { start: const 0_usize, end: move _10 }; // scope 2 at ui/realloc-16687.rs:125:18: 125:30
        _8 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _9) -> bb4; // scope 2 at ui/realloc-16687.rs:125:18: 125:30
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:125:18: 125:30
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = move _8;                   // scope 2 at ui/realloc-16687.rs:125:18: 125:30
        goto -> bb5;                     // scope 3 at ui/realloc-16687.rs:125:9: 135:10
    }

    bb5: {
        _14 = &mut _11;                  // scope 3 at ui/realloc-16687.rs:125:18: 125:30
        _13 = &mut (*_14);               // scope 3 at ui/realloc-16687.rs:125:18: 125:30
        _12 = <std::ops::Range<usize> as Iterator>::next(move _13) -> bb6; // scope 3 at ui/realloc-16687.rs:125:18: 125:30
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:125:18: 125:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = discriminant(_12);         // scope 3 at ui/realloc-16687.rs:125:18: 125:30
        switchInt(move _15) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 3 at ui/realloc-16687.rs:125:18: 125:30
    }

    bb7: {
        _16 = ((_12 as Some).0: usize);  // scope 3 at ui/realloc-16687.rs:125:13: 125:14
        _23 = _16;                       // scope 4 at ui/realloc-16687.rs:126:50: 126:51
        _24 = CheckedMul(const 2_usize, _23); // scope 4 at ui/realloc-16687.rs:126:46: 126:51
        assert(!move (_24.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _23) -> bb10; // scope 4 at ui/realloc-16687.rs:126:46: 126:51
    }

    bb8: {
        unreachable;                     // scope 3 at ui/realloc-16687.rs:125:18: 125:30
    }

    bb9: {
        return;                          // scope 0 at ui/realloc-16687.rs:136:6: 136:6
    }

    bb10: {
        _22 = move (_24.0: usize);       // scope 4 at ui/realloc-16687.rs:126:46: 126:51
        _25 = Len((*_1));                // scope 4 at ui/realloc-16687.rs:126:39: 126:52
        _26 = Lt(_22, _25);              // scope 4 at ui/realloc-16687.rs:126:39: 126:52
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _22) -> bb11; // scope 4 at ui/realloc-16687.rs:126:39: 126:52
    }

    bb11: {
        _21 = (*_1)[_22];                // scope 4 at ui/realloc-16687.rs:126:39: 126:52
        _30 = _16;                       // scope 4 at ui/realloc-16687.rs:126:65: 126:66
        _31 = CheckedMul(const 2_usize, _30); // scope 4 at ui/realloc-16687.rs:126:61: 126:66
        assert(!move (_31.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _30) -> bb12; // scope 4 at ui/realloc-16687.rs:126:61: 126:66
    }

    bb12: {
        _29 = move (_31.0: usize);       // scope 4 at ui/realloc-16687.rs:126:61: 126:66
        _32 = CheckedAdd(_29, const 1_usize); // scope 4 at ui/realloc-16687.rs:126:61: 126:70
        assert(!move (_32.1: bool), "attempt to compute `{} + {}`, which would overflow", move _29, const 1_usize) -> bb13; // scope 4 at ui/realloc-16687.rs:126:61: 126:70
    }

    bb13: {
        _28 = move (_32.0: usize);       // scope 4 at ui/realloc-16687.rs:126:61: 126:70
        _33 = Len((*_1));                // scope 4 at ui/realloc-16687.rs:126:54: 126:71
        _34 = Lt(_28, _33);              // scope 4 at ui/realloc-16687.rs:126:54: 126:71
        assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _28) -> bb14; // scope 4 at ui/realloc-16687.rs:126:54: 126:71
    }

    bb14: {
        _27 = (*_1)[_28];                // scope 4 at ui/realloc-16687.rs:126:54: 126:71
        _36 = _16;                       // scope 4 at ui/realloc-16687.rs:126:85: 126:86
        _35 = idx_to_size(move _36) -> bb15; // scope 4 at ui/realloc-16687.rs:126:73: 126:87
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:126:73: 126:84
                                         // + literal: Const { ty: fn(usize) -> usize {idx_to_size}, val: Value(<ZST>) }
    }

    bb15: {
        _20 = (move _21, move _27, move _35); // scope 4 at ui/realloc-16687.rs:126:38: 126:88
        _17 = (_20.0: *mut u8);          // scope 4 at ui/realloc-16687.rs:126:18: 126:20
        _18 = (_20.1: *mut u8);          // scope 4 at ui/realloc-16687.rs:126:22: 126:24
        _19 = (_20.2: usize);            // scope 4 at ui/realloc-16687.rs:126:26: 126:34
        _39 = _19;                       // scope 5 at ui/realloc-16687.rs:127:21: 127:29
        _40 = _2;                        // scope 5 at ui/realloc-16687.rs:127:32: 127:40
        _38 = Lt(move _39, move _40);    // scope 5 at ui/realloc-16687.rs:127:21: 127:40
        _37 = Not(move _38);             // scope 5 at ui/realloc-16687.rs:127:13: 127:41
        switchInt(move _37) -> [0: bb17, otherwise: bb16]; // scope 5 at ui/realloc-16687.rs:127:13: 127:41
    }

    bb16: {
        _41 = core::panicking::panic(const "assertion failed: old_size < new_size"); // scope 5 at ui/realloc-16687.rs:127:13: 127:41
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:127:13: 127:41
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _44 = _19;                       // scope 5 at ui/realloc-16687.rs:128:47: 128:55
        _45 = const 1_usize;             // scope 5 at ui/realloc-16687.rs:128:57: 128:62
        _43 = Layout::from_size_align(move _44, move _45) -> bb18; // scope 5 at ui/realloc-16687.rs:128:23: 128:63
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:128:23: 128:46
                                         // + literal: Const { ty: fn(usize, usize) -> Result<Layout, LayoutError> {Layout::from_size_align}, val: Value(<ZST>) }
    }

    bb18: {
        _42 = Result::<Layout, LayoutError>::unwrap(move _43) -> bb19; // scope 5 at ui/realloc-16687.rs:128:23: 128:72
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:128:64: 128:70
                                         // + literal: Const { ty: fn(Result<Layout, LayoutError>) -> Layout {Result::<Layout, LayoutError>::unwrap}, val: Value(<ZST>) }
    }

    bb19: {
        _47 = _17;                       // scope 6 at ui/realloc-16687.rs:130:40: 130:42
        _49 = &_42;                      // scope 6 at ui/realloc-16687.rs:130:44: 130:55
        _48 = <Layout as Clone>::clone(move _49) -> bb20; // scope 6 at ui/realloc-16687.rs:130:44: 130:55
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:130:48: 130:53
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> Layout {<Layout as Clone>::clone}, val: Value(<ZST>) }
    }

    bb20: {
        _51 = &_4;                       // scope 6 at ui/realloc-16687.rs:130:57: 130:68
        _50 = <Layout as Clone>::clone(move _51) -> bb21; // scope 6 at ui/realloc-16687.rs:130:57: 130:68
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:130:61: 130:66
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> Layout {<Layout as Clone>::clone}, val: Value(<ZST>) }
    }

    bb21: {
        _46 = reallocate(move _47, move _48, move _50) -> bb22; // scope 6 at ui/realloc-16687.rs:130:29: 130:69
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:130:29: 130:39
                                         // + literal: Const { ty: unsafe fn(*mut u8, Layout, Layout) -> *mut u8 {reallocate}, val: Value(<ZST>) }
    }

    bb22: {
        _53 = _16;                       // scope 6 at ui/realloc-16687.rs:130:24: 130:25
        _54 = CheckedMul(const 2_usize, _53); // scope 6 at ui/realloc-16687.rs:130:20: 130:25
        assert(!move (_54.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _53) -> bb23; // scope 6 at ui/realloc-16687.rs:130:20: 130:25
    }

    bb23: {
        _52 = move (_54.0: usize);       // scope 6 at ui/realloc-16687.rs:130:20: 130:25
        _55 = Len((*_1));                // scope 6 at ui/realloc-16687.rs:130:13: 130:26
        _56 = Lt(_52, _55);              // scope 6 at ui/realloc-16687.rs:130:13: 130:26
        assert(move _56, "index out of bounds: the length is {} but the index is {}", move _55, _52) -> bb24; // scope 6 at ui/realloc-16687.rs:130:13: 130:26
    }

    bb24: {
        (*_1)[_52] = move _46;           // scope 6 at ui/realloc-16687.rs:130:13: 130:69
        _59 = &(*_1);                    // scope 6 at ui/realloc-16687.rs:131:26: 131:34
        _58 = _59;                       // scope 6 at ui/realloc-16687.rs:131:26: 131:34
        _57 = sanity_check(move _58) -> bb25; // scope 6 at ui/realloc-16687.rs:131:13: 131:35
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:131:13: 131:25
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a [*mut u8]) {sanity_check}, val: Value(<ZST>) }
    }

    bb25: {
        _61 = _18;                       // scope 6 at ui/realloc-16687.rs:133:44: 133:46
        _63 = &_42;                      // scope 6 at ui/realloc-16687.rs:133:48: 133:59
        _62 = <Layout as Clone>::clone(move _63) -> bb26; // scope 6 at ui/realloc-16687.rs:133:48: 133:59
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:133:52: 133:57
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> Layout {<Layout as Clone>::clone}, val: Value(<ZST>) }
    }

    bb26: {
        _65 = &_4;                       // scope 6 at ui/realloc-16687.rs:133:61: 133:72
        _64 = <Layout as Clone>::clone(move _65) -> bb27; // scope 6 at ui/realloc-16687.rs:133:61: 133:72
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:133:65: 133:70
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> Layout {<Layout as Clone>::clone}, val: Value(<ZST>) }
    }

    bb27: {
        _60 = reallocate(move _61, move _62, move _64) -> bb28; // scope 6 at ui/realloc-16687.rs:133:33: 133:73
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:133:33: 133:43
                                         // + literal: Const { ty: unsafe fn(*mut u8, Layout, Layout) -> *mut u8 {reallocate}, val: Value(<ZST>) }
    }

    bb28: {
        _68 = _16;                       // scope 6 at ui/realloc-16687.rs:133:24: 133:25
        _69 = CheckedMul(const 2_usize, _68); // scope 6 at ui/realloc-16687.rs:133:20: 133:25
        assert(!move (_69.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _68) -> bb29; // scope 6 at ui/realloc-16687.rs:133:20: 133:25
    }

    bb29: {
        _67 = move (_69.0: usize);       // scope 6 at ui/realloc-16687.rs:133:20: 133:25
        _70 = CheckedAdd(_67, const 1_usize); // scope 6 at ui/realloc-16687.rs:133:20: 133:29
        assert(!move (_70.1: bool), "attempt to compute `{} + {}`, which would overflow", move _67, const 1_usize) -> bb30; // scope 6 at ui/realloc-16687.rs:133:20: 133:29
    }

    bb30: {
        _66 = move (_70.0: usize);       // scope 6 at ui/realloc-16687.rs:133:20: 133:29
        _71 = Len((*_1));                // scope 6 at ui/realloc-16687.rs:133:13: 133:30
        _72 = Lt(_66, _71);              // scope 6 at ui/realloc-16687.rs:133:13: 133:30
        assert(move _72, "index out of bounds: the length is {} but the index is {}", move _71, _66) -> bb31; // scope 6 at ui/realloc-16687.rs:133:13: 133:30
    }

    bb31: {
        (*_1)[_66] = move _60;           // scope 6 at ui/realloc-16687.rs:133:13: 133:73
        _75 = &(*_1);                    // scope 6 at ui/realloc-16687.rs:134:26: 134:34
        _74 = _75;                       // scope 6 at ui/realloc-16687.rs:134:26: 134:34
        _73 = sanity_check(move _74) -> bb5; // scope 6 at ui/realloc-16687.rs:134:13: 134:35
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:134:13: 134:25
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a [*mut u8]) {sanity_check}, val: Value(<ZST>) }
    }
}

fn test_2(_1: &mut [*mut u8]) -> () {
    debug ascend => _1;                  // in scope 0 at ui/realloc-16687.rs:139:22: 139:28
    let mut _0: ();                      // return place in scope 0 at ui/realloc-16687.rs:139:46: 139:46
    let _2: usize;                       // in scope 0 at ui/realloc-16687.rs:140:13: 140:21
    let mut _3: usize;                   // in scope 0 at ui/realloc-16687.rs:140:36: 140:45
    let mut _5: std::result::Result<std::alloc::Layout, std::alloc::LayoutError>; // in scope 0 at ui/realloc-16687.rs:141:19: 141:59
    let mut _6: usize;                   // in scope 0 at ui/realloc-16687.rs:141:43: 141:51
    let mut _7: usize;                   // in scope 0 at ui/realloc-16687.rs:141:53: 141:58
    let mut _8: std::ops::Range<usize>;  // in scope 0 at ui/realloc-16687.rs:142:18: 142:30
    let mut _9: std::ops::Range<usize>;  // in scope 0 at ui/realloc-16687.rs:142:18: 142:30
    let mut _10: usize;                  // in scope 0 at ui/realloc-16687.rs:142:21: 142:30
    let mut _12: std::option::Option<usize>; // in scope 0 at ui/realloc-16687.rs:142:18: 142:30
    let mut _13: &mut std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:142:18: 142:30
    let mut _14: &mut std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:142:18: 142:30
    let mut _15: isize;                  // in scope 0 at ui/realloc-16687.rs:142:9: 152:10
    let mut _20: (*mut u8, *mut u8, usize); // in scope 0 at ui/realloc-16687.rs:143:38: 143:88
    let mut _21: *mut u8;                // in scope 0 at ui/realloc-16687.rs:143:39: 143:52
    let _22: usize;                      // in scope 0 at ui/realloc-16687.rs:143:46: 143:51
    let mut _23: usize;                  // in scope 0 at ui/realloc-16687.rs:143:50: 143:51
    let mut _24: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:143:46: 143:51
    let mut _25: usize;                  // in scope 0 at ui/realloc-16687.rs:143:39: 143:52
    let mut _26: bool;                   // in scope 0 at ui/realloc-16687.rs:143:39: 143:52
    let mut _27: *mut u8;                // in scope 0 at ui/realloc-16687.rs:143:54: 143:71
    let _28: usize;                      // in scope 0 at ui/realloc-16687.rs:143:61: 143:70
    let mut _29: usize;                  // in scope 0 at ui/realloc-16687.rs:143:61: 143:66
    let mut _30: usize;                  // in scope 0 at ui/realloc-16687.rs:143:65: 143:66
    let mut _31: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:143:61: 143:66
    let mut _32: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:143:61: 143:70
    let mut _33: usize;                  // in scope 0 at ui/realloc-16687.rs:143:54: 143:71
    let mut _34: bool;                   // in scope 0 at ui/realloc-16687.rs:143:54: 143:71
    let mut _35: usize;                  // in scope 0 at ui/realloc-16687.rs:143:73: 143:87
    let mut _36: usize;                  // in scope 0 at ui/realloc-16687.rs:143:85: 143:86
    let mut _37: bool;                   // in scope 0 at ui/realloc-16687.rs:144:13: 144:41
    let mut _38: bool;                   // in scope 0 at ui/realloc-16687.rs:144:21: 144:40
    let mut _39: usize;                  // in scope 0 at ui/realloc-16687.rs:144:21: 144:29
    let mut _40: usize;                  // in scope 0 at ui/realloc-16687.rs:144:32: 144:40
    let mut _41: !;                      // in scope 0 at ui/realloc-16687.rs:144:13: 144:41
    let mut _43: std::result::Result<std::alloc::Layout, std::alloc::LayoutError>; // in scope 0 at ui/realloc-16687.rs:145:23: 145:63
    let mut _44: usize;                  // in scope 0 at ui/realloc-16687.rs:145:47: 145:55
    let mut _45: usize;                  // in scope 0 at ui/realloc-16687.rs:145:57: 145:62
    let mut _46: *mut u8;                // in scope 0 at ui/realloc-16687.rs:147:29: 147:69
    let mut _47: *mut u8;                // in scope 0 at ui/realloc-16687.rs:147:40: 147:42
    let mut _48: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:147:44: 147:55
    let mut _49: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:147:44: 147:55
    let mut _50: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:147:57: 147:68
    let mut _51: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:147:57: 147:68
    let _52: usize;                      // in scope 0 at ui/realloc-16687.rs:147:20: 147:25
    let mut _53: usize;                  // in scope 0 at ui/realloc-16687.rs:147:24: 147:25
    let mut _54: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:147:20: 147:25
    let mut _55: usize;                  // in scope 0 at ui/realloc-16687.rs:147:13: 147:26
    let mut _56: bool;                   // in scope 0 at ui/realloc-16687.rs:147:13: 147:26
    let _57: ();                         // in scope 0 at ui/realloc-16687.rs:148:13: 148:35
    let mut _58: &[*mut u8];             // in scope 0 at ui/realloc-16687.rs:148:26: 148:34
    let _59: &[*mut u8];                 // in scope 0 at ui/realloc-16687.rs:148:26: 148:34
    let mut _60: *mut u8;                // in scope 0 at ui/realloc-16687.rs:150:33: 150:73
    let mut _61: *mut u8;                // in scope 0 at ui/realloc-16687.rs:150:44: 150:46
    let mut _62: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:150:48: 150:59
    let mut _63: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:150:48: 150:59
    let mut _64: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:150:61: 150:72
    let mut _65: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:150:61: 150:72
    let _66: usize;                      // in scope 0 at ui/realloc-16687.rs:150:20: 150:29
    let mut _67: usize;                  // in scope 0 at ui/realloc-16687.rs:150:20: 150:25
    let mut _68: usize;                  // in scope 0 at ui/realloc-16687.rs:150:24: 150:25
    let mut _69: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:150:20: 150:25
    let mut _70: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:150:20: 150:29
    let mut _71: usize;                  // in scope 0 at ui/realloc-16687.rs:150:13: 150:30
    let mut _72: bool;                   // in scope 0 at ui/realloc-16687.rs:150:13: 150:30
    let _73: ();                         // in scope 0 at ui/realloc-16687.rs:151:13: 151:35
    let mut _74: &[*mut u8];             // in scope 0 at ui/realloc-16687.rs:151:26: 151:34
    let _75: &[*mut u8];                 // in scope 0 at ui/realloc-16687.rs:151:26: 151:34
    scope 1 {
        debug old_size => _2;            // in scope 1 at ui/realloc-16687.rs:140:13: 140:21
        let _4: std::alloc::Layout;      // in scope 1 at ui/realloc-16687.rs:141:13: 141:16
        scope 2 {
            debug old => _4;             // in scope 2 at ui/realloc-16687.rs:141:13: 141:16
            let mut _11: std::ops::Range<usize>; // in scope 2 at ui/realloc-16687.rs:142:18: 142:30
            scope 3 {
                debug iter => _11;       // in scope 3 at ui/realloc-16687.rs:142:18: 142:30
                let _16: usize;          // in scope 3 at ui/realloc-16687.rs:142:13: 142:14
                scope 4 {
                    debug i => _16;      // in scope 4 at ui/realloc-16687.rs:142:13: 142:14
                    let _17: *mut u8;    // in scope 4 at ui/realloc-16687.rs:143:18: 143:20
                    let _18: *mut u8;    // in scope 4 at ui/realloc-16687.rs:143:22: 143:24
                    let _19: usize;      // in scope 4 at ui/realloc-16687.rs:143:26: 143:34
                    scope 5 {
                        debug p0 => _17; // in scope 5 at ui/realloc-16687.rs:143:18: 143:20
                        debug p1 => _18; // in scope 5 at ui/realloc-16687.rs:143:22: 143:24
                        debug new_size => _19; // in scope 5 at ui/realloc-16687.rs:143:26: 143:34
                        let _42: std::alloc::Layout; // in scope 5 at ui/realloc-16687.rs:145:17: 145:20
                        scope 6 {
                            debug new => _42; // in scope 6 at ui/realloc-16687.rs:145:17: 145:20
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const 15_usize;             // scope 0 at ui/realloc-16687.rs:140:36: 140:45
        _2 = idx_to_size(move _3) -> bb1; // scope 0 at ui/realloc-16687.rs:140:24: 140:46
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:140:24: 140:35
                                         // + literal: Const { ty: fn(usize) -> usize {idx_to_size}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _2;                         // scope 1 at ui/realloc-16687.rs:141:43: 141:51
        _7 = const 1_usize;              // scope 1 at ui/realloc-16687.rs:141:53: 141:58
        _5 = Layout::from_size_align(move _6, move _7) -> bb2; // scope 1 at ui/realloc-16687.rs:141:19: 141:59
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:141:19: 141:42
                                         // + literal: Const { ty: fn(usize, usize) -> Result<Layout, LayoutError> {Layout::from_size_align}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = Result::<Layout, LayoutError>::unwrap(move _5) -> bb3; // scope 1 at ui/realloc-16687.rs:141:19: 141:68
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:141:60: 141:66
                                         // + literal: Const { ty: fn(Result<Layout, LayoutError>) -> Layout {Result::<Layout, LayoutError>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = const 8_usize;             // scope 2 at ui/realloc-16687.rs:142:21: 142:30
        _9 = std::ops::Range::<usize> { start: const 0_usize, end: move _10 }; // scope 2 at ui/realloc-16687.rs:142:18: 142:30
        _8 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _9) -> bb4; // scope 2 at ui/realloc-16687.rs:142:18: 142:30
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:142:18: 142:30
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = move _8;                   // scope 2 at ui/realloc-16687.rs:142:18: 142:30
        goto -> bb5;                     // scope 3 at ui/realloc-16687.rs:142:9: 152:10
    }

    bb5: {
        _14 = &mut _11;                  // scope 3 at ui/realloc-16687.rs:142:18: 142:30
        _13 = &mut (*_14);               // scope 3 at ui/realloc-16687.rs:142:18: 142:30
        _12 = <std::ops::Range<usize> as Iterator>::next(move _13) -> bb6; // scope 3 at ui/realloc-16687.rs:142:18: 142:30
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:142:18: 142:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = discriminant(_12);         // scope 3 at ui/realloc-16687.rs:142:18: 142:30
        switchInt(move _15) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 3 at ui/realloc-16687.rs:142:18: 142:30
    }

    bb7: {
        _16 = ((_12 as Some).0: usize);  // scope 3 at ui/realloc-16687.rs:142:13: 142:14
        _23 = _16;                       // scope 4 at ui/realloc-16687.rs:143:50: 143:51
        _24 = CheckedMul(const 2_usize, _23); // scope 4 at ui/realloc-16687.rs:143:46: 143:51
        assert(!move (_24.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _23) -> bb10; // scope 4 at ui/realloc-16687.rs:143:46: 143:51
    }

    bb8: {
        unreachable;                     // scope 3 at ui/realloc-16687.rs:142:18: 142:30
    }

    bb9: {
        return;                          // scope 0 at ui/realloc-16687.rs:153:6: 153:6
    }

    bb10: {
        _22 = move (_24.0: usize);       // scope 4 at ui/realloc-16687.rs:143:46: 143:51
        _25 = Len((*_1));                // scope 4 at ui/realloc-16687.rs:143:39: 143:52
        _26 = Lt(_22, _25);              // scope 4 at ui/realloc-16687.rs:143:39: 143:52
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _22) -> bb11; // scope 4 at ui/realloc-16687.rs:143:39: 143:52
    }

    bb11: {
        _21 = (*_1)[_22];                // scope 4 at ui/realloc-16687.rs:143:39: 143:52
        _30 = _16;                       // scope 4 at ui/realloc-16687.rs:143:65: 143:66
        _31 = CheckedMul(const 2_usize, _30); // scope 4 at ui/realloc-16687.rs:143:61: 143:66
        assert(!move (_31.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _30) -> bb12; // scope 4 at ui/realloc-16687.rs:143:61: 143:66
    }

    bb12: {
        _29 = move (_31.0: usize);       // scope 4 at ui/realloc-16687.rs:143:61: 143:66
        _32 = CheckedAdd(_29, const 1_usize); // scope 4 at ui/realloc-16687.rs:143:61: 143:70
        assert(!move (_32.1: bool), "attempt to compute `{} + {}`, which would overflow", move _29, const 1_usize) -> bb13; // scope 4 at ui/realloc-16687.rs:143:61: 143:70
    }

    bb13: {
        _28 = move (_32.0: usize);       // scope 4 at ui/realloc-16687.rs:143:61: 143:70
        _33 = Len((*_1));                // scope 4 at ui/realloc-16687.rs:143:54: 143:71
        _34 = Lt(_28, _33);              // scope 4 at ui/realloc-16687.rs:143:54: 143:71
        assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _28) -> bb14; // scope 4 at ui/realloc-16687.rs:143:54: 143:71
    }

    bb14: {
        _27 = (*_1)[_28];                // scope 4 at ui/realloc-16687.rs:143:54: 143:71
        _36 = _16;                       // scope 4 at ui/realloc-16687.rs:143:85: 143:86
        _35 = idx_to_size(move _36) -> bb15; // scope 4 at ui/realloc-16687.rs:143:73: 143:87
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:143:73: 143:84
                                         // + literal: Const { ty: fn(usize) -> usize {idx_to_size}, val: Value(<ZST>) }
    }

    bb15: {
        _20 = (move _21, move _27, move _35); // scope 4 at ui/realloc-16687.rs:143:38: 143:88
        _17 = (_20.0: *mut u8);          // scope 4 at ui/realloc-16687.rs:143:18: 143:20
        _18 = (_20.1: *mut u8);          // scope 4 at ui/realloc-16687.rs:143:22: 143:24
        _19 = (_20.2: usize);            // scope 4 at ui/realloc-16687.rs:143:26: 143:34
        _39 = _19;                       // scope 5 at ui/realloc-16687.rs:144:21: 144:29
        _40 = _2;                        // scope 5 at ui/realloc-16687.rs:144:32: 144:40
        _38 = Lt(move _39, move _40);    // scope 5 at ui/realloc-16687.rs:144:21: 144:40
        _37 = Not(move _38);             // scope 5 at ui/realloc-16687.rs:144:13: 144:41
        switchInt(move _37) -> [0: bb17, otherwise: bb16]; // scope 5 at ui/realloc-16687.rs:144:13: 144:41
    }

    bb16: {
        _41 = core::panicking::panic(const "assertion failed: new_size < old_size"); // scope 5 at ui/realloc-16687.rs:144:13: 144:41
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:144:13: 144:41
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _44 = _19;                       // scope 5 at ui/realloc-16687.rs:145:47: 145:55
        _45 = const 1_usize;             // scope 5 at ui/realloc-16687.rs:145:57: 145:62
        _43 = Layout::from_size_align(move _44, move _45) -> bb18; // scope 5 at ui/realloc-16687.rs:145:23: 145:63
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:145:23: 145:46
                                         // + literal: Const { ty: fn(usize, usize) -> Result<Layout, LayoutError> {Layout::from_size_align}, val: Value(<ZST>) }
    }

    bb18: {
        _42 = Result::<Layout, LayoutError>::unwrap(move _43) -> bb19; // scope 5 at ui/realloc-16687.rs:145:23: 145:72
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:145:64: 145:70
                                         // + literal: Const { ty: fn(Result<Layout, LayoutError>) -> Layout {Result::<Layout, LayoutError>::unwrap}, val: Value(<ZST>) }
    }

    bb19: {
        _47 = _17;                       // scope 6 at ui/realloc-16687.rs:147:40: 147:42
        _49 = &_4;                       // scope 6 at ui/realloc-16687.rs:147:44: 147:55
        _48 = <Layout as Clone>::clone(move _49) -> bb20; // scope 6 at ui/realloc-16687.rs:147:44: 147:55
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:147:48: 147:53
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> Layout {<Layout as Clone>::clone}, val: Value(<ZST>) }
    }

    bb20: {
        _51 = &_42;                      // scope 6 at ui/realloc-16687.rs:147:57: 147:68
        _50 = <Layout as Clone>::clone(move _51) -> bb21; // scope 6 at ui/realloc-16687.rs:147:57: 147:68
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:147:61: 147:66
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> Layout {<Layout as Clone>::clone}, val: Value(<ZST>) }
    }

    bb21: {
        _46 = reallocate(move _47, move _48, move _50) -> bb22; // scope 6 at ui/realloc-16687.rs:147:29: 147:69
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:147:29: 147:39
                                         // + literal: Const { ty: unsafe fn(*mut u8, Layout, Layout) -> *mut u8 {reallocate}, val: Value(<ZST>) }
    }

    bb22: {
        _53 = _16;                       // scope 6 at ui/realloc-16687.rs:147:24: 147:25
        _54 = CheckedMul(const 2_usize, _53); // scope 6 at ui/realloc-16687.rs:147:20: 147:25
        assert(!move (_54.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _53) -> bb23; // scope 6 at ui/realloc-16687.rs:147:20: 147:25
    }

    bb23: {
        _52 = move (_54.0: usize);       // scope 6 at ui/realloc-16687.rs:147:20: 147:25
        _55 = Len((*_1));                // scope 6 at ui/realloc-16687.rs:147:13: 147:26
        _56 = Lt(_52, _55);              // scope 6 at ui/realloc-16687.rs:147:13: 147:26
        assert(move _56, "index out of bounds: the length is {} but the index is {}", move _55, _52) -> bb24; // scope 6 at ui/realloc-16687.rs:147:13: 147:26
    }

    bb24: {
        (*_1)[_52] = move _46;           // scope 6 at ui/realloc-16687.rs:147:13: 147:69
        _59 = &(*_1);                    // scope 6 at ui/realloc-16687.rs:148:26: 148:34
        _58 = _59;                       // scope 6 at ui/realloc-16687.rs:148:26: 148:34
        _57 = sanity_check(move _58) -> bb25; // scope 6 at ui/realloc-16687.rs:148:13: 148:35
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:148:13: 148:25
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a [*mut u8]) {sanity_check}, val: Value(<ZST>) }
    }

    bb25: {
        _61 = _18;                       // scope 6 at ui/realloc-16687.rs:150:44: 150:46
        _63 = &_4;                       // scope 6 at ui/realloc-16687.rs:150:48: 150:59
        _62 = <Layout as Clone>::clone(move _63) -> bb26; // scope 6 at ui/realloc-16687.rs:150:48: 150:59
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:150:52: 150:57
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> Layout {<Layout as Clone>::clone}, val: Value(<ZST>) }
    }

    bb26: {
        _65 = &_42;                      // scope 6 at ui/realloc-16687.rs:150:61: 150:72
        _64 = <Layout as Clone>::clone(move _65) -> bb27; // scope 6 at ui/realloc-16687.rs:150:61: 150:72
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:150:65: 150:70
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> Layout {<Layout as Clone>::clone}, val: Value(<ZST>) }
    }

    bb27: {
        _60 = reallocate(move _61, move _62, move _64) -> bb28; // scope 6 at ui/realloc-16687.rs:150:33: 150:73
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:150:33: 150:43
                                         // + literal: Const { ty: unsafe fn(*mut u8, Layout, Layout) -> *mut u8 {reallocate}, val: Value(<ZST>) }
    }

    bb28: {
        _68 = _16;                       // scope 6 at ui/realloc-16687.rs:150:24: 150:25
        _69 = CheckedMul(const 2_usize, _68); // scope 6 at ui/realloc-16687.rs:150:20: 150:25
        assert(!move (_69.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _68) -> bb29; // scope 6 at ui/realloc-16687.rs:150:20: 150:25
    }

    bb29: {
        _67 = move (_69.0: usize);       // scope 6 at ui/realloc-16687.rs:150:20: 150:25
        _70 = CheckedAdd(_67, const 1_usize); // scope 6 at ui/realloc-16687.rs:150:20: 150:29
        assert(!move (_70.1: bool), "attempt to compute `{} + {}`, which would overflow", move _67, const 1_usize) -> bb30; // scope 6 at ui/realloc-16687.rs:150:20: 150:29
    }

    bb30: {
        _66 = move (_70.0: usize);       // scope 6 at ui/realloc-16687.rs:150:20: 150:29
        _71 = Len((*_1));                // scope 6 at ui/realloc-16687.rs:150:13: 150:30
        _72 = Lt(_66, _71);              // scope 6 at ui/realloc-16687.rs:150:13: 150:30
        assert(move _72, "index out of bounds: the length is {} but the index is {}", move _71, _66) -> bb31; // scope 6 at ui/realloc-16687.rs:150:13: 150:30
    }

    bb31: {
        (*_1)[_66] = move _60;           // scope 6 at ui/realloc-16687.rs:150:13: 150:73
        _75 = &(*_1);                    // scope 6 at ui/realloc-16687.rs:151:26: 151:34
        _74 = _75;                       // scope 6 at ui/realloc-16687.rs:151:26: 151:34
        _73 = sanity_check(move _74) -> bb5; // scope 6 at ui/realloc-16687.rs:151:13: 151:35
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:151:13: 151:25
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a [*mut u8]) {sanity_check}, val: Value(<ZST>) }
    }
}

fn test_3(_1: &mut [*mut u8]) -> () {
    debug ascend => _1;                  // in scope 0 at ui/realloc-16687.rs:156:22: 156:28
    let mut _0: ();                      // return place in scope 0 at ui/realloc-16687.rs:156:46: 156:46
    let _2: usize;                       // in scope 0 at ui/realloc-16687.rs:157:13: 157:21
    let mut _3: usize;                   // in scope 0 at ui/realloc-16687.rs:157:36: 157:45
    let mut _5: std::result::Result<std::alloc::Layout, std::alloc::LayoutError>; // in scope 0 at ui/realloc-16687.rs:158:19: 158:59
    let mut _6: usize;                   // in scope 0 at ui/realloc-16687.rs:158:43: 158:51
    let mut _7: usize;                   // in scope 0 at ui/realloc-16687.rs:158:53: 158:58
    let mut _8: std::iter::Rev<std::ops::Range<usize>>; // in scope 0 at ui/realloc-16687.rs:159:18: 159:38
    let mut _9: std::iter::Rev<std::ops::Range<usize>>; // in scope 0 at ui/realloc-16687.rs:159:18: 159:38
    let mut _10: std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:159:18: 159:32
    let mut _11: usize;                  // in scope 0 at ui/realloc-16687.rs:159:22: 159:31
    let mut _13: std::option::Option<usize>; // in scope 0 at ui/realloc-16687.rs:159:18: 159:38
    let mut _14: &mut std::iter::Rev<std::ops::Range<usize>>; // in scope 0 at ui/realloc-16687.rs:159:18: 159:38
    let mut _15: &mut std::iter::Rev<std::ops::Range<usize>>; // in scope 0 at ui/realloc-16687.rs:159:18: 159:38
    let mut _16: isize;                  // in scope 0 at ui/realloc-16687.rs:159:9: 169:10
    let mut _21: (*mut u8, *mut u8, usize); // in scope 0 at ui/realloc-16687.rs:160:38: 160:88
    let mut _22: *mut u8;                // in scope 0 at ui/realloc-16687.rs:160:39: 160:52
    let _23: usize;                      // in scope 0 at ui/realloc-16687.rs:160:46: 160:51
    let mut _24: usize;                  // in scope 0 at ui/realloc-16687.rs:160:50: 160:51
    let mut _25: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:160:46: 160:51
    let mut _26: usize;                  // in scope 0 at ui/realloc-16687.rs:160:39: 160:52
    let mut _27: bool;                   // in scope 0 at ui/realloc-16687.rs:160:39: 160:52
    let mut _28: *mut u8;                // in scope 0 at ui/realloc-16687.rs:160:54: 160:71
    let _29: usize;                      // in scope 0 at ui/realloc-16687.rs:160:61: 160:70
    let mut _30: usize;                  // in scope 0 at ui/realloc-16687.rs:160:61: 160:66
    let mut _31: usize;                  // in scope 0 at ui/realloc-16687.rs:160:65: 160:66
    let mut _32: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:160:61: 160:66
    let mut _33: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:160:61: 160:70
    let mut _34: usize;                  // in scope 0 at ui/realloc-16687.rs:160:54: 160:71
    let mut _35: bool;                   // in scope 0 at ui/realloc-16687.rs:160:54: 160:71
    let mut _36: usize;                  // in scope 0 at ui/realloc-16687.rs:160:73: 160:87
    let mut _37: usize;                  // in scope 0 at ui/realloc-16687.rs:160:85: 160:86
    let mut _38: bool;                   // in scope 0 at ui/realloc-16687.rs:161:13: 161:41
    let mut _39: bool;                   // in scope 0 at ui/realloc-16687.rs:161:21: 161:40
    let mut _40: usize;                  // in scope 0 at ui/realloc-16687.rs:161:21: 161:29
    let mut _41: usize;                  // in scope 0 at ui/realloc-16687.rs:161:32: 161:40
    let mut _42: !;                      // in scope 0 at ui/realloc-16687.rs:161:13: 161:41
    let mut _44: std::result::Result<std::alloc::Layout, std::alloc::LayoutError>; // in scope 0 at ui/realloc-16687.rs:162:23: 162:63
    let mut _45: usize;                  // in scope 0 at ui/realloc-16687.rs:162:47: 162:55
    let mut _46: usize;                  // in scope 0 at ui/realloc-16687.rs:162:57: 162:62
    let mut _47: *mut u8;                // in scope 0 at ui/realloc-16687.rs:164:33: 164:73
    let mut _48: *mut u8;                // in scope 0 at ui/realloc-16687.rs:164:44: 164:46
    let mut _49: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:164:48: 164:59
    let mut _50: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:164:48: 164:59
    let mut _51: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:164:61: 164:72
    let mut _52: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:164:61: 164:72
    let _53: usize;                      // in scope 0 at ui/realloc-16687.rs:164:20: 164:29
    let mut _54: usize;                  // in scope 0 at ui/realloc-16687.rs:164:20: 164:25
    let mut _55: usize;                  // in scope 0 at ui/realloc-16687.rs:164:24: 164:25
    let mut _56: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:164:20: 164:25
    let mut _57: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:164:20: 164:29
    let mut _58: usize;                  // in scope 0 at ui/realloc-16687.rs:164:13: 164:30
    let mut _59: bool;                   // in scope 0 at ui/realloc-16687.rs:164:13: 164:30
    let _60: ();                         // in scope 0 at ui/realloc-16687.rs:165:13: 165:35
    let mut _61: &[*mut u8];             // in scope 0 at ui/realloc-16687.rs:165:26: 165:34
    let _62: &[*mut u8];                 // in scope 0 at ui/realloc-16687.rs:165:26: 165:34
    let mut _63: *mut u8;                // in scope 0 at ui/realloc-16687.rs:167:29: 167:69
    let mut _64: *mut u8;                // in scope 0 at ui/realloc-16687.rs:167:40: 167:42
    let mut _65: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:167:44: 167:55
    let mut _66: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:167:44: 167:55
    let mut _67: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:167:57: 167:68
    let mut _68: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:167:57: 167:68
    let _69: usize;                      // in scope 0 at ui/realloc-16687.rs:167:20: 167:25
    let mut _70: usize;                  // in scope 0 at ui/realloc-16687.rs:167:24: 167:25
    let mut _71: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:167:20: 167:25
    let mut _72: usize;                  // in scope 0 at ui/realloc-16687.rs:167:13: 167:26
    let mut _73: bool;                   // in scope 0 at ui/realloc-16687.rs:167:13: 167:26
    let _74: ();                         // in scope 0 at ui/realloc-16687.rs:168:13: 168:35
    let mut _75: &[*mut u8];             // in scope 0 at ui/realloc-16687.rs:168:26: 168:34
    let _76: &[*mut u8];                 // in scope 0 at ui/realloc-16687.rs:168:26: 168:34
    scope 1 {
        debug new_size => _2;            // in scope 1 at ui/realloc-16687.rs:157:13: 157:21
        let _4: std::alloc::Layout;      // in scope 1 at ui/realloc-16687.rs:158:13: 158:16
        scope 2 {
            debug new => _4;             // in scope 2 at ui/realloc-16687.rs:158:13: 158:16
            let mut _12: std::iter::Rev<std::ops::Range<usize>>; // in scope 2 at ui/realloc-16687.rs:159:18: 159:38
            scope 3 {
                debug iter => _12;       // in scope 3 at ui/realloc-16687.rs:159:18: 159:38
                let _17: usize;          // in scope 3 at ui/realloc-16687.rs:159:13: 159:14
                scope 4 {
                    debug i => _17;      // in scope 4 at ui/realloc-16687.rs:159:13: 159:14
                    let _18: *mut u8;    // in scope 4 at ui/realloc-16687.rs:160:18: 160:20
                    let _19: *mut u8;    // in scope 4 at ui/realloc-16687.rs:160:22: 160:24
                    let _20: usize;      // in scope 4 at ui/realloc-16687.rs:160:26: 160:34
                    scope 5 {
                        debug p0 => _18; // in scope 5 at ui/realloc-16687.rs:160:18: 160:20
                        debug p1 => _19; // in scope 5 at ui/realloc-16687.rs:160:22: 160:24
                        debug old_size => _20; // in scope 5 at ui/realloc-16687.rs:160:26: 160:34
                        let _43: std::alloc::Layout; // in scope 5 at ui/realloc-16687.rs:162:17: 162:20
                        scope 6 {
                            debug old => _43; // in scope 6 at ui/realloc-16687.rs:162:17: 162:20
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const 15_usize;             // scope 0 at ui/realloc-16687.rs:157:36: 157:45
        _2 = idx_to_size(move _3) -> bb1; // scope 0 at ui/realloc-16687.rs:157:24: 157:46
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:157:24: 157:35
                                         // + literal: Const { ty: fn(usize) -> usize {idx_to_size}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _2;                         // scope 1 at ui/realloc-16687.rs:158:43: 158:51
        _7 = const 1_usize;              // scope 1 at ui/realloc-16687.rs:158:53: 158:58
        _5 = Layout::from_size_align(move _6, move _7) -> bb2; // scope 1 at ui/realloc-16687.rs:158:19: 158:59
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:158:19: 158:42
                                         // + literal: Const { ty: fn(usize, usize) -> Result<Layout, LayoutError> {Layout::from_size_align}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = Result::<Layout, LayoutError>::unwrap(move _5) -> bb3; // scope 1 at ui/realloc-16687.rs:158:19: 158:68
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:158:60: 158:66
                                         // + literal: Const { ty: fn(Result<Layout, LayoutError>) -> Layout {Result::<Layout, LayoutError>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = const 8_usize;             // scope 2 at ui/realloc-16687.rs:159:22: 159:31
        _10 = std::ops::Range::<usize> { start: const 0_usize, end: move _11 }; // scope 2 at ui/realloc-16687.rs:159:18: 159:32
        _9 = <std::ops::Range<usize> as Iterator>::rev(move _10) -> bb4; // scope 2 at ui/realloc-16687.rs:159:18: 159:38
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:159:33: 159:36
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> Rev<std::ops::Range<usize>> {<std::ops::Range<usize> as Iterator>::rev}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = <Rev<std::ops::Range<usize>> as IntoIterator>::into_iter(move _9) -> bb5; // scope 2 at ui/realloc-16687.rs:159:18: 159:38
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:159:18: 159:38
                                         // + literal: Const { ty: fn(Rev<std::ops::Range<usize>>) -> <Rev<std::ops::Range<usize>> as IntoIterator>::IntoIter {<Rev<std::ops::Range<usize>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = move _8;                   // scope 2 at ui/realloc-16687.rs:159:18: 159:38
        goto -> bb6;                     // scope 3 at ui/realloc-16687.rs:159:9: 169:10
    }

    bb6: {
        _15 = &mut _12;                  // scope 3 at ui/realloc-16687.rs:159:18: 159:38
        _14 = &mut (*_15);               // scope 3 at ui/realloc-16687.rs:159:18: 159:38
        _13 = <Rev<std::ops::Range<usize>> as Iterator>::next(move _14) -> bb7; // scope 3 at ui/realloc-16687.rs:159:18: 159:38
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:159:18: 159:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut Rev<std::ops::Range<usize>>) -> Option<<Rev<std::ops::Range<usize>> as Iterator>::Item> {<Rev<std::ops::Range<usize>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = discriminant(_13);         // scope 3 at ui/realloc-16687.rs:159:18: 159:38
        switchInt(move _16) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 3 at ui/realloc-16687.rs:159:18: 159:38
    }

    bb8: {
        _17 = ((_13 as Some).0: usize);  // scope 3 at ui/realloc-16687.rs:159:13: 159:14
        _24 = _17;                       // scope 4 at ui/realloc-16687.rs:160:50: 160:51
        _25 = CheckedMul(const 2_usize, _24); // scope 4 at ui/realloc-16687.rs:160:46: 160:51
        assert(!move (_25.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _24) -> bb11; // scope 4 at ui/realloc-16687.rs:160:46: 160:51
    }

    bb9: {
        unreachable;                     // scope 3 at ui/realloc-16687.rs:159:18: 159:38
    }

    bb10: {
        return;                          // scope 0 at ui/realloc-16687.rs:170:6: 170:6
    }

    bb11: {
        _23 = move (_25.0: usize);       // scope 4 at ui/realloc-16687.rs:160:46: 160:51
        _26 = Len((*_1));                // scope 4 at ui/realloc-16687.rs:160:39: 160:52
        _27 = Lt(_23, _26);              // scope 4 at ui/realloc-16687.rs:160:39: 160:52
        assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _23) -> bb12; // scope 4 at ui/realloc-16687.rs:160:39: 160:52
    }

    bb12: {
        _22 = (*_1)[_23];                // scope 4 at ui/realloc-16687.rs:160:39: 160:52
        _31 = _17;                       // scope 4 at ui/realloc-16687.rs:160:65: 160:66
        _32 = CheckedMul(const 2_usize, _31); // scope 4 at ui/realloc-16687.rs:160:61: 160:66
        assert(!move (_32.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _31) -> bb13; // scope 4 at ui/realloc-16687.rs:160:61: 160:66
    }

    bb13: {
        _30 = move (_32.0: usize);       // scope 4 at ui/realloc-16687.rs:160:61: 160:66
        _33 = CheckedAdd(_30, const 1_usize); // scope 4 at ui/realloc-16687.rs:160:61: 160:70
        assert(!move (_33.1: bool), "attempt to compute `{} + {}`, which would overflow", move _30, const 1_usize) -> bb14; // scope 4 at ui/realloc-16687.rs:160:61: 160:70
    }

    bb14: {
        _29 = move (_33.0: usize);       // scope 4 at ui/realloc-16687.rs:160:61: 160:70
        _34 = Len((*_1));                // scope 4 at ui/realloc-16687.rs:160:54: 160:71
        _35 = Lt(_29, _34);              // scope 4 at ui/realloc-16687.rs:160:54: 160:71
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _29) -> bb15; // scope 4 at ui/realloc-16687.rs:160:54: 160:71
    }

    bb15: {
        _28 = (*_1)[_29];                // scope 4 at ui/realloc-16687.rs:160:54: 160:71
        _37 = _17;                       // scope 4 at ui/realloc-16687.rs:160:85: 160:86
        _36 = idx_to_size(move _37) -> bb16; // scope 4 at ui/realloc-16687.rs:160:73: 160:87
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:160:73: 160:84
                                         // + literal: Const { ty: fn(usize) -> usize {idx_to_size}, val: Value(<ZST>) }
    }

    bb16: {
        _21 = (move _22, move _28, move _36); // scope 4 at ui/realloc-16687.rs:160:38: 160:88
        _18 = (_21.0: *mut u8);          // scope 4 at ui/realloc-16687.rs:160:18: 160:20
        _19 = (_21.1: *mut u8);          // scope 4 at ui/realloc-16687.rs:160:22: 160:24
        _20 = (_21.2: usize);            // scope 4 at ui/realloc-16687.rs:160:26: 160:34
        _40 = _20;                       // scope 5 at ui/realloc-16687.rs:161:21: 161:29
        _41 = _2;                        // scope 5 at ui/realloc-16687.rs:161:32: 161:40
        _39 = Lt(move _40, move _41);    // scope 5 at ui/realloc-16687.rs:161:21: 161:40
        _38 = Not(move _39);             // scope 5 at ui/realloc-16687.rs:161:13: 161:41
        switchInt(move _38) -> [0: bb18, otherwise: bb17]; // scope 5 at ui/realloc-16687.rs:161:13: 161:41
    }

    bb17: {
        _42 = core::panicking::panic(const "assertion failed: old_size < new_size"); // scope 5 at ui/realloc-16687.rs:161:13: 161:41
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:161:13: 161:41
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _45 = _20;                       // scope 5 at ui/realloc-16687.rs:162:47: 162:55
        _46 = const 1_usize;             // scope 5 at ui/realloc-16687.rs:162:57: 162:62
        _44 = Layout::from_size_align(move _45, move _46) -> bb19; // scope 5 at ui/realloc-16687.rs:162:23: 162:63
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:162:23: 162:46
                                         // + literal: Const { ty: fn(usize, usize) -> Result<Layout, LayoutError> {Layout::from_size_align}, val: Value(<ZST>) }
    }

    bb19: {
        _43 = Result::<Layout, LayoutError>::unwrap(move _44) -> bb20; // scope 5 at ui/realloc-16687.rs:162:23: 162:72
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:162:64: 162:70
                                         // + literal: Const { ty: fn(Result<Layout, LayoutError>) -> Layout {Result::<Layout, LayoutError>::unwrap}, val: Value(<ZST>) }
    }

    bb20: {
        _48 = _19;                       // scope 6 at ui/realloc-16687.rs:164:44: 164:46
        _50 = &_43;                      // scope 6 at ui/realloc-16687.rs:164:48: 164:59
        _49 = <Layout as Clone>::clone(move _50) -> bb21; // scope 6 at ui/realloc-16687.rs:164:48: 164:59
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:164:52: 164:57
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> Layout {<Layout as Clone>::clone}, val: Value(<ZST>) }
    }

    bb21: {
        _52 = &_4;                       // scope 6 at ui/realloc-16687.rs:164:61: 164:72
        _51 = <Layout as Clone>::clone(move _52) -> bb22; // scope 6 at ui/realloc-16687.rs:164:61: 164:72
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:164:65: 164:70
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> Layout {<Layout as Clone>::clone}, val: Value(<ZST>) }
    }

    bb22: {
        _47 = reallocate(move _48, move _49, move _51) -> bb23; // scope 6 at ui/realloc-16687.rs:164:33: 164:73
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:164:33: 164:43
                                         // + literal: Const { ty: unsafe fn(*mut u8, Layout, Layout) -> *mut u8 {reallocate}, val: Value(<ZST>) }
    }

    bb23: {
        _55 = _17;                       // scope 6 at ui/realloc-16687.rs:164:24: 164:25
        _56 = CheckedMul(const 2_usize, _55); // scope 6 at ui/realloc-16687.rs:164:20: 164:25
        assert(!move (_56.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _55) -> bb24; // scope 6 at ui/realloc-16687.rs:164:20: 164:25
    }

    bb24: {
        _54 = move (_56.0: usize);       // scope 6 at ui/realloc-16687.rs:164:20: 164:25
        _57 = CheckedAdd(_54, const 1_usize); // scope 6 at ui/realloc-16687.rs:164:20: 164:29
        assert(!move (_57.1: bool), "attempt to compute `{} + {}`, which would overflow", move _54, const 1_usize) -> bb25; // scope 6 at ui/realloc-16687.rs:164:20: 164:29
    }

    bb25: {
        _53 = move (_57.0: usize);       // scope 6 at ui/realloc-16687.rs:164:20: 164:29
        _58 = Len((*_1));                // scope 6 at ui/realloc-16687.rs:164:13: 164:30
        _59 = Lt(_53, _58);              // scope 6 at ui/realloc-16687.rs:164:13: 164:30
        assert(move _59, "index out of bounds: the length is {} but the index is {}", move _58, _53) -> bb26; // scope 6 at ui/realloc-16687.rs:164:13: 164:30
    }

    bb26: {
        (*_1)[_53] = move _47;           // scope 6 at ui/realloc-16687.rs:164:13: 164:73
        _62 = &(*_1);                    // scope 6 at ui/realloc-16687.rs:165:26: 165:34
        _61 = _62;                       // scope 6 at ui/realloc-16687.rs:165:26: 165:34
        _60 = sanity_check(move _61) -> bb27; // scope 6 at ui/realloc-16687.rs:165:13: 165:35
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:165:13: 165:25
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a [*mut u8]) {sanity_check}, val: Value(<ZST>) }
    }

    bb27: {
        _64 = _18;                       // scope 6 at ui/realloc-16687.rs:167:40: 167:42
        _66 = &_43;                      // scope 6 at ui/realloc-16687.rs:167:44: 167:55
        _65 = <Layout as Clone>::clone(move _66) -> bb28; // scope 6 at ui/realloc-16687.rs:167:44: 167:55
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:167:48: 167:53
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> Layout {<Layout as Clone>::clone}, val: Value(<ZST>) }
    }

    bb28: {
        _68 = &_4;                       // scope 6 at ui/realloc-16687.rs:167:57: 167:68
        _67 = <Layout as Clone>::clone(move _68) -> bb29; // scope 6 at ui/realloc-16687.rs:167:57: 167:68
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:167:61: 167:66
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> Layout {<Layout as Clone>::clone}, val: Value(<ZST>) }
    }

    bb29: {
        _63 = reallocate(move _64, move _65, move _67) -> bb30; // scope 6 at ui/realloc-16687.rs:167:29: 167:69
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:167:29: 167:39
                                         // + literal: Const { ty: unsafe fn(*mut u8, Layout, Layout) -> *mut u8 {reallocate}, val: Value(<ZST>) }
    }

    bb30: {
        _70 = _17;                       // scope 6 at ui/realloc-16687.rs:167:24: 167:25
        _71 = CheckedMul(const 2_usize, _70); // scope 6 at ui/realloc-16687.rs:167:20: 167:25
        assert(!move (_71.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _70) -> bb31; // scope 6 at ui/realloc-16687.rs:167:20: 167:25
    }

    bb31: {
        _69 = move (_71.0: usize);       // scope 6 at ui/realloc-16687.rs:167:20: 167:25
        _72 = Len((*_1));                // scope 6 at ui/realloc-16687.rs:167:13: 167:26
        _73 = Lt(_69, _72);              // scope 6 at ui/realloc-16687.rs:167:13: 167:26
        assert(move _73, "index out of bounds: the length is {} but the index is {}", move _72, _69) -> bb32; // scope 6 at ui/realloc-16687.rs:167:13: 167:26
    }

    bb32: {
        (*_1)[_69] = move _63;           // scope 6 at ui/realloc-16687.rs:167:13: 167:69
        _76 = &(*_1);                    // scope 6 at ui/realloc-16687.rs:168:26: 168:34
        _75 = _76;                       // scope 6 at ui/realloc-16687.rs:168:26: 168:34
        _74 = sanity_check(move _75) -> bb6; // scope 6 at ui/realloc-16687.rs:168:13: 168:35
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:168:13: 168:25
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a [*mut u8]) {sanity_check}, val: Value(<ZST>) }
    }
}

fn test_4(_1: &mut [*mut u8]) -> () {
    debug ascend => _1;                  // in scope 0 at ui/realloc-16687.rs:173:22: 173:28
    let mut _0: ();                      // return place in scope 0 at ui/realloc-16687.rs:173:46: 173:46
    let _2: usize;                       // in scope 0 at ui/realloc-16687.rs:174:13: 174:21
    let mut _3: usize;                   // in scope 0 at ui/realloc-16687.rs:174:36: 174:45
    let mut _5: std::result::Result<std::alloc::Layout, std::alloc::LayoutError>; // in scope 0 at ui/realloc-16687.rs:175:19: 175:59
    let mut _6: usize;                   // in scope 0 at ui/realloc-16687.rs:175:43: 175:51
    let mut _7: usize;                   // in scope 0 at ui/realloc-16687.rs:175:53: 175:58
    let mut _8: std::iter::Rev<std::ops::Range<usize>>; // in scope 0 at ui/realloc-16687.rs:176:18: 176:38
    let mut _9: std::iter::Rev<std::ops::Range<usize>>; // in scope 0 at ui/realloc-16687.rs:176:18: 176:38
    let mut _10: std::ops::Range<usize>; // in scope 0 at ui/realloc-16687.rs:176:18: 176:32
    let mut _11: usize;                  // in scope 0 at ui/realloc-16687.rs:176:22: 176:31
    let mut _13: std::option::Option<usize>; // in scope 0 at ui/realloc-16687.rs:176:18: 176:38
    let mut _14: &mut std::iter::Rev<std::ops::Range<usize>>; // in scope 0 at ui/realloc-16687.rs:176:18: 176:38
    let mut _15: &mut std::iter::Rev<std::ops::Range<usize>>; // in scope 0 at ui/realloc-16687.rs:176:18: 176:38
    let mut _16: isize;                  // in scope 0 at ui/realloc-16687.rs:176:9: 186:10
    let mut _21: (*mut u8, *mut u8, usize); // in scope 0 at ui/realloc-16687.rs:177:38: 177:88
    let mut _22: *mut u8;                // in scope 0 at ui/realloc-16687.rs:177:39: 177:52
    let _23: usize;                      // in scope 0 at ui/realloc-16687.rs:177:46: 177:51
    let mut _24: usize;                  // in scope 0 at ui/realloc-16687.rs:177:50: 177:51
    let mut _25: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:177:46: 177:51
    let mut _26: usize;                  // in scope 0 at ui/realloc-16687.rs:177:39: 177:52
    let mut _27: bool;                   // in scope 0 at ui/realloc-16687.rs:177:39: 177:52
    let mut _28: *mut u8;                // in scope 0 at ui/realloc-16687.rs:177:54: 177:71
    let _29: usize;                      // in scope 0 at ui/realloc-16687.rs:177:61: 177:70
    let mut _30: usize;                  // in scope 0 at ui/realloc-16687.rs:177:61: 177:66
    let mut _31: usize;                  // in scope 0 at ui/realloc-16687.rs:177:65: 177:66
    let mut _32: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:177:61: 177:66
    let mut _33: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:177:61: 177:70
    let mut _34: usize;                  // in scope 0 at ui/realloc-16687.rs:177:54: 177:71
    let mut _35: bool;                   // in scope 0 at ui/realloc-16687.rs:177:54: 177:71
    let mut _36: usize;                  // in scope 0 at ui/realloc-16687.rs:177:73: 177:87
    let mut _37: usize;                  // in scope 0 at ui/realloc-16687.rs:177:85: 177:86
    let mut _38: bool;                   // in scope 0 at ui/realloc-16687.rs:178:13: 178:41
    let mut _39: bool;                   // in scope 0 at ui/realloc-16687.rs:178:21: 178:40
    let mut _40: usize;                  // in scope 0 at ui/realloc-16687.rs:178:21: 178:29
    let mut _41: usize;                  // in scope 0 at ui/realloc-16687.rs:178:32: 178:40
    let mut _42: !;                      // in scope 0 at ui/realloc-16687.rs:178:13: 178:41
    let mut _44: std::result::Result<std::alloc::Layout, std::alloc::LayoutError>; // in scope 0 at ui/realloc-16687.rs:179:23: 179:63
    let mut _45: usize;                  // in scope 0 at ui/realloc-16687.rs:179:47: 179:55
    let mut _46: usize;                  // in scope 0 at ui/realloc-16687.rs:179:57: 179:62
    let mut _47: *mut u8;                // in scope 0 at ui/realloc-16687.rs:181:33: 181:73
    let mut _48: *mut u8;                // in scope 0 at ui/realloc-16687.rs:181:44: 181:46
    let mut _49: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:181:48: 181:59
    let mut _50: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:181:48: 181:59
    let mut _51: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:181:61: 181:72
    let mut _52: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:181:61: 181:72
    let _53: usize;                      // in scope 0 at ui/realloc-16687.rs:181:20: 181:29
    let mut _54: usize;                  // in scope 0 at ui/realloc-16687.rs:181:20: 181:25
    let mut _55: usize;                  // in scope 0 at ui/realloc-16687.rs:181:24: 181:25
    let mut _56: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:181:20: 181:25
    let mut _57: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:181:20: 181:29
    let mut _58: usize;                  // in scope 0 at ui/realloc-16687.rs:181:13: 181:30
    let mut _59: bool;                   // in scope 0 at ui/realloc-16687.rs:181:13: 181:30
    let _60: ();                         // in scope 0 at ui/realloc-16687.rs:182:13: 182:35
    let mut _61: &[*mut u8];             // in scope 0 at ui/realloc-16687.rs:182:26: 182:34
    let _62: &[*mut u8];                 // in scope 0 at ui/realloc-16687.rs:182:26: 182:34
    let mut _63: *mut u8;                // in scope 0 at ui/realloc-16687.rs:184:29: 184:69
    let mut _64: *mut u8;                // in scope 0 at ui/realloc-16687.rs:184:40: 184:42
    let mut _65: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:184:44: 184:55
    let mut _66: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:184:44: 184:55
    let mut _67: std::alloc::Layout;     // in scope 0 at ui/realloc-16687.rs:184:57: 184:68
    let mut _68: &std::alloc::Layout;    // in scope 0 at ui/realloc-16687.rs:184:57: 184:68
    let _69: usize;                      // in scope 0 at ui/realloc-16687.rs:184:20: 184:25
    let mut _70: usize;                  // in scope 0 at ui/realloc-16687.rs:184:24: 184:25
    let mut _71: (usize, bool);          // in scope 0 at ui/realloc-16687.rs:184:20: 184:25
    let mut _72: usize;                  // in scope 0 at ui/realloc-16687.rs:184:13: 184:26
    let mut _73: bool;                   // in scope 0 at ui/realloc-16687.rs:184:13: 184:26
    let _74: ();                         // in scope 0 at ui/realloc-16687.rs:185:13: 185:35
    let mut _75: &[*mut u8];             // in scope 0 at ui/realloc-16687.rs:185:26: 185:34
    let _76: &[*mut u8];                 // in scope 0 at ui/realloc-16687.rs:185:26: 185:34
    scope 1 {
        debug old_size => _2;            // in scope 1 at ui/realloc-16687.rs:174:13: 174:21
        let _4: std::alloc::Layout;      // in scope 1 at ui/realloc-16687.rs:175:13: 175:16
        scope 2 {
            debug old => _4;             // in scope 2 at ui/realloc-16687.rs:175:13: 175:16
            let mut _12: std::iter::Rev<std::ops::Range<usize>>; // in scope 2 at ui/realloc-16687.rs:176:18: 176:38
            scope 3 {
                debug iter => _12;       // in scope 3 at ui/realloc-16687.rs:176:18: 176:38
                let _17: usize;          // in scope 3 at ui/realloc-16687.rs:176:13: 176:14
                scope 4 {
                    debug i => _17;      // in scope 4 at ui/realloc-16687.rs:176:13: 176:14
                    let _18: *mut u8;    // in scope 4 at ui/realloc-16687.rs:177:18: 177:20
                    let _19: *mut u8;    // in scope 4 at ui/realloc-16687.rs:177:22: 177:24
                    let _20: usize;      // in scope 4 at ui/realloc-16687.rs:177:26: 177:34
                    scope 5 {
                        debug p0 => _18; // in scope 5 at ui/realloc-16687.rs:177:18: 177:20
                        debug p1 => _19; // in scope 5 at ui/realloc-16687.rs:177:22: 177:24
                        debug new_size => _20; // in scope 5 at ui/realloc-16687.rs:177:26: 177:34
                        let _43: std::alloc::Layout; // in scope 5 at ui/realloc-16687.rs:179:17: 179:20
                        scope 6 {
                            debug new => _43; // in scope 6 at ui/realloc-16687.rs:179:17: 179:20
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const 15_usize;             // scope 0 at ui/realloc-16687.rs:174:36: 174:45
        _2 = idx_to_size(move _3) -> bb1; // scope 0 at ui/realloc-16687.rs:174:24: 174:46
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:174:24: 174:35
                                         // + literal: Const { ty: fn(usize) -> usize {idx_to_size}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _2;                         // scope 1 at ui/realloc-16687.rs:175:43: 175:51
        _7 = const 1_usize;              // scope 1 at ui/realloc-16687.rs:175:53: 175:58
        _5 = Layout::from_size_align(move _6, move _7) -> bb2; // scope 1 at ui/realloc-16687.rs:175:19: 175:59
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:175:19: 175:42
                                         // + literal: Const { ty: fn(usize, usize) -> Result<Layout, LayoutError> {Layout::from_size_align}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = Result::<Layout, LayoutError>::unwrap(move _5) -> bb3; // scope 1 at ui/realloc-16687.rs:175:19: 175:68
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:175:60: 175:66
                                         // + literal: Const { ty: fn(Result<Layout, LayoutError>) -> Layout {Result::<Layout, LayoutError>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = const 8_usize;             // scope 2 at ui/realloc-16687.rs:176:22: 176:31
        _10 = std::ops::Range::<usize> { start: const 0_usize, end: move _11 }; // scope 2 at ui/realloc-16687.rs:176:18: 176:32
        _9 = <std::ops::Range<usize> as Iterator>::rev(move _10) -> bb4; // scope 2 at ui/realloc-16687.rs:176:18: 176:38
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:176:33: 176:36
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> Rev<std::ops::Range<usize>> {<std::ops::Range<usize> as Iterator>::rev}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = <Rev<std::ops::Range<usize>> as IntoIterator>::into_iter(move _9) -> bb5; // scope 2 at ui/realloc-16687.rs:176:18: 176:38
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:176:18: 176:38
                                         // + literal: Const { ty: fn(Rev<std::ops::Range<usize>>) -> <Rev<std::ops::Range<usize>> as IntoIterator>::IntoIter {<Rev<std::ops::Range<usize>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = move _8;                   // scope 2 at ui/realloc-16687.rs:176:18: 176:38
        goto -> bb6;                     // scope 3 at ui/realloc-16687.rs:176:9: 186:10
    }

    bb6: {
        _15 = &mut _12;                  // scope 3 at ui/realloc-16687.rs:176:18: 176:38
        _14 = &mut (*_15);               // scope 3 at ui/realloc-16687.rs:176:18: 176:38
        _13 = <Rev<std::ops::Range<usize>> as Iterator>::next(move _14) -> bb7; // scope 3 at ui/realloc-16687.rs:176:18: 176:38
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:176:18: 176:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut Rev<std::ops::Range<usize>>) -> Option<<Rev<std::ops::Range<usize>> as Iterator>::Item> {<Rev<std::ops::Range<usize>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = discriminant(_13);         // scope 3 at ui/realloc-16687.rs:176:18: 176:38
        switchInt(move _16) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 3 at ui/realloc-16687.rs:176:18: 176:38
    }

    bb8: {
        _17 = ((_13 as Some).0: usize);  // scope 3 at ui/realloc-16687.rs:176:13: 176:14
        _24 = _17;                       // scope 4 at ui/realloc-16687.rs:177:50: 177:51
        _25 = CheckedMul(const 2_usize, _24); // scope 4 at ui/realloc-16687.rs:177:46: 177:51
        assert(!move (_25.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _24) -> bb11; // scope 4 at ui/realloc-16687.rs:177:46: 177:51
    }

    bb9: {
        unreachable;                     // scope 3 at ui/realloc-16687.rs:176:18: 176:38
    }

    bb10: {
        return;                          // scope 0 at ui/realloc-16687.rs:187:6: 187:6
    }

    bb11: {
        _23 = move (_25.0: usize);       // scope 4 at ui/realloc-16687.rs:177:46: 177:51
        _26 = Len((*_1));                // scope 4 at ui/realloc-16687.rs:177:39: 177:52
        _27 = Lt(_23, _26);              // scope 4 at ui/realloc-16687.rs:177:39: 177:52
        assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _23) -> bb12; // scope 4 at ui/realloc-16687.rs:177:39: 177:52
    }

    bb12: {
        _22 = (*_1)[_23];                // scope 4 at ui/realloc-16687.rs:177:39: 177:52
        _31 = _17;                       // scope 4 at ui/realloc-16687.rs:177:65: 177:66
        _32 = CheckedMul(const 2_usize, _31); // scope 4 at ui/realloc-16687.rs:177:61: 177:66
        assert(!move (_32.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _31) -> bb13; // scope 4 at ui/realloc-16687.rs:177:61: 177:66
    }

    bb13: {
        _30 = move (_32.0: usize);       // scope 4 at ui/realloc-16687.rs:177:61: 177:66
        _33 = CheckedAdd(_30, const 1_usize); // scope 4 at ui/realloc-16687.rs:177:61: 177:70
        assert(!move (_33.1: bool), "attempt to compute `{} + {}`, which would overflow", move _30, const 1_usize) -> bb14; // scope 4 at ui/realloc-16687.rs:177:61: 177:70
    }

    bb14: {
        _29 = move (_33.0: usize);       // scope 4 at ui/realloc-16687.rs:177:61: 177:70
        _34 = Len((*_1));                // scope 4 at ui/realloc-16687.rs:177:54: 177:71
        _35 = Lt(_29, _34);              // scope 4 at ui/realloc-16687.rs:177:54: 177:71
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _29) -> bb15; // scope 4 at ui/realloc-16687.rs:177:54: 177:71
    }

    bb15: {
        _28 = (*_1)[_29];                // scope 4 at ui/realloc-16687.rs:177:54: 177:71
        _37 = _17;                       // scope 4 at ui/realloc-16687.rs:177:85: 177:86
        _36 = idx_to_size(move _37) -> bb16; // scope 4 at ui/realloc-16687.rs:177:73: 177:87
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:177:73: 177:84
                                         // + literal: Const { ty: fn(usize) -> usize {idx_to_size}, val: Value(<ZST>) }
    }

    bb16: {
        _21 = (move _22, move _28, move _36); // scope 4 at ui/realloc-16687.rs:177:38: 177:88
        _18 = (_21.0: *mut u8);          // scope 4 at ui/realloc-16687.rs:177:18: 177:20
        _19 = (_21.1: *mut u8);          // scope 4 at ui/realloc-16687.rs:177:22: 177:24
        _20 = (_21.2: usize);            // scope 4 at ui/realloc-16687.rs:177:26: 177:34
        _40 = _20;                       // scope 5 at ui/realloc-16687.rs:178:21: 178:29
        _41 = _2;                        // scope 5 at ui/realloc-16687.rs:178:32: 178:40
        _39 = Lt(move _40, move _41);    // scope 5 at ui/realloc-16687.rs:178:21: 178:40
        _38 = Not(move _39);             // scope 5 at ui/realloc-16687.rs:178:13: 178:41
        switchInt(move _38) -> [0: bb18, otherwise: bb17]; // scope 5 at ui/realloc-16687.rs:178:13: 178:41
    }

    bb17: {
        _42 = core::panicking::panic(const "assertion failed: new_size < old_size"); // scope 5 at ui/realloc-16687.rs:178:13: 178:41
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:178:13: 178:41
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _45 = _20;                       // scope 5 at ui/realloc-16687.rs:179:47: 179:55
        _46 = const 1_usize;             // scope 5 at ui/realloc-16687.rs:179:57: 179:62
        _44 = Layout::from_size_align(move _45, move _46) -> bb19; // scope 5 at ui/realloc-16687.rs:179:23: 179:63
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:179:23: 179:46
                                         // + literal: Const { ty: fn(usize, usize) -> Result<Layout, LayoutError> {Layout::from_size_align}, val: Value(<ZST>) }
    }

    bb19: {
        _43 = Result::<Layout, LayoutError>::unwrap(move _44) -> bb20; // scope 5 at ui/realloc-16687.rs:179:23: 179:72
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:179:64: 179:70
                                         // + literal: Const { ty: fn(Result<Layout, LayoutError>) -> Layout {Result::<Layout, LayoutError>::unwrap}, val: Value(<ZST>) }
    }

    bb20: {
        _48 = _19;                       // scope 6 at ui/realloc-16687.rs:181:44: 181:46
        _50 = &_4;                       // scope 6 at ui/realloc-16687.rs:181:48: 181:59
        _49 = <Layout as Clone>::clone(move _50) -> bb21; // scope 6 at ui/realloc-16687.rs:181:48: 181:59
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:181:52: 181:57
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> Layout {<Layout as Clone>::clone}, val: Value(<ZST>) }
    }

    bb21: {
        _52 = &_43;                      // scope 6 at ui/realloc-16687.rs:181:61: 181:72
        _51 = <Layout as Clone>::clone(move _52) -> bb22; // scope 6 at ui/realloc-16687.rs:181:61: 181:72
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:181:65: 181:70
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> Layout {<Layout as Clone>::clone}, val: Value(<ZST>) }
    }

    bb22: {
        _47 = reallocate(move _48, move _49, move _51) -> bb23; // scope 6 at ui/realloc-16687.rs:181:33: 181:73
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:181:33: 181:43
                                         // + literal: Const { ty: unsafe fn(*mut u8, Layout, Layout) -> *mut u8 {reallocate}, val: Value(<ZST>) }
    }

    bb23: {
        _55 = _17;                       // scope 6 at ui/realloc-16687.rs:181:24: 181:25
        _56 = CheckedMul(const 2_usize, _55); // scope 6 at ui/realloc-16687.rs:181:20: 181:25
        assert(!move (_56.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _55) -> bb24; // scope 6 at ui/realloc-16687.rs:181:20: 181:25
    }

    bb24: {
        _54 = move (_56.0: usize);       // scope 6 at ui/realloc-16687.rs:181:20: 181:25
        _57 = CheckedAdd(_54, const 1_usize); // scope 6 at ui/realloc-16687.rs:181:20: 181:29
        assert(!move (_57.1: bool), "attempt to compute `{} + {}`, which would overflow", move _54, const 1_usize) -> bb25; // scope 6 at ui/realloc-16687.rs:181:20: 181:29
    }

    bb25: {
        _53 = move (_57.0: usize);       // scope 6 at ui/realloc-16687.rs:181:20: 181:29
        _58 = Len((*_1));                // scope 6 at ui/realloc-16687.rs:181:13: 181:30
        _59 = Lt(_53, _58);              // scope 6 at ui/realloc-16687.rs:181:13: 181:30
        assert(move _59, "index out of bounds: the length is {} but the index is {}", move _58, _53) -> bb26; // scope 6 at ui/realloc-16687.rs:181:13: 181:30
    }

    bb26: {
        (*_1)[_53] = move _47;           // scope 6 at ui/realloc-16687.rs:181:13: 181:73
        _62 = &(*_1);                    // scope 6 at ui/realloc-16687.rs:182:26: 182:34
        _61 = _62;                       // scope 6 at ui/realloc-16687.rs:182:26: 182:34
        _60 = sanity_check(move _61) -> bb27; // scope 6 at ui/realloc-16687.rs:182:13: 182:35
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:182:13: 182:25
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a [*mut u8]) {sanity_check}, val: Value(<ZST>) }
    }

    bb27: {
        _64 = _18;                       // scope 6 at ui/realloc-16687.rs:184:40: 184:42
        _66 = &_4;                       // scope 6 at ui/realloc-16687.rs:184:44: 184:55
        _65 = <Layout as Clone>::clone(move _66) -> bb28; // scope 6 at ui/realloc-16687.rs:184:44: 184:55
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:184:48: 184:53
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> Layout {<Layout as Clone>::clone}, val: Value(<ZST>) }
    }

    bb28: {
        _68 = &_43;                      // scope 6 at ui/realloc-16687.rs:184:57: 184:68
        _67 = <Layout as Clone>::clone(move _68) -> bb29; // scope 6 at ui/realloc-16687.rs:184:57: 184:68
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:184:61: 184:66
                                         // + literal: Const { ty: for<'a> fn(&'a Layout) -> Layout {<Layout as Clone>::clone}, val: Value(<ZST>) }
    }

    bb29: {
        _63 = reallocate(move _64, move _65, move _67) -> bb30; // scope 6 at ui/realloc-16687.rs:184:29: 184:69
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:184:29: 184:39
                                         // + literal: Const { ty: unsafe fn(*mut u8, Layout, Layout) -> *mut u8 {reallocate}, val: Value(<ZST>) }
    }

    bb30: {
        _70 = _17;                       // scope 6 at ui/realloc-16687.rs:184:24: 184:25
        _71 = CheckedMul(const 2_usize, _70); // scope 6 at ui/realloc-16687.rs:184:20: 184:25
        assert(!move (_71.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _70) -> bb31; // scope 6 at ui/realloc-16687.rs:184:20: 184:25
    }

    bb31: {
        _69 = move (_71.0: usize);       // scope 6 at ui/realloc-16687.rs:184:20: 184:25
        _72 = Len((*_1));                // scope 6 at ui/realloc-16687.rs:184:13: 184:26
        _73 = Lt(_69, _72);              // scope 6 at ui/realloc-16687.rs:184:13: 184:26
        assert(move _73, "index out of bounds: the length is {} but the index is {}", move _72, _69) -> bb32; // scope 6 at ui/realloc-16687.rs:184:13: 184:26
    }

    bb32: {
        (*_1)[_69] = move _63;           // scope 6 at ui/realloc-16687.rs:184:13: 184:69
        _76 = &(*_1);                    // scope 6 at ui/realloc-16687.rs:185:26: 185:34
        _75 = _76;                       // scope 6 at ui/realloc-16687.rs:185:26: 185:34
        _74 = sanity_check(move _75) -> bb6; // scope 6 at ui/realloc-16687.rs:185:13: 185:35
                                         // mir::Constant
                                         // + span: ui/realloc-16687.rs:185:13: 185:25
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a [*mut u8]) {sanity_check}, val: Value(<ZST>) }
    }
}
