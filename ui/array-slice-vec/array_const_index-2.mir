// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/array_const_index-2.rs:7:11: 7:11

    bb0: {
        return;                          // scope 0 at ui/array-slice-vec/array_const_index-2.rs:12:2: 12:2
    }
}

const ARR: [i32; 6] = {
    let mut _0: [i32; 6];                // return place in scope 0 at ui/array-slice-vec/array_const_index-2.rs:8:16: 8:24

    bb0: {
        _0 = [const 42_i32, const 43_i32, const 44_i32, const 45_i32, const 46_i32, const 47_i32]; // scope 0 at ui/array-slice-vec/array_const_index-2.rs:8:27: 8:51
        return;                          // scope 0 at ui/array-slice-vec/array_const_index-2.rs:8:5: 8:52
    }
}

ARR::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/array_const_index-2.rs:8:22: 8:23

    bb0: {
        _0 = const 6_usize;              // scope 0 at ui/array-slice-vec/array_const_index-2.rs:8:22: 8:23
        return;                          // scope 0 at ui/array-slice-vec/array_const_index-2.rs:8:22: 8:23
    }
}

const IDX: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/array_const_index-2.rs:9:16: 9:21

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/array-slice-vec/array_const_index-2.rs:9:24: 9:25
        return;                          // scope 0 at ui/array-slice-vec/array_const_index-2.rs:9:5: 9:26
    }
}

const VAL: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/array-slice-vec/array_const_index-2.rs:10:16: 10:19
    let mut _1: [i32; 6];                // in scope 0 at ui/array-slice-vec/array_const_index-2.rs:10:22: 10:25
    let _2: usize;                       // in scope 0 at ui/array-slice-vec/array_const_index-2.rs:10:26: 10:29
    let mut _3: usize;                   // in scope 0 at ui/array-slice-vec/array_const_index-2.rs:10:22: 10:30
    let mut _4: bool;                    // in scope 0 at ui/array-slice-vec/array_const_index-2.rs:10:22: 10:30

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/array_const_index-2.rs:10:22: 10:25
        _1 = const _;                    // scope 0 at ui/array-slice-vec/array_const_index-2.rs:10:22: 10:25
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/array_const_index-2.rs:10:26: 10:29
        _2 = const _;                    // scope 0 at ui/array-slice-vec/array_const_index-2.rs:10:26: 10:29
        _3 = Len(_1);                    // scope 0 at ui/array-slice-vec/array_const_index-2.rs:10:22: 10:30
        _4 = Lt(_2, _3);                 // scope 0 at ui/array-slice-vec/array_const_index-2.rs:10:22: 10:30
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1; // scope 0 at ui/array-slice-vec/array_const_index-2.rs:10:22: 10:30
    }

    bb1: {
        _0 = _1[_2];                     // scope 0 at ui/array-slice-vec/array_const_index-2.rs:10:22: 10:30
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/array_const_index-2.rs:10:29: 10:30
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/array_const_index-2.rs:10:29: 10:30
        return;                          // scope 0 at ui/array-slice-vec/array_const_index-2.rs:10:5: 10:31
    }
}

const BLUB: [i32; 1] = {
    let mut _0: [i32; 1];                // return place in scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:17: 11:46

    bb0: {
        _0 = [const 5_i32];              // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:49: 11:52
        return;                          // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:5: 11:53
    }
}

BLUB::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:23: 11:45
    let mut _1: i32;                     // in scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:23: 11:36
    let mut _2: i32;                     // in scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:24: 11:30
    let mut _3: [i32; 6];                // in scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:24: 11:27
    let _4: usize;                       // in scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:28: 11:29
    let mut _5: usize;                   // in scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:24: 11:30
    let mut _6: bool;                    // in scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:24: 11:30
    let mut _7: (i32, bool);             // in scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:23: 11:36

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:23: 11:36
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:24: 11:30
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:24: 11:27
        _3 = const _;                    // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:24: 11:27
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:28: 11:29
        _4 = const 0_usize;              // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:28: 11:29
        _5 = Len(_3);                    // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:24: 11:30
        _6 = Lt(_4, _5);                 // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:24: 11:30
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> bb1; // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:24: 11:30
    }

    bb1: {
        _2 = _3[_4];                     // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:24: 11:30
        _7 = CheckedSub(_2, const 41_i32); // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:23: 11:36
        assert(!move (_7.1: bool), "attempt to compute `{} - {}`, which would overflow", move _2, const 41_i32) -> bb2; // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:23: 11:36
    }

    bb2: {
        _1 = move (_7.0: i32);           // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:23: 11:36
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:35: 11:36
        _0 = move _1 as usize (IntToInt); // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:23: 11:45
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:44: 11:45
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:44: 11:45
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:44: 11:45
        return;                          // scope 0 at ui/array-slice-vec/array_const_index-2.rs:11:23: 11:45
    }
}
