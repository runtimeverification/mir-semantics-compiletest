// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:4:11: 4:11
    let _1: [i32; 3];                    // in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:11:9: 11:12
    let _4: &[i32; 3];                   // in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:17:30: 17:40
    let _6: &[i32; 3];                   // in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:30: 20:37
    let _8: &&[i32; 3];                  // in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:40: 23:51
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/array-slice-vec/suggest-array-length_fixed.rs:11:9: 11:12
        let _2: [i32; 3];                // in scope 1 at ui/array-slice-vec/suggest-array-length_fixed.rs:14:9: 14:12
        scope 2 {
            debug bar => _2;             // in scope 2 at ui/array-slice-vec/suggest-array-length_fixed.rs:14:9: 14:12
            let _3: &[i32; 3];           // in scope 2 at ui/array-slice-vec/suggest-array-length_fixed.rs:17:9: 17:16
            let mut _11: &[i32; 3];      // in scope 2 at ui/array-slice-vec/suggest-array-length_fixed.rs:17:30: 17:40
            scope 3 {
                debug ref_foo => _3;     // in scope 3 at ui/array-slice-vec/suggest-array-length_fixed.rs:17:9: 17:16
                let _5: &[i32; 3];       // in scope 3 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:9: 20:16
                let mut _10: &[i32; 3];  // in scope 3 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:30: 20:37
                scope 4 {
                    debug ref_bar => _5; // in scope 4 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:9: 20:16
                    let _7: &&[i32; 3];  // in scope 4 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:9: 23:25
                    let mut _9: &&[i32; 3]; // in scope 4 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:40: 23:51
                    scope 5 {
                        debug multiple_ref_foo => _7; // in scope 5 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:9: 23:25
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:11:25: 11:34
        _2 = [const 0_i32; 3];           // scope 1 at ui/array-slice-vec/suggest-array-length_fixed.rs:14:25: 14:31
        _11 = const _;                   // scope 2 at ui/array-slice-vec/suggest-array-length_fixed.rs:17:30: 17:40
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/suggest-array-length_fixed.rs:17:30: 17:40
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[2])) }
        _4 = _11;                        // scope 2 at ui/array-slice-vec/suggest-array-length_fixed.rs:17:30: 17:40
        _3 = _4;                         // scope 2 at ui/array-slice-vec/suggest-array-length_fixed.rs:17:30: 17:40
        _10 = const _;                   // scope 3 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:30: 20:37
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/suggest-array-length_fixed.rs:20:30: 20:37
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[1])) }
        _6 = _10;                        // scope 3 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:30: 20:37
        _5 = _6;                         // scope 3 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:30: 20:37
        _9 = const _;                    // scope 4 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:40: 23:51
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/suggest-array-length_fixed.rs:23:40: 23:51
                                         // + literal: Const { ty: &&[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _8 = _9;                         // scope 4 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:40: 23:51
        _7 = _8;                         // scope 4 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:40: 23:51
        return;                          // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:26:2: 26:2
    }
}

promoted[0] in main: &&[i32; 3] = {
    let mut _0: &&[i32; 3];              // return place in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:40: 23:51
    let mut _1: &[i32; 3];               // in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:41: 23:51
    let mut _2: [i32; 3];                // in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:42: 23:51

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:42: 23:51
        _1 = &_2;                        // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:41: 23:51
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:40: 23:51
        return;                          // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:40: 23:51
    }
}

promoted[1] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:30: 20:37
    let mut _1: [i32; 3];                // in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:31: 20:37

    bb0: {
        _1 = [const 0_i32; 3];           // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:31: 20:37
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:30: 20:37
        return;                          // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:30: 20:37
    }
}

promoted[2] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:17:30: 17:40
    let mut _1: [i32; 3];                // in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:17:31: 17:40

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:17:31: 17:40
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:17:30: 17:40
        return;                          // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:17:30: 17:40
    }
}

const Foo: [i32; 3] = {
    let mut _0: [i32; 3];                // return place in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:5:16: 5:24

    bb0: {
        _0 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:5:27: 5:36
        return;                          // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:5:5: 5:37
    }
}

Foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:5:22: 5:23

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:5:22: 5:23
        return;                          // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:5:22: 5:23
    }
}

const REF_FOO: &[u8; 1] = {
    let mut _0: &[u8; 1];                // return place in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:20: 8:28
    let _1: &[u8; 1];                    // in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:31: 8:35
    let _2: [u8; 1];                     // in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:32: 8:35
    let mut _3: &[u8; 1];                // in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:31: 8:35

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:31: 8:35
        _3 = const _;                    // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:31: 8:35
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/suggest-array-length_fixed.rs:8:31: 8:35
                                         // + literal: Const { ty: &[u8; 1], val: Unevaluated(REF_FOO, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:31: 8:35
        _0 = &(*_1);                     // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:31: 8:35
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:34: 8:35
        return;                          // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:5: 8:36
    }
}

promoted[0] in REF_FOO: &[u8; 1] = {
    let mut _0: &[u8; 1];                // return place in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:31: 8:35
    let mut _1: [u8; 1];                 // in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:32: 8:35

    bb0: {
        _1 = [const 1_u8];               // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:32: 8:35
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:31: 8:35
        return;                          // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:31: 8:35
    }
}

REF_FOO::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:26: 8:27

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:26: 8:27
        return;                          // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:8:26: 8:27
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:11:20: 11:21

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:11:20: 11:21
        return;                          // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:11:20: 11:21
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:14:29: 14:30

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:14:29: 14:30
        return;                          // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:14:29: 14:30
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:14:20: 14:21

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:14:20: 14:21
        return;                          // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:14:20: 14:21
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:17:25: 17:26

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:17:25: 17:26
        return;                          // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:17:25: 17:26
    }
}

main::{constant#5}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:35: 20:36

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:35: 20:36
        return;                          // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:35: 20:36
    }
}

main::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:25: 20:26

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:25: 20:26
        return;                          // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:20:25: 20:26
    }
}

main::{constant#6}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:35: 23:36

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:35: 23:36
        return;                          // scope 0 at ui/array-slice-vec/suggest-array-length_fixed.rs:23:35: 23:36
    }
}
