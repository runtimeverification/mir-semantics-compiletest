// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &str;
    let _4: &str;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &&str;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &&str;
    let mut _21: (&u8, &u8);
    let mut _22: &u8;
    let _23: &[u8];
    let mut _24: &str;
    let _25: usize;
    let mut _26: usize;
    let mut _27: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: u8;
    let mut _33: u8;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&u8, &u8);
    let mut _38: &u8;
    let _39: &[u8];
    let mut _40: &str;
    let _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: u8;
    let mut _49: u8;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let _54: &str;
    let mut _55: (&&str, &&str);
    let mut _56: &&str;
    let mut _57: &&str;
    let mut _60: bool;
    let mut _61: bool;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&&str, &&str);
    let mut _66: &&str;
    let mut _67: &&str;
    let mut _70: bool;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let _78: ();
    let mut _79: std::fmt::Arguments<'_>;
    let mut _80: &[&str];
    let mut _81: &[core::fmt::rt::Argument<'_>];
    let _82: &[core::fmt::rt::Argument<'_>; 1];
    let _83: [core::fmt::rt::Argument<'_>; 1];
    let mut _84: core::fmt::rt::Argument<'_>;
    let _85: &&str;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: &&str;
    let mut _89: &&str;
    let _90: &str;
    let mut _91: !;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: &&str;
    let mut _95: &&str;
    let _96: &str;
    let mut _97: !;
    let mut _98: (&&str, &&str);
    let mut _99: &&str;
    let mut _100: &&str;
    let mut _103: bool;
    let _105: !;
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: &&str;
    let mut _110: &&str;
    let _111: &str;
    let mut _112: !;
    let mut _113: bool;
    let mut _114: bool;
    let mut _115: &&str;
    let mut _116: &&str;
    let _117: &str;
    let mut _118: !;
    let _119: ();
    let mut _120: std::fmt::Arguments<'_>;
    let mut _121: &[&str];
    let mut _122: &[core::fmt::rt::Argument<'_>];
    let _123: &[core::fmt::rt::Argument<'_>; 1];
    let _124: [core::fmt::rt::Argument<'_>; 1];
    let mut _125: core::fmt::rt::Argument<'_>;
    let _126: &&str;
    let mut _127: bool;
    let mut _128: bool;
    let mut _129: &&str;
    let mut _130: &&str;
    let _131: &str;
    let mut _132: !;
    let mut _133: bool;
    let mut _134: bool;
    let mut _135: &&str;
    let mut _136: &&str;
    let _137: &str;
    let mut _138: !;
    let mut _139: (&&str, &&str);
    let mut _140: &&str;
    let mut _141: &&str;
    let mut _144: bool;
    let _146: !;
    let mut _147: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: &&str;
    let mut _151: &&str;
    let _152: &str;
    let mut _153: !;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: &&str;
    let mut _157: &&str;
    let _158: &str;
    let mut _159: !;
    let _160: ();
    let mut _161: std::fmt::Arguments<'_>;
    let mut _162: &[&str];
    let mut _163: &[core::fmt::rt::Argument<'_>];
    let _164: &[core::fmt::rt::Argument<'_>; 1];
    let _165: [core::fmt::rt::Argument<'_>; 1];
    let mut _166: core::fmt::rt::Argument<'_>;
    let _167: &&str;
    let mut _168: bool;
    let mut _169: bool;
    let mut _170: &&str;
    let mut _171: &&str;
    let _172: &str;
    let mut _173: !;
    let mut _174: bool;
    let mut _175: bool;
    let mut _176: &&str;
    let mut _177: &&str;
    let _178: &str;
    let mut _179: !;
    let mut _180: (&&str, &&str);
    let mut _181: &&str;
    let mut _182: &&str;
    let mut _185: bool;
    let _187: !;
    let mut _188: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _189: bool;
    let mut _190: bool;
    let mut _191: &&str;
    let mut _192: &&str;
    let _193: &str;
    let mut _194: !;
    let mut _195: bool;
    let mut _196: bool;
    let mut _197: &&str;
    let mut _198: &&str;
    let _199: &str;
    let mut _200: !;
    let _201: ();
    let mut _202: std::fmt::Arguments<'_>;
    let mut _203: &[&str];
    let mut _204: &[core::fmt::rt::Argument<'_>];
    let _205: &[core::fmt::rt::Argument<'_>; 1];
    let _206: [core::fmt::rt::Argument<'_>; 1];
    let mut _207: core::fmt::rt::Argument<'_>;
    let _208: &&str;
    scope 1 {
        debug x => const "hello";
        let _2: &str;
        scope 2 {
            debug v => const "hello";
            let _3: &str;
            scope 3 {
                debug y => _3;
                let _28: &u8;
                let _29: &u8;
                let _44: &u8;
                let _45: &u8;
                let _53: &str;
                let mut _213: &u8;
                let mut _214: &u8;
                let mut _215: &[&str; 2];
                let mut _216: &[&str; 2];
                scope 4 {
                    debug left_val => _28;
                    debug right_val => _29;
                    let _34: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _34;
                    }
                }
                scope 6 {
                    debug left_val => _44;
                    debug right_val => _45;
                    let _50: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _50;
                    }
                }
                scope 8 {
                    debug z => _53;
                    let _58: &&str;
                    let _59: &&str;
                    let _68: &&str;
                    let _69: &&str;
                    let _74: &str;
                    scope 9 {
                        debug left_val => _58;
                        debug right_val => _59;
                        let _62: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _62;
                        }
                    }
                    scope 11 {
                        debug left_val => _68;
                        debug right_val => _69;
                        let _71: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _71;
                        }
                    }
                    scope 13 {
                        debug a => const "aaaa";
                        let _75: &str;
                        scope 14 {
                            debug b => const "bbbb";
                            let _76: &str;
                            scope 15 {
                                debug c => const "cccc";
                                let _77: &str;
                                scope 16 {
                                    debug cc => const "ccccc";
                                    let _101: &&str;
                                    let _102: &&str;
                                    let _142: &&str;
                                    let _143: &&str;
                                    let _183: &&str;
                                    let _184: &&str;
                                    let mut _209: &[&str; 2];
                                    let mut _210: &[&str; 2];
                                    let mut _211: &[&str; 2];
                                    let mut _212: &[&str; 2];
                                    scope 17 {
                                        debug left_val => _101;
                                        debug right_val => _102;
                                        let _104: core::panicking::AssertKind;
                                        scope 18 {
                                            debug kind => _104;
                                        }
                                    }
                                    scope 19 {
                                        debug left_val => _142;
                                        debug right_val => _143;
                                        let _145: core::panicking::AssertKind;
                                        scope 20 {
                                            debug kind => _145;
                                        }
                                    }
                                    scope 21 {
                                        debug left_val => _183;
                                        debug right_val => _184;
                                        let _186: core::panicking::AssertKind;
                                        scope 22 {
                                            debug kind => _186;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const "hello";
        _2 = const "hello";
        _4 = const "there";
        _3 = _4;
        _216 = const _;
        _7 = _216 as &[&str] (Pointer(Unsize));
        _12 = &_1;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = _print(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _215 = const _;
        _15 = _215 as &[&str] (Pointer(Unsize));
        _20 = &_3;
        _19 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_20) -> [return: bb4, unwind continue];
    }

    bb4: {
        _18 = [move _19];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        _13 = _print(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        _24 = _1;
        _23 = core::str::<impl str>::as_bytes(move _24) -> [return: bb7, unwind continue];
    }

    bb7: {
        _25 = const 0_usize;
        _26 = Len((*_23));
        _27 = Lt(_25, _26);
        assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _25) -> [success: bb8, unwind continue];
    }

    bb8: {
        _22 = &(*_23)[_25];
        _214 = const _;
        _21 = (move _22, _214);
        _28 = (_21.0: &u8);
        _29 = (_21.1: &u8);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<u8, u8>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb10: {
        _40 = _1;
        _39 = core::str::<impl str>::as_bytes(move _40) -> [return: bb11, unwind continue];
    }

    bb11: {
        _41 = const 4_usize;
        _42 = Len((*_39));
        _43 = Lt(_41, _42);
        assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> [success: bb12, unwind continue];
    }

    bb12: {
        _38 = &(*_39)[_41];
        _213 = const _;
        _37 = (move _38, _213);
        _44 = (_37.0: &u8);
        _45 = (_37.1: &u8);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<u8, u8>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb14: {
        _54 = const "thing";
        _53 = _54;
        _56 = &_2;
        _57 = &_1;
        _55 = (move _56, move _57);
        _58 = (_55.0: &&str);
        _59 = (_55.1: &&str);
        _61 = <&str as PartialEq>::eq(_58, _59) -> [return: bb15, unwind continue];
    }

    bb15: {
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<&str, &str>(move _62, _58, _59, move _64) -> unwind continue;
    }

    bb17: {
        _66 = &_1;
        _67 = &_53;
        _65 = (move _66, move _67);
        _68 = (_65.0: &&str);
        _69 = (_65.1: &&str);
        _70 = <&str as PartialEq>::eq(_68, _69) -> [return: bb18, unwind continue];
    }

    bb18: {
        switchInt(move _70) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _71 = core::panicking::AssertKind::Ne;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<&str, &str>(move _71, _68, _69, move _73) -> unwind continue;
    }

    bb20: {
        _74 = const "aaaa";
        _75 = const "bbbb";
        _76 = const "cccc";
        _77 = const "ccccc";
        _212 = const _;
        _80 = _212 as &[&str] (Pointer(Unsize));
        _85 = &_74;
        _84 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_85) -> [return: bb21, unwind continue];
    }

    bb21: {
        _83 = [move _84];
        _82 = &_83;
        _81 = _82 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _79 = Arguments::<'_>::new_v1(move _80, move _81) -> [return: bb22, unwind continue];
    }

    bb22: {
        _78 = _print(move _79) -> [return: bb23, unwind continue];
    }

    bb23: {
        _88 = &_74;
        _90 = _75;
        _89 = &_90;
        _87 = <&str as PartialOrd>::lt(move _88, move _89) -> [return: bb24, unwind continue];
    }

    bb24: {
        _86 = Not(move _87);
        switchInt(move _86) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _91 = core::panicking::panic(const "assertion failed: a < b") -> unwind continue;
    }

    bb26: {
        _94 = &_74;
        _96 = _75;
        _95 = &_96;
        _93 = <&str as PartialOrd>::le(move _94, move _95) -> [return: bb27, unwind continue];
    }

    bb27: {
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _97 = core::panicking::panic(const "assertion failed: a <= b") -> unwind continue;
    }

    bb29: {
        _99 = &_74;
        _100 = &_75;
        _98 = (move _99, move _100);
        _101 = (_98.0: &&str);
        _102 = (_98.1: &&str);
        _103 = <&str as PartialEq>::eq(_101, _102) -> [return: bb30, unwind continue];
    }

    bb30: {
        switchInt(move _103) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _104 = core::panicking::AssertKind::Ne;
        _106 = Option::<Arguments<'_>>::None;
        _105 = core::panicking::assert_failed::<&str, &str>(move _104, _101, _102, move _106) -> unwind continue;
    }

    bb32: {
        _109 = &_75;
        _111 = _74;
        _110 = &_111;
        _108 = <&str as PartialOrd>::ge(move _109, move _110) -> [return: bb33, unwind continue];
    }

    bb33: {
        _107 = Not(move _108);
        switchInt(move _107) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _112 = core::panicking::panic(const "assertion failed: b >= a") -> unwind continue;
    }

    bb35: {
        _115 = &_75;
        _117 = _74;
        _116 = &_117;
        _114 = <&str as PartialOrd>::gt(move _115, move _116) -> [return: bb36, unwind continue];
    }

    bb36: {
        _113 = Not(move _114);
        switchInt(move _113) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _118 = core::panicking::panic(const "assertion failed: b > a") -> unwind continue;
    }

    bb38: {
        _211 = const _;
        _121 = _211 as &[&str] (Pointer(Unsize));
        _126 = &_75;
        _125 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_126) -> [return: bb39, unwind continue];
    }

    bb39: {
        _124 = [move _125];
        _123 = &_124;
        _122 = _123 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _120 = Arguments::<'_>::new_v1(move _121, move _122) -> [return: bb40, unwind continue];
    }

    bb40: {
        _119 = _print(move _120) -> [return: bb41, unwind continue];
    }

    bb41: {
        _129 = &_74;
        _131 = _76;
        _130 = &_131;
        _128 = <&str as PartialOrd>::lt(move _129, move _130) -> [return: bb42, unwind continue];
    }

    bb42: {
        _127 = Not(move _128);
        switchInt(move _127) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _132 = core::panicking::panic(const "assertion failed: a < c") -> unwind continue;
    }

    bb44: {
        _135 = &_74;
        _137 = _76;
        _136 = &_137;
        _134 = <&str as PartialOrd>::le(move _135, move _136) -> [return: bb45, unwind continue];
    }

    bb45: {
        _133 = Not(move _134);
        switchInt(move _133) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _138 = core::panicking::panic(const "assertion failed: a <= c") -> unwind continue;
    }

    bb47: {
        _140 = &_74;
        _141 = &_76;
        _139 = (move _140, move _141);
        _142 = (_139.0: &&str);
        _143 = (_139.1: &&str);
        _144 = <&str as PartialEq>::eq(_142, _143) -> [return: bb48, unwind continue];
    }

    bb48: {
        switchInt(move _144) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _145 = core::panicking::AssertKind::Ne;
        _147 = Option::<Arguments<'_>>::None;
        _146 = core::panicking::assert_failed::<&str, &str>(move _145, _142, _143, move _147) -> unwind continue;
    }

    bb50: {
        _150 = &_76;
        _152 = _74;
        _151 = &_152;
        _149 = <&str as PartialOrd>::ge(move _150, move _151) -> [return: bb51, unwind continue];
    }

    bb51: {
        _148 = Not(move _149);
        switchInt(move _148) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        _153 = core::panicking::panic(const "assertion failed: c >= a") -> unwind continue;
    }

    bb53: {
        _156 = &_76;
        _158 = _74;
        _157 = &_158;
        _155 = <&str as PartialOrd>::gt(move _156, move _157) -> [return: bb54, unwind continue];
    }

    bb54: {
        _154 = Not(move _155);
        switchInt(move _154) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _159 = core::panicking::panic(const "assertion failed: c > a") -> unwind continue;
    }

    bb56: {
        _210 = const _;
        _162 = _210 as &[&str] (Pointer(Unsize));
        _167 = &_76;
        _166 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_167) -> [return: bb57, unwind continue];
    }

    bb57: {
        _165 = [move _166];
        _164 = &_165;
        _163 = _164 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _161 = Arguments::<'_>::new_v1(move _162, move _163) -> [return: bb58, unwind continue];
    }

    bb58: {
        _160 = _print(move _161) -> [return: bb59, unwind continue];
    }

    bb59: {
        _170 = &_76;
        _172 = _77;
        _171 = &_172;
        _169 = <&str as PartialOrd>::lt(move _170, move _171) -> [return: bb60, unwind continue];
    }

    bb60: {
        _168 = Not(move _169);
        switchInt(move _168) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        _173 = core::panicking::panic(const "assertion failed: c < cc") -> unwind continue;
    }

    bb62: {
        _176 = &_76;
        _178 = _77;
        _177 = &_178;
        _175 = <&str as PartialOrd>::le(move _176, move _177) -> [return: bb63, unwind continue];
    }

    bb63: {
        _174 = Not(move _175);
        switchInt(move _174) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        _179 = core::panicking::panic(const "assertion failed: c <= cc") -> unwind continue;
    }

    bb65: {
        _181 = &_76;
        _182 = &_77;
        _180 = (move _181, move _182);
        _183 = (_180.0: &&str);
        _184 = (_180.1: &&str);
        _185 = <&str as PartialEq>::eq(_183, _184) -> [return: bb66, unwind continue];
    }

    bb66: {
        switchInt(move _185) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        _186 = core::panicking::AssertKind::Ne;
        _188 = Option::<Arguments<'_>>::None;
        _187 = core::panicking::assert_failed::<&str, &str>(move _186, _183, _184, move _188) -> unwind continue;
    }

    bb68: {
        _191 = &_77;
        _193 = _76;
        _192 = &_193;
        _190 = <&str as PartialOrd>::ge(move _191, move _192) -> [return: bb69, unwind continue];
    }

    bb69: {
        _189 = Not(move _190);
        switchInt(move _189) -> [0: bb71, otherwise: bb70];
    }

    bb70: {
        _194 = core::panicking::panic(const "assertion failed: cc >= c") -> unwind continue;
    }

    bb71: {
        _197 = &_77;
        _199 = _76;
        _198 = &_199;
        _196 = <&str as PartialOrd>::gt(move _197, move _198) -> [return: bb72, unwind continue];
    }

    bb72: {
        _195 = Not(move _196);
        switchInt(move _195) -> [0: bb74, otherwise: bb73];
    }

    bb73: {
        _200 = core::panicking::panic(const "assertion failed: cc > c") -> unwind continue;
    }

    bb74: {
        _209 = const _;
        _203 = _209 as &[&str] (Pointer(Unsize));
        _208 = &_77;
        _207 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_208) -> [return: bb75, unwind continue];
    }

    bb75: {
        _206 = [move _207];
        _205 = &_206;
        _204 = _205 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _202 = Arguments::<'_>::new_v1(move _203, move _204) -> [return: bb76, unwind continue];
    }

    bb76: {
        _201 = _print(move _202) -> [return: bb77, unwind continue];
    }

    bb77: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 'o' as u8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 'h' as u8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
