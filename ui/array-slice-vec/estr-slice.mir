// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/estr-slice.rs:4:15: 4:15
    let _1: &str;                        // in scope 0 at ui/array-slice-vec/estr-slice.rs:5:9: 5:10
    let _4: &str;                        // in scope 0 at ui/array-slice-vec/estr-slice.rs:7:20: 7:27
    let _5: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _6: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[&str];                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:9:14: 9:18
    let mut _8: &[&str; 2];              // in scope 0 at ui/array-slice-vec/estr-slice.rs:9:14: 9:18
    let _9: &[&str; 2];                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:9:14: 9:18
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _13: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/estr-slice.rs:9:20: 9:21
    let mut _15: &&str;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:9:20: 9:21
    let _16: &&str;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:9:20: 9:21
    let _17: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _18: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _19: &[&str];                // in scope 0 at ui/array-slice-vec/estr-slice.rs:10:14: 10:18
    let mut _20: &[&str; 2];             // in scope 0 at ui/array-slice-vec/estr-slice.rs:10:14: 10:18
    let _21: &[&str; 2];                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:10:14: 10:18
    let mut _22: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _23: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _24: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _25: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _26: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/estr-slice.rs:10:20: 10:21
    let mut _27: &&str;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:10:20: 10:21
    let _28: &&str;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:10:20: 10:21
    let mut _29: (&u8, &u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _30: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _31: &[u8];                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:12:16: 12:28
    let mut _32: &str;                   // in scope 0 at ui/array-slice-vec/estr-slice.rs:12:16: 12:28
    let _33: usize;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:12:29: 12:30
    let mut _34: usize;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:12:16: 12:31
    let mut _35: bool;                   // in scope 0 at ui/array-slice-vec/estr-slice.rs:12:16: 12:31
    let mut _36: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _39: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _40: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _41: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _42: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _44: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _45: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _46: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _47: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _48: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _49: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _51: (&u8, &u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _52: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _53: &[u8];                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:13:16: 13:28
    let mut _54: &str;                   // in scope 0 at ui/array-slice-vec/estr-slice.rs:13:16: 13:28
    let _55: usize;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:13:29: 13:30
    let mut _56: usize;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:13:16: 13:31
    let mut _57: bool;                   // in scope 0 at ui/array-slice-vec/estr-slice.rs:13:16: 13:31
    let mut _58: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _61: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _62: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _63: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _64: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _66: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _67: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _68: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _69: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _70: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _71: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _74: &str;                       // in scope 0 at ui/array-slice-vec/estr-slice.rs:15:20: 15:27
    let mut _75: (&&str, &&str);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _76: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _77: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _80: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _81: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _82: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _83: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _85: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _86: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _87: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _88: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _89: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _90: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _92: (&&str, &&str);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
    let mut _93: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
    let mut _94: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    let mut _97: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    let mut _98: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
    let mut _99: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
    let _101: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
    let mut _102: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
    let mut _103: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let _104: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let mut _105: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let _106: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let mut _107: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
    let _112: ();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _113: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _114: &[&str];               // in scope 0 at ui/array-slice-vec/estr-slice.rs:25:14: 25:18
    let mut _115: &[&str; 2];            // in scope 0 at ui/array-slice-vec/estr-slice.rs:25:14: 25:18
    let _116: &[&str; 2];                // in scope 0 at ui/array-slice-vec/estr-slice.rs:25:14: 25:18
    let mut _117: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _118: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _119: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _120: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _121: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/estr-slice.rs:25:20: 25:21
    let mut _122: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:25:20: 25:21
    let _123: &&str;                     // in scope 0 at ui/array-slice-vec/estr-slice.rs:25:20: 25:21
    let mut _124: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:27:5: 27:19
    let mut _125: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:27:13: 27:18
    let mut _126: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:27:13: 27:14
    let mut _127: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:27:17: 27:18
    let _128: &str;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:27:17: 27:18
    let mut _129: !;                     // in scope 0 at ui/array-slice-vec/estr-slice.rs:27:5: 27:19
    let mut _130: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:28:5: 28:20
    let mut _131: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:28:13: 28:19
    let mut _132: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:28:13: 28:14
    let mut _133: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:28:18: 28:19
    let _134: &str;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:28:18: 28:19
    let mut _135: !;                     // in scope 0 at ui/array-slice-vec/estr-slice.rs:28:5: 28:20
    let mut _136: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
    let mut _137: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
    let mut _138: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    let mut _141: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    let mut _142: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
    let mut _143: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
    let _145: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
    let mut _146: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
    let mut _147: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let _148: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let mut _149: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let _150: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let mut _151: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
    let mut _152: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:30:5: 30:20
    let mut _153: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:30:13: 30:19
    let mut _154: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:30:13: 30:14
    let mut _155: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:30:18: 30:19
    let _156: &str;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:30:18: 30:19
    let mut _157: !;                     // in scope 0 at ui/array-slice-vec/estr-slice.rs:30:5: 30:20
    let mut _158: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:31:5: 31:19
    let mut _159: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:31:13: 31:18
    let mut _160: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:31:13: 31:14
    let mut _161: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:31:17: 31:18
    let _162: &str;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:31:17: 31:18
    let mut _163: !;                     // in scope 0 at ui/array-slice-vec/estr-slice.rs:31:5: 31:19
    let _164: ();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _165: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _166: &[&str];               // in scope 0 at ui/array-slice-vec/estr-slice.rs:33:14: 33:18
    let mut _167: &[&str; 2];            // in scope 0 at ui/array-slice-vec/estr-slice.rs:33:14: 33:18
    let _168: &[&str; 2];                // in scope 0 at ui/array-slice-vec/estr-slice.rs:33:14: 33:18
    let mut _169: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _170: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _171: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _172: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _173: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/estr-slice.rs:33:20: 33:21
    let mut _174: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:33:20: 33:21
    let _175: &&str;                     // in scope 0 at ui/array-slice-vec/estr-slice.rs:33:20: 33:21
    let mut _176: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:35:5: 35:19
    let mut _177: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:35:13: 35:18
    let mut _178: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:35:13: 35:14
    let mut _179: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:35:17: 35:18
    let _180: &str;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:35:17: 35:18
    let mut _181: !;                     // in scope 0 at ui/array-slice-vec/estr-slice.rs:35:5: 35:19
    let mut _182: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:36:5: 36:20
    let mut _183: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:36:13: 36:19
    let mut _184: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:36:13: 36:14
    let mut _185: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:36:18: 36:19
    let _186: &str;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:36:18: 36:19
    let mut _187: !;                     // in scope 0 at ui/array-slice-vec/estr-slice.rs:36:5: 36:20
    let mut _188: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
    let mut _189: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
    let mut _190: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    let mut _193: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    let mut _194: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
    let mut _195: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
    let _197: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
    let mut _198: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
    let mut _199: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let _200: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let mut _201: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let _202: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let mut _203: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
    let mut _204: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:38:5: 38:20
    let mut _205: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:38:13: 38:19
    let mut _206: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:38:13: 38:14
    let mut _207: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:38:18: 38:19
    let _208: &str;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:38:18: 38:19
    let mut _209: !;                     // in scope 0 at ui/array-slice-vec/estr-slice.rs:38:5: 38:20
    let mut _210: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:39:5: 39:19
    let mut _211: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:39:13: 39:18
    let mut _212: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:39:13: 39:14
    let mut _213: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:39:17: 39:18
    let _214: &str;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:39:17: 39:18
    let mut _215: !;                     // in scope 0 at ui/array-slice-vec/estr-slice.rs:39:5: 39:19
    let _216: ();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _217: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _218: &[&str];               // in scope 0 at ui/array-slice-vec/estr-slice.rs:41:14: 41:18
    let mut _219: &[&str; 2];            // in scope 0 at ui/array-slice-vec/estr-slice.rs:41:14: 41:18
    let _220: &[&str; 2];                // in scope 0 at ui/array-slice-vec/estr-slice.rs:41:14: 41:18
    let mut _221: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _222: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _223: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _224: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _225: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/estr-slice.rs:41:20: 41:21
    let mut _226: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:41:20: 41:21
    let _227: &&str;                     // in scope 0 at ui/array-slice-vec/estr-slice.rs:41:20: 41:21
    let mut _228: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:43:5: 43:20
    let mut _229: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:43:13: 43:19
    let mut _230: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:43:13: 43:14
    let mut _231: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:43:17: 43:19
    let _232: &str;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:43:17: 43:19
    let mut _233: !;                     // in scope 0 at ui/array-slice-vec/estr-slice.rs:43:5: 43:20
    let mut _234: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:44:5: 44:21
    let mut _235: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:44:13: 44:20
    let mut _236: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:44:13: 44:14
    let mut _237: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:44:18: 44:20
    let _238: &str;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:44:18: 44:20
    let mut _239: !;                     // in scope 0 at ui/array-slice-vec/estr-slice.rs:44:5: 44:21
    let mut _240: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
    let mut _241: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
    let mut _242: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    let mut _245: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    let mut _246: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
    let mut _247: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
    let _249: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
    let mut _250: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
    let mut _251: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let _252: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let mut _253: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let _254: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let mut _255: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
    let mut _256: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:46:5: 46:21
    let mut _257: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:46:13: 46:20
    let mut _258: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:46:13: 46:15
    let mut _259: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:46:19: 46:20
    let _260: &str;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:46:19: 46:20
    let mut _261: !;                     // in scope 0 at ui/array-slice-vec/estr-slice.rs:46:5: 46:21
    let mut _262: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:47:5: 47:20
    let mut _263: bool;                  // in scope 0 at ui/array-slice-vec/estr-slice.rs:47:13: 47:19
    let mut _264: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:47:13: 47:15
    let mut _265: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:47:18: 47:19
    let _266: &str;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:47:18: 47:19
    let mut _267: !;                     // in scope 0 at ui/array-slice-vec/estr-slice.rs:47:5: 47:20
    let _268: ();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _269: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _270: &[&str];               // in scope 0 at ui/array-slice-vec/estr-slice.rs:49:14: 49:18
    let mut _271: &[&str; 2];            // in scope 0 at ui/array-slice-vec/estr-slice.rs:49:14: 49:18
    let _272: &[&str; 2];                // in scope 0 at ui/array-slice-vec/estr-slice.rs:49:14: 49:18
    let mut _273: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _274: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _275: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _276: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _277: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/estr-slice.rs:49:20: 49:22
    let mut _278: &&str;                 // in scope 0 at ui/array-slice-vec/estr-slice.rs:49:20: 49:22
    let _279: &&str;                     // in scope 0 at ui/array-slice-vec/estr-slice.rs:49:20: 49:22
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/estr-slice.rs:5:9: 5:10
        let _2: &str;                    // in scope 1 at ui/array-slice-vec/estr-slice.rs:6:9: 6:10
        scope 2 {
            debug v => _2;               // in scope 2 at ui/array-slice-vec/estr-slice.rs:6:9: 6:10
            let _3: &str;                // in scope 2 at ui/array-slice-vec/estr-slice.rs:7:9: 7:10
            scope 3 {
                debug y => _3;           // in scope 3 at ui/array-slice-vec/estr-slice.rs:7:9: 7:10
                let _37: &u8;            // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _38: &u8;            // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _59: &u8;            // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _60: &u8;            // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _73: &str;           // in scope 3 at ui/array-slice-vec/estr-slice.rs:15:9: 15:10
                let mut _284: &u8;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _285: &u8;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _286: &[&str; 2]; // in scope 3 at ui/array-slice-vec/estr-slice.rs:10:14: 10:18
                let mut _287: &[&str; 2]; // in scope 3 at ui/array-slice-vec/estr-slice.rs:9:14: 9:18
                scope 4 {
                    debug left_val => _37; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _38; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _43: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _43; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 6 {
                    debug left_val => _59; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _60; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _65: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _65; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 8 {
                    debug z => _73;      // in scope 8 at ui/array-slice-vec/estr-slice.rs:15:9: 15:10
                    let _78: &&str;      // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _79: &&str;      // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _95: &&str;      // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
                    let _96: &&str;      // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
                    let _108: &str;      // in scope 8 at ui/array-slice-vec/estr-slice.rs:19:9: 19:10
                    scope 9 {
                        debug left_val => _78; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _79; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _84: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 10 {
                            debug kind => _84; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 11 {
                        debug left_val => _95; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
                        debug right_val => _96; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
                        let _100: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
                        scope 12 {
                            debug kind => _100; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
                        }
                    }
                    scope 13 {
                        debug a => _108; // in scope 13 at ui/array-slice-vec/estr-slice.rs:19:9: 19:10
                        let _109: &str;  // in scope 13 at ui/array-slice-vec/estr-slice.rs:20:9: 20:10
                        scope 14 {
                            debug b => _109; // in scope 14 at ui/array-slice-vec/estr-slice.rs:20:9: 20:10
                            let _110: &str; // in scope 14 at ui/array-slice-vec/estr-slice.rs:22:9: 22:10
                            scope 15 {
                                debug c => _110; // in scope 15 at ui/array-slice-vec/estr-slice.rs:22:9: 22:10
                                let _111: &str; // in scope 15 at ui/array-slice-vec/estr-slice.rs:23:9: 23:11
                                scope 16 {
                                    debug cc => _111; // in scope 16 at ui/array-slice-vec/estr-slice.rs:23:9: 23:11
                                    let _139: &&str; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
                                    let _140: &&str; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
                                    let _191: &&str; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
                                    let _192: &&str; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
                                    let _243: &&str; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
                                    let _244: &&str; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
                                    let mut _280: &[&str; 2]; // in scope 16 at ui/array-slice-vec/estr-slice.rs:49:14: 49:18
                                    let mut _281: &[&str; 2]; // in scope 16 at ui/array-slice-vec/estr-slice.rs:41:14: 41:18
                                    let mut _282: &[&str; 2]; // in scope 16 at ui/array-slice-vec/estr-slice.rs:33:14: 33:18
                                    let mut _283: &[&str; 2]; // in scope 16 at ui/array-slice-vec/estr-slice.rs:25:14: 25:18
                                    scope 17 {
                                        debug left_val => _139; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
                                        debug right_val => _140; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
                                        let _144: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
                                        scope 18 {
                                            debug kind => _144; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
                                        }
                                    }
                                    scope 19 {
                                        debug left_val => _191; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
                                        debug right_val => _192; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
                                        let _196: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
                                        scope 20 {
                                            debug kind => _196; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
                                        }
                                    }
                                    scope 21 {
                                        debug left_val => _243; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
                                        debug right_val => _244; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
                                        let _248: core::panicking::AssertKind; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
                                        scope 22 {
                                            debug kind => _248; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const "hello";              // scope 0 at ui/array-slice-vec/estr-slice.rs:5:13: 5:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:5:13: 5:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = const "hello";              // scope 1 at ui/array-slice-vec/estr-slice.rs:6:13: 6:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:6:13: 6:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "there";              // scope 2 at ui/array-slice-vec/estr-slice.rs:7:20: 7:27
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:7:20: 7:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 2 at ui/array-slice-vec/estr-slice.rs:7:20: 7:27
        _287 = const _;                  // scope 3 at ui/array-slice-vec/estr-slice.rs:9:14: 9:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:9:14: 9:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[7])) }
        _9 = _287;                       // scope 3 at ui/array-slice-vec/estr-slice.rs:9:14: 9:18
        _8 = _9;                         // scope 3 at ui/array-slice-vec/estr-slice.rs:9:14: 9:18
        _7 = move _8 as &[&str] (Pointer(Unsize)); // scope 3 at ui/array-slice-vec/estr-slice.rs:9:14: 9:18
        _16 = &_1;                       // scope 3 at ui/array-slice-vec/estr-slice.rs:9:20: 9:21
        _15 = _16;                       // scope 3 at ui/array-slice-vec/estr-slice.rs:9:20: 9:21
        _14 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _15) -> bb1; // scope 3 at ui/array-slice-vec/estr-slice.rs:9:20: 9:21
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:9:20: 9:21
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _13 = [move _14];                // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = &_13;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = move _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> bb2; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = _print(move _6) -> bb3;     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _286 = const _;                  // scope 3 at ui/array-slice-vec/estr-slice.rs:10:14: 10:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:10:14: 10:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[6])) }
        _21 = _286;                      // scope 3 at ui/array-slice-vec/estr-slice.rs:10:14: 10:18
        _20 = _21;                       // scope 3 at ui/array-slice-vec/estr-slice.rs:10:14: 10:18
        _19 = move _20 as &[&str] (Pointer(Unsize)); // scope 3 at ui/array-slice-vec/estr-slice.rs:10:14: 10:18
        _28 = &_3;                       // scope 3 at ui/array-slice-vec/estr-slice.rs:10:20: 10:21
        _27 = _28;                       // scope 3 at ui/array-slice-vec/estr-slice.rs:10:20: 10:21
        _26 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _27) -> bb4; // scope 3 at ui/array-slice-vec/estr-slice.rs:10:20: 10:21
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:10:20: 10:21
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb4: {
        _25 = [move _26];                // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _24 = &_25;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _23 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _22 = move _23 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _18 = Arguments::<'_>::new_v1(move _19, move _22) -> bb5; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _17 = _print(move _18) -> bb6;   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb6: {
        _32 = _1;                        // scope 3 at ui/array-slice-vec/estr-slice.rs:12:16: 12:28
        _31 = core::str::<impl str>::as_bytes(move _32) -> bb7; // scope 3 at ui/array-slice-vec/estr-slice.rs:12:16: 12:28
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:12:18: 12:26
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }
    }

    bb7: {
        _33 = const 0_usize;             // scope 3 at ui/array-slice-vec/estr-slice.rs:12:29: 12:30
        _34 = Len((*_31));               // scope 3 at ui/array-slice-vec/estr-slice.rs:12:16: 12:31
        _35 = Lt(_33, _34);              // scope 3 at ui/array-slice-vec/estr-slice.rs:12:16: 12:31
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> bb8; // scope 3 at ui/array-slice-vec/estr-slice.rs:12:16: 12:31
    }

    bb8: {
        _30 = &(*_31)[_33];              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _285 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[5])) }
        _36 = _285;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _29 = (move _30, move _36);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _37 = (_29.0: &u8);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _38 = (_29.1: &u8);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _41 = (*_37);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _42 = const 104_u8;              // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _40 = Eq(move _41, move _42);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _39 = Not(move _40);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _39) -> [0: bb10, otherwise: bb9]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _43 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _47 = _37;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _47;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _49 = _38;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = _49;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _50 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _44 = core::panicking::assert_failed::<u8, u8>(move _45, move _46, move _48, move _50); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb10: {
        _54 = _1;                        // scope 3 at ui/array-slice-vec/estr-slice.rs:13:16: 13:28
        _53 = core::str::<impl str>::as_bytes(move _54) -> bb11; // scope 3 at ui/array-slice-vec/estr-slice.rs:13:16: 13:28
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:13:18: 13:26
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }
    }

    bb11: {
        _55 = const 4_usize;             // scope 3 at ui/array-slice-vec/estr-slice.rs:13:29: 13:30
        _56 = Len((*_53));               // scope 3 at ui/array-slice-vec/estr-slice.rs:13:16: 13:31
        _57 = Lt(_55, _56);              // scope 3 at ui/array-slice-vec/estr-slice.rs:13:16: 13:31
        assert(move _57, "index out of bounds: the length is {} but the index is {}", move _56, _55) -> bb12; // scope 3 at ui/array-slice-vec/estr-slice.rs:13:16: 13:31
    }

    bb12: {
        _52 = &(*_53)[_55];              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _284 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[4])) }
        _58 = _284;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _51 = (move _52, move _58);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _59 = (_51.0: &u8);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _60 = (_51.1: &u8);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _63 = (*_59);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _64 = const 111_u8;              // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _62 = Eq(move _63, move _64);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _61 = Not(move _62);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _61) -> [0: bb14, otherwise: bb13]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _65 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _67 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _69 = _59;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _69;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _60;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _70 = _71;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _72 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _66 = core::panicking::assert_failed::<u8, u8>(move _67, move _68, move _70, move _72); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb14: {
        _74 = const "thing";             // scope 3 at ui/array-slice-vec/estr-slice.rs:15:20: 15:27
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:15:20: 15:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _73 = _74;                       // scope 3 at ui/array-slice-vec/estr-slice.rs:15:20: 15:27
        _76 = &_2;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _77 = &_1;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _75 = (move _76, move _77);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _78 = (_75.0: &&str);            // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _79 = (_75.1: &&str);            // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _82 = _78;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _83 = _79;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _81 = <&str as PartialEq>::eq(move _82, move _83) -> bb15; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb15: {
        _80 = Not(move _81);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _80) -> [0: bb17, otherwise: bb16]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb16: {
        _84 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _86 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _88 = _78;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _87 = _88;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _90 = _79;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _89 = _90;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _91 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _85 = core::panicking::assert_failed::<&str, &str>(move _86, move _87, move _89, move _91); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb17: {
        _93 = &_1;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
        _94 = &_73;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
        _92 = (move _93, move _94);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
        _95 = (_92.0: &&str);            // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
        _96 = (_92.1: &&str);            // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
        _98 = _95;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
        _99 = _96;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
        _97 = <&str as PartialEq>::eq(move _98, move _99) -> bb18; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        switchInt(move _97) -> [0: bb20, otherwise: bb19]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    }

    bb19: {
        _100 = const core::panicking::AssertKind::Ne; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _102 = const core::panicking::AssertKind::Ne; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _104 = _95;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _103 = _104;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _106 = _96;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _105 = _106;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _107 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
        _101 = core::panicking::assert_failed::<&str, &str>(move _102, move _103, move _105, move _107); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb20: {
        _108 = const "aaaa";             // scope 8 at ui/array-slice-vec/estr-slice.rs:19:13: 19:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:19:13: 19:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _109 = const "bbbb";             // scope 13 at ui/array-slice-vec/estr-slice.rs:20:13: 20:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:20:13: 20:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _110 = const "cccc";             // scope 14 at ui/array-slice-vec/estr-slice.rs:22:13: 22:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:22:13: 22:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _111 = const "ccccc";            // scope 15 at ui/array-slice-vec/estr-slice.rs:23:14: 23:21
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:23:14: 23:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _283 = const _;                  // scope 16 at ui/array-slice-vec/estr-slice.rs:25:14: 25:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:25:14: 25:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[3])) }
        _116 = _283;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:25:14: 25:18
        _115 = _116;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:25:14: 25:18
        _114 = move _115 as &[&str] (Pointer(Unsize)); // scope 16 at ui/array-slice-vec/estr-slice.rs:25:14: 25:18
        _123 = &_108;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:25:20: 25:21
        _122 = _123;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:25:20: 25:21
        _121 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _122) -> bb21; // scope 16 at ui/array-slice-vec/estr-slice.rs:25:20: 25:21
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:25:20: 25:21
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb21: {
        _120 = [move _121];              // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _119 = &_120;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _118 = _119;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _117 = move _118 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _113 = Arguments::<'_>::new_v1(move _114, move _117) -> bb22; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb22: {
        _112 = _print(move _113) -> bb23; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb23: {
        _126 = &_108;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:27:13: 27:14
        _128 = _109;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:27:17: 27:18
        _127 = &_128;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:27:17: 27:18
        _125 = <&str as PartialOrd>::lt(move _126, move _127) -> bb24; // scope 16 at ui/array-slice-vec/estr-slice.rs:27:13: 27:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:27:13: 27:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb24: {
        _124 = Not(move _125);           // scope 16 at ui/array-slice-vec/estr-slice.rs:27:5: 27:19
        switchInt(move _124) -> [0: bb26, otherwise: bb25]; // scope 16 at ui/array-slice-vec/estr-slice.rs:27:5: 27:19
    }

    bb25: {
        _129 = core::panicking::panic(const "assertion failed: a < b"); // scope 16 at ui/array-slice-vec/estr-slice.rs:27:5: 27:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:27:5: 27:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb26: {
        _132 = &_108;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:28:13: 28:14
        _134 = _109;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:28:18: 28:19
        _133 = &_134;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:28:18: 28:19
        _131 = <&str as PartialOrd>::le(move _132, move _133) -> bb27; // scope 16 at ui/array-slice-vec/estr-slice.rs:28:13: 28:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:28:13: 28:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb27: {
        _130 = Not(move _131);           // scope 16 at ui/array-slice-vec/estr-slice.rs:28:5: 28:20
        switchInt(move _130) -> [0: bb29, otherwise: bb28]; // scope 16 at ui/array-slice-vec/estr-slice.rs:28:5: 28:20
    }

    bb28: {
        _135 = core::panicking::panic(const "assertion failed: a <= b"); // scope 16 at ui/array-slice-vec/estr-slice.rs:28:5: 28:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:28:5: 28:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb29: {
        _137 = &_108;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
        _138 = &_109;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
        _136 = (move _137, move _138);   // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
        _139 = (_136.0: &&str);          // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
        _140 = (_136.1: &&str);          // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
        _142 = _139;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
        _143 = _140;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
        _141 = <&str as PartialEq>::eq(move _142, move _143) -> bb30; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb30: {
        switchInt(move _141) -> [0: bb32, otherwise: bb31]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    }

    bb31: {
        _144 = const core::panicking::AssertKind::Ne; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _146 = const core::panicking::AssertKind::Ne; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _148 = _139;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _147 = _148;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _150 = _140;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _149 = _150;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _151 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
        _145 = core::panicking::assert_failed::<&str, &str>(move _146, move _147, move _149, move _151); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb32: {
        _154 = &_109;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:30:13: 30:14
        _156 = _108;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:30:18: 30:19
        _155 = &_156;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:30:18: 30:19
        _153 = <&str as PartialOrd>::ge(move _154, move _155) -> bb33; // scope 16 at ui/array-slice-vec/estr-slice.rs:30:13: 30:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:30:13: 30:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb33: {
        _152 = Not(move _153);           // scope 16 at ui/array-slice-vec/estr-slice.rs:30:5: 30:20
        switchInt(move _152) -> [0: bb35, otherwise: bb34]; // scope 16 at ui/array-slice-vec/estr-slice.rs:30:5: 30:20
    }

    bb34: {
        _157 = core::panicking::panic(const "assertion failed: b >= a"); // scope 16 at ui/array-slice-vec/estr-slice.rs:30:5: 30:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:30:5: 30:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb35: {
        _160 = &_109;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:31:13: 31:14
        _162 = _108;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:31:17: 31:18
        _161 = &_162;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:31:17: 31:18
        _159 = <&str as PartialOrd>::gt(move _160, move _161) -> bb36; // scope 16 at ui/array-slice-vec/estr-slice.rs:31:13: 31:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:31:13: 31:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb36: {
        _158 = Not(move _159);           // scope 16 at ui/array-slice-vec/estr-slice.rs:31:5: 31:19
        switchInt(move _158) -> [0: bb38, otherwise: bb37]; // scope 16 at ui/array-slice-vec/estr-slice.rs:31:5: 31:19
    }

    bb37: {
        _163 = core::panicking::panic(const "assertion failed: b > a"); // scope 16 at ui/array-slice-vec/estr-slice.rs:31:5: 31:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:31:5: 31:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb38: {
        _282 = const _;                  // scope 16 at ui/array-slice-vec/estr-slice.rs:33:14: 33:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:33:14: 33:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[2])) }
        _168 = _282;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:33:14: 33:18
        _167 = _168;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:33:14: 33:18
        _166 = move _167 as &[&str] (Pointer(Unsize)); // scope 16 at ui/array-slice-vec/estr-slice.rs:33:14: 33:18
        _175 = &_109;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:33:20: 33:21
        _174 = _175;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:33:20: 33:21
        _173 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _174) -> bb39; // scope 16 at ui/array-slice-vec/estr-slice.rs:33:20: 33:21
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:33:20: 33:21
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb39: {
        _172 = [move _173];              // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _171 = &_172;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _170 = _171;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _169 = move _170 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _165 = Arguments::<'_>::new_v1(move _166, move _169) -> bb40; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb40: {
        _164 = _print(move _165) -> bb41; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb41: {
        _178 = &_108;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:35:13: 35:14
        _180 = _110;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:35:17: 35:18
        _179 = &_180;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:35:17: 35:18
        _177 = <&str as PartialOrd>::lt(move _178, move _179) -> bb42; // scope 16 at ui/array-slice-vec/estr-slice.rs:35:13: 35:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:35:13: 35:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb42: {
        _176 = Not(move _177);           // scope 16 at ui/array-slice-vec/estr-slice.rs:35:5: 35:19
        switchInt(move _176) -> [0: bb44, otherwise: bb43]; // scope 16 at ui/array-slice-vec/estr-slice.rs:35:5: 35:19
    }

    bb43: {
        _181 = core::panicking::panic(const "assertion failed: a < c"); // scope 16 at ui/array-slice-vec/estr-slice.rs:35:5: 35:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:35:5: 35:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb44: {
        _184 = &_108;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:36:13: 36:14
        _186 = _110;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:36:18: 36:19
        _185 = &_186;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:36:18: 36:19
        _183 = <&str as PartialOrd>::le(move _184, move _185) -> bb45; // scope 16 at ui/array-slice-vec/estr-slice.rs:36:13: 36:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:36:13: 36:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb45: {
        _182 = Not(move _183);           // scope 16 at ui/array-slice-vec/estr-slice.rs:36:5: 36:20
        switchInt(move _182) -> [0: bb47, otherwise: bb46]; // scope 16 at ui/array-slice-vec/estr-slice.rs:36:5: 36:20
    }

    bb46: {
        _187 = core::panicking::panic(const "assertion failed: a <= c"); // scope 16 at ui/array-slice-vec/estr-slice.rs:36:5: 36:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:36:5: 36:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb47: {
        _189 = &_108;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
        _190 = &_110;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
        _188 = (move _189, move _190);   // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
        _191 = (_188.0: &&str);          // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
        _192 = (_188.1: &&str);          // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
        _194 = _191;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
        _195 = _192;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
        _193 = <&str as PartialEq>::eq(move _194, move _195) -> bb48; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb48: {
        switchInt(move _193) -> [0: bb50, otherwise: bb49]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    }

    bb49: {
        _196 = const core::panicking::AssertKind::Ne; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _198 = const core::panicking::AssertKind::Ne; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _200 = _191;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _199 = _200;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _202 = _192;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _201 = _202;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _203 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
        _197 = core::panicking::assert_failed::<&str, &str>(move _198, move _199, move _201, move _203); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb50: {
        _206 = &_110;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:38:13: 38:14
        _208 = _108;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:38:18: 38:19
        _207 = &_208;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:38:18: 38:19
        _205 = <&str as PartialOrd>::ge(move _206, move _207) -> bb51; // scope 16 at ui/array-slice-vec/estr-slice.rs:38:13: 38:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:38:13: 38:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb51: {
        _204 = Not(move _205);           // scope 16 at ui/array-slice-vec/estr-slice.rs:38:5: 38:20
        switchInt(move _204) -> [0: bb53, otherwise: bb52]; // scope 16 at ui/array-slice-vec/estr-slice.rs:38:5: 38:20
    }

    bb52: {
        _209 = core::panicking::panic(const "assertion failed: c >= a"); // scope 16 at ui/array-slice-vec/estr-slice.rs:38:5: 38:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:38:5: 38:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb53: {
        _212 = &_110;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:39:13: 39:14
        _214 = _108;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:39:17: 39:18
        _213 = &_214;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:39:17: 39:18
        _211 = <&str as PartialOrd>::gt(move _212, move _213) -> bb54; // scope 16 at ui/array-slice-vec/estr-slice.rs:39:13: 39:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:39:13: 39:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb54: {
        _210 = Not(move _211);           // scope 16 at ui/array-slice-vec/estr-slice.rs:39:5: 39:19
        switchInt(move _210) -> [0: bb56, otherwise: bb55]; // scope 16 at ui/array-slice-vec/estr-slice.rs:39:5: 39:19
    }

    bb55: {
        _215 = core::panicking::panic(const "assertion failed: c > a"); // scope 16 at ui/array-slice-vec/estr-slice.rs:39:5: 39:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:39:5: 39:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb56: {
        _281 = const _;                  // scope 16 at ui/array-slice-vec/estr-slice.rs:41:14: 41:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:41:14: 41:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _220 = _281;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:41:14: 41:18
        _219 = _220;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:41:14: 41:18
        _218 = move _219 as &[&str] (Pointer(Unsize)); // scope 16 at ui/array-slice-vec/estr-slice.rs:41:14: 41:18
        _227 = &_110;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:41:20: 41:21
        _226 = _227;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:41:20: 41:21
        _225 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _226) -> bb57; // scope 16 at ui/array-slice-vec/estr-slice.rs:41:20: 41:21
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:41:20: 41:21
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb57: {
        _224 = [move _225];              // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _223 = &_224;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _222 = _223;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _221 = move _222 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _217 = Arguments::<'_>::new_v1(move _218, move _221) -> bb58; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb58: {
        _216 = _print(move _217) -> bb59; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb59: {
        _230 = &_110;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:43:13: 43:14
        _232 = _111;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:43:17: 43:19
        _231 = &_232;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:43:17: 43:19
        _229 = <&str as PartialOrd>::lt(move _230, move _231) -> bb60; // scope 16 at ui/array-slice-vec/estr-slice.rs:43:13: 43:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:43:13: 43:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb60: {
        _228 = Not(move _229);           // scope 16 at ui/array-slice-vec/estr-slice.rs:43:5: 43:20
        switchInt(move _228) -> [0: bb62, otherwise: bb61]; // scope 16 at ui/array-slice-vec/estr-slice.rs:43:5: 43:20
    }

    bb61: {
        _233 = core::panicking::panic(const "assertion failed: c < cc"); // scope 16 at ui/array-slice-vec/estr-slice.rs:43:5: 43:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:43:5: 43:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb62: {
        _236 = &_110;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:44:13: 44:14
        _238 = _111;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:44:18: 44:20
        _237 = &_238;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:44:18: 44:20
        _235 = <&str as PartialOrd>::le(move _236, move _237) -> bb63; // scope 16 at ui/array-slice-vec/estr-slice.rs:44:13: 44:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:44:13: 44:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb63: {
        _234 = Not(move _235);           // scope 16 at ui/array-slice-vec/estr-slice.rs:44:5: 44:21
        switchInt(move _234) -> [0: bb65, otherwise: bb64]; // scope 16 at ui/array-slice-vec/estr-slice.rs:44:5: 44:21
    }

    bb64: {
        _239 = core::panicking::panic(const "assertion failed: c <= cc"); // scope 16 at ui/array-slice-vec/estr-slice.rs:44:5: 44:21
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:44:5: 44:21
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb65: {
        _241 = &_110;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
        _242 = &_111;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
        _240 = (move _241, move _242);   // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
        _243 = (_240.0: &&str);          // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
        _244 = (_240.1: &&str);          // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
        _246 = _243;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
        _247 = _244;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
        _245 = <&str as PartialEq>::eq(move _246, move _247) -> bb66; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb66: {
        switchInt(move _245) -> [0: bb68, otherwise: bb67]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    }

    bb67: {
        _248 = const core::panicking::AssertKind::Ne; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _250 = const core::panicking::AssertKind::Ne; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _252 = _243;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _251 = _252;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _254 = _244;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _253 = _254;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _255 = Option::<Arguments<'_>>::None; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
        _249 = core::panicking::assert_failed::<&str, &str>(move _250, move _251, move _253, move _255); // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb68: {
        _258 = &_111;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:46:13: 46:15
        _260 = _110;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:46:19: 46:20
        _259 = &_260;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:46:19: 46:20
        _257 = <&str as PartialOrd>::ge(move _258, move _259) -> bb69; // scope 16 at ui/array-slice-vec/estr-slice.rs:46:13: 46:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:46:13: 46:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb69: {
        _256 = Not(move _257);           // scope 16 at ui/array-slice-vec/estr-slice.rs:46:5: 46:21
        switchInt(move _256) -> [0: bb71, otherwise: bb70]; // scope 16 at ui/array-slice-vec/estr-slice.rs:46:5: 46:21
    }

    bb70: {
        _261 = core::panicking::panic(const "assertion failed: cc >= c"); // scope 16 at ui/array-slice-vec/estr-slice.rs:46:5: 46:21
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:46:5: 46:21
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb71: {
        _264 = &_111;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:47:13: 47:15
        _266 = _110;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:47:18: 47:19
        _265 = &_266;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:47:18: 47:19
        _263 = <&str as PartialOrd>::gt(move _264, move _265) -> bb72; // scope 16 at ui/array-slice-vec/estr-slice.rs:47:13: 47:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:47:13: 47:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb72: {
        _262 = Not(move _263);           // scope 16 at ui/array-slice-vec/estr-slice.rs:47:5: 47:20
        switchInt(move _262) -> [0: bb74, otherwise: bb73]; // scope 16 at ui/array-slice-vec/estr-slice.rs:47:5: 47:20
    }

    bb73: {
        _267 = core::panicking::panic(const "assertion failed: cc > c"); // scope 16 at ui/array-slice-vec/estr-slice.rs:47:5: 47:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:47:5: 47:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb74: {
        _280 = const _;                  // scope 16 at ui/array-slice-vec/estr-slice.rs:49:14: 49:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:49:14: 49:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _272 = _280;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:49:14: 49:18
        _271 = _272;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:49:14: 49:18
        _270 = move _271 as &[&str] (Pointer(Unsize)); // scope 16 at ui/array-slice-vec/estr-slice.rs:49:14: 49:18
        _279 = &_111;                    // scope 16 at ui/array-slice-vec/estr-slice.rs:49:20: 49:22
        _278 = _279;                     // scope 16 at ui/array-slice-vec/estr-slice.rs:49:20: 49:22
        _277 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _278) -> bb75; // scope 16 at ui/array-slice-vec/estr-slice.rs:49:20: 49:22
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:49:20: 49:22
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb75: {
        _276 = [move _277];              // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _275 = &_276;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _274 = _275;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _273 = move _274 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _269 = Arguments::<'_>::new_v1(move _270, move _273) -> bb76; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb76: {
        _268 = _print(move _269) -> bb77; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb77: {
        return;                          // scope 0 at ui/array-slice-vec/estr-slice.rs:50:2: 50:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/estr-slice.rs:49:14: 49:18
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/estr-slice.rs:49:14: 49:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/array-slice-vec/estr-slice.rs:49:14: 49:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:49:14: 49:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:49:14: 49:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/estr-slice.rs:49:14: 49:18
        return;                          // scope 0 at ui/array-slice-vec/estr-slice.rs:49:14: 49:18
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/estr-slice.rs:41:14: 41:18
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/estr-slice.rs:41:14: 41:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/array-slice-vec/estr-slice.rs:41:14: 41:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:41:14: 41:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:41:14: 41:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/estr-slice.rs:41:14: 41:18
        return;                          // scope 0 at ui/array-slice-vec/estr-slice.rs:41:14: 41:18
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/estr-slice.rs:33:14: 33:18
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/estr-slice.rs:33:14: 33:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/array-slice-vec/estr-slice.rs:33:14: 33:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:33:14: 33:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:33:14: 33:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/estr-slice.rs:33:14: 33:18
        return;                          // scope 0 at ui/array-slice-vec/estr-slice.rs:33:14: 33:18
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/estr-slice.rs:25:14: 25:18
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/estr-slice.rs:25:14: 25:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/array-slice-vec/estr-slice.rs:25:14: 25:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:25:14: 25:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:25:14: 25:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/estr-slice.rs:25:14: 25:18
        return;                          // scope 0 at ui/array-slice-vec/estr-slice.rs:25:14: 25:18
    }
}

promoted[4] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u8;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:13:33: 13:42

    bb0: {
        _1 = const 'o' as u8 (IntToInt); // scope 0 at ui/array-slice-vec/estr-slice.rs:13:33: 13:42
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u8;                      // in scope 0 at ui/array-slice-vec/estr-slice.rs:12:33: 12:42

    bb0: {
        _1 = const 'h' as u8 (IntToInt); // scope 0 at ui/array-slice-vec/estr-slice.rs:12:33: 12:42
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[6] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/estr-slice.rs:10:14: 10:18
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/estr-slice.rs:10:14: 10:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/array-slice-vec/estr-slice.rs:10:14: 10:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:10:14: 10:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:10:14: 10:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/estr-slice.rs:10:14: 10:18
        return;                          // scope 0 at ui/array-slice-vec/estr-slice.rs:10:14: 10:18
    }
}

promoted[7] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/estr-slice.rs:9:14: 9:18
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/estr-slice.rs:9:14: 9:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/array-slice-vec/estr-slice.rs:9:14: 9:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:9:14: 9:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/estr-slice.rs:9:14: 9:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/estr-slice.rs:9:14: 9:18
        return;                          // scope 0 at ui/array-slice-vec/estr-slice.rs:9:14: 9:18
    }
}
