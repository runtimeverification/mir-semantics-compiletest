// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &[isize];
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&isize, &isize);
    let mut _18: &isize;
    let _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let _35: ();
    let mut _36: std::fmt::Arguments<'_>;
    let mut _37: &[&str];
    let mut _38: &[core::fmt::rt::Argument<'_>];
    let _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: [core::fmt::rt::Argument<'_>; 1];
    let mut _41: core::fmt::rt::Argument<'_>;
    let _42: &&[isize];
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: &&[isize];
    let mut _46: &&[isize];
    let _47: &[isize];
    let mut _48: !;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: &&[isize];
    let mut _52: &&[isize];
    let _53: &[isize];
    let mut _54: !;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: &&[isize];
    let mut _58: &&[isize];
    let mut _59: !;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: &&[isize];
    let mut _63: &&[isize];
    let _64: &[isize];
    let mut _65: !;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: &&[isize];
    let mut _69: &&[isize];
    let _70: &[isize];
    let mut _71: !;
    let _72: ();
    let mut _73: std::fmt::Arguments<'_>;
    let mut _74: &[&str];
    let mut _75: &[core::fmt::rt::Argument<'_>];
    let _76: &[core::fmt::rt::Argument<'_>; 1];
    let _77: [core::fmt::rt::Argument<'_>; 1];
    let mut _78: core::fmt::rt::Argument<'_>;
    let _79: &&[isize];
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: &&[isize];
    let mut _83: &&[isize];
    let _84: &[isize];
    let mut _85: !;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: &&[isize];
    let mut _89: &&[isize];
    let _90: &[isize];
    let mut _91: !;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: &&[isize];
    let mut _95: &&[isize];
    let mut _96: !;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: &&[isize];
    let mut _100: &&[isize];
    let _101: &[isize];
    let mut _102: !;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: &&[isize];
    let mut _106: &&[isize];
    let _107: &[isize];
    let mut _108: !;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: &&[isize];
    let mut _112: &&[isize];
    let _113: &[isize];
    let mut _114: !;
    let mut _115: bool;
    let mut _116: bool;
    let mut _117: &&[isize];
    let mut _118: &&[isize];
    let _119: &[isize];
    let mut _120: !;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: &&[isize];
    let mut _124: &&[isize];
    let mut _125: !;
    let mut _126: bool;
    let mut _127: bool;
    let mut _128: &&[isize];
    let mut _129: &&[isize];
    let _130: &[isize];
    let mut _131: !;
    let mut _132: bool;
    let mut _133: bool;
    let mut _134: &&[isize];
    let mut _135: &&[isize];
    let _136: &[isize];
    let mut _137: !;
    let _138: ();
    let mut _139: std::fmt::Arguments<'_>;
    let mut _140: &[&str];
    let mut _141: &[core::fmt::rt::Argument<'_>];
    let _142: &[core::fmt::rt::Argument<'_>; 1];
    let _143: [core::fmt::rt::Argument<'_>; 1];
    let mut _144: core::fmt::rt::Argument<'_>;
    let _145: &&[isize];
    let mut _146: bool;
    let mut _147: bool;
    let mut _148: &&[isize];
    let mut _149: &&[isize];
    let _150: &[isize];
    let mut _151: !;
    let mut _152: bool;
    let mut _153: bool;
    let mut _154: &&[isize];
    let mut _155: &&[isize];
    let _156: &[isize];
    let mut _157: !;
    let mut _158: bool;
    let mut _159: bool;
    let mut _160: &&[isize];
    let mut _161: &&[isize];
    let mut _162: !;
    let mut _163: bool;
    let mut _164: bool;
    let mut _165: &&[isize];
    let mut _166: &&[isize];
    let _167: &[isize];
    let mut _168: !;
    let mut _169: bool;
    let mut _170: bool;
    let mut _171: &&[isize];
    let mut _172: &&[isize];
    let _173: &[isize];
    let mut _174: !;
    let _175: ();
    let mut _176: std::fmt::Arguments<'_>;
    let mut _177: &[&str];
    let mut _178: &[core::fmt::rt::Argument<'_>];
    let _179: &[core::fmt::rt::Argument<'_>; 1];
    let _180: [core::fmt::rt::Argument<'_>; 1];
    let mut _181: core::fmt::rt::Argument<'_>;
    let _182: &&[isize];
    let mut _194: &[isize; 5];
    scope 1 {
        debug x => _1;
        let mut _2: &[isize];
        let mut _193: &[isize; 5];
        scope 2 {
            debug z => _2;
            let _8: &isize;
            let _9: &isize;
            let _22: &isize;
            let _23: &isize;
            let _31: &[isize];
            let mut _190: &[isize; 5];
            let mut _191: &isize;
            let mut _192: &isize;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
            scope 5 {
                debug left_val => _22;
                debug right_val => _23;
                let _28: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _28;
                }
            }
            scope 7 {
                debug a => _31;
                let _32: &[isize];
                let mut _189: &[isize; 5];
                scope 8 {
                    debug b => _32;
                    let _33: &[isize];
                    let mut _188: &[isize; 5];
                    scope 9 {
                        debug c => _33;
                        let _34: &[isize];
                        let mut _187: &[isize; 6];
                        scope 10 {
                            debug cc => _34;
                            let mut _183: &[&str; 2];
                            let mut _184: &[&str; 2];
                            let mut _185: &[&str; 2];
                            let mut _186: &[&str; 2];
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _194 = const _;
        _1 = _194 as &[isize] (Pointer(Unsize));
        _193 = const _;
        _2 = _193 as &[isize] (Pointer(Unsize));
        _2 = _1;
        _5 = const 0_usize;
        _6 = Len((*_2));
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb1, unwind continue];
    }

    bb1: {
        _4 = &(*_2)[_5];
        _192 = const _;
        _3 = (move _4, _192);
        _8 = (_3.0: &isize);
        _9 = (_3.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb3: {
        _19 = const 4_usize;
        _20 = Len((*_2));
        _21 = Lt(_19, _20);
        assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> [success: bb4, unwind continue];
    }

    bb4: {
        _18 = &(*_2)[_19];
        _191 = const _;
        _17 = (move _18, _191);
        _22 = (_17.0: &isize);
        _23 = (_17.1: &isize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<isize, isize>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb6: {
        _190 = const _;
        _31 = _190 as &[isize] (Pointer(Unsize));
        _189 = const _;
        _32 = _189 as &[isize] (Pointer(Unsize));
        _188 = const _;
        _33 = _188 as &[isize] (Pointer(Unsize));
        _187 = const _;
        _34 = _187 as &[isize] (Pointer(Unsize));
        _186 = const _;
        _37 = _186 as &[&str] (Pointer(Unsize));
        _42 = &_31;
        _41 = core::fmt::rt::Argument::<'_>::new_debug::<&[isize]>(_42) -> [return: bb7, unwind continue];
    }

    bb7: {
        _40 = [move _41];
        _39 = &_40;
        _38 = _39 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _36 = Arguments::<'_>::new_v1(move _37, move _38) -> [return: bb8, unwind continue];
    }

    bb8: {
        _35 = _print(move _36) -> [return: bb9, unwind continue];
    }

    bb9: {
        _45 = &_31;
        _47 = _32;
        _46 = &_47;
        _44 = <&[isize] as PartialOrd>::lt(move _45, move _46) -> [return: bb10, unwind continue];
    }

    bb10: {
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _48 = core::panicking::panic(const "assertion failed: a < b") -> unwind continue;
    }

    bb12: {
        _51 = &_31;
        _53 = _32;
        _52 = &_53;
        _50 = <&[isize] as PartialOrd>::le(move _51, move _52) -> [return: bb13, unwind continue];
    }

    bb13: {
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _54 = core::panicking::panic(const "assertion failed: a <= b") -> unwind continue;
    }

    bb15: {
        _57 = &_31;
        _58 = &_32;
        _56 = <&[isize] as PartialEq>::ne(move _57, move _58) -> [return: bb16, unwind continue];
    }

    bb16: {
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _59 = core::panicking::panic(const "assertion failed: a != b") -> unwind continue;
    }

    bb18: {
        _62 = &_32;
        _64 = _31;
        _63 = &_64;
        _61 = <&[isize] as PartialOrd>::ge(move _62, move _63) -> [return: bb19, unwind continue];
    }

    bb19: {
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _65 = core::panicking::panic(const "assertion failed: b >= a") -> unwind continue;
    }

    bb21: {
        _68 = &_32;
        _70 = _31;
        _69 = &_70;
        _67 = <&[isize] as PartialOrd>::gt(move _68, move _69) -> [return: bb22, unwind continue];
    }

    bb22: {
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _71 = core::panicking::panic(const "assertion failed: b > a") -> unwind continue;
    }

    bb24: {
        _185 = const _;
        _74 = _185 as &[&str] (Pointer(Unsize));
        _79 = &_32;
        _78 = core::fmt::rt::Argument::<'_>::new_debug::<&[isize]>(_79) -> [return: bb25, unwind continue];
    }

    bb25: {
        _77 = [move _78];
        _76 = &_77;
        _75 = _76 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _73 = Arguments::<'_>::new_v1(move _74, move _75) -> [return: bb26, unwind continue];
    }

    bb26: {
        _72 = _print(move _73) -> [return: bb27, unwind continue];
    }

    bb27: {
        _82 = &_32;
        _84 = _33;
        _83 = &_84;
        _81 = <&[isize] as PartialOrd>::lt(move _82, move _83) -> [return: bb28, unwind continue];
    }

    bb28: {
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _85 = core::panicking::panic(const "assertion failed: b < c") -> unwind continue;
    }

    bb30: {
        _88 = &_32;
        _90 = _33;
        _89 = &_90;
        _87 = <&[isize] as PartialOrd>::le(move _88, move _89) -> [return: bb31, unwind continue];
    }

    bb31: {
        _86 = Not(move _87);
        switchInt(move _86) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _91 = core::panicking::panic(const "assertion failed: b <= c") -> unwind continue;
    }

    bb33: {
        _94 = &_32;
        _95 = &_33;
        _93 = <&[isize] as PartialEq>::ne(move _94, move _95) -> [return: bb34, unwind continue];
    }

    bb34: {
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _96 = core::panicking::panic(const "assertion failed: b != c") -> unwind continue;
    }

    bb36: {
        _99 = &_33;
        _101 = _32;
        _100 = &_101;
        _98 = <&[isize] as PartialOrd>::ge(move _99, move _100) -> [return: bb37, unwind continue];
    }

    bb37: {
        _97 = Not(move _98);
        switchInt(move _97) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _102 = core::panicking::panic(const "assertion failed: c >= b") -> unwind continue;
    }

    bb39: {
        _105 = &_33;
        _107 = _32;
        _106 = &_107;
        _104 = <&[isize] as PartialOrd>::gt(move _105, move _106) -> [return: bb40, unwind continue];
    }

    bb40: {
        _103 = Not(move _104);
        switchInt(move _103) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _108 = core::panicking::panic(const "assertion failed: c > b") -> unwind continue;
    }

    bb42: {
        _111 = &_31;
        _113 = _33;
        _112 = &_113;
        _110 = <&[isize] as PartialOrd>::lt(move _111, move _112) -> [return: bb43, unwind continue];
    }

    bb43: {
        _109 = Not(move _110);
        switchInt(move _109) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _114 = core::panicking::panic(const "assertion failed: a < c") -> unwind continue;
    }

    bb45: {
        _117 = &_31;
        _119 = _33;
        _118 = &_119;
        _116 = <&[isize] as PartialOrd>::le(move _117, move _118) -> [return: bb46, unwind continue];
    }

    bb46: {
        _115 = Not(move _116);
        switchInt(move _115) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _120 = core::panicking::panic(const "assertion failed: a <= c") -> unwind continue;
    }

    bb48: {
        _123 = &_31;
        _124 = &_33;
        _122 = <&[isize] as PartialEq>::ne(move _123, move _124) -> [return: bb49, unwind continue];
    }

    bb49: {
        _121 = Not(move _122);
        switchInt(move _121) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _125 = core::panicking::panic(const "assertion failed: a != c") -> unwind continue;
    }

    bb51: {
        _128 = &_33;
        _130 = _31;
        _129 = &_130;
        _127 = <&[isize] as PartialOrd>::ge(move _128, move _129) -> [return: bb52, unwind continue];
    }

    bb52: {
        _126 = Not(move _127);
        switchInt(move _126) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _131 = core::panicking::panic(const "assertion failed: c >= a") -> unwind continue;
    }

    bb54: {
        _134 = &_33;
        _136 = _31;
        _135 = &_136;
        _133 = <&[isize] as PartialOrd>::gt(move _134, move _135) -> [return: bb55, unwind continue];
    }

    bb55: {
        _132 = Not(move _133);
        switchInt(move _132) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _137 = core::panicking::panic(const "assertion failed: c > a") -> unwind continue;
    }

    bb57: {
        _184 = const _;
        _140 = _184 as &[&str] (Pointer(Unsize));
        _145 = &_33;
        _144 = core::fmt::rt::Argument::<'_>::new_debug::<&[isize]>(_145) -> [return: bb58, unwind continue];
    }

    bb58: {
        _143 = [move _144];
        _142 = &_143;
        _141 = _142 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _139 = Arguments::<'_>::new_v1(move _140, move _141) -> [return: bb59, unwind continue];
    }

    bb59: {
        _138 = _print(move _139) -> [return: bb60, unwind continue];
    }

    bb60: {
        _148 = &_31;
        _150 = _34;
        _149 = &_150;
        _147 = <&[isize] as PartialOrd>::lt(move _148, move _149) -> [return: bb61, unwind continue];
    }

    bb61: {
        _146 = Not(move _147);
        switchInt(move _146) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _151 = core::panicking::panic(const "assertion failed: a < cc") -> unwind continue;
    }

    bb63: {
        _154 = &_31;
        _156 = _34;
        _155 = &_156;
        _153 = <&[isize] as PartialOrd>::le(move _154, move _155) -> [return: bb64, unwind continue];
    }

    bb64: {
        _152 = Not(move _153);
        switchInt(move _152) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _157 = core::panicking::panic(const "assertion failed: a <= cc") -> unwind continue;
    }

    bb66: {
        _160 = &_31;
        _161 = &_34;
        _159 = <&[isize] as PartialEq>::ne(move _160, move _161) -> [return: bb67, unwind continue];
    }

    bb67: {
        _158 = Not(move _159);
        switchInt(move _158) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _162 = core::panicking::panic(const "assertion failed: a != cc") -> unwind continue;
    }

    bb69: {
        _165 = &_34;
        _167 = _31;
        _166 = &_167;
        _164 = <&[isize] as PartialOrd>::ge(move _165, move _166) -> [return: bb70, unwind continue];
    }

    bb70: {
        _163 = Not(move _164);
        switchInt(move _163) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _168 = core::panicking::panic(const "assertion failed: cc >= a") -> unwind continue;
    }

    bb72: {
        _171 = &_34;
        _173 = _31;
        _172 = &_173;
        _170 = <&[isize] as PartialOrd>::gt(move _171, move _172) -> [return: bb73, unwind continue];
    }

    bb73: {
        _169 = Not(move _170);
        switchInt(move _169) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _174 = core::panicking::panic(const "assertion failed: cc > a") -> unwind continue;
    }

    bb75: {
        _183 = const _;
        _177 = _183 as &[&str] (Pointer(Unsize));
        _182 = &_34;
        _181 = core::fmt::rt::Argument::<'_>::new_debug::<&[isize]>(_182) -> [return: bb76, unwind continue];
    }

    bb76: {
        _180 = [move _181];
        _179 = &_180;
        _178 = _179 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _176 = Arguments::<'_>::new_v1(move _177, move _178) -> [return: bb77, unwind continue];
    }

    bb77: {
        _175 = _print(move _176) -> [return: bb78, unwind continue];
    }

    bb78: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[isize; 6] = {
    let mut _0: &[isize; 6];
    let mut _1: [isize; 6];

    bb0: {
        _1 = [const 2_isize, const 2_isize, const 2_isize, const 2_isize, const 2_isize, const 2_isize];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[isize; 5] = {
    let mut _0: &[isize; 5];
    let mut _1: [isize; 5];

    bb0: {
        _1 = [const 2_isize, const 2_isize, const 2_isize, const 2_isize, const 3_isize];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[isize; 5] = {
    let mut _0: &[isize; 5];
    let mut _1: [isize; 5];

    bb0: {
        _1 = [const 2_isize, const 2_isize, const 2_isize, const 2_isize, const 2_isize];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[isize; 5] = {
    let mut _0: &[isize; 5];
    let mut _1: [isize; 5];

    bb0: {
        _1 = [const 1_isize, const 1_isize, const 1_isize, const 1_isize, const 1_isize];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &[isize; 5] = {
    let mut _0: &[isize; 5];
    let mut _1: [isize; 5];

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize, const 5_isize];
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &[isize; 5] = {
    let mut _0: &[isize; 5];
    let mut _1: [isize; 5];

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize, const 5_isize];
        _0 = &_1;
        return;
    }
}
