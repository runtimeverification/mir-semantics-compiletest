// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/evec-slice.rs:4:15: 4:15
    let _1: &[isize];                    // in scope 0 at ui/array-slice-vec/evec-slice.rs:5:9: 5:10
    let mut _2: &[isize; 5];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:5:24: 5:36
    let _3: &[isize; 5];                 // in scope 0 at ui/array-slice-vec/evec-slice.rs:5:24: 5:36
    let mut _5: &[isize; 5];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:6:28: 6:40
    let _6: &[isize; 5];                 // in scope 0 at ui/array-slice-vec/evec-slice.rs:6:28: 6:40
    let mut _7: &[isize];                // in scope 0 at ui/array-slice-vec/evec-slice.rs:7:9: 7:10
    let mut _8: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _10: usize;                      // in scope 0 at ui/array-slice-vec/evec-slice.rs:8:18: 8:19
    let mut _11: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _27: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _28: usize;                      // in scope 0 at ui/array-slice-vec/evec-slice.rs:9:18: 9:19
    let mut _29: usize;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:9:16: 9:20
    let mut _30: bool;                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:9:16: 9:20
    let mut _31: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _34: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _35: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _36: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _37: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _39: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _40: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _41: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _42: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _43: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _44: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _47: &[isize; 5];            // in scope 0 at ui/array-slice-vec/evec-slice.rs:11:24: 11:36
    let _48: &[isize; 5];                // in scope 0 at ui/array-slice-vec/evec-slice.rs:11:24: 11:36
    let mut _50: &[isize; 5];            // in scope 0 at ui/array-slice-vec/evec-slice.rs:12:24: 12:36
    let _51: &[isize; 5];                // in scope 0 at ui/array-slice-vec/evec-slice.rs:12:24: 12:36
    let mut _53: &[isize; 5];            // in scope 0 at ui/array-slice-vec/evec-slice.rs:13:24: 13:36
    let _54: &[isize; 5];                // in scope 0 at ui/array-slice-vec/evec-slice.rs:13:24: 13:36
    let mut _56: &[isize; 6];            // in scope 0 at ui/array-slice-vec/evec-slice.rs:14:25: 14:39
    let _57: &[isize; 6];                // in scope 0 at ui/array-slice-vec/evec-slice.rs:14:25: 14:39
    let _58: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _59: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _60: &[&str];                // in scope 0 at ui/array-slice-vec/evec-slice.rs:16:14: 16:20
    let mut _61: &[&str; 2];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:16:14: 16:20
    let _62: &[&str; 2];                 // in scope 0 at ui/array-slice-vec/evec-slice.rs:16:14: 16:20
    let mut _63: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _64: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _65: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _66: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _67: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/evec-slice.rs:16:22: 16:23
    let mut _68: &&[isize];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:16:22: 16:23
    let _69: &&[isize];                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:16:22: 16:23
    let mut _70: bool;                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:18:5: 18:19
    let mut _71: bool;                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:18:13: 18:18
    let mut _72: &&[isize];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:18:13: 18:14
    let mut _73: &&[isize];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:18:17: 18:18
    let _74: &[isize];                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:18:17: 18:18
    let mut _75: !;                      // in scope 0 at ui/array-slice-vec/evec-slice.rs:18:5: 18:19
    let mut _76: bool;                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:19:5: 19:20
    let mut _77: bool;                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:19:13: 19:19
    let mut _78: &&[isize];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:19:13: 19:14
    let mut _79: &&[isize];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:19:18: 19:19
    let _80: &[isize];                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:19:18: 19:19
    let mut _81: !;                      // in scope 0 at ui/array-slice-vec/evec-slice.rs:19:5: 19:20
    let mut _82: bool;                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:20:5: 20:20
    let mut _83: bool;                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:20:13: 20:19
    let mut _84: &&[isize];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:20:13: 20:14
    let mut _85: &&[isize];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:20:18: 20:19
    let mut _86: !;                      // in scope 0 at ui/array-slice-vec/evec-slice.rs:20:5: 20:20
    let mut _87: bool;                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:21:5: 21:20
    let mut _88: bool;                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:21:13: 21:19
    let mut _89: &&[isize];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:21:13: 21:14
    let mut _90: &&[isize];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:21:18: 21:19
    let _91: &[isize];                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:21:18: 21:19
    let mut _92: !;                      // in scope 0 at ui/array-slice-vec/evec-slice.rs:21:5: 21:20
    let mut _93: bool;                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:22:5: 22:19
    let mut _94: bool;                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:22:13: 22:18
    let mut _95: &&[isize];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:22:13: 22:14
    let mut _96: &&[isize];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:22:17: 22:18
    let _97: &[isize];                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:22:17: 22:18
    let mut _98: !;                      // in scope 0 at ui/array-slice-vec/evec-slice.rs:22:5: 22:19
    let _99: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _100: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _101: &[&str];               // in scope 0 at ui/array-slice-vec/evec-slice.rs:24:14: 24:20
    let mut _102: &[&str; 2];            // in scope 0 at ui/array-slice-vec/evec-slice.rs:24:14: 24:20
    let _103: &[&str; 2];                // in scope 0 at ui/array-slice-vec/evec-slice.rs:24:14: 24:20
    let mut _104: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _105: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _106: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _107: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _108: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/evec-slice.rs:24:22: 24:23
    let mut _109: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:24:22: 24:23
    let _110: &&[isize];                 // in scope 0 at ui/array-slice-vec/evec-slice.rs:24:22: 24:23
    let mut _111: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:26:5: 26:19
    let mut _112: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:26:13: 26:18
    let mut _113: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:26:13: 26:14
    let mut _114: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:26:17: 26:18
    let _115: &[isize];                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:26:17: 26:18
    let mut _116: !;                     // in scope 0 at ui/array-slice-vec/evec-slice.rs:26:5: 26:19
    let mut _117: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:27:5: 27:20
    let mut _118: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:27:13: 27:19
    let mut _119: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:27:13: 27:14
    let mut _120: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:27:18: 27:19
    let _121: &[isize];                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:27:18: 27:19
    let mut _122: !;                     // in scope 0 at ui/array-slice-vec/evec-slice.rs:27:5: 27:20
    let mut _123: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:28:5: 28:20
    let mut _124: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:28:13: 28:19
    let mut _125: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:28:13: 28:14
    let mut _126: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:28:18: 28:19
    let mut _127: !;                     // in scope 0 at ui/array-slice-vec/evec-slice.rs:28:5: 28:20
    let mut _128: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:29:5: 29:20
    let mut _129: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:29:13: 29:19
    let mut _130: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:29:13: 29:14
    let mut _131: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:29:18: 29:19
    let _132: &[isize];                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:29:18: 29:19
    let mut _133: !;                     // in scope 0 at ui/array-slice-vec/evec-slice.rs:29:5: 29:20
    let mut _134: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:30:5: 30:19
    let mut _135: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:30:13: 30:18
    let mut _136: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:30:13: 30:14
    let mut _137: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:30:17: 30:18
    let _138: &[isize];                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:30:17: 30:18
    let mut _139: !;                     // in scope 0 at ui/array-slice-vec/evec-slice.rs:30:5: 30:19
    let mut _140: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:32:5: 32:19
    let mut _141: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:32:13: 32:18
    let mut _142: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:32:13: 32:14
    let mut _143: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:32:17: 32:18
    let _144: &[isize];                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:32:17: 32:18
    let mut _145: !;                     // in scope 0 at ui/array-slice-vec/evec-slice.rs:32:5: 32:19
    let mut _146: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:33:5: 33:20
    let mut _147: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:33:13: 33:19
    let mut _148: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:33:13: 33:14
    let mut _149: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:33:18: 33:19
    let _150: &[isize];                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:33:18: 33:19
    let mut _151: !;                     // in scope 0 at ui/array-slice-vec/evec-slice.rs:33:5: 33:20
    let mut _152: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:34:5: 34:20
    let mut _153: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:34:13: 34:19
    let mut _154: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:34:13: 34:14
    let mut _155: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:34:18: 34:19
    let mut _156: !;                     // in scope 0 at ui/array-slice-vec/evec-slice.rs:34:5: 34:20
    let mut _157: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:35:5: 35:20
    let mut _158: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:35:13: 35:19
    let mut _159: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:35:13: 35:14
    let mut _160: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:35:18: 35:19
    let _161: &[isize];                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:35:18: 35:19
    let mut _162: !;                     // in scope 0 at ui/array-slice-vec/evec-slice.rs:35:5: 35:20
    let mut _163: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:36:5: 36:19
    let mut _164: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:36:13: 36:18
    let mut _165: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:36:13: 36:14
    let mut _166: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:36:17: 36:18
    let _167: &[isize];                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:36:17: 36:18
    let mut _168: !;                     // in scope 0 at ui/array-slice-vec/evec-slice.rs:36:5: 36:19
    let _169: ();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _170: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _171: &[&str];               // in scope 0 at ui/array-slice-vec/evec-slice.rs:38:14: 38:20
    let mut _172: &[&str; 2];            // in scope 0 at ui/array-slice-vec/evec-slice.rs:38:14: 38:20
    let _173: &[&str; 2];                // in scope 0 at ui/array-slice-vec/evec-slice.rs:38:14: 38:20
    let mut _174: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _175: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _176: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _177: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _178: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/evec-slice.rs:38:22: 38:23
    let mut _179: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:38:22: 38:23
    let _180: &&[isize];                 // in scope 0 at ui/array-slice-vec/evec-slice.rs:38:22: 38:23
    let mut _181: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:40:5: 40:20
    let mut _182: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:40:13: 40:19
    let mut _183: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:40:13: 40:14
    let mut _184: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:40:17: 40:19
    let _185: &[isize];                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:40:17: 40:19
    let mut _186: !;                     // in scope 0 at ui/array-slice-vec/evec-slice.rs:40:5: 40:20
    let mut _187: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:41:5: 41:21
    let mut _188: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:41:13: 41:20
    let mut _189: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:41:13: 41:14
    let mut _190: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:41:18: 41:20
    let _191: &[isize];                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:41:18: 41:20
    let mut _192: !;                     // in scope 0 at ui/array-slice-vec/evec-slice.rs:41:5: 41:21
    let mut _193: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:42:5: 42:21
    let mut _194: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:42:13: 42:20
    let mut _195: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:42:13: 42:14
    let mut _196: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:42:18: 42:20
    let mut _197: !;                     // in scope 0 at ui/array-slice-vec/evec-slice.rs:42:5: 42:21
    let mut _198: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:43:5: 43:21
    let mut _199: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:43:13: 43:20
    let mut _200: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:43:13: 43:15
    let mut _201: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:43:19: 43:20
    let _202: &[isize];                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:43:19: 43:20
    let mut _203: !;                     // in scope 0 at ui/array-slice-vec/evec-slice.rs:43:5: 43:21
    let mut _204: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:44:5: 44:20
    let mut _205: bool;                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:44:13: 44:19
    let mut _206: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:44:13: 44:15
    let mut _207: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:44:18: 44:19
    let _208: &[isize];                  // in scope 0 at ui/array-slice-vec/evec-slice.rs:44:18: 44:19
    let mut _209: !;                     // in scope 0 at ui/array-slice-vec/evec-slice.rs:44:5: 44:20
    let _210: ();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _211: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _212: &[&str];               // in scope 0 at ui/array-slice-vec/evec-slice.rs:46:14: 46:20
    let mut _213: &[&str; 2];            // in scope 0 at ui/array-slice-vec/evec-slice.rs:46:14: 46:20
    let _214: &[&str; 2];                // in scope 0 at ui/array-slice-vec/evec-slice.rs:46:14: 46:20
    let mut _215: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _216: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _217: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _218: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _219: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/evec-slice.rs:46:22: 46:24
    let mut _220: &&[isize];             // in scope 0 at ui/array-slice-vec/evec-slice.rs:46:22: 46:24
    let _221: &&[isize];                 // in scope 0 at ui/array-slice-vec/evec-slice.rs:46:22: 46:24
    let mut _233: &[isize; 5];           // in scope 0 at ui/array-slice-vec/evec-slice.rs:5:24: 5:36
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/evec-slice.rs:5:9: 5:10
        let mut _4: &[isize];            // in scope 1 at ui/array-slice-vec/evec-slice.rs:6:9: 6:14
        let mut _232: &[isize; 5];       // in scope 1 at ui/array-slice-vec/evec-slice.rs:6:28: 6:40
        scope 2 {
            debug z => _4;               // in scope 2 at ui/array-slice-vec/evec-slice.rs:6:9: 6:14
            let _12: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _13: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _32: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _33: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _46: &[isize];           // in scope 2 at ui/array-slice-vec/evec-slice.rs:11:9: 11:10
            let mut _229: &[isize; 5];   // in scope 2 at ui/array-slice-vec/evec-slice.rs:11:24: 11:36
            let mut _230: &isize;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _231: &isize;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _12;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _13;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _18: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _18;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug left_val => _32;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _33;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _38: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _38;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 7 {
                debug a => _46;          // in scope 7 at ui/array-slice-vec/evec-slice.rs:11:9: 11:10
                let _49: &[isize];       // in scope 7 at ui/array-slice-vec/evec-slice.rs:12:9: 12:10
                let mut _228: &[isize; 5]; // in scope 7 at ui/array-slice-vec/evec-slice.rs:12:24: 12:36
                scope 8 {
                    debug b => _49;      // in scope 8 at ui/array-slice-vec/evec-slice.rs:12:9: 12:10
                    let _52: &[isize];   // in scope 8 at ui/array-slice-vec/evec-slice.rs:13:9: 13:10
                    let mut _227: &[isize; 5]; // in scope 8 at ui/array-slice-vec/evec-slice.rs:13:24: 13:36
                    scope 9 {
                        debug c => _52;  // in scope 9 at ui/array-slice-vec/evec-slice.rs:13:9: 13:10
                        let _55: &[isize]; // in scope 9 at ui/array-slice-vec/evec-slice.rs:14:9: 14:11
                        let mut _226: &[isize; 6]; // in scope 9 at ui/array-slice-vec/evec-slice.rs:14:25: 14:39
                        scope 10 {
                            debug cc => _55; // in scope 10 at ui/array-slice-vec/evec-slice.rs:14:9: 14:11
                            let mut _222: &[&str; 2]; // in scope 10 at ui/array-slice-vec/evec-slice.rs:46:14: 46:20
                            let mut _223: &[&str; 2]; // in scope 10 at ui/array-slice-vec/evec-slice.rs:38:14: 38:20
                            let mut _224: &[&str; 2]; // in scope 10 at ui/array-slice-vec/evec-slice.rs:24:14: 24:20
                            let mut _225: &[&str; 2]; // in scope 10 at ui/array-slice-vec/evec-slice.rs:16:14: 16:20
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _233 = const _;                  // scope 0 at ui/array-slice-vec/evec-slice.rs:5:24: 5:36
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:5:24: 5:36
                                         // + literal: Const { ty: &[isize; 5], val: Unevaluated(main, [], Some(promoted[11])) }
        _3 = _233;                       // scope 0 at ui/array-slice-vec/evec-slice.rs:5:24: 5:36
        _2 = _3;                         // scope 0 at ui/array-slice-vec/evec-slice.rs:5:24: 5:36
        _1 = move _2 as &[isize] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/evec-slice.rs:5:24: 5:36
        _232 = const _;                  // scope 1 at ui/array-slice-vec/evec-slice.rs:6:28: 6:40
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:6:28: 6:40
                                         // + literal: Const { ty: &[isize; 5], val: Unevaluated(main, [], Some(promoted[10])) }
        _6 = _232;                       // scope 1 at ui/array-slice-vec/evec-slice.rs:6:28: 6:40
        _5 = _6;                         // scope 1 at ui/array-slice-vec/evec-slice.rs:6:28: 6:40
        _4 = move _5 as &[isize] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/evec-slice.rs:6:28: 6:40
        _7 = _1;                         // scope 2 at ui/array-slice-vec/evec-slice.rs:7:9: 7:10
        _4 = move _7;                    // scope 2 at ui/array-slice-vec/evec-slice.rs:7:5: 7:10
        _10 = const 0_usize;             // scope 2 at ui/array-slice-vec/evec-slice.rs:8:18: 8:19
        _9 = &(*_4)[_10];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _231 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[9])) }
        _11 = _231;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _11);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_8.0: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_8.1: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = (*_12);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = const 1_isize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = Eq(move _16, move _17);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _14 = Not(move _15);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb2, otherwise: bb1]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<isize, isize>(move _20, move _21, move _23, move _25); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _28 = const 4_usize;             // scope 2 at ui/array-slice-vec/evec-slice.rs:9:18: 9:19
        _29 = Len((*_4));                // scope 2 at ui/array-slice-vec/evec-slice.rs:9:16: 9:20
        _30 = Lt(_28, _29);              // scope 2 at ui/array-slice-vec/evec-slice.rs:9:16: 9:20
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb3; // scope 2 at ui/array-slice-vec/evec-slice.rs:9:16: 9:20
    }

    bb3: {
        _27 = &(*_4)[_28];               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _230 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[8])) }
        _31 = _230;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _26 = (move _27, move _31);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _32 = (_26.0: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _33 = (_26.1: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _36 = (*_32);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _37 = const 5_isize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _35 = Eq(move _36, move _37);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _34 = Not(move _35);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _34) -> [0: bb5, otherwise: bb4]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _38 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _40 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _42 = _32;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _42;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _44 = _33;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _43 = _44;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _45 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _39 = core::panicking::assert_failed::<isize, isize>(move _40, move _41, move _43, move _45); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb5: {
        _229 = const _;                  // scope 2 at ui/array-slice-vec/evec-slice.rs:11:24: 11:36
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:11:24: 11:36
                                         // + literal: Const { ty: &[isize; 5], val: Unevaluated(main, [], Some(promoted[7])) }
        _48 = _229;                      // scope 2 at ui/array-slice-vec/evec-slice.rs:11:24: 11:36
        _47 = _48;                       // scope 2 at ui/array-slice-vec/evec-slice.rs:11:24: 11:36
        _46 = move _47 as &[isize] (Pointer(Unsize)); // scope 2 at ui/array-slice-vec/evec-slice.rs:11:24: 11:36
        _228 = const _;                  // scope 7 at ui/array-slice-vec/evec-slice.rs:12:24: 12:36
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:12:24: 12:36
                                         // + literal: Const { ty: &[isize; 5], val: Unevaluated(main, [], Some(promoted[6])) }
        _51 = _228;                      // scope 7 at ui/array-slice-vec/evec-slice.rs:12:24: 12:36
        _50 = _51;                       // scope 7 at ui/array-slice-vec/evec-slice.rs:12:24: 12:36
        _49 = move _50 as &[isize] (Pointer(Unsize)); // scope 7 at ui/array-slice-vec/evec-slice.rs:12:24: 12:36
        _227 = const _;                  // scope 8 at ui/array-slice-vec/evec-slice.rs:13:24: 13:36
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:13:24: 13:36
                                         // + literal: Const { ty: &[isize; 5], val: Unevaluated(main, [], Some(promoted[5])) }
        _54 = _227;                      // scope 8 at ui/array-slice-vec/evec-slice.rs:13:24: 13:36
        _53 = _54;                       // scope 8 at ui/array-slice-vec/evec-slice.rs:13:24: 13:36
        _52 = move _53 as &[isize] (Pointer(Unsize)); // scope 8 at ui/array-slice-vec/evec-slice.rs:13:24: 13:36
        _226 = const _;                  // scope 9 at ui/array-slice-vec/evec-slice.rs:14:25: 14:39
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:14:25: 14:39
                                         // + literal: Const { ty: &[isize; 6], val: Unevaluated(main, [], Some(promoted[4])) }
        _57 = _226;                      // scope 9 at ui/array-slice-vec/evec-slice.rs:14:25: 14:39
        _56 = _57;                       // scope 9 at ui/array-slice-vec/evec-slice.rs:14:25: 14:39
        _55 = move _56 as &[isize] (Pointer(Unsize)); // scope 9 at ui/array-slice-vec/evec-slice.rs:14:25: 14:39
        _225 = const _;                  // scope 10 at ui/array-slice-vec/evec-slice.rs:16:14: 16:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:16:14: 16:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[3])) }
        _62 = _225;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:16:14: 16:20
        _61 = _62;                       // scope 10 at ui/array-slice-vec/evec-slice.rs:16:14: 16:20
        _60 = move _61 as &[&str] (Pointer(Unsize)); // scope 10 at ui/array-slice-vec/evec-slice.rs:16:14: 16:20
        _69 = &_46;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:16:22: 16:23
        _68 = _69;                       // scope 10 at ui/array-slice-vec/evec-slice.rs:16:22: 16:23
        _67 = core::fmt::ArgumentV1::<'_>::new_debug::<&[isize]>(move _68) -> bb6; // scope 10 at ui/array-slice-vec/evec-slice.rs:16:22: 16:23
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:16:22: 16:23
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'b> fn(&'b &[isize]) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&[isize]>}, val: Value(<ZST>) }
    }

    bb6: {
        _66 = [move _67];                // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _65 = &_66;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _64 = _65;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _63 = move _64 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _59 = Arguments::<'_>::new_v1(move _60, move _63) -> bb7; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb7: {
        _58 = _print(move _59) -> bb8;   // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb8: {
        _72 = &_46;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:18:13: 18:14
        _74 = _49;                       // scope 10 at ui/array-slice-vec/evec-slice.rs:18:17: 18:18
        _73 = &_74;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:18:17: 18:18
        _71 = <&[isize] as PartialOrd>::lt(move _72, move _73) -> bb9; // scope 10 at ui/array-slice-vec/evec-slice.rs:18:13: 18:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:18:13: 18:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb9: {
        _70 = Not(move _71);             // scope 10 at ui/array-slice-vec/evec-slice.rs:18:5: 18:19
        switchInt(move _70) -> [0: bb11, otherwise: bb10]; // scope 10 at ui/array-slice-vec/evec-slice.rs:18:5: 18:19
    }

    bb10: {
        _75 = core::panicking::panic(const "assertion failed: a < b"); // scope 10 at ui/array-slice-vec/evec-slice.rs:18:5: 18:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:18:5: 18:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        _78 = &_46;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:19:13: 19:14
        _80 = _49;                       // scope 10 at ui/array-slice-vec/evec-slice.rs:19:18: 19:19
        _79 = &_80;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:19:18: 19:19
        _77 = <&[isize] as PartialOrd>::le(move _78, move _79) -> bb12; // scope 10 at ui/array-slice-vec/evec-slice.rs:19:13: 19:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:19:13: 19:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb12: {
        _76 = Not(move _77);             // scope 10 at ui/array-slice-vec/evec-slice.rs:19:5: 19:20
        switchInt(move _76) -> [0: bb14, otherwise: bb13]; // scope 10 at ui/array-slice-vec/evec-slice.rs:19:5: 19:20
    }

    bb13: {
        _81 = core::panicking::panic(const "assertion failed: a <= b"); // scope 10 at ui/array-slice-vec/evec-slice.rs:19:5: 19:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:19:5: 19:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb14: {
        _84 = &_46;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:20:13: 20:14
        _85 = &_49;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:20:18: 20:19
        _83 = <&[isize] as PartialEq>::ne(move _84, move _85) -> bb15; // scope 10 at ui/array-slice-vec/evec-slice.rs:20:13: 20:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:20:13: 20:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb15: {
        _82 = Not(move _83);             // scope 10 at ui/array-slice-vec/evec-slice.rs:20:5: 20:20
        switchInt(move _82) -> [0: bb17, otherwise: bb16]; // scope 10 at ui/array-slice-vec/evec-slice.rs:20:5: 20:20
    }

    bb16: {
        _86 = core::panicking::panic(const "assertion failed: a != b"); // scope 10 at ui/array-slice-vec/evec-slice.rs:20:5: 20:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:20:5: 20:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _89 = &_49;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:21:13: 21:14
        _91 = _46;                       // scope 10 at ui/array-slice-vec/evec-slice.rs:21:18: 21:19
        _90 = &_91;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:21:18: 21:19
        _88 = <&[isize] as PartialOrd>::ge(move _89, move _90) -> bb18; // scope 10 at ui/array-slice-vec/evec-slice.rs:21:13: 21:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:21:13: 21:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb18: {
        _87 = Not(move _88);             // scope 10 at ui/array-slice-vec/evec-slice.rs:21:5: 21:20
        switchInt(move _87) -> [0: bb20, otherwise: bb19]; // scope 10 at ui/array-slice-vec/evec-slice.rs:21:5: 21:20
    }

    bb19: {
        _92 = core::panicking::panic(const "assertion failed: b >= a"); // scope 10 at ui/array-slice-vec/evec-slice.rs:21:5: 21:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:21:5: 21:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb20: {
        _95 = &_49;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:22:13: 22:14
        _97 = _46;                       // scope 10 at ui/array-slice-vec/evec-slice.rs:22:17: 22:18
        _96 = &_97;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:22:17: 22:18
        _94 = <&[isize] as PartialOrd>::gt(move _95, move _96) -> bb21; // scope 10 at ui/array-slice-vec/evec-slice.rs:22:13: 22:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:22:13: 22:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb21: {
        _93 = Not(move _94);             // scope 10 at ui/array-slice-vec/evec-slice.rs:22:5: 22:19
        switchInt(move _93) -> [0: bb23, otherwise: bb22]; // scope 10 at ui/array-slice-vec/evec-slice.rs:22:5: 22:19
    }

    bb22: {
        _98 = core::panicking::panic(const "assertion failed: b > a"); // scope 10 at ui/array-slice-vec/evec-slice.rs:22:5: 22:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:22:5: 22:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb23: {
        _224 = const _;                  // scope 10 at ui/array-slice-vec/evec-slice.rs:24:14: 24:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:24:14: 24:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[2])) }
        _103 = _224;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:24:14: 24:20
        _102 = _103;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:24:14: 24:20
        _101 = move _102 as &[&str] (Pointer(Unsize)); // scope 10 at ui/array-slice-vec/evec-slice.rs:24:14: 24:20
        _110 = &_49;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:24:22: 24:23
        _109 = _110;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:24:22: 24:23
        _108 = core::fmt::ArgumentV1::<'_>::new_debug::<&[isize]>(move _109) -> bb24; // scope 10 at ui/array-slice-vec/evec-slice.rs:24:22: 24:23
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:24:22: 24:23
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: for<'b> fn(&'b &[isize]) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&[isize]>}, val: Value(<ZST>) }
    }

    bb24: {
        _107 = [move _108];              // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _106 = &_107;                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _105 = _106;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _104 = move _105 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _100 = Arguments::<'_>::new_v1(move _101, move _104) -> bb25; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb25: {
        _99 = _print(move _100) -> bb26; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb26: {
        _113 = &_49;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:26:13: 26:14
        _115 = _52;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:26:17: 26:18
        _114 = &_115;                    // scope 10 at ui/array-slice-vec/evec-slice.rs:26:17: 26:18
        _112 = <&[isize] as PartialOrd>::lt(move _113, move _114) -> bb27; // scope 10 at ui/array-slice-vec/evec-slice.rs:26:13: 26:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:26:13: 26:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb27: {
        _111 = Not(move _112);           // scope 10 at ui/array-slice-vec/evec-slice.rs:26:5: 26:19
        switchInt(move _111) -> [0: bb29, otherwise: bb28]; // scope 10 at ui/array-slice-vec/evec-slice.rs:26:5: 26:19
    }

    bb28: {
        _116 = core::panicking::panic(const "assertion failed: b < c"); // scope 10 at ui/array-slice-vec/evec-slice.rs:26:5: 26:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:26:5: 26:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb29: {
        _119 = &_49;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:27:13: 27:14
        _121 = _52;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:27:18: 27:19
        _120 = &_121;                    // scope 10 at ui/array-slice-vec/evec-slice.rs:27:18: 27:19
        _118 = <&[isize] as PartialOrd>::le(move _119, move _120) -> bb30; // scope 10 at ui/array-slice-vec/evec-slice.rs:27:13: 27:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:27:13: 27:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb30: {
        _117 = Not(move _118);           // scope 10 at ui/array-slice-vec/evec-slice.rs:27:5: 27:20
        switchInt(move _117) -> [0: bb32, otherwise: bb31]; // scope 10 at ui/array-slice-vec/evec-slice.rs:27:5: 27:20
    }

    bb31: {
        _122 = core::panicking::panic(const "assertion failed: b <= c"); // scope 10 at ui/array-slice-vec/evec-slice.rs:27:5: 27:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:27:5: 27:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb32: {
        _125 = &_49;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:28:13: 28:14
        _126 = &_52;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:28:18: 28:19
        _124 = <&[isize] as PartialEq>::ne(move _125, move _126) -> bb33; // scope 10 at ui/array-slice-vec/evec-slice.rs:28:13: 28:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:28:13: 28:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb33: {
        _123 = Not(move _124);           // scope 10 at ui/array-slice-vec/evec-slice.rs:28:5: 28:20
        switchInt(move _123) -> [0: bb35, otherwise: bb34]; // scope 10 at ui/array-slice-vec/evec-slice.rs:28:5: 28:20
    }

    bb34: {
        _127 = core::panicking::panic(const "assertion failed: b != c"); // scope 10 at ui/array-slice-vec/evec-slice.rs:28:5: 28:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:28:5: 28:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb35: {
        _130 = &_52;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:29:13: 29:14
        _132 = _49;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:29:18: 29:19
        _131 = &_132;                    // scope 10 at ui/array-slice-vec/evec-slice.rs:29:18: 29:19
        _129 = <&[isize] as PartialOrd>::ge(move _130, move _131) -> bb36; // scope 10 at ui/array-slice-vec/evec-slice.rs:29:13: 29:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:29:13: 29:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb36: {
        _128 = Not(move _129);           // scope 10 at ui/array-slice-vec/evec-slice.rs:29:5: 29:20
        switchInt(move _128) -> [0: bb38, otherwise: bb37]; // scope 10 at ui/array-slice-vec/evec-slice.rs:29:5: 29:20
    }

    bb37: {
        _133 = core::panicking::panic(const "assertion failed: c >= b"); // scope 10 at ui/array-slice-vec/evec-slice.rs:29:5: 29:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:29:5: 29:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb38: {
        _136 = &_52;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:30:13: 30:14
        _138 = _49;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:30:17: 30:18
        _137 = &_138;                    // scope 10 at ui/array-slice-vec/evec-slice.rs:30:17: 30:18
        _135 = <&[isize] as PartialOrd>::gt(move _136, move _137) -> bb39; // scope 10 at ui/array-slice-vec/evec-slice.rs:30:13: 30:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:30:13: 30:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb39: {
        _134 = Not(move _135);           // scope 10 at ui/array-slice-vec/evec-slice.rs:30:5: 30:19
        switchInt(move _134) -> [0: bb41, otherwise: bb40]; // scope 10 at ui/array-slice-vec/evec-slice.rs:30:5: 30:19
    }

    bb40: {
        _139 = core::panicking::panic(const "assertion failed: c > b"); // scope 10 at ui/array-slice-vec/evec-slice.rs:30:5: 30:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:30:5: 30:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb41: {
        _142 = &_46;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:32:13: 32:14
        _144 = _52;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:32:17: 32:18
        _143 = &_144;                    // scope 10 at ui/array-slice-vec/evec-slice.rs:32:17: 32:18
        _141 = <&[isize] as PartialOrd>::lt(move _142, move _143) -> bb42; // scope 10 at ui/array-slice-vec/evec-slice.rs:32:13: 32:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:32:13: 32:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb42: {
        _140 = Not(move _141);           // scope 10 at ui/array-slice-vec/evec-slice.rs:32:5: 32:19
        switchInt(move _140) -> [0: bb44, otherwise: bb43]; // scope 10 at ui/array-slice-vec/evec-slice.rs:32:5: 32:19
    }

    bb43: {
        _145 = core::panicking::panic(const "assertion failed: a < c"); // scope 10 at ui/array-slice-vec/evec-slice.rs:32:5: 32:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:32:5: 32:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb44: {
        _148 = &_46;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:33:13: 33:14
        _150 = _52;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:33:18: 33:19
        _149 = &_150;                    // scope 10 at ui/array-slice-vec/evec-slice.rs:33:18: 33:19
        _147 = <&[isize] as PartialOrd>::le(move _148, move _149) -> bb45; // scope 10 at ui/array-slice-vec/evec-slice.rs:33:13: 33:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:33:13: 33:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb45: {
        _146 = Not(move _147);           // scope 10 at ui/array-slice-vec/evec-slice.rs:33:5: 33:20
        switchInt(move _146) -> [0: bb47, otherwise: bb46]; // scope 10 at ui/array-slice-vec/evec-slice.rs:33:5: 33:20
    }

    bb46: {
        _151 = core::panicking::panic(const "assertion failed: a <= c"); // scope 10 at ui/array-slice-vec/evec-slice.rs:33:5: 33:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:33:5: 33:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb47: {
        _154 = &_46;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:34:13: 34:14
        _155 = &_52;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:34:18: 34:19
        _153 = <&[isize] as PartialEq>::ne(move _154, move _155) -> bb48; // scope 10 at ui/array-slice-vec/evec-slice.rs:34:13: 34:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:34:13: 34:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb48: {
        _152 = Not(move _153);           // scope 10 at ui/array-slice-vec/evec-slice.rs:34:5: 34:20
        switchInt(move _152) -> [0: bb50, otherwise: bb49]; // scope 10 at ui/array-slice-vec/evec-slice.rs:34:5: 34:20
    }

    bb49: {
        _156 = core::panicking::panic(const "assertion failed: a != c"); // scope 10 at ui/array-slice-vec/evec-slice.rs:34:5: 34:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:34:5: 34:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb50: {
        _159 = &_52;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:35:13: 35:14
        _161 = _46;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:35:18: 35:19
        _160 = &_161;                    // scope 10 at ui/array-slice-vec/evec-slice.rs:35:18: 35:19
        _158 = <&[isize] as PartialOrd>::ge(move _159, move _160) -> bb51; // scope 10 at ui/array-slice-vec/evec-slice.rs:35:13: 35:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:35:13: 35:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb51: {
        _157 = Not(move _158);           // scope 10 at ui/array-slice-vec/evec-slice.rs:35:5: 35:20
        switchInt(move _157) -> [0: bb53, otherwise: bb52]; // scope 10 at ui/array-slice-vec/evec-slice.rs:35:5: 35:20
    }

    bb52: {
        _162 = core::panicking::panic(const "assertion failed: c >= a"); // scope 10 at ui/array-slice-vec/evec-slice.rs:35:5: 35:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:35:5: 35:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb53: {
        _165 = &_52;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:36:13: 36:14
        _167 = _46;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:36:17: 36:18
        _166 = &_167;                    // scope 10 at ui/array-slice-vec/evec-slice.rs:36:17: 36:18
        _164 = <&[isize] as PartialOrd>::gt(move _165, move _166) -> bb54; // scope 10 at ui/array-slice-vec/evec-slice.rs:36:13: 36:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:36:13: 36:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb54: {
        _163 = Not(move _164);           // scope 10 at ui/array-slice-vec/evec-slice.rs:36:5: 36:19
        switchInt(move _163) -> [0: bb56, otherwise: bb55]; // scope 10 at ui/array-slice-vec/evec-slice.rs:36:5: 36:19
    }

    bb55: {
        _168 = core::panicking::panic(const "assertion failed: c > a"); // scope 10 at ui/array-slice-vec/evec-slice.rs:36:5: 36:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:36:5: 36:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb56: {
        _223 = const _;                  // scope 10 at ui/array-slice-vec/evec-slice.rs:38:14: 38:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:38:14: 38:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _173 = _223;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:38:14: 38:20
        _172 = _173;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:38:14: 38:20
        _171 = move _172 as &[&str] (Pointer(Unsize)); // scope 10 at ui/array-slice-vec/evec-slice.rs:38:14: 38:20
        _180 = &_52;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:38:22: 38:23
        _179 = _180;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:38:22: 38:23
        _178 = core::fmt::ArgumentV1::<'_>::new_debug::<&[isize]>(move _179) -> bb57; // scope 10 at ui/array-slice-vec/evec-slice.rs:38:22: 38:23
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:38:22: 38:23
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: for<'b> fn(&'b &[isize]) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&[isize]>}, val: Value(<ZST>) }
    }

    bb57: {
        _177 = [move _178];              // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _176 = &_177;                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _175 = _176;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _174 = move _175 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _170 = Arguments::<'_>::new_v1(move _171, move _174) -> bb58; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb58: {
        _169 = _print(move _170) -> bb59; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb59: {
        _183 = &_46;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:40:13: 40:14
        _185 = _55;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:40:17: 40:19
        _184 = &_185;                    // scope 10 at ui/array-slice-vec/evec-slice.rs:40:17: 40:19
        _182 = <&[isize] as PartialOrd>::lt(move _183, move _184) -> bb60; // scope 10 at ui/array-slice-vec/evec-slice.rs:40:13: 40:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:40:13: 40:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb60: {
        _181 = Not(move _182);           // scope 10 at ui/array-slice-vec/evec-slice.rs:40:5: 40:20
        switchInt(move _181) -> [0: bb62, otherwise: bb61]; // scope 10 at ui/array-slice-vec/evec-slice.rs:40:5: 40:20
    }

    bb61: {
        _186 = core::panicking::panic(const "assertion failed: a < cc"); // scope 10 at ui/array-slice-vec/evec-slice.rs:40:5: 40:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:40:5: 40:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb62: {
        _189 = &_46;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:41:13: 41:14
        _191 = _55;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:41:18: 41:20
        _190 = &_191;                    // scope 10 at ui/array-slice-vec/evec-slice.rs:41:18: 41:20
        _188 = <&[isize] as PartialOrd>::le(move _189, move _190) -> bb63; // scope 10 at ui/array-slice-vec/evec-slice.rs:41:13: 41:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:41:13: 41:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb63: {
        _187 = Not(move _188);           // scope 10 at ui/array-slice-vec/evec-slice.rs:41:5: 41:21
        switchInt(move _187) -> [0: bb65, otherwise: bb64]; // scope 10 at ui/array-slice-vec/evec-slice.rs:41:5: 41:21
    }

    bb64: {
        _192 = core::panicking::panic(const "assertion failed: a <= cc"); // scope 10 at ui/array-slice-vec/evec-slice.rs:41:5: 41:21
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:41:5: 41:21
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb65: {
        _195 = &_46;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:42:13: 42:14
        _196 = &_55;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:42:18: 42:20
        _194 = <&[isize] as PartialEq>::ne(move _195, move _196) -> bb66; // scope 10 at ui/array-slice-vec/evec-slice.rs:42:13: 42:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:42:13: 42:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb66: {
        _193 = Not(move _194);           // scope 10 at ui/array-slice-vec/evec-slice.rs:42:5: 42:21
        switchInt(move _193) -> [0: bb68, otherwise: bb67]; // scope 10 at ui/array-slice-vec/evec-slice.rs:42:5: 42:21
    }

    bb67: {
        _197 = core::panicking::panic(const "assertion failed: a != cc"); // scope 10 at ui/array-slice-vec/evec-slice.rs:42:5: 42:21
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:42:5: 42:21
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb68: {
        _200 = &_55;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:43:13: 43:15
        _202 = _46;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:43:19: 43:20
        _201 = &_202;                    // scope 10 at ui/array-slice-vec/evec-slice.rs:43:19: 43:20
        _199 = <&[isize] as PartialOrd>::ge(move _200, move _201) -> bb69; // scope 10 at ui/array-slice-vec/evec-slice.rs:43:13: 43:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:43:13: 43:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb69: {
        _198 = Not(move _199);           // scope 10 at ui/array-slice-vec/evec-slice.rs:43:5: 43:21
        switchInt(move _198) -> [0: bb71, otherwise: bb70]; // scope 10 at ui/array-slice-vec/evec-slice.rs:43:5: 43:21
    }

    bb70: {
        _203 = core::panicking::panic(const "assertion failed: cc >= a"); // scope 10 at ui/array-slice-vec/evec-slice.rs:43:5: 43:21
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:43:5: 43:21
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb71: {
        _206 = &_55;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:44:13: 44:15
        _208 = _46;                      // scope 10 at ui/array-slice-vec/evec-slice.rs:44:18: 44:19
        _207 = &_208;                    // scope 10 at ui/array-slice-vec/evec-slice.rs:44:18: 44:19
        _205 = <&[isize] as PartialOrd>::gt(move _206, move _207) -> bb72; // scope 10 at ui/array-slice-vec/evec-slice.rs:44:13: 44:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:44:13: 44:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[isize], &'b &[isize]) -> bool {<&[isize] as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb72: {
        _204 = Not(move _205);           // scope 10 at ui/array-slice-vec/evec-slice.rs:44:5: 44:20
        switchInt(move _204) -> [0: bb74, otherwise: bb73]; // scope 10 at ui/array-slice-vec/evec-slice.rs:44:5: 44:20
    }

    bb73: {
        _209 = core::panicking::panic(const "assertion failed: cc > a"); // scope 10 at ui/array-slice-vec/evec-slice.rs:44:5: 44:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:44:5: 44:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb74: {
        _222 = const _;                  // scope 10 at ui/array-slice-vec/evec-slice.rs:46:14: 46:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:46:14: 46:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _214 = _222;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:46:14: 46:20
        _213 = _214;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:46:14: 46:20
        _212 = move _213 as &[&str] (Pointer(Unsize)); // scope 10 at ui/array-slice-vec/evec-slice.rs:46:14: 46:20
        _221 = &_55;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:46:22: 46:24
        _220 = _221;                     // scope 10 at ui/array-slice-vec/evec-slice.rs:46:22: 46:24
        _219 = core::fmt::ArgumentV1::<'_>::new_debug::<&[isize]>(move _220) -> bb75; // scope 10 at ui/array-slice-vec/evec-slice.rs:46:22: 46:24
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:46:22: 46:24
                                         // + user_ty: UserType(19)
                                         // + literal: Const { ty: for<'b> fn(&'b &[isize]) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&[isize]>}, val: Value(<ZST>) }
    }

    bb75: {
        _218 = [move _219];              // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _217 = &_218;                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _216 = _217;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _215 = move _216 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _211 = Arguments::<'_>::new_v1(move _212, move _215) -> bb76; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(18)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb76: {
        _210 = _print(move _211) -> bb77; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb77: {
        return;                          // scope 0 at ui/array-slice-vec/evec-slice.rs:47:2: 47:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/evec-slice.rs:46:14: 46:20
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/evec-slice.rs:46:14: 46:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/array-slice-vec/evec-slice.rs:46:14: 46:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:46:14: 46:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:46:14: 46:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/evec-slice.rs:46:14: 46:20
        return;                          // scope 0 at ui/array-slice-vec/evec-slice.rs:46:14: 46:20
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/evec-slice.rs:38:14: 38:20
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/evec-slice.rs:38:14: 38:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/array-slice-vec/evec-slice.rs:38:14: 38:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:38:14: 38:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:38:14: 38:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/evec-slice.rs:38:14: 38:20
        return;                          // scope 0 at ui/array-slice-vec/evec-slice.rs:38:14: 38:20
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/evec-slice.rs:24:14: 24:20
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/evec-slice.rs:24:14: 24:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/array-slice-vec/evec-slice.rs:24:14: 24:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:24:14: 24:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:24:14: 24:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/evec-slice.rs:24:14: 24:20
        return;                          // scope 0 at ui/array-slice-vec/evec-slice.rs:24:14: 24:20
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/evec-slice.rs:16:14: 16:20
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/evec-slice.rs:16:14: 16:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/array-slice-vec/evec-slice.rs:16:14: 16:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:16:14: 16:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/evec-slice.rs:16:14: 16:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/evec-slice.rs:16:14: 16:20
        return;                          // scope 0 at ui/array-slice-vec/evec-slice.rs:16:14: 16:20
    }
}

promoted[4] in main: &[isize; 6] = {
    let mut _0: &[isize; 6];             // return place in scope 0 at ui/array-slice-vec/evec-slice.rs:14:25: 14:39
    let mut _1: [isize; 6];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:14:26: 14:39

    bb0: {
        _1 = [const 2_isize, const 2_isize, const 2_isize, const 2_isize, const 2_isize, const 2_isize]; // scope 0 at ui/array-slice-vec/evec-slice.rs:14:26: 14:39
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/evec-slice.rs:14:25: 14:39
        return;                          // scope 0 at ui/array-slice-vec/evec-slice.rs:14:25: 14:39
    }
}

promoted[5] in main: &[isize; 5] = {
    let mut _0: &[isize; 5];             // return place in scope 0 at ui/array-slice-vec/evec-slice.rs:13:24: 13:36
    let mut _1: [isize; 5];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:13:25: 13:36

    bb0: {
        _1 = [const 2_isize, const 2_isize, const 2_isize, const 2_isize, const 3_isize]; // scope 0 at ui/array-slice-vec/evec-slice.rs:13:25: 13:36
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/evec-slice.rs:13:24: 13:36
        return;                          // scope 0 at ui/array-slice-vec/evec-slice.rs:13:24: 13:36
    }
}

promoted[6] in main: &[isize; 5] = {
    let mut _0: &[isize; 5];             // return place in scope 0 at ui/array-slice-vec/evec-slice.rs:12:24: 12:36
    let mut _1: [isize; 5];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:12:25: 12:36

    bb0: {
        _1 = [const 2_isize, const 2_isize, const 2_isize, const 2_isize, const 2_isize]; // scope 0 at ui/array-slice-vec/evec-slice.rs:12:25: 12:36
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/evec-slice.rs:12:24: 12:36
        return;                          // scope 0 at ui/array-slice-vec/evec-slice.rs:12:24: 12:36
    }
}

promoted[7] in main: &[isize; 5] = {
    let mut _0: &[isize; 5];             // return place in scope 0 at ui/array-slice-vec/evec-slice.rs:11:24: 11:36
    let mut _1: [isize; 5];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:11:25: 11:36

    bb0: {
        _1 = [const 1_isize, const 1_isize, const 1_isize, const 1_isize, const 1_isize]; // scope 0 at ui/array-slice-vec/evec-slice.rs:11:25: 11:36
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/evec-slice.rs:11:24: 11:36
        return;                          // scope 0 at ui/array-slice-vec/evec-slice.rs:11:24: 11:36
    }
}

promoted[8] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:9:22: 9:23

    bb0: {
        _1 = const 5_isize;              // scope 0 at ui/array-slice-vec/evec-slice.rs:9:22: 9:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[9] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/array-slice-vec/evec-slice.rs:8:22: 8:23

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/array-slice-vec/evec-slice.rs:8:22: 8:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[10] in main: &[isize; 5] = {
    let mut _0: &[isize; 5];             // return place in scope 0 at ui/array-slice-vec/evec-slice.rs:6:28: 6:40
    let mut _1: [isize; 5];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:6:29: 6:40

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize, const 5_isize]; // scope 0 at ui/array-slice-vec/evec-slice.rs:6:29: 6:40
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/evec-slice.rs:6:28: 6:40
        return;                          // scope 0 at ui/array-slice-vec/evec-slice.rs:6:28: 6:40
    }
}

promoted[11] in main: &[isize; 5] = {
    let mut _0: &[isize; 5];             // return place in scope 0 at ui/array-slice-vec/evec-slice.rs:5:24: 5:36
    let mut _1: [isize; 5];              // in scope 0 at ui/array-slice-vec/evec-slice.rs:5:25: 5:36

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize, const 5_isize]; // scope 0 at ui/array-slice-vec/evec-slice.rs:5:25: 5:36
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/evec-slice.rs:5:24: 5:36
        return;                          // scope 0 at ui/array-slice-vec/evec-slice.rs:5:24: 5:36
    }
}
