// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut TEST: &mut [isize] = {
    let mut _0: &mut [isize];
    let mut _1: &mut [isize; 1];
    let mut _2: &mut [isize; 1];
    let mut _3: [isize; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = [const 1_isize];
        _2 = &mut _3;
        _1 = &mut (*_2);
        _0 = move _1 as &mut [isize] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static mut EMPTY: &mut [isize] = {
    let mut _0: &mut [isize];
    let mut _1: &mut [isize; 0];
    let mut _2: &mut [isize; 0];
    let mut _3: [isize; 0];
    let mut _4: &mut [isize; 0];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &mut (*_4);
        _1 = &mut (*_2);
        _0 = move _1 as &mut [isize] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in EMPTY: &mut [isize; 0] = {
    let mut _0: &mut [isize; 0];
    let mut _1: [isize; 0];

    bb0: {
        _1 = [];
        _0 = &mut _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: *mut &mut [isize];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;
    let mut _5: (&isize, &isize);
    let mut _6: &isize;
    let _7: *mut &mut [isize];
    let _8: usize;
    let mut _9: usize;
    let mut _10: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: isize;
    let mut _16: isize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: &mut [isize];
    let mut _22: &mut [isize];
    let mut _23: &mut [isize];
    let mut _24: &mut [isize];
    let mut _25: &mut [isize];
    scope 1 {
        let _11: &isize;
        let _12: &isize;
        let mut _20: &isize;
        let mut _26: *const ();
        let mut _27: usize;
        let mut _28: usize;
        let mut _29: usize;
        let mut _30: usize;
        let mut _31: bool;
        let mut _32: *const ();
        let mut _33: usize;
        let mut _34: usize;
        let mut _35: usize;
        let mut _36: usize;
        let mut _37: bool;
        let mut _38: *const ();
        let mut _39: usize;
        let mut _40: usize;
        let mut _41: usize;
        let mut _42: usize;
        let mut _43: bool;
        let mut _44: *const ();
        let mut _45: usize;
        let mut _46: usize;
        let mut _47: usize;
        let mut _48: usize;
        let mut _49: bool;
        let mut _50: *const ();
        let mut _51: usize;
        let mut _52: usize;
        let mut _53: usize;
        let mut _54: usize;
        let mut _55: bool;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
    }

    bb0: {
        _1 = const {alloc1: *mut &mut [isize]};
        _2 = const 0_usize;
        _50 = _1 as *const () (PtrToPtr);
        _51 = _50 as usize (Transmute);
        _52 = AlignOf(&mut [isize]);
        _53 = Sub(_52, const 1_usize);
        _54 = BitAnd(_51, _53);
        _55 = Eq(_54, const 0_usize);
        assert(_55, "misaligned pointer dereference: address must be a multiple of {} but is {}", _52, _51) -> [success: bb9, unwind unreachable];
    }

    bb1: {
        _44 = _1 as *const () (PtrToPtr);
        _45 = _44 as usize (Transmute);
        _46 = AlignOf(&mut [isize]);
        _47 = Sub(_46, const 1_usize);
        _48 = BitAnd(_45, _47);
        _49 = Eq(_48, const 0_usize);
        assert(_49, "misaligned pointer dereference: address must be a multiple of {} but is {}", _46, _45) -> [success: bb8, unwind unreachable];
    }

    bb2: {
        _26 = _7 as *const () (PtrToPtr);
        _27 = _26 as usize (Transmute);
        _28 = AlignOf(&mut [isize]);
        _29 = Sub(_28, const 1_usize);
        _30 = BitAnd(_27, _29);
        _31 = Eq(_30, const 0_usize);
        assert(_31, "misaligned pointer dereference: address must be a multiple of {} but is {}", _28, _27) -> [success: bb5, unwind unreachable];
    }

    bb3: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<isize, isize>(move _17, _11, _12, move _19) -> unwind continue;
    }

    bb4: {
        return;
    }

    bb5: {
        _25 = deref_copy (*_7);
        _6 = &(*_25)[_8];
        _20 = const _;
        _5 = (move _6, _20);
        _11 = (_5.0: &isize);
        _12 = (_5.1: &isize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb4, otherwise: bb3];
    }

    bb6: {
        _24 = deref_copy (*_7);
        _9 = Len((*_24));
        _10 = Lt(_8, _9);
        assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> [success: bb2, unwind continue];
    }

    bb7: {
        _23 = deref_copy (*_1);
        (*_22)[_2] = Add((*_23)[_2], const 1_isize);
        _7 = const {alloc1: *mut &mut [isize]};
        _8 = const 0_usize;
        _32 = _7 as *const () (PtrToPtr);
        _33 = _32 as usize (Transmute);
        _34 = AlignOf(&mut [isize]);
        _35 = Sub(_34, const 1_usize);
        _36 = BitAnd(_33, _35);
        _37 = Eq(_36, const 0_usize);
        assert(_37, "misaligned pointer dereference: address must be a multiple of {} but is {}", _34, _33) -> [success: bb6, unwind unreachable];
    }

    bb8: {
        _22 = deref_copy (*_1);
        _38 = _1 as *const () (PtrToPtr);
        _39 = _38 as usize (Transmute);
        _40 = AlignOf(&mut [isize]);
        _41 = Sub(_40, const 1_usize);
        _42 = BitAnd(_39, _41);
        _43 = Eq(_42, const 0_usize);
        assert(_43, "misaligned pointer dereference: address must be a multiple of {} but is {}", _40, _39) -> [success: bb7, unwind unreachable];
    }

    bb9: {
        _21 = deref_copy (*_1);
        _3 = Len((*_21));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }
}

alloc1 (static: TEST, size: 16, align: 8) {
    ╾───────alloc4────────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc4 (size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}
