// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut TEST: &mut [isize] = {
    let mut _0: &mut [isize];            // return place in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:7:18: 7:38
    let mut _1: &mut [isize; 1];         // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:7:41: 7:49
    let mut _2: &mut [isize; 1];         // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:7:41: 7:49
    let mut _3: [isize; 1];              // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:7:46: 7:49

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:7:41: 7:49
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:7:41: 7:49
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:7:46: 7:49
        _3 = [const 1_isize];            // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:7:46: 7:49
        _2 = &mut _3;                    // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:7:41: 7:49
        _1 = &mut (*_2);                 // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:7:41: 7:49
        _0 = move _1 as &mut [isize] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:7:41: 7:49
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:7:48: 7:49
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:7:48: 7:49
        return;                          // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:7:1: 7:50
    }
}

static mut EMPTY: &mut [isize] = {
    let mut _0: &mut [isize];            // return place in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:19: 8:39
    let mut _1: &mut [isize; 0];         // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:42: 8:49
    let mut _2: &mut [isize; 0];         // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:42: 8:49
    let mut _3: [isize; 0];              // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:47: 8:49
    let mut _4: &mut [isize; 0];         // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:42: 8:49

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:42: 8:49
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:42: 8:49
        _4 = const _;                    // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:42: 8:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/check-static-mut-slices.rs:8:42: 8:49
                                         // + literal: Const { ty: &mut [isize; 0], val: Unevaluated(EMPTY, [], Some(promoted[0])) }
        _2 = &mut (*_4);                 // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:42: 8:49
        _1 = &mut (*_2);                 // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:42: 8:49
        _0 = move _1 as &mut [isize] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:42: 8:49
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:48: 8:49
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:48: 8:49
        return;                          // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:1: 8:50
    }
}

promoted[0] in EMPTY: &mut [isize; 0] = {
    let mut _0: &mut [isize; 0];         // return place in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:42: 8:49
    let mut _1: [isize; 0];              // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:47: 8:49

    bb0: {
        _1 = [];                         // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:47: 8:49
        _0 = &mut _1;                    // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:42: 8:49
        return;                          // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:8:42: 8:49
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:10:15: 10:15
    let mut _1: *mut &mut [isize];       // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:13
    let _2: usize;                       // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:12:14: 12:15
    let mut _3: usize;                   // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:16
    let mut _4: bool;                    // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:16
    let mut _5: (isize, bool);           // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:21
    let mut _6: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _8: *mut &mut [isize];           // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:13:20: 13:24
    let _9: usize;                       // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:13:25: 13:26
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:13:20: 13:27
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:13:20: 13:27
    let mut _12: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _17: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _18: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _20: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _21: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _22: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _23: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _24: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _25: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _28: &mut [isize];           // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:13
    let mut _29: &mut [isize];           // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:13
    let mut _30: &mut [isize];           // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:13
    let mut _31: &mut [isize];           // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:13
    let mut _32: &mut [isize];           // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:13:20: 13:24
    let mut _33: &mut [isize];           // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:13:20: 13:24
    scope 1 {
        let _13: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _14: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _27: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _13;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _14;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _19: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _19;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = const {alloc1: *mut &mut [isize]}; // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:13
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:13
                                         // + literal: Const { ty: *mut &mut [isize], val: Value(Scalar(alloc1)) }
        _2 = const 0_usize;              // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:12:14: 12:15
        _28 = deref_copy (*_1);          // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:16
        _3 = Len((*_28));                // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:16
        _4 = Lt(_2, _3);                 // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:16
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> bb1; // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:16
    }

    bb1: {
        _29 = deref_copy (*_1);          // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:21
        _5 = CheckedAdd((*_29)[_2], const 1_isize); // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:21
        _30 = deref_copy (*_1);          // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:21
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_30)[_2], const 1_isize) -> bb2; // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:21
    }

    bb2: {
        _31 = deref_copy (*_1);          // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:21
        (*_31)[_2] = move (_5.0: isize); // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:12:9: 12:21
        _8 = const {alloc1: *mut &mut [isize]}; // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:13:20: 13:24
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/check-static-mut-slices.rs:13:20: 13:24
                                         // + literal: Const { ty: *mut &mut [isize], val: Value(Scalar(alloc1)) }
        _9 = const 0_usize;              // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:13:25: 13:26
        _32 = deref_copy (*_8);          // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:13:20: 13:27
        _10 = Len((*_32));               // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:13:20: 13:27
        _11 = Lt(_9, _10);               // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:13:20: 13:27
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> bb3; // scope 1 at ui/array-slice-vec/check-static-mut-slices.rs:13:20: 13:27
    }

    bb3: {
        _33 = deref_copy (*_8);          // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = &(*_33)[_9];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _12 = _27;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _12);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _13 = (_6.0: &isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _14 = (_6.1: &isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _17 = (*_13);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _18 = const 2_isize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _16 = Eq(move _17, move _18);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _15 = Not(move _16);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _15) -> [0: bb5, otherwise: bb4]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _19 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _14;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _20 = core::panicking::assert_failed::<isize, isize>(move _21, move _22, move _24, move _26); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:15:2: 15:2
    }
}

alloc1 (static: TEST, size: 16, align: 8) {
    ╾───────alloc3────────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc3 (size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:13:29: 13:30

    bb0: {
        _1 = const 2_isize;              // scope 0 at ui/array-slice-vec/check-static-mut-slices.rs:13:29: 13:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
