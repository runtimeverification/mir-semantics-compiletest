// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/vector-no-ann-2.rs:5:15: 5:15
    let _1: std::boxed::Box<std::vec::Vec<usize>>; // in scope 0 at ui/array-slice-vec/vector-no-ann-2.rs:6:9: 6:14
    let mut _2: std::vec::Vec<usize>;    // in scope 0 at ui/array-slice-vec/vector-no-ann-2.rs:6:43: 6:53
    scope 1 {
        debug _quux => _1;               // in scope 1 at ui/array-slice-vec/vector-no-ann-2.rs:6:9: 6:14
    }

    bb0: {
        _2 = Vec::<usize>::new() -> bb1; // scope 0 at ui/array-slice-vec/vector-no-ann-2.rs:6:43: 6:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vector-no-ann-2.rs:6:43: 6:51
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<usize> {Vec::<usize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Box::<Vec<usize>>::new(move _2) -> bb2; // scope 0 at ui/array-slice-vec/vector-no-ann-2.rs:6:34: 6:54
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vector-no-ann-2.rs:6:34: 6:42
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Vec<usize>) -> Box<Vec<usize>> {Box::<Vec<usize>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/array-slice-vec/vector-no-ann-2.rs:7:1: 7:2
    }

    bb3: {
        return;                          // scope 0 at ui/array-slice-vec/vector-no-ann-2.rs:7:2: 7:2
    }
}
