// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static LOG: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize; // return place in scope 0 at ui/array-slice-vec/nested-vec-3.rs:14:13: 14:24

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/nested-vec-3.rs:14:27: 14:46
        _0 = AtomicUsize::new(const 0_usize) -> bb1; // scope 0 at ui/array-slice-vec/nested-vec-3.rs:14:27: 14:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:14:27: 14:43
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/nested-vec-3.rs:14:1: 14:47
    }
}

fn <impl at ui/array-slice-vec/nested-vec-3.rs:18:1: 18:16>::drop(_1: &mut D) -> () {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:19:13: 19:22
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/nested-vec-3.rs:19:24: 19:24
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:18: 20:31
    let mut _5: &[&str; 2];              // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:18: 20:31
    let _6: &[&str; 2];                  // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:18: 20:31
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:33: 20:39
    let mut _12: &u8;                    // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:33: 20:39
    let _13: &u8;                        // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:33: 20:39
    let _14: usize;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:21:13: 21:16
    let mut _15: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:21:19: 21:45
    let _16: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:21:19: 21:22
    let mut _17: std::sync::atomic::Ordering; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:21:28: 21:44
    let mut _18: std::result::Result<usize, usize>; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:22:17: 27:10
    let mut _19: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:22:17: 27:10
    let _20: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:22:17: 22:20
    let mut _21: usize;                  // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:23:13: 23:16
    let mut _22: usize;                  // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:24:13: 24:39
    let mut _23: usize;                  // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:24:13: 24:21
    let mut _24: usize;                  // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:24:13: 24:16
    let mut _25: (usize, bool);          // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:24:13: 24:21
    let mut _26: usize;                  // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:24:24: 24:39
    let mut _27: u8;                     // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:24:24: 24:30
    let mut _28: std::sync::atomic::Ordering; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:25:13: 25:29
    let mut _29: std::sync::atomic::Ordering; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:26:13: 26:29
    let mut _30: &[&str; 2];             // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:18: 20:31
    scope 1 {
        debug old => _14;                // in scope 1 at ui/array-slice-vec/nested-vec-3.rs:21:13: 21:16
        scope 2 {
        }
    }

    bb0: {
        _30 = const _;                   // scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:18: 20:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:20:18: 20:31
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(<D as Drop>::drop, [], Some(promoted[0])) }
        _6 = _30;                        // scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:18: 20:31
        _5 = _6;                         // scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:18: 20:31
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:18: 20:31
        _13 = &((*_1).0: u8);            // scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:33: 20:39
        _12 = _13;                       // scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:33: 20:39
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<u8>(move _12) -> bb1; // scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:33: 20:39
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:20:33: 20:39
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u8) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _16 = const {alloc1: &AtomicUsize}; // scope 0 at ui/array-slice-vec/nested-vec-3.rs:21:19: 21:22
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:21:19: 21:22
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _15 = _16;                       // scope 0 at ui/array-slice-vec/nested-vec-3.rs:21:19: 21:45
        _17 = const SeqCst;              // scope 0 at ui/array-slice-vec/nested-vec-3.rs:21:28: 21:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:21:28: 21:44
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _14 = AtomicUsize::load(move _15, move _17) -> bb4; // scope 0 at ui/array-slice-vec/nested-vec-3.rs:21:19: 21:45
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:21:23: 21:27
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = const {alloc1: &AtomicUsize}; // scope 1 at ui/array-slice-vec/nested-vec-3.rs:22:17: 22:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:22:17: 22:20
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _19 = _20;                       // scope 1 at ui/array-slice-vec/nested-vec-3.rs:22:17: 27:10
        _21 = _14;                       // scope 1 at ui/array-slice-vec/nested-vec-3.rs:23:13: 23:16
        _24 = _14;                       // scope 1 at ui/array-slice-vec/nested-vec-3.rs:24:13: 24:16
        _25 = CheckedShl(_24, const 4_i32); // scope 1 at ui/array-slice-vec/nested-vec-3.rs:24:13: 24:21
        assert(!move (_25.1: bool), "attempt to shift left by `{}`, which would overflow", const 4_i32) -> bb5; // scope 1 at ui/array-slice-vec/nested-vec-3.rs:24:13: 24:21
    }

    bb5: {
        _23 = move (_25.0: usize);       // scope 1 at ui/array-slice-vec/nested-vec-3.rs:24:13: 24:21
        _27 = ((*_1).0: u8);             // scope 1 at ui/array-slice-vec/nested-vec-3.rs:24:24: 24:30
        _26 = move _27 as usize (IntToInt); // scope 1 at ui/array-slice-vec/nested-vec-3.rs:24:24: 24:39
        _22 = BitOr(move _23, move _26); // scope 1 at ui/array-slice-vec/nested-vec-3.rs:24:13: 24:39
        _28 = const SeqCst;              // scope 1 at ui/array-slice-vec/nested-vec-3.rs:25:13: 25:29
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:25:13: 25:29
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _29 = const SeqCst;              // scope 1 at ui/array-slice-vec/nested-vec-3.rs:26:13: 26:29
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:26:13: 26:29
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _18 = AtomicUsize::compare_exchange(move _19, move _21, move _22, move _28, move _29) -> bb6; // scope 1 at ui/array-slice-vec/nested-vec-3.rs:22:17: 27:10
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:22:21: 22:37
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, usize, std::sync::atomic::Ordering, std::sync::atomic::Ordering) -> Result<usize, usize> {AtomicUsize::compare_exchange}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/array-slice-vec/nested-vec-3.rs:28:6: 28:6
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in <impl at ui/array-slice-vec/nested-vec-3.rs:18:1: 18:16>::drop: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:18: 20:31
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:18: 20:31

    bb0: {
        _1 = [const "Dropping ", const "\n"]; // scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:18: 20:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:20:18: 20:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:20:18: 20:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:18: 20:31
        return;                          // scope 0 at ui/array-slice-vec/nested-vec-3.rs:20:18: 20:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/nested-vec-3.rs:31:11: 31:11
    let _1: std::thread::JoinHandle<()>; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:33:9: 33:10
    let mut _2: [closure@ui/array-slice-vec/nested-vec-3.rs:33:27: 33:29]; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:33:27: 38:6
    let mut _3: bool;                    // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:39:5: 39:31
    let mut _4: bool;                    // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:39:13: 39:30
    let mut _5: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:39:13: 39:30
    let _6: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:39:13: 39:21
    let mut _7: std::thread::JoinHandle<()>; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:39:13: 39:14
    let mut _8: !;                       // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:39:5: 39:31
    let mut _11: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:58:18: 58:44
    let _12: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:58:18: 58:21
    let mut _13: std::sync::atomic::Ordering; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:58:27: 58:43
    let mut _14: bool;                   // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:5: 59:79
    let mut _15: bool;                   // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:13: 59:29
    let mut _16: usize;                  // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:13: 59:19
    let mut _17: usize;                  // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:23: 59:29
    let mut _18: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _19: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _20: &[&str];                // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:31: 59:62
    let mut _21: &[&str; 2];             // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:31: 59:62
    let _22: &[&str; 2];                 // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:31: 59:62
    let mut _23: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _24: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _25: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _26: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _27: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:64: 59:70
    let mut _28: &usize;                 // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:64: 59:70
    let _29: &usize;                     // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:64: 59:70
    let mut _30: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:72: 59:78
    let mut _31: &usize;                 // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:72: 59:78
    let _32: &usize;                     // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:72: 59:78
    scope 1 {
        debug g => _1;                   // in scope 1 at ui/array-slice-vec/nested-vec-3.rs:33:9: 33:10
        let _9: usize;                   // in scope 1 at ui/array-slice-vec/nested-vec-3.rs:57:9: 57:15
        scope 2 {
            debug expect => _9;          // in scope 2 at ui/array-slice-vec/nested-vec-3.rs:57:9: 57:15
            let _10: usize;              // in scope 2 at ui/array-slice-vec/nested-vec-3.rs:58:9: 58:15
            scope 3 {
                debug actual => _10;     // in scope 3 at ui/array-slice-vec/nested-vec-3.rs:58:9: 58:15
                let mut _33: &[&str; 2]; // in scope 3 at ui/array-slice-vec/nested-vec-3.rs:59:31: 59:62
            }
        }
    }

    bb0: {
        _1 = spawn::<[closure@ui/array-slice-vec/nested-vec-3.rs:33:27: 33:29], ()>(move _2) -> bb1; // scope 0 at ui/array-slice-vec/nested-vec-3.rs:33:13: 38:7
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:33:13: 33:26
                                         // + literal: Const { ty: fn([closure@ui/array-slice-vec/nested-vec-3.rs:33:27: 33:29]) -> JoinHandle<()> {spawn::<[closure@ui/array-slice-vec/nested-vec-3.rs:33:27: 33:29], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = move _1;                    // scope 1 at ui/array-slice-vec/nested-vec-3.rs:39:13: 39:14
        _6 = JoinHandle::<()>::join(move _7) -> bb2; // scope 1 at ui/array-slice-vec/nested-vec-3.rs:39:13: 39:21
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:39:15: 39:19
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 1 at ui/array-slice-vec/nested-vec-3.rs:39:13: 39:30
        _4 = Result::<(), Box<dyn Any + Send>>::is_err(move _5) -> [return: bb3, unwind: bb13]; // scope 1 at ui/array-slice-vec/nested-vec-3.rs:39:13: 39:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:39:22: 39:28
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = Not(move _4);               // scope 1 at ui/array-slice-vec/nested-vec-3.rs:39:5: 39:31
        drop(_6) -> bb4;                 // scope 1 at ui/array-slice-vec/nested-vec-3.rs:39:30: 39:31
    }

    bb4: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5]; // scope 1 at ui/array-slice-vec/nested-vec-3.rs:39:5: 39:31
    }

    bb5: {
        _8 = core::panicking::panic(const "assertion failed: g.join().is_err()"); // scope 1 at ui/array-slice-vec/nested-vec-3.rs:39:5: 39:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:39:5: 39:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _9 = const 727300182580_usize;   // scope 1 at ui/array-slice-vec/nested-vec-3.rs:57:18: 57:43
        _12 = const {alloc1: &AtomicUsize}; // scope 2 at ui/array-slice-vec/nested-vec-3.rs:58:18: 58:21
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:58:18: 58:21
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _11 = _12;                       // scope 2 at ui/array-slice-vec/nested-vec-3.rs:58:18: 58:44
        _13 = const SeqCst;              // scope 2 at ui/array-slice-vec/nested-vec-3.rs:58:27: 58:43
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:58:27: 58:43
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _10 = AtomicUsize::load(move _11, move _13) -> bb7; // scope 2 at ui/array-slice-vec/nested-vec-3.rs:58:18: 58:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:58:22: 58:26
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = _10;                       // scope 3 at ui/array-slice-vec/nested-vec-3.rs:59:13: 59:19
        _17 = _9;                        // scope 3 at ui/array-slice-vec/nested-vec-3.rs:59:23: 59:29
        _15 = Eq(move _16, move _17);    // scope 3 at ui/array-slice-vec/nested-vec-3.rs:59:13: 59:29
        _14 = Not(move _15);             // scope 3 at ui/array-slice-vec/nested-vec-3.rs:59:5: 59:79
        switchInt(move _14) -> [0: bb12, otherwise: bb8]; // scope 3 at ui/array-slice-vec/nested-vec-3.rs:59:5: 59:79
    }

    bb8: {
        _33 = const _;                   // scope 3 at ui/array-slice-vec/nested-vec-3.rs:59:31: 59:62
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:59:31: 59:62
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _22 = _33;                       // scope 3 at ui/array-slice-vec/nested-vec-3.rs:59:31: 59:62
        _21 = _22;                       // scope 3 at ui/array-slice-vec/nested-vec-3.rs:59:31: 59:62
        _20 = move _21 as &[&str] (Pointer(Unsize)); // scope 3 at ui/array-slice-vec/nested-vec-3.rs:59:31: 59:62
        _29 = &_9;                       // scope 3 at ui/array-slice-vec/nested-vec-3.rs:59:64: 59:70
        _28 = _29;                       // scope 3 at ui/array-slice-vec/nested-vec-3.rs:59:64: 59:70
        _27 = core::fmt::ArgumentV1::<'_>::new_lower_hex::<usize>(move _28) -> bb9; // scope 3 at ui/array-slice-vec/nested-vec-3.rs:59:64: 59:70
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:59:64: 59:70
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_lower_hex::<usize>}, val: Value(<ZST>) }
    }

    bb9: {
        _32 = &_10;                      // scope 3 at ui/array-slice-vec/nested-vec-3.rs:59:72: 59:78
        _31 = _32;                       // scope 3 at ui/array-slice-vec/nested-vec-3.rs:59:72: 59:78
        _30 = core::fmt::ArgumentV1::<'_>::new_lower_hex::<usize>(move _31) -> bb10; // scope 3 at ui/array-slice-vec/nested-vec-3.rs:59:72: 59:78
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:59:72: 59:78
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_lower_hex::<usize>}, val: Value(<ZST>) }
    }

    bb10: {
        _26 = [move _27, move _30];      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _25 = &_26;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _24 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _23 = move _24 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _19 = Arguments::<'_>::new_v1(move _20, move _23) -> bb11; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb11: {
        _18 = panic_fmt(move _19);       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at ui/array-slice-vec/nested-vec-3.rs:60:2: 60:2
    }

    bb13 (cleanup): {
        drop(_6) -> bb14;                // scope 1 at ui/array-slice-vec/nested-vec-3.rs:39:30: 39:31
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/nested-vec-3.rs:31:1: 60:2
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:31: 59:62
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:31: 59:62

    bb0: {
        _1 = [const "expect: 0x", const " actual: 0x"]; // scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:31: 59:62
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:59:31: 59:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:59:31: 59:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:31: 59:62
        return;                          // scope 0 at ui/array-slice-vec/nested-vec-3.rs:59:31: 59:62
    }
}

fn die() -> D {
    let mut _0: D;                       // return place in scope 0 at ui/array-slice-vec/nested-vec-3.rs:32:17: 32:18
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _1 = begin_panic::<&str>(const "Oh no"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:32:28: 32:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main::{closure#0}(_1: [closure@ui/array-slice-vec/nested-vec-3.rs:33:27: 33:29]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/nested-vec-3.rs:33:30: 33:30
    let _2: std::vec::Vec<std::vec::Vec<D>>; // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:34:13: 34:20
    let mut _3: std::boxed::Box<[std::vec::Vec<D>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[std::vec::Vec<D>; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[std::vec::Vec<D>; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: std::vec::Vec<D>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _10: std::boxed::Box<[D]>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: std::boxed::Box<[D; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _14: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _15: std::boxed::Box<[D; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _16: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:34:33: 34:38
    let mut _17: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:34:40: 34:45
    let mut _18: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:34:47: 34:52
    let mut _19: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:34:54: 34:59
    let mut _20: std::vec::Vec<D>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _21: std::boxed::Box<[D]>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _22: std::boxed::Box<[D; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _23: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _24: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _25: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _26: std::boxed::Box<[D; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _27: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:35:33: 35:38
    let mut _28: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:35:40: 35:45
    let mut _29: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:35:47: 35:52
    let mut _30: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:35:54: 35:59
    let mut _31: std::vec::Vec<D>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _32: std::boxed::Box<[D]>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _33: std::boxed::Box<[D; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _34: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _35: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _36: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _37: std::boxed::Box<[D; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _38: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:36:33: 36:38
    let mut _39: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:36:40: 36:45
    let mut _40: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:36:47: 36:52
    let mut _41: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:36:54: 36:59
    let mut _42: std::vec::Vec<D>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _43: std::boxed::Box<[D]>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _44: std::boxed::Box<[D; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _45: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _46: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _47: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _48: std::boxed::Box<[D; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _49: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:37:33: 37:38
    let mut _50: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:37:40: 37:45
    let mut _51: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:37:47: 37:52
    let mut _52: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-3.rs:37:54: 37:59
    let mut _53: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _54: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _55: *const [D; 4];          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _56: *const [D; 4];          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _57: *const [D; 4];          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _58: *const [D; 4];          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _59: *const [std::vec::Vec<D>; 4]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug _nested => _2;             // in scope 1 at ui/array-slice-vec/nested-vec-3.rs:34:13: 34:20
    }
    scope 2 {
    }
    scope 3 {
    }
    scope 4 {
    }
    scope 5 {
    }
    scope 6 {
    }

    bb0: {
        _5 = const 96_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [std::vec::Vec<D>; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _12 = const 4_usize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _13 = const 1_usize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _14 = alloc::alloc::exchange_malloc(move _12, move _13) -> [return: bb2, unwind: bb20]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb2: {
        _15 = ShallowInitBox(move _14, [D; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _16 = const D(1_u8);             // scope 0 at ui/array-slice-vec/nested-vec-3.rs:34:33: 34:38
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:34:33: 34:38
                                         // + literal: Const { ty: D, val: Value(Scalar(0x01)) }
        _17 = const D(2_u8);             // scope 0 at ui/array-slice-vec/nested-vec-3.rs:34:40: 34:45
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:34:40: 34:45
                                         // + literal: Const { ty: D, val: Value(Scalar(0x02)) }
        _18 = const D(3_u8);             // scope 0 at ui/array-slice-vec/nested-vec-3.rs:34:47: 34:52
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:34:47: 34:52
                                         // + literal: Const { ty: D, val: Value(Scalar(0x03)) }
        _19 = const D(4_u8);             // scope 0 at ui/array-slice-vec/nested-vec-3.rs:34:54: 34:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:34:54: 34:59
                                         // + literal: Const { ty: D, val: Value(Scalar(0x04)) }
        _55 = (((_15.0: std::ptr::Unique<[D; 4]>).0: std::ptr::NonNull<[D; 4]>).0: *const [D; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_55) = [move _16, move _17, move _18, move _19]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _11 = move _15;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = move _11 as std::boxed::Box<[D]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = slice::<impl [D]>::into_vec::<std::alloc::Global>(move _10) -> [return: bb3, unwind: bb20]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[D]>) -> Vec<D> {slice::<impl [D]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb3: {
        _23 = const 4_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _24 = const 1_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _25 = alloc::alloc::exchange_malloc(move _23, move _24) -> [return: bb4, unwind: bb17]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb4: {
        _26 = ShallowInitBox(move _25, [D; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _27 = const D(5_u8);             // scope 0 at ui/array-slice-vec/nested-vec-3.rs:35:33: 35:38
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:35:33: 35:38
                                         // + literal: Const { ty: D, val: Value(Scalar(0x05)) }
        _28 = const D(6_u8);             // scope 0 at ui/array-slice-vec/nested-vec-3.rs:35:40: 35:45
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:35:40: 35:45
                                         // + literal: Const { ty: D, val: Value(Scalar(0x06)) }
        _29 = const D(7_u8);             // scope 0 at ui/array-slice-vec/nested-vec-3.rs:35:47: 35:52
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:35:47: 35:52
                                         // + literal: Const { ty: D, val: Value(Scalar(0x07)) }
        _30 = const D(8_u8);             // scope 0 at ui/array-slice-vec/nested-vec-3.rs:35:54: 35:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:35:54: 35:59
                                         // + literal: Const { ty: D, val: Value(Scalar(0x08)) }
        _56 = (((_26.0: std::ptr::Unique<[D; 4]>).0: std::ptr::NonNull<[D; 4]>).0: *const [D; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_56) = [move _27, move _28, move _29, move _30]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _22 = move _26;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _21 = move _22 as std::boxed::Box<[D]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _20 = slice::<impl [D]>::into_vec::<std::alloc::Global>(move _21) -> [return: bb5, unwind: bb17]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Box<[D]>) -> Vec<D> {slice::<impl [D]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb5: {
        _34 = const 4_usize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _35 = const 1_usize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _36 = alloc::alloc::exchange_malloc(move _34, move _35) -> [return: bb6, unwind: bb16]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb6: {
        _37 = ShallowInitBox(move _36, [D; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _38 = D(const 9_u8);             // scope 0 at ui/array-slice-vec/nested-vec-3.rs:36:33: 36:38
        _39 = D(const 10_u8);            // scope 0 at ui/array-slice-vec/nested-vec-3.rs:36:40: 36:45
        _40 = die() -> [return: bb7, unwind: bb14]; // scope 0 at ui/array-slice-vec/nested-vec-3.rs:36:47: 36:52
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:36:47: 36:50
                                         // + literal: Const { ty: fn() -> D {die}, val: Value(<ZST>) }
    }

    bb7: {
        _41 = const D(12_u8);            // scope 0 at ui/array-slice-vec/nested-vec-3.rs:36:54: 36:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:36:54: 36:59
                                         // + literal: Const { ty: D, val: Value(Scalar(0x0c)) }
        _57 = (((_37.0: std::ptr::Unique<[D; 4]>).0: std::ptr::NonNull<[D; 4]>).0: *const [D; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_57) = [move _38, move _39, move _40, move _41]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _33 = move _37;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _32 = move _33 as std::boxed::Box<[D]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _31 = slice::<impl [D]>::into_vec::<std::alloc::Global>(move _32) -> [return: bb8, unwind: bb16]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Box<[D]>) -> Vec<D> {slice::<impl [D]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb8: {
        _45 = const 4_usize;             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _46 = const 1_usize;             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _47 = alloc::alloc::exchange_malloc(move _45, move _46) -> [return: bb9, unwind: bb13]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb9: {
        _48 = ShallowInitBox(move _47, [D; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _49 = const D(13_u8);            // scope 0 at ui/array-slice-vec/nested-vec-3.rs:37:33: 37:38
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:37:33: 37:38
                                         // + literal: Const { ty: D, val: Value(Scalar(0x0d)) }
        _50 = const D(14_u8);            // scope 0 at ui/array-slice-vec/nested-vec-3.rs:37:40: 37:45
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:37:40: 37:45
                                         // + literal: Const { ty: D, val: Value(Scalar(0x0e)) }
        _51 = const D(15_u8);            // scope 0 at ui/array-slice-vec/nested-vec-3.rs:37:47: 37:52
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:37:47: 37:52
                                         // + literal: Const { ty: D, val: Value(Scalar(0x0f)) }
        _52 = const D(16_u8);            // scope 0 at ui/array-slice-vec/nested-vec-3.rs:37:54: 37:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-3.rs:37:54: 37:59
                                         // + literal: Const { ty: D, val: Value(Scalar(0x10)) }
        _58 = (((_48.0: std::ptr::Unique<[D; 4]>).0: std::ptr::NonNull<[D; 4]>).0: *const [D; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_58) = [move _49, move _50, move _51, move _52]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _44 = move _48;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _43 = move _44 as std::boxed::Box<[D]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _42 = slice::<impl [D]>::into_vec::<std::alloc::Global>(move _43) -> [return: bb10, unwind: bb13]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(Box<[D]>) -> Vec<D> {slice::<impl [D]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb10: {
        _59 = (((_8.0: std::ptr::Unique<[std::vec::Vec<D>; 4]>).0: std::ptr::NonNull<[std::vec::Vec<D>; 4]>).0: *const [std::vec::Vec<D>; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_59) = [move _9, move _20, move _31, move _42]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[std::vec::Vec<D>]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = slice::<impl [Vec<D>]>::into_vec::<std::alloc::Global>(move _3) -> bb11; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[Vec<D>]>) -> Vec<Vec<D>> {slice::<impl [Vec<D>]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_2) -> bb12;                // scope 0 at ui/array-slice-vec/nested-vec-3.rs:38:5: 38:6
    }

    bb12: {
        return;                          // scope 0 at ui/array-slice-vec/nested-vec-3.rs:38:6: 38:6
    }

    bb13 (cleanup): {
        drop(_31) -> bb16;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb14 (cleanup): {
        drop(_39) -> bb15;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb15 (cleanup): {
        drop(_38) -> bb19;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb16 (cleanup): {
        drop(_20) -> bb17;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb17 (cleanup): {
        drop(_9) -> bb20;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb18 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/nested-vec-3.rs:33:27: 38:6
    }

    bb19 (cleanup): {
        _53 = alloc::alloc::box_free::<[D; 4], std::alloc::Global>(move (_37.0: std::ptr::Unique<[D; 4]>), move (_37.1: std::alloc::Global)) -> bb16; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[D; 4]>, std::alloc::Global) {alloc::alloc::box_free::<[D; 4], std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb20 (cleanup): {
        _54 = alloc::alloc::box_free::<[Vec<D>; 4], std::alloc::Global>(move (_8.0: std::ptr::Unique<[std::vec::Vec<D>; 4]>), move (_8.1: std::alloc::Global)) -> bb18; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[Vec<D>; 4]>, std::alloc::Global) {alloc::alloc::box_free::<[Vec<D>; 4], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

fn D(_1: u8) -> D {
    let mut _0: D;                       // return place in scope 0 at ui/array-slice-vec/nested-vec-3.rs:16:1: 16:9

    bb0: {
        _0 = D(move _1);                 // scope 0 at ui/array-slice-vec/nested-vec-3.rs:16:1: 16:9
        return;                          // scope 0 at ui/array-slice-vec/nested-vec-3.rs:16:1: 16:9
    }
}

// MIR FOR CTFE
fn D(_1: u8) -> D {
    let mut _0: D;                       // return place in scope 0 at ui/array-slice-vec/nested-vec-3.rs:16:1: 16:9

    bb0: {
        _0 = D(move _1);                 // scope 0 at ui/array-slice-vec/nested-vec-3.rs:16:1: 16:9
        return;                          // scope 0 at ui/array-slice-vec/nested-vec-3.rs:16:1: 16:9
    }
}
