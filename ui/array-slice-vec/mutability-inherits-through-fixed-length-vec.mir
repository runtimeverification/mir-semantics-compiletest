// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test1() -> () {
    let mut _0: ();
    let mut _1: [i32; 32];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: i32;
    let mut _15: i32;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug ints => _1;
        let _10: &i32;
        let _11: &i32;
        let mut _19: &i32;
        scope 2 {
            debug left_val => _10;
            debug right_val => _11;
            let _16: core::panicking::AssertKind;
            scope 3 {
                debug kind => _16;
            }
        }
    }

    bb0: {
        _1 = [const 0_i32; 32];
        _2 = const 0_usize;
        _3 = const 32_usize;
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _1[_2] = Add(_1[_2], const 1_i32);
        _7 = const 0_usize;
        _8 = const 32_usize;
        _9 = Lt(_7, _8);
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> [success: bb2, unwind continue];
    }

    bb2: {
        _6 = &_1[_7];
        _19 = const _;
        _5 = (move _6, _19);
        _10 = (_5.0: &i32);
        _11 = (_5.1: &i32);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<i32, i32>(move _16, _10, _11, move _18) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in test1: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

test1::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

fn test2() -> () {
    let mut _0: ();
    let mut _1: [i32; 32];
    let mut _2: std::slice::IterMut<'_, i32>;
    let mut _3: &mut [i32; 32];
    let mut _5: std::option::Option<&mut i32>;
    let mut _6: &mut std::slice::IterMut<'_, i32>;
    let mut _7: isize;
    let mut _9: std::slice::Iter<'_, i32>;
    let mut _10: &[i32; 32];
    let mut _12: std::option::Option<&i32>;
    let mut _13: &mut std::slice::Iter<'_, i32>;
    let mut _14: isize;
    let mut _16: (&i32, &i32);
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: i32;
    let mut _22: i32;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug ints => _1;
        let mut _4: std::slice::IterMut<'_, i32>;
        let mut _11: std::slice::Iter<'_, i32>;
        scope 2 {
            debug iter => _4;
            let _8: &mut i32;
            scope 3 {
                debug i => _8;
            }
        }
        scope 4 {
            debug iter => _11;
            let _15: &i32;
            scope 5 {
                debug i => _15;
                let _17: &i32;
                let _18: &i32;
                let mut _26: &i32;
                scope 6 {
                    debug left_val => _17;
                    debug right_val => _18;
                    let _23: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _23;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [const 0_i32; 32];
        _3 = &mut _1;
        _2 = <&mut [i32; 32] as IntoIterator>::into_iter(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = move _2;
        goto -> bb2;
    }

    bb2: {
        _6 = &mut _4;
        _5 = <std::slice::IterMut<'_, i32> as Iterator>::next(_6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _8 = move ((_5 as Some).0: &mut i32);
        (*_8) = Add((*_8), const 22_i32);
        goto -> bb2;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _10 = &_1;
        _9 = <&[i32; 32] as IntoIterator>::into_iter(move _10) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = move _9;
        goto -> bb8;
    }

    bb8: {
        _13 = &mut _11;
        _12 = <std::slice::Iter<'_, i32> as Iterator>::next(_13) -> [return: bb9, unwind continue];
    }

    bb9: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb11, 1: bb10, otherwise: bb5];
    }

    bb10: {
        _15 = ((_12 as Some).0: &i32);
        _26 = const _;
        _16 = (_15, _26);
        _17 = (_16.0: &i32);
        _18 = (_16.1: &i32);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb8, otherwise: bb12];
    }

    bb11: {
        return;
    }

    bb12: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<i32, i32>(move _23, _17, _18, move _25) -> unwind continue;
    }
}

promoted[0] in test2: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 22_i32;
        _0 = &_1;
        return;
    }
}

test2::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = test1() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = test2() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}
