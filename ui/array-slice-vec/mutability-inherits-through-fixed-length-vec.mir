// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test1() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:4:12: 4:12
    let mut _1: [i32; 32];               // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:5:9: 5:17
    let _2: usize;                       // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:6:10: 6:11
    let mut _3: (i32, bool);             // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:6:5: 6:17
    let mut _4: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: usize;                       // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:7:21: 7:22
    let mut _7: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug ints => _1;                // in scope 1 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:5:9: 5:17
        let _8: &i32;                    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _9: &i32;                    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _22: &i32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _8;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _9;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _14: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _14;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = [const 0_i32; 32];          // scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:5:20: 5:27
        _2 = const 0_usize;              // scope 1 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:6:10: 6:11
        _3 = CheckedAdd(_1[_2], const 1_i32); // scope 1 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:6:5: 6:17
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", _1[_2], const 1_i32) -> bb1; // scope 1 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:6:5: 6:17
    }

    bb1: {
        _1[_2] = move (_3.0: i32);       // scope 1 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:6:5: 6:17
        _6 = const 0_usize;              // scope 1 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:7:21: 7:22
        _5 = &_1[_6];                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(test1, [], Some(promoted[0])) }
        _7 = _22;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _7);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_4.0: &i32);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_4.1: &i32);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 1_i32;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<i32, i32>(move _16, move _17, move _19, move _21); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:8:2: 8:2
    }
}

promoted[0] in test1: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:7:25: 7:26

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:7:25: 7:26
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

test1::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:5:24: 5:26

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:5:24: 5:26
        return;                          // scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:5:24: 5:26
    }
}

fn test2() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:10:12: 10:12
    let mut _1: [i32; 32];               // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:11:9: 11:17
    let mut _2: std::slice::IterMut<'_, i32>; // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
    let mut _3: &mut [i32; 32];          // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
    let mut _5: std::option::Option<&mut i32>; // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
    let mut _6: &mut std::slice::IterMut<'_, i32>; // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
    let mut _7: &mut std::slice::IterMut<'_, i32>; // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
    let mut _8: isize;                   // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:5: 12:37
    let mut _10: (i32, bool);            // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:26: 12:34
    let mut _11: std::slice::Iter<'_, i32>; // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
    let mut _12: &[i32; 32];             // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
    let mut _14: std::option::Option<&i32>; // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
    let mut _15: &mut std::slice::Iter<'_, i32>; // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
    let mut _16: &mut std::slice::Iter<'_, i32>; // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
    let mut _17: isize;                  // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:5: 13:43
    let mut _19: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _21: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _26: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _27: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _29: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _30: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _31: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _32: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _33: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _34: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug ints => _1;                // in scope 1 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:11:9: 11:17
        let mut _4: std::slice::IterMut<'_, i32>; // in scope 1 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
        let mut _13: std::slice::Iter<'_, i32>; // in scope 1 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
        scope 2 {
            debug iter => _4;            // in scope 2 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
            let _9: &mut i32;            // in scope 2 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:9: 12:10
            scope 3 {
                debug i => _9;           // in scope 3 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:9: 12:10
            }
        }
        scope 4 {
            debug iter => _13;           // in scope 4 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
            let _18: &i32;               // in scope 4 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:9: 13:10
            scope 5 {
                debug i => _18;          // in scope 5 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:9: 13:10
                let _22: &i32;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _23: &i32;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _36: &i32;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 6 {
                    debug left_val => _22; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _23; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _28: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _28; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [const 0_i32; 32];          // scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:11:20: 11:27
        _3 = &mut _1;                    // scope 1 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
        _2 = <&mut [i32; 32] as IntoIterator>::into_iter(move _3) -> bb1; // scope 1 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
                                         // + literal: Const { ty: fn(&mut [i32; 32]) -> <&mut [i32; 32] as IntoIterator>::IntoIter {<&mut [i32; 32] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _2;                    // scope 1 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
        goto -> bb2;                     // scope 2 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:5: 12:37
    }

    bb2: {
        _7 = &mut _4;                    // scope 2 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
        _6 = &mut (*_7);                 // scope 2 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
        _5 = <std::slice::IterMut<'_, i32> as Iterator>::next(move _6) -> bb3; // scope 2 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::IterMut<'_, i32>) -> Option<<std::slice::IterMut<'_, i32> as Iterator>::Item> {<std::slice::IterMut<'_, i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = discriminant(_5);           // scope 2 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 2 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
    }

    bb4: {
        _9 = move ((_5 as Some).0: &mut i32); // scope 2 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:9: 12:10
        _10 = CheckedAdd((*_9), const 22_i32); // scope 3 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:26: 12:34
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_9), const 22_i32) -> bb7; // scope 3 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:26: 12:34
    }

    bb5: {
        unreachable;                     // scope 2 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:14: 12:23
    }

    bb6: {
        _12 = &_1;                       // scope 1 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
        _11 = <&[i32; 32] as IntoIterator>::into_iter(move _12) -> bb8; // scope 1 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
                                         // + literal: Const { ty: fn(&[i32; 32]) -> <&[i32; 32] as IntoIterator>::IntoIter {<&[i32; 32] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb7: {
        (*_9) = move (_10.0: i32);       // scope 3 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:26: 12:34
        goto -> bb2;                     // scope 2 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:12:5: 12:37
    }

    bb8: {
        _13 = move _11;                  // scope 1 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
        goto -> bb9;                     // scope 4 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:5: 13:43
    }

    bb9: {
        _16 = &mut _13;                  // scope 4 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
        _15 = &mut (*_16);               // scope 4 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
        _14 = <std::slice::Iter<'_, i32> as Iterator>::next(move _15) -> bb10; // scope 4 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, i32>) -> Option<<std::slice::Iter<'_, i32> as Iterator>::Item> {<std::slice::Iter<'_, i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = discriminant(_14);         // scope 4 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
        switchInt(move _17) -> [0: bb13, 1: bb11, otherwise: bb12]; // scope 4 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
    }

    bb11: {
        _18 = ((_14 as Some).0: &i32);   // scope 4 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:9: 13:10
        _20 = _18;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _36 = const _;                   // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(test2, [], Some(promoted[0])) }
        _21 = _36;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _21);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _22 = (_19.0: &i32);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _23 = (_19.1: &i32);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _26 = (*_22);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _27 = const 22_i32;              // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _25 = Eq(move _26, move _27);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _24 = Not(move _25);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _24) -> [0: bb9, otherwise: bb14]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        unreachable;                     // scope 4 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:14: 13:19
    }

    bb13: {
        return;                          // scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:14:2: 14:2
    }

    bb14: {
        _28 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = _22;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _32;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _23;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = _34;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _29 = core::panicking::assert_failed::<i32, i32>(move _30, move _31, move _33, move _35); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }
}

promoted[0] in test2: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:37: 13:39

    bb0: {
        _1 = const 22_i32;               // scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:13:37: 13:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

test2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:11:24: 11:26

    bb0: {
        _0 = const 32_usize;             // scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:11:24: 11:26
        return;                          // scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:11:24: 11:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:16:15: 16:15
    let _1: ();                          // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:17:5: 17:12
    let _2: ();                          // in scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:18:5: 18:12

    bb0: {
        _1 = test1() -> bb1;             // scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:17:5: 17:12
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:17:5: 17:10
                                         // + literal: Const { ty: fn() {test1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = test2() -> bb2;             // scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:18:5: 18:12
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:18:5: 18:10
                                         // + literal: Const { ty: fn() {test2}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs:19:2: 19:2
    }
}
