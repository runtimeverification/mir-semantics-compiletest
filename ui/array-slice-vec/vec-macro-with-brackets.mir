// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:14:15: 14:15
    let _1: std::vec::Vec<i32>;          // in scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:15:9: 15:15
    let mut _2: std::vec::Vec<i32>;      // in scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:8:13: 8:22
    let _3: ();                          // in scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
    let mut _4: &mut std::vec::Vec<i32>; // in scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
    let _5: ();                          // in scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
    let mut _6: &mut std::vec::Vec<i32>; // in scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
    let _7: ();                          // in scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
    let mut _8: &mut std::vec::Vec<i32>; // in scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
    let _9: ();                          // in scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
    let mut _10: &mut std::vec::Vec<i32>; // in scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
    let _11: ();                         // in scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
    let mut _12: &mut std::vec::Vec<i32>; // in scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
    scope 1 {
        debug my_vec => _1;              // in scope 1 at ui/array-slice-vec/vec-macro-with-brackets.rs:15:9: 15:15
    }
    scope 2 {
        debug _temp => _2;               // in scope 2 at ui/array-slice-vec/vec-macro-with-brackets.rs:8:13: 8:22
    }

    bb0: {
        _2 = Vec::<i32>::new() -> bb1;   // scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:8:25: 8:47
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-with-brackets.rs:8:25: 8:45
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _2;                    // scope 2 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
        _3 = Vec::<i32>::push(move _4, const 1_i32) -> [return: bb2, unwind: bb8]; // scope 2 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-with-brackets.rs:9:17: 9:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &mut _2;                    // scope 2 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
        _5 = Vec::<i32>::push(move _6, const 2_i32) -> [return: bb3, unwind: bb8]; // scope 2 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-with-brackets.rs:9:17: 9:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = &mut _2;                    // scope 2 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
        _7 = Vec::<i32>::push(move _8, const 3_i32) -> [return: bb4, unwind: bb8]; // scope 2 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-with-brackets.rs:9:17: 9:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = &mut _2;                   // scope 2 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
        _9 = Vec::<i32>::push(move _10, const 4_i32) -> [return: bb5, unwind: bb8]; // scope 2 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-with-brackets.rs:9:17: 9:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = &mut _2;                   // scope 2 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
        _11 = Vec::<i32>::push(move _12, const 5_i32) -> [return: bb6, unwind: bb8]; // scope 2 at ui/array-slice-vec/vec-macro-with-brackets.rs:9:11: 9:25
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-with-brackets.rs:9:17: 9:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb6: {
        _1 = move _2;                    // scope 2 at ui/array-slice-vec/vec-macro-with-brackets.rs:10:9: 10:14
        drop(_1) -> bb7;                 // scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:16:1: 16:2
    }

    bb7: {
        return;                          // scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:16:2: 16:2
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:11:5: 11:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/vec-macro-with-brackets.rs:14:1: 16:2
    }
}
