// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<isize>;
    let mut _2: std::boxed::Box<[isize]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[isize; 1]>;
    let mut _8: (&isize, &isize);
    let mut _9: &isize;
    let _10: &isize;
    let mut _11: &std::vec::Vec<isize>;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: isize;
    let mut _17: isize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&isize, &isize);
    let mut _22: &isize;
    let _23: &isize;
    let mut _24: &std::vec::Vec<isize>;
    let mut _25: usize;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: isize;
    let mut _31: isize;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: *const [isize; 1];
    let mut _38: *const ();
    let mut _39: usize;
    let mut _40: usize;
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    scope 1 {
        debug v => _1;
        let _7: usize;
        scope 3 {
            debug x => const 0_usize;
            let _12: &isize;
            let _13: &isize;
            let _26: &isize;
            let _27: &isize;
            let mut _35: &isize;
            let mut _36: &isize;
            scope 4 {
                debug left_val => _12;
                debug right_val => _13;
                let _18: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _18;
                }
            }
            scope 6 {
                debug left_val => _26;
                debug right_val => _27;
                let _32: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _32;
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([isize; 1]);
        _4 = AlignOf([isize; 1]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [isize; 1]);
        _37 = (((_6.0: std::ptr::Unique<[isize; 1]>).0: std::ptr::NonNull<[isize; 1]>).0: *const [isize; 1]);
        _38 = _37 as *const () (PtrToPtr);
        _39 = _38 as usize (Transmute);
        _40 = AlignOf(isize);
        _41 = Sub(_40, const 1_usize);
        _42 = BitAnd(_39, _41);
        _43 = Eq(_42, const 0_usize);
        assert(_43, "misaligned pointer dereference: address must be a multiple of {} but is {}", _40, _39) -> [success: bb12, unwind unreachable];
    }

    bb2: {
        _7 = const 0_usize;
        _11 = &_1;
        _10 = <Vec<isize> as Index<usize>>::index(move _11, _7) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _9 = _10;
        _36 = const _;
        _8 = (move _9, _36);
        _12 = (_8.0: &isize);
        _13 = (_8.1: &isize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<isize, isize>(move _18, _12, _13, move _20) -> bb10;
    }

    bb5: {
        _24 = &_1;
        _25 = Add(_7, const 2_usize);
        _23 = <Vec<isize> as Index<usize>>::index(move _24, move _25) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _22 = _23;
        _35 = const _;
        _21 = (move _22, _35);
        _26 = (_21.0: &isize);
        _27 = (_21.1: &isize);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<isize, isize>(move _32, _26, _27, move _34) -> bb10;
    }

    bb8: {
        drop(_1) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        (*_37) = [const 10_isize];
        _2 = move _6 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _1 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 20_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}
