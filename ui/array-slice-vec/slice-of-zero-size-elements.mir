// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &[T]) -> Option<&[T]> {
    debug v => _1;                       // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:10:11: 10:12
    let mut _0: std::option::Option<&[T]>; // return place in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:10:23: 10:35
    let mut _2: std::slice::Iter<'_, T>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:11:9: 11:15
    let mut _3: &[T];                    // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:11:18: 11:26
    let mut _4: std::ops::Range<i32>;    // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
    let mut _5: std::ops::Range<i32>;    // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
    let mut _7: std::option::Option<i32>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
    let mut _8: &mut std::ops::Range<i32>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
    let mut _9: &mut std::ops::Range<i32>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
    let mut _10: isize;                  // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:5: 14:6
    let mut _11: std::option::Option<&T>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:13:17: 13:26
    let mut _12: &mut std::slice::Iter<'_, T>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:13:17: 13:26
    let mut _13: &[T];                   // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:15:10: 15:23
    let _14: &[T];                       // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:15:10: 15:23
    let mut _15: &std::slice::Iter<'_, T>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:15:10: 15:23
    scope 1 {
        debug it => _2;                  // in scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:11:9: 11:15
        let mut _6: std::ops::Range<i32>; // in scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
        scope 2 {
            debug iter => _6;            // in scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
            scope 3 {
            }
        }
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:11:18: 11:26
        _2 = core::slice::<impl [T]>::iter(move _3) -> bb1; // scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:11:18: 11:26
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:11:20: 11:24
                                         // + literal: Const { ty: for<'a> fn(&'a [T]) -> std::slice::Iter<'a, T> {core::slice::<impl [T]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = std::ops::Range::<i32> { start: const 0_i32, end: const 5_i32 }; // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
        _4 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _5) -> bb2; // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = move _4;                    // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
        goto -> bb3;                     // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:5: 14:6
    }

    bb3: {
        _9 = &mut _6;                    // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
        _8 = &mut (*_9);                 // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
        _7 = <std::ops::Range<i32> as Iterator>::next(move _8) -> bb4; // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = discriminant(_7);          // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
        switchInt(move _10) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
    }

    bb5: {
        _12 = &mut _2;                   // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:13:17: 13:26
        _11 = <std::slice::Iter<'_, T> as Iterator>::next(move _12) -> bb3; // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:13:17: 13:26
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:13:20: 13:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:12:14: 12:18
    }

    bb7: {
        _15 = &_2;                       // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:15:10: 15:23
        _14 = std::slice::Iter::<'_, T>::as_slice(move _15) -> bb8; // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:15:10: 15:23
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:15:13: 15:21
                                         // + literal: Const { ty: for<'a> fn(&'a std::slice::Iter<'_, T>) -> &[T] {std::slice::Iter::<'_, T>::as_slice}, val: Value(<ZST>) }
    }

    bb8: {
        _13 = _14;                       // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:15:10: 15:23
        _0 = Option::<&[T]>::Some(move _13); // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:15:5: 15:24
        return;                          // scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:16:2: 16:2
    }
}

fn foo_mut(_1: &mut [T]) -> Option<&mut [T]> {
    debug v => _1;                       // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:18:15: 18:16
    let mut _0: std::option::Option<&mut [T]>; // return place in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:18:31: 18:47
    let mut _2: std::slice::IterMut<'_, T>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:19:9: 19:15
    let mut _3: &mut [T];                // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:19:18: 19:30
    let mut _4: std::ops::Range<i32>;    // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
    let mut _5: std::ops::Range<i32>;    // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
    let mut _7: std::option::Option<i32>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
    let mut _8: &mut std::ops::Range<i32>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
    let mut _9: &mut std::ops::Range<i32>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
    let mut _10: isize;                  // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:5: 22:6
    let mut _11: std::option::Option<&mut T>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:21:17: 21:26
    let mut _12: &mut std::slice::IterMut<'_, T>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:21:17: 21:26
    let mut _13: &mut [T];               // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:23:10: 23:25
    let mut _14: &mut [T];               // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:23:10: 23:25
    let mut _15: std::slice::IterMut<'_, T>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:23:10: 23:12
    scope 1 {
        debug it => _2;                  // in scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:19:9: 19:15
        let mut _6: std::ops::Range<i32>; // in scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
        scope 2 {
            debug iter => _6;            // in scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
            scope 3 {
            }
        }
    }

    bb0: {
        _3 = &mut (*_1);                 // scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:19:18: 19:30
        _2 = core::slice::<impl [T]>::iter_mut(move _3) -> bb1; // scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:19:18: 19:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:19:20: 19:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut [T]) -> std::slice::IterMut<'a, T> {core::slice::<impl [T]>::iter_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = std::ops::Range::<i32> { start: const 0_i32, end: const 5_i32 }; // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
        _4 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _5) -> bb2; // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = move _4;                    // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
        goto -> bb3;                     // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:5: 22:6
    }

    bb3: {
        _9 = &mut _6;                    // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
        _8 = &mut (*_9);                 // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
        _7 = <std::ops::Range<i32> as Iterator>::next(move _8) -> bb4; // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = discriminant(_7);          // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
        switchInt(move _10) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
    }

    bb5: {
        _12 = &mut _2;                   // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:21:17: 21:26
        _11 = <std::slice::IterMut<'_, T> as Iterator>::next(move _12) -> bb3; // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:21:17: 21:26
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:21:20: 21:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::IterMut<'_, T>) -> Option<<std::slice::IterMut<'_, T> as Iterator>::Item> {<std::slice::IterMut<'_, T> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:20:14: 20:18
    }

    bb7: {
        _15 = move _2;                   // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:23:10: 23:12
        _14 = std::slice::IterMut::<'_, T>::into_slice(move _15) -> bb8; // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:23:10: 23:25
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:23:13: 23:23
                                         // + literal: Const { ty: fn(std::slice::IterMut<'_, T>) -> &mut [T] {std::slice::IterMut::<'_, T>::into_slice}, val: Value(<ZST>) }
    }

    bb8: {
        _13 = &mut (*_14);               // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:23:10: 23:25
        _0 = Option::<&mut [T]>::Some(move _13); // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:23:5: 23:26
        return;                          // scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:24:2: 24:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:26:15: 26:15
    let _1: &[()];                       // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:29:9: 29:14
    let _2: &[()];                       // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:29:33: 29:80
    let mut _3: *const ();               // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:29:55: 29:75
    let mut _4: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: usize;                       // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:30:16: 30:27
    let mut _7: &[()];                   // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:30:16: 30:27
    let mut _8: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _23: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _24: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _25: usize;                      // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:31:16: 31:36
    let mut _26: std::slice::Iter<'_, ()>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:31:16: 31:28
    let mut _27: &[()];                  // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:31:16: 31:28
    let mut _28: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _44: &[()];                  // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:34:18: 34:30
    let mut _45: bool;                   // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:35:5: 35:33
    let mut _46: bool;                   // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:35:13: 35:32
    let mut _47: &std::option::Option<&()>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:35:13: 35:32
    let _48: std::option::Option<&()>;   // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:35:13: 35:22
    let mut _49: &mut std::slice::Iter<'_, ()>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:35:13: 35:22
    let mut _50: !;                      // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:35:5: 35:33
    let mut _51: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _52: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _53: usize;                      // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:36:16: 36:26
    let mut _54: std::slice::Iter<'_, ()>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:36:16: 36:18
    let mut _55: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _58: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _59: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _60: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _61: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _63: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _64: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _65: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _66: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _67: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _68: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _69: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _70: bool;                   // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:39:5: 39:34
    let mut _71: bool;                   // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:39:13: 39:33
    let mut _72: &std::option::Option<&[()]>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:39:13: 39:33
    let _73: std::option::Option<&[()]>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:39:13: 39:23
    let mut _74: &[()];                  // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:39:17: 39:22
    let mut _75: !;                      // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:39:5: 39:34
    let mut _77: &mut [()];              // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:42:37: 42:86
    let mut _78: &mut [()];              // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:42:37: 42:86
    let mut _79: *mut ();                // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:42:63: 42:81
    let mut _80: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _81: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _82: usize;                      // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:43:16: 43:27
    let mut _83: &[()];                  // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:43:16: 43:27
    let mut _84: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _87: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _88: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _89: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _90: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _92: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _93: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _94: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _95: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _96: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _97: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _99: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _100: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _101: usize;                     // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:44:16: 44:40
    let mut _102: std::slice::IterMut<'_, ()>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:44:16: 44:32
    let mut _103: &mut [()];             // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:44:16: 44:32
    let mut _104: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _107: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _108: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _109: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _110: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _112: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _113: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _114: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _115: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _116: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _117: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _118: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _120: &mut [()];             // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:47:22: 47:38
    let mut _121: bool;                  // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:48:9: 48:37
    let mut _122: bool;                  // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:48:17: 48:36
    let mut _123: &std::option::Option<&mut ()>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:48:17: 48:36
    let _124: std::option::Option<&mut ()>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:48:17: 48:26
    let mut _125: &mut std::slice::IterMut<'_, ()>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:48:17: 48:26
    let mut _126: !;                     // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:48:9: 48:37
    let mut _127: (&usize, &usize);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _128: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _129: usize;                     // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:49:20: 49:30
    let mut _130: std::slice::IterMut<'_, ()>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:49:20: 49:22
    let mut _131: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _134: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _135: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _136: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _137: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _139: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _140: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _141: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _142: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _143: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _144: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _145: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _146: bool;                  // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:52:5: 52:38
    let mut _147: bool;                  // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:52:13: 52:37
    let mut _148: &std::option::Option<&mut [()]>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:52:13: 52:37
    let _149: std::option::Option<&mut [()]>; // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:52:13: 52:27
    let mut _150: &mut [()];             // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:52:21: 52:26
    let mut _151: !;                     // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:52:5: 52:38
    scope 1 {
        debug slice => _1;               // in scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:29:9: 29:14
        let _9: &usize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _10: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _29: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _30: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _43: std::slice::Iter<'_, ()>; // in scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:34:9: 34:15
        let mut _156: &usize;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _157: &usize;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 3 {
            debug left_val => _9;        // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _10;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _15: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _15;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 5 {
            debug left_val => _29;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _30;      // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _35: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 6 {
                debug kind => _35;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 7 {
            debug it => _43;             // in scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:34:9: 34:15
            let _56: &usize;             // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _57: &usize;             // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _76: &mut [()];          // in scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:42:9: 42:14
            let mut _155: &usize;        // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 8 {
                debug left_val => _56;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _57;  // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _62: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 9 {
                    debug kind => _62;   // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 10 {
                debug slice => _76;      // in scope 10 at ui/array-slice-vec/slice-of-zero-size-elements.rs:42:9: 42:14
                let _85: &usize;         // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _86: &usize;         // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _105: &usize;        // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _106: &usize;        // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _119: std::slice::IterMut<'_, ()>; // in scope 10 at ui/array-slice-vec/slice-of-zero-size-elements.rs:47:13: 47:19
                let mut _153: &usize;    // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _154: &usize;    // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 12 {
                    debug left_val => _85; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _86; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _91: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 13 {
                        debug kind => _91; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 14 {
                    debug left_val => _105; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _106; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _111: core::panicking::AssertKind; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 15 {
                        debug kind => _111; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 16 {
                    debug it => _119;    // in scope 16 at ui/array-slice-vec/slice-of-zero-size-elements.rs:47:13: 47:19
                    let _132: &usize;    // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _133: &usize;    // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let mut _152: &usize; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 17 {
                        debug left_val => _132; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _133; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _138: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 18 {
                            debug kind => _138; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
            scope 11 {
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = const {0xfffffffffffffffb as *const ()}; // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:29:55: 29:75
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:29:55: 29:75
                                         // + literal: Const { ty: *const (), val: Value(Scalar(0xfffffffffffffffb)) }
        _2 = std::slice::from_raw_parts::<'_, ()>(move _3, const 10_usize) -> bb1; // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:29:33: 29:80
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:29:33: 29:54
                                         // + literal: Const { ty: unsafe fn(*const (), usize) -> &[()] {std::slice::from_raw_parts::<'_, ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = _2;                         // scope 2 at ui/array-slice-vec/slice-of-zero-size-elements.rs:29:33: 29:80
        _7 = _1;                         // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:30:16: 30:27
        _6 = Len((*_7));                 // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:30:16: 30:27
        _5 = &_6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _157 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[5])) }
        _8 = _157;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _8);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_4.0: &usize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_4.1: &usize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = const 10_usize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<usize, usize>(move _17, move _18, move _20, move _22); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb3: {
        _27 = _1;                        // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:31:16: 31:28
        _26 = core::slice::<impl [()]>::iter(move _27) -> bb4; // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:31:16: 31:28
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:31:22: 31:26
                                         // + literal: Const { ty: for<'a> fn(&'a [()]) -> std::slice::Iter<'a, ()> {core::slice::<impl [()]>::iter}, val: Value(<ZST>) }
    }

    bb4: {
        _25 = <std::slice::Iter<'_, ()> as Iterator>::count(move _26) -> bb5; // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:31:16: 31:36
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:31:29: 31:34
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, ()>) -> usize {<std::slice::Iter<'_, ()> as Iterator>::count}, val: Value(<ZST>) }
    }

    bb5: {
        _24 = &_25;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _156 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[4])) }
        _28 = _156;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _23 = (move _24, move _28);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_23.0: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_23.1: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = (*_29);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = const 10_usize;            // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = Eq(move _33, move _34);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _31 = Not(move _32);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb7, otherwise: bb6]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _35 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<usize, usize>(move _37, move _38, move _40, move _42); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb7: {
        _44 = _1;                        // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:34:18: 34:30
        _43 = core::slice::<impl [()]>::iter(move _44) -> bb8; // scope 1 at ui/array-slice-vec/slice-of-zero-size-elements.rs:34:18: 34:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:34:24: 34:28
                                         // + literal: Const { ty: for<'a> fn(&'a [()]) -> std::slice::Iter<'a, ()> {core::slice::<impl [()]>::iter}, val: Value(<ZST>) }
    }

    bb8: {
        _49 = &mut _43;                  // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:35:13: 35:22
        _48 = <std::slice::Iter<'_, ()> as Iterator>::nth(move _49, const 5_usize) -> bb9; // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:35:13: 35:22
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:35:16: 35:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, ()>, usize) -> Option<<std::slice::Iter<'_, ()> as Iterator>::Item> {<std::slice::Iter<'_, ()> as Iterator>::nth}, val: Value(<ZST>) }
    }

    bb9: {
        _47 = &_48;                      // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:35:13: 35:32
        _46 = Option::<&()>::is_some(move _47) -> bb10; // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:35:13: 35:32
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:35:23: 35:30
                                         // + literal: Const { ty: for<'a> fn(&'a Option<&()>) -> bool {Option::<&()>::is_some}, val: Value(<ZST>) }
    }

    bb10: {
        _45 = Not(move _46);             // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:35:5: 35:33
        switchInt(move _45) -> [0: bb12, otherwise: bb11]; // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:35:5: 35:33
    }

    bb11: {
        _50 = core::panicking::panic(const "assertion failed: it.nth(5).is_some()"); // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:35:5: 35:33
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:35:5: 35:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _54 = move _43;                  // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:36:16: 36:18
        _53 = <std::slice::Iter<'_, ()> as Iterator>::count(move _54) -> bb13; // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:36:16: 36:26
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:36:19: 36:24
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, ()>) -> usize {<std::slice::Iter<'_, ()> as Iterator>::count}, val: Value(<ZST>) }
    }

    bb13: {
        _52 = &_53;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _155 = const _;                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[3])) }
        _55 = _155;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _51 = (move _52, move _55);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _56 = (_51.0: &usize);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _57 = (_51.1: &usize);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _60 = (*_56);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _61 = const 4_usize;             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _59 = Eq(move _60, move _61);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _58 = Not(move _59);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _58) -> [0: bb15, otherwise: bb14]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _62 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _64 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _66 = _56;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _65 = _66;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _57;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _67 = _68;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _69 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _63 = core::panicking::assert_failed::<usize, usize>(move _64, move _65, move _67, move _69); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb15: {
        _74 = _1;                        // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:39:17: 39:22
        _73 = foo::<()>(move _74) -> bb16; // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:39:13: 39:23
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:39:13: 39:16
                                         // + literal: Const { ty: for<'a> fn(&'a [()]) -> Option<&'a [()]> {foo::<()>}, val: Value(<ZST>) }
    }

    bb16: {
        _72 = &_73;                      // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:39:13: 39:33
        _71 = Option::<&[()]>::is_some(move _72) -> bb17; // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:39:13: 39:33
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:39:24: 39:31
                                         // + literal: Const { ty: for<'a> fn(&'a Option<&[()]>) -> bool {Option::<&[()]>::is_some}, val: Value(<ZST>) }
    }

    bb17: {
        _70 = Not(move _71);             // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:39:5: 39:34
        switchInt(move _70) -> [0: bb19, otherwise: bb18]; // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:39:5: 39:34
    }

    bb18: {
        _75 = core::panicking::panic(const "assertion failed: foo(slice).is_some()"); // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:39:5: 39:34
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:39:5: 39:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        _79 = const {0xfffffffffffffffb as *mut ()}; // scope 11 at ui/array-slice-vec/slice-of-zero-size-elements.rs:42:63: 42:81
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:42:63: 42:81
                                         // + literal: Const { ty: *mut (), val: Value(Scalar(0xfffffffffffffffb)) }
        _78 = std::slice::from_raw_parts_mut::<'_, ()>(move _79, const 10_usize) -> bb20; // scope 11 at ui/array-slice-vec/slice-of-zero-size-elements.rs:42:37: 42:86
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:42:37: 42:62
                                         // + literal: Const { ty: unsafe fn(*mut (), usize) -> &mut [()] {std::slice::from_raw_parts_mut::<'_, ()>}, val: Value(<ZST>) }
    }

    bb20: {
        _77 = &mut (*_78);               // scope 11 at ui/array-slice-vec/slice-of-zero-size-elements.rs:42:37: 42:86
        _76 = &mut (*_77);               // scope 7 at ui/array-slice-vec/slice-of-zero-size-elements.rs:42:37: 42:86
        _83 = &(*_76);                   // scope 10 at ui/array-slice-vec/slice-of-zero-size-elements.rs:43:16: 43:27
        _82 = Len((*_83));               // scope 10 at ui/array-slice-vec/slice-of-zero-size-elements.rs:43:16: 43:27
        _81 = &_82;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _154 = const _;                  // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[2])) }
        _84 = _154;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _80 = (move _81, move _84);      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _85 = (_80.0: &usize);           // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _86 = (_80.1: &usize);           // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _89 = (*_85);                    // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _90 = const 10_usize;            // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _88 = Eq(move _89, move _90);    // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _87 = Not(move _88);             // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _87) -> [0: bb22, otherwise: bb21]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb21: {
        _91 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _93 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _95 = _85;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _94 = _95;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _97 = _86;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _96 = _97;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _98 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _92 = core::panicking::assert_failed::<usize, usize>(move _93, move _94, move _96, move _98); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb22: {
        _103 = &mut (*_76);              // scope 10 at ui/array-slice-vec/slice-of-zero-size-elements.rs:44:16: 44:32
        _102 = core::slice::<impl [()]>::iter_mut(move _103) -> bb23; // scope 10 at ui/array-slice-vec/slice-of-zero-size-elements.rs:44:16: 44:32
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:44:22: 44:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut [()]) -> std::slice::IterMut<'a, ()> {core::slice::<impl [()]>::iter_mut}, val: Value(<ZST>) }
    }

    bb23: {
        _101 = <std::slice::IterMut<'_, ()> as Iterator>::count(move _102) -> bb24; // scope 10 at ui/array-slice-vec/slice-of-zero-size-elements.rs:44:16: 44:40
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:44:33: 44:38
                                         // + literal: Const { ty: fn(std::slice::IterMut<'_, ()>) -> usize {<std::slice::IterMut<'_, ()> as Iterator>::count}, val: Value(<ZST>) }
    }

    bb24: {
        _100 = &_101;                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _153 = const _;                  // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _104 = _153;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _99 = (move _100, move _104);    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _105 = (_99.0: &usize);          // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _106 = (_99.1: &usize);          // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _109 = (*_105);                  // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _110 = const 10_usize;           // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _108 = Eq(move _109, move _110); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _107 = Not(move _108);           // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _107) -> [0: bb26, otherwise: bb25]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb25: {
        _111 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _113 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _115 = _105;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _114 = _115;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _117 = _106;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _116 = _117;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _118 = Option::<Arguments<'_>>::None; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _112 = core::panicking::assert_failed::<usize, usize>(move _113, move _114, move _116, move _118); // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb26: {
        _120 = &mut (*_76);              // scope 10 at ui/array-slice-vec/slice-of-zero-size-elements.rs:47:22: 47:38
        _119 = core::slice::<impl [()]>::iter_mut(move _120) -> bb27; // scope 10 at ui/array-slice-vec/slice-of-zero-size-elements.rs:47:22: 47:38
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:47:28: 47:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut [()]) -> std::slice::IterMut<'a, ()> {core::slice::<impl [()]>::iter_mut}, val: Value(<ZST>) }
    }

    bb27: {
        _125 = &mut _119;                // scope 16 at ui/array-slice-vec/slice-of-zero-size-elements.rs:48:17: 48:26
        _124 = <std::slice::IterMut<'_, ()> as Iterator>::nth(move _125, const 5_usize) -> bb28; // scope 16 at ui/array-slice-vec/slice-of-zero-size-elements.rs:48:17: 48:26
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:48:20: 48:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::IterMut<'_, ()>, usize) -> Option<<std::slice::IterMut<'_, ()> as Iterator>::Item> {<std::slice::IterMut<'_, ()> as Iterator>::nth}, val: Value(<ZST>) }
    }

    bb28: {
        _123 = &_124;                    // scope 16 at ui/array-slice-vec/slice-of-zero-size-elements.rs:48:17: 48:36
        _122 = Option::<&mut ()>::is_some(move _123) -> bb29; // scope 16 at ui/array-slice-vec/slice-of-zero-size-elements.rs:48:17: 48:36
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:48:27: 48:34
                                         // + literal: Const { ty: for<'a> fn(&'a Option<&mut ()>) -> bool {Option::<&mut ()>::is_some}, val: Value(<ZST>) }
    }

    bb29: {
        _121 = Not(move _122);           // scope 16 at ui/array-slice-vec/slice-of-zero-size-elements.rs:48:9: 48:37
        switchInt(move _121) -> [0: bb31, otherwise: bb30]; // scope 16 at ui/array-slice-vec/slice-of-zero-size-elements.rs:48:9: 48:37
    }

    bb30: {
        _126 = core::panicking::panic(const "assertion failed: it.nth(5).is_some()"); // scope 16 at ui/array-slice-vec/slice-of-zero-size-elements.rs:48:9: 48:37
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:48:9: 48:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb31: {
        _130 = move _119;                // scope 16 at ui/array-slice-vec/slice-of-zero-size-elements.rs:49:20: 49:22
        _129 = <std::slice::IterMut<'_, ()> as Iterator>::count(move _130) -> bb32; // scope 16 at ui/array-slice-vec/slice-of-zero-size-elements.rs:49:20: 49:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:49:23: 49:28
                                         // + literal: Const { ty: fn(std::slice::IterMut<'_, ()>) -> usize {<std::slice::IterMut<'_, ()> as Iterator>::count}, val: Value(<ZST>) }
    }

    bb32: {
        _128 = &_129;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _152 = const _;                  // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _131 = _152;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _127 = (move _128, move _131);   // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _132 = (_127.0: &usize);         // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _133 = (_127.1: &usize);         // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _136 = (*_132);                  // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _137 = const 4_usize;            // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _135 = Eq(move _136, move _137); // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _134 = Not(move _135);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _134) -> [0: bb34, otherwise: bb33]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb33: {
        _138 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _140 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _142 = _132;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _141 = _142;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _144 = _133;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _143 = _144;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _145 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _139 = core::panicking::assert_failed::<usize, usize>(move _140, move _141, move _143, move _145); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb34: {
        _150 = &mut (*_76);              // scope 10 at ui/array-slice-vec/slice-of-zero-size-elements.rs:52:21: 52:26
        _149 = foo_mut::<()>(move _150) -> bb35; // scope 10 at ui/array-slice-vec/slice-of-zero-size-elements.rs:52:13: 52:27
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:52:13: 52:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut [()]) -> Option<&'a mut [()]> {foo_mut::<()>}, val: Value(<ZST>) }
    }

    bb35: {
        _148 = &_149;                    // scope 10 at ui/array-slice-vec/slice-of-zero-size-elements.rs:52:13: 52:37
        _147 = Option::<&mut [()]>::is_some(move _148) -> bb36; // scope 10 at ui/array-slice-vec/slice-of-zero-size-elements.rs:52:13: 52:37
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:52:28: 52:35
                                         // + literal: Const { ty: for<'a> fn(&'a Option<&mut [()]>) -> bool {Option::<&mut [()]>::is_some}, val: Value(<ZST>) }
    }

    bb36: {
        _146 = Not(move _147);           // scope 10 at ui/array-slice-vec/slice-of-zero-size-elements.rs:52:5: 52:38
        switchInt(move _146) -> [0: bb38, otherwise: bb37]; // scope 10 at ui/array-slice-vec/slice-of-zero-size-elements.rs:52:5: 52:38
    }

    bb37: {
        _151 = core::panicking::panic(const "assertion failed: foo_mut(slice).is_some()"); // scope 10 at ui/array-slice-vec/slice-of-zero-size-elements.rs:52:5: 52:38
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-of-zero-size-elements.rs:52:5: 52:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb38: {
        return;                          // scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:53:2: 53:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:49:32: 49:33

    bb0: {
        _1 = const 4_usize;              // scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:49:32: 49:33
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:44:42: 44:44

    bb0: {
        _1 = const 10_usize;             // scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:44:42: 44:44
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:43:29: 43:31

    bb0: {
        _1 = const 10_usize;             // scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:43:29: 43:31
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:36:28: 36:29

    bb0: {
        _1 = const 4_usize;              // scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:36:28: 36:29
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:31:38: 31:40

    bb0: {
        _1 = const 10_usize;             // scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:31:38: 31:40
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:30:29: 30:31

    bb0: {
        _1 = const 10_usize;             // scope 0 at ui/array-slice-vec/slice-of-zero-size-elements.rs:30:29: 30:31
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
