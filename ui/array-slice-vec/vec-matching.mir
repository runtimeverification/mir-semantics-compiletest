// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a() -> () {
    let mut _0: ();
    let _1: [i32; 1];
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: i32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug a => _2;
            let _5: &i32;
            let _6: &i32;
            let mut _14: &i32;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32];
        _2 = _1[0 of 1];
        _4 = &_2;
        _14 = const _;
        _3 = (move _4, _14);
        _5 = (_3.0: &i32);
        _6 = (_3.1: &i32);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<i32, i32>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        return;
    }
}

promoted[0] in a: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

fn b() -> () {
    let mut _0: ();
    let _1: [i32; 3];
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&i32, &i32);
    let mut _17: &i32;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: i32;
    let mut _23: i32;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&[i32; 1], &&[i32]);
    let mut _29: &[i32; 1];
    let mut _30: &&[i32];
    let mut _33: bool;
    let mut _34: bool;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: (&[i32; 1], &&[i32]);
    let mut _43: &[i32; 1];
    let mut _44: &&[i32];
    let mut _47: bool;
    let mut _48: bool;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: (&i32, &i32);
    let mut _53: &i32;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: i32;
    let mut _59: i32;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&i32, &i32);
    let mut _64: &i32;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: i32;
    let mut _70: i32;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: (&i32, &i32);
    let mut _78: &i32;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: i32;
    let mut _84: i32;
    let _86: !;
    let mut _87: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _89: (&[i32; 1], &&[i32]);
    let mut _90: &[i32; 1];
    let mut _91: &&[i32];
    let mut _94: bool;
    let mut _95: bool;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&i32, &i32);
    let mut _100: &i32;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: i32;
    let mut _106: i32;
    let _108: !;
    let mut _109: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: (&i32, &i32);
    let mut _114: &i32;
    let mut _117: bool;
    let mut _118: bool;
    let mut _119: i32;
    let mut _120: i32;
    let _122: !;
    let mut _123: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _124: (&i32, &i32);
    let mut _125: &i32;
    let mut _128: bool;
    let mut _129: bool;
    let mut _130: i32;
    let mut _131: i32;
    let _133: !;
    let mut _134: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _135: (&i32, &i32);
    let mut _136: &i32;
    let mut _139: bool;
    let mut _140: bool;
    let mut _141: i32;
    let mut _142: i32;
    let _144: !;
    let mut _145: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        let _3: i32;
        let _4: [i32; 1];
        let _38: [i32; 1];
        let _39: i32;
        let _40: i32;
        let _74: i32;
        let _75: [i32; 1];
        let _76: i32;
        let _110: i32;
        let _111: i32;
        let _112: i32;
        scope 2 {
            debug a => _2;
            debug b => _3;
            debug c => _4;
            let _7: &i32;
            let _8: &i32;
            let _18: &i32;
            let _19: &i32;
            let _27: &[i32];
            let mut _155: &[i32; 1];
            let mut _156: &i32;
            let mut _157: &i32;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                debug left_val => _18;
                debug right_val => _19;
                let _24: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _24;
                }
            }
            scope 7 {
                debug expected => _27;
                let _31: &[i32; 1];
                let _32: &&[i32];
                scope 8 {
                    debug left_val => _31;
                    debug right_val => _32;
                    let _35: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _35;
                    }
                }
            }
        }
        scope 10 {
            debug a => _38;
            debug b => _39;
            debug c => _40;
            let _41: &[i32];
            let mut _154: &[i32; 1];
            scope 11 {
                debug expected => _41;
                let _45: &[i32; 1];
                let _46: &&[i32];
                let _54: &i32;
                let _55: &i32;
                let _65: &i32;
                let _66: &i32;
                let mut _152: &i32;
                let mut _153: &i32;
                scope 12 {
                    debug left_val => _45;
                    debug right_val => _46;
                    let _49: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _49;
                    }
                }
                scope 14 {
                    debug left_val => _54;
                    debug right_val => _55;
                    let _60: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _60;
                    }
                }
                scope 16 {
                    debug left_val => _65;
                    debug right_val => _66;
                    let _71: core::panicking::AssertKind;
                    scope 17 {
                        debug kind => _71;
                    }
                }
            }
        }
        scope 18 {
            debug a => _74;
            debug b => _75;
            debug c => _76;
            let _79: &i32;
            let _80: &i32;
            let _88: &[i32];
            let mut _150: &[i32; 1];
            let mut _151: &i32;
            scope 19 {
                debug left_val => _79;
                debug right_val => _80;
                let _85: core::panicking::AssertKind;
                scope 20 {
                    debug kind => _85;
                }
            }
            scope 21 {
                debug expected => _88;
                let _92: &[i32; 1];
                let _93: &&[i32];
                let _101: &i32;
                let _102: &i32;
                let mut _149: &i32;
                scope 22 {
                    debug left_val => _92;
                    debug right_val => _93;
                    let _96: core::panicking::AssertKind;
                    scope 23 {
                        debug kind => _96;
                    }
                }
                scope 24 {
                    debug left_val => _101;
                    debug right_val => _102;
                    let _107: core::panicking::AssertKind;
                    scope 25 {
                        debug kind => _107;
                    }
                }
            }
        }
        scope 26 {
            debug a => _110;
            debug b => _111;
            debug c => _112;
            let _115: &i32;
            let _116: &i32;
            let _126: &i32;
            let _127: &i32;
            let _137: &i32;
            let _138: &i32;
            let mut _146: &i32;
            let mut _147: &i32;
            let mut _148: &i32;
            scope 27 {
                debug left_val => _115;
                debug right_val => _116;
                let _121: core::panicking::AssertKind;
                scope 28 {
                    debug kind => _121;
                }
            }
            scope 29 {
                debug left_val => _126;
                debug right_val => _127;
                let _132: core::panicking::AssertKind;
                scope 30 {
                    debug kind => _132;
                }
            }
            scope 31 {
                debug left_val => _137;
                debug right_val => _138;
                let _143: core::panicking::AssertKind;
                scope 32 {
                    debug kind => _143;
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _2 = _1[0 of 3];
        _3 = _1[1 of 3];
        _4 = _1[2..3];
        _6 = &_2;
        _157 = const _;
        _5 = (move _6, _157);
        _7 = (_5.0: &i32);
        _8 = (_5.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb2: {
        _17 = &_3;
        _156 = const _;
        _16 = (move _17, _156);
        _18 = (_16.0: &i32);
        _19 = (_16.1: &i32);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<i32, i32>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb4: {
        _155 = const _;
        _27 = _155 as &[i32] (Pointer(Unsize));
        _29 = &_4;
        _30 = &_27;
        _28 = (move _29, move _30);
        _31 = (_28.0: &[i32; 1]);
        _32 = (_28.1: &&[i32]);
        _34 = <[i32; 1] as PartialEq<&[i32]>>::eq(_31, _32) -> [return: bb5, unwind continue];
    }

    bb5: {
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<[i32; 1], &[i32]>(move _35, _31, _32, move _37) -> unwind continue;
    }

    bb7: {
        _38 = _1[0..1];
        _40 = _1[2 of 3];
        _39 = _1[1 of 3];
        _154 = const _;
        _41 = _154 as &[i32] (Pointer(Unsize));
        _43 = &_38;
        _44 = &_41;
        _42 = (move _43, move _44);
        _45 = (_42.0: &[i32; 1]);
        _46 = (_42.1: &&[i32]);
        _48 = <[i32; 1] as PartialEq<&[i32]>>::eq(_45, _46) -> [return: bb8, unwind continue];
    }

    bb8: {
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<[i32; 1], &[i32]>(move _49, _45, _46, move _51) -> unwind continue;
    }

    bb10: {
        _53 = &_39;
        _153 = const _;
        _52 = (move _53, _153);
        _54 = (_52.0: &i32);
        _55 = (_52.1: &i32);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<i32, i32>(move _60, _54, _55, move _62) -> unwind continue;
    }

    bb12: {
        _64 = &_40;
        _152 = const _;
        _63 = (move _64, _152);
        _65 = (_63.0: &i32);
        _66 = (_63.1: &i32);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<i32, i32>(move _71, _65, _66, move _73) -> unwind continue;
    }

    bb14: {
        _74 = _1[0 of 3];
        _75 = _1[1..2];
        _76 = _1[2 of 3];
        _78 = &_74;
        _151 = const _;
        _77 = (move _78, _151);
        _79 = (_77.0: &i32);
        _80 = (_77.1: &i32);
        _83 = (*_79);
        _84 = (*_80);
        _82 = Eq(move _83, move _84);
        _81 = Not(move _82);
        switchInt(move _81) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _85 = core::panicking::AssertKind::Eq;
        _87 = Option::<Arguments<'_>>::None;
        _86 = core::panicking::assert_failed::<i32, i32>(move _85, _79, _80, move _87) -> unwind continue;
    }

    bb16: {
        _150 = const _;
        _88 = _150 as &[i32] (Pointer(Unsize));
        _90 = &_75;
        _91 = &_88;
        _89 = (move _90, move _91);
        _92 = (_89.0: &[i32; 1]);
        _93 = (_89.1: &&[i32]);
        _95 = <[i32; 1] as PartialEq<&[i32]>>::eq(_92, _93) -> [return: bb17, unwind continue];
    }

    bb17: {
        _94 = Not(move _95);
        switchInt(move _94) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<[i32; 1], &[i32]>(move _96, _92, _93, move _98) -> unwind continue;
    }

    bb19: {
        _100 = &_76;
        _149 = const _;
        _99 = (move _100, _149);
        _101 = (_99.0: &i32);
        _102 = (_99.1: &i32);
        _105 = (*_101);
        _106 = (*_102);
        _104 = Eq(move _105, move _106);
        _103 = Not(move _104);
        switchInt(move _103) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _107 = core::panicking::AssertKind::Eq;
        _109 = Option::<Arguments<'_>>::None;
        _108 = core::panicking::assert_failed::<i32, i32>(move _107, _101, _102, move _109) -> unwind continue;
    }

    bb21: {
        _110 = _1[0 of 3];
        _111 = _1[1 of 3];
        _112 = _1[2 of 3];
        _114 = &_110;
        _148 = const _;
        _113 = (move _114, _148);
        _115 = (_113.0: &i32);
        _116 = (_113.1: &i32);
        _119 = (*_115);
        _120 = (*_116);
        _118 = Eq(move _119, move _120);
        _117 = Not(move _118);
        switchInt(move _117) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _121 = core::panicking::AssertKind::Eq;
        _123 = Option::<Arguments<'_>>::None;
        _122 = core::panicking::assert_failed::<i32, i32>(move _121, _115, _116, move _123) -> unwind continue;
    }

    bb23: {
        _125 = &_111;
        _147 = const _;
        _124 = (move _125, _147);
        _126 = (_124.0: &i32);
        _127 = (_124.1: &i32);
        _130 = (*_126);
        _131 = (*_127);
        _129 = Eq(move _130, move _131);
        _128 = Not(move _129);
        switchInt(move _128) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _132 = core::panicking::AssertKind::Eq;
        _134 = Option::<Arguments<'_>>::None;
        _133 = core::panicking::assert_failed::<i32, i32>(move _132, _126, _127, move _134) -> unwind continue;
    }

    bb25: {
        _136 = &_112;
        _146 = const _;
        _135 = (move _136, _146);
        _137 = (_135.0: &i32);
        _138 = (_135.1: &i32);
        _141 = (*_137);
        _142 = (*_138);
        _140 = Eq(move _141, move _142);
        _139 = Not(move _140);
        switchInt(move _139) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _143 = core::panicking::AssertKind::Eq;
        _145 = Option::<Arguments<'_>>::None;
        _144 = core::panicking::assert_failed::<i32, i32>(move _143, _137, _138, move _145) -> unwind continue;
    }

    bb27: {
        return;
    }
}

promoted[0] in b: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in b: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in b: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in b: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in b: &[i32; 1] = {
    let mut _0: &[i32; 1];
    let mut _1: [i32; 1];

    bb0: {
        _1 = [const 2_i32];
        _0 = &_1;
        return;
    }
}

promoted[5] in b: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in b: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in b: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[8] in b: &[i32; 1] = {
    let mut _0: &[i32; 1];
    let mut _1: [i32; 1];

    bb0: {
        _1 = [const 1_i32];
        _0 = &_1;
        return;
    }
}

promoted[9] in b: &[i32; 1] = {
    let mut _0: &[i32; 1];
    let mut _1: [i32; 1];

    bb0: {
        _1 = [const 3_i32];
        _0 = &_1;
        return;
    }
}

promoted[10] in b: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[11] in b: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

fn b_slice() -> () {
    let mut _0: ();
    let _1: &[i32];
    let mut _2: usize;
    let mut _3: usize;
    let mut _4: bool;
    let mut _8: (&i32, &i32);
    let mut _9: &i32;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: i32;
    let mut _15: i32;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&i32, &i32);
    let mut _20: &i32;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: i32;
    let mut _26: i32;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&&[i32], &&[i32]);
    let mut _32: &&[i32];
    let mut _33: &&[i32];
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: !;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    let mut _49: (&&[i32], &&[i32]);
    let mut _50: &&[i32];
    let mut _51: &&[i32];
    let mut _54: bool;
    let mut _55: bool;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: (&i32, &i32);
    let mut _60: &i32;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: i32;
    let mut _66: i32;
    let _68: !;
    let mut _69: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _70: (&i32, &i32);
    let mut _71: &i32;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: i32;
    let mut _77: i32;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: !;
    let mut _82: usize;
    let mut _83: usize;
    let mut _84: bool;
    let mut _88: (&i32, &i32);
    let mut _89: &i32;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: i32;
    let mut _95: i32;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _100: (&&[i32], &&[i32]);
    let mut _101: &&[i32];
    let mut _102: &&[i32];
    let mut _105: bool;
    let mut _106: bool;
    let _108: !;
    let mut _109: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _110: (&i32, &i32);
    let mut _111: &i32;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: i32;
    let mut _117: i32;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: !;
    let mut _122: usize;
    let mut _123: usize;
    let mut _124: bool;
    let mut _128: (&i32, &i32);
    let mut _129: &i32;
    let mut _132: bool;
    let mut _133: bool;
    let mut _134: i32;
    let mut _135: i32;
    let _137: !;
    let mut _138: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _139: (&i32, &i32);
    let mut _140: &i32;
    let mut _143: bool;
    let mut _144: bool;
    let mut _145: i32;
    let mut _146: i32;
    let _148: !;
    let mut _149: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _150: (&i32, &i32);
    let mut _151: &i32;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: i32;
    let mut _157: i32;
    let _159: !;
    let mut _160: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _161: !;
    let mut _174: &[i32; 3];
    scope 1 {
        debug x => _1;
        let _5: i32;
        let _6: i32;
        let _7: &[i32];
        let _45: &[i32];
        let _46: i32;
        let _47: i32;
        let _85: i32;
        let _86: &[i32];
        let _87: i32;
        let _125: i32;
        let _126: i32;
        let _127: i32;
        scope 2 {
            debug a => _5;
            debug b => _6;
            debug c => _7;
            let _10: &i32;
            let _11: &i32;
            let _21: &i32;
            let _22: &i32;
            let _30: &[i32];
            let mut _171: &[i32; 1];
            let mut _172: &i32;
            let mut _173: &i32;
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
            scope 5 {
                debug left_val => _21;
                debug right_val => _22;
                let _27: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _27;
                }
            }
            scope 7 {
                debug expected => _30;
                let _34: &&[i32];
                let _35: &&[i32];
                scope 8 {
                    debug left_val => _34;
                    debug right_val => _35;
                    let _38: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _38;
                    }
                }
            }
        }
        scope 10 {
            debug a => _45;
            debug b => _46;
            debug c => _47;
            let _48: &[i32];
            let mut _170: &[i32; 1];
            scope 11 {
                debug expected => _48;
                let _52: &&[i32];
                let _53: &&[i32];
                let _61: &i32;
                let _62: &i32;
                let _72: &i32;
                let _73: &i32;
                let mut _168: &i32;
                let mut _169: &i32;
                scope 12 {
                    debug left_val => _52;
                    debug right_val => _53;
                    let _56: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _56;
                    }
                }
                scope 14 {
                    debug left_val => _61;
                    debug right_val => _62;
                    let _67: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _67;
                    }
                }
                scope 16 {
                    debug left_val => _72;
                    debug right_val => _73;
                    let _78: core::panicking::AssertKind;
                    scope 17 {
                        debug kind => _78;
                    }
                }
            }
        }
        scope 18 {
            debug a => _85;
            debug b => _86;
            debug c => _87;
            let _90: &i32;
            let _91: &i32;
            let _99: &[i32];
            let mut _166: &[i32; 1];
            let mut _167: &i32;
            scope 19 {
                debug left_val => _90;
                debug right_val => _91;
                let _96: core::panicking::AssertKind;
                scope 20 {
                    debug kind => _96;
                }
            }
            scope 21 {
                debug expected => _99;
                let _103: &&[i32];
                let _104: &&[i32];
                let _112: &i32;
                let _113: &i32;
                let mut _165: &i32;
                scope 22 {
                    debug left_val => _103;
                    debug right_val => _104;
                    let _107: core::panicking::AssertKind;
                    scope 23 {
                        debug kind => _107;
                    }
                }
                scope 24 {
                    debug left_val => _112;
                    debug right_val => _113;
                    let _118: core::panicking::AssertKind;
                    scope 25 {
                        debug kind => _118;
                    }
                }
            }
        }
        scope 26 {
            debug a => _125;
            debug b => _126;
            debug c => _127;
            let _130: &i32;
            let _131: &i32;
            let _141: &i32;
            let _142: &i32;
            let _152: &i32;
            let _153: &i32;
            let mut _162: &i32;
            let mut _163: &i32;
            let mut _164: &i32;
            scope 27 {
                debug left_val => _130;
                debug right_val => _131;
                let _136: core::panicking::AssertKind;
                scope 28 {
                    debug kind => _136;
                }
            }
            scope 29 {
                debug left_val => _141;
                debug right_val => _142;
                let _147: core::panicking::AssertKind;
                scope 30 {
                    debug kind => _147;
                }
            }
            scope 31 {
                debug left_val => _152;
                debug right_val => _153;
                let _158: core::panicking::AssertKind;
                scope 32 {
                    debug kind => _158;
                }
            }
        }
    }

    bb0: {
        _174 = const _;
        _1 = _174 as &[i32] (Pointer(Unsize));
        _2 = Len((*_1));
        _3 = const 2_usize;
        _4 = Ge(move _2, move _3);
        switchInt(move _4) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _41 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb2: {
        _5 = (*_1)[0 of 2];
        _6 = (*_1)[1 of 2];
        _7 = &(*_1)[2:];
        _9 = &_5;
        _173 = const _;
        _8 = (move _9, _173);
        _10 = (_8.0: &i32);
        _11 = (_8.1: &i32);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<i32, i32>(move _16, _10, _11, move _18) -> unwind continue;
    }

    bb4: {
        _20 = &_6;
        _172 = const _;
        _19 = (move _20, _172);
        _21 = (_19.0: &i32);
        _22 = (_19.1: &i32);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<i32, i32>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb6: {
        _171 = const _;
        _30 = _171 as &[i32] (Pointer(Unsize));
        _32 = &_7;
        _33 = &_30;
        _31 = (move _32, move _33);
        _34 = (_31.0: &&[i32]);
        _35 = (_31.1: &&[i32]);
        _37 = <&[i32] as PartialEq>::eq(_34, _35) -> [return: bb7, unwind continue];
    }

    bb7: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<&[i32], &[i32]>(move _38, _34, _35, move _40) -> unwind continue;
    }

    bb9: {
        _42 = Len((*_1));
        _43 = const 2_usize;
        _44 = Ge(move _42, move _43);
        switchInt(move _44) -> [0: bb10, otherwise: bb11];
    }

    bb10: {
        _81 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb11: {
        _45 = &(*_1)[:-2];
        _47 = (*_1)[-1 of 2];
        _46 = (*_1)[-2 of 2];
        _170 = const _;
        _48 = _170 as &[i32] (Pointer(Unsize));
        _50 = &_45;
        _51 = &_48;
        _49 = (move _50, move _51);
        _52 = (_49.0: &&[i32]);
        _53 = (_49.1: &&[i32]);
        _55 = <&[i32] as PartialEq>::eq(_52, _53) -> [return: bb12, unwind continue];
    }

    bb12: {
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<&[i32], &[i32]>(move _56, _52, _53, move _58) -> unwind continue;
    }

    bb14: {
        _60 = &_46;
        _169 = const _;
        _59 = (move _60, _169);
        _61 = (_59.0: &i32);
        _62 = (_59.1: &i32);
        _65 = (*_61);
        _66 = (*_62);
        _64 = Eq(move _65, move _66);
        _63 = Not(move _64);
        switchInt(move _63) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _67 = core::panicking::AssertKind::Eq;
        _69 = Option::<Arguments<'_>>::None;
        _68 = core::panicking::assert_failed::<i32, i32>(move _67, _61, _62, move _69) -> unwind continue;
    }

    bb16: {
        _71 = &_47;
        _168 = const _;
        _70 = (move _71, _168);
        _72 = (_70.0: &i32);
        _73 = (_70.1: &i32);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<i32, i32>(move _78, _72, _73, move _80) -> unwind continue;
    }

    bb18: {
        _82 = Len((*_1));
        _83 = const 2_usize;
        _84 = Ge(move _82, move _83);
        switchInt(move _84) -> [0: bb19, otherwise: bb20];
    }

    bb19: {
        _121 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb20: {
        _85 = (*_1)[0 of 2];
        _86 = &(*_1)[1:-1];
        _87 = (*_1)[-1 of 2];
        _89 = &_85;
        _167 = const _;
        _88 = (move _89, _167);
        _90 = (_88.0: &i32);
        _91 = (_88.1: &i32);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<i32, i32>(move _96, _90, _91, move _98) -> unwind continue;
    }

    bb22: {
        _166 = const _;
        _99 = _166 as &[i32] (Pointer(Unsize));
        _101 = &_86;
        _102 = &_99;
        _100 = (move _101, move _102);
        _103 = (_100.0: &&[i32]);
        _104 = (_100.1: &&[i32]);
        _106 = <&[i32] as PartialEq>::eq(_103, _104) -> [return: bb23, unwind continue];
    }

    bb23: {
        _105 = Not(move _106);
        switchInt(move _105) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _107 = core::panicking::AssertKind::Eq;
        _109 = Option::<Arguments<'_>>::None;
        _108 = core::panicking::assert_failed::<&[i32], &[i32]>(move _107, _103, _104, move _109) -> unwind continue;
    }

    bb25: {
        _111 = &_87;
        _165 = const _;
        _110 = (move _111, _165);
        _112 = (_110.0: &i32);
        _113 = (_110.1: &i32);
        _116 = (*_112);
        _117 = (*_113);
        _115 = Eq(move _116, move _117);
        _114 = Not(move _115);
        switchInt(move _114) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<i32, i32>(move _118, _112, _113, move _120) -> unwind continue;
    }

    bb27: {
        _122 = Len((*_1));
        _123 = const 3_usize;
        _124 = Eq(move _122, move _123);
        switchInt(move _124) -> [0: bb28, otherwise: bb29];
    }

    bb28: {
        _161 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb29: {
        _125 = (*_1)[0 of 3];
        _126 = (*_1)[1 of 3];
        _127 = (*_1)[2 of 3];
        _129 = &_125;
        _164 = const _;
        _128 = (move _129, _164);
        _130 = (_128.0: &i32);
        _131 = (_128.1: &i32);
        _134 = (*_130);
        _135 = (*_131);
        _133 = Eq(move _134, move _135);
        _132 = Not(move _133);
        switchInt(move _132) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _136 = core::panicking::AssertKind::Eq;
        _138 = Option::<Arguments<'_>>::None;
        _137 = core::panicking::assert_failed::<i32, i32>(move _136, _130, _131, move _138) -> unwind continue;
    }

    bb31: {
        _140 = &_126;
        _163 = const _;
        _139 = (move _140, _163);
        _141 = (_139.0: &i32);
        _142 = (_139.1: &i32);
        _145 = (*_141);
        _146 = (*_142);
        _144 = Eq(move _145, move _146);
        _143 = Not(move _144);
        switchInt(move _143) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _147 = core::panicking::AssertKind::Eq;
        _149 = Option::<Arguments<'_>>::None;
        _148 = core::panicking::assert_failed::<i32, i32>(move _147, _141, _142, move _149) -> unwind continue;
    }

    bb33: {
        _151 = &_127;
        _162 = const _;
        _150 = (move _151, _162);
        _152 = (_150.0: &i32);
        _153 = (_150.1: &i32);
        _156 = (*_152);
        _157 = (*_153);
        _155 = Eq(move _156, move _157);
        _154 = Not(move _155);
        switchInt(move _154) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _158 = core::panicking::AssertKind::Eq;
        _160 = Option::<Arguments<'_>>::None;
        _159 = core::panicking::assert_failed::<i32, i32>(move _158, _152, _153, move _160) -> unwind continue;
    }

    bb35: {
        return;
    }
}

promoted[0] in b_slice: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in b_slice: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in b_slice: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in b_slice: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in b_slice: &[i32; 1] = {
    let mut _0: &[i32; 1];
    let mut _1: [i32; 1];

    bb0: {
        _1 = [const 2_i32];
        _0 = &_1;
        return;
    }
}

promoted[5] in b_slice: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in b_slice: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in b_slice: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[8] in b_slice: &[i32; 1] = {
    let mut _0: &[i32; 1];
    let mut _1: [i32; 1];

    bb0: {
        _1 = [const 1_i32];
        _0 = &_1;
        return;
    }
}

promoted[9] in b_slice: &[i32; 1] = {
    let mut _0: &[i32; 1];
    let mut _1: [i32; 1];

    bb0: {
        _1 = [const 3_i32];
        _0 = &_1;
        return;
    }
}

promoted[10] in b_slice: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[11] in b_slice: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[12] in b_slice: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}

fn c() -> () {
    let mut _0: ();
    let _1: [i32; 1];
    let mut _2: !;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _1 = [const 1_i32];
        switchInt(_1[0 of 1]) -> [2: bb2, otherwise: bb1];
    }

    bb1: {
        return;
    }

    bb2: {
        _2 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }
}

fn d() -> () {
    let mut _0: ();
    let _1: [i32; 3];
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: i32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug branch => _2;
            let _5: &i32;
            let _6: &i32;
            let mut _14: &i32;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        switchInt(_1[0 of 3]) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        switchInt(_1[1 of 3]) -> [1: bb4, 2: bb2, otherwise: bb3];
    }

    bb2: {
        switchInt(_1[2 of 3]) -> [3: bb5, otherwise: bb6];
    }

    bb3: {
        _2 = const 3_i32;
        goto -> bb7;
    }

    bb4: {
        _2 = const 0_i32;
        goto -> bb7;
    }

    bb5: {
        _2 = const 1_i32;
        goto -> bb7;
    }

    bb6: {
        _2 = const 2_i32;
        goto -> bb7;
    }

    bb7: {
        _4 = &_2;
        _14 = const _;
        _3 = (move _4, _14);
        _5 = (_3.0: &i32);
        _6 = (_3.1: &i32);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<i32, i32>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb9: {
        return;
    }
}

promoted[0] in d: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

fn e() -> () {
    let mut _0: ();
    let _1: &[isize];
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: (&i32, &i32);
    let mut _7: &i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: bool;
    let mut _27: (&i32, &i32);
    let mut _28: &i32;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: i32;
    let mut _34: i32;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: usize;
    let mut _40: usize;
    let mut _41: bool;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    let mut _45: usize;
    let mut _46: usize;
    let mut _47: bool;
    let mut _48: (&i32, &i32);
    let mut _49: &i32;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: i32;
    let mut _55: i32;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: &[isize; 3];
    scope 1 {
        debug x => _1;
        let _2: i32;
        scope 2 {
            debug a => _2;
            let _8: &i32;
            let _9: &i32;
            let _17: i32;
            let mut _61: &i32;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
            scope 5 {
                debug b => _17;
                let _29: &i32;
                let _30: &i32;
                let _38: i32;
                let mut _60: &i32;
                scope 6 {
                    debug left_val => _29;
                    debug right_val => _30;
                    let _35: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _35;
                    }
                }
                scope 8 {
                    debug c => _38;
                    let _50: &i32;
                    let _51: &i32;
                    let mut _59: &i32;
                    scope 9 {
                        debug left_val => _50;
                        debug right_val => _51;
                        let _56: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _56;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _62 = const _;
        _1 = _62 as &[isize] (Pointer(Unsize));
        _3 = Len((*_1));
        _4 = const 2_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        switchInt((*_1)[0 of 2]) -> [1: bb2, otherwise: bb3];
    }

    bb2: {
        switchInt((*_1)[1 of 2]) -> [2: bb4, otherwise: bb3];
    }

    bb3: {
        _2 = const 1_i32;
        goto -> bb5;
    }

    bb4: {
        _2 = const 0_i32;
        goto -> bb5;
    }

    bb5: {
        _7 = &_2;
        _61 = const _;
        _6 = (move _7, _61);
        _8 = (_6.0: &i32);
        _9 = (_6.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb7: {
        _24 = Len((*_1));
        _25 = const 1_usize;
        _26 = Ge(move _24, move _25);
        switchInt(move _26) -> [0: bb12, otherwise: bb8];
    }

    bb8: {
        switchInt((*_1)[0 of 1]) -> [2: bb14, otherwise: bb9];
    }

    bb9: {
        _21 = Len((*_1));
        _22 = const 2_usize;
        _23 = Ge(move _21, move _22);
        switchInt(move _23) -> [0: bb13, otherwise: bb10];
    }

    bb10: {
        switchInt((*_1)[0 of 2]) -> [1: bb11, otherwise: bb12];
    }

    bb11: {
        switchInt((*_1)[1 of 2]) -> [2: bb15, otherwise: bb12];
    }

    bb12: {
        _17 = const 3_i32;
        goto -> bb17;
    }

    bb13: {
        _18 = Len((*_1));
        _19 = const 1_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb12, otherwise: bb16];
    }

    bb14: {
        _17 = const 0_i32;
        goto -> bb17;
    }

    bb15: {
        _17 = const 1_i32;
        goto -> bb17;
    }

    bb16: {
        _17 = const 2_i32;
        goto -> bb17;
    }

    bb17: {
        _28 = &_17;
        _60 = const _;
        _27 = (move _28, _60);
        _29 = (_27.0: &i32);
        _30 = (_27.1: &i32);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<i32, i32>(move _35, _29, _30, move _37) -> unwind continue;
    }

    bb19: {
        _45 = Len((*_1));
        _46 = const 4_usize;
        _47 = Ge(move _45, move _46);
        switchInt(move _47) -> [0: bb20, otherwise: bb25];
    }

    bb20: {
        _42 = Len((*_1));
        _43 = const 2_usize;
        _44 = Ge(move _42, move _43);
        switchInt(move _44) -> [0: bb24, otherwise: bb21];
    }

    bb21: {
        switchInt((*_1)[0 of 2]) -> [1: bb22, otherwise: bb23];
    }

    bb22: {
        switchInt((*_1)[1 of 2]) -> [2: bb26, otherwise: bb23];
    }

    bb23: {
        _38 = const 3_i32;
        goto -> bb28;
    }

    bb24: {
        _39 = Len((*_1));
        _40 = const 1_usize;
        _41 = Eq(move _39, move _40);
        switchInt(move _41) -> [0: bb23, otherwise: bb27];
    }

    bb25: {
        _38 = const 0_i32;
        goto -> bb28;
    }

    bb26: {
        _38 = const 1_i32;
        goto -> bb28;
    }

    bb27: {
        _38 = const 2_i32;
        goto -> bb28;
    }

    bb28: {
        _49 = &_38;
        _59 = const _;
        _48 = (move _49, _59);
        _50 = (_48.0: &i32);
        _51 = (_48.1: &i32);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<i32, i32>(move _56, _50, _51, move _58) -> unwind continue;
    }

    bb30: {
        return;
    }
}

promoted[0] in e: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in e: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in e: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in e: &[isize; 3] = {
    let mut _0: &[isize; 3];
    let mut _1: [isize; 3];

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();
    let _5: ();
    let _6: ();

    bb0: {
        _1 = a() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = b() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = b_slice() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = c() -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = d() -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = e() -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}
