// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_big_vec() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: &usize;
    let mut _12: &usize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }

    bb0: {
        _12 = const _;
        _11 = const _;
        _1 = (_12, _11);
        _2 = (_1.0: &usize);
        _3 = (_1.1: &usize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<usize, usize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        return;
    }
}

promoted[0] in test_big_vec: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = Shl(const 1_usize, const 32_i32);
        _0 = &_1;
        return;
    }
}

promoted[1] in test_big_vec: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<[u8; 4294967296]>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

test_big_vec::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: u32;
    let mut _2: bool;

    bb0: {
        _1 = const 32_i32 as u32 (IntToInt);
        _2 = Lt(move _1, const 64_u32);
        assert(move _2, "attempt to shift left by `{}`, which would overflow", const 32_i32) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = Shl(const 1_usize, const 32_i32);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: [isize; 4];
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&isize, &isize);
    let mut _17: &isize;
    let _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: isize;
    let mut _26: isize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&isize, &isize);
    let mut _31: &isize;
    let _32: usize;
    let mut _33: usize;
    let mut _34: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: isize;
    let mut _40: isize;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _44: (&isize, &isize);
    let mut _45: &isize;
    let _46: usize;
    let mut _47: usize;
    let mut _48: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: isize;
    let mut _54: isize;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: (&usize, &usize);
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: usize;
    let mut _64: usize;
    let _66: !;
    let mut _67: std::option::Option<std::fmt::Arguments<'_>>;
    let _68: ();
    scope 1 {
        debug x => _1;
        let _7: &isize;
        let _8: &isize;
        let _21: &isize;
        let _22: &isize;
        let _35: &isize;
        let _36: &isize;
        let _49: &isize;
        let _50: &isize;
        let _59: &usize;
        let _60: &usize;
        let mut _69: &usize;
        let mut _70: &usize;
        let mut _71: &isize;
        let mut _72: &isize;
        let mut _73: &isize;
        let mut _74: &isize;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug left_val => _21;
            debug right_val => _22;
            let _27: core::panicking::AssertKind;
            scope 5 {
                debug kind => _27;
            }
        }
        scope 6 {
            debug left_val => _35;
            debug right_val => _36;
            let _41: core::panicking::AssertKind;
            scope 7 {
                debug kind => _41;
            }
        }
        scope 8 {
            debug left_val => _49;
            debug right_val => _50;
            let _55: core::panicking::AssertKind;
            scope 9 {
                debug kind => _55;
            }
        }
        scope 10 {
            debug left_val => _59;
            debug right_val => _60;
            let _65: core::panicking::AssertKind;
            scope 11 {
                debug kind => _65;
            }
        }
    }

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize];
        _4 = const 0_usize;
        _5 = const 4_usize;
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> [success: bb1, unwind continue];
    }

    bb1: {
        _3 = &_1[_4];
        _74 = const _;
        _2 = (move _3, _74);
        _7 = (_2.0: &isize);
        _8 = (_2.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb3: {
        _18 = const 1_usize;
        _19 = const 4_usize;
        _20 = Lt(_18, _19);
        assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _18) -> [success: bb4, unwind continue];
    }

    bb4: {
        _17 = &_1[_18];
        _73 = const _;
        _16 = (move _17, _73);
        _21 = (_16.0: &isize);
        _22 = (_16.1: &isize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<isize, isize>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb6: {
        _32 = const 2_usize;
        _33 = const 4_usize;
        _34 = Lt(_32, _33);
        assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _32) -> [success: bb7, unwind continue];
    }

    bb7: {
        _31 = &_1[_32];
        _72 = const _;
        _30 = (move _31, _72);
        _35 = (_30.0: &isize);
        _36 = (_30.1: &isize);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<isize, isize>(move _41, _35, _36, move _43) -> unwind continue;
    }

    bb9: {
        _46 = const 3_usize;
        _47 = const 4_usize;
        _48 = Lt(_46, _47);
        assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> [success: bb10, unwind continue];
    }

    bb10: {
        _45 = &_1[_46];
        _71 = const _;
        _44 = (move _45, _71);
        _49 = (_44.0: &isize);
        _50 = (_44.1: &isize);
        _53 = (*_49);
        _54 = (*_50);
        _52 = Eq(move _53, move _54);
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<isize, isize>(move _55, _49, _50, move _57) -> unwind continue;
    }

    bb12: {
        _70 = const _;
        _69 = const _;
        _58 = (_70, _69);
        _59 = (_58.0: &usize);
        _60 = (_58.1: &usize);
        _63 = (*_59);
        _64 = (*_60);
        _62 = Eq(move _63, move _64);
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _65 = core::panicking::AssertKind::Eq;
        _67 = Option::<Arguments<'_>>::None;
        _66 = core::panicking::assert_failed::<usize, usize>(move _65, _59, _60, move _67) -> unwind continue;
    }

    bb14: {
        _68 = test_big_vec() -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<[u8; 4]>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 4_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}
