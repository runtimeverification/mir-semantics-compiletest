// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [isize; 3];
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&isize, &isize);
    let mut _18: &isize;
    let _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&isize, &isize);
    let mut _32: &isize;
    let _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: isize;
    let mut _41: isize;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let _45: usize;
    let mut _46: usize;
    let mut _47: bool;
    let mut _48: (&isize, &isize);
    let mut _49: &isize;
    let _50: usize;
    let mut _51: usize;
    let mut _52: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: isize;
    let mut _58: isize;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: (&isize, &isize);
    let mut _63: &isize;
    let _64: usize;
    let mut _65: usize;
    let mut _66: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: isize;
    let mut _72: isize;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _76: (&isize, &isize);
    let mut _77: &isize;
    let _78: usize;
    let mut _79: usize;
    let mut _80: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: isize;
    let mut _86: isize;
    let _88: !;
    let mut _89: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: &mut [isize; 3];
    let mut _92: (&isize, &isize);
    let mut _93: &isize;
    let _94: usize;
    let mut _95: usize;
    let mut _96: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: isize;
    let mut _102: isize;
    let _104: !;
    let mut _105: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _106: (&isize, &isize);
    let mut _107: &isize;
    let _108: usize;
    let mut _109: usize;
    let mut _110: bool;
    let mut _113: bool;
    let mut _114: bool;
    let mut _115: isize;
    let mut _116: isize;
    let _118: !;
    let mut _119: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _120: (&isize, &isize);
    let mut _121: &isize;
    let _122: usize;
    let mut _123: usize;
    let mut _124: bool;
    let mut _127: bool;
    let mut _128: bool;
    let mut _129: isize;
    let mut _130: isize;
    let _132: !;
    let mut _133: std::option::Option<std::fmt::Arguments<'_>>;
    let _134: usize;
    let mut _135: usize;
    let mut _136: bool;
    let mut _137: (&isize, &isize);
    let mut _138: &isize;
    let _139: usize;
    let mut _140: usize;
    let mut _141: bool;
    let mut _144: bool;
    let mut _145: bool;
    let mut _146: isize;
    let mut _147: isize;
    let _149: !;
    let mut _150: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _151: (&isize, &isize);
    let mut _152: &isize;
    let _153: usize;
    let mut _154: usize;
    let mut _155: bool;
    let mut _158: bool;
    let mut _159: bool;
    let mut _160: isize;
    let mut _161: isize;
    let _163: !;
    let mut _164: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _165: (&isize, &isize);
    let mut _166: &isize;
    let _167: usize;
    let mut _168: usize;
    let mut _169: bool;
    let mut _172: bool;
    let mut _173: bool;
    let mut _174: isize;
    let mut _175: isize;
    let _177: !;
    let mut _178: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _191: *const [isize; 3];
    let mut _192: *const [isize; 3];
    let mut _193: *const [isize; 3];
    let mut _194: *const [isize; 3];
    let mut _195: *const [isize; 3];
    let mut _196: *const [isize; 3];
    let mut _197: *const [isize; 3];
    let mut _198: *const [isize; 3];
    let mut _199: *const [isize; 3];
    let mut _200: *const [isize; 3];
    let mut _201: *const [isize; 3];
    let mut _202: *const [isize; 3];
    let mut _203: *const [isize; 3];
    let mut _204: *const [isize; 3];
    scope 1 {
        debug x => _1;
        let mut _2: std::boxed::Box<[isize; 3]>;
        scope 2 {
            debug x => _2;
            let _8: &isize;
            let _9: &isize;
            let _22: &isize;
            let _23: &isize;
            let _36: &isize;
            let _37: &isize;
            let _53: &isize;
            let _54: &isize;
            let _67: &isize;
            let _68: &isize;
            let _81: &isize;
            let _82: &isize;
            let mut _90: [isize; 3];
            let mut _185: &isize;
            let mut _186: &isize;
            let mut _187: &isize;
            let mut _188: &isize;
            let mut _189: &isize;
            let mut _190: &isize;
            let mut _205: *const ();
            let mut _206: usize;
            let mut _207: usize;
            let mut _208: usize;
            let mut _209: usize;
            let mut _210: bool;
            let mut _211: *const ();
            let mut _212: usize;
            let mut _213: usize;
            let mut _214: usize;
            let mut _215: usize;
            let mut _216: bool;
            let mut _217: *const ();
            let mut _218: usize;
            let mut _219: usize;
            let mut _220: usize;
            let mut _221: usize;
            let mut _222: bool;
            let mut _223: *const ();
            let mut _224: usize;
            let mut _225: usize;
            let mut _226: usize;
            let mut _227: usize;
            let mut _228: bool;
            let mut _229: *const ();
            let mut _230: usize;
            let mut _231: usize;
            let mut _232: usize;
            let mut _233: usize;
            let mut _234: bool;
            let mut _235: *const ();
            let mut _236: usize;
            let mut _237: usize;
            let mut _238: usize;
            let mut _239: usize;
            let mut _240: bool;
            let mut _241: *const ();
            let mut _242: usize;
            let mut _243: usize;
            let mut _244: usize;
            let mut _245: usize;
            let mut _246: bool;
            let mut _247: *const ();
            let mut _248: usize;
            let mut _249: usize;
            let mut _250: usize;
            let mut _251: usize;
            let mut _252: bool;
            let mut _253: *const ();
            let mut _254: usize;
            let mut _255: usize;
            let mut _256: usize;
            let mut _257: usize;
            let mut _258: bool;
            let mut _259: *const ();
            let mut _260: usize;
            let mut _261: usize;
            let mut _262: usize;
            let mut _263: usize;
            let mut _264: bool;
            let mut _265: *const ();
            let mut _266: usize;
            let mut _267: usize;
            let mut _268: usize;
            let mut _269: usize;
            let mut _270: bool;
            let mut _271: *const ();
            let mut _272: usize;
            let mut _273: usize;
            let mut _274: usize;
            let mut _275: usize;
            let mut _276: bool;
            let mut _277: *const ();
            let mut _278: usize;
            let mut _279: usize;
            let mut _280: usize;
            let mut _281: usize;
            let mut _282: bool;
            let mut _283: *const ();
            let mut _284: usize;
            let mut _285: usize;
            let mut _286: usize;
            let mut _287: usize;
            let mut _288: bool;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
            scope 5 {
                debug left_val => _22;
                debug right_val => _23;
                let _28: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _28;
                }
            }
            scope 7 {
                debug left_val => _36;
                debug right_val => _37;
                let _42: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _42;
                }
            }
            scope 9 {
                debug left_val => _53;
                debug right_val => _54;
                let _59: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _59;
                }
            }
            scope 11 {
                debug left_val => _67;
                debug right_val => _68;
                let _73: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _73;
                }
            }
            scope 13 {
                debug left_val => _81;
                debug right_val => _82;
                let _87: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _87;
                }
            }
            scope 15 {
                debug x => _90;
                scope 16 {
                    debug x => _91;
                    let _97: &isize;
                    let _98: &isize;
                    let _111: &isize;
                    let _112: &isize;
                    let _125: &isize;
                    let _126: &isize;
                    let _142: &isize;
                    let _143: &isize;
                    let _156: &isize;
                    let _157: &isize;
                    let _170: &isize;
                    let _171: &isize;
                    let mut _179: &isize;
                    let mut _180: &isize;
                    let mut _181: &isize;
                    let mut _182: &isize;
                    let mut _183: &isize;
                    let mut _184: &isize;
                    scope 17 {
                        debug left_val => _97;
                        debug right_val => _98;
                        let _103: core::panicking::AssertKind;
                        scope 18 {
                            debug kind => _103;
                        }
                    }
                    scope 19 {
                        debug left_val => _111;
                        debug right_val => _112;
                        let _117: core::panicking::AssertKind;
                        scope 20 {
                            debug kind => _117;
                        }
                    }
                    scope 21 {
                        debug left_val => _125;
                        debug right_val => _126;
                        let _131: core::panicking::AssertKind;
                        scope 22 {
                            debug kind => _131;
                        }
                    }
                    scope 23 {
                        debug left_val => _142;
                        debug right_val => _143;
                        let _148: core::panicking::AssertKind;
                        scope 24 {
                            debug kind => _148;
                        }
                    }
                    scope 25 {
                        debug left_val => _156;
                        debug right_val => _157;
                        let _162: core::panicking::AssertKind;
                        scope 26 {
                            debug kind => _162;
                        }
                    }
                    scope 27 {
                        debug left_val => _170;
                        debug right_val => _171;
                        let _176: core::panicking::AssertKind;
                        scope 28 {
                            debug kind => _176;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize];
        _2 = <[isize; 3] as Into<Box<[isize; 3]>>>::into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = const 0_usize;
        _191 = (((_2.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _283 = _191 as *const () (PtrToPtr);
        _284 = _283 as usize (Transmute);
        _285 = AlignOf(isize);
        _286 = Sub(_285, const 1_usize);
        _287 = BitAnd(_284, _286);
        _288 = Eq(_287, const 0_usize);
        assert(_288, "misaligned pointer dereference: address must be a multiple of {} but is {}", _285, _284) -> [success: bb56, unwind unreachable];
    }

    bb2: {
        _192 = (((_2.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _277 = _192 as *const () (PtrToPtr);
        _278 = _277 as usize (Transmute);
        _279 = AlignOf(isize);
        _280 = Sub(_279, const 1_usize);
        _281 = BitAnd(_278, _280);
        _282 = Eq(_281, const 0_usize);
        assert(_282, "misaligned pointer dereference: address must be a multiple of {} but is {}", _279, _278) -> [success: bb55, unwind unreachable];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16) -> bb41;
    }

    bb4: {
        _19 = const 1_usize;
        _193 = (((_2.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _271 = _193 as *const () (PtrToPtr);
        _272 = _271 as usize (Transmute);
        _273 = AlignOf(isize);
        _274 = Sub(_273, const 1_usize);
        _275 = BitAnd(_272, _274);
        _276 = Eq(_275, const 0_usize);
        assert(_276, "misaligned pointer dereference: address must be a multiple of {} but is {}", _273, _272) -> [success: bb54, unwind unreachable];
    }

    bb5: {
        _194 = (((_2.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _265 = _194 as *const () (PtrToPtr);
        _266 = _265 as usize (Transmute);
        _267 = AlignOf(isize);
        _268 = Sub(_267, const 1_usize);
        _269 = BitAnd(_266, _268);
        _270 = Eq(_269, const 0_usize);
        assert(_270, "misaligned pointer dereference: address must be a multiple of {} but is {}", _267, _266) -> [success: bb53, unwind unreachable];
    }

    bb6: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<isize, isize>(move _28, _22, _23, move _30) -> bb41;
    }

    bb7: {
        _33 = const 2_usize;
        _195 = (((_2.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _259 = _195 as *const () (PtrToPtr);
        _260 = _259 as usize (Transmute);
        _261 = AlignOf(isize);
        _262 = Sub(_261, const 1_usize);
        _263 = BitAnd(_260, _262);
        _264 = Eq(_263, const 0_usize);
        assert(_264, "misaligned pointer dereference: address must be a multiple of {} but is {}", _261, _260) -> [success: bb52, unwind unreachable];
    }

    bb8: {
        _196 = (((_2.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _253 = _196 as *const () (PtrToPtr);
        _254 = _253 as usize (Transmute);
        _255 = AlignOf(isize);
        _256 = Sub(_255, const 1_usize);
        _257 = BitAnd(_254, _256);
        _258 = Eq(_257, const 0_usize);
        assert(_258, "misaligned pointer dereference: address must be a multiple of {} but is {}", _255, _254) -> [success: bb51, unwind unreachable];
    }

    bb9: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<isize, isize>(move _42, _36, _37, move _44) -> bb41;
    }

    bb10: {
        _45 = const 1_usize;
        _197 = (((_2.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _247 = _197 as *const () (PtrToPtr);
        _248 = _247 as usize (Transmute);
        _249 = AlignOf(isize);
        _250 = Sub(_249, const 1_usize);
        _251 = BitAnd(_248, _250);
        _252 = Eq(_251, const 0_usize);
        assert(_252, "misaligned pointer dereference: address must be a multiple of {} but is {}", _249, _248) -> [success: bb50, unwind unreachable];
    }

    bb11: {
        _198 = (((_2.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _241 = _198 as *const () (PtrToPtr);
        _242 = _241 as usize (Transmute);
        _243 = AlignOf(isize);
        _244 = Sub(_243, const 1_usize);
        _245 = BitAnd(_242, _244);
        _246 = Eq(_245, const 0_usize);
        assert(_246, "misaligned pointer dereference: address must be a multiple of {} but is {}", _243, _242) -> [success: bb49, unwind unreachable];
    }

    bb12: {
        _200 = (((_2.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _229 = _200 as *const () (PtrToPtr);
        _230 = _229 as usize (Transmute);
        _231 = AlignOf(isize);
        _232 = Sub(_231, const 1_usize);
        _233 = BitAnd(_230, _232);
        _234 = Eq(_233, const 0_usize);
        assert(_234, "misaligned pointer dereference: address must be a multiple of {} but is {}", _231, _230) -> [success: bb47, unwind unreachable];
    }

    bb13: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<isize, isize>(move _59, _53, _54, move _61) -> bb41;
    }

    bb14: {
        _64 = const 1_usize;
        _201 = (((_2.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _223 = _201 as *const () (PtrToPtr);
        _224 = _223 as usize (Transmute);
        _225 = AlignOf(isize);
        _226 = Sub(_225, const 1_usize);
        _227 = BitAnd(_224, _226);
        _228 = Eq(_227, const 0_usize);
        assert(_228, "misaligned pointer dereference: address must be a multiple of {} but is {}", _225, _224) -> [success: bb46, unwind unreachable];
    }

    bb15: {
        _202 = (((_2.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _217 = _202 as *const () (PtrToPtr);
        _218 = _217 as usize (Transmute);
        _219 = AlignOf(isize);
        _220 = Sub(_219, const 1_usize);
        _221 = BitAnd(_218, _220);
        _222 = Eq(_221, const 0_usize);
        assert(_222, "misaligned pointer dereference: address must be a multiple of {} but is {}", _219, _218) -> [success: bb45, unwind unreachable];
    }

    bb16: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = core::panicking::assert_failed::<isize, isize>(move _73, _67, _68, move _75) -> bb41;
    }

    bb17: {
        _78 = const 2_usize;
        _203 = (((_2.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _211 = _203 as *const () (PtrToPtr);
        _212 = _211 as usize (Transmute);
        _213 = AlignOf(isize);
        _214 = Sub(_213, const 1_usize);
        _215 = BitAnd(_212, _214);
        _216 = Eq(_215, const 0_usize);
        assert(_216, "misaligned pointer dereference: address must be a multiple of {} but is {}", _213, _212) -> [success: bb44, unwind unreachable];
    }

    bb18: {
        _204 = (((_2.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _205 = _204 as *const () (PtrToPtr);
        _206 = _205 as usize (Transmute);
        _207 = AlignOf(isize);
        _208 = Sub(_207, const 1_usize);
        _209 = BitAnd(_206, _208);
        _210 = Eq(_209, const 0_usize);
        assert(_210, "misaligned pointer dereference: address must be a multiple of {} but is {}", _207, _206) -> [success: bb43, unwind unreachable];
    }

    bb19: {
        _87 = core::panicking::AssertKind::Eq;
        _89 = Option::<Arguments<'_>>::None;
        _88 = core::panicking::assert_failed::<isize, isize>(move _87, _81, _82, move _89) -> bb41;
    }

    bb20: {
        _90 = [const 1_isize, const 2_isize, const 3_isize];
        _91 = &mut _90;
        _94 = const 0_usize;
        _95 = const 3_usize;
        _96 = Lt(_94, _95);
        assert(move _96, "index out of bounds: the length is {} but the index is {}", move _95, _94) -> [success: bb21, unwind: bb41];
    }

    bb21: {
        _93 = &(*_91)[_94];
        _184 = const _;
        _92 = (move _93, _184);
        _97 = (_92.0: &isize);
        _98 = (_92.1: &isize);
        _101 = (*_97);
        _102 = (*_98);
        _100 = Eq(move _101, move _102);
        _99 = Not(move _100);
        switchInt(move _99) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _103 = core::panicking::AssertKind::Eq;
        _105 = Option::<Arguments<'_>>::None;
        _104 = core::panicking::assert_failed::<isize, isize>(move _103, _97, _98, move _105) -> bb41;
    }

    bb23: {
        _108 = const 1_usize;
        _109 = const 3_usize;
        _110 = Lt(_108, _109);
        assert(move _110, "index out of bounds: the length is {} but the index is {}", move _109, _108) -> [success: bb24, unwind: bb41];
    }

    bb24: {
        _107 = &(*_91)[_108];
        _183 = const _;
        _106 = (move _107, _183);
        _111 = (_106.0: &isize);
        _112 = (_106.1: &isize);
        _115 = (*_111);
        _116 = (*_112);
        _114 = Eq(move _115, move _116);
        _113 = Not(move _114);
        switchInt(move _113) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _117 = core::panicking::AssertKind::Eq;
        _119 = Option::<Arguments<'_>>::None;
        _118 = core::panicking::assert_failed::<isize, isize>(move _117, _111, _112, move _119) -> bb41;
    }

    bb26: {
        _122 = const 2_usize;
        _123 = const 3_usize;
        _124 = Lt(_122, _123);
        assert(move _124, "index out of bounds: the length is {} but the index is {}", move _123, _122) -> [success: bb27, unwind: bb41];
    }

    bb27: {
        _121 = &(*_91)[_122];
        _182 = const _;
        _120 = (move _121, _182);
        _125 = (_120.0: &isize);
        _126 = (_120.1: &isize);
        _129 = (*_125);
        _130 = (*_126);
        _128 = Eq(move _129, move _130);
        _127 = Not(move _128);
        switchInt(move _127) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _131 = core::panicking::AssertKind::Eq;
        _133 = Option::<Arguments<'_>>::None;
        _132 = core::panicking::assert_failed::<isize, isize>(move _131, _125, _126, move _133) -> bb41;
    }

    bb29: {
        _134 = const 1_usize;
        _135 = const 3_usize;
        _136 = Lt(_134, _135);
        assert(move _136, "index out of bounds: the length is {} but the index is {}", move _135, _134) -> [success: bb30, unwind: bb41];
    }

    bb30: {
        (*_91)[_134] = const 45_isize;
        _139 = const 0_usize;
        _140 = const 3_usize;
        _141 = Lt(_139, _140);
        assert(move _141, "index out of bounds: the length is {} but the index is {}", move _140, _139) -> [success: bb31, unwind: bb41];
    }

    bb31: {
        _138 = &(*_91)[_139];
        _181 = const _;
        _137 = (move _138, _181);
        _142 = (_137.0: &isize);
        _143 = (_137.1: &isize);
        _146 = (*_142);
        _147 = (*_143);
        _145 = Eq(move _146, move _147);
        _144 = Not(move _145);
        switchInt(move _144) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _148 = core::panicking::AssertKind::Eq;
        _150 = Option::<Arguments<'_>>::None;
        _149 = core::panicking::assert_failed::<isize, isize>(move _148, _142, _143, move _150) -> bb41;
    }

    bb33: {
        _153 = const 1_usize;
        _154 = const 3_usize;
        _155 = Lt(_153, _154);
        assert(move _155, "index out of bounds: the length is {} but the index is {}", move _154, _153) -> [success: bb34, unwind: bb41];
    }

    bb34: {
        _152 = &(*_91)[_153];
        _180 = const _;
        _151 = (move _152, _180);
        _156 = (_151.0: &isize);
        _157 = (_151.1: &isize);
        _160 = (*_156);
        _161 = (*_157);
        _159 = Eq(move _160, move _161);
        _158 = Not(move _159);
        switchInt(move _158) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _162 = core::panicking::AssertKind::Eq;
        _164 = Option::<Arguments<'_>>::None;
        _163 = core::panicking::assert_failed::<isize, isize>(move _162, _156, _157, move _164) -> bb41;
    }

    bb36: {
        _167 = const 2_usize;
        _168 = const 3_usize;
        _169 = Lt(_167, _168);
        assert(move _169, "index out of bounds: the length is {} but the index is {}", move _168, _167) -> [success: bb37, unwind: bb41];
    }

    bb37: {
        _166 = &(*_91)[_167];
        _179 = const _;
        _165 = (move _166, _179);
        _170 = (_165.0: &isize);
        _171 = (_165.1: &isize);
        _174 = (*_170);
        _175 = (*_171);
        _173 = Eq(move _174, move _175);
        _172 = Not(move _173);
        switchInt(move _172) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _176 = core::panicking::AssertKind::Eq;
        _178 = Option::<Arguments<'_>>::None;
        _177 = core::panicking::assert_failed::<isize, isize>(move _176, _170, _171, move _178) -> bb41;
    }

    bb39: {
        drop(_2) -> [return: bb40, unwind continue];
    }

    bb40: {
        return;
    }

    bb41 (cleanup): {
        drop(_2) -> [return: bb42, unwind terminate];
    }

    bb42 (cleanup): {
        resume;
    }

    bb43: {
        _77 = &(*_204)[_78];
        _185 = const _;
        _76 = (move _77, _185);
        _81 = (_76.0: &isize);
        _82 = (_76.1: &isize);
        _85 = (*_81);
        _86 = (*_82);
        _84 = Eq(move _85, move _86);
        _83 = Not(move _84);
        switchInt(move _83) -> [0: bb20, otherwise: bb19];
    }

    bb44: {
        _79 = const 3_usize;
        _80 = Lt(_78, _79);
        assert(move _80, "index out of bounds: the length is {} but the index is {}", move _79, _78) -> [success: bb18, unwind: bb41];
    }

    bb45: {
        _63 = &(*_202)[_64];
        _186 = const _;
        _62 = (move _63, _186);
        _67 = (_62.0: &isize);
        _68 = (_62.1: &isize);
        _71 = (*_67);
        _72 = (*_68);
        _70 = Eq(move _71, move _72);
        _69 = Not(move _70);
        switchInt(move _69) -> [0: bb17, otherwise: bb16];
    }

    bb46: {
        _65 = const 3_usize;
        _66 = Lt(_64, _65);
        assert(move _66, "index out of bounds: the length is {} but the index is {}", move _65, _64) -> [success: bb15, unwind: bb41];
    }

    bb47: {
        _49 = &(*_200)[_50];
        _187 = const _;
        _48 = (move _49, _187);
        _53 = (_48.0: &isize);
        _54 = (_48.1: &isize);
        _57 = (*_53);
        _58 = (*_54);
        _56 = Eq(move _57, move _58);
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb14, otherwise: bb13];
    }

    bb48: {
        _51 = const 3_usize;
        _52 = Lt(_50, _51);
        assert(move _52, "index out of bounds: the length is {} but the index is {}", move _51, _50) -> [success: bb12, unwind: bb41];
    }

    bb49: {
        (*_198)[_45] = const 45_isize;
        _50 = const 0_usize;
        _199 = (((_2.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _235 = _199 as *const () (PtrToPtr);
        _236 = _235 as usize (Transmute);
        _237 = AlignOf(isize);
        _238 = Sub(_237, const 1_usize);
        _239 = BitAnd(_236, _238);
        _240 = Eq(_239, const 0_usize);
        assert(_240, "misaligned pointer dereference: address must be a multiple of {} but is {}", _237, _236) -> [success: bb48, unwind unreachable];
    }

    bb50: {
        _46 = const 3_usize;
        _47 = Lt(_45, _46);
        assert(move _47, "index out of bounds: the length is {} but the index is {}", move _46, _45) -> [success: bb11, unwind: bb41];
    }

    bb51: {
        _32 = &(*_196)[_33];
        _188 = const _;
        _31 = (move _32, _188);
        _36 = (_31.0: &isize);
        _37 = (_31.1: &isize);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb10, otherwise: bb9];
    }

    bb52: {
        _34 = const 3_usize;
        _35 = Lt(_33, _34);
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> [success: bb8, unwind: bb41];
    }

    bb53: {
        _18 = &(*_194)[_19];
        _189 = const _;
        _17 = (move _18, _189);
        _22 = (_17.0: &isize);
        _23 = (_17.1: &isize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb7, otherwise: bb6];
    }

    bb54: {
        _20 = const 3_usize;
        _21 = Lt(_19, _20);
        assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> [success: bb5, unwind: bb41];
    }

    bb55: {
        _4 = &(*_192)[_5];
        _190 = const _;
        _3 = (move _4, _190);
        _8 = (_3.0: &isize);
        _9 = (_3.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb56: {
        _6 = const 3_usize;
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb2, unwind: bb41];
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 45_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 45_isize;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
