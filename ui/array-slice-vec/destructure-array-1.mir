// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/array-slice-vec/destructure-array-1.rs:8:1: 8:16>::drop(_1: &mut D) -> () {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:8:27: 8:36
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/destructure-array-1.rs:8:38: 8:38

    bb0: {
        return;                          // scope 0 at ui/array-slice-vec/destructure-array-1.rs:8:41: 8:41
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/destructure-array-1.rs:10:11: 10:11
    let _1: D;                           // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:13:9: 13:11
    let mut _2: [D; 4];                  // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:13:18: 13:42
    let mut _3: D;                       // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:13:19: 13:23
    let mut _4: D;                       // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:13:25: 13:29
    let mut _5: D;                       // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:13:31: 13:35
    let mut _6: D;                       // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:13:37: 13:41
    let mut _8: [D; 4];                  // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:14:18: 14:42
    let mut _9: D;                       // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:14:19: 14:23
    let mut _10: D;                      // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:14:25: 14:29
    let mut _11: D;                      // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:14:31: 14:35
    let mut _12: D;                      // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:14:37: 14:41
    let mut _13: (&u8, &u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _14: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _15: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _30: (&u8, &u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _31: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _32: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _35: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _37: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _38: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _40: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _41: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _42: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _43: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _44: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _45: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug d1 => _1;                  // in scope 1 at ui/array-slice-vec/destructure-array-1.rs:13:9: 13:11
        let _7: D;                       // in scope 1 at ui/array-slice-vec/destructure-array-1.rs:14:9: 14:11
        scope 2 {
            debug d3 => _7;              // in scope 2 at ui/array-slice-vec/destructure-array-1.rs:14:9: 14:11
            let _16: &u8;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _17: &u8;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _33: &u8;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _34: &u8;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _47: &u8;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _48: &u8;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _16;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _17;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _22: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _22;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug left_val => _33;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _34;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _39: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _39;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _3 = d(const 1_u8) -> bb1;       // scope 0 at ui/array-slice-vec/destructure-array-1.rs:13:19: 13:23
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/destructure-array-1.rs:13:19: 13:20
                                         // + literal: Const { ty: fn(u8) -> D {d}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = d(const 2_u8) -> [return: bb2, unwind: bb24]; // scope 0 at ui/array-slice-vec/destructure-array-1.rs:13:25: 13:29
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/destructure-array-1.rs:13:25: 13:26
                                         // + literal: Const { ty: fn(u8) -> D {d}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = d(const 3_u8) -> [return: bb3, unwind: bb23]; // scope 0 at ui/array-slice-vec/destructure-array-1.rs:13:31: 13:35
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/destructure-array-1.rs:13:31: 13:32
                                         // + literal: Const { ty: fn(u8) -> D {d}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = d(const 4_u8) -> [return: bb4, unwind: bb22]; // scope 0 at ui/array-slice-vec/destructure-array-1.rs:13:37: 13:41
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/destructure-array-1.rs:13:37: 13:38
                                         // + literal: Const { ty: fn(u8) -> D {d}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/destructure-array-1.rs:13:18: 13:42
        _1 = foo(move _2, const 1_usize) -> bb5; // scope 0 at ui/array-slice-vec/destructure-array-1.rs:13:14: 13:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/destructure-array-1.rs:13:14: 13:17
                                         // + literal: Const { ty: fn([D; 4], usize) -> D {foo}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = d(const 5_u8) -> [return: bb6, unwind: bb21]; // scope 1 at ui/array-slice-vec/destructure-array-1.rs:14:19: 14:23
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/destructure-array-1.rs:14:19: 14:20
                                         // + literal: Const { ty: fn(u8) -> D {d}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = d(const 6_u8) -> [return: bb7, unwind: bb20]; // scope 1 at ui/array-slice-vec/destructure-array-1.rs:14:25: 14:29
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/destructure-array-1.rs:14:25: 14:26
                                         // + literal: Const { ty: fn(u8) -> D {d}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = d(const 7_u8) -> [return: bb8, unwind: bb19]; // scope 1 at ui/array-slice-vec/destructure-array-1.rs:14:31: 14:35
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/destructure-array-1.rs:14:31: 14:32
                                         // + literal: Const { ty: fn(u8) -> D {d}, val: Value(<ZST>) }
    }

    bb8: {
        _12 = d(const 8_u8) -> [return: bb9, unwind: bb18]; // scope 1 at ui/array-slice-vec/destructure-array-1.rs:14:37: 14:41
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/destructure-array-1.rs:14:37: 14:38
                                         // + literal: Const { ty: fn(u8) -> D {d}, val: Value(<ZST>) }
    }

    bb9: {
        _8 = [move _9, move _10, move _11, move _12]; // scope 1 at ui/array-slice-vec/destructure-array-1.rs:14:18: 14:42
        _7 = foo(move _8, const 3_usize) -> [return: bb10, unwind: bb21]; // scope 1 at ui/array-slice-vec/destructure-array-1.rs:14:14: 14:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/destructure-array-1.rs:14:14: 14:17
                                         // + literal: Const { ty: fn([D; 4], usize) -> D {foo}, val: Value(<ZST>) }
    }

    bb10: {
        _14 = &(_1.0: u8);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _48 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[1])) }
        _15 = _48;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _13 = (move _14, move _15);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_13.0: &u8);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_13.1: &u8);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = (*_16);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = const 2_u8;                // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = Eq(move _20, move _21);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _18 = Not(move _19);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb12, otherwise: bb11]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _22 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<u8, u8>(move _24, move _25, move _27, move _29) -> bb17; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb12: {
        _31 = &(_7.0: u8);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _47 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[0])) }
        _32 = _47;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _30 = (move _31, move _32);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _33 = (_30.0: &u8);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _34 = (_30.1: &u8);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _37 = (*_33);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _38 = const 8_u8;                // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _36 = Eq(move _37, move _38);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _35 = Not(move _36);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _35) -> [0: bb14, otherwise: bb13]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _39 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = _33;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _43;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _34;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = _45;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _40 = core::panicking::assert_failed::<u8, u8>(move _41, move _42, move _44, move _46) -> bb17; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_7) -> [return: bb15, unwind: bb21]; // scope 1 at ui/array-slice-vec/destructure-array-1.rs:17:1: 17:2
    }

    bb15: {
        drop(_1) -> bb16;                // scope 0 at ui/array-slice-vec/destructure-array-1.rs:17:1: 17:2
    }

    bb16: {
        return;                          // scope 0 at ui/array-slice-vec/destructure-array-1.rs:17:2: 17:2
    }

    bb17 (cleanup): {
        drop(_7) -> bb21;                // scope 1 at ui/array-slice-vec/destructure-array-1.rs:17:1: 17:2
    }

    bb18 (cleanup): {
        drop(_11) -> bb19;               // scope 1 at ui/array-slice-vec/destructure-array-1.rs:14:41: 14:42
    }

    bb19 (cleanup): {
        drop(_10) -> bb20;               // scope 1 at ui/array-slice-vec/destructure-array-1.rs:14:41: 14:42
    }

    bb20 (cleanup): {
        drop(_9) -> bb21;                // scope 1 at ui/array-slice-vec/destructure-array-1.rs:14:41: 14:42
    }

    bb21 (cleanup): {
        drop(_1) -> bb25;                // scope 0 at ui/array-slice-vec/destructure-array-1.rs:17:1: 17:2
    }

    bb22 (cleanup): {
        drop(_5) -> bb23;                // scope 0 at ui/array-slice-vec/destructure-array-1.rs:13:41: 13:42
    }

    bb23 (cleanup): {
        drop(_4) -> bb24;                // scope 0 at ui/array-slice-vec/destructure-array-1.rs:13:41: 13:42
    }

    bb24 (cleanup): {
        drop(_3) -> bb25;                // scope 0 at ui/array-slice-vec/destructure-array-1.rs:13:41: 13:42
    }

    bb25 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/destructure-array-1.rs:10:1: 17:2
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u8;                      // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:16:22: 16:23

    bb0: {
        _1 = const 8_u8;                 // scope 0 at ui/array-slice-vec/destructure-array-1.rs:16:22: 16:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u8;                      // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:15:22: 15:23

    bb0: {
        _1 = const 2_u8;                 // scope 0 at ui/array-slice-vec/destructure-array-1.rs:15:22: 15:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn d(_1: u8) -> D {
    debug x => _1;                       // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:11:10: 11:11
    let mut _0: D;                       // return place in scope 0 at ui/array-slice-vec/destructure-array-1.rs:11:20: 11:21
    let mut _2: u8;                      // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:11:31: 11:32

    bb0: {
        _2 = _1;                         // scope 0 at ui/array-slice-vec/destructure-array-1.rs:11:31: 11:32
        _0 = D { x: move _2 };           // scope 0 at ui/array-slice-vec/destructure-array-1.rs:11:24: 11:34
        return;                          // scope 0 at ui/array-slice-vec/destructure-array-1.rs:11:36: 11:36
    }
}

fn foo(_1: [D; 4], _2: usize) -> D {
    debug i => _2;                       // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:30: 19:31
    let mut _0: D;                       // return place in scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:43: 19:44
    let _3: D;                           // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:9: 19:10
    let _4: D;                           // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:12: 19:13
    let _5: D;                           // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:15: 19:16
    let _6: D;                           // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:18: 19:19
    let mut _7: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    let mut _10: bool;                   // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    scope 1 {
        debug a => _3;                   // in scope 1 at ui/array-slice-vec/destructure-array-1.rs:19:9: 19:10
        debug b => _4;                   // in scope 1 at ui/array-slice-vec/destructure-array-1.rs:19:12: 19:13
        debug c => _5;                   // in scope 1 at ui/array-slice-vec/destructure-array-1.rs:19:15: 19:16
        debug d => _6;                   // in scope 1 at ui/array-slice-vec/destructure-array-1.rs:19:18: 19:19
    }

    bb0: {
        _9 = const false;                // scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:9: 19:10
        _10 = const false;               // scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:9: 19:10
        _8 = const false;                // scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:9: 19:10
        _11 = const false;               // scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:9: 19:10
        _11 = const true;                // scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:9: 19:10
        _3 = move _1[0 of 4];            // scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:9: 19:10
        _10 = const true;                // scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:12: 19:13
        _4 = move _1[1 of 4];            // scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:12: 19:13
        _9 = const true;                 // scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:15: 19:16
        _5 = move _1[2 of 4];            // scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:15: 19:16
        _8 = const true;                 // scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:18: 19:19
        _6 = move _1[3 of 4];            // scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:18: 19:19
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, otherwise: bb1]; // scope 1 at ui/array-slice-vec/destructure-array-1.rs:20:5: 20:12
    }

    bb1: {
        _7 = begin_panic::<&str>(const "unmatched") -> bb10; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/destructure-array-1.rs:25:21: 25:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _11 = const false;               // scope 1 at ui/array-slice-vec/destructure-array-1.rs:21:14: 21:15
        _0 = move _3;                    // scope 1 at ui/array-slice-vec/destructure-array-1.rs:21:14: 21:15
        goto -> bb15;                    // scope 1 at ui/array-slice-vec/destructure-array-1.rs:21:14: 21:15
    }

    bb3: {
        _10 = const false;               // scope 1 at ui/array-slice-vec/destructure-array-1.rs:22:14: 22:15
        _0 = move _4;                    // scope 1 at ui/array-slice-vec/destructure-array-1.rs:22:14: 22:15
        goto -> bb15;                    // scope 1 at ui/array-slice-vec/destructure-array-1.rs:22:14: 22:15
    }

    bb4: {
        _9 = const false;                // scope 1 at ui/array-slice-vec/destructure-array-1.rs:23:14: 23:15
        _0 = move _5;                    // scope 1 at ui/array-slice-vec/destructure-array-1.rs:23:14: 23:15
        goto -> bb15;                    // scope 1 at ui/array-slice-vec/destructure-array-1.rs:23:14: 23:15
    }

    bb5: {
        _8 = const false;                // scope 1 at ui/array-slice-vec/destructure-array-1.rs:24:14: 24:15
        _0 = move _6;                    // scope 1 at ui/array-slice-vec/destructure-array-1.rs:24:14: 24:15
        goto -> bb15;                    // scope 1 at ui/array-slice-vec/destructure-array-1.rs:24:14: 24:15
    }

    bb6: {
        _8 = const false;                // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
        switchInt(_9) -> [0: bb7, otherwise: bb16]; // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    }

    bb7: {
        _9 = const false;                // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
        switchInt(_10) -> [0: bb8, otherwise: bb17]; // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    }

    bb8: {
        _10 = const false;               // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
        switchInt(_11) -> [0: bb9, otherwise: bb18]; // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    }

    bb9: {
        _11 = const false;               // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
        return;                          // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:2: 27:2
    }

    bb10 (cleanup): {
        drop(_6) -> bb20;                // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    }

    bb11 (cleanup): {
        switchInt(_10) -> [0: bb12, otherwise: bb21]; // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    }

    bb12 (cleanup): {
        switchInt(_11) -> [0: bb13, otherwise: bb22]; // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:1: 27:2
    }

    bb14: {
        drop(_6) -> [return: bb6, unwind: bb20]; // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    }

    bb15: {
        switchInt(_8) -> [0: bb6, otherwise: bb14]; // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    }

    bb16: {
        drop(_5) -> [return: bb7, unwind: bb11]; // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    }

    bb17: {
        drop(_4) -> [return: bb8, unwind: bb12]; // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    }

    bb18: {
        drop(_3) -> bb9;                 // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    }

    bb19 (cleanup): {
        drop(_5) -> bb11;                // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    }

    bb20 (cleanup): {
        switchInt(_9) -> [0: bb11, otherwise: bb19]; // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    }

    bb21 (cleanup): {
        drop(_4) -> bb12;                // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    }

    bb22 (cleanup): {
        drop(_3) -> bb13;                // scope 0 at ui/array-slice-vec/destructure-array-1.rs:27:1: 27:2
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:26: 19:27

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:26: 19:27
        return;                          // scope 0 at ui/array-slice-vec/destructure-array-1.rs:19:26: 19:27
    }
}
