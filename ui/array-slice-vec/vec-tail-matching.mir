// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [Foo; 3];
    let mut _2: Foo;
    let mut _3: Foo;
    let mut _4: Foo;
    let mut _7: (&&str, &&str);
    let mut _8: &&str;
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&usize, &usize);
    let mut _17: &usize;
    let _18: usize;
    let mut _19: &[Foo];
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&&str, &&str);
    let mut _30: &&str;
    let _31: usize;
    let mut _32: usize;
    let mut _33: bool;
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&&str, &&str);
    let mut _42: &&str;
    let _43: usize;
    let mut _44: usize;
    let mut _45: bool;
    let mut _48: bool;
    let mut _49: bool;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: &[Foo];
    let mut _54: usize;
    let mut _55: usize;
    let mut _56: bool;
    let mut _57: usize;
    let mut _58: usize;
    let mut _59: bool;
    let _61: !;
    let mut _64: (&&str, &&str);
    let mut _65: &&str;
    let _66: &str;
    let _67: &str;
    let mut _68: std::ops::Range<usize>;
    let mut _69: usize;
    let mut _72: bool;
    let mut _73: bool;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: (&&str, &&str);
    let mut _78: &&str;
    let _79: &str;
    let _80: &str;
    let mut _81: std::ops::Range<usize>;
    let mut _82: usize;
    let mut _85: bool;
    let mut _86: bool;
    let _88: !;
    let mut _89: std::option::Option<std::fmt::Arguments<'_>>;
    let _90: !;
    let mut _97: &str;
    let mut _98: &str;
    let mut _99: &str;
    let mut _100: &str;
    scope 1 {
        debug x => _1;
        let _5: &Foo;
        let _6: &[Foo; 2];
        scope 2 {
            debug first => _5;
            debug tail => _6;
            let _9: &&str;
            let _10: &&str;
            let _20: &usize;
            let _21: &usize;
            let _34: &&str;
            let _35: &&str;
            let _46: &&str;
            let _47: &&str;
            let _60: &[Foo];
            let _62: &&str;
            let _63: &&str;
            let mut _93: &&str;
            let mut _94: &&str;
            let mut _95: &usize;
            let mut _96: &&str;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _26: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _26;
                }
            }
            scope 7 {
                debug left_val => _34;
                debug right_val => _35;
                let _38: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _38;
                }
            }
            scope 9 {
                debug left_val => _46;
                debug right_val => _47;
                let _50: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _50;
                }
            }
            scope 11 {
                debug _tail => _60;
            }
            scope 12 {
                debug a => _62;
                debug b => _63;
                let _70: &&str;
                let _71: &&str;
                let _83: &&str;
                let _84: &&str;
                let mut _91: &&str;
                let mut _92: &&str;
                scope 13 {
                    debug left_val => _70;
                    debug right_val => _71;
                    let _74: core::panicking::AssertKind;
                    scope 14 {
                        debug kind => _74;
                    }
                }
                scope 15 {
                    debug left_val => _83;
                    debug right_val => _84;
                    let _87: core::panicking::AssertKind;
                    scope 16 {
                        debug kind => _87;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = Foo { string: const "foo" };
        _3 = Foo { string: const "bar" };
        _4 = Foo { string: const "baz" };
        _1 = [move _2, move _3, move _4];
        _5 = &_1[0 of 3];
        _6 = &_1[1..3];
        _8 = &((*_5).0: &str);
        _96 = const _;
        _7 = (move _8, _96);
        _9 = (_7.0: &&str);
        _10 = (_7.1: &&str);
        _12 = <&str as PartialEq>::eq(_9, _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<&str, &str>(move _13, _9, _10, move _15) -> unwind continue;
    }

    bb3: {
        _19 = _6 as &[Foo] (Pointer(Unsize));
        _18 = Len((*_19));
        _17 = &_18;
        _95 = const _;
        _16 = (move _17, _95);
        _20 = (_16.0: &usize);
        _21 = (_16.1: &usize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<usize, usize>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb5: {
        _31 = const 0_usize;
        _32 = const 2_usize;
        _33 = Lt(_31, _32);
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> [success: bb6, unwind continue];
    }

    bb6: {
        _30 = &((*_6)[_31].0: &str);
        _94 = const _;
        _29 = (move _30, _94);
        _34 = (_29.0: &&str);
        _35 = (_29.1: &&str);
        _37 = <&str as PartialEq>::eq(_34, _35) -> [return: bb7, unwind continue];
    }

    bb7: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<&str, &str>(move _38, _34, _35, move _40) -> unwind continue;
    }

    bb9: {
        _43 = const 1_usize;
        _44 = const 2_usize;
        _45 = Lt(_43, _44);
        assert(move _45, "index out of bounds: the length is {} but the index is {}", move _44, _43) -> [success: bb10, unwind continue];
    }

    bb10: {
        _42 = &((*_6)[_43].0: &str);
        _93 = const _;
        _41 = (move _42, _93);
        _46 = (_41.0: &&str);
        _47 = (_41.1: &&str);
        _49 = <&str as PartialEq>::eq(_46, _47) -> [return: bb11, unwind continue];
    }

    bb11: {
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<&str, &str>(move _50, _46, _47, move _52) -> unwind continue;
    }

    bb13: {
        _53 = _6 as &[Foo] (Pointer(Unsize));
        _57 = Len((*_53));
        _58 = const 3_usize;
        _59 = Ge(move _57, move _58);
        switchInt(move _59) -> [0: bb14, otherwise: bb16];
    }

    bb14: {
        _54 = Len((*_53));
        _55 = const 2_usize;
        _56 = Eq(move _54, move _55);
        switchInt(move _56) -> [0: bb15, otherwise: bb17];
    }

    bb15: {
        _90 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb16: {
        _60 = &(*_53)[3:];
        _61 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb17: {
        _62 = &((*_53)[0 of 2].0: &str);
        _63 = &((*_53)[1 of 2].0: &str);
        _92 = const _;
        _97 = deref_copy (*_62);
        _98 = deref_copy (*_62);
        _69 = core::str::<impl str>::len(_98) -> [return: bb18, unwind continue];
    }

    bb18: {
        _68 = std::ops::Range::<usize> { start: const 0_usize, end: move _69 };
        _67 = <str as Index<std::ops::Range<usize>>>::index(_97, move _68) -> [return: bb19, unwind continue];
    }

    bb19: {
        _66 = _67;
        _65 = &_66;
        _64 = (_92, move _65);
        _70 = (_64.0: &&str);
        _71 = (_64.1: &&str);
        _73 = <&str as PartialEq>::eq(_70, _71) -> [return: bb20, unwind continue];
    }

    bb20: {
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _74 = core::panicking::AssertKind::Eq;
        _76 = Option::<Arguments<'_>>::None;
        _75 = core::panicking::assert_failed::<&str, &str>(move _74, _70, _71, move _76) -> unwind continue;
    }

    bb22: {
        _91 = const _;
        _99 = deref_copy (*_63);
        _100 = deref_copy (*_63);
        _82 = core::str::<impl str>::len(_100) -> [return: bb23, unwind continue];
    }

    bb23: {
        _81 = std::ops::Range::<usize> { start: const 0_usize, end: move _82 };
        _80 = <str as Index<std::ops::Range<usize>>>::index(_99, move _81) -> [return: bb24, unwind continue];
    }

    bb24: {
        _79 = _80;
        _78 = &_79;
        _77 = (_91, move _78);
        _83 = (_77.0: &&str);
        _84 = (_77.1: &&str);
        _86 = <&str as PartialEq>::eq(_83, _84) -> [return: bb25, unwind continue];
    }

    bb25: {
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _87 = core::panicking::AssertKind::Eq;
        _89 = Option::<Arguments<'_>>::None;
        _88 = core::panicking::assert_failed::<&str, &str>(move _87, _83, _84, move _89) -> unwind continue;
    }

    bb27: {
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "baz";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "bar";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "baz";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "bar";
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "foo";
        _0 = &_1;
        return;
    }
}
