// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/array-slice-vec/rcvr-borrowed-to-slice.rs:10:1: 10:29>::sum_(_1: &[isize]) -> isize {
    debug self => _1;
    let mut _0: isize;
    let mut _2: std::slice::Iter<'_, isize>;

    bb0: {
        _2 = core::slice::<impl [isize]>::iter(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <std::slice::Iter<'_, isize> as Iterator>::fold::<isize, [closure@ui/array-slice-vec/rcvr-borrowed-to-slice.rs:12:29: 12:36]>(move _2, const 0_isize, const ZeroSized: [closure@ui/array-slice-vec/rcvr-borrowed-to-slice.rs:12:29: 12:36]) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn <impl at ui/array-slice-vec/rcvr-borrowed-to-slice.rs:10:1: 10:29>::sum_::{closure#0}(_1: &mut [closure@ui/array-slice-vec/rcvr-borrowed-to-slice.rs:12:29: 12:36], _2: isize, _3: &isize) -> isize {
    debug a => _2;
    let mut _0: isize;
    let _4: isize;
    scope 1 {
        debug b => _4;
    }

    bb0: {
        _4 = (*_3);
        _0 = Add(_2, _4);
        return;
    }
}

fn call_sum(_1: &[isize]) -> isize {
    debug x => _1;
    let mut _0: isize;

    bb0: {
        _0 = <&[isize] as sum>::sum_(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<isize>;
    let mut _2: std::boxed::Box<[isize]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[isize; 3]>;
    let mut _8: &[isize];
    let _9: &[isize];
    let _10: &std::vec::Vec<isize>;
    let _11: ();
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: [core::fmt::rt::Argument<'_>; 1];
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &isize;
    let mut _19: (&isize, &isize);
    let mut _20: &isize;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: isize;
    let mut _26: isize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: std::boxed::Box<[isize]>;
    let mut _32: usize;
    let mut _33: usize;
    let mut _34: *mut u8;
    let mut _35: std::boxed::Box<[isize; 3]>;
    let mut _37: &[isize];
    let _38: &[isize];
    let mut _39: &std::vec::Vec<isize>;
    let _40: ();
    let mut _41: std::fmt::Arguments<'_>;
    let mut _42: &[&str];
    let mut _43: &[core::fmt::rt::Argument<'_>];
    let _44: &[core::fmt::rt::Argument<'_>; 1];
    let _45: [core::fmt::rt::Argument<'_>; 1];
    let mut _46: core::fmt::rt::Argument<'_>;
    let _47: &isize;
    let mut _48: (&isize, &isize);
    let mut _49: &isize;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: isize;
    let mut _55: isize;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _60: std::boxed::Box<[isize]>;
    let mut _61: usize;
    let mut _62: usize;
    let mut _63: *mut u8;
    let mut _64: std::boxed::Box<[isize; 3]>;
    let mut _66: &[isize];
    let _67: &[isize];
    let mut _68: &std::vec::Vec<isize>;
    let _69: ();
    let mut _70: std::fmt::Arguments<'_>;
    let mut _71: &[&str];
    let mut _72: &[core::fmt::rt::Argument<'_>];
    let _73: &[core::fmt::rt::Argument<'_>; 1];
    let _74: [core::fmt::rt::Argument<'_>; 1];
    let mut _75: core::fmt::rt::Argument<'_>;
    let _76: &isize;
    let mut _77: (&isize, &isize);
    let mut _78: &isize;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: isize;
    let mut _84: isize;
    let _86: !;
    let mut _87: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _94: *const [isize; 3];
    let mut _95: *const [isize; 3];
    let mut _96: *const [isize; 3];
    let mut _109: *const ();
    let mut _110: usize;
    let mut _111: usize;
    let mut _112: usize;
    let mut _113: usize;
    let mut _114: bool;
    scope 1 {
        debug x => _1;
        let _7: isize;
        scope 3 {
            debug y => _7;
            let _21: &isize;
            let _22: &isize;
            let _30: std::vec::Vec<isize>;
            let mut _92: &isize;
            let mut _93: &[&str; 2];
            let mut _103: *const ();
            let mut _104: usize;
            let mut _105: usize;
            let mut _106: usize;
            let mut _107: usize;
            let mut _108: bool;
            scope 4 {
                debug left_val => _21;
                debug right_val => _22;
                let _27: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _27;
                }
            }
            scope 6 {
                debug x => _30;
                let _36: isize;
                scope 8 {
                    debug y => _36;
                    let _50: &isize;
                    let _51: &isize;
                    let _59: std::vec::Vec<isize>;
                    let mut _90: &isize;
                    let mut _91: &[&str; 2];
                    let mut _97: *const ();
                    let mut _98: usize;
                    let mut _99: usize;
                    let mut _100: usize;
                    let mut _101: usize;
                    let mut _102: bool;
                    scope 9 {
                        debug left_val => _50;
                        debug right_val => _51;
                        let _56: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _56;
                        }
                    }
                    scope 11 {
                        debug x => _59;
                        let _65: isize;
                        scope 13 {
                            debug y => _65;
                            let _79: &isize;
                            let _80: &isize;
                            let mut _88: &isize;
                            let mut _89: &[&str; 2];
                            scope 14 {
                                debug left_val => _79;
                                debug right_val => _80;
                                let _85: core::panicking::AssertKind;
                                scope 15 {
                                    debug kind => _85;
                                }
                            }
                        }
                    }
                    scope 12 {
                    }
                }
            }
            scope 7 {
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([isize; 3]);
        _4 = AlignOf([isize; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [isize; 3]);
        _94 = (((_6.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _109 = _94 as *const () (PtrToPtr);
        _110 = _109 as usize (Transmute);
        _111 = AlignOf(isize);
        _112 = Sub(_111, const 1_usize);
        _113 = BitAnd(_110, _112);
        _114 = Eq(_113, const 0_usize);
        assert(_114, "misaligned pointer dereference: address must be a multiple of {} but is {}", _111, _110) -> [success: bb37, unwind unreachable];
    }

    bb2: {
        _10 = &_1;
        _9 = <Vec<isize> as Deref>::deref(_10) -> [return: bb3, unwind: bb33];
    }

    bb3: {
        _8 = _9;
        _7 = call_sum(move _8) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _93 = const _;
        _13 = _93 as &[&str] (Pointer(Unsize));
        _18 = &_7;
        _17 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_18) -> [return: bb5, unwind: bb33];
    }

    bb5: {
        _16 = [move _17];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        _11 = _print(move _12) -> [return: bb7, unwind: bb33];
    }

    bb7: {
        _20 = &_7;
        _92 = const _;
        _19 = (move _20, _92);
        _21 = (_19.0: &isize);
        _22 = (_19.1: &isize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<isize, isize>(move _27, _21, _22, move _29) -> bb33;
    }

    bb9: {
        _32 = SizeOf([isize; 3]);
        _33 = AlignOf([isize; 3]);
        _34 = alloc::alloc::exchange_malloc(move _32, move _33) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        _35 = ShallowInitBox(move _34, [isize; 3]);
        _95 = (((_35.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _103 = _95 as *const () (PtrToPtr);
        _104 = _103 as usize (Transmute);
        _105 = AlignOf(isize);
        _106 = Sub(_105, const 1_usize);
        _107 = BitAnd(_104, _106);
        _108 = Eq(_107, const 0_usize);
        assert(_108, "misaligned pointer dereference: address must be a multiple of {} but is {}", _105, _104) -> [success: bb36, unwind unreachable];
    }

    bb11: {
        _39 = &_30;
        _38 = <Vec<isize> as Deref>::deref(move _39) -> [return: bb12, unwind: bb32];
    }

    bb12: {
        _37 = _38;
        _36 = <&[isize] as sum>::sum_(move _37) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        _91 = const _;
        _42 = _91 as &[&str] (Pointer(Unsize));
        _47 = &_36;
        _46 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_47) -> [return: bb14, unwind: bb32];
    }

    bb14: {
        _45 = [move _46];
        _44 = &_45;
        _43 = _44 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _41 = Arguments::<'_>::new_v1(move _42, move _43) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        _40 = _print(move _41) -> [return: bb16, unwind: bb32];
    }

    bb16: {
        _49 = &_36;
        _90 = const _;
        _48 = (move _49, _90);
        _50 = (_48.0: &isize);
        _51 = (_48.1: &isize);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<isize, isize>(move _56, _50, _51, move _58) -> bb32;
    }

    bb18: {
        _61 = SizeOf([isize; 3]);
        _62 = AlignOf([isize; 3]);
        _63 = alloc::alloc::exchange_malloc(move _61, move _62) -> [return: bb19, unwind: bb32];
    }

    bb19: {
        _64 = ShallowInitBox(move _63, [isize; 3]);
        _96 = (((_64.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _97 = _96 as *const () (PtrToPtr);
        _98 = _97 as usize (Transmute);
        _99 = AlignOf(isize);
        _100 = Sub(_99, const 1_usize);
        _101 = BitAnd(_98, _100);
        _102 = Eq(_101, const 0_usize);
        assert(_102, "misaligned pointer dereference: address must be a multiple of {} but is {}", _99, _98) -> [success: bb35, unwind unreachable];
    }

    bb20: {
        _68 = &_59;
        _67 = <Vec<isize> as Deref>::deref(move _68) -> [return: bb21, unwind: bb31];
    }

    bb21: {
        _66 = _67;
        _65 = <&[isize] as sum>::sum_(move _66) -> [return: bb22, unwind: bb31];
    }

    bb22: {
        _89 = const _;
        _71 = _89 as &[&str] (Pointer(Unsize));
        _76 = &_65;
        _75 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_76) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        _74 = [move _75];
        _73 = &_74;
        _72 = _73 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _70 = Arguments::<'_>::new_v1(move _71, move _72) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        _69 = _print(move _70) -> [return: bb25, unwind: bb31];
    }

    bb25: {
        _78 = &_65;
        _88 = const _;
        _77 = (move _78, _88);
        _79 = (_77.0: &isize);
        _80 = (_77.1: &isize);
        _83 = (*_79);
        _84 = (*_80);
        _82 = Eq(move _83, move _84);
        _81 = Not(move _82);
        switchInt(move _81) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _85 = core::panicking::AssertKind::Eq;
        _87 = Option::<Arguments<'_>>::None;
        _86 = core::panicking::assert_failed::<isize, isize>(move _85, _79, _80, move _87) -> bb31;
    }

    bb27: {
        drop(_59) -> [return: bb28, unwind: bb32];
    }

    bb28: {
        drop(_30) -> [return: bb29, unwind: bb33];
    }

    bb29: {
        drop(_1) -> [return: bb30, unwind continue];
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_59) -> [return: bb32, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_30) -> [return: bb33, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_1) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        resume;
    }

    bb35: {
        (*_96) = [const 1_isize, const 2_isize, const 3_isize];
        _60 = move _64 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _59 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _60) -> [return: bb20, unwind: bb32];
    }

    bb36: {
        (*_95) = [const 1_isize, const 2_isize, const 3_isize];
        _31 = move _35 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _30 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _31) -> [return: bb11, unwind: bb33];
    }

    bb37: {
        (*_94) = [const 1_isize, const 2_isize, const 3_isize];
        _2 = move _6 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _1 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 6_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "y==", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 6_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "y==", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 6_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "y==", const "\n"];
        _0 = &_1;
        return;
    }
}
