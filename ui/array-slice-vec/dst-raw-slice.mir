// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/dst-raw-slice.rs:8:11: 8:11
    let _1: *const [i32];                // in scope 0 at ui/array-slice-vec/dst-raw-slice.rs:9:9: 9:10
    let mut _2: *const [i32; 3];         // in scope 0 at ui/array-slice-vec/dst-raw-slice.rs:9:25: 9:35
    let _3: &[i32; 3];                   // in scope 0 at ui/array-slice-vec/dst-raw-slice.rs:9:25: 9:35
    let _5: usize;                       // in scope 0 at ui/array-slice-vec/dst-raw-slice.rs:11:23: 11:24
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/dst-raw-slice.rs:11:18: 11:25
    let mut _7: bool;                    // in scope 0 at ui/array-slice-vec/dst-raw-slice.rs:11:18: 11:25
    let mut _8: &[i32; 3];               // in scope 0 at ui/array-slice-vec/dst-raw-slice.rs:9:25: 9:35
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/array-slice-vec/dst-raw-slice.rs:9:9: 9:10
        scope 2 {
            let _4: i32;                 // in scope 2 at ui/array-slice-vec/dst-raw-slice.rs:11:13: 11:15
            scope 3 {
                debug _b => _4;          // in scope 3 at ui/array-slice-vec/dst-raw-slice.rs:11:13: 11:15
            }
        }
    }

    bb0: {
        _8 = const _;                    // scope 0 at ui/array-slice-vec/dst-raw-slice.rs:9:25: 9:35
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/dst-raw-slice.rs:9:25: 9:35
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _8;                         // scope 0 at ui/array-slice-vec/dst-raw-slice.rs:9:25: 9:35
        _2 = &raw const (*_3);           // scope 0 at ui/array-slice-vec/dst-raw-slice.rs:9:25: 9:35
        _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/dst-raw-slice.rs:9:25: 9:35
        _5 = const 3_usize;              // scope 2 at ui/array-slice-vec/dst-raw-slice.rs:11:23: 11:24
        _6 = Len((*_1));                 // scope 2 at ui/array-slice-vec/dst-raw-slice.rs:11:18: 11:25
        _7 = Lt(_5, _6);                 // scope 2 at ui/array-slice-vec/dst-raw-slice.rs:11:18: 11:25
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> bb1; // scope 2 at ui/array-slice-vec/dst-raw-slice.rs:11:18: 11:25
    }

    bb1: {
        _4 = (*_1)[_5];                  // scope 2 at ui/array-slice-vec/dst-raw-slice.rs:11:18: 11:25
        return;                          // scope 0 at ui/array-slice-vec/dst-raw-slice.rs:13:2: 13:2
    }
}

promoted[0] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at ui/array-slice-vec/dst-raw-slice.rs:9:25: 9:35
    let mut _1: [i32; 3];                // in scope 0 at ui/array-slice-vec/dst-raw-slice.rs:9:26: 9:35

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/array-slice-vec/dst-raw-slice.rs:9:26: 9:35
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/dst-raw-slice.rs:9:25: 9:35
        return;                          // scope 0 at ui/array-slice-vec/dst-raw-slice.rs:9:25: 9:35
    }
}
