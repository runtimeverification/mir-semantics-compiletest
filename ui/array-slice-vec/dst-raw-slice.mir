// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: *const [i32];
    let mut _2: *const [i32; 3];
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: &[i32; 3];
    scope 1 {
        debug a => _1;
        scope 2 {
            let _3: i32;
            let mut _8: *const ();
            let mut _9: usize;
            let mut _10: usize;
            let mut _11: usize;
            let mut _12: usize;
            let mut _13: bool;
            let mut _14: *const ();
            let mut _15: usize;
            let mut _16: usize;
            let mut _17: usize;
            let mut _18: usize;
            let mut _19: bool;
            scope 3 {
                debug _b => _3;
            }
        }
    }

    bb0: {
        _7 = const _;
        _2 = &raw const (*_7);
        _1 = move _2 as *const [i32] (Pointer(Unsize));
        _4 = const 3_usize;
        _14 = _1 as *const () (PtrToPtr);
        _15 = _14 as usize (Transmute);
        _16 = AlignOf(i32);
        _17 = Sub(_16, const 1_usize);
        _18 = BitAnd(_15, _17);
        _19 = Eq(_18, const 0_usize);
        assert(_19, "misaligned pointer dereference: address must be a multiple of {} but is {}", _16, _15) -> [success: bb3, unwind unreachable];
    }

    bb1: {
        _8 = _1 as *const () (PtrToPtr);
        _9 = _8 as usize (Transmute);
        _10 = AlignOf(i32);
        _11 = Sub(_10, const 1_usize);
        _12 = BitAnd(_9, _11);
        _13 = Eq(_12, const 0_usize);
        assert(_13, "misaligned pointer dereference: address must be a multiple of {} but is {}", _10, _9) -> [success: bb2, unwind unreachable];
    }

    bb2: {
        _3 = (*_1)[_4];
        return;
    }

    bb3: {
        _5 = Len((*_1));
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> [success: bb1, unwind continue];
    }
}

promoted[0] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}
