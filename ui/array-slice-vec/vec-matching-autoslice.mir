// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [i32; 3];
    let mut _2: !;
    let mut _5: (&[i32; 2], &[i32; 2]);
    let mut _6: &[i32; 2];
    let _7: [i32; 2];
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: !;
    let mut _17: [(i32, bool); 2];
    let mut _18: (i32, bool);
    let mut _19: (i32, bool);
    let mut _20: bool;
    let mut _23: (&bool, &bool);
    let mut _24: &bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&i32, &i32);
    let mut _35: &i32;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: i32;
    let mut _41: i32;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: !;
    let mut _46: !;
    scope 1 {
        debug x => _1;
        let _3: i32;
        let _4: i32;
        let _16: ([(i32, bool); 2], f64);
        scope 2 {
            debug a => _3;
            debug b => _4;
            let _8: &[i32; 2];
            let _9: &[i32; 2];
            let mut _49: &[i32; 2];
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
        }
        scope 5 {
            debug y => _16;
            let _21: bool;
            let _22: i32;
            scope 6 {
                debug a => _21;
                debug b => _22;
                let _25: &bool;
                let _26: &bool;
                let _36: &i32;
                let _37: &i32;
                let mut _47: &i32;
                let mut _48: &bool;
                scope 7 {
                    debug left_val => _25;
                    debug right_val => _26;
                    let _31: core::panicking::AssertKind;
                    scope 8 {
                        debug kind => _31;
                    }
                }
                scope 9 {
                    debug left_val => _36;
                    debug right_val => _37;
                    let _42: core::panicking::AssertKind;
                    scope 10 {
                        debug kind => _42;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        switchInt(_1[0 of 3]) -> [2: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        _15 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb2: {
        _2 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb3: {
        _3 = _1[1 of 3];
        _4 = _1[2 of 3];
        _7 = [_3, _4];
        _6 = &_7;
        _49 = const _;
        _5 = (move _6, _49);
        _8 = (_5.0: &[i32; 2]);
        _9 = (_5.1: &[i32; 2]);
        _11 = <[i32; 2] as PartialEq>::eq(_8, _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<[i32; 2], [i32; 2]>(move _12, _8, _9, move _14) -> unwind continue;
    }

    bb6: {
        _18 = (const 1_i32, const true);
        _19 = (const 2_i32, const false);
        _17 = [move _18, move _19];
        _16 = (move _17, const 0.5f64);
        switchInt(((_16.0: [(i32, bool); 2])[0 of 2].0: i32)) -> [1: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt(((_16.0: [(i32, bool); 2])[1 of 2].1: bool)) -> [0: bb10, otherwise: bb8];
    }

    bb8: {
        _20 = Eq(const 0.5f64, (_16.1: f64));
        switchInt(move _20) -> [0: bb9, otherwise: bb15];
    }

    bb9: {
        _46 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb10: {
        _21 = ((_16.0: [(i32, bool); 2])[0 of 2].1: bool);
        _22 = ((_16.0: [(i32, bool); 2])[1 of 2].0: i32);
        _24 = &_21;
        _48 = const _;
        _23 = (move _24, _48);
        _25 = (_23.0: &bool);
        _26 = (_23.1: &bool);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<bool, bool>(move _31, _25, _26, move _33) -> unwind continue;
    }

    bb12: {
        _35 = &_22;
        _47 = const _;
        _34 = (move _35, _47);
        _36 = (_34.0: &i32);
        _37 = (_34.1: &i32);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<i32, i32>(move _42, _36, _37, move _44) -> unwind continue;
    }

    bb14: {
        return;
    }

    bb15: {
        _45 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}
